

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Sep 20 17:05:48 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           	psect	idataCOMRAM
    90  00356E                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _countup
    94  00356E  0001               	dw	1
    95                           
    96                           	psect	idataBANK1
    97  003524                     __pidataBANK1:
    98                           	opt stack 0
    99                           
   100                           ;initializer for BT_Init@F5675
   101  003524  41                 	db	65
   102  003525  54                 	db	84
   103  003526  2B                 	db	43
   104  003527  4E                 	db	78
   105  003528  41                 	db	65
   106  003529  4D                 	db	77
   107  00352A  45                 	db	69
   108  00352B  3D                 	db	61
   109  00352C  72                 	db	114
   110  00352D  6F                 	db	111
   111  00352E  62                 	db	98
   112  00352F  6F                 	db	111
   113  003530  74                 	db	116
   114  003531  0D                 	db	13
   115  003532  0A                 	db	10
   116  003533  00                 	db	0
   117  003534  00                 	db	0
   118  003535  00                 	db	0
   119                           
   120                           	psect	mediumconst
   121  007E9C                     __pmediumconst:
   122                           	opt stack 0
   123  007E9C  00                 	db	0
   124  007E9D                     _dpowers:
   125                           	opt stack 0
   126  007E9D  0001               	dw	1
   127  007E9F  0000               	dw	0
   128  007EA1  000A               	dw	10
   129  007EA3  0000               	dw	0
   130  007EA5  0064               	dw	100
   131  007EA7  0000               	dw	0
   132  007EA9  03E8               	dw	1000
   133  007EAB  0000               	dw	0
   134  007EAD  2710               	dw	10000
   135  007EAF  0000               	dw	0
   136  007EB1  86A0               	dw	34464
   137  007EB3  0001               	dw	1
   138  007EB5  4240               	dw	16960
   139  007EB7  000F               	dw	15
   140  007EB9  9680               	dw	38528
   141  007EBB  0098               	dw	152
   142  007EBD  E100               	dw	57600
   143  007EBF  05F5               	dw	1525
   144  007EC1  CA00               	dw	51712
   145  007EC3  3B9A               	dw	15258
   146  007EC5                     __end_of_dpowers:
   147                           	opt stack 0
   148  007EC5                     __npowers_:
   149                           	opt stack 0
   150  007EC5  00                 	db	0
   151  007EC6  80                 	db	128
   152  007EC7  3F                 	db	63
   153  007EC8  CD                 	db	205
   154  007EC9  CC                 	db	204
   155  007ECA  3D                 	db	61
   156  007ECB  D7                 	db	215
   157  007ECC  23                 	db	35
   158  007ECD  3C                 	db	60
   159  007ECE  12                 	db	18
   160  007ECF  83                 	db	131
   161  007ED0  3A                 	db	58
   162  007ED1  B7                 	db	183
   163  007ED2  D1                 	db	209
   164  007ED3  38                 	db	56
   165  007ED4  C6                 	db	198
   166  007ED5  27                 	db	39
   167  007ED6  37                 	db	55
   168  007ED7  38                 	db	56
   169  007ED8  86                 	db	134
   170  007ED9  35                 	db	53
   171  007EDA  C0                 	db	192
   172  007EDB  D6                 	db	214
   173  007EDC  33                 	db	51
   174  007EDD  CC                 	db	204
   175  007EDE  2B                 	db	43
   176  007EDF  32                 	db	50
   177  007EE0  70                 	db	112
   178  007EE1  89                 	db	137
   179  007EE2  30                 	db	48
   180  007EE3  E7                 	db	231
   181  007EE4  DB                 	db	219
   182  007EE5  2E                 	db	46
   183  007EE6  E5                 	db	229
   184  007EE7  3C                 	db	60
   185  007EE8  1E                 	db	30
   186  007EE9  42                 	db	66
   187  007EEA  A2                 	db	162
   188  007EEB  0D                 	db	13
   189  007EEC                     __end_of__npowers_:
   190                           	opt stack 0
   191  007EEC                     __powers_:
   192                           	opt stack 0
   193  007EEC  00                 	db	0
   194  007EED  80                 	db	128
   195  007EEE  3F                 	db	63
   196  007EEF  00                 	db	0
   197  007EF0  20                 	db	32
   198  007EF1  41                 	db	65
   199  007EF2  00                 	db	0
   200  007EF3  C8                 	db	200
   201  007EF4  42                 	db	66
   202  007EF5  00                 	db	0
   203  007EF6  7A                 	db	122
   204  007EF7  44                 	db	68
   205  007EF8  40                 	db	64
   206  007EF9  1C                 	db	28
   207  007EFA  46                 	db	70
   208  007EFB  50                 	db	80
   209  007EFC  C3                 	db	195
   210  007EFD  47                 	db	71
   211  007EFE  24                 	db	36
   212  007EFF  74                 	db	116
   213  007F00  49                 	db	73
   214  007F01  97                 	db	151
   215  007F02  18                 	db	24
   216  007F03  4B                 	db	75
   217  007F04  BC                 	db	188
   218  007F05  BE                 	db	190
   219  007F06  4C                 	db	76
   220  007F07  6B                 	db	107
   221  007F08  6E                 	db	110
   222  007F09  4E                 	db	78
   223  007F0A  03                 	db	3
   224  007F0B  15                 	db	21
   225  007F0C  50                 	db	80
   226  007F0D  79                 	db	121
   227  007F0E  AD                 	db	173
   228  007F0F  60                 	db	96
   229  007F10  F3                 	db	243
   230  007F11  49                 	db	73
   231  007F12  71                 	db	113
   232  007F13                     __end_of__powers_:
   233                           	opt stack 0
   234  0000                     _ADCON1bits	set	4033
   235  0000                     _CCP1CON	set	4029
   236  0000                     _CCP2CON	set	4026
   237  0000                     _CCPR1L	set	4030
   238  0000                     _CCPR2L	set	4027
   239  0000                     _INTCON	set	4082
   240  0000                     _INTCON2bits	set	4081
   241  0000                     _INTCON3bits	set	4080
   242  0000                     _INTCONbits	set	4082
   243  0000                     _OSCCONbits	set	4051
   244  0000                     _PIE1	set	3997
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PORTA	set	3968
   248  0000                     _PORTAbits	set	3968
   249  0000                     _PORTB	set	3969
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTC	set	3970
   252  0000                     _PORTCbits	set	3970
   253  0000                     _PORTD	set	3971
   254  0000                     _PORTDbits	set	3971
   255  0000                     _PORTE	set	3972
   256  0000                     _PORTEbits	set	3972
   257  0000                     _PR2	set	4043
   258  0000                     _RCREG	set	4014
   259  0000                     _RCSTA	set	4011
   260  0000                     _RCSTAbits	set	4011
   261  0000                     _SPBRG	set	4015
   262  0000                     _SPBRGH	set	4016
   263  0000                     _T2CON	set	4042
   264  0000                     _T2CONbits	set	4042
   265  0000                     _TMR2	set	4044
   266  0000                     _TRISA	set	3986
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISBbits	set	3987
   269  0000                     _TRISC	set	3988
   270  0000                     _TRISCbits	set	3988
   271  0000                     _TRISD	set	3989
   272  0000                     _TRISE	set	3990
   273  0000                     _TXREG	set	4013
   274  0000                     _TXSTA	set	4012
   275  0000                     _TXSTAbits	set	4012
   276  007F13                     __stringdata:
   277                           	opt stack 0
   278  007F13                     STR_22:
   279  007F13  49                 	db	73	;'I'
   280  007F14  6E                 	db	110	;'n'
   281  007F15  74                 	db	116	;'t'
   282  007F16  65                 	db	101	;'e'
   283  007F17  72                 	db	114	;'r'
   284  007F18  72                 	db	114	;'r'
   285  007F19  75                 	db	117	;'u'
   286  007F1A  70                 	db	112	;'p'
   287  007F1B  74                 	db	116	;'t'
   288  007F1C  69                 	db	105	;'i'
   289  007F1D  6F                 	db	111	;'o'
   290  007F1E  6E                 	db	110	;'n'
   291  007F1F  20                 	db	32
   292  007F20  54                 	db	84	;'T'
   293  007F21  4D                 	db	77	;'M'
   294  007F22  52                 	db	82	;'R'
   295  007F23  32                 	db	50	;'2'
   296  007F24  00                 	db	0
   297  007F25                     STR_19:
   298  007F25  49                 	db	73	;'I'
   299  007F26  6E                 	db	110	;'n'
   300  007F27  74                 	db	116	;'t'
   301  007F28  65                 	db	101	;'e'
   302  007F29  72                 	db	114	;'r'
   303  007F2A  72                 	db	114	;'r'
   304  007F2B  75                 	db	117	;'u'
   305  007F2C  70                 	db	112	;'p'
   306  007F2D  74                 	db	116	;'t'
   307  007F2E  69                 	db	105	;'i'
   308  007F2F  6F                 	db	111	;'o'
   309  007F30  6E                 	db	110	;'n'
   310  007F31  20                 	db	32
   311  007F32  52                 	db	82	;'R'
   312  007F33  42                 	db	66	;'B'
   313  007F34  30                 	db	48	;'0'
   314  007F35  00                 	db	0
   315  007F36                     STR_20:
   316  007F36  49                 	db	73	;'I'
   317  007F37  6E                 	db	110	;'n'
   318  007F38  74                 	db	116	;'t'
   319  007F39  65                 	db	101	;'e'
   320  007F3A  72                 	db	114	;'r'
   321  007F3B  72                 	db	114	;'r'
   322  007F3C  75                 	db	117	;'u'
   323  007F3D  70                 	db	112	;'p'
   324  007F3E  74                 	db	116	;'t'
   325  007F3F  69                 	db	105	;'i'
   326  007F40  6F                 	db	111	;'o'
   327  007F41  6E                 	db	110	;'n'
   328  007F42  20                 	db	32
   329  007F43  52                 	db	82	;'R'
   330  007F44  42                 	db	66	;'B'
   331  007F45  31                 	db	49	;'1'
   332  007F46  00                 	db	0
   333  007F47                     STR_21:
   334  007F47  49                 	db	73	;'I'
   335  007F48  6E                 	db	110	;'n'
   336  007F49  74                 	db	116	;'t'
   337  007F4A  65                 	db	101	;'e'
   338  007F4B  72                 	db	114	;'r'
   339  007F4C  72                 	db	114	;'r'
   340  007F4D  75                 	db	117	;'u'
   341  007F4E  70                 	db	112	;'p'
   342  007F4F  74                 	db	116	;'t'
   343  007F50  69                 	db	105	;'i'
   344  007F51  6F                 	db	111	;'o'
   345  007F52  6E                 	db	110	;'n'
   346  007F53  20                 	db	32
   347  007F54  52                 	db	82	;'R'
   348  007F55  42                 	db	66	;'B'
   349  007F56  32                 	db	50	;'2'
   350  007F57  00                 	db	0
   351  007F58                     STR_11:
   352  007F58  42                 	db	66	;'B'
   353  007F59  54                 	db	84	;'T'
   354  007F5A  20                 	db	32
   355  007F5B  49                 	db	73	;'I'
   356  007F5C  4E                 	db	78	;'N'
   357  007F5D  49                 	db	73	;'I'
   358  007F5E  43                 	db	67	;'C'
   359  007F5F  49                 	db	73	;'I'
   360  007F60  41                 	db	65	;'A'
   361  007F61  4C                 	db	76	;'L'
   362  007F62  49                 	db	73	;'I'
   363  007F63  5A                 	db	90	;'Z'
   364  007F64  41                 	db	65	;'A'
   365  007F65  44                 	db	68	;'D'
   366  007F66  4F                 	db	79	;'O'
   367  007F67  00                 	db	0
   368  007F68                     STR_2:
   369  007F68  41                 	db	65	;'A'
   370  007F69  54                 	db	84	;'T'
   371  007F6A  2B                 	db	43
   372  007F6B  50                 	db	80	;'P'
   373  007F6C  53                 	db	83	;'S'
   374  007F6D  57                 	db	87	;'W'
   375  007F6E  44                 	db	68	;'D'
   376  007F6F  3D                 	db	61	;'='
   377  007F70  30                 	db	48	;'0'
   378  007F71  30                 	db	48	;'0'
   379  007F72  30                 	db	48	;'0'
   380  007F73  30                 	db	48	;'0'
   381  007F74  0D                 	db	13
   382  007F75  0A                 	db	10
   383  007F76  00                 	db	0
   384  007F77  0A                 	db	10
   385  007F78  2B                 	db	43
   386  007F79  42                 	db	66	;'B'
   387  007F7A  54                 	db	84	;'T'
   388  007F7B  53                 	db	83	;'S'
   389  007F7C  54                 	db	84	;'T'
   390  007F7D  41                 	db	65	;'A'
   391  007F7E  54                 	db	84	;'T'
   392  007F7F  45                 	db	69	;'E'
   393  007F80  3A                 	db	58	;':'
   394  007F81  31                 	db	49	;'1'
   395  007F82  0D                 	db	13
   396  007F83  0A                 	db	10
   397  007F84  00                 	db	0
   398  007F85  0A                 	db	10
   399  007F86  2B                 	db	43
   400  007F87  42                 	db	66	;'B'
   401  007F88  54                 	db	84	;'T'
   402  007F89  53                 	db	83	;'S'
   403  007F8A  54                 	db	84	;'T'
   404  007F8B  41                 	db	65	;'A'
   405  007F8C  54                 	db	84	;'T'
   406  007F8D  45                 	db	69	;'E'
   407  007F8E  3A                 	db	58	;':'
   408  007F8F  33                 	db	51	;'3'
   409  007F90  0D                 	db	13
   410  007F91  0A                 	db	10
   411  007F92  00                 	db	0
   412  007F93  0A                 	db	10
   413  007F94  2B                 	db	43
   414  007F95  42                 	db	66	;'B'
   415  007F96  54                 	db	84	;'T'
   416  007F97  53                 	db	83	;'S'
   417  007F98  54                 	db	84	;'T'
   418  007F99  41                 	db	65	;'A'
   419  007F9A  54                 	db	84	;'T'
   420  007F9B  45                 	db	69	;'E'
   421  007F9C  3A                 	db	58	;':'
   422  007F9D  34                 	db	52	;'4'
   423  007F9E  0D                 	db	13
   424  007F9F  0A                 	db	10
   425  007FA0  00                 	db	0
   426  007FA1  0A                 	db	10
   427  007FA2  43                 	db	67	;'C'
   428  007FA3  4F                 	db	79	;'O'
   429  007FA4  4E                 	db	78	;'N'
   430  007FA5  4E                 	db	78	;'N'
   431  007FA6  45                 	db	69	;'E'
   432  007FA7  43                 	db	67	;'C'
   433  007FA8  54                 	db	84	;'T'
   434  007FA9  3A                 	db	58	;':'
   435  007FAA  4F                 	db	79	;'O'
   436  007FAB  4B                 	db	75	;'K'
   437  007FAC  0D                 	db	13
   438  007FAD  0A                 	db	10
   439  007FAE  00                 	db	0
   440  007FAF                     STR_18:
   441  007FAF  49                 	db	73	;'I'
   442  007FB0  6E                 	db	110	;'n'
   443  007FB1  74                 	db	116	;'t'
   444  007FB2  65                 	db	101	;'e'
   445  007FB3  67                 	db	103	;'g'
   446  007FB4  65                 	db	101	;'e'
   447  007FB5  72                 	db	114	;'r'
   448  007FB6  20                 	db	32
   449  007FB7  3D                 	db	61	;'='
   450  007FB8  20                 	db	32
   451  007FB9  25                 	db	37
   452  007FBA  64                 	db	100	;'d'
   453  007FBB  00                 	db	0
   454  007FBC                     STR_1:
   455  007FBC  41                 	db	65	;'A'
   456  007FBD  54                 	db	84	;'T'
   457  007FBE  2B                 	db	43
   458  007FBF  52                 	db	82	;'R'
   459  007FC0  4F                 	db	79	;'O'
   460  007FC1  4C                 	db	76	;'L'
   461  007FC2  45                 	db	69	;'E'
   462  007FC3  3D                 	db	61	;'='
   463  007FC4  30                 	db	48	;'0'
   464  007FC5  0D                 	db	13
   465  007FC6  0A                 	db	10
   466  007FC7  00                 	db	0
   467  007FC8                     STR_24:
   468  007FC8  43                 	db	67	;'C'
   469  007FC9  4D                 	db	77	;'M'
   470  007FCA  44                 	db	68	;'D'
   471  007FCB  20                 	db	32
   472  007FCC  54                 	db	84	;'T'
   473  007FCD  41                 	db	65	;'A'
   474  007FCE  42                 	db	66	;'B'
   475  007FCF  4C                 	db	76	;'L'
   476  007FD0  45                 	db	69	;'E'
   477  007FD1  54                 	db	84	;'T'
   478  007FD2  00                 	db	0
   479  007FD3  46                 	db	70	;'F'
   480  007FD4  6C                 	db	108	;'l'
   481  007FD5  6F                 	db	111	;'o'
   482  007FD6  61                 	db	97	;'a'
   483  007FD7  74                 	db	116	;'t'
   484  007FD8  20                 	db	32
   485  007FD9  3D                 	db	61	;'='
   486  007FDA  20                 	db	32
   487  007FDB  25                 	db	37
   488  007FDC  66                 	db	102	;'f'
   489  007FDD  00                 	db	0
   490  007FDE                     STR_3:
   491  007FDE  41                 	db	65	;'A'
   492  007FDF  54                 	db	84	;'T'
   493  007FE0  2B                 	db	43
   494  007FE1  49                 	db	73	;'I'
   495  007FE2  4E                 	db	78	;'N'
   496  007FE3  51                 	db	81	;'Q'
   497  007FE4  0D                 	db	13
   498  007FE5  0A                 	db	10
   499  007FE6  00                 	db	0
   500  007FE7                     STR_16:
   501  007FE7  44                 	db	68	;'D'
   502  007FE8  65                 	db	101	;'e'
   503  007FE9  66                 	db	102	;'f'
   504  007FEA  61                 	db	97	;'a'
   505  007FEB  75                 	db	117	;'u'
   506  007FEC  6C                 	db	108	;'l'
   507  007FED  74                 	db	116	;'t'
   508  007FEE  00                 	db	0
   509  007FEF                     STR_23:
   510  007FEF  49                 	db	73	;'I'
   511  007FF0  6E                 	db	110	;'n'
   512  007FF1  69                 	db	105	;'i'
   513  007FF2  63                 	db	99	;'c'
   514  007FF3  69                 	db	105	;'i'
   515  007FF4  6F                 	db	111	;'o'
   516  007FF5  00                 	db	0
   517  007FF6                     STR_10:
   518  007FF6  49                 	db	73	;'I'
   519  007FF7  4E                 	db	78	;'N'
   520  007FF8  49                 	db	73	;'I'
   521  007FF9  43                 	db	67	;'C'
   522  007FFA  49                 	db	73	;'I'
   523  007FFB  4F                 	db	79	;'O'
   524  007FFC  00                 	db	0
   525  007FFD                     STR_14:
   526  007FFD  33                 	db	51	;'3'
   527  007FFE  00                 	db	0
   528  007FFF                     __end_of__stringdata:
   529                           	opt stack 0
   530                           
   531                           ; #config settings
   532  007FFF  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	cinit
   535  002F00                     __pcinit:
   536                           	opt stack 0
   537  002F00                     start_initialization:
   538                           	opt stack 0
   539  002F00                     __initialization:
   540                           	opt stack 0
   541                           
   542                           ; Clear objects allocated to BANK1 (110 bytes)
   543  002F00  EE01  F000         	lfsr	0,__pbssBANK1
   544  002F04  0E6E               	movlw	110
   545  002F06                     clear_0:
   546  002F06  6AEE               	clrf	postinc0,c
   547  002F08  06E8               	decf	wreg,f,c
   548  002F0A  E1FD               	bnz	clear_0
   549                           
   550                           ; Clear objects allocated to BANK0 (6 bytes)
   551  002F0C  0100               	movlb	0
   552  002F0E  6BEE               	clrf	(__pbssBANK0+5)& (0+255),b
   553  002F10  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   554  002F12  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   555  002F14  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   556  002F16  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   557  002F18  6BE9               	clrf	__pbssBANK0& (0+255),b
   558                           
   559                           ; Clear objects allocated to COMRAM (28 bytes)
   560  002F1A  EE00  F042         	lfsr	0,__pbssCOMRAM
   561  002F1E  0E1C               	movlw	28
   562  002F20                     clear_1:
   563  002F20  6AEE               	clrf	postinc0,c
   564  002F22  06E8               	decf	wreg,f,c
   565  002F24  E1FD               	bnz	clear_1
   566                           
   567                           ; Initialize objects allocated to BANK1 (18 bytes)
   568                           ; load TBLPTR registers with __pidataBANK1
   569  002F26  0E24               	movlw	low __pidataBANK1
   570  002F28  6EF6               	movwf	tblptrl,c
   571  002F2A  0E35               	movlw	high __pidataBANK1
   572  002F2C  6EF7               	movwf	tblptrh,c
   573  002F2E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   574  002F30  6EF8               	movwf	tblptru,c
   575  002F32  EE01  F06E         	lfsr	0,__pdataBANK1
   576  002F36  EE10 F012          	lfsr	1,18
   577  002F3A                     copy_data0:
   578  002F3A  0009               	tblrd		*+
   579  002F3C  CFF5 FFEE          	movff	tablat,postinc0
   580  002F40  50E5               	movf	postdec1,w,c
   581  002F42  50E1               	movf	fsr1l,w,c
   582  002F44  E1FA               	bnz	copy_data0
   583                           
   584                           ; Initialize objects allocated to COMRAM (2 bytes)
   585                           ; load TBLPTR registers with __pidataCOMRAM
   586  002F46  0E6E               	movlw	low __pidataCOMRAM
   587  002F48  6EF6               	movwf	tblptrl,c
   588  002F4A  0E35               	movlw	high __pidataCOMRAM
   589  002F4C  6EF7               	movwf	tblptrh,c
   590  002F4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   591  002F50  6EF8               	movwf	tblptru,c
   592  002F52  0009               	tblrd		*+	;fetch initializer
   593  002F54  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   594  002F58  0009               	tblrd		*+	;fetch initializer
   595  002F5A  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   596  002F5E                     end_of_initialization:
   597                           	opt stack 0
   598  002F5E                     __end_of__initialization:
   599                           	opt stack 0
   600  002F5E  0100               	movlb	0
   601  002F60  EF2F  F013         	goto	_main	;jump to C main() function
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	bssCOMRAM
   612  000042                     __pbssCOMRAM:
   613                           	opt stack 0
   614  000042                     _Med_lsb:
   615                           	opt stack 0
   616  000042                     	ds	2
   617  000044                     _Med_msb:
   618                           	opt stack 0
   619  000044                     	ds	2
   620  000046                     _TamanhoTrama:
   621                           	opt stack 0
   622  000046                     	ds	2
   623  000048                     _i:
   624                           	opt stack 0
   625  000048                     	ds	2
   626  00004A                     _CheckSum:
   627                           	opt stack 0
   628  00004A                     	ds	1
   629  00004B                     _ComanBFlag:
   630                           	opt stack 0
   631  00004B                     	ds	1
   632  00004C                     _ComanTFlag:
   633                           	opt stack 0
   634  00004C                     	ds	1
   635  00004D                     _Comando:
   636                           	opt stack 0
   637  00004D                     	ds	1
   638  00004E                     _ComandoTablet:
   639                           	opt stack 0
   640  00004E                     	ds	1
   641  00004F                     _EntTrama:
   642                           	opt stack 0
   643  00004F                     	ds	1
   644  000050                     _InicioComando:
   645                           	opt stack 0
   646  000050                     	ds	1
   647  000051                     _RXComandoTB:
   648                           	opt stack 0
   649  000051                     	ds	1
   650  000052                     _SBUSART:
   651                           	opt stack 0
   652  000052                     	ds	1
   653  000053                     _Timer1:
   654                           	opt stack 0
   655  000053                     	ds	1
   656  000054                     _USART_Status:
   657                           	opt stack 0
   658  000054                     	ds	1
   659  000055                     _cad:
   660                           	opt stack 0
   661  000055                     	ds	1
   662  000056                     _contador:
   663                           	opt stack 0
   664  000056                     	ds	1
   665  000057                     _contador2:
   666                           	opt stack 0
   667  000057                     	ds	1
   668  000058                     _j:
   669                           	opt stack 0
   670  000058                     	ds	1
   671  000059                     _lenght:
   672                           	opt stack 0
   673  000059                     	ds	1
   674  00005A                     _num_med_hi:
   675                           	opt stack 0
   676  00005A                     	ds	1
   677  00005B                     _num_med_low:
   678                           	opt stack 0
   679  00005B                     	ds	1
   680  00005C                     _num_med_medium:
   681                           	opt stack 0
   682  00005C                     	ds	1
   683  00005D                     _packet:
   684                           	opt stack 0
   685  00005D                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	dataCOMRAM
   696  00005E                     __pdataCOMRAM:
   697                           	opt stack 0
   698  00005E                     _countup:
   699                           	opt stack 0
   700  00005E                     	ds	2
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           postdec1	equ	0xFE5
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	bssBANK0
   711  0000E9                     __pbssBANK0:
   712                           	opt stack 0
   713  0000E9                     _DutyCycle:
   714                           	opt stack 0
   715  0000E9                     	ds	2
   716  0000EB                     _FinComandB:
   717                           	opt stack 0
   718  0000EB                     	ds	1
   719  0000EC                     _FinComandT:
   720                           	opt stack 0
   721  0000EC                     	ds	1
   722  0000ED                     _cleanBfer:
   723                           	opt stack 0
   724  0000ED                     	ds	1
   725  0000EE                     _Timer2Config:
   726                           	opt stack 0
   727  0000EE                     	ds	1
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737                           	psect	bssBANK1
   738  000100                     __pbssBANK1:
   739                           	opt stack 0
   740  000100                     _TramaTablet:
   741                           	opt stack 0
   742  000100                     	ds	20
   743  000114                     _array:
   744                           	opt stack 0
   745  000114                     	ds	20
   746  000128                     _BluetoothDato:
   747                           	opt stack 0
   748  000128                     	ds	50
   749  00015A                     _comando:
   750                           	opt stack 0
   751  00015A                     	ds	20
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           
   761                           	psect	dataBANK1
   762  00016E                     __pdataBANK1:
   763                           	opt stack 0
   764  00016E                     BT_Init@F5675:
   765                           	opt stack 0
   766  00016E                     	ds	18
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           
   776                           	psect	cstackBANK0
   777  000060                     __pcstackBANK0:
   778                           	opt stack 0
   779  000060                     ??_OpenPWM2:
   780  000060                     ?_getCNY70Value:
   781                           	opt stack 0
   782  000060                     ?___awmod:
   783                           	opt stack 0
   784  000060                     ?___ftpack:
   785                           	opt stack 0
   786  000060                     ?___ftneg:
   787                           	opt stack 0
   788  000060                     ?__tdiv_to_l_:
   789                           	opt stack 0
   790  000060                     ?__div_to_l_:
   791                           	opt stack 0
   792  000060                     ?___lldiv:
   793                           	opt stack 0
   794  000060                     Lcd_Port@a:
   795                           	opt stack 0
   796  000060                     OpenPWM1@period:
   797                           	opt stack 0
   798  000060                     WriteUSART@data:
   799                           	opt stack 0
   800  000060                     clrBufferUSART@i:
   801                           	opt stack 0
   802  000060                     Pause_ms@x:
   803                           	opt stack 0
   804  000060                     SetDCPWM1@dutycycle:
   805                           	opt stack 0
   806  000060                     SetDCPWM2@dutycycle:
   807                           	opt stack 0
   808  000060                     OpenUSART@spbrg:
   809                           	opt stack 0
   810  000060                     ___awmod@dividend:
   811                           	opt stack 0
   812  000060                     __div_to_l_@f1:
   813                           	opt stack 0
   814  000060                     ___ftpack@arg:
   815                           	opt stack 0
   816  000060                     __tdiv_to_l_@f1:
   817                           	opt stack 0
   818  000060                     ___ftge@ff1:
   819                           	opt stack 0
   820  000060                     ___ftneg@f1:
   821                           	opt stack 0
   822  000060                     ___lldiv@dividend:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x0
   826  000060                     	ds	1
   827  000061                     ??_Lcd_Cmd:
   828  000061                     putcTxU1@character:
   829                           	opt stack 0
   830  000061                     Lcd_Write_Char@temp:
   831                           	opt stack 0
   832  000061                     PWM_init1@period:
   833                           	opt stack 0
   834  000061                     OpenPWM2@period:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1
   838  000061                     	ds	1
   839  000062                     ??_OpenUSART:
   840  000062                     ??_SetDCPWM1:
   841  000062                     ??_SetDCPWM2:
   842  000062                     ??_Pause_ms:
   843  000062                     Lcd_Cmd@a:
   844                           	opt stack 0
   845  000062                     Lcd_Write_Char@y:
   846                           	opt stack 0
   847  000062                     OpenPWM2@ccp2mx:
   848                           	opt stack 0
   849  000062                     putSTRINGU1@dato:
   850                           	opt stack 0
   851  000062                     ___awmod@divisor:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x2
   855  000062                     	ds	1
   856  000063                     ??_Lcd_Init:
   857  000063                     Lcd_Set_Cursor@b:
   858                           	opt stack 0
   859  000063                     Lcd_Write_Char@a:
   860                           	opt stack 0
   861  000063                     PWM_init2@period:
   862                           	opt stack 0
   863  000063                     ___ftpack@exp:
   864                           	opt stack 0
   865  000063                     Pause_ms@i:
   866                           	opt stack 0
   867  000063                     __div_to_l_@f2:
   868                           	opt stack 0
   869  000063                     __tdiv_to_l_@f2:
   870                           	opt stack 0
   871  000063                     ___ftge@ff2:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x3
   875  000063                     	ds	1
   876  000064                     Lcd_Set_Cursor@a:
   877                           	opt stack 0
   878  000064                     ___awmod@counter:
   879                           	opt stack 0
   880  000064                     ___ftpack@sign:
   881                           	opt stack 0
   882  000064                     putSTRINGU1@total:
   883                           	opt stack 0
   884  000064                     Lcd_Write_String@a:
   885                           	opt stack 0
   886  000064                     SetDCPWM1@DCycle:
   887                           	opt stack 0
   888  000064                     SetDCPWM2@DCycle:
   889                           	opt stack 0
   890  000064                     ___lldiv@divisor:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x4
   894  000064                     	ds	1
   895  000065                     ??___ftpack:
   896  000065                     Pause_seg@x:
   897                           	opt stack 0
   898  000065                     Lcd_Set_Cursor@z:
   899                           	opt stack 0
   900  000065                     OpenUSART@config:
   901                           	opt stack 0
   902  000065                     ___awmod@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x5
   906  000065                     	ds	1
   907  000066                     ??_putSTRINGU1:
   908  000066                     ??_Lcd_Write_String:
   909  000066                     ??__tdiv_to_l_:
   910  000066                     ??__div_to_l_:
   911  000066                     ??___ftge:
   912  000066                     ?___awdiv:
   913                           	opt stack 0
   914  000066                     Pause_seg@i:
   915                           	opt stack 0
   916  000066                     UART1_Init@bdr:
   917                           	opt stack 0
   918  000066                     Lcd_Set_Cursor@y:
   919                           	opt stack 0
   920  000066                     ___awdiv@dividend:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x6
   924  000066                     	ds	1
   925  000067                     Lcd_Set_Cursor@temp:
   926                           	opt stack 0
   927  000067                     putcBluetoothString@a:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x7
   931  000067                     	ds	1
   932  000068                     ?___lbtoft:
   933                           	opt stack 0
   934  000068                     ?___lltoft:
   935                           	opt stack 0
   936  000068                     putSTRINGU1@last:
   937                           	opt stack 0
   938  000068                     Lcd_Write_String@i:
   939                           	opt stack 0
   940  000068                     ___awdiv@divisor:
   941                           	opt stack 0
   942  000068                     ___lldiv@quotient:
   943                           	opt stack 0
   944  000068                     ___lltoft@c:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x8
   948  000068                     	ds	1
   949  000069                     ??_putcBluetoothString:
   950  000069                     putSTRINGU1@cont:
   951                           	opt stack 0
   952  000069                     __tdiv_to_l_@quot:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x9
   956  000069                     	ds	1
   957  00006A                     ___awdiv@counter:
   958                           	opt stack 0
   959  00006A                     SendBlueToothCommand@command:
   960                           	opt stack 0
   961  00006A                     __div_to_l_@quot:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0xA
   965  00006A                     	ds	1
   966  00006B                     ___awdiv@sign:
   967                           	opt stack 0
   968  00006B                     ___lbtoft@c:
   969                           	opt stack 0
   970  00006B                     putcBluetoothString@i:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0xB
   974  00006B                     	ds	1
   975  00006C                     ??___lltoft:
   976  00006C                     ___lldiv@counter:
   977                           	opt stack 0
   978  00006C                     SendBlueToothCommand@total:
   979                           	opt stack 0
   980  00006C                     ___awdiv@quotient:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0xC
   984  00006C                     	ds	1
   985  00006D                     ?___llmod:
   986                           	opt stack 0
   987  00006D                     __tdiv_to_l_@cntr:
   988                           	opt stack 0
   989  00006D                     ___llmod@dividend:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0xD
   993  00006D                     	ds	1
   994  00006E                     ?___wmul:
   995                           	opt stack 0
   996  00006E                     __div_to_l_@cntr:
   997                           	opt stack 0
   998  00006E                     __tdiv_to_l_@exp1:
   999                           	opt stack 0
  1000  00006E                     ___wmul@multiplier:
  1001                           	opt stack 0
  1002  00006E                     BT_Init@nameBT:
  1003                           	opt stack 0
  1004                           
  1005                           ; 18 bytes @ 0xE
  1006  00006E                     	ds	1
  1007  00006F                     __div_to_l_@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0xF
  1011  00006F                     	ds	1
  1012  000070                     ___lltoft@exp:
  1013                           	opt stack 0
  1014  000070                     ___wmul@multiplicand:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x10
  1018  000070                     	ds	1
  1019  000071                     ___llmod@divisor:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x11
  1023  000071                     	ds	1
  1024  000072                     ___wmul@product:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x12
  1028  000072                     	ds	2
  1029  000074                     ?___ftmul:
  1030                           	opt stack 0
  1031  000074                     ___ftmul@f1:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0x14
  1035  000074                     	ds	1
  1036  000075                     ___llmod@counter:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x15
  1040  000075                     	ds	2
  1041  000077                     ___ftmul@f2:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x17
  1045  000077                     	ds	3
  1046  00007A                     ??___ftmul:
  1047                           
  1048                           ; 0 bytes @ 0x1A
  1049  00007A                     	ds	3
  1050  00007D                     ___ftmul@exp:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x1D
  1054  00007D                     	ds	1
  1055  00007E                     ___ftmul@f3_as_product:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x1E
  1059  00007E                     	ds	2
  1060  000080                     ??_Inicializa_Driveby:
  1061                           
  1062                           ; 0 bytes @ 0x20
  1063  000080                     	ds	1
  1064  000081                     ___ftmul@cntr:
  1065                           	opt stack 0
  1066  000081                     Inicializa_Driveby@i:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x21
  1070  000081                     	ds	1
  1071  000082                     ___ftmul@sign:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x22
  1075  000082                     	ds	1
  1076  000083                     ?_fround:
  1077                           	opt stack 0
  1078  000083                     ?_scale:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x23
  1082  000083                     	ds	3
  1083  000086                     _fround$2885:
  1084                           	opt stack 0
  1085  000086                     _scale$2886:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x26
  1089  000086                     	ds	3
  1090  000089                     scale@scl:
  1091                           	opt stack 0
  1092  000089                     _fround$2884:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x29
  1096  000089                     	ds	1
  1097  00008A                     ?___fttol:
  1098                           	opt stack 0
  1099  00008A                     ___fttol@f1:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x2A
  1103  00008A                     	ds	2
  1104  00008C                     fround@prec:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x2C
  1108  00008C                     	ds	1
  1109  00008D                     ?___ftadd:
  1110                           	opt stack 0
  1111  00008D                     ___ftadd@f1:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x2D
  1115  00008D                     	ds	1
  1116  00008E                     ??___fttol:
  1117                           
  1118                           ; 0 bytes @ 0x2E
  1119  00008E                     	ds	2
  1120  000090                     ___ftadd@f2:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x30
  1124  000090                     	ds	3
  1125  000093                     ??___ftadd:
  1126  000093                     ___fttol@sign1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x33
  1130  000093                     	ds	1
  1131  000094                     ___fttol@lval:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x34
  1135  000094                     	ds	2
  1136  000096                     ___ftadd@sign:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x36
  1140  000096                     	ds	1
  1141  000097                     ___ftadd@exp2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x37
  1145  000097                     	ds	1
  1146  000098                     ___ftadd@exp1:
  1147                           	opt stack 0
  1148  000098                     ___fttol@exp1:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x38
  1152  000098                     	ds	1
  1153  000099                     ??_PWM_DutyCycle1:
  1154  000099                     ??_PWM_DutyCycle2:
  1155  000099                     ?___ftsub:
  1156                           	opt stack 0
  1157  000099                     ___ftsub@f1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x39
  1161  000099                     	ds	3
  1162  00009C                     ___ftsub@f2:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x3C
  1166  00009C                     	ds	1
  1167  00009D                     PWM_DutyCycle1@DutyCycle:
  1168                           	opt stack 0
  1169  00009D                     PWM_DutyCycle2@DutyCycle:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x3D
  1173  00009D                     	ds	2
  1174  00009F                     ?_sprintf:
  1175                           	opt stack 0
  1176  00009F                     PWM_DutyCycle1@percentageDuty:
  1177                           	opt stack 0
  1178  00009F                     PWM_DutyCycle2@percentageDuty:
  1179                           	opt stack 0
  1180  00009F                     sprintf@sp:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x3F
  1184  00009F                     	ds	1
  1185  0000A0                     PWM_DutyCycle1@DC:
  1186                           	opt stack 0
  1187  0000A0                     PWM_DutyCycle2@DC:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x40
  1191  0000A0                     	ds	1
  1192  0000A1                     sprintf@f:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x41
  1196  0000A1                     	ds	5
  1197  0000A6                     ??_sprintf:
  1198                           
  1199                           ; 0 bytes @ 0x46
  1200  0000A6                     	ds	6
  1201  0000AC                     _sprintf$2887:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x4C
  1205  0000AC                     	ds	3
  1206  0000AF                     _sprintf$1857:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x4F
  1210  0000AF                     	ds	4
  1211  0000B3                     sprintf@vd:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x53
  1215  0000B3                     	ds	4
  1216  0000B7                     sprintf@vd_1859:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x57
  1220  0000B7                     	ds	4
  1221  0000BB                     sprintf@ap:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x5B
  1225  0000BB                     	ds	2
  1226  0000BD                     sprintf@flag:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x5D
  1230  0000BD                     	ds	2
  1231  0000BF                     sprintf@integ:
  1232                           	opt stack 0
  1233                           
  1234                           ; 3 bytes @ 0x5F
  1235  0000BF                     	ds	3
  1236  0000C2                     sprintf@prec:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x62
  1240  0000C2                     	ds	2
  1241  0000C4                     sprintf@_val:
  1242                           	opt stack 0
  1243                           
  1244                           ; 5 bytes @ 0x64
  1245  0000C4                     	ds	5
  1246  0000C9                     sprintf@exp:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x69
  1250  0000C9                     	ds	2
  1251  0000CB                     sprintf@fval:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0x6B
  1255  0000CB                     	ds	3
  1256  0000CE                     sprintf@c:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x6E
  1260  0000CE                     	ds	1
  1261  0000CF                     putcBluetoothInt@a:
  1262                           	opt stack 0
  1263  0000CF                     Lcd_Write_Integer@a:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x6F
  1267  0000CF                     	ds	2
  1268  0000D1                     putcBluetoothInt@s:
  1269                           	opt stack 0
  1270  0000D1                     Lcd_Write_Integer@s:
  1271                           	opt stack 0
  1272                           
  1273                           ; 20 bytes @ 0x71
  1274  0000D1                     	ds	20
  1275  0000E5                     putcBluetoothInt@i:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x85
  1279  0000E5                     	ds	2
  1280  0000E7                     Comando_Tablet@sensed:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x87
  1284  0000E7                     	ds	2
  1285  0000E9                     tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           
  1294                           ; 0 bytes @ 0x89
  1295                           
  1296                           	psect	cstackCOMRAM
  1297  000001                     __pcstackCOMRAM:
  1298                           	opt stack 0
  1299  000001                     ?i2___ftpack:
  1300                           	opt stack 0
  1301  000001                     ReadUSART@data:
  1302                           	opt stack 0
  1303  000001                     i2Lcd_Port@a:
  1304                           	opt stack 0
  1305  000001                     i2SetDCPWM1@dutycycle:
  1306                           	opt stack 0
  1307  000001                     i2SetDCPWM2@dutycycle:
  1308                           	opt stack 0
  1309  000001                     i2___ftpack@arg:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x0
  1313  000001                     	ds	1
  1314  000002                     ??i2_Lcd_Cmd:
  1315  000002                     i2Lcd_Write_Char@temp:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x1
  1319  000002                     	ds	1
  1320  000003                     ??i2_SetDCPWM1:
  1321  000003                     ??i2_SetDCPWM2:
  1322  000003                     i2Lcd_Cmd@a:
  1323                           	opt stack 0
  1324  000003                     i2Lcd_Write_Char@y:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x2
  1328  000003                     	ds	1
  1329  000004                     i2Lcd_Set_Cursor@b:
  1330                           	opt stack 0
  1331  000004                     i2Lcd_Write_Char@a:
  1332                           	opt stack 0
  1333  000004                     i2___ftpack@exp:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x3
  1337  000004                     	ds	1
  1338  000005                     i2Lcd_Set_Cursor@a:
  1339                           	opt stack 0
  1340  000005                     i2___ftpack@sign:
  1341                           	opt stack 0
  1342  000005                     i2Lcd_Write_String@a:
  1343                           	opt stack 0
  1344  000005                     i2SetDCPWM1@DCycle:
  1345                           	opt stack 0
  1346  000005                     i2SetDCPWM2@DCycle:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x4
  1350  000005                     	ds	1
  1351  000006                     ??i2___ftpack:
  1352  000006                     i2Lcd_Set_Cursor@z:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x5
  1356  000006                     	ds	1
  1357  000007                     ??i2_Lcd_Write_String:
  1358  000007                     i2Lcd_Set_Cursor@y:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x6
  1362  000007                     	ds	1
  1363  000008                     i2Lcd_Set_Cursor@temp:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x7
  1367  000008                     	ds	1
  1368  000009                     ?i2___lbtoft:
  1369                           	opt stack 0
  1370  000009                     i2Lcd_Write_String@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x8
  1374  000009                     	ds	3
  1375  00000C                     i2___lbtoft@c:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0xB
  1379  00000C                     	ds	1
  1380  00000D                     ?i2___ftmul:
  1381                           	opt stack 0
  1382  00000D                     i2___ftmul@f1:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0xC
  1386  00000D                     	ds	3
  1387  000010                     i2___ftmul@f2:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0xF
  1391  000010                     	ds	3
  1392  000013                     ??i2___ftmul:
  1393                           
  1394                           ; 0 bytes @ 0x12
  1395  000013                     	ds	3
  1396  000016                     i2___ftmul@exp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x15
  1400  000016                     	ds	1
  1401  000017                     i2___ftmul@f3_as_product:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x16
  1405  000017                     	ds	3
  1406  00001A                     i2___ftmul@cntr:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x19
  1410  00001A                     	ds	1
  1411  00001B                     i2___ftmul@sign:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x1A
  1415  00001B                     	ds	1
  1416  00001C                     ?i2___fttol:
  1417                           	opt stack 0
  1418  00001C                     i2___fttol@f1:
  1419                           	opt stack 0
  1420                           
  1421                           ; 3 bytes @ 0x1B
  1422  00001C                     	ds	4
  1423  000020                     ??i2___fttol:
  1424                           
  1425                           ; 0 bytes @ 0x1F
  1426  000020                     	ds	5
  1427  000025                     i2___fttol@sign1:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x24
  1431  000025                     	ds	1
  1432  000026                     i2___fttol@lval:
  1433                           	opt stack 0
  1434                           
  1435                           ; 4 bytes @ 0x25
  1436  000026                     	ds	4
  1437  00002A                     i2___fttol@exp1:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x29
  1441  00002A                     	ds	1
  1442  00002B                     ??i2_PWM_DutyCycle1:
  1443  00002B                     ??i2_PWM_DutyCycle2:
  1444                           
  1445                           ; 0 bytes @ 0x2A
  1446  00002B                     	ds	4
  1447  00002F                     i2PWM_DutyCycle1@DutyCycle:
  1448                           	opt stack 0
  1449  00002F                     i2PWM_DutyCycle2@DutyCycle:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2E
  1453  00002F                     	ds	2
  1454  000031                     i2PWM_DutyCycle1@percentageDuty:
  1455                           	opt stack 0
  1456  000031                     i2PWM_DutyCycle2@percentageDuty:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x30
  1460  000031                     	ds	1
  1461  000032                     i2PWM_DutyCycle1@DC:
  1462                           	opt stack 0
  1463  000032                     i2PWM_DutyCycle2@DC:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x31
  1467  000032                     	ds	2
  1468  000034                     ??_TMRO_USART:
  1469                           
  1470                           ; 0 bytes @ 0x33
  1471  000034                     	ds	14
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           
  1481 ;;
  1482 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1483 ;;
  1484 ;; *************** function _main *****************
  1485 ;; Defined at:
  1486 ;;		line 156 in file "robot.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2  415[COMRAM] int 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1503 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1504 ;;Total ram usage:        0 bytes
  1505 ;; Hardware stack levels required when called:   10
  1506 ;; This function calls:
  1507 ;;		_Comando_Tablet
  1508 ;;		_Inicializa_Driveby
  1509 ;;		_Lcd_Clear
  1510 ;;		_Lcd_Init
  1511 ;;		_Lcd_Set_Cursor
  1512 ;;		_Lcd_Write_String
  1513 ;;		_PWM_DutyCycle1
  1514 ;;		_PWM_DutyCycle2
  1515 ;;		_UART1_Init
  1516 ;;		_clrBufferUSART
  1517 ;;		_motor_Backforward
  1518 ;; This function is called by:
  1519 ;;		Startup code after reset
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text0
  1524  00265E                     __ptext0:
  1525                           	opt stack 0
  1526  00265E                     _main:
  1527                           	opt stack 21
  1528                           
  1529                           ;robot.c: 158: INTCON =0X00;
  1530                           
  1531                           ;incstack = 0
  1532  00265E  0E00               	movlw	0
  1533  002660  6EF2               	movwf	intcon,c	;volatile
  1534                           
  1535                           ;robot.c: 159: TRISD = 0x00;
  1536  002662  0E00               	movlw	0
  1537  002664  6E95               	movwf	3989,c	;volatile
  1538                           
  1539                           ;robot.c: 160: TRISE = 0x00;
  1540  002666  0E00               	movlw	0
  1541  002668  6E96               	movwf	3990,c	;volatile
  1542                           
  1543                           ;robot.c: 161: PORTEbits.RE1=0;
  1544  00266A  9284               	bcf	3972,1,c	;volatile
  1545                           
  1546                           ;robot.c: 162: ADCON1bits.PCFG=0b1111;
  1547  00266C  80C1               	bsf	4033,0,c	;volatile
  1548  00266E  82C1               	bsf	4033,1,c	;volatile
  1549  002670  84C1               	bsf	4033,2,c	;volatile
  1550  002672  86C1               	bsf	4033,3,c	;volatile
  1551                           
  1552                           ;robot.c: 163: Lcd_Init();
  1553  002674  EC9F  F016         	call	_Lcd_Init	;wreg free
  1554                           
  1555                           ;robot.c: 164: Lcd_Clear();
  1556  002678  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  1557                           
  1558                           ;robot.c: 165: Lcd_Set_Cursor(1,1);
  1559  00267C  0E01               	movlw	1
  1560  00267E  0100               	movlb	0	; () banked
  1561  002680  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1562  002682  0E01               	movlw	1
  1563  002684  ECDB  F016         	call	_Lcd_Set_Cursor
  1564                           
  1565                           ;robot.c: 166: Lcd_Write_String("Inicio");
  1566  002688  0E7F               	movlw	high STR_23
  1567  00268A  0100               	movlb	0	; () banked
  1568  00268C  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1569  00268E  0EEF               	movlw	low STR_23
  1570  002690  0100               	movlb	0	; () banked
  1571  002692  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1572  002694  EC94  F014         	call	_Lcd_Write_String	;wreg free
  1573                           
  1574                           ;robot.c: 167: Inicializa_Driveby();
  1575  002698  ECD5  F00E         	call	_Inicializa_Driveby	;wreg free
  1576                           
  1577                           ;robot.c: 168: PORTAbits.RA2 = 1;
  1578  00269C  8480               	bsf	3968,2,c	;volatile
  1579  00269E                     l4866:
  1580                           
  1581                           ;robot.c: 172: {
  1582                           ;robot.c: 175: if (cleanBfer == 1) {
  1583  00269E  0100               	movlb	0	; () banked
  1584  0026A0  05ED               	decf	_cleanBfer& (0+255),w,b
  1585  0026A2  A4D8               	btfss	status,2,c
  1586  0026A4  D005               	goto	l4872
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;robot.c: 176: clrBufferUSART();
  1590  0026A6  ECBC  F018         	call	_clrBufferUSART	;wreg free
  1591                           
  1592                           ;robot.c: 177: cleanBfer = 0;
  1593  0026AA  0E00               	movlw	0
  1594  0026AC  0100               	movlb	0	; () banked
  1595  0026AE  6FED               	movwf	_cleanBfer& (0+255),b
  1596  0026B0                     l4872:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;robot.c: 178: }
  1600                           ;robot.c: 179: if (FinComandT == 1) {
  1601  0026B0  0100               	movlb	0	; () banked
  1602  0026B2  05EC               	decf	_FinComandT& (0+255),w,b
  1603  0026B4  A4D8               	btfss	status,2,c
  1604  0026B6  D01E               	goto	l4892
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;robot.c: 180: Lcd_Clear();
  1608  0026B8  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  1609                           
  1610                           ;robot.c: 181: Lcd_Set_Cursor(2,1);
  1611  0026BC  0E01               	movlw	1
  1612  0026BE  0100               	movlb	0	; () banked
  1613  0026C0  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1614  0026C2  0E02               	movlw	2
  1615  0026C4  ECDB  F016         	call	_Lcd_Set_Cursor
  1616                           
  1617                           ;robot.c: 182: Lcd_Write_String("CMD TABLET");
  1618  0026C8  0E7F               	movlw	high STR_24
  1619  0026CA  0100               	movlb	0	; () banked
  1620  0026CC  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1621  0026CE  0EC8               	movlw	low STR_24
  1622  0026D0  0100               	movlb	0	; () banked
  1623  0026D2  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1624  0026D4  EC94  F014         	call	_Lcd_Write_String	;wreg free
  1625                           
  1626                           ;robot.c: 183: FinComandT = 0;
  1627  0026D8  0E00               	movlw	0
  1628  0026DA  0100               	movlb	0	; () banked
  1629  0026DC  6FEC               	movwf	_FinComandT& (0+255),b
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;robot.c: 184: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1633  0026DE  0E4F               	movlw	79
  1634  0026E0  16AB               	andwf	4011,f,c	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637  0026E2  9AAC               	bcf	4012,5,c	;volatile
  1638                           
  1639                           ; BSR set to: 0
  1640  0026E4  0ECF               	movlw	207
  1641  0026E6  169D               	andwf	3997,f,c	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;robot.c: 185: Comando_Tablet();
  1645  0026E8  EC82  F00D         	call	_Comando_Tablet	;wreg free
  1646                           
  1647                           ;robot.c: 186: UART1_Init(51);
  1648  0026EC  0E33               	movlw	51
  1649  0026EE  EC73  F01A         	call	_UART1_Init
  1650                           
  1651                           ;robot.c: 188: }
  1652  0026F2  D00C               	goto	l4902
  1653  0026F4                     l4892:
  1654                           
  1655                           ;robot.c: 189: else if (FinComandB == 1) {
  1656  0026F4  0100               	movlb	0	; () banked
  1657  0026F6  05EB               	decf	_FinComandB& (0+255),w,b
  1658  0026F8  A4D8               	btfss	status,2,c
  1659  0026FA  D008               	goto	l4902
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;robot.c: 194: FinComandB = 0;
  1663  0026FC  0E00               	movlw	0
  1664  0026FE  0100               	movlb	0	; () banked
  1665  002700  6FEB               	movwf	_FinComandB& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;robot.c: 195: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1669  002702  0E4F               	movlw	79
  1670  002704  16AB               	andwf	4011,f,c	;volatile
  1671                           
  1672                           ; BSR set to: 0
  1673  002706  9AAC               	bcf	4012,5,c	;volatile
  1674                           
  1675                           ; BSR set to: 0
  1676  002708  0ECF               	movlw	207
  1677  00270A  169D               	andwf	3997,f,c	;volatile
  1678  00270C                     l4902:
  1679                           
  1680                           ;robot.c: 199: }
  1681                           ;robot.c: 200: PWM_DutyCycle1(50);
  1682  00270C  0E32               	movlw	50
  1683  00270E  EC24  F016         	call	_PWM_DutyCycle1
  1684                           
  1685                           ;robot.c: 201: PWM_DutyCycle2(50);
  1686  002712  0E32               	movlw	50
  1687  002714  ECE6  F015         	call	_PWM_DutyCycle2
  1688                           
  1689                           ;robot.c: 202: motor_Backforward();
  1690  002718  ECB2  F01A         	call	_motor_Backforward	;wreg free
  1691  00271C  D7C0               	goto	l4866
  1692  00271E                     __end_of_main:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           intcon	equ	0xFF2
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1l	equ	0xFE1
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _motor_Backforward *****************
  1706 ;; Defined at:
  1707 ;;		line 195 in file "Funciones_Db.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;		None               void
  1714 ;; Registers used:
  1715 ;;		None
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1721 ;;      Params:         0       0       0       0       0       0       0       0       0
  1722 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1724 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1725 ;;Total ram usage:        0 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    4
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text1
  1736  003564                     __ptext1:
  1737                           	opt stack 0
  1738  003564                     _motor_Backforward:
  1739                           	opt stack 26
  1740                           
  1741                           ;Funciones_Db.c: 197: PORTDbits.RD7 = 0;
  1742                           
  1743                           ;incstack = 0
  1744  003564  9E83               	bcf	3971,7,c	;volatile
  1745                           
  1746                           ;Funciones_Db.c: 198: PORTDbits.RD4 = 1;
  1747  003566  8883               	bsf	3971,4,c	;volatile
  1748                           
  1749                           ;Funciones_Db.c: 199: PORTDbits.RD3 = 0;
  1750  003568  9683               	bcf	3971,3,c	;volatile
  1751                           
  1752                           ;Funciones_Db.c: 200: PORTCbits.RC4 = 1;
  1753  00356A  8882               	bsf	3970,4,c	;volatile
  1754                           
  1755                           ;Funciones_Db.c: 202: return;
  1756  00356C  0012               	return	
  1757  00356E                     __end_of_motor_Backforward:
  1758                           	opt stack 0
  1759                           tblptru	equ	0xFF8
  1760                           tblptrh	equ	0xFF7
  1761                           tblptrl	equ	0xFF6
  1762                           tablat	equ	0xFF5
  1763                           intcon	equ	0xFF2
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           postdec1	equ	0xFE5
  1767                           fsr1l	equ	0xFE1
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _Lcd_Init *****************
  1771 ;; Defined at:
  1772 ;;		line 57 in file "lcd.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;		None               void
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1786 ;;      Params:         0       0       0       0       0       0       0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1788 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1789 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1790 ;;Total ram usage:        1 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    6
  1793 ;; This function calls:
  1794 ;;		_Lcd_Cmd
  1795 ;;		_Lcd_Port
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text2
  1802  002D3E                     __ptext2:
  1803                           	opt stack 0
  1804  002D3E                     _Lcd_Init:
  1805                           	opt stack 24
  1806                           
  1807                           ;lcd.c: 58: Lcd_Port(0x00);
  1808                           
  1809                           ;incstack = 0
  1810  002D3E  0E00               	movlw	0
  1811  002D40  EC8C  F019         	call	_Lcd_Port
  1812                           
  1813                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1814  002D44  0E1A               	movlw	26
  1815  002D46  0100               	movlb	0	; () banked
  1816  002D48  6F63               	movwf	??_Lcd_Init& (0+255),b
  1817  002D4A  0EF8               	movlw	248
  1818  002D4C                     u5267:
  1819  002D4C  2EE8               	decfsz	wreg,f,c
  1820  002D4E  D7FE               	goto	u5267
  1821  002D50  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1822  002D52  D7FC               	goto	u5267
  1823  002D54  D000               	nop2	
  1824                           
  1825                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1826  002D56  0E03               	movlw	3
  1827  002D58  EC15  F01A         	call	_Lcd_Cmd
  1828                           
  1829                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1830  002D5C  0E07               	movlw	7
  1831  002D5E  0100               	movlb	0	; () banked
  1832  002D60  6F63               	movwf	??_Lcd_Init& (0+255),b
  1833  002D62  0E7D               	movlw	125
  1834  002D64                     u5277:
  1835  002D64  2EE8               	decfsz	wreg,f,c
  1836  002D66  D7FE               	goto	u5277
  1837  002D68  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1838  002D6A  D7FC               	goto	u5277
  1839  002D6C  F000               	nop	
  1840                           
  1841                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1842  002D6E  0E03               	movlw	3
  1843  002D70  EC15  F01A         	call	_Lcd_Cmd
  1844                           
  1845                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1846  002D74  0E0F               	movlw	15
  1847  002D76  0100               	movlb	0	; () banked
  1848  002D78  6F63               	movwf	??_Lcd_Init& (0+255),b
  1849  002D7A  0E48               	movlw	72
  1850  002D7C                     u5287:
  1851  002D7C  2EE8               	decfsz	wreg,f,c
  1852  002D7E  D7FE               	goto	u5287
  1853  002D80  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1854  002D82  D7FC               	goto	u5287
  1855                           
  1856                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1857  002D84  0E03               	movlw	3
  1858  002D86  EC15  F01A         	call	_Lcd_Cmd
  1859                           
  1860                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1861  002D8A  0E02               	movlw	2
  1862  002D8C  EC15  F01A         	call	_Lcd_Cmd
  1863                           
  1864                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1865  002D90  0E02               	movlw	2
  1866  002D92  EC15  F01A         	call	_Lcd_Cmd
  1867                           
  1868                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1869  002D96  0E08               	movlw	8
  1870  002D98  EC15  F01A         	call	_Lcd_Cmd
  1871                           
  1872                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1873  002D9C  0E00               	movlw	0
  1874  002D9E  EC15  F01A         	call	_Lcd_Cmd
  1875                           
  1876                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1877  002DA2  0E0C               	movlw	12
  1878  002DA4  EC15  F01A         	call	_Lcd_Cmd
  1879                           
  1880                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1881  002DA8  0E00               	movlw	0
  1882  002DAA  EC15  F01A         	call	_Lcd_Cmd
  1883                           
  1884                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1885  002DAE  0E06               	movlw	6
  1886  002DB0  EC15  F01A         	call	_Lcd_Cmd
  1887  002DB4  0012               	return	
  1888  002DB6                     __end_of_Lcd_Init:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           intcon	equ	0xFF2
  1895                           postinc0	equ	0xFEE
  1896                           wreg	equ	0xFE8
  1897                           postdec1	equ	0xFE5
  1898                           fsr1l	equ	0xFE1
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function _Inicializa_Driveby *****************
  1902 ;; Defined at:
  1903 ;;		line 62 in file "Funciones_Db.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  i               2   33[BANK0 ] int 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;		None               void
  1910 ;; Registers used:
  1911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1917 ;;      Params:         0       0       0       0       0       0       0       0       0
  1918 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1919 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1920 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1921 ;;Total ram usage:        3 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    9
  1924 ;; This function calls:
  1925 ;;		_BT_Init
  1926 ;;		_Lcd_Clear
  1927 ;;		_Lcd_Set_Cursor
  1928 ;;		_Lcd_Write_String
  1929 ;;		_PWM_init1
  1930 ;;		_PWM_init2
  1931 ;;		_Pause_seg
  1932 ;;		_clrBufferUSART
  1933 ;;		_external_interrupt_init
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text3
  1940  001DAA                     __ptext3:
  1941                           	opt stack 0
  1942  001DAA                     _Inicializa_Driveby:
  1943                           	opt stack 21
  1944                           
  1945                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1946                           
  1947                           ;incstack = 0
  1948  001DAA  0E00               	movlw	0
  1949  001DAC  6E95               	movwf	3989,c	;volatile
  1950  001DAE  CF95 FF94          	movff	3989,3988	;volatile
  1951  001DB2  CF94 FF93          	movff	3988,3987	;volatile
  1952  001DB6  CF93 FF92          	movff	3987,3986	;volatile
  1953                           
  1954                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1955  001DBA  0EC0               	movlw	192
  1956  001DBC  6EF2               	movwf	intcon,c	;volatile
  1957                           
  1958                           ;Funciones_Db.c: 67: int i = 0;
  1959  001DBE  0E00               	movlw	0
  1960  001DC0  0100               	movlb	0	; () banked
  1961  001DC2  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  1962  001DC4  0E00               	movlw	0
  1963  001DC6  0100               	movlb	0	; () banked
  1964  001DC8  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1968  001DCA  0E34               	movlw	52
  1969  001DCC  0100               	movlb	0	; () banked
  1970  001DCE  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  1971  001DD0  0EF2               	movlw	242
  1972  001DD2                     u5297:
  1973  001DD2  2EE8               	decfsz	wreg,f,c
  1974  001DD4  D7FE               	goto	u5297
  1975  001DD6  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  1976  001DD8  D7FC               	goto	u5297
  1977                           
  1978                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1979  001DDA  88D3               	bsf	4051,4,c	;volatile
  1980  001DDC  8AD3               	bsf	4051,5,c	;volatile
  1981  001DDE  8CD3               	bsf	4051,6,c	;volatile
  1982                           
  1983                           ;Funciones_Db.c: 74: TRISA = TRISB = TRISC = TRISD = TRISE = 0;
  1984  001DE0  0E00               	movlw	0
  1985  001DE2  6E96               	movwf	3990,c	;volatile
  1986  001DE4  CF96 FF95          	movff	3990,3989	;volatile
  1987  001DE8  CF95 FF94          	movff	3989,3988	;volatile
  1988  001DEC  CF94 FF93          	movff	3988,3987	;volatile
  1989  001DF0  CF93 FF92          	movff	3987,3986	;volatile
  1990                           
  1991                           ;Funciones_Db.c: 75: PORTA = PORTB = PORTC = PORTD = PORTE = 0;
  1992  001DF4  0E00               	movlw	0
  1993  001DF6  6E84               	movwf	3972,c	;volatile
  1994  001DF8  CF84 FF83          	movff	3972,3971	;volatile
  1995  001DFC  CF83 FF82          	movff	3971,3970	;volatile
  1996  001E00  CF82 FF81          	movff	3970,3969	;volatile
  1997  001E04  CF81 FF80          	movff	3969,3968	;volatile
  1998                           
  1999                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  2000  001E08  8E94               	bsf	3988,7,c	;volatile
  2001                           
  2002                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  2003  001E0A  9C94               	bcf	3988,6,c	;volatile
  2004                           
  2005                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  2006  001E0C  0E00               	movlw	0
  2007  001E0E  0100               	movlb	0	; () banked
  2008  001E10  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  2009  001E12  0E01               	movlw	1
  2010  001E14  0100               	movlb	0	; () banked
  2011  001E16  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  2012  001E18                     
  2013                           ; BSR set to: 0
  2014  001E18  0100               	movlb	0	; () banked
  2015  001E1A  5182               	movf	(Inicializa_Driveby@i+1)& (0+255),w,b
  2016  001E1C  0A80               	xorlw	128
  2017  001E1E  0F80               	addlw	-128
  2018  001E20  0E33               	movlw	51
  2019  001E22  B4D8               	btfsc	status,2,c
  2020  001E24  5D81               	subwf	Inicializa_Driveby@i& (0+255),w,b
  2021  001E26  B0D8               	btfsc	status,0,c
  2022  001E28  D00D               	goto	l4546
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  2026                           
  2027                           ; BSR set to: 0
  2028                           
  2029                           ; BSR set to: 0
  2030  001E2A  0E1A               	movlw	26
  2031  001E2C  0100               	movlb	0	; () banked
  2032  001E2E  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  2033  001E30  0EF8               	movlw	248
  2034  001E32                     u5307:
  2035  001E32  2EE8               	decfsz	wreg,f,c
  2036  001E34  D7FE               	goto	u5307
  2037  001E36  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  2038  001E38  D7FC               	goto	u5307
  2039  001E3A  D000               	nop2	
  2040  001E3C  0100               	movlb	0	; () banked
  2041  001E3E  4B81               	infsnz	Inicializa_Driveby@i& (0+255),f,b
  2042  001E40  2B82               	incf	(Inicializa_Driveby@i+1)& (0+255),f,b
  2043  001E42  D7EA               	goto	L1
  2044  001E44                     l4546:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;Funciones_Db.c: 80: PORTE = 0;
  2048  001E44  0E00               	movlw	0
  2049  001E46  6E84               	movwf	3972,c	;volatile
  2050                           
  2051                           ;Funciones_Db.c: 81: PORTB = 0;
  2052  001E48  0E00               	movlw	0
  2053  001E4A  6E81               	movwf	3969,c	;volatile
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  2057  001E4C  8093               	bsf	3987,0,c	;volatile
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  2061  001E4E  8293               	bsf	3987,1,c	;volatile
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  2065  001E50  8493               	bsf	3987,2,c	;volatile
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  2069  001E52  8693               	bsf	3987,3,c	;volatile
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  2073  001E54  8893               	bsf	3987,4,c	;volatile
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;Funciones_Db.c: 87: external_interrupt_init();
  2077  001E56  EC59  F01A         	call	_external_interrupt_init	;wreg free
  2078                           
  2079                           ;Funciones_Db.c: 88: Lcd_Clear();
  2080  001E5A  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  2081                           
  2082                           ;Funciones_Db.c: 89: Lcd_Set_Cursor(2, 1);
  2083  001E5E  0E01               	movlw	1
  2084  001E60  0100               	movlb	0	; () banked
  2085  001E62  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  2086  001E64  0E02               	movlw	2
  2087  001E66  ECDB  F016         	call	_Lcd_Set_Cursor
  2088                           
  2089                           ;Funciones_Db.c: 90: Lcd_Write_String("INICIO");
  2090  001E6A  0E7F               	movlw	high STR_10
  2091  001E6C  0100               	movlb	0	; () banked
  2092  001E6E  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2093  001E70  0EF6               	movlw	low STR_10
  2094  001E72  0100               	movlb	0	; () banked
  2095  001E74  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  2096  001E76  EC94  F014         	call	_Lcd_Write_String	;wreg free
  2097                           
  2098                           ;Funciones_Db.c: 92: BT_Init();
  2099  001E7A  EC03  F012         	call	_BT_Init	;wreg free
  2100                           
  2101                           ;Funciones_Db.c: 93: Lcd_Clear();
  2102  001E7E  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  2103                           
  2104                           ;Funciones_Db.c: 94: Lcd_Set_Cursor(1, 1);
  2105  001E82  0E01               	movlw	1
  2106  001E84  0100               	movlb	0	; () banked
  2107  001E86  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  2108  001E88  0E01               	movlw	1
  2109  001E8A  ECDB  F016         	call	_Lcd_Set_Cursor
  2110                           
  2111                           ;Funciones_Db.c: 95: Lcd_Write_String("BT INICIALIZADO");
  2112  001E8E  0E7F               	movlw	high STR_11
  2113  001E90  0100               	movlb	0	; () banked
  2114  001E92  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2115  001E94  0E58               	movlw	low STR_11
  2116  001E96  0100               	movlb	0	; () banked
  2117  001E98  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  2118  001E9A  EC94  F014         	call	_Lcd_Write_String	;wreg free
  2119                           
  2120                           ;Funciones_Db.c: 97: Pause_seg(7);
  2121  001E9E  0E07               	movlw	7
  2122  001EA0  ECB2  F017         	call	_Pause_seg
  2123                           
  2124                           ;Funciones_Db.c: 98: cad = 0;
  2125  001EA4  0E00               	movlw	0
  2126  001EA6  6E55               	movwf	_cad,c
  2127                           
  2128                           ;Funciones_Db.c: 99: clrBufferUSART();
  2129  001EA8  ECBC  F018         	call	_clrBufferUSART	;wreg free
  2130                           
  2131                           ;Funciones_Db.c: 102: PWM_init1(0xff);
  2132  001EAC  0EFF               	movlw	255
  2133  001EAE  EC02  F01A         	call	_PWM_init1
  2134                           
  2135                           ;Funciones_Db.c: 103: PWM_init2(0xff);
  2136  001EB2  0EFF               	movlw	255
  2137  001EB4  ECEF  F019         	call	_PWM_init2
  2138                           
  2139                           ;Funciones_Db.c: 104: return;
  2140  001EB8  0012               	return	
  2141  001EBA                     __end_of_Inicializa_Driveby:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1l	equ	0xFE1
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _external_interrupt_init *****************
  2155 ;; Defined at:
  2156 ;;		line 107 in file "Funciones_Db.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;		None               void
  2163 ;; Registers used:
  2164 ;;		None
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0
  2171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2174 ;;Total ram usage:        0 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    4
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_Inicializa_Driveby
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text4
  2185  0034B2                     __ptext4:
  2186                           	opt stack 0
  2187  0034B2                     _external_interrupt_init:
  2188                           	opt stack 25
  2189                           
  2190                           ;Funciones_Db.c: 110: TRISBbits.TRISB0 = 1;
  2191                           
  2192                           ;incstack = 0
  2193  0034B2  8093               	bsf	3987,0,c	;volatile
  2194                           
  2195                           ;Funciones_Db.c: 111: INTCONbits.INT0E = 1;
  2196  0034B4  88F2               	bsf	intcon,4,c	;volatile
  2197                           
  2198                           ;Funciones_Db.c: 112: INTCON2bits.INTEDG0 = 0;
  2199  0034B6  9CF1               	bcf	intcon2,6,c	;volatile
  2200                           
  2201                           ;Funciones_Db.c: 113: INTCONbits.INT0F = 0;
  2202  0034B8  92F2               	bcf	intcon,1,c	;volatile
  2203                           
  2204                           ;Funciones_Db.c: 115: TRISBbits.TRISB1 = 1;
  2205  0034BA  8293               	bsf	3987,1,c	;volatile
  2206                           
  2207                           ;Funciones_Db.c: 116: INTCON3bits.INT1E = 1;
  2208  0034BC  86F0               	bsf	intcon3,3,c	;volatile
  2209                           
  2210                           ;Funciones_Db.c: 117: INTCON2bits.INTEDG1 = 0;
  2211  0034BE  9AF1               	bcf	intcon2,5,c	;volatile
  2212                           
  2213                           ;Funciones_Db.c: 118: INTCON3bits.INT1F = 0;
  2214  0034C0  90F0               	bcf	intcon3,0,c	;volatile
  2215                           
  2216                           ;Funciones_Db.c: 120: TRISBbits.TRISB2 = 1;
  2217  0034C2  8493               	bsf	3987,2,c	;volatile
  2218                           
  2219                           ;Funciones_Db.c: 121: INTCON3bits.INT2E = 1;
  2220  0034C4  88F0               	bsf	intcon3,4,c	;volatile
  2221                           
  2222                           ;Funciones_Db.c: 122: INTCON2bits.INTEDG2 = 0;
  2223  0034C6  98F1               	bcf	intcon2,4,c	;volatile
  2224                           
  2225                           ;Funciones_Db.c: 123: INTCON3bits.INT2F = 0;
  2226  0034C8  92F0               	bcf	intcon3,1,c	;volatile
  2227                           
  2228                           ;Funciones_Db.c: 124: return;
  2229  0034CA  0012               	return	
  2230  0034CC                     __end_of_external_interrupt_init:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           intcon	equ	0xFF2
  2237                           intcon2	equ	0xFF1
  2238                           intcon3	equ	0xFF0
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           postdec1	equ	0xFE5
  2242                           fsr1l	equ	0xFE1
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _PWM_init2 *****************
  2246 ;; Defined at:
  2247 ;;		line 42 in file "pwm.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  period          1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  period          1    3[BANK0 ] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;		None               void
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0
  2262 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2264 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    5
  2268 ;; This function calls:
  2269 ;;		_OpenPWM2
  2270 ;; This function is called by:
  2271 ;;		_Inicializa_Driveby
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text5
  2276  0033DE                     __ptext5:
  2277                           	opt stack 0
  2278  0033DE                     _PWM_init2:
  2279                           	opt stack 24
  2280                           
  2281                           ;incstack = 0
  2282                           ;PWM_init2@period stored from wreg
  2283  0033DE  0100               	movlb	0	; () banked
  2284  0033E0  6F63               	movwf	PWM_init2@period& (0+255),b
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;pwm.c: 43: Timer2Config = 0b11111110;
  2288  0033E2  0EFE               	movlw	254
  2289  0033E4  0100               	movlb	0	; () banked
  2290  0033E6  6FEE               	movwf	_Timer2Config& (0+255),b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  2294  0033E8  0100               	movlb	0	; () banked
  2295  0033EA  51EE               	movf	_Timer2Config& (0+255),w,b
  2296  0033EC  0BFB               	andlw	251
  2297  0033EE  6ECA               	movwf	4042,c	;volatile
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;pwm.c: 47: TMR2 = 0;
  2301  0033F0  0E00               	movlw	0
  2302  0033F2  6ECC               	movwf	4044,c	;volatile
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  2306  0033F4  929E               	bcf	3998,1,c	;volatile
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  2310  0033F6  929D               	bcf	3997,1,c	;volatile
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  2314  0033F8  84CA               	bsf	4042,2,c	;volatile
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;pwm.c: 51: OpenPWM2(period);
  2318  0033FA  0100               	movlb	0	; () banked
  2319  0033FC  5163               	movf	PWM_init2@period& (0+255),w,b
  2320  0033FE  EC9A  F018         	call	_OpenPWM2
  2321                           
  2322                           ;pwm.c: 53: return;
  2323  003402  0012               	return	
  2324  003404                     __end_of_PWM_init2:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           intcon	equ	0xFF2
  2331                           intcon2	equ	0xFF1
  2332                           intcon3	equ	0xFF0
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           postdec1	equ	0xFE5
  2336                           fsr1l	equ	0xFE1
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _OpenPWM2 *****************
  2340 ;; Defined at:
  2341 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  period          1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  period          1    1[BANK0 ] unsigned char 
  2346 ;;  ccp2mx          1    2[BANK0 ] unsigned char 
  2347 ;;  pmmode          1    0        unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2357 ;;      Params:         0       0       0       0       0       0       0       0       0
  2358 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2359 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2360 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2361 ;;Total ram usage:        3 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    4
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_PWM_init2
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text6
  2372  003134                     __ptext6:
  2373                           	opt stack 0
  2374  003134                     _OpenPWM2:
  2375                           	opt stack 24
  2376                           
  2377                           ;incstack = 0
  2378                           ;OpenPWM2@period stored from wreg
  2379  003134  0100               	movlb	0	; () banked
  2380  003136  6F61               	movwf	OpenPWM2@period& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383  003138  0E0C               	movlw	12
  2384  00313A  6EBA               	movwf	4026,c	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387  00313C  0E05               	movlw	5
  2388  00313E  6EF6               	movwf	tblptrl,c
  2389  003140                     	if	1	;There is more than 1 active tblptr byte
  2390  003140  0E00               	movlw	0
  2391  003142  6EF7               	movwf	tblptrh,c
  2392  003144                     	endif
  2393  003144                     	if	1	;There are 3 active tblptr bytes
  2394  003144  0E30               	movlw	48
  2395  003146  6EF8               	movwf	tblptru,c
  2396  003148                     	endif
  2397  003148  0008               	tblrd		*
  2398  00314A  CFF5 F060          	movff	tablat,??_OpenPWM2
  2399  00314E  0100               	movlb	0	; () banked
  2400  003150  A160               	btfss	??_OpenPWM2& (0+255),0,b
  2401  003152  D003               	goto	l4034
  2402                           
  2403                           ; BSR set to: 0
  2404  003154  0100               	movlb	0	; () banked
  2405  003156  6962               	setf	OpenPWM2@ccp2mx& (0+255),b
  2406  003158  D003               	goto	l609
  2407  00315A                     l4034:
  2408                           
  2409                           ; BSR set to: 0
  2410  00315A  0E00               	movlw	0
  2411  00315C  0100               	movlb	0	; () banked
  2412  00315E  6F62               	movwf	OpenPWM2@ccp2mx& (0+255),b
  2413  003160                     l609:
  2414                           
  2415                           ; BSR set to: 0
  2416  003160  0100               	movlb	0	; () banked
  2417  003162  5162               	movf	OpenPWM2@ccp2mx& (0+255),w,b
  2418  003164  B4D8               	btfsc	status,2,c
  2419  003166  D002               	goto	l610
  2420                           
  2421                           ; BSR set to: 0
  2422  003168  9294               	bcf	3988,1,c	;volatile
  2423  00316A  D001               	goto	l611
  2424  00316C                     l610:
  2425                           
  2426                           ; BSR set to: 0
  2427  00316C  9693               	bcf	3987,3,c	;volatile
  2428  00316E                     l611:
  2429                           
  2430                           ; BSR set to: 0
  2431  00316E  94CA               	bcf	4042,2,c	;volatile
  2432  003170  C061  FFCB         	movff	OpenPWM2@period,4043	;volatile
  2433  003174  84CA               	bsf	4042,2,c	;volatile
  2434                           
  2435                           ; BSR set to: 0
  2436  003176  0012               	return	
  2437  003178                     __end_of_OpenPWM2:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           intcon	equ	0xFF2
  2444                           intcon2	equ	0xFF1
  2445                           intcon3	equ	0xFF0
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           postdec1	equ	0xFE5
  2449                           fsr1l	equ	0xFE1
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _PWM_init1 *****************
  2453 ;; Defined at:
  2454 ;;		line 20 in file "pwm.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  period          1    wreg     unsigned char 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  period          1    1[BANK0 ] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;		None               void
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0
  2469 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2471 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2472 ;;Total ram usage:        1 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    5
  2475 ;; This function calls:
  2476 ;;		_OpenPWM1
  2477 ;; This function is called by:
  2478 ;;		_Inicializa_Driveby
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text7
  2483  003404                     __ptext7:
  2484                           	opt stack 0
  2485  003404                     _PWM_init1:
  2486                           	opt stack 24
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;incstack = 0
  2490                           ;PWM_init1@period stored from wreg
  2491  003404  0100               	movlb	0	; () banked
  2492  003406  6F61               	movwf	PWM_init1@period& (0+255),b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;pwm.c: 21: Timer2Config = 0b11111110;
  2496  003408  0EFE               	movlw	254
  2497  00340A  0100               	movlb	0	; () banked
  2498  00340C  6FEE               	movwf	_Timer2Config& (0+255),b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  2502  00340E  0100               	movlb	0	; () banked
  2503  003410  51EE               	movf	_Timer2Config& (0+255),w,b
  2504  003412  0BFB               	andlw	251
  2505  003414  6ECA               	movwf	4042,c	;volatile
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;pwm.c: 25: TMR2 = 0;
  2509  003416  0E00               	movlw	0
  2510  003418  6ECC               	movwf	4044,c	;volatile
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  2514  00341A  929E               	bcf	3998,1,c	;volatile
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  2518  00341C  929D               	bcf	3997,1,c	;volatile
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  2522  00341E  84CA               	bsf	4042,2,c	;volatile
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;pwm.c: 29: OpenPWM1(period);
  2526  003420  0100               	movlb	0	; () banked
  2527  003422  5161               	movf	PWM_init1@period& (0+255),w,b
  2528  003424  EC7E  F01A         	call	_OpenPWM1
  2529                           
  2530                           ;pwm.c: 31: return;
  2531  003428  0012               	return	
  2532  00342A                     __end_of_PWM_init1:
  2533                           	opt stack 0
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           intcon	equ	0xFF2
  2539                           intcon2	equ	0xFF1
  2540                           intcon3	equ	0xFF0
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           fsr1l	equ	0xFE1
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _OpenPWM1 *****************
  2548 ;; Defined at:
  2549 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  period          1    wreg     unsigned char 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  period          1    0[BANK0 ] unsigned char 
  2554 ;; Return value:  Size  Location     Type
  2555 ;;		None               void
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0
  2564 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2566 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2567 ;;Total ram usage:        1 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    4
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_PWM_init1
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text8
  2578  0034FC                     __ptext8:
  2579                           	opt stack 0
  2580  0034FC                     _OpenPWM1:
  2581                           	opt stack 24
  2582                           
  2583                           ;incstack = 0
  2584                           ;OpenPWM1@period stored from wreg
  2585  0034FC  0100               	movlb	0	; () banked
  2586  0034FE  6F60               	movwf	OpenPWM1@period& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589  003500  0E0C               	movlw	12
  2590  003502  12BD               	iorwf	4029,f,c	;volatile
  2591                           
  2592                           ; BSR set to: 0
  2593  003504  9494               	bcf	3988,2,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596  003506  94CA               	bcf	4042,2,c	;volatile
  2597                           
  2598                           ; BSR set to: 0
  2599  003508  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2600                           
  2601                           ; BSR set to: 0
  2602  00350C  84CA               	bsf	4042,2,c	;volatile
  2603                           
  2604                           ; BSR set to: 0
  2605  00350E  0012               	return	
  2606  003510                     __end_of_OpenPWM1:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           intcon	equ	0xFF2
  2613                           intcon2	equ	0xFF1
  2614                           intcon3	equ	0xFF0
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _BT_Init *****************
  2622 ;; Defined at:
  2623 ;;		line 16 in file "Bluetooth.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  nameBT         18   14[BANK0 ] unsigned char [18]
  2628 ;; Return value:  Size  Location     Type
  2629 ;;		None               void
  2630 ;; Registers used:
  2631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0
  2638 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2640 ;;      Totals:         0      18       0       0       0       0       0       0       0
  2641 ;;Total ram usage:       18 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    8
  2644 ;; This function calls:
  2645 ;;		_Pause_seg
  2646 ;;		_SendBlueToothCommand
  2647 ;;		_UART1_Init
  2648 ;; This function is called by:
  2649 ;;		_Inicializa_Driveby
  2650 ;;		_EstadoBluetooth
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text9
  2655  002406                     __ptext9:
  2656                           	opt stack 0
  2657  002406                     _BT_Init:
  2658                           	opt stack 21
  2659                           
  2660                           ;Bluetooth.c: 18: UART1_Init(51);
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;incstack = 0
  2664  002406  0E33               	movlw	51
  2665  002408  EC73  F01A         	call	_UART1_Init
  2666                           
  2667                           ;Bluetooth.c: 21: Pause_seg(1);
  2668  00240C  0E01               	movlw	1
  2669  00240E  ECB2  F017         	call	_Pause_seg
  2670                           
  2671                           ;Bluetooth.c: 22: char nameBT[18] = {
  2672                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  2673                           ;Bluetooth.c: 24: };
  2674  002412  EE21  F06E         	lfsr	2,BT_Init@F5675
  2675  002416  EE10  F06E         	lfsr	1,BT_Init@nameBT
  2676  00241A  0E12               	movlw	18
  2677  00241C                     u4251:
  2678  00241C  CFDE FFE6          	movff	postinc2,postinc1
  2679  002420  2EE8               	decfsz	wreg,f,c
  2680  002422  D7FC               	goto	u4251
  2681                           
  2682                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  2683  002424  0E7F               	movlw	high STR_1
  2684  002426  0100               	movlb	0	; () banked
  2685  002428  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2686  00242A  0EBC               	movlw	low STR_1
  2687  00242C  0100               	movlb	0	; () banked
  2688  00242E  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2689  002430  0E00               	movlw	0
  2690  002432  0100               	movlb	0	; () banked
  2691  002434  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2692  002436  0E0B               	movlw	11
  2693  002438  0100               	movlb	0	; () banked
  2694  00243A  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2695  00243C  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2696                           
  2697                           ;Bluetooth.c: 29: Pause_seg(1);
  2698  002440  0E01               	movlw	1
  2699  002442  ECB2  F017         	call	_Pause_seg
  2700                           
  2701                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  2702  002446  0100               	movlb	0	; () banked
  2703  002448  0E00               	movlw	high BT_Init@nameBT
  2704  00244A  0100               	movlb	0	; () banked
  2705  00244C  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2706  00244E  0100               	movlb	0	; () banked
  2707  002450  0E6E               	movlw	low BT_Init@nameBT
  2708  002452  0100               	movlb	0	; () banked
  2709  002454  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2710  002456  0E00               	movlw	0
  2711  002458  0100               	movlb	0	; () banked
  2712  00245A  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2713  00245C  0E12               	movlw	18
  2714  00245E  0100               	movlb	0	; () banked
  2715  002460  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2716  002462  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2717                           
  2718                           ;Bluetooth.c: 33: Pause_seg(2);
  2719  002466  0E02               	movlw	2
  2720  002468  ECB2  F017         	call	_Pause_seg
  2721                           
  2722                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  2723  00246C  0E7F               	movlw	high STR_2
  2724  00246E  0100               	movlb	0	; () banked
  2725  002470  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2726  002472  0E68               	movlw	low STR_2
  2727  002474  0100               	movlb	0	; () banked
  2728  002476  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2729  002478  0E00               	movlw	0
  2730  00247A  0100               	movlb	0	; () banked
  2731  00247C  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2732  00247E  0E0E               	movlw	14
  2733  002480  0100               	movlb	0	; () banked
  2734  002482  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2735  002484  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2736                           
  2737                           ;Bluetooth.c: 36: Pause_seg(2);
  2738  002488  0E02               	movlw	2
  2739  00248A  ECB2  F017         	call	_Pause_seg
  2740                           
  2741                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  2742  00248E  0E7F               	movlw	high STR_3
  2743  002490  0100               	movlb	0	; () banked
  2744  002492  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2745  002494  0EDE               	movlw	low STR_3
  2746  002496  0100               	movlb	0	; () banked
  2747  002498  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2748  00249A  0E00               	movlw	0
  2749  00249C  0100               	movlb	0	; () banked
  2750  00249E  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2751  0024A0  0E08               	movlw	8
  2752  0024A2  0100               	movlb	0	; () banked
  2753  0024A4  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2754  0024A6  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2755                           
  2756                           ;Bluetooth.c: 41: Pause_seg(2);
  2757  0024AA  0E02               	movlw	2
  2758  0024AC  ECB2  F017         	call	_Pause_seg
  2759                           
  2760                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  2761  0024B0  0E7F               	movlw	high STR_3
  2762  0024B2  0100               	movlb	0	; () banked
  2763  0024B4  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2764  0024B6  0EDE               	movlw	low STR_3
  2765  0024B8  0100               	movlb	0	; () banked
  2766  0024BA  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2767  0024BC  0E00               	movlw	0
  2768  0024BE  0100               	movlb	0	; () banked
  2769  0024C0  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2770  0024C2  0E08               	movlw	8
  2771  0024C4  0100               	movlb	0	; () banked
  2772  0024C6  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2773  0024C8  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2774                           
  2775                           ;Bluetooth.c: 44: Pause_seg(2);
  2776  0024CC  0E02               	movlw	2
  2777  0024CE  ECB2  F017         	call	_Pause_seg
  2778                           
  2779                           ;Bluetooth.c: 45: return;
  2780  0024D2  0012               	return	
  2781  0024D4                     __end_of_BT_Init:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           intcon	equ	0xFF2
  2788                           intcon2	equ	0xFF1
  2789                           intcon3	equ	0xFF0
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           postinc1	equ	0xFE6
  2793                           postdec1	equ	0xFE5
  2794                           fsr1l	equ	0xFE1
  2795                           postinc2	equ	0xFDE
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _SendBlueToothCommand *****************
  2799 ;; Defined at:
  2800 ;;		line 48 in file "Bluetooth.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  command         2   10[BANK0 ] PTR const unsigned char 
  2803 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2804 ;;		 -> BT_Init@nameBT(18), 
  2805 ;;  total           2   12[BANK0 ] unsigned int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;		None               void
  2810 ;; Registers used:
  2811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2817 ;;      Params:         0       4       0       0       0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2820 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2821 ;;Total ram usage:        4 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    7
  2824 ;; This function calls:
  2825 ;;		_putSTRINGU1
  2826 ;; This function is called by:
  2827 ;;		_BT_Init
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text10
  2832  0034CC                     __ptext10:
  2833                           	opt stack 0
  2834  0034CC                     _SendBlueToothCommand:
  2835                           	opt stack 21
  2836                           
  2837                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  2838                           
  2839                           ;incstack = 0
  2840  0034CC  0100               	movlb	0	; () banked
  2841  0034CE  C06B  F063         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  2842  0034D2  0100               	movlb	0	; () banked
  2843  0034D4  C06A  F062         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  2844  0034D8  C06C  F064         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  2845  0034DC  C06D  F065         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  2846  0034E0  EC8F  F013         	call	_putSTRINGU1	;wreg free
  2847                           
  2848                           ;Bluetooth.c: 50: return;
  2849  0034E4  0012               	return	
  2850  0034E6                     __end_of_SendBlueToothCommand:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           intcon	equ	0xFF2
  2857                           intcon2	equ	0xFF1
  2858                           intcon3	equ	0xFF0
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postinc1	equ	0xFE6
  2862                           postdec1	equ	0xFE5
  2863                           fsr1l	equ	0xFE1
  2864                           postinc2	equ	0xFDE
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function _putSTRINGU1 *****************
  2868 ;; Defined at:
  2869 ;;		line 18 in file "UART1.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  dato            2    2[BANK0 ] PTR const unsigned char 
  2872 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2873 ;;		 -> BT_Init@nameBT(18), 
  2874 ;;  total           2    4[BANK0 ] unsigned int 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  cont            1    9[BANK0 ] unsigned char 
  2877 ;;  last            1    8[BANK0 ] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;		None               void
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2887 ;;      Params:         0       4       0       0       0       0       0       0       0
  2888 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2889 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2890 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2891 ;;Total ram usage:        8 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    6
  2894 ;; This function calls:
  2895 ;;		_putcTxU1
  2896 ;; This function is called by:
  2897 ;;		_SendBlueToothCommand
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text11
  2902  00271E                     __ptext11:
  2903                           	opt stack 0
  2904  00271E                     _putSTRINGU1:
  2905                           	opt stack 21
  2906                           
  2907                           ;UART1.c: 19: unsigned char cont,last;
  2908                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2909                           
  2910                           ;incstack = 0
  2911  00271E  0E00               	movlw	0
  2912  002720  0100               	movlb	0	; () banked
  2913  002722  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2914  002724  0E00               	movlw	0
  2915  002726  0100               	movlb	0	; () banked
  2916  002728  6F68               	movwf	putSTRINGU1@last& (0+255),b
  2917  00272A  D025               	goto	l3390
  2918  00272C                     l3384:
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2922  00272C  0100               	movlb	0	; () banked
  2923  00272E  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2924  002730  0D01               	mullw	1
  2925  002732  0100               	movlb	0	; () banked
  2926  002734  C062  F066         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2927  002738  0100               	movlb	0	; () banked
  2928  00273A  C063  F067         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2929  00273E  50F3               	movf	prodl,w,c
  2930  002740  0100               	movlb	0	; () banked
  2931  002742  2766               	addwf	??_putSTRINGU1& (0+255),f,b
  2932  002744  50F4               	movf	prodh,w,c
  2933  002746  0100               	movlb	0	; () banked
  2934  002748  2367               	addwfc	(??_putSTRINGU1+1)& (0+255),f,b
  2935  00274A  C066  FFF6         	movff	??_putSTRINGU1,tblptrl
  2936  00274E  C067  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2937  002752  6AF8               	clrf	tblptru,c
  2938  002754  0E07               	movlw	(high __ramtop+-1)
  2939  002756  64F7               	cpfsgt	tblptrh,c
  2940  002758  D003               	bra	u3157
  2941  00275A  0008               	tblrd		*
  2942  00275C  50F5               	movf	tablat,w,c
  2943  00275E  D005               	bra	u3150
  2944  002760                     u3157:
  2945  002760  CFF6 FFE9          	movff	tblptrl,fsr0l
  2946  002764  CFF7 FFEA          	movff	tblptrh,fsr0h
  2947  002768  50EF               	movf	indf0,w,c
  2948  00276A                     u3150:
  2949  00276A  0900               	iorlw	0
  2950  00276C  A4D8               	btfss	status,2,c
  2951  00276E  C069  F068         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2952  002772  0100               	movlb	0	; () banked
  2953  002774  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  2954  002776                     l3390:
  2955                           
  2956                           ; BSR set to: 0
  2957  002776  0100               	movlb	0	; () banked
  2958  002778  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2959  00277A  0100               	movlb	0	; () banked
  2960  00277C  6F66               	movwf	??_putSTRINGU1& (0+255),b
  2961  00277E  6B67               	clrf	(??_putSTRINGU1+1)& (0+255),b
  2962  002780  0100               	movlb	0	; () banked
  2963  002782  5164               	movf	putSTRINGU1@total& (0+255),w,b
  2964  002784  0100               	movlb	0	; () banked
  2965  002786  5D66               	subwf	??_putSTRINGU1& (0+255),w,b
  2966  002788  0100               	movlb	0	; () banked
  2967  00278A  5165               	movf	(putSTRINGU1@total+1)& (0+255),w,b
  2968  00278C  0100               	movlb	0	; () banked
  2969  00278E  5967               	subwfb	(??_putSTRINGU1+1)& (0+255),w,b
  2970  002790  A0D8               	btfss	status,0,c
  2971  002792  D7CC               	goto	l3384
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;UART1.c: 23: }
  2975                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2976                           
  2977                           ; BSR set to: 0
  2978  002794  0E00               	movlw	0
  2979  002796  0100               	movlb	0	; () banked
  2980  002798  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2981  00279A  D019               	goto	l3400
  2982  00279C                     l3394:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;UART1.c: 26: putcTxU1(*dato++);
  2986  00279C  0100               	movlb	0	; () banked
  2987  00279E  C062  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2988  0027A2  0100               	movlb	0	; () banked
  2989  0027A4  C063  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2990  0027A8  6AF8               	clrf	tblptru,c
  2991  0027AA  0E07               	movlw	(high __ramtop+-1)
  2992  0027AC  64F7               	cpfsgt	tblptrh,c
  2993  0027AE  D003               	bra	u3187
  2994  0027B0  0008               	tblrd		*
  2995  0027B2  50F5               	movf	tablat,w,c
  2996  0027B4  D005               	bra	u3180
  2997  0027B6                     u3187:
  2998  0027B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2999  0027BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3000  0027BE  50EF               	movf	indf0,w,c
  3001  0027C0                     u3180:
  3002  0027C0  EC9B  F01A         	call	_putcTxU1
  3003  0027C4  0100               	movlb	0	; () banked
  3004  0027C6  4B62               	infsnz	putSTRINGU1@dato& (0+255),f,b
  3005  0027C8  2B63               	incf	(putSTRINGU1@dato+1)& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008  0027CA  0100               	movlb	0	; () banked
  3009  0027CC  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  3010  0027CE                     l3400:
  3011                           
  3012                           ; BSR set to: 0
  3013  0027CE  0100               	movlb	0	; () banked
  3014  0027D0  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  3015  0027D2  0100               	movlb	0	; () banked
  3016  0027D4  5D68               	subwf	putSTRINGU1@last& (0+255),w,b
  3017  0027D6  A0D8               	btfss	status,0,c
  3018                           
  3019                           ; BSR set to: 0
  3020                           
  3021                           ; BSR set to: 0
  3022  0027D8  0012               	return	
  3023  0027DA  D7E0               	goto	l3394
  3024  0027DC                     __end_of_putSTRINGU1:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           intcon2	equ	0xFF1
  3034                           intcon3	equ	0xFF0
  3035                           indf0	equ	0xFEF
  3036                           postinc0	equ	0xFEE
  3037                           fsr0h	equ	0xFEA
  3038                           fsr0l	equ	0xFE9
  3039                           wreg	equ	0xFE8
  3040                           postinc1	equ	0xFE6
  3041                           postdec1	equ	0xFE5
  3042                           fsr1l	equ	0xFE1
  3043                           postinc2	equ	0xFDE
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _putcTxU1 *****************
  3047 ;; Defined at:
  3048 ;;		line 12 in file "UART1.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  character       1    wreg     unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  character       1    1[BANK0 ] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0
  3063 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3065 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3066 ;;Total ram usage:        1 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    5
  3069 ;; This function calls:
  3070 ;;		_WriteUSART
  3071 ;; This function is called by:
  3072 ;;		_putSTRINGU1
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text12
  3077  003536                     __ptext12:
  3078                           	opt stack 0
  3079  003536                     _putcTxU1:
  3080                           	opt stack 21
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;incstack = 0
  3084                           ;putcTxU1@character stored from wreg
  3085  003536  0100               	movlb	0	; () banked
  3086  003538  6F61               	movwf	putcTxU1@character& (0+255),b
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;UART1.c: 14: WriteUSART(character);
  3090  00353A  0100               	movlb	0	; () banked
  3091  00353C  5161               	movf	putcTxU1@character& (0+255),w,b
  3092  00353E  EC88  F01A         	call	_WriteUSART
  3093  003542                     l245:
  3094  003542  B2AC               	btfsc	4012,1,c	;volatile
  3095  003544  0012               	return	
  3096  003546  D7FD               	goto	l245
  3097  003548                     __end_of_putcTxU1:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           intcon	equ	0xFF2
  3106                           intcon2	equ	0xFF1
  3107                           intcon3	equ	0xFF0
  3108                           indf0	equ	0xFEF
  3109                           postinc0	equ	0xFEE
  3110                           fsr0h	equ	0xFEA
  3111                           fsr0l	equ	0xFE9
  3112                           wreg	equ	0xFE8
  3113                           postinc1	equ	0xFE6
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           postinc2	equ	0xFDE
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _Pause_seg *****************
  3120 ;; Defined at:
  3121 ;;		line 18 in file "Retardos.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  x               1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  x               1    5[BANK0 ] unsigned char 
  3126 ;;  i               1    6[BANK0 ] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;		None               void
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3136 ;;      Params:         0       0       0       0       0       0       0       0       0
  3137 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3139 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    5
  3143 ;; This function calls:
  3144 ;;		_Pause_ms
  3145 ;; This function is called by:
  3146 ;;		_BT_Init
  3147 ;;		_Inicializa_Driveby
  3148 ;;		_EstadoBluetooth
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text13
  3153  002F64                     __ptext13:
  3154                           	opt stack 0
  3155  002F64                     _Pause_seg:
  3156                           	opt stack 24
  3157                           
  3158                           ;incstack = 0
  3159                           ;Pause_seg@x stored from wreg
  3160  002F64  0100               	movlb	0	; () banked
  3161  002F66  6F65               	movwf	Pause_seg@x& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;Retardos.c: 19: unsigned char i=0;
  3165  002F68  0E00               	movlw	0
  3166  002F6A  0100               	movlb	0	; () banked
  3167  002F6C  6F66               	movwf	Pause_seg@i& (0+255),b
  3168                           
  3169                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  3170  002F6E  0E00               	movlw	0
  3171  002F70  0100               	movlb	0	; () banked
  3172  002F72  6F66               	movwf	Pause_seg@i& (0+255),b
  3173  002F74  D022               	goto	l3780
  3174  002F76                     l3776:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  3178  002F76  0E00               	movlw	0
  3179  002F78  0100               	movlb	0	; () banked
  3180  002F7A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3181  002F7C  0EFA               	movlw	250
  3182  002F7E  0100               	movlb	0	; () banked
  3183  002F80  6F60               	movwf	Pause_ms@x& (0+255),b
  3184  002F82  EC54  F018         	call	_Pause_ms	;wreg free
  3185  002F86  0E00               	movlw	0
  3186  002F88  0100               	movlb	0	; () banked
  3187  002F8A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3188  002F8C  0EFA               	movlw	250
  3189  002F8E  0100               	movlb	0	; () banked
  3190  002F90  6F60               	movwf	Pause_ms@x& (0+255),b
  3191  002F92  EC54  F018         	call	_Pause_ms	;wreg free
  3192                           
  3193                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  3194  002F96  0E00               	movlw	0
  3195  002F98  0100               	movlb	0	; () banked
  3196  002F9A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3197  002F9C  0EFA               	movlw	250
  3198  002F9E  0100               	movlb	0	; () banked
  3199  002FA0  6F60               	movwf	Pause_ms@x& (0+255),b
  3200  002FA2  EC54  F018         	call	_Pause_ms	;wreg free
  3201  002FA6  0E00               	movlw	0
  3202  002FA8  0100               	movlb	0	; () banked
  3203  002FAA  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3204  002FAC  0EFA               	movlw	250
  3205  002FAE  0100               	movlb	0	; () banked
  3206  002FB0  6F60               	movwf	Pause_ms@x& (0+255),b
  3207  002FB2  EC54  F018         	call	_Pause_ms	;wreg free
  3208  002FB6  0100               	movlb	0	; () banked
  3209  002FB8  2B66               	incf	Pause_seg@i& (0+255),f,b
  3210  002FBA                     l3780:
  3211                           
  3212                           ; BSR set to: 0
  3213  002FBA  0100               	movlb	0	; () banked
  3214  002FBC  5166               	movf	Pause_seg@i& (0+255),w,b
  3215  002FBE  0100               	movlb	0	; () banked
  3216  002FC0  5D65               	subwf	Pause_seg@x& (0+255),w,b
  3217  002FC2  A0D8               	btfss	status,0,c
  3218                           
  3219                           ; BSR set to: 0
  3220                           
  3221                           ; BSR set to: 0
  3222  002FC4  0012               	return	
  3223  002FC6  D7D7               	goto	l3776
  3224  002FC8                     __end_of_Pause_seg:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           intcon3	equ	0xFF0
  3235                           indf0	equ	0xFEF
  3236                           postinc0	equ	0xFEE
  3237                           fsr0h	equ	0xFEA
  3238                           fsr0l	equ	0xFE9
  3239                           wreg	equ	0xFE8
  3240                           postinc1	equ	0xFE6
  3241                           postdec1	equ	0xFE5
  3242                           fsr1l	equ	0xFE1
  3243                           postinc2	equ	0xFDE
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _Pause_ms *****************
  3247 ;; Defined at:
  3248 ;;		line 11 in file "Retardos.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  x               2    0[BANK0 ] unsigned int 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  i               2    3[BANK0 ] unsigned int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3262 ;;      Params:         0       2       0       0       0       0       0       0       0
  3263 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3264 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3265 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3266 ;;Total ram usage:        5 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    4
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_Pause_seg
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text14
  3277  0030A8                     __ptext14:
  3278                           	opt stack 0
  3279  0030A8                     _Pause_ms:
  3280                           	opt stack 24
  3281                           
  3282                           ;Retardos.c: 12: unsigned int i=0;
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;incstack = 0
  3286  0030A8  0E00               	movlw	0
  3287  0030AA  0100               	movlb	0	; () banked
  3288  0030AC  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3289  0030AE  0E00               	movlw	0
  3290  0030B0  0100               	movlb	0	; () banked
  3291  0030B2  6F63               	movwf	Pause_ms@i& (0+255),b
  3292                           
  3293                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  3294  0030B4  0E00               	movlw	0
  3295  0030B6  0100               	movlb	0	; () banked
  3296  0030B8  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3297  0030BA  0E00               	movlw	0
  3298  0030BC  0100               	movlb	0	; () banked
  3299  0030BE  6F63               	movwf	Pause_ms@i& (0+255),b
  3300  0030C0  D00B               	goto	l224
  3301  0030C2                     l3404:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  3305  0030C2  0E03               	movlw	3
  3306  0030C4  0100               	movlb	0	; () banked
  3307  0030C6  6F62               	movwf	??_Pause_ms& (0+255),b
  3308  0030C8  0E98               	movlw	152
  3309  0030CA                     u5317:
  3310  0030CA  2EE8               	decfsz	wreg,f,c
  3311  0030CC  D7FE               	goto	u5317
  3312  0030CE  2F62               	decfsz	??_Pause_ms& (0+255),f,b
  3313  0030D0  D7FC               	goto	u5317
  3314  0030D2  0100               	movlb	0	; () banked
  3315  0030D4  4B63               	infsnz	Pause_ms@i& (0+255),f,b
  3316  0030D6  2B64               	incf	(Pause_ms@i+1)& (0+255),f,b
  3317  0030D8                     l224:
  3318                           
  3319                           ; BSR set to: 0
  3320  0030D8  0100               	movlb	0	; () banked
  3321  0030DA  5163               	movf	Pause_ms@i& (0+255),w,b
  3322  0030DC  0100               	movlb	0	; () banked
  3323  0030DE  5D60               	subwf	Pause_ms@x& (0+255),w,b
  3324  0030E0  0100               	movlb	0	; () banked
  3325  0030E2  5164               	movf	(Pause_ms@i+1)& (0+255),w,b
  3326  0030E4  0100               	movlb	0	; () banked
  3327  0030E6  5961               	subwfb	(Pause_ms@x+1)& (0+255),w,b
  3328  0030E8  A0D8               	btfss	status,0,c
  3329                           
  3330                           ; BSR set to: 0
  3331                           
  3332                           ; BSR set to: 0
  3333  0030EA  0012               	return	
  3334  0030EC  D7EA               	goto	l3404
  3335  0030EE                     __end_of_Pause_ms:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           intcon3	equ	0xFF0
  3346                           indf0	equ	0xFEF
  3347                           postinc0	equ	0xFEE
  3348                           fsr0h	equ	0xFEA
  3349                           fsr0l	equ	0xFE9
  3350                           wreg	equ	0xFE8
  3351                           postinc1	equ	0xFE6
  3352                           postdec1	equ	0xFE5
  3353                           fsr1l	equ	0xFE1
  3354                           postinc2	equ	0xFDE
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _Comando_Tablet *****************
  3358 ;; Defined at:
  3359 ;;		line 128 in file "Funciones_Db.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  sensed          2  135[BANK0 ] int 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;		None               void
  3366 ;; Registers used:
  3367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3373 ;;      Params:         0       0       0       0       0       0       0       0       0
  3374 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3376 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3377 ;;Total ram usage:        2 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    9
  3380 ;; This function calls:
  3381 ;;		_Lcd_Clear
  3382 ;;		_Lcd_Set_Cursor
  3383 ;;		_Lcd_Write_Integer
  3384 ;;		_Lcd_Write_String
  3385 ;;		_PWM_DutyCycle1
  3386 ;;		_PWM_DutyCycle2
  3387 ;;		_clrBufferUSART
  3388 ;;		_getCNY70Value
  3389 ;;		_putcBluetoothInt
  3390 ;;		_putcBluetoothString
  3391 ;; This function is called by:
  3392 ;;		_main
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text15
  3397  001B04                     __ptext15:
  3398                           	opt stack 0
  3399  001B04                     _Comando_Tablet:
  3400                           	opt stack 21
  3401                           
  3402                           ;Funciones_Db.c: 130: int sensed=0;
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;incstack = 0
  3406  001B04  0E00               	movlw	0
  3407  001B06  0100               	movlb	0	; () banked
  3408  001B08  6FE8               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  3409  001B0A  0E00               	movlw	0
  3410  001B0C  0100               	movlb	0	; () banked
  3411  001B0E  6FE7               	movwf	Comando_Tablet@sensed& (0+255),b
  3412                           
  3413                           ;Funciones_Db.c: 131: switch (BluetoothDato[1]) {
  3414  001B10  D092               	goto	l4636
  3415  001B12                     l4586:
  3416                           
  3417                           ;Funciones_Db.c: 133: Lcd_Clear();
  3418  001B12  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3419                           
  3420                           ;Funciones_Db.c: 134: Lcd_Set_Cursor(1, 1);
  3421  001B16  0E01               	movlw	1
  3422  001B18  0100               	movlb	0	; () banked
  3423  001B1A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3424  001B1C  0E01               	movlw	1
  3425  001B1E  ECDB  F016         	call	_Lcd_Set_Cursor
  3426                           
  3427                           ;Funciones_Db.c: 135: Lcd_Write_String("1");
  3428  001B22  0E7F               	movlw	high (STR_20+15)
  3429  001B24  0100               	movlb	0	; () banked
  3430  001B26  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3431  001B28  0E45               	movlw	low (STR_20+15)
  3432  001B2A  0100               	movlb	0	; () banked
  3433  001B2C  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3434  001B2E  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3435                           
  3436                           ;Funciones_Db.c: 136: break;
  3437  001B32  D093               	goto	l4638
  3438  001B34                     l4592:
  3439                           
  3440                           ;Funciones_Db.c: 138: Lcd_Clear();
  3441  001B34  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3442                           
  3443                           ;Funciones_Db.c: 139: Lcd_Set_Cursor(1, 1);
  3444  001B38  0E01               	movlw	1
  3445  001B3A  0100               	movlb	0	; () banked
  3446  001B3C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3447  001B3E  0E01               	movlw	1
  3448  001B40  ECDB  F016         	call	_Lcd_Set_Cursor
  3449                           
  3450                           ;Funciones_Db.c: 140: Lcd_Write_String("2");
  3451  001B44  0E7F               	movlw	high (STR_21+15)
  3452  001B46  0100               	movlb	0	; () banked
  3453  001B48  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3454  001B4A  0E56               	movlw	low (STR_21+15)
  3455  001B4C  0100               	movlb	0	; () banked
  3456  001B4E  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3457  001B50  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3458                           
  3459                           ;Funciones_Db.c: 141: break;
  3460  001B54  D082               	goto	l4638
  3461  001B56                     l4598:
  3462                           
  3463                           ;Funciones_Db.c: 144: Lcd_Clear();
  3464  001B56  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3465                           
  3466                           ;Funciones_Db.c: 145: Lcd_Set_Cursor(1, 1);
  3467  001B5A  0E01               	movlw	1
  3468  001B5C  0100               	movlb	0	; () banked
  3469  001B5E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3470  001B60  0E01               	movlw	1
  3471  001B62  ECDB  F016         	call	_Lcd_Set_Cursor
  3472                           
  3473                           ;Funciones_Db.c: 147: Lcd_Write_String("3");
  3474  001B66  0E7F               	movlw	high STR_14
  3475  001B68  0100               	movlb	0	; () banked
  3476  001B6A  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3477  001B6C  0EFD               	movlw	low STR_14
  3478  001B6E  0100               	movlb	0	; () banked
  3479  001B70  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3480  001B72  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3481                           
  3482                           ;Funciones_Db.c: 148: break;
  3483  001B76  D071               	goto	l4638
  3484  001B78                     l204:
  3485                           
  3486                           ; BSR set to: 1
  3487                           ;Funciones_Db.c: 153: PORTAbits.RA1 = ~ PORTAbits.RA1;
  3488  001B78  7280               	btg	3968,1,c	;volatile
  3489                           
  3490                           ; BSR set to: 1
  3491                           ;Funciones_Db.c: 154: sensed = getCNY70Value();
  3492  001B7A  EC6A  F012         	call	_getCNY70Value	;wreg free
  3493  001B7E  0100               	movlb	0	; () banked
  3494  001B80  C060  F0E7         	movff	?_getCNY70Value,Comando_Tablet@sensed
  3495  001B84  0100               	movlb	0	; () banked
  3496  001B86  C061  F0E8         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  3497                           
  3498                           ;Funciones_Db.c: 155: Lcd_Clear();
  3499  001B8A  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3500                           
  3501                           ;Funciones_Db.c: 156: Lcd_Set_Cursor(1,1);
  3502  001B8E  0E01               	movlw	1
  3503  001B90  0100               	movlb	0	; () banked
  3504  001B92  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3505  001B94  0E01               	movlw	1
  3506  001B96  ECDB  F016         	call	_Lcd_Set_Cursor
  3507                           
  3508                           ;Funciones_Db.c: 157: Lcd_Write_Integer(sensed);
  3509  001B9A  C0E7  F0CF         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  3510  001B9E  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  3511  001BA2  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3512                           
  3513                           ;Funciones_Db.c: 158: putcBluetoothInt(sensed);
  3514  001BA6  C0E7  F0CF         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  3515  001BAA  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  3516  001BAE  EC24  F015         	call	_putcBluetoothInt	;wreg free
  3517                           
  3518                           ;Funciones_Db.c: 159: putcBluetoothString("\n");
  3519  001BB2  0E7F               	movlw	high (STR_2+13)
  3520  001BB4  0100               	movlb	0	; () banked
  3521  001BB6  6F68               	movwf	(putcBluetoothString@a+1)& (0+255),b
  3522  001BB8  0E75               	movlw	low (STR_2+13)
  3523  001BBA  0100               	movlb	0	; () banked
  3524  001BBC  6F67               	movwf	putcBluetoothString@a& (0+255),b
  3525  001BBE  ECE0  F014         	call	_putcBluetoothString	;wreg free
  3526                           
  3527                           ;Funciones_Db.c: 160: break;
  3528  001BC2  D04B               	goto	l4638
  3529  001BC4                     l205:
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;Funciones_Db.c: 162: PORTAbits.RA0 = ~ PORTAbits.RA0;
  3533  001BC4  7080               	btg	3968,0,c	;volatile
  3534                           
  3535                           ; BSR set to: 1
  3536                           ;Funciones_Db.c: 163: Lcd_Clear();
  3537  001BC6  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3538                           
  3539                           ;Funciones_Db.c: 164: Lcd_Set_Cursor(1, 1);
  3540  001BCA  0E01               	movlw	1
  3541  001BCC  0100               	movlb	0	; () banked
  3542  001BCE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3543  001BD0  0E01               	movlw	1
  3544  001BD2  ECDB  F016         	call	_Lcd_Set_Cursor
  3545                           
  3546                           ;Funciones_Db.c: 165: Lcd_Write_Integer(BluetoothDato[3]);
  3547  001BD6  0101               	movlb	1	; () banked
  3548  001BD8  0100               	movlb	0	; () banked
  3549  001BDA  C12B  F0CF         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  3550  001BDE  0100               	movlb	0	; () banked
  3551  001BE0  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3552  001BE2  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3553                           
  3554                           ;Funciones_Db.c: 166: Lcd_Set_Cursor(2, 1);
  3555  001BE6  0E01               	movlw	1
  3556  001BE8  0100               	movlb	0	; () banked
  3557  001BEA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3558  001BEC  0E02               	movlw	2
  3559  001BEE  ECDB  F016         	call	_Lcd_Set_Cursor
  3560                           
  3561                           ;Funciones_Db.c: 167: Lcd_Write_Integer(BluetoothDato[4]);
  3562  001BF2  0101               	movlb	1	; () banked
  3563  001BF4  0100               	movlb	0	; () banked
  3564  001BF6  C12C  F0CF         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  3565  001BFA  0100               	movlb	0	; () banked
  3566  001BFC  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3567  001BFE  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3568                           
  3569                           ;Funciones_Db.c: 170: PWM_DutyCycle1(BluetoothDato[3]);
  3570  001C02  0101               	movlb	1	; () banked
  3571  001C04  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  3572  001C06  EC24  F016         	call	_PWM_DutyCycle1
  3573                           
  3574                           ;Funciones_Db.c: 171: PWM_DutyCycle2(BluetoothDato[4]);
  3575  001C0A  0101               	movlb	1	; () banked
  3576  001C0C  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  3577  001C0E  ECE6  F015         	call	_PWM_DutyCycle2
  3578                           
  3579                           ;Funciones_Db.c: 172: break;
  3580  001C12  D023               	goto	l4638
  3581  001C14                     l4628:
  3582                           
  3583                           ;Funciones_Db.c: 174: Lcd_Clear();
  3584  001C14  ECA4  F01A         	call	_Lcd_Clear	;wreg free
  3585                           
  3586                           ;Funciones_Db.c: 175: Lcd_Set_Cursor(1, 1);
  3587  001C18  0E01               	movlw	1
  3588  001C1A  0100               	movlb	0	; () banked
  3589  001C1C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3590  001C1E  0E01               	movlw	1
  3591  001C20  ECDB  F016         	call	_Lcd_Set_Cursor
  3592                           
  3593                           ;Funciones_Db.c: 176: Lcd_Write_String("Default");
  3594  001C24  0E7F               	movlw	high STR_16
  3595  001C26  0100               	movlb	0	; () banked
  3596  001C28  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3597  001C2A  0EE7               	movlw	low STR_16
  3598  001C2C  0100               	movlb	0	; () banked
  3599  001C2E  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3600  001C30  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3601                           
  3602                           ;Funciones_Db.c: 177: break;
  3603  001C34  D012               	goto	l4638
  3604  001C36                     l4636:
  3605  001C36  0101               	movlb	1	; () banked
  3606  001C38  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  3607                           
  3608                           ; Switch size 1, requested type "space"
  3609                           ; Number of cases is 5, Range of values is 1 to 5
  3610                           ; switch strategies available:
  3611                           ; Name         Instructions Cycles
  3612                           ; simple_byte           16     9 (average)
  3613                           ;	Chosen strategy is simple_byte
  3614  001C3A  0A01               	xorlw	1	; case 1
  3615  001C3C  B4D8               	btfsc	status,2,c
  3616  001C3E  D769               	goto	l4586
  3617  001C40  0A03               	xorlw	3	; case 2
  3618  001C42  B4D8               	btfsc	status,2,c
  3619  001C44  D777               	goto	l4592
  3620  001C46  0A01               	xorlw	1	; case 3
  3621  001C48  B4D8               	btfsc	status,2,c
  3622  001C4A  D785               	goto	l4598
  3623  001C4C  0A07               	xorlw	7	; case 4
  3624  001C4E  B4D8               	btfsc	status,2,c
  3625  001C50  D793               	goto	l204
  3626  001C52  0A01               	xorlw	1	; case 5
  3627  001C54  B4D8               	btfsc	status,2,c
  3628  001C56  D7B6               	goto	l205
  3629  001C58  D7DD               	goto	l4628
  3630  001C5A                     l4638:
  3631                           
  3632                           ;Funciones_Db.c: 179: clrBufferUSART();
  3633  001C5A  ECBC  F018         	call	_clrBufferUSART	;wreg free
  3634                           
  3635                           ;Funciones_Db.c: 180: return;
  3636  001C5E  0012               	return	
  3637  001C60                     __end_of_Comando_Tablet:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           intcon2	equ	0xFF1
  3647                           intcon3	equ	0xFF0
  3648                           indf0	equ	0xFEF
  3649                           postinc0	equ	0xFEE
  3650                           fsr0h	equ	0xFEA
  3651                           fsr0l	equ	0xFE9
  3652                           wreg	equ	0xFE8
  3653                           postinc1	equ	0xFE6
  3654                           postdec1	equ	0xFE5
  3655                           fsr1l	equ	0xFE1
  3656                           postinc2	equ	0xFDE
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function _putcBluetoothString *****************
  3660 ;; Defined at:
  3661 ;;		line 90 in file "Bluetooth.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  a               2    7[BANK0 ] PTR unsigned char 
  3664 ;;		 -> STR_15(2), 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  i               2   11[BANK0 ] int 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;		None               void
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3676 ;;      Params:         0       2       0       0       0       0       0       0       0
  3677 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3678 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3679 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3680 ;;Total ram usage:        6 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    6
  3683 ;; This function calls:
  3684 ;;		_UART1_Init
  3685 ;;		_WriteUSART
  3686 ;; This function is called by:
  3687 ;;		_Comando_Tablet
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text16
  3692  0029C0                     __ptext16:
  3693                           	opt stack 0
  3694  0029C0                     _putcBluetoothString:
  3695                           	opt stack 23
  3696                           
  3697                           ;Bluetooth.c: 92: int i;
  3698                           ;Bluetooth.c: 93: UART1_Init(51);
  3699                           
  3700                           ;incstack = 0
  3701  0029C0  0E33               	movlw	51
  3702  0029C2  EC73  F01A         	call	_UART1_Init
  3703                           
  3704                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  3705  0029C6  0E00               	movlw	0
  3706  0029C8  0100               	movlb	0	; () banked
  3707  0029CA  6F6C               	movwf	(putcBluetoothString@i+1)& (0+255),b
  3708  0029CC  0E00               	movlw	0
  3709  0029CE  0100               	movlb	0	; () banked
  3710  0029D0  6F6B               	movwf	putcBluetoothString@i& (0+255),b
  3711  0029D2  D01C               	goto	l4146
  3712  0029D4                     l4142:
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  3716  0029D4  0100               	movlb	0	; () banked
  3717  0029D6  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3718  0029DA  0100               	movlb	0	; () banked
  3719  0029DC  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3720  0029E0  0100               	movlb	0	; () banked
  3721  0029E2  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3722  0029E4  0100               	movlb	0	; () banked
  3723  0029E6  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3724  0029E8  0100               	movlb	0	; () banked
  3725  0029EA  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3726  0029EC  0100               	movlb	0	; () banked
  3727  0029EE  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3728  0029F0  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3729  0029F4  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3730  0029F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3731  0029F8  6AF8               	clrf	tblptru,c
  3732  0029FA                     	endif
  3733  0029FA                     	if	0	;tblptru may be non-zero
  3734  0029FA                     	endif
  3735  0029FA  0008               	tblrd		*
  3736  0029FC  50F5               	movf	tablat,w,c
  3737  0029FE  EC88  F01A         	call	_WriteUSART
  3738  002A02                     l59:
  3739  002A02  A2AC               	btfss	4012,1,c	;volatile
  3740  002A04  D7FE               	goto	l59
  3741  002A06  0100               	movlb	0	; () banked
  3742  002A08  4B6B               	infsnz	putcBluetoothString@i& (0+255),f,b
  3743  002A0A  2B6C               	incf	(putcBluetoothString@i+1)& (0+255),f,b
  3744  002A0C                     l4146:
  3745                           
  3746                           ; BSR set to: 0
  3747  002A0C  0100               	movlb	0	; () banked
  3748  002A0E  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3749  002A12  0100               	movlb	0	; () banked
  3750  002A14  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3751  002A18  0100               	movlb	0	; () banked
  3752  002A1A  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3753  002A1C  0100               	movlb	0	; () banked
  3754  002A1E  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3755  002A20  0100               	movlb	0	; () banked
  3756  002A22  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3757  002A24  0100               	movlb	0	; () banked
  3758  002A26  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3759  002A28  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3760  002A2C  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3761  002A30                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3762  002A30  6AF8               	clrf	tblptru,c
  3763  002A32                     	endif
  3764  002A32                     	if	0	;tblptru may be non-zero
  3765  002A32                     	endif
  3766  002A32  0008               	tblrd		*
  3767  002A34  50F5               	movf	tablat,w,c
  3768  002A36  0900               	iorlw	0
  3769  002A38  A4D8               	btfss	status,2,c
  3770  002A3A  D7CC               	goto	l4142
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;Bluetooth.c: 98: }
  3774                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3775                           
  3776                           ; BSR set to: 0
  3777  002A3C  0E4F               	movlw	79
  3778  002A3E  16AB               	andwf	4011,f,c	;volatile
  3779                           
  3780                           ; BSR set to: 0
  3781  002A40  9AAC               	bcf	4012,5,c	;volatile
  3782  002A42  0ECF               	movlw	207
  3783  002A44  169D               	andwf	3997,f,c	;volatile
  3784                           
  3785                           ; BSR set to: 0
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;Bluetooth.c: 100: return;
  3789  002A46  0012               	return	
  3790  002A48                     __end_of_putcBluetoothString:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           prodh	equ	0xFF4
  3797                           prodl	equ	0xFF3
  3798                           intcon	equ	0xFF2
  3799                           intcon2	equ	0xFF1
  3800                           intcon3	equ	0xFF0
  3801                           indf0	equ	0xFEF
  3802                           postinc0	equ	0xFEE
  3803                           fsr0h	equ	0xFEA
  3804                           fsr0l	equ	0xFE9
  3805                           wreg	equ	0xFE8
  3806                           postinc1	equ	0xFE6
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           postinc2	equ	0xFDE
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _putcBluetoothInt *****************
  3813 ;; Defined at:
  3814 ;;		line 102 in file "Bluetooth.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  a               2  111[BANK0 ] int 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  s              20  113[BANK0 ] unsigned char [20]
  3819 ;;  i               2  133[BANK0 ] int 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;		None               void
  3822 ;; Registers used:
  3823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3829 ;;      Params:         0       2       0       0       0       0       0       0       0
  3830 ;;      Locals:         0      22       0       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3832 ;;      Totals:         0      24       0       0       0       0       0       0       0
  3833 ;;Total ram usage:       24 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    8
  3836 ;; This function calls:
  3837 ;;		_UART1_Init
  3838 ;;		_WriteUSART
  3839 ;;		_sprintf
  3840 ;; This function is called by:
  3841 ;;		_Comando_Tablet
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text17
  3846  002A48                     __ptext17:
  3847                           	opt stack 0
  3848  002A48                     _putcBluetoothInt:
  3849                           	opt stack 21
  3850                           
  3851                           ;Bluetooth.c: 104: int i;
  3852                           ;Bluetooth.c: 105: unsigned char s[20];
  3853                           ;Bluetooth.c: 106: UART1_Init(51);
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;incstack = 0
  3857  002A48  0E33               	movlw	51
  3858  002A4A  EC73  F01A         	call	_UART1_Init
  3859                           
  3860                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  3861  002A4E  0100               	movlb	0	; () banked
  3862  002A50  0E00               	movlw	high putcBluetoothInt@s
  3863  002A52  0100               	movlb	0	; () banked
  3864  002A54  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  3865  002A56  0100               	movlb	0	; () banked
  3866  002A58  0ED1               	movlw	low putcBluetoothInt@s
  3867  002A5A  0100               	movlb	0	; () banked
  3868  002A5C  6F9F               	movwf	sprintf@sp& (0+255),b
  3869  002A5E  0E7F               	movlw	high (STR_18+10)
  3870  002A60  0100               	movlb	0	; () banked
  3871  002A62  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  3872  002A64  0EB9               	movlw	low (STR_18+10)
  3873  002A66  0100               	movlb	0	; () banked
  3874  002A68  6FA1               	movwf	sprintf@f& (0+255),b
  3875  002A6A  C0CF  F0A3         	movff	putcBluetoothInt@a,?_sprintf+4
  3876  002A6E  C0D0  F0A4         	movff	putcBluetoothInt@a+1,?_sprintf+5
  3877  002A72  EC0E  F000         	call	_sprintf	;wreg free
  3878                           
  3879                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  3880  002A76  0E00               	movlw	0
  3881  002A78  0100               	movlb	0	; () banked
  3882  002A7A  6FE6               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  3883  002A7C  0E00               	movlw	0
  3884  002A7E  0100               	movlb	0	; () banked
  3885  002A80  6FE5               	movwf	putcBluetoothInt@i& (0+255),b
  3886  002A82  D012               	goto	l4164
  3887  002A84                     l4160:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  3891  002A84  0100               	movlb	0	; () banked
  3892  002A86  0ED1               	movlw	low putcBluetoothInt@s
  3893  002A88  0100               	movlb	0	; () banked
  3894  002A8A  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3895  002A8C  6ED9               	movwf	fsr2l,c
  3896  002A8E  0100               	movlb	0	; () banked
  3897  002A90  0E00               	movlw	high putcBluetoothInt@s
  3898  002A92  0100               	movlb	0	; () banked
  3899  002A94  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3900  002A96  6EDA               	movwf	fsr2h,c
  3901  002A98  50DF               	movf	indf2,w,c
  3902  002A9A  EC88  F01A         	call	_WriteUSART
  3903  002A9E                     l68:
  3904  002A9E  A2AC               	btfss	4012,1,c	;volatile
  3905  002AA0  D7FE               	goto	l68
  3906  002AA2  0100               	movlb	0	; () banked
  3907  002AA4  4BE5               	infsnz	putcBluetoothInt@i& (0+255),f,b
  3908  002AA6  2BE6               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  3909  002AA8                     l4164:
  3910                           
  3911                           ; BSR set to: 0
  3912  002AA8  0100               	movlb	0	; () banked
  3913  002AAA  0ED1               	movlw	low putcBluetoothInt@s
  3914  002AAC  0100               	movlb	0	; () banked
  3915  002AAE  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3916  002AB0  6ED9               	movwf	fsr2l,c
  3917  002AB2  0100               	movlb	0	; () banked
  3918  002AB4  0E00               	movlw	high putcBluetoothInt@s
  3919  002AB6  0100               	movlb	0	; () banked
  3920  002AB8  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3921  002ABA  6EDA               	movwf	fsr2h,c
  3922  002ABC  50DF               	movf	indf2,w,c
  3923  002ABE  A4D8               	btfss	status,2,c
  3924  002AC0  D7E1               	goto	l4160
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;Bluetooth.c: 112: }
  3928                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3929                           
  3930                           ; BSR set to: 0
  3931  002AC2  0E4F               	movlw	79
  3932  002AC4  16AB               	andwf	4011,f,c	;volatile
  3933                           
  3934                           ; BSR set to: 0
  3935  002AC6  9AAC               	bcf	4012,5,c	;volatile
  3936  002AC8  0ECF               	movlw	207
  3937  002ACA  169D               	andwf	3997,f,c	;volatile
  3938                           
  3939                           ; BSR set to: 0
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;Bluetooth.c: 114: return;
  3943  002ACC  0012               	return	
  3944  002ACE                     __end_of_putcBluetoothInt:
  3945                           	opt stack 0
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           intcon	equ	0xFF2
  3953                           intcon2	equ	0xFF1
  3954                           intcon3	equ	0xFF0
  3955                           indf0	equ	0xFEF
  3956                           postinc0	equ	0xFEE
  3957                           fsr0h	equ	0xFEA
  3958                           fsr0l	equ	0xFE9
  3959                           wreg	equ	0xFE8
  3960                           postinc1	equ	0xFE6
  3961                           postdec1	equ	0xFE5
  3962                           fsr1l	equ	0xFE1
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           fsr2h	equ	0xFDA
  3966                           fsr2l	equ	0xFD9
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _WriteUSART *****************
  3970 ;; Defined at:
  3971 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  data            1    wreg     unsigned char 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  data            1    0[BANK0 ] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		wreg
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0
  3986 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3988 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3989 ;;Total ram usage:        1 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    4
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_putcBluetoothString
  3996 ;;		_putcBluetoothInt
  3997 ;;		_putcTxU1
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text18
  4002  003510                     __ptext18:
  4003                           	opt stack 0
  4004  003510                     _WriteUSART:
  4005                           	opt stack 21
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;incstack = 0
  4009                           ;WriteUSART@data stored from wreg
  4010  003510  0100               	movlb	0	; () banked
  4011  003512  6F60               	movwf	WriteUSART@data& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014  003514  ACAC               	btfss	4012,6,c	;volatile
  4015  003516  D003               	goto	l3124
  4016                           
  4017                           ; BSR set to: 0
  4018  003518  90AC               	bcf	4012,0,c	;volatile
  4019  00351A  B254               	btfsc	_USART_Status,1,c
  4020                           
  4021                           ; BSR set to: 0
  4022  00351C  80AC               	bsf	4012,0,c	;volatile
  4023  00351E                     l3124:
  4024                           
  4025                           ; BSR set to: 0
  4026  00351E  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
  4027                           
  4028                           ; BSR set to: 0
  4029  003522  0012               	return	
  4030  003524                     __end_of_WriteUSART:
  4031                           	opt stack 0
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           prodh	equ	0xFF4
  4037                           prodl	equ	0xFF3
  4038                           intcon	equ	0xFF2
  4039                           intcon2	equ	0xFF1
  4040                           intcon3	equ	0xFF0
  4041                           indf0	equ	0xFEF
  4042                           postinc0	equ	0xFEE
  4043                           fsr0h	equ	0xFEA
  4044                           fsr0l	equ	0xFE9
  4045                           wreg	equ	0xFE8
  4046                           postinc1	equ	0xFE6
  4047                           postdec1	equ	0xFE5
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           fsr2h	equ	0xFDA
  4052                           fsr2l	equ	0xFD9
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _UART1_Init *****************
  4056 ;; Defined at:
  4057 ;;		line 5 in file "UART1.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  bdr             1    wreg     unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  bdr             1    6[BANK0 ] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0
  4072 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4074 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4075 ;;Total ram usage:        1 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    5
  4078 ;; This function calls:
  4079 ;;		_OpenUSART
  4080 ;; This function is called by:
  4081 ;;		_BT_Init
  4082 ;;		_putcBluetoothString
  4083 ;;		_putcBluetoothInt
  4084 ;;		_main
  4085 ;;		_EstadoBluetooth
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text19
  4090  0034E6                     __ptext19:
  4091                           	opt stack 0
  4092  0034E6                     _UART1_Init:
  4093                           	opt stack 25
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;incstack = 0
  4097                           ;UART1_Init@bdr stored from wreg
  4098  0034E6  0100               	movlb	0	; () banked
  4099  0034E8  6F66               	movwf	UART1_Init@bdr& (0+255),b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  4103  0034EA  0100               	movlb	0	; () banked
  4104  0034EC  C066  F060         	movff	UART1_Init@bdr,OpenUSART@spbrg
  4105  0034F0  0100               	movlb	0	; () banked
  4106  0034F2  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
  4107  0034F4  0E7C               	movlw	124
  4108  0034F6  EC67  F015         	call	_OpenUSART
  4109  0034FA  0012               	return	
  4110  0034FC                     __end_of_UART1_Init:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon2	equ	0xFF1
  4120                           intcon3	equ	0xFF0
  4121                           indf0	equ	0xFEF
  4122                           postinc0	equ	0xFEE
  4123                           fsr0h	equ	0xFEA
  4124                           fsr0l	equ	0xFE9
  4125                           wreg	equ	0xFE8
  4126                           postinc1	equ	0xFE6
  4127                           postdec1	equ	0xFE5
  4128                           fsr1l	equ	0xFE1
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _OpenUSART *****************
  4136 ;; Defined at:
  4137 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  config          1    wreg     unsigned char 
  4140 ;;  spbrg           2    0[BANK0 ] unsigned int 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  config          1    5[BANK0 ] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;		None               void
  4145 ;; Registers used:
  4146 ;;		wreg, status,2
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4152 ;;      Params:         0       2       0       0       0       0       0       0       0
  4153 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4155 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        6 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    4
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_UART1_Init
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text20
  4167  002ACE                     __ptext20:
  4168                           	opt stack 0
  4169  002ACE                     _OpenUSART:
  4170                           	opt stack 25
  4171                           
  4172                           ;incstack = 0
  4173                           ;OpenUSART@config stored from wreg
  4174  002ACE  0100               	movlb	0	; () banked
  4175  002AD0  6F65               	movwf	OpenUSART@config& (0+255),b
  4176                           
  4177                           ; BSR set to: 0
  4178  002AD2  0E00               	movlw	0
  4179  002AD4  6EAC               	movwf	4012,c	;volatile
  4180  002AD6  0E00               	movlw	0
  4181  002AD8  6EAB               	movwf	4011,c	;volatile
  4182                           
  4183                           ; BSR set to: 0
  4184  002ADA  0100               	movlb	0	; () banked
  4185  002ADC  B165               	btfsc	OpenUSART@config& (0+255),0,b
  4186                           
  4187                           ; BSR set to: 0
  4188  002ADE  88AC               	bsf	4012,4,c	;volatile
  4189                           
  4190                           ; BSR set to: 0
  4191                           
  4192                           ; BSR set to: 0
  4193  002AE0  0100               	movlb	0	; () banked
  4194  002AE2  A365               	btfss	OpenUSART@config& (0+255),1,b
  4195  002AE4  D002               	goto	l3418
  4196                           
  4197                           ; BSR set to: 0
  4198  002AE6  8CAC               	bsf	4012,6,c	;volatile
  4199  002AE8  8CAB               	bsf	4011,6,c	;volatile
  4200  002AEA                     l3418:
  4201                           
  4202                           ; BSR set to: 0
  4203  002AEA  0100               	movlb	0	; () banked
  4204  002AEC  B565               	btfsc	OpenUSART@config& (0+255),2,b
  4205                           
  4206                           ; BSR set to: 0
  4207  002AEE  8EAC               	bsf	4012,7,c	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           
  4211                           ; BSR set to: 0
  4212  002AF0  0100               	movlb	0	; () banked
  4213  002AF2  A765               	btfss	OpenUSART@config& (0+255),3,b
  4214  002AF4  D002               	goto	l643
  4215                           
  4216                           ; BSR set to: 0
  4217  002AF6  88AB               	bsf	4011,4,c	;volatile
  4218  002AF8  D001               	goto	l3426
  4219  002AFA                     l643:
  4220                           
  4221                           ; BSR set to: 0
  4222  002AFA  8AAB               	bsf	4011,5,c	;volatile
  4223  002AFC                     l3426:
  4224                           
  4225                           ; BSR set to: 0
  4226  002AFC  0100               	movlb	0	; () banked
  4227  002AFE  B965               	btfsc	OpenUSART@config& (0+255),4,b
  4228                           
  4229                           ; BSR set to: 0
  4230  002B00  84AC               	bsf	4012,2,c	;volatile
  4231                           
  4232                           ; BSR set to: 0
  4233  002B02  989E               	bcf	3998,4,c	;volatile
  4234                           
  4235                           ; BSR set to: 0
  4236  002B04  0100               	movlb	0	; () banked
  4237  002B06  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  4238                           
  4239                           ; BSR set to: 0
  4240  002B08  86AB               	bsf	4011,3,c	;volatile
  4241                           
  4242                           ; BSR set to: 0
  4243                           
  4244                           ; BSR set to: 0
  4245  002B0A  0100               	movlb	0	; () banked
  4246  002B0C  AD65               	btfss	OpenUSART@config& (0+255),6,b
  4247  002B0E  D002               	goto	l647
  4248                           
  4249                           ; BSR set to: 0
  4250  002B10  8A9D               	bsf	3997,5,c	;volatile
  4251  002B12  D001               	goto	l648
  4252  002B14                     l647:
  4253                           
  4254                           ; BSR set to: 0
  4255  002B14  9A9D               	bcf	3997,5,c	;volatile
  4256  002B16                     l648:
  4257                           
  4258                           ; BSR set to: 0
  4259  002B16  9A9E               	bcf	3998,5,c	;volatile
  4260                           
  4261                           ; BSR set to: 0
  4262  002B18  0100               	movlb	0	; () banked
  4263  002B1A  AF65               	btfss	OpenUSART@config& (0+255),7,b
  4264  002B1C  D002               	goto	l649
  4265                           
  4266                           ; BSR set to: 0
  4267  002B1E  889D               	bsf	3997,4,c	;volatile
  4268  002B20  D001               	goto	l650
  4269  002B22                     l649:
  4270                           
  4271                           ; BSR set to: 0
  4272  002B22  989D               	bcf	3997,4,c	;volatile
  4273  002B24                     l650:
  4274                           
  4275                           ; BSR set to: 0
  4276  002B24  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4277                           
  4278                           ; BSR set to: 0
  4279  002B28  0100               	movlb	0	; () banked
  4280  002B2A  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  4281  002B2E  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  4282  002B32  0100               	movlb	0	; () banked
  4283  002B34  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  4284  002B36  0100               	movlb	0	; () banked
  4285  002B38  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  4286  002B3A  6EB0               	movwf	4016,c	;volatile
  4287                           
  4288                           ; BSR set to: 0
  4289  002B3C  8AAC               	bsf	4012,5,c	;volatile
  4290                           
  4291                           ; BSR set to: 0
  4292  002B3E  8EAB               	bsf	4011,7,c	;volatile
  4293                           
  4294                           ; BSR set to: 0
  4295  002B40  9C94               	bcf	3988,6,c	;volatile
  4296                           
  4297                           ; BSR set to: 0
  4298  002B42  8E94               	bsf	3988,7,c	;volatile
  4299                           
  4300                           ; BSR set to: 0
  4301  002B44  B8AC               	btfsc	4012,4,c	;volatile
  4302                           
  4303                           ; BSR set to: 0
  4304  002B46  BEAC               	btfsc	4012,7,c	;volatile
  4305  002B48  D001               	goto	l652
  4306                           
  4307                           ; BSR set to: 0
  4308  002B4A  8C94               	bsf	3988,6,c	;volatile
  4309  002B4C                     l652:
  4310                           
  4311                           ; BSR set to: 0
  4312  002B4C  0012               	return	
  4313  002B4E                     __end_of_OpenUSART:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           intcon2	equ	0xFF1
  4323                           intcon3	equ	0xFF0
  4324                           indf0	equ	0xFEF
  4325                           postinc0	equ	0xFEE
  4326                           fsr0h	equ	0xFEA
  4327                           fsr0l	equ	0xFE9
  4328                           wreg	equ	0xFE8
  4329                           postinc1	equ	0xFE6
  4330                           postdec1	equ	0xFE5
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _getCNY70Value *****************
  4339 ;; Defined at:
  4340 ;;		line 3 in file "cny70.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2    0[BANK0 ] int 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4354 ;;      Params:         0       2       0       0       0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4357 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4358 ;;Total ram usage:        2 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    4
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_Comando_Tablet
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text21
  4369  0024D4                     __ptext21:
  4370                           	opt stack 0
  4371  0024D4                     _getCNY70Value:
  4372                           	opt stack 25
  4373                           
  4374                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;incstack = 0
  4378  0024D4  B081               	btfsc	3969,0,c	;volatile
  4379  0024D6  A281               	btfss	3969,1,c	;volatile
  4380  0024D8  D005               	goto	l466
  4381  0024DA  A481               	btfss	3969,2,c	;volatile
  4382  0024DC  A681               	btfss	3969,3,c	;volatile
  4383  0024DE  D002               	goto	l466
  4384  0024E0  B881               	btfsc	3969,4,c	;volatile
  4385  0024E2  D054               	goto	l4348
  4386  0024E4                     l466:
  4387                           
  4388                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4389  0024E4  B081               	btfsc	3969,0,c	;volatile
  4390  0024E6  B281               	btfsc	3969,1,c	;volatile
  4391  0024E8  D005               	goto	l469
  4392  0024EA  B481               	btfsc	3969,2,c	;volatile
  4393  0024EC  A681               	btfss	3969,3,c	;volatile
  4394  0024EE  D002               	goto	l469
  4395  0024F0  B881               	btfsc	3969,4,c	;volatile
  4396  0024F2  D03A               	goto	u4730
  4397  0024F4                     l469:
  4398                           
  4399                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4400  0024F4  A081               	btfss	3969,0,c	;volatile
  4401  0024F6  A281               	btfss	3969,1,c	;volatile
  4402  0024F8  D00A               	goto	l471
  4403  0024FA  B481               	btfsc	3969,2,c	;volatile
  4404  0024FC  A681               	btfss	3969,3,c	;volatile
  4405  0024FE  D007               	goto	l471
  4406  002500  A881               	btfss	3969,4,c	;volatile
  4407  002502  D005               	goto	l471
  4408  002504                     
  4409                           ;cny70.c: 10: return -2;
  4410  002504  0EFF               	movlw	255
  4411  002506  0100               	movlb	0	; () banked
  4412  002508  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4413  00250A  0EFE               	movlw	254
  4414  00250C  D043               	goto	L5
  4415  00250E                     l471:
  4416                           
  4417                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4418  00250E  B081               	btfsc	3969,0,c	;volatile
  4419  002510  A281               	btfss	3969,1,c	;volatile
  4420  002512  D005               	goto	l473
  4421  002514  B481               	btfsc	3969,2,c	;volatile
  4422  002516  B681               	btfsc	3969,3,c	;volatile
  4423  002518  D002               	goto	l473
  4424  00251A  B881               	btfsc	3969,4,c	;volatile
  4425  00251C  D032               	goto	u4780
  4426  00251E                     l473:
  4427                           
  4428                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  4429  00251E  B081               	btfsc	3969,0,c	;volatile
  4430  002520  A281               	btfss	3969,1,c	;volatile
  4431  002522  D005               	goto	l475
  4432  002524  B481               	btfsc	3969,2,c	;volatile
  4433  002526  A681               	btfss	3969,3,c	;volatile
  4434  002528  D002               	goto	l475
  4435  00252A  A881               	btfss	3969,4,c	;volatile
  4436  00252C  D008               	goto	u4630
  4437  00252E                     l475:
  4438                           
  4439                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  4440  00252E  B081               	btfsc	3969,0,c	;volatile
  4441  002530  A281               	btfss	3969,1,c	;volatile
  4442  002532  D00A               	goto	l477
  4443  002534  B481               	btfsc	3969,2,c	;volatile
  4444  002536  B681               	btfsc	3969,3,c	;volatile
  4445  002538  D007               	goto	l477
  4446  00253A  B881               	btfsc	3969,4,c	;volatile
  4447  00253C  D005               	goto	l477
  4448  00253E                     u4630:
  4449                           
  4450                           ;cny70.c: 16: return 2;
  4451  00253E  0E00               	movlw	0
  4452  002540  0100               	movlb	0	; () banked
  4453  002542  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4454  002544  0E02               	movlw	2
  4455  002546  D026               	goto	L5
  4456  002548                     l477:
  4457                           
  4458                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4459  002548  A081               	btfss	3969,0,c	;volatile
  4460  00254A  B281               	btfsc	3969,1,c	;volatile
  4461  00254C  D005               	goto	l479
  4462  00254E  B481               	btfsc	3969,2,c	;volatile
  4463  002550  A681               	btfss	3969,3,c	;volatile
  4464  002552  D002               	goto	l479
  4465  002554  B881               	btfsc	3969,4,c	;volatile
  4466  002556  D7D6               	goto	L6
  4467  002558                     l479:
  4468                           
  4469                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4470  002558  B081               	btfsc	3969,0,c	;volatile
  4471  00255A  B281               	btfsc	3969,1,c	;volatile
  4472  00255C  D00A               	goto	l481
  4473  00255E  A481               	btfss	3969,2,c	;volatile
  4474  002560  A681               	btfss	3969,3,c	;volatile
  4475  002562  D007               	goto	l481
  4476  002564  A881               	btfss	3969,4,c	;volatile
  4477  002566  D005               	goto	l481
  4478  002568                     u4730:
  4479                           
  4480                           ;cny70.c: 20: return -1;
  4481  002568  0100               	movlb	0	; () banked
  4482  00256A  6960               	setf	?_getCNY70Value& (0+255),b
  4483  00256C  0100               	movlb	0	; () banked
  4484  00256E  6961               	setf	(?_getCNY70Value+1)& (0+255),b
  4485  002570  D013               	goto	l467
  4486  002572                     l481:
  4487                           
  4488                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4489  002572  B081               	btfsc	3969,0,c	;volatile
  4490  002574  A281               	btfss	3969,1,c	;volatile
  4491  002576  D00A               	goto	l4348
  4492  002578  A481               	btfss	3969,2,c	;volatile
  4493  00257A  B681               	btfsc	3969,3,c	;volatile
  4494  00257C  D007               	goto	l4348
  4495  00257E  A881               	btfss	3969,4,c	;volatile
  4496  002580  D005               	goto	l4348
  4497  002582                     u4780:
  4498                           
  4499                           ;cny70.c: 22: return 1;
  4500  002582  0E00               	movlw	0
  4501  002584  0100               	movlb	0	; () banked
  4502  002586  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4503  002588  0E01               	movlw	1
  4504  00258A  D004               	goto	L5
  4505  00258C                     l4348:
  4506                           
  4507                           ;cny70.c: 23: else
  4508                           ;cny70.c: 24: return 0;
  4509  00258C  0E00               	movlw	0
  4510  00258E  0100               	movlb	0	; () banked
  4511  002590  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4512  002592  0E00               	movlw	0
  4513  002594                     L5:
  4514  002594  0100               	movlb	0	; () banked
  4515  002596  6F60               	movwf	?_getCNY70Value& (0+255),b
  4516  002598                     l467:
  4517                           
  4518                           ; BSR set to: 0
  4519  002598  0012               	return	
  4520  00259A                     __end_of_getCNY70Value:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           intcon2	equ	0xFF1
  4530                           intcon3	equ	0xFF0
  4531                           indf0	equ	0xFEF
  4532                           postinc0	equ	0xFEE
  4533                           fsr0h	equ	0xFEA
  4534                           fsr0l	equ	0xFE9
  4535                           wreg	equ	0xFE8
  4536                           postinc1	equ	0xFE6
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _clrBufferUSART *****************
  4546 ;; Defined at:
  4547 ;;		line 68 in file "Bluetooth.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  i               2    0[BANK0 ] int 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;		None               void
  4554 ;; Registers used:
  4555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0
  4562 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4564 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4565 ;;Total ram usage:        2 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    4
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_Inicializa_Driveby
  4572 ;;		_Comando_Tablet
  4573 ;;		_main
  4574 ;;		_CheckTX
  4575 ;;		_EstadoBluetooth
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text22
  4580  003178                     __ptext22:
  4581                           	opt stack 0
  4582  003178                     _clrBufferUSART:
  4583                           	opt stack 26
  4584                           
  4585                           ;Bluetooth.c: 69: int i;
  4586                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;incstack = 0
  4590  003178  0E00               	movlw	0
  4591  00317A  0100               	movlb	0	; () banked
  4592  00317C  6F61               	movwf	(clrBufferUSART@i+1)& (0+255),b
  4593  00317E  0E00               	movlw	0
  4594  003180  0100               	movlb	0	; () banked
  4595  003182  6F60               	movwf	clrBufferUSART@i& (0+255),b
  4596  003184                     
  4597                           ; BSR set to: 0
  4598  003184  0100               	movlb	0	; () banked
  4599  003186  5161               	movf	(clrBufferUSART@i+1)& (0+255),w,b
  4600  003188  0A80               	xorlw	128
  4601  00318A  0F80               	addlw	-128
  4602  00318C  0E14               	movlw	20
  4603  00318E  B4D8               	btfsc	status,2,c
  4604  003190  5D60               	subwf	clrBufferUSART@i& (0+255),w,b
  4605  003192  B0D8               	btfsc	status,0,c
  4606  003194  D012               	goto	l54
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  4610                           
  4611                           ; BSR set to: 0
  4612                           
  4613                           ; BSR set to: 0
  4614  003196  0101               	movlb	1	; () banked
  4615  003198  0E28               	movlw	low _BluetoothDato
  4616  00319A  0100               	movlb	0	; () banked
  4617  00319C  2560               	addwf	clrBufferUSART@i& (0+255),w,b
  4618  00319E  6ED9               	movwf	fsr2l,c
  4619  0031A0  0101               	movlb	1	; () banked
  4620  0031A2  0E01               	movlw	high _BluetoothDato
  4621  0031A4  0100               	movlb	0	; () banked
  4622  0031A6  2161               	addwfc	(clrBufferUSART@i+1)& (0+255),w,b
  4623  0031A8  6EDA               	movwf	fsr2h,c
  4624  0031AA  0E00               	movlw	0
  4625  0031AC  6EDF               	movwf	indf2,c
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;Bluetooth.c: 72: cad = 0;
  4629  0031AE  0E00               	movlw	0
  4630  0031B0  6E55               	movwf	_cad,c
  4631                           
  4632                           ; BSR set to: 0
  4633  0031B2  0100               	movlb	0	; () banked
  4634  0031B4  4B60               	infsnz	clrBufferUSART@i& (0+255),f,b
  4635  0031B6  2B61               	incf	(clrBufferUSART@i+1)& (0+255),f,b
  4636  0031B8  D7E5               	goto	L7
  4637  0031BA                     l54:
  4638                           
  4639                           ; BSR set to: 0
  4640  0031BA  0012               	return	
  4641  0031BC                     __end_of_clrBufferUSART:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           intcon3	equ	0xFF0
  4652                           indf0	equ	0xFEF
  4653                           postinc0	equ	0xFEE
  4654                           fsr0h	equ	0xFEA
  4655                           fsr0l	equ	0xFE9
  4656                           wreg	equ	0xFE8
  4657                           postinc1	equ	0xFE6
  4658                           postdec1	equ	0xFE5
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _PWM_DutyCycle2 *****************
  4667 ;; Defined at:
  4668 ;;		line 55 in file "pwm.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  percentageDu    1    wreg     unsigned char 
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4673 ;;  DC              2   64[BANK0 ] unsigned int 
  4674 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg, status,2, status,0, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0
  4685 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4686 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4687 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4688 ;;Total ram usage:        9 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    6
  4691 ;; This function calls:
  4692 ;;		_SetDCPWM2
  4693 ;;		___ftmul
  4694 ;;		___fttol
  4695 ;;		___lbtoft
  4696 ;; This function is called by:
  4697 ;;		_Comando_Tablet
  4698 ;;		_main
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text23
  4703  002BCC                     __ptext23:
  4704                           	opt stack 0
  4705  002BCC                     _PWM_DutyCycle2:
  4706                           	opt stack 24
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;incstack = 0
  4710                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  4711  002BCC  0100               	movlb	0	; () banked
  4712  002BCE  6F9F               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  4716  002BD0  0E00               	movlw	0
  4717  002BD2  0100               	movlb	0	; () banked
  4718  002BD4  6FA1               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  4719  002BD6  0E00               	movlw	0
  4720  002BD8  0100               	movlb	0	; () banked
  4721  002BDA  6FA0               	movwf	PWM_DutyCycle2@DC& (0+255),b
  4722  002BDC  0E00               	movlw	0
  4723  002BDE  0100               	movlb	0	; () banked
  4724  002BE0  6F9E               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  4725  002BE2  0E00               	movlw	0
  4726  002BE4  0100               	movlb	0	; () banked
  4727  002BE6  6F9D               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  4731  002BE8  0EAE               	movlw	174
  4732  002BEA  0100               	movlb	0	; () banked
  4733  002BEC  6F77               	movwf	___ftmul@f2& (0+255),b
  4734  002BEE  0E23               	movlw	35
  4735  002BF0  0100               	movlb	0	; () banked
  4736  002BF2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4737  002BF4  0E41               	movlw	65
  4738  002BF6  0100               	movlb	0	; () banked
  4739  002BF8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4740  002BFA  0100               	movlb	0	; () banked
  4741  002BFC  519F               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  4742  002BFE  ECA7  F019         	call	___lbtoft
  4743  002C02  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4744  002C06  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4745  002C0A  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4746  002C0E  ECD0  F00C         	call	___ftmul	;wreg free
  4747  002C12  C074  F08A         	movff	?___ftmul,___fttol@f1
  4748  002C16  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4749  002C1A  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4750  002C1E  EC30  F00E         	call	___fttol	;wreg free
  4751  002C22  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle2
  4752  002C26  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  4753  002C2A  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  4754  002C2E  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  4755  002C32  C099  F0A0         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  4756  002C36  C09A  F0A1         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  4757                           
  4758                           ;pwm.c: 60: SetDCPWM2(DC);
  4759  002C3A  C0A0  F060         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  4760  002C3E  C0A1  F061         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  4761  002C42  EC0C  F018         	call	_SetDCPWM2	;wreg free
  4762                           
  4763                           ;pwm.c: 61: return;
  4764  002C46  0012               	return	
  4765  002C48                     __end_of_PWM_DutyCycle2:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           intcon2	equ	0xFF1
  4775                           intcon3	equ	0xFF0
  4776                           indf0	equ	0xFEF
  4777                           postinc0	equ	0xFEE
  4778                           fsr0h	equ	0xFEA
  4779                           fsr0l	equ	0xFE9
  4780                           wreg	equ	0xFE8
  4781                           postinc1	equ	0xFE6
  4782                           postdec1	equ	0xFE5
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function _SetDCPWM2 *****************
  4791 ;; Defined at:
  4792 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4806 ;;      Params:         0       2       0       0       0       0       0       0       0
  4807 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4808 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4809 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4810 ;;Total ram usage:        6 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    4
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_PWM_DutyCycle2
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text24
  4821  003018                     __ptext24:
  4822                           	opt stack 0
  4823  003018                     _SetDCPWM2:
  4824                           	opt stack 25
  4825                           
  4826                           ;incstack = 0
  4827  003018  0100               	movlb	0	; () banked
  4828  00301A  C060  F062         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4829  00301E  0100               	movlb	0	; () banked
  4830  003020  C061  F063         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4831  003024  0E06               	movlw	6
  4832  003026                     u4135:
  4833  003026  90D8               	bcf	status,0,c
  4834  003028  0100               	movlb	0	; () banked
  4835  00302A  3762               	rlcf	??_SetDCPWM2& (0+255),f,b
  4836  00302C  3763               	rlcf	(??_SetDCPWM2+1)& (0+255),f,b
  4837  00302E  2EE8               	decfsz	wreg,f,c
  4838  003030  D7FA               	goto	u4135
  4839  003032  C062  F064         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4840  003036  C063  F065         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4841                           
  4842                           ; BSR set to: 0
  4843  00303A  C065  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4844  00303E  C064  F062         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4845  003042  0100               	movlb	0	; () banked
  4846  003044  90D8               	bcf	status,0,c
  4847  003046  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4848  003048  0100               	movlb	0	; () banked
  4849  00304A  90D8               	bcf	status,0,c
  4850  00304C  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4851  00304E  0E30               	movlw	48
  4852  003050  0100               	movlb	0	; () banked
  4853  003052  1762               	andwf	??_SetDCPWM2& (0+255),f,b
  4854  003054  50BA               	movf	4026,w,c	;volatile
  4855  003056  0BCF               	andlw	207
  4856  003058  0100               	movlb	0	; () banked
  4857  00305A  1162               	iorwf	??_SetDCPWM2& (0+255),w,b
  4858  00305C  6EBA               	movwf	4026,c	;volatile
  4859                           
  4860                           ; BSR set to: 0
  4861  00305E  0012               	return	
  4862  003060                     __end_of_SetDCPWM2:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon2	equ	0xFF1
  4872                           intcon3	equ	0xFF0
  4873                           indf0	equ	0xFEF
  4874                           postinc0	equ	0xFEE
  4875                           fsr0h	equ	0xFEA
  4876                           fsr0l	equ	0xFE9
  4877                           wreg	equ	0xFE8
  4878                           postinc1	equ	0xFE6
  4879                           postdec1	equ	0xFE5
  4880                           fsr1l	equ	0xFE1
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _PWM_DutyCycle1 *****************
  4888 ;; Defined at:
  4889 ;;		line 33 in file "pwm.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  percentageDu    1    wreg     unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4894 ;;  DC              2   64[BANK0 ] unsigned int 
  4895 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0
  4906 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4907 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4908 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4909 ;;Total ram usage:        9 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    6
  4912 ;; This function calls:
  4913 ;;		_SetDCPWM1
  4914 ;;		___ftmul
  4915 ;;		___fttol
  4916 ;;		___lbtoft
  4917 ;; This function is called by:
  4918 ;;		_Comando_Tablet
  4919 ;;		_main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text25
  4924  002C48                     __ptext25:
  4925                           	opt stack 0
  4926  002C48                     _PWM_DutyCycle1:
  4927                           	opt stack 24
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;incstack = 0
  4931                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4932  002C48  0100               	movlb	0	; () banked
  4933  002C4A  6F9F               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4937  002C4C  0E00               	movlw	0
  4938  002C4E  0100               	movlb	0	; () banked
  4939  002C50  6FA1               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4940  002C52  0E00               	movlw	0
  4941  002C54  0100               	movlb	0	; () banked
  4942  002C56  6FA0               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4943  002C58  0E00               	movlw	0
  4944  002C5A  0100               	movlb	0	; () banked
  4945  002C5C  6F9E               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4946  002C5E  0E00               	movlw	0
  4947  002C60  0100               	movlb	0	; () banked
  4948  002C62  6F9D               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4952  002C64  0EAE               	movlw	174
  4953  002C66  0100               	movlb	0	; () banked
  4954  002C68  6F77               	movwf	___ftmul@f2& (0+255),b
  4955  002C6A  0E23               	movlw	35
  4956  002C6C  0100               	movlb	0	; () banked
  4957  002C6E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4958  002C70  0E41               	movlw	65
  4959  002C72  0100               	movlb	0	; () banked
  4960  002C74  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4961  002C76  0100               	movlb	0	; () banked
  4962  002C78  519F               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4963  002C7A  ECA7  F019         	call	___lbtoft
  4964  002C7E  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4965  002C82  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4966  002C86  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4967  002C8A  ECD0  F00C         	call	___ftmul	;wreg free
  4968  002C8E  C074  F08A         	movff	?___ftmul,___fttol@f1
  4969  002C92  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4970  002C96  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4971  002C9A  EC30  F00E         	call	___fttol	;wreg free
  4972  002C9E  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle1
  4973  002CA2  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4974  002CA6  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4975  002CAA  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4976  002CAE  C099  F0A0         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4977  002CB2  C09A  F0A1         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4978                           
  4979                           ;pwm.c: 38: SetDCPWM1(DC);
  4980  002CB6  C0A0  F060         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4981  002CBA  C0A1  F061         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4982  002CBE  EC30  F018         	call	_SetDCPWM1	;wreg free
  4983                           
  4984                           ;pwm.c: 39: return;
  4985  002CC2  0012               	return	
  4986  002CC4                     __end_of_PWM_DutyCycle1:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           intcon3	equ	0xFF0
  4997                           indf0	equ	0xFEF
  4998                           postinc0	equ	0xFEE
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           postinc1	equ	0xFE6
  5003                           postdec1	equ	0xFE5
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function ___lbtoft *****************
  5012 ;; Defined at:
  5013 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  c               1    wreg     unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  c               1   11[BANK0 ] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  3    8[BANK0 ] float 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5027 ;;      Params:         0       3       0       0       0       0       0       0       0
  5028 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5030 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5031 ;;Total ram usage:        4 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    5
  5034 ;; This function calls:
  5035 ;;		___ftpack
  5036 ;; This function is called by:
  5037 ;;		_PWM_DutyCycle1
  5038 ;;		_PWM_DutyCycle2
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text26
  5043  00334E                     __ptext26:
  5044                           	opt stack 0
  5045  00334E                     ___lbtoft:
  5046                           	opt stack 24
  5047                           
  5048                           ;incstack = 0
  5049                           ;___lbtoft@c stored from wreg
  5050  00334E  0100               	movlb	0	; () banked
  5051  003350  6F6B               	movwf	___lbtoft@c& (0+255),b
  5052                           
  5053                           ; BSR set to: 0
  5054  003352  0100               	movlb	0	; () banked
  5055  003354  516B               	movf	___lbtoft@c& (0+255),w,b
  5056  003356  0100               	movlb	0	; () banked
  5057  003358  6F60               	movwf	___ftpack@arg& (0+255),b
  5058  00335A  0100               	movlb	0	; () banked
  5059  00335C  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  5060  00335E  0100               	movlb	0	; () banked
  5061  003360  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  5062  003362  0E8E               	movlw	142
  5063  003364  0100               	movlb	0	; () banked
  5064  003366  6F63               	movwf	___ftpack@exp& (0+255),b
  5065  003368  0E00               	movlw	0
  5066  00336A  0100               	movlb	0	; () banked
  5067  00336C  6F64               	movwf	___ftpack@sign& (0+255),b
  5068  00336E  EC5D  F00F         	call	___ftpack	;wreg free
  5069  003372  C060  F068         	movff	?___ftpack,?___lbtoft
  5070  003376  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  5071  00337A  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  5072  00337E  0012               	return	
  5073  003380                     __end_of___lbtoft:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           intcon2	equ	0xFF1
  5083                           intcon3	equ	0xFF0
  5084                           indf0	equ	0xFEF
  5085                           postinc0	equ	0xFEE
  5086                           fsr0h	equ	0xFEA
  5087                           fsr0l	equ	0xFE9
  5088                           wreg	equ	0xFE8
  5089                           postinc1	equ	0xFE6
  5090                           postdec1	equ	0xFE5
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           fsr2h	equ	0xFDA
  5095                           fsr2l	equ	0xFD9
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _SetDCPWM1 *****************
  5099 ;; Defined at:
  5100 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  5105 ;; Return value:  Size  Location     Type
  5106 ;;		None               void
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5114 ;;      Params:         0       2       0       0       0       0       0       0       0
  5115 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5116 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5117 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5118 ;;Total ram usage:        6 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    4
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_PWM_DutyCycle1
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text27
  5129  003060                     __ptext27:
  5130                           	opt stack 0
  5131  003060                     _SetDCPWM1:
  5132                           	opt stack 25
  5133                           
  5134                           ;incstack = 0
  5135  003060  0100               	movlb	0	; () banked
  5136  003062  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  5137  003066  0100               	movlb	0	; () banked
  5138  003068  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  5139  00306C  0E06               	movlw	6
  5140  00306E                     u4105:
  5141  00306E  90D8               	bcf	status,0,c
  5142  003070  0100               	movlb	0	; () banked
  5143  003072  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  5144  003074  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  5145  003076  2EE8               	decfsz	wreg,f,c
  5146  003078  D7FA               	goto	u4105
  5147  00307A  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  5148  00307E  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  5149                           
  5150                           ; BSR set to: 0
  5151  003082  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  5152  003086  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  5153  00308A  0100               	movlb	0	; () banked
  5154  00308C  90D8               	bcf	status,0,c
  5155  00308E  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5156  003090  0100               	movlb	0	; () banked
  5157  003092  90D8               	bcf	status,0,c
  5158  003094  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5159  003096  0E30               	movlw	48
  5160  003098  0100               	movlb	0	; () banked
  5161  00309A  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  5162  00309C  50BD               	movf	4029,w,c	;volatile
  5163  00309E  0BCF               	andlw	207
  5164  0030A0  0100               	movlb	0	; () banked
  5165  0030A2  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  5166  0030A4  6EBD               	movwf	4029,c	;volatile
  5167                           
  5168                           ; BSR set to: 0
  5169  0030A6  0012               	return	
  5170  0030A8                     __end_of_SetDCPWM1:
  5171                           	opt stack 0
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           intcon2	equ	0xFF1
  5180                           intcon3	equ	0xFF0
  5181                           indf0	equ	0xFEF
  5182                           postinc0	equ	0xFEE
  5183                           fsr0h	equ	0xFEA
  5184                           fsr0l	equ	0xFE9
  5185                           wreg	equ	0xFE8
  5186                           postinc1	equ	0xFE6
  5187                           postdec1	equ	0xFE5
  5188                           fsr1l	equ	0xFE1
  5189                           indf2	equ	0xFDF
  5190                           postinc2	equ	0xFDE
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _Lcd_Write_Integer *****************
  5196 ;; Defined at:
  5197 ;;		line 113 in file "lcd.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  a               2  111[BANK0 ] int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  s              20  113[BANK0 ] unsigned char [20]
  5202 ;; Return value:  Size  Location     Type
  5203 ;;		None               void
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5211 ;;      Params:         0       2       0       0       0       0       0       0       0
  5212 ;;      Locals:         0      20       0       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5214 ;;      Totals:         0      22       0       0       0       0       0       0       0
  5215 ;;Total ram usage:       22 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    8
  5218 ;; This function calls:
  5219 ;;		_Lcd_Write_String
  5220 ;;		_sprintf
  5221 ;; This function is called by:
  5222 ;;		_Comando_Tablet
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text28
  5227  0031BC                     __ptext28:
  5228                           	opt stack 0
  5229  0031BC                     _Lcd_Write_Integer:
  5230                           	opt stack 21
  5231                           
  5232                           ;lcd.c: 114: unsigned char s[20];
  5233                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;incstack = 0
  5237  0031BC  0100               	movlb	0	; () banked
  5238  0031BE  0E00               	movlw	high Lcd_Write_Integer@s
  5239  0031C0  0100               	movlb	0	; () banked
  5240  0031C2  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  5241  0031C4  0100               	movlb	0	; () banked
  5242  0031C6  0ED1               	movlw	low Lcd_Write_Integer@s
  5243  0031C8  0100               	movlb	0	; () banked
  5244  0031CA  6F9F               	movwf	sprintf@sp& (0+255),b
  5245  0031CC  0E7F               	movlw	high STR_18
  5246  0031CE  0100               	movlb	0	; () banked
  5247  0031D0  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  5248  0031D2  0EAF               	movlw	low STR_18
  5249  0031D4  0100               	movlb	0	; () banked
  5250  0031D6  6FA1               	movwf	sprintf@f& (0+255),b
  5251  0031D8  C0CF  F0A3         	movff	Lcd_Write_Integer@a,?_sprintf+4
  5252  0031DC  C0D0  F0A4         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  5253  0031E0  EC0E  F000         	call	_sprintf	;wreg free
  5254                           
  5255                           ;lcd.c: 117: Lcd_Write_String(s);
  5256  0031E4  0100               	movlb	0	; () banked
  5257  0031E6  0E00               	movlw	high Lcd_Write_Integer@s
  5258  0031E8  0100               	movlb	0	; () banked
  5259  0031EA  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  5260  0031EC  0100               	movlb	0	; () banked
  5261  0031EE  0ED1               	movlw	low Lcd_Write_Integer@s
  5262  0031F0  0100               	movlb	0	; () banked
  5263  0031F2  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  5264  0031F4  EC94  F014         	call	_Lcd_Write_String	;wreg free
  5265  0031F8  0012               	return	
  5266  0031FA                     __end_of_Lcd_Write_Integer:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           intcon3	equ	0xFF0
  5277                           indf0	equ	0xFEF
  5278                           postinc0	equ	0xFEE
  5279                           fsr0h	equ	0xFEA
  5280                           fsr0l	equ	0xFE9
  5281                           wreg	equ	0xFE8
  5282                           postinc1	equ	0xFE6
  5283                           postdec1	equ	0xFE5
  5284                           fsr1l	equ	0xFE1
  5285                           indf2	equ	0xFDF
  5286                           postinc2	equ	0xFDE
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _sprintf *****************
  5292 ;; Defined at:
  5293 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  5296 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  5297 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  5298 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  vd              4   83[BANK0 ] unsigned long 
  5301 ;;  vd              4   87[BANK0 ] unsigned long 
  5302 ;;  _val            5  100[BANK0 ] struct .
  5303 ;;  fval            3  107[BANK0 ] struct .
  5304 ;;  integ           3   95[BANK0 ] struct .
  5305 ;;  ival            3    0        struct .
  5306 ;;  exp             2  105[BANK0 ] int 
  5307 ;;  prec            2   98[BANK0 ] int 
  5308 ;;  flag            2   93[BANK0 ] unsigned short 
  5309 ;;  ap              2   91[BANK0 ] PTR void [1]
  5310 ;;		 -> ?_sprintf(2), 
  5311 ;;  width           2    0        int 
  5312 ;;  c               1  110[BANK0 ] char 
  5313 ;;  d               1    0        unsigned char 
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  2   63[BANK0 ] int 
  5316 ;; Registers used:
  5317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5323 ;;      Params:         0       7       0       0       0       0       0       0       0
  5324 ;;      Locals:         0      35       0       0       0       0       0       0       0
  5325 ;;      Temps:          0       6       0       0       0       0       0       0       0
  5326 ;;      Totals:         0      48       0       0       0       0       0       0       0
  5327 ;;Total ram usage:       48 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    7
  5330 ;; This function calls:
  5331 ;;		___awdiv
  5332 ;;		___ftadd
  5333 ;;		___ftge
  5334 ;;		___ftmul
  5335 ;;		___ftneg
  5336 ;;		___ftsub
  5337 ;;		___fttol
  5338 ;;		___lldiv
  5339 ;;		___llmod
  5340 ;;		___lltoft
  5341 ;;		___wmul
  5342 ;;		__div_to_l_
  5343 ;;		__tdiv_to_l_
  5344 ;;		_fround
  5345 ;;		_scale
  5346 ;; This function is called by:
  5347 ;;		_putcBluetoothInt
  5348 ;;		_Lcd_Write_Integer
  5349 ;;		_Lcd_Write_Float
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text29
  5354  00001C                     __ptext29:
  5355                           	opt stack 0
  5356  00001C                     _sprintf:
  5357                           	opt stack 21
  5358                           
  5359                           ;doprnt.c: 494: va_list ap;
  5360                           ;doprnt.c: 499: signed char c;
  5361                           ;doprnt.c: 501: int width;
  5362                           ;doprnt.c: 504: int prec;
  5363                           ;doprnt.c: 508: unsigned short flag;
  5364                           ;doprnt.c: 515: char d;
  5365                           ;doprnt.c: 516: double fval, integ;
  5366                           ;doprnt.c: 517: int exp;
  5367                           ;doprnt.c: 518: double ival;
  5368                           ;doprnt.c: 519: union {
  5369                           ;doprnt.c: 520: unsigned long _val;
  5370                           ;doprnt.c: 521: struct {
  5371                           ;doprnt.c: 522: const char * _cp;
  5372                           ;doprnt.c: 523: unsigned _len;
  5373                           ;doprnt.c: 524: } _str;
  5374                           ;doprnt.c: 525: } _val;
  5375                           ;doprnt.c: 542: *ap = __va_start();
  5376                           
  5377                           ;incstack = 0
  5378  00001C  0100               	movlb	0	; () banked
  5379  00001E  0E00               	movlw	high (?_sprintf+4)
  5380  000020  0100               	movlb	0	; () banked
  5381  000022  6FBC               	movwf	(sprintf@ap+1)& (0+255),b
  5382  000024  0100               	movlb	0	; () banked
  5383  000026  0EA3               	movlw	low (?_sprintf+4)
  5384  000028  0100               	movlb	0	; () banked
  5385  00002A  6FBB               	movwf	sprintf@ap& (0+255),b
  5386                           
  5387                           ;doprnt.c: 545: while(c = *f++) {
  5388  00002C  EFB4  F004         	goto	l3990
  5389  000030                     l3788:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;doprnt.c: 547: if(c != '%')
  5393  000030  0100               	movlb	0	; () banked
  5394  000032  51CE               	movf	sprintf@c& (0+255),w,b
  5395  000034  0A25               	xorlw	37
  5396  000036  B4D8               	btfsc	status,2,c
  5397  000038  D00C               	goto	l3794
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 549: {
  5401                           ;doprnt.c: 550: ((*sp++ = (c)));
  5402  00003A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5403  00003E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5404  000042  0100               	movlb	0	; () banked
  5405  000044  C0CE  FFDF         	movff	sprintf@c,indf2
  5406                           
  5407                           ; BSR set to: 0
  5408  000048  0100               	movlb	0	; () banked
  5409  00004A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  5410  00004C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  5411                           
  5412                           ;doprnt.c: 551: continue;
  5413  00004E  EFB4  F004         	goto	l3990
  5414  000052                     l3794:
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;doprnt.c: 552: }
  5418                           ;doprnt.c: 557: flag = 0;
  5419  000052  0E00               	movlw	0
  5420  000054  0100               	movlb	0	; () banked
  5421  000056  6FBE               	movwf	(sprintf@flag+1)& (0+255),b
  5422  000058  0E00               	movlw	0
  5423  00005A  0100               	movlb	0	; () banked
  5424  00005C  6FBD               	movwf	sprintf@flag& (0+255),b
  5425                           
  5426                           ;doprnt.c: 644: switch(c = *f++) {
  5427  00005E  D003               	goto	l3800
  5428  000060                     l3796:
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;doprnt.c: 672: flag |= 0x400;
  5432  000060  0100               	movlb	0	; () banked
  5433  000062  85BE               	bsf	(sprintf@flag+1)& (0+255),2,b
  5434                           
  5435                           ;doprnt.c: 673: break;
  5436  000064  D01E               	goto	l3802
  5437  000066                     l3800:
  5438                           
  5439                           ; BSR set to: 0
  5440  000066  0100               	movlb	0	; () banked
  5441  000068  C0A1  FFF6         	movff	sprintf@f,tblptrl
  5442  00006C  0100               	movlb	0	; () banked
  5443  00006E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  5444  000072  0100               	movlb	0	; () banked
  5445  000074  4BA1               	infsnz	sprintf@f& (0+255),f,b
  5446  000076  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  5447  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5448  000078  6AF8               	clrf	tblptru,c
  5449  00007A                     	endif
  5450  00007A                     	if	0	;tblptru may be non-zero
  5451  00007A                     	endif
  5452  00007A  0008               	tblrd		*
  5453  00007C  0100               	movlb	0	; () banked
  5454  00007E  CFF5 F0CE          	movff	tablat,sprintf@c
  5455  000082  0100               	movlb	0	; () banked
  5456  000084  51CE               	movf	sprintf@c& (0+255),w,b
  5457                           
  5458                           ; Switch size 1, requested type "space"
  5459                           ; Number of cases is 4, Range of values is 0 to 105
  5460                           ; switch strategies available:
  5461                           ; Name         Instructions Cycles
  5462                           ; simple_byte           13     7 (average)
  5463                           ;	Chosen strategy is simple_byte
  5464  000086  0A00               	xorlw	0	; case 0
  5465  000088  B4D8               	btfsc	status,2,c
  5466  00008A  EFC6  F004         	goto	l3992
  5467  00008E  0A64               	xorlw	100	; case 100
  5468  000090  B4D8               	btfsc	status,2,c
  5469  000092  D007               	goto	l3802
  5470  000094  0A02               	xorlw	2	; case 102
  5471  000096  B4D8               	btfsc	status,2,c
  5472  000098  D7E3               	goto	l3796
  5473  00009A  0A0F               	xorlw	15	; case 105
  5474  00009C  A4D8               	btfss	status,2,c
  5475  00009E  EFB4  F004         	goto	l3990
  5476  0000A2                     l3802:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;doprnt.c: 834: if(flag & (0x700)) {
  5480  0000A2  0E07               	movlw	7
  5481  0000A4  0100               	movlb	0	; () banked
  5482  0000A6  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5483  0000A8  B4D8               	btfsc	status,2,c
  5484  0000AA  D36D               	goto	l3950
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;doprnt.c: 838: prec = 6;
  5488  0000AC  0E00               	movlw	0
  5489  0000AE  0100               	movlb	0	; () banked
  5490  0000B0  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  5491  0000B2  0E06               	movlw	6
  5492  0000B4  0100               	movlb	0	; () banked
  5493  0000B6  6FC2               	movwf	sprintf@prec& (0+255),b
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5497  0000B8  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  5498  0000BC  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  5499  0000C0  0100               	movlb	0	; () banked
  5500  0000C2  CFDE F0CB          	movff	postinc2,sprintf@fval
  5501  0000C6  0100               	movlb	0	; () banked
  5502  0000C8  CFDE F0CC          	movff	postinc2,sprintf@fval+1
  5503  0000CC  0100               	movlb	0	; () banked
  5504  0000CE  CFDD F0CD          	movff	postdec2,sprintf@fval+2
  5505                           
  5506                           ; BSR set to: 0
  5507  0000D2  0E03               	movlw	3
  5508  0000D4  0100               	movlb	0	; () banked
  5509  0000D6  27BB               	addwf	sprintf@ap& (0+255),f,b
  5510  0000D8  0E00               	movlw	0
  5511  0000DA  0100               	movlb	0	; () banked
  5512  0000DC  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 840: if(fval < 0.0) {
  5516  0000DE  0100               	movlb	0	; () banked
  5517  0000E0  51CD               	movf	(sprintf@fval+2)& (0+255),w,b
  5518  0000E2  0A80               	xorlw	128
  5519  0000E4  0F80               	addlw	128
  5520  0000E6  E107               	bnz	u3785
  5521  0000E8  0E00               	movlw	0
  5522  0000EA  0100               	movlb	0	; () banked
  5523  0000EC  5DCC               	subwf	(sprintf@fval+1)& (0+255),w,b
  5524  0000EE  E103               	bnz	u3785
  5525  0000F0  0E00               	movlw	0
  5526  0000F2  0100               	movlb	0	; () banked
  5527  0000F4  5DCB               	subwf	sprintf@fval& (0+255),w,b
  5528  0000F6                     u3785:
  5529  0000F6  B0D8               	btfsc	status,0,c
  5530  0000F8  D011               	goto	l3816
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;doprnt.c: 841: fval = -fval;
  5534  0000FA  C0CB  F060         	movff	sprintf@fval,___ftneg@f1
  5535  0000FE  C0CC  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  5536  000102  C0CD  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  5537  000106  ECC0  F019         	call	___ftneg	;wreg free
  5538  00010A  C060  F0CB         	movff	?___ftneg,sprintf@fval
  5539  00010E  C061  F0CC         	movff	?___ftneg+1,sprintf@fval+1
  5540  000112  C062  F0CD         	movff	?___ftneg+2,sprintf@fval+2
  5541                           
  5542                           ;doprnt.c: 842: flag |= 0x03;
  5543  000116  0E03               	movlw	3
  5544  000118  0100               	movlb	0	; () banked
  5545  00011A  13BD               	iorwf	sprintf@flag& (0+255),f,b
  5546  00011C                     l3816:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;doprnt.c: 843: }
  5550                           ;doprnt.c: 844: exp = 0;
  5551  00011C  0E00               	movlw	0
  5552  00011E  0100               	movlb	0	; () banked
  5553  000120  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5554  000122  0E00               	movlw	0
  5555  000124  0100               	movlb	0	; () banked
  5556  000126  6FC9               	movwf	sprintf@exp& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 845: if( fval!=0) {
  5560  000128  0E7F               	movlw	127
  5561  00012A  0100               	movlb	0	; () banked
  5562  00012C  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5563  00012E  0100               	movlb	0	; () banked
  5564  000130  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5565  000132  0100               	movlb	0	; () banked
  5566  000134  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5567  000136  B4D8               	btfsc	status,2,c
  5568  000138  D0AA               	goto	l3844
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5572  00013A  0E82               	movlw	130
  5573  00013C  0100               	movlb	0	; () banked
  5574  00013E  6FA6               	movwf	??_sprintf& (0+255),b
  5575  000140  0EFF               	movlw	255
  5576  000142  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5577  000144  0100               	movlb	0	; () banked
  5578  000146  C0CB  F0A8         	movff	sprintf@fval,??_sprintf+2
  5579  00014A  0100               	movlb	0	; () banked
  5580  00014C  C0CC  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  5581  000150  0100               	movlb	0	; () banked
  5582  000152  C0CD  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  5583  000156  0100               	movlb	0	; () banked
  5584  000158  C0CE  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  5585  00015C  0E10               	movlw	16
  5586  00015E  D006               	goto	u3800
  5587  000160                     u3805:
  5588  000160  0100               	movlb	0	; () banked
  5589  000162  90D8               	bcf	status,0,c
  5590  000164  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  5591  000166  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  5592  000168  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  5593  00016A  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  5594  00016C                     u3800:
  5595  00016C  2EE8               	decfsz	wreg,f,c
  5596  00016E  D7F8               	goto	u3805
  5597  000170  0100               	movlb	0	; () banked
  5598  000172  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  5599  000174  0100               	movlb	0	; () banked
  5600  000176  25A6               	addwf	??_sprintf& (0+255),w,b
  5601  000178  0100               	movlb	0	; () banked
  5602  00017A  6FC9               	movwf	sprintf@exp& (0+255),b
  5603  00017C  0E00               	movlw	0
  5604  00017E  0100               	movlb	0	; () banked
  5605  000180  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  5606  000182  0100               	movlb	0	; () banked
  5607  000184  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;doprnt.c: 847: exp--;
  5611  000186  0100               	movlb	0	; () banked
  5612  000188  07C9               	decf	sprintf@exp& (0+255),f,b
  5613  00018A  A0D8               	btfss	status,0,c
  5614  00018C  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;doprnt.c: 848: exp *= 3;
  5618  00018E  C0C9  F06E         	movff	sprintf@exp,___wmul@multiplier
  5619  000192  C0CA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  5620  000196  0E00               	movlw	0
  5621  000198  0100               	movlb	0	; () banked
  5622  00019A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5623  00019C  0E03               	movlw	3
  5624  00019E  0100               	movlb	0	; () banked
  5625  0001A0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5626  0001A2  EC71  F019         	call	___wmul	;wreg free
  5627  0001A6  0100               	movlb	0	; () banked
  5628  0001A8  C06E  F0C9         	movff	?___wmul,sprintf@exp
  5629  0001AC  0100               	movlb	0	; () banked
  5630  0001AE  C06F  F0CA         	movff	?___wmul+1,sprintf@exp+1
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 849: exp /= 10;
  5634  0001B2  C0C9  F066         	movff	sprintf@exp,___awdiv@dividend
  5635  0001B6  C0CA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  5636  0001BA  0E00               	movlw	0
  5637  0001BC  0100               	movlb	0	; () banked
  5638  0001BE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5639  0001C0  0E0A               	movlw	10
  5640  0001C2  0100               	movlb	0	; () banked
  5641  0001C4  6F68               	movwf	___awdiv@divisor& (0+255),b
  5642  0001C6  EC54  F010         	call	___awdiv	;wreg free
  5643  0001CA  0100               	movlb	0	; () banked
  5644  0001CC  C066  F0C9         	movff	?___awdiv,sprintf@exp
  5645  0001D0  0100               	movlb	0	; () banked
  5646  0001D2  C067  F0CA         	movff	?___awdiv+1,sprintf@exp+1
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;doprnt.c: 850: if(exp < 0)
  5650  0001D6  0100               	movlb	0	; () banked
  5651  0001D8  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5652  0001DA  0A80               	xorlw	128
  5653  0001DC  6EF3               	movwf	prodl,c
  5654  0001DE  0E80               	movlw	128
  5655  0001E0  5CF3               	subwf	prodl,w,c
  5656  0001E2  0E00               	movlw	0
  5657  0001E4  B4D8               	btfsc	status,2,c
  5658  0001E6  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5659  0001E8  B0D8               	btfsc	status,0,c
  5660  0001EA  D004               	goto	l3832
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;doprnt.c: 851: exp--;
  5664  0001EC  0100               	movlb	0	; () banked
  5665  0001EE  07C9               	decf	sprintf@exp& (0+255),f,b
  5666  0001F0  A0D8               	btfss	status,0,c
  5667  0001F2  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5668  0001F4                     l3832:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;doprnt.c: 855: integ = scale(-exp);
  5672  0001F4  0100               	movlb	0	; () banked
  5673  0001F6  51C9               	movf	sprintf@exp& (0+255),w,b
  5674  0001F8  0800               	sublw	0
  5675  0001FA  ECCD  F004         	call	_scale
  5676  0001FE  C083  F0BF         	movff	?_scale,sprintf@integ
  5677  000202  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5678  000206  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5679                           
  5680                           ;doprnt.c: 856: integ *= fval;
  5681  00020A  C0BF  F074         	movff	sprintf@integ,___ftmul@f1
  5682  00020E  C0C0  F075         	movff	sprintf@integ+1,___ftmul@f1+1
  5683  000212  C0C1  F076         	movff	sprintf@integ+2,___ftmul@f1+2
  5684  000216  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  5685  00021A  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  5686  00021E  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  5687  000222  ECD0  F00C         	call	___ftmul	;wreg free
  5688  000226  C074  F0BF         	movff	?___ftmul,sprintf@integ
  5689  00022A  C075  F0C0         	movff	?___ftmul+1,sprintf@integ+1
  5690  00022E  C076  F0C1         	movff	?___ftmul+2,sprintf@integ+2
  5691                           
  5692                           ;doprnt.c: 857: if(integ < 1.0)
  5693  000232  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5694  000236  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5695  00023A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5696  00023E  0E00               	movlw	0
  5697  000240  0100               	movlb	0	; () banked
  5698  000242  6F63               	movwf	___ftge@ff2& (0+255),b
  5699  000244  0E80               	movlw	128
  5700  000246  0100               	movlb	0	; () banked
  5701  000248  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5702  00024A  0E3F               	movlw	63
  5703  00024C  0100               	movlb	0	; () banked
  5704  00024E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5705  000250  EC2F  F011         	call	___ftge	;wreg free
  5706  000254  B0D8               	btfsc	status,0,c
  5707  000256  D005               	goto	l3840
  5708                           
  5709                           ;doprnt.c: 858: exp--;
  5710  000258  0100               	movlb	0	; () banked
  5711  00025A  07C9               	decf	sprintf@exp& (0+255),f,b
  5712  00025C  A0D8               	btfss	status,0,c
  5713  00025E  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5714  000260  D016               	goto	l3844
  5715  000262                     l3840:
  5716                           
  5717                           ;doprnt.c: 859: else if(integ >= 10.0)
  5718  000262  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5719  000266  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5720  00026A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5721  00026E  0E00               	movlw	0
  5722  000270  0100               	movlb	0	; () banked
  5723  000272  6F63               	movwf	___ftge@ff2& (0+255),b
  5724  000274  0E20               	movlw	32
  5725  000276  0100               	movlb	0	; () banked
  5726  000278  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5727  00027A  0E41               	movlw	65
  5728  00027C  0100               	movlb	0	; () banked
  5729  00027E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5730  000280  EC2F  F011         	call	___ftge	;wreg free
  5731  000284  A0D8               	btfss	status,0,c
  5732  000286  D003               	goto	l3844
  5733                           
  5734                           ;doprnt.c: 860: exp++;
  5735  000288  0100               	movlb	0	; () banked
  5736  00028A  4BC9               	infsnz	sprintf@exp& (0+255),f,b
  5737  00028C  2BCA               	incf	(sprintf@exp+1)& (0+255),f,b
  5738  00028E                     l3844:
  5739                           
  5740                           ;doprnt.c: 861: }
  5741                           ;doprnt.c: 1121: if(prec <= 12)
  5742  00028E  0100               	movlb	0	; () banked
  5743  000290  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  5744  000292  0A80               	xorlw	128
  5745  000294  6EF3               	movwf	prodl,c
  5746  000296  0E80               	movlw	128
  5747  000298  5CF3               	subwf	prodl,w,c
  5748  00029A  0E0D               	movlw	13
  5749  00029C  B4D8               	btfsc	status,2,c
  5750  00029E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  5751  0002A0  B0D8               	btfsc	status,0,c
  5752  0002A2  D018               	goto	l3848
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;doprnt.c: 1122: fval += fround(prec);
  5756  0002A4  C0CB  F08D         	movff	sprintf@fval,___ftadd@f1
  5757  0002A8  C0CC  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  5758  0002AC  C0CD  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  5759  0002B0  0100               	movlb	0	; () banked
  5760  0002B2  51C2               	movf	sprintf@prec& (0+255),w,b
  5761  0002B4  EC8B  F007         	call	_fround
  5762  0002B8  C083  F090         	movff	?_fround,___ftadd@f2
  5763  0002BC  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  5764  0002C0  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  5765  0002C4  EC15  F009         	call	___ftadd	;wreg free
  5766  0002C8  C08D  F0CB         	movff	?___ftadd,sprintf@fval
  5767  0002CC  C08E  F0CC         	movff	?___ftadd+1,sprintf@fval+1
  5768  0002D0  C08F  F0CD         	movff	?___ftadd+2,sprintf@fval+2
  5769  0002D4                     l3848:
  5770                           
  5771                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5772  0002D4  0100               	movlb	0	; () banked
  5773  0002D6  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5774  0002D8  0A80               	xorlw	128
  5775  0002DA  6EF3               	movwf	prodl,c
  5776  0002DC  0E80               	movlw	128
  5777  0002DE  5CF3               	subwf	prodl,w,c
  5778  0002E0  0E0A               	movlw	10
  5779  0002E2  B4D8               	btfsc	status,2,c
  5780  0002E4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5781  0002E6  B0D8               	btfsc	status,0,c
  5782  0002E8  D029               	goto	l3856
  5783                           
  5784                           ; BSR set to: 0
  5785  0002EA  0E7F               	movlw	127
  5786  0002EC  0100               	movlb	0	; () banked
  5787  0002EE  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5788  0002F0  0100               	movlb	0	; () banked
  5789  0002F2  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5790  0002F4  0100               	movlb	0	; () banked
  5791  0002F6  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5792  0002F8  B4D8               	btfsc	status,2,c
  5793  0002FA  D06F               	goto	l3872
  5794                           
  5795                           ; BSR set to: 0
  5796  0002FC  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5797  000300  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5798  000304  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5799  000308  EC30  F00E         	call	___fttol	;wreg free
  5800  00030C  C08A  F0A6         	movff	?___fttol,??_sprintf
  5801  000310  C08B  F0A7         	movff	?___fttol+1,??_sprintf+1
  5802  000314  C08C  F0A8         	movff	?___fttol+2,??_sprintf+2
  5803  000318  C08D  F0A9         	movff	?___fttol+3,??_sprintf+3
  5804  00031C  0100               	movlb	0	; () banked
  5805  00031E  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  5806  000320  11A6               	iorwf	??_sprintf& (0+255),w,b
  5807  000322  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5808  000324  11A8               	iorwf	(??_sprintf+2)& (0+255),w,b
  5809  000326  A4D8               	btfss	status,2,c
  5810  000328  D058               	goto	l3872
  5811                           
  5812                           ; BSR set to: 0
  5813  00032A  0100               	movlb	0	; () banked
  5814  00032C  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5815  00032E  0A80               	xorlw	128
  5816  000330  0F80               	addlw	-128
  5817  000332  0E02               	movlw	2
  5818  000334  B4D8               	btfsc	status,2,c
  5819  000336  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5820  000338  A0D8               	btfss	status,0,c
  5821  00033A  D04F               	goto	l3872
  5822  00033C                     l3856:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;doprnt.c: 1129: if(integ < 4.294967296){
  5826  00033C  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5827  000340  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5828  000344  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5829  000348  0E70               	movlw	112
  5830  00034A  0100               	movlb	0	; () banked
  5831  00034C  6F63               	movwf	___ftge@ff2& (0+255),b
  5832  00034E  0E89               	movlw	137
  5833  000350  0100               	movlb	0	; () banked
  5834  000352  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5835  000354  0E40               	movlw	64
  5836  000356  0100               	movlb	0	; () banked
  5837  000358  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5838  00035A  EC2F  F011         	call	___ftge	;wreg free
  5839  00035E  B0D8               	btfsc	status,0,c
  5840  000360  D003               	goto	l3860
  5841                           
  5842                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5843  000362  0100               	movlb	0	; () banked
  5844  000364  0EF7               	movlw	247
  5845  000366  D002               	goto	L8
  5846  000368                     l3860:
  5847                           
  5848                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5849  000368  0100               	movlb	0	; () banked
  5850  00036A  0EF8               	movlw	248
  5851  00036C                     L8:
  5852  00036C  0100               	movlb	0	; () banked
  5853  00036E  27C9               	addwf	sprintf@exp& (0+255),f,b
  5854  000370  0EFF               	movlw	255
  5855  000372  0100               	movlb	0	; () banked
  5856  000374  23CA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;doprnt.c: 1133: }
  5860                           ;doprnt.c: 1134: integ = scale(exp);
  5861                           
  5862                           ; BSR set to: 0
  5863  000376  0100               	movlb	0	; () banked
  5864  000378  51C9               	movf	sprintf@exp& (0+255),w,b
  5865  00037A  ECCD  F004         	call	_scale
  5866  00037E  C083  F0BF         	movff	?_scale,sprintf@integ
  5867  000382  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5868  000386  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5869                           
  5870                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5871  00038A  C0CB  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  5872  00038E  C0CC  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5873  000392  C0CD  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5874  000396  C0BF  F063         	movff	sprintf@integ,__tdiv_to_l_@f2
  5875  00039A  C0C0  F064         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5876  00039E  C0C1  F065         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5877  0003A2  EC44  F00B         	call	__tdiv_to_l_	;wreg free
  5878  0003A6  C060  F0AF         	movff	?__tdiv_to_l_,_sprintf$1857
  5879  0003AA  C061  F0B0         	movff	?__tdiv_to_l_+1,_sprintf$1857+1
  5880  0003AE  C062  F0B1         	movff	?__tdiv_to_l_+2,_sprintf$1857+2
  5881  0003B2  C063  F0B2         	movff	?__tdiv_to_l_+3,_sprintf$1857+3
  5882  0003B6  C0AF  F0C4         	movff	_sprintf$1857,sprintf@_val
  5883  0003BA  C0B0  F0C5         	movff	_sprintf$1857+1,sprintf@_val+1
  5884  0003BE  C0B1  F0C6         	movff	_sprintf$1857+2,sprintf@_val+2
  5885  0003C2  C0B2  F0C7         	movff	_sprintf$1857+3,sprintf@_val+3
  5886                           
  5887                           ;doprnt.c: 1138: fval = 0.0;
  5888  0003C6  0E00               	movlw	0
  5889  0003C8  0100               	movlb	0	; () banked
  5890  0003CA  6FCB               	movwf	sprintf@fval& (0+255),b
  5891  0003CC  0E00               	movlw	0
  5892  0003CE  0100               	movlb	0	; () banked
  5893  0003D0  6FCC               	movwf	(sprintf@fval+1)& (0+255),b
  5894  0003D2  0E00               	movlw	0
  5895  0003D4  0100               	movlb	0	; () banked
  5896  0003D6  6FCD               	movwf	(sprintf@fval+2)& (0+255),b
  5897                           
  5898                           ;doprnt.c: 1139: } else {
  5899  0003D8  D034               	goto	l3876
  5900  0003DA                     l3872:
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5904  0003DA  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5905  0003DE  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5906  0003E2  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5907  0003E6  EC30  F00E         	call	___fttol	;wreg free
  5908  0003EA  C08A  F0C4         	movff	?___fttol,sprintf@_val
  5909  0003EE  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  5910  0003F2  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  5911  0003F6  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  5912                           
  5913                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5914  0003FA  C0CB  F099         	movff	sprintf@fval,___ftsub@f1
  5915  0003FE  C0CC  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  5916  000402  C0CD  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  5917  000406  C0C4  F068         	movff	sprintf@_val,___lltoft@c
  5918  00040A  C0C5  F069         	movff	sprintf@_val+1,___lltoft@c+1
  5919  00040E  C0C6  F06A         	movff	sprintf@_val+2,___lltoft@c+2
  5920  000412  C0C7  F06B         	movff	sprintf@_val+3,___lltoft@c+3
  5921  000416  ECA7  F015         	call	___lltoft	;wreg free
  5922  00041A  C068  F09C         	movff	?___lltoft,___ftsub@f2
  5923  00041E  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  5924  000422  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  5925  000426  ECFD  F018         	call	___ftsub	;wreg free
  5926  00042A  C099  F0CB         	movff	?___ftsub,sprintf@fval
  5927  00042E  C09A  F0CC         	movff	?___ftsub+1,sprintf@fval+1
  5928  000432  C09B  F0CD         	movff	?___ftsub+2,sprintf@fval+2
  5929                           
  5930                           ;doprnt.c: 1142: exp = 0;
  5931  000436  0E00               	movlw	0
  5932  000438  0100               	movlb	0	; () banked
  5933  00043A  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5934  00043C  0E00               	movlw	0
  5935  00043E  0100               	movlb	0	; () banked
  5936  000440  6FC9               	movwf	sprintf@exp& (0+255),b
  5937  000442                     l3876:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;doprnt.c: 1143: }
  5941                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5942  000442  0E01               	movlw	1
  5943  000444  0100               	movlb	0	; () banked
  5944  000446  6FCE               	movwf	sprintf@c& (0+255),b
  5945  000448                     
  5946                           ; BSR set to: 0
  5947  000448  0100               	movlb	0	; () banked
  5948  00044A  51CE               	movf	sprintf@c& (0+255),w,b
  5949  00044C  0A0A               	xorlw	10
  5950  00044E  B4D8               	btfsc	status,2,c
  5951  000450  D021               	goto	l3890
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5955                           
  5956                           ; BSR set to: 0
  5957                           
  5958                           ; BSR set to: 0
  5959  000452  0100               	movlb	0	; () banked
  5960  000454  51CE               	movf	sprintf@c& (0+255),w,b
  5961  000456  0D04               	mullw	4
  5962  000458  0E9D               	movlw	low _dpowers
  5963  00045A  24F3               	addwf	prodl,w,c
  5964  00045C  6EF6               	movwf	tblptrl,c
  5965  00045E  0E7E               	movlw	high _dpowers
  5966  000460  20F4               	addwfc	prodh,w,c
  5967  000462  6EF7               	movwf	tblptrh,c
  5968  000464                     	if	1	;There are 3 active tblptr bytes
  5969  000464  6AF8               	clrf	tblptru,c
  5970  000466  0E00               	movlw	low (__mediumconst shr (0+16))
  5971  000468  22F8               	addwfc	tblptru,f,c
  5972  00046A                     	endif
  5973  00046A  0009               	tblrd		*+
  5974  00046C  50F5               	movf	tablat,w,c
  5975  00046E  0100               	movlb	0	; () banked
  5976  000470  5DC4               	subwf	sprintf@_val& (0+255),w,b
  5977  000472  0009               	tblrd		*+
  5978  000474  50F5               	movf	tablat,w,c
  5979  000476  0100               	movlb	0	; () banked
  5980  000478  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5981  00047A  0009               	tblrd		*+
  5982  00047C  50F5               	movf	tablat,w,c
  5983  00047E  0100               	movlb	0	; () banked
  5984  000480  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5985  000482  0009               	tblrd		*+
  5986  000484  50F5               	movf	tablat,w,c
  5987  000486  0100               	movlb	0	; () banked
  5988  000488  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5989  00048A  A0D8               	btfss	status,0,c
  5990  00048C  D003               	goto	l3890
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;doprnt.c: 1147: break;
  5998  00048E  0100               	movlb	0	; () banked
  5999  000490  2BCE               	incf	sprintf@c& (0+255),f,b
  6000  000492  D7DA               	goto	L9
  6001  000494                     l3890:
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;doprnt.c: 1184: {
  6005                           ;doprnt.c: 1197: if(flag & 0x03)
  6006  000494  0E03               	movlw	3
  6007  000496  0100               	movlb	0	; () banked
  6008  000498  15BD               	andwf	sprintf@flag& (0+255),w,b
  6009  00049A  0100               	movlb	0	; () banked
  6010  00049C  6FA6               	movwf	??_sprintf& (0+255),b
  6011  00049E  0E00               	movlw	0
  6012  0004A0  0100               	movlb	0	; () banked
  6013  0004A2  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6014  0004A4  0100               	movlb	0	; () banked
  6015  0004A6  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  6016  0004A8  0100               	movlb	0	; () banked
  6017  0004AA  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  6018  0004AC  11A6               	iorwf	??_sprintf& (0+255),w,b
  6019  0004AE  B4D8               	btfsc	status,2,c
  6020  0004B0  D05D               	goto	l3904
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  6024  0004B2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6025  0004B6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6026  0004BA  0E2D               	movlw	45
  6027  0004BC  D053               	goto	L10
  6028  0004BE                     l3896:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;doprnt.c: 1209: {
  6032                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  6033  0004BE  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6034  0004C2  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6035  0004C6  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6036  0004CA  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6037  0004CE  0100               	movlb	0	; () banked
  6038  0004D0  51CE               	movf	sprintf@c& (0+255),w,b
  6039  0004D2  0D04               	mullw	4
  6040  0004D4  0E9D               	movlw	low _dpowers
  6041  0004D6  24F3               	addwf	prodl,w,c
  6042  0004D8  6EF6               	movwf	tblptrl,c
  6043  0004DA  0E7E               	movlw	high _dpowers
  6044  0004DC  20F4               	addwfc	prodh,w,c
  6045  0004DE  6EF7               	movwf	tblptrh,c
  6046  0004E0                     	if	1	;There are 3 active tblptr bytes
  6047  0004E0  6AF8               	clrf	tblptru,c
  6048  0004E2  0E00               	movlw	low (__mediumconst shr (0+16))
  6049  0004E4  22F8               	addwfc	tblptru,f,c
  6050  0004E6                     	endif
  6051  0004E6  0009               	tblrd		*+
  6052  0004E8  0100               	movlb	0	; () banked
  6053  0004EA  CFF5 F064          	movff	tablat,___lldiv@divisor
  6054  0004EE  0009               	tblrd		*+
  6055  0004F0  0100               	movlb	0	; () banked
  6056  0004F2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6057  0004F6  0009               	tblrd		*+
  6058  0004F8  0100               	movlb	0	; () banked
  6059  0004FA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6060  0004FE  000A               	tblrd		*-
  6061  000500  0100               	movlb	0	; () banked
  6062  000502  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6063  000506  ECC5  F010         	call	___lldiv	;wreg free
  6064  00050A  C060  F0B3         	movff	?___lldiv,sprintf@vd
  6065  00050E  C061  F0B4         	movff	?___lldiv+1,sprintf@vd+1
  6066  000512  C062  F0B5         	movff	?___lldiv+2,sprintf@vd+2
  6067  000516  C063  F0B6         	movff	?___lldiv+3,sprintf@vd+3
  6068                           
  6069                           ;doprnt.c: 1211: vd %= 10;
  6070  00051A  C0B3  F06D         	movff	sprintf@vd,___llmod@dividend
  6071  00051E  C0B4  F06E         	movff	sprintf@vd+1,___llmod@dividend+1
  6072  000522  C0B5  F06F         	movff	sprintf@vd+2,___llmod@dividend+2
  6073  000526  C0B6  F070         	movff	sprintf@vd+3,___llmod@dividend+3
  6074  00052A  0E0A               	movlw	10
  6075  00052C  0100               	movlb	0	; () banked
  6076  00052E  6F71               	movwf	___llmod@divisor& (0+255),b
  6077  000530  0E00               	movlw	0
  6078  000532  0100               	movlb	0	; () banked
  6079  000534  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6080  000536  0E00               	movlw	0
  6081  000538  0100               	movlb	0	; () banked
  6082  00053A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6083  00053C  0E00               	movlw	0
  6084  00053E  0100               	movlb	0	; () banked
  6085  000540  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6086  000542  EC42  F014         	call	___llmod	;wreg free
  6087  000546  C06D  F0B3         	movff	?___llmod,sprintf@vd
  6088  00054A  C06E  F0B4         	movff	?___llmod+1,sprintf@vd+1
  6089  00054E  C06F  F0B5         	movff	?___llmod+2,sprintf@vd+2
  6090  000552  C070  F0B6         	movff	?___llmod+3,sprintf@vd+3
  6091                           
  6092                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  6093  000556  0100               	movlb	0	; () banked
  6094  000558  51B3               	movf	sprintf@vd& (0+255),w,b
  6095  00055A  0F30               	addlw	48
  6096  00055C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6097  000560  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6098  000564                     L10:
  6099  000564  6EDF               	movwf	indf2,c
  6100                           
  6101                           ; BSR set to: 0
  6102  000566  0100               	movlb	0	; () banked
  6103  000568  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6104  00056A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6105  00056C                     l3904:
  6106                           
  6107                           ; BSR set to: 0
  6108  00056C  0100               	movlb	0	; () banked
  6109  00056E  07CE               	decf	sprintf@c& (0+255),f,b
  6110  000570  0100               	movlb	0	; () banked
  6111  000572  29CE               	incf	sprintf@c& (0+255),w,b
  6112  000574  B4D8               	btfsc	status,2,c
  6113  000576  D00E               	goto	l3912
  6114  000578  D7A2               	goto	l3896
  6115  00057A                     l3906:
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  6119  00057A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6120  00057E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6121  000582  0E30               	movlw	48
  6122  000584  6EDF               	movwf	indf2,c
  6123                           
  6124                           ; BSR set to: 0
  6125  000586  0100               	movlb	0	; () banked
  6126  000588  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6127  00058A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;doprnt.c: 1218: exp--;
  6131  00058C  0100               	movlb	0	; () banked
  6132  00058E  07C9               	decf	sprintf@exp& (0+255),f,b
  6133  000590  A0D8               	btfss	status,0,c
  6134  000592  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  6135  000594                     l3912:
  6136                           
  6137                           ; BSR set to: 0
  6138  000594  0100               	movlb	0	; () banked
  6139  000596  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  6140  000598  0A80               	xorlw	128
  6141  00059A  6EF3               	movwf	prodl,c
  6142  00059C  0E80               	movlw	128
  6143  00059E  5CF3               	subwf	prodl,w,c
  6144  0005A0  0E01               	movlw	1
  6145  0005A2  B4D8               	btfsc	status,2,c
  6146  0005A4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  6147  0005A6  B0D8               	btfsc	status,0,c
  6148  0005A8  D7E8               	goto	l3906
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;doprnt.c: 1219: }
  6152                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6153                           
  6154                           ; BSR set to: 0
  6155  0005AA  0100               	movlb	0	; () banked
  6156  0005AC  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6157  0005AE  0A80               	xorlw	128
  6158  0005B0  0F80               	addlw	-128
  6159  0005B2  0E09               	movlw	9
  6160  0005B4  B4D8               	btfsc	status,2,c
  6161  0005B6  5DC2               	subwf	sprintf@prec& (0+255),w,b
  6162  0005B8  A0D8               	btfss	status,0,c
  6163  0005BA  D004               	goto	l556
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6167  0005BC  0E08               	movlw	8
  6168  0005BE  0100               	movlb	0	; () banked
  6169  0005C0  6FCE               	movwf	sprintf@c& (0+255),b
  6170  0005C2  D002               	goto	l3918
  6171  0005C4                     l556:
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;doprnt.c: 1222: else
  6175                           ;doprnt.c: 1223: c = prec;
  6176  0005C4  C0C2  F0CE         	movff	sprintf@prec,sprintf@c
  6177  0005C8                     l3918:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;doprnt.c: 1224: prec -= c;
  6181  0005C8  0100               	movlb	0	; () banked
  6182  0005CA  51CE               	movf	sprintf@c& (0+255),w,b
  6183  0005CC  0100               	movlb	0	; () banked
  6184  0005CE  5FC2               	subwf	sprintf@prec& (0+255),f,b
  6185  0005D0  0E00               	movlw	0
  6186  0005D2  0100               	movlb	0	; () banked
  6187  0005D4  BFCE               	btfsc	sprintf@c& (0+255),7,b
  6188  0005D6  0EFF               	movlw	255
  6189  0005D8  0100               	movlb	0	; () banked
  6190  0005DA  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;doprnt.c: 1228: if(c)
  6194  0005DC  0100               	movlb	0	; () banked
  6195  0005DE  51CE               	movf	sprintf@c& (0+255),w,b
  6196  0005E0  B4D8               	btfsc	status,2,c
  6197  0005E2  D009               	goto	l3926
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  6201  0005E4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6202  0005E8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6203  0005EC  0E2E               	movlw	46
  6204  0005EE  6EDF               	movwf	indf2,c
  6205                           
  6206                           ; BSR set to: 0
  6207  0005F0  0100               	movlb	0	; () banked
  6208  0005F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6209  0005F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6210  0005F6                     l3926:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6214  0005F6  0100               	movlb	0	; () banked
  6215  0005F8  51CE               	movf	sprintf@c& (0+255),w,b
  6216  0005FA  ECCD  F004         	call	_scale
  6217  0005FE  C083  F0AC         	movff	?_scale,_sprintf$2887
  6218  000602  C084  F0AD         	movff	?_scale+1,_sprintf$2887+1
  6219  000606  C085  F0AE         	movff	?_scale+2,_sprintf$2887+2
  6220                           
  6221                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6222  00060A  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  6223  00060E  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  6224  000612  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  6225  000616  C0AC  F074         	movff	_sprintf$2887,___ftmul@f1
  6226  00061A  C0AD  F075         	movff	_sprintf$2887+1,___ftmul@f1+1
  6227  00061E  C0AE  F076         	movff	_sprintf$2887+2,___ftmul@f1+2
  6228  000622  ECD0  F00C         	call	___ftmul	;wreg free
  6229  000626  C074  F08A         	movff	?___ftmul,___fttol@f1
  6230  00062A  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  6231  00062E  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  6232  000632  EC30  F00E         	call	___fttol	;wreg free
  6233  000636  C08A  F0C4         	movff	?___fttol,sprintf@_val
  6234  00063A  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  6235  00063E  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  6236  000642  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  6237                           
  6238                           ;doprnt.c: 1237: while(c--) {
  6239  000646  D085               	goto	l3940
  6240  000648                     l3930:
  6241                           
  6242                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  6243  000648  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6244  00064C  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6245  000650  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6246  000654  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6247  000658  0100               	movlb	0	; () banked
  6248  00065A  51CE               	movf	sprintf@c& (0+255),w,b
  6249  00065C  0D04               	mullw	4
  6250  00065E  0E9D               	movlw	low _dpowers
  6251  000660  24F3               	addwf	prodl,w,c
  6252  000662  6EF6               	movwf	tblptrl,c
  6253  000664  0E7E               	movlw	high _dpowers
  6254  000666  20F4               	addwfc	prodh,w,c
  6255  000668  6EF7               	movwf	tblptrh,c
  6256  00066A                     	if	1	;There are 3 active tblptr bytes
  6257  00066A  6AF8               	clrf	tblptru,c
  6258  00066C  0E00               	movlw	low (__mediumconst shr (0+16))
  6259  00066E  22F8               	addwfc	tblptru,f,c
  6260  000670                     	endif
  6261  000670  0009               	tblrd		*+
  6262  000672  0100               	movlb	0	; () banked
  6263  000674  CFF5 F064          	movff	tablat,___lldiv@divisor
  6264  000678  0009               	tblrd		*+
  6265  00067A  0100               	movlb	0	; () banked
  6266  00067C  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6267  000680  0009               	tblrd		*+
  6268  000682  0100               	movlb	0	; () banked
  6269  000684  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6270  000688  000A               	tblrd		*-
  6271  00068A  0100               	movlb	0	; () banked
  6272  00068C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6273  000690  ECC5  F010         	call	___lldiv	;wreg free
  6274  000694  C060  F0B7         	movff	?___lldiv,sprintf@vd_1859
  6275  000698  C061  F0B8         	movff	?___lldiv+1,sprintf@vd_1859+1
  6276  00069C  C062  F0B9         	movff	?___lldiv+2,sprintf@vd_1859+2
  6277  0006A0  C063  F0BA         	movff	?___lldiv+3,sprintf@vd_1859+3
  6278                           
  6279                           ;doprnt.c: 1239: vd %= 10;
  6280  0006A4  C0B7  F06D         	movff	sprintf@vd_1859,___llmod@dividend
  6281  0006A8  C0B8  F06E         	movff	sprintf@vd_1859+1,___llmod@dividend+1
  6282  0006AC  C0B9  F06F         	movff	sprintf@vd_1859+2,___llmod@dividend+2
  6283  0006B0  C0BA  F070         	movff	sprintf@vd_1859+3,___llmod@dividend+3
  6284  0006B4  0E0A               	movlw	10
  6285  0006B6  0100               	movlb	0	; () banked
  6286  0006B8  6F71               	movwf	___llmod@divisor& (0+255),b
  6287  0006BA  0E00               	movlw	0
  6288  0006BC  0100               	movlb	0	; () banked
  6289  0006BE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6290  0006C0  0E00               	movlw	0
  6291  0006C2  0100               	movlb	0	; () banked
  6292  0006C4  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6293  0006C6  0E00               	movlw	0
  6294  0006C8  0100               	movlb	0	; () banked
  6295  0006CA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6296  0006CC  EC42  F014         	call	___llmod	;wreg free
  6297  0006D0  C06D  F0B7         	movff	?___llmod,sprintf@vd_1859
  6298  0006D4  C06E  F0B8         	movff	?___llmod+1,sprintf@vd_1859+1
  6299  0006D8  C06F  F0B9         	movff	?___llmod+2,sprintf@vd_1859+2
  6300  0006DC  C070  F0BA         	movff	?___llmod+3,sprintf@vd_1859+3
  6301                           
  6302                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  6303  0006E0  0100               	movlb	0	; () banked
  6304  0006E2  51B7               	movf	sprintf@vd_1859& (0+255),w,b
  6305  0006E4  0F30               	addlw	48
  6306  0006E6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6307  0006EA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6308  0006EE  6EDF               	movwf	indf2,c
  6309                           
  6310                           ; BSR set to: 0
  6311  0006F0  0100               	movlb	0	; () banked
  6312  0006F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6313  0006F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  6317  0006F6  C0C4  F06D         	movff	sprintf@_val,___llmod@dividend
  6318  0006FA  C0C5  F06E         	movff	sprintf@_val+1,___llmod@dividend+1
  6319  0006FE  C0C6  F06F         	movff	sprintf@_val+2,___llmod@dividend+2
  6320  000702  C0C7  F070         	movff	sprintf@_val+3,___llmod@dividend+3
  6321  000706  0100               	movlb	0	; () banked
  6322  000708  51CE               	movf	sprintf@c& (0+255),w,b
  6323  00070A  0D04               	mullw	4
  6324  00070C  0E9D               	movlw	low _dpowers
  6325  00070E  24F3               	addwf	prodl,w,c
  6326  000710  6EF6               	movwf	tblptrl,c
  6327  000712  0E7E               	movlw	high _dpowers
  6328  000714  20F4               	addwfc	prodh,w,c
  6329  000716  6EF7               	movwf	tblptrh,c
  6330  000718                     	if	1	;There are 3 active tblptr bytes
  6331  000718  6AF8               	clrf	tblptru,c
  6332  00071A  0E00               	movlw	low (__mediumconst shr (0+16))
  6333  00071C  22F8               	addwfc	tblptru,f,c
  6334  00071E                     	endif
  6335  00071E  0009               	tblrd		*+
  6336  000720  0100               	movlb	0	; () banked
  6337  000722  CFF5 F071          	movff	tablat,___llmod@divisor
  6338  000726  0009               	tblrd		*+
  6339  000728  0100               	movlb	0	; () banked
  6340  00072A  CFF5 F072          	movff	tablat,___llmod@divisor+1
  6341  00072E  0009               	tblrd		*+
  6342  000730  0100               	movlb	0	; () banked
  6343  000732  CFF5 F073          	movff	tablat,___llmod@divisor+2
  6344  000736  000A               	tblrd		*-
  6345  000738  0100               	movlb	0	; () banked
  6346  00073A  CFF5 F074          	movff	tablat,___llmod@divisor+3
  6347  00073E  EC42  F014         	call	___llmod	;wreg free
  6348  000742  C06D  F0C4         	movff	?___llmod,sprintf@_val
  6349  000746  C06E  F0C5         	movff	?___llmod+1,sprintf@_val+1
  6350  00074A  C06F  F0C6         	movff	?___llmod+2,sprintf@_val+2
  6351  00074E  C070  F0C7         	movff	?___llmod+3,sprintf@_val+3
  6352  000752                     l3940:
  6353  000752  0100               	movlb	0	; () banked
  6354  000754  07CE               	decf	sprintf@c& (0+255),f,b
  6355  000756  0100               	movlb	0	; () banked
  6356  000758  29CE               	incf	sprintf@c& (0+255),w,b
  6357  00075A  B4D8               	btfsc	status,2,c
  6358  00075C  D00E               	goto	l3948
  6359  00075E  D774               	goto	l3930
  6360  000760                     l3942:
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  6364  000760  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6365  000764  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6366  000768  0E30               	movlw	48
  6367  00076A  6EDF               	movwf	indf2,c
  6368                           
  6369                           ; BSR set to: 0
  6370  00076C  0100               	movlb	0	; () banked
  6371  00076E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6372  000770  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;doprnt.c: 1246: prec--;
  6376  000772  0100               	movlb	0	; () banked
  6377  000774  07C2               	decf	sprintf@prec& (0+255),f,b
  6378  000776  A0D8               	btfss	status,0,c
  6379  000778  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6380  00077A                     l3948:
  6381                           
  6382                           ; BSR set to: 0
  6383  00077A  0100               	movlb	0	; () banked
  6384  00077C  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6385  00077E  11C2               	iorwf	sprintf@prec& (0+255),w,b
  6386  000780  B4D8               	btfsc	status,2,c
  6387  000782  D0F2               	goto	l3990
  6388  000784  D7ED               	goto	l3942
  6389  000786                     l3950:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 1255: }
  6393                           ;doprnt.c: 1262: {
  6394                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6395  000786  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  6396  00078A  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  6397  00078E  0100               	movlb	0	; () banked
  6398  000790  CFDE F0C4          	movff	postinc2,sprintf@_val
  6399  000794  0100               	movlb	0	; () banked
  6400  000796  CFDD F0C5          	movff	postdec2,sprintf@_val+1
  6401  00079A  0100               	movlb	0	; () banked
  6402  00079C  0E00               	movlw	0
  6403  00079E  0100               	movlb	0	; () banked
  6404  0007A0  BFC5               	btfsc	(sprintf@_val+1)& (0+255),7,b
  6405  0007A2  0EFF               	movlw	-1
  6406  0007A4  0100               	movlb	0	; () banked
  6407  0007A6  6FC6               	movwf	(sprintf@_val+2)& (0+255),b
  6408  0007A8  0100               	movlb	0	; () banked
  6409  0007AA  6FC7               	movwf	(sprintf@_val+3)& (0+255),b
  6410                           
  6411                           ; BSR set to: 0
  6412  0007AC  0E02               	movlw	2
  6413  0007AE  0100               	movlb	0	; () banked
  6414  0007B0  27BB               	addwf	sprintf@ap& (0+255),f,b
  6415  0007B2  0E00               	movlw	0
  6416  0007B4  0100               	movlb	0	; () banked
  6417  0007B6  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  6421  0007B8  0100               	movlb	0	; () banked
  6422  0007BA  51C7               	movf	(sprintf@_val+3)& (0+255),w,b
  6423  0007BC  0A80               	xorlw	128
  6424  0007BE  0F80               	addlw	128
  6425  0007C0  E10B               	bnz	u4005
  6426  0007C2  0E00               	movlw	0
  6427  0007C4  0100               	movlb	0	; () banked
  6428  0007C6  5DC6               	subwf	(sprintf@_val+2)& (0+255),w,b
  6429  0007C8  E107               	bnz	u4005
  6430  0007CA  0E00               	movlw	0
  6431  0007CC  0100               	movlb	0	; () banked
  6432  0007CE  5DC5               	subwf	(sprintf@_val+1)& (0+255),w,b
  6433  0007D0  E103               	bnz	u4005
  6434  0007D2  0E00               	movlw	0
  6435  0007D4  0100               	movlb	0	; () banked
  6436  0007D6  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6437  0007D8                     u4005:
  6438  0007D8  B0D8               	btfsc	status,0,c
  6439  0007DA  D012               	goto	l3960
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;doprnt.c: 1271: flag |= 0x03;
  6443  0007DC  0E03               	movlw	3
  6444  0007DE  0100               	movlb	0	; () banked
  6445  0007E0  13BD               	iorwf	sprintf@flag& (0+255),f,b
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;doprnt.c: 1272: _val._val = -_val._val;
  6449  0007E2  0100               	movlb	0	; () banked
  6450  0007E4  1FC7               	comf	(sprintf@_val+3)& (0+255),f,b
  6451  0007E6  0100               	movlb	0	; () banked
  6452  0007E8  1FC6               	comf	(sprintf@_val+2)& (0+255),f,b
  6453  0007EA  0100               	movlb	0	; () banked
  6454  0007EC  1FC5               	comf	(sprintf@_val+1)& (0+255),f,b
  6455  0007EE  0100               	movlb	0	; () banked
  6456  0007F0  6DC4               	negf	sprintf@_val& (0+255),b
  6457  0007F2  0E00               	movlw	0
  6458  0007F4  0100               	movlb	0	; () banked
  6459  0007F6  23C5               	addwfc	(sprintf@_val+1)& (0+255),f,b
  6460  0007F8  0100               	movlb	0	; () banked
  6461  0007FA  23C6               	addwfc	(sprintf@_val+2)& (0+255),f,b
  6462  0007FC  0100               	movlb	0	; () banked
  6463  0007FE  23C7               	addwfc	(sprintf@_val+3)& (0+255),f,b
  6464  000800                     l3960:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;doprnt.c: 1273: }
  6468                           ;doprnt.c: 1275: }
  6469                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6470  000800  0E01               	movlw	1
  6471  000802  0100               	movlb	0	; () banked
  6472  000804  6FCE               	movwf	sprintf@c& (0+255),b
  6473  000806                     
  6474                           ; BSR set to: 0
  6475  000806  0100               	movlb	0	; () banked
  6476  000808  51CE               	movf	sprintf@c& (0+255),w,b
  6477  00080A  0A0A               	xorlw	10
  6478  00080C  B4D8               	btfsc	status,2,c
  6479  00080E  D021               	goto	l3974
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  6483                           
  6484                           ; BSR set to: 0
  6485                           
  6486                           ; BSR set to: 0
  6487  000810  0100               	movlb	0	; () banked
  6488  000812  51CE               	movf	sprintf@c& (0+255),w,b
  6489  000814  0D04               	mullw	4
  6490  000816  0E9D               	movlw	low _dpowers
  6491  000818  24F3               	addwf	prodl,w,c
  6492  00081A  6EF6               	movwf	tblptrl,c
  6493  00081C  0E7E               	movlw	high _dpowers
  6494  00081E  20F4               	addwfc	prodh,w,c
  6495  000820  6EF7               	movwf	tblptrh,c
  6496  000822                     	if	1	;There are 3 active tblptr bytes
  6497  000822  6AF8               	clrf	tblptru,c
  6498  000824  0E00               	movlw	low (__mediumconst shr (0+16))
  6499  000826  22F8               	addwfc	tblptru,f,c
  6500  000828                     	endif
  6501  000828  0009               	tblrd		*+
  6502  00082A  50F5               	movf	tablat,w,c
  6503  00082C  0100               	movlb	0	; () banked
  6504  00082E  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6505  000830  0009               	tblrd		*+
  6506  000832  50F5               	movf	tablat,w,c
  6507  000834  0100               	movlb	0	; () banked
  6508  000836  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6509  000838  0009               	tblrd		*+
  6510  00083A  50F5               	movf	tablat,w,c
  6511  00083C  0100               	movlb	0	; () banked
  6512  00083E  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6513  000840  0009               	tblrd		*+
  6514  000842  50F5               	movf	tablat,w,c
  6515  000844  0100               	movlb	0	; () banked
  6516  000846  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6517  000848  A0D8               	btfss	status,0,c
  6518  00084A  D003               	goto	l3974
  6519                           
  6520                           ; BSR set to: 0
  6521                           
  6522                           ; BSR set to: 0
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;doprnt.c: 1316: break;
  6526  00084C  0100               	movlb	0	; () banked
  6527  00084E  2BCE               	incf	sprintf@c& (0+255),f,b
  6528  000850  D7DA               	goto	L11
  6529  000852                     l3974:
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;doprnt.c: 1431: {
  6533                           ;doprnt.c: 1447: if(flag & 0x03)
  6534  000852  0E03               	movlw	3
  6535  000854  0100               	movlb	0	; () banked
  6536  000856  15BD               	andwf	sprintf@flag& (0+255),w,b
  6537  000858  0100               	movlb	0	; () banked
  6538  00085A  6FA6               	movwf	??_sprintf& (0+255),b
  6539  00085C  0E00               	movlw	0
  6540  00085E  0100               	movlb	0	; () banked
  6541  000860  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6542  000862  0100               	movlb	0	; () banked
  6543  000864  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  6544  000866  0100               	movlb	0	; () banked
  6545  000868  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  6546  00086A  11A6               	iorwf	??_sprintf& (0+255),w,b
  6547  00086C  B4D8               	btfsc	status,2,c
  6548  00086E  D009               	goto	l3980
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6552  000870  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6553  000874  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6554  000878  0E2D               	movlw	45
  6555  00087A  6EDF               	movwf	indf2,c
  6556                           
  6557                           ; BSR set to: 0
  6558  00087C  0100               	movlb	0	; () banked
  6559  00087E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6560  000880  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6561  000882                     l3980:
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;doprnt.c: 1478: }
  6565                           ;doprnt.c: 1481: prec = c;
  6566  000882  0100               	movlb	0	; () banked
  6567  000884  51CE               	movf	sprintf@c& (0+255),w,b
  6568  000886  0100               	movlb	0	; () banked
  6569  000888  6FC2               	movwf	sprintf@prec& (0+255),b
  6570  00088A  0100               	movlb	0	; () banked
  6571  00088C  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  6572  00088E  0100               	movlb	0	; () banked
  6573  000890  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  6574  000892  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6575                           
  6576                           ;doprnt.c: 1483: while(prec--) {
  6577  000894  D05F               	goto	l3988
  6578  000896                     l3982:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;doprnt.c: 1487: {
  6582                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6583  000896  0100               	movlb	0	; () banked
  6584  000898  C0C2  F0A6         	movff	sprintf@prec,??_sprintf
  6585  00089C  0100               	movlb	0	; () banked
  6586  00089E  C0C3  F0A7         	movff	sprintf@prec+1,??_sprintf+1
  6587  0008A2  0100               	movlb	0	; () banked
  6588  0008A4  90D8               	bcf	status,0,c
  6589  0008A6  37A6               	rlcf	??_sprintf& (0+255),f,b
  6590  0008A8  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6591  0008AA  0100               	movlb	0	; () banked
  6592  0008AC  90D8               	bcf	status,0,c
  6593  0008AE  37A6               	rlcf	??_sprintf& (0+255),f,b
  6594  0008B0  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6595  0008B2  0E9D               	movlw	low _dpowers
  6596  0008B4  0100               	movlb	0	; () banked
  6597  0008B6  25A6               	addwf	??_sprintf& (0+255),w,b
  6598  0008B8  6EF6               	movwf	tblptrl,c
  6599  0008BA  0E7E               	movlw	high _dpowers
  6600  0008BC  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  6601  0008BE  6EF7               	movwf	tblptrh,c
  6602  0008C0                     	if	1	;There are 3 active tblptr bytes
  6603  0008C0  6AF8               	clrf	tblptru,c
  6604  0008C2  0E00               	movlw	low (__mediumconst shr (0+16))
  6605  0008C4  22F8               	addwfc	tblptru,f,c
  6606  0008C6                     	endif
  6607  0008C6  0009               	tblrd		*+
  6608  0008C8  0100               	movlb	0	; () banked
  6609  0008CA  CFF5 F064          	movff	tablat,___lldiv@divisor
  6610  0008CE  0009               	tblrd		*+
  6611  0008D0  0100               	movlb	0	; () banked
  6612  0008D2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6613  0008D6  0009               	tblrd		*+
  6614  0008D8  0100               	movlb	0	; () banked
  6615  0008DA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6616  0008DE  000A               	tblrd		*-
  6617  0008E0  0100               	movlb	0	; () banked
  6618  0008E2  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6619  0008E6  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6620  0008EA  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6621  0008EE  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6622  0008F2  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6623  0008F6  ECC5  F010         	call	___lldiv	;wreg free
  6624  0008FA  C060  F06D         	movff	?___lldiv,___llmod@dividend
  6625  0008FE  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  6626  000902  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  6627  000906  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  6628  00090A  0E0A               	movlw	10
  6629  00090C  0100               	movlb	0	; () banked
  6630  00090E  6F71               	movwf	___llmod@divisor& (0+255),b
  6631  000910  0E00               	movlw	0
  6632  000912  0100               	movlb	0	; () banked
  6633  000914  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6634  000916  0E00               	movlw	0
  6635  000918  0100               	movlb	0	; () banked
  6636  00091A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6637  00091C  0E00               	movlw	0
  6638  00091E  0100               	movlb	0	; () banked
  6639  000920  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6640  000922  EC42  F014         	call	___llmod	;wreg free
  6641  000926  C06D  F0A8         	movff	?___llmod,??_sprintf+2
  6642  00092A  C06E  F0A9         	movff	?___llmod+1,??_sprintf+3
  6643  00092E  C06F  F0AA         	movff	?___llmod+2,??_sprintf+4
  6644  000932  C070  F0AB         	movff	?___llmod+3,??_sprintf+5
  6645  000936  0100               	movlb	0	; () banked
  6646  000938  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  6647  00093A  0F30               	addlw	48
  6648  00093C  0100               	movlb	0	; () banked
  6649  00093E  6FCE               	movwf	sprintf@c& (0+255),b
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;doprnt.c: 1532: }
  6653                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6654  000940  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6655  000944  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6656  000948  0100               	movlb	0	; () banked
  6657  00094A  C0CE  FFDF         	movff	sprintf@c,indf2
  6658                           
  6659                           ; BSR set to: 0
  6660  00094E  0100               	movlb	0	; () banked
  6661  000950  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6662  000952  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6663  000954                     l3988:
  6664                           
  6665                           ; BSR set to: 0
  6666  000954  0100               	movlb	0	; () banked
  6667  000956  07C2               	decf	sprintf@prec& (0+255),f,b
  6668  000958  A0D8               	btfss	status,0,c
  6669  00095A  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6670  00095C  0100               	movlb	0	; () banked
  6671  00095E  29C2               	incf	sprintf@prec& (0+255),w,b
  6672  000960  B4D8               	btfsc	status,2,c
  6673  000962  29C3               	incf	(sprintf@prec+1)& (0+255),w,b
  6674  000964  A4D8               	btfss	status,2,c
  6675  000966  D797               	goto	l3982
  6676  000968                     l3990:
  6677                           
  6678                           ; BSR set to: 0
  6679  000968  0100               	movlb	0	; () banked
  6680  00096A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  6681  00096E  0100               	movlb	0	; () banked
  6682  000970  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  6683  000974  0100               	movlb	0	; () banked
  6684  000976  4BA1               	infsnz	sprintf@f& (0+255),f,b
  6685  000978  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  6686  00097A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6687  00097A  6AF8               	clrf	tblptru,c
  6688  00097C                     	endif
  6689  00097C                     	if	0	;tblptru may be non-zero
  6690  00097C                     	endif
  6691  00097C  0008               	tblrd		*
  6692  00097E  0100               	movlb	0	; () banked
  6693  000980  CFF5 F0CE          	movff	tablat,sprintf@c
  6694  000984  0100               	movlb	0	; () banked
  6695  000986  67CE               	tstfsz	sprintf@c& (0+255),b
  6696  000988  EF18  F000         	goto	l3788
  6697  00098C                     l3992:
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;doprnt.c: 1547: *sp = 0;
  6701  00098C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6702  000990  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6703  000994  0E00               	movlw	0
  6704  000996  6EDF               	movwf	indf2,c
  6705                           
  6706                           ; BSR set to: 0
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;doprnt.c: 1549: return 0;
  6710                           ;	Return value of _sprintf is never used
  6711  000998  0012               	return	
  6712  00099A                     __end_of_sprintf:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           intcon2	equ	0xFF1
  6722                           intcon3	equ	0xFF0
  6723                           indf0	equ	0xFEF
  6724                           postinc0	equ	0xFEE
  6725                           fsr0h	equ	0xFEA
  6726                           fsr0l	equ	0xFE9
  6727                           wreg	equ	0xFE8
  6728                           postinc1	equ	0xFE6
  6729                           postdec1	equ	0xFE5
  6730                           fsr1l	equ	0xFE1
  6731                           indf2	equ	0xFDF
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _scale *****************
  6739 ;; Defined at:
  6740 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  scl             1    wreg     char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  scl             1   41[BANK0 ] char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  3   35[BANK0 ] char 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6754 ;;      Params:         0       3       0       0       0       0       0       0       0
  6755 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6757 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6758 ;;Total ram usage:        7 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    6
  6761 ;; This function calls:
  6762 ;;		___awdiv
  6763 ;;		___awmod
  6764 ;;		___ftmul
  6765 ;;		___wmul
  6766 ;; This function is called by:
  6767 ;;		_sprintf
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text30
  6772  00099A                     __ptext30:
  6773                           	opt stack 0
  6774  00099A                     _scale:
  6775                           	opt stack 21
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;incstack = 0
  6779                           ;scale@scl stored from wreg
  6780  00099A  0100               	movlb	0	; () banked
  6781  00099C  6F89               	movwf	scale@scl& (0+255),b
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;doprnt.c: 428: if(scl < 0) {
  6785  00099E  0100               	movlb	0	; () banked
  6786  0009A0  AF89               	btfss	scale@scl& (0+255),7,b
  6787  0009A2  D152               	goto	l3520
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;doprnt.c: 429: scl = -scl;
  6791  0009A4  0100               	movlb	0	; () banked
  6792  0009A6  6D89               	negf	scale@scl& (0+255),b
  6793                           
  6794                           ;doprnt.c: 430: if(scl>=110)
  6795  0009A8  0100               	movlb	0	; () banked
  6796  0009AA  5189               	movf	scale@scl& (0+255),w,b
  6797  0009AC  0A80               	xorlw	128
  6798  0009AE  0F12               	addlw	-238
  6799  0009B0  A0D8               	btfss	status,0,c
  6800  0009B2  D0C9               	goto	l3510
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6804  0009B4  0E00               	movlw	0
  6805  0009B6  0100               	movlb	0	; () banked
  6806  0009B8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6807  0009BA  0E03               	movlw	3
  6808  0009BC  0100               	movlb	0	; () banked
  6809  0009BE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6810  0009C0  0E00               	movlw	0
  6811  0009C2  0100               	movlb	0	; () banked
  6812  0009C4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6813  0009C6  0E0A               	movlw	10
  6814  0009C8  0100               	movlb	0	; () banked
  6815  0009CA  6F68               	movwf	___awdiv@divisor& (0+255),b
  6816  0009CC  0E00               	movlw	0
  6817  0009CE  0100               	movlb	0	; () banked
  6818  0009D0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6819  0009D2  0E64               	movlw	100
  6820  0009D4  0100               	movlb	0	; () banked
  6821  0009D6  6F62               	movwf	___awmod@divisor& (0+255),b
  6822  0009D8  0100               	movlb	0	; () banked
  6823  0009DA  5189               	movf	scale@scl& (0+255),w,b
  6824  0009DC  0100               	movlb	0	; () banked
  6825  0009DE  6F60               	movwf	___awmod@dividend& (0+255),b
  6826  0009E0  0100               	movlb	0	; () banked
  6827  0009E2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6828  0009E4  0100               	movlb	0	; () banked
  6829  0009E6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6830  0009E8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6831  0009EA  ECCD  F012         	call	___awmod	;wreg free
  6832  0009EE  0100               	movlb	0	; () banked
  6833  0009F0  C060  F066         	movff	?___awmod,___awdiv@dividend
  6834  0009F4  0100               	movlb	0	; () banked
  6835  0009F6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  6836  0009FA  EC54  F010         	call	___awdiv	;wreg free
  6837  0009FE  0E09               	movlw	9
  6838  000A00  0100               	movlb	0	; () banked
  6839  000A02  2566               	addwf	?___awdiv& (0+255),w,b
  6840  000A04  0100               	movlb	0	; () banked
  6841  000A06  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6842  000A08  0E00               	movlw	0
  6843  000A0A  0100               	movlb	0	; () banked
  6844  000A0C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6845  000A0E  0100               	movlb	0	; () banked
  6846  000A10  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6847  000A12  EC71  F019         	call	___wmul	;wreg free
  6848  000A16  0EC5               	movlw	low __npowers_
  6849  000A18  0100               	movlb	0	; () banked
  6850  000A1A  256E               	addwf	?___wmul& (0+255),w,b
  6851  000A1C  6EF6               	movwf	tblptrl,c
  6852  000A1E  0E7E               	movlw	high __npowers_
  6853  000A20  0100               	movlb	0	; () banked
  6854  000A22  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6855  000A24  6EF7               	movwf	tblptrh,c
  6856  000A26                     	if	1	;There are 3 active tblptr bytes
  6857  000A26  6AF8               	clrf	tblptru,c
  6858  000A28  0E00               	movlw	low (__mediumconst shr (0+16))
  6859  000A2A  22F8               	addwfc	tblptru,f,c
  6860  000A2C                     	endif
  6861  000A2C  0009               	tblrd		*+
  6862  000A2E  0100               	movlb	0	; () banked
  6863  000A30  CFF5 F077          	movff	tablat,___ftmul@f2
  6864  000A34  0009               	tblrd		*+
  6865  000A36  0100               	movlb	0	; () banked
  6866  000A38  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6867  000A3C  000A               	tblrd		*-
  6868  000A3E  0100               	movlb	0	; () banked
  6869  000A40  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6870  000A44  0E00               	movlw	0
  6871  000A46  0100               	movlb	0	; () banked
  6872  000A48  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6873  000A4A  0E64               	movlw	100
  6874  000A4C  0100               	movlb	0	; () banked
  6875  000A4E  6F68               	movwf	___awdiv@divisor& (0+255),b
  6876  000A50  0100               	movlb	0	; () banked
  6877  000A52  5189               	movf	scale@scl& (0+255),w,b
  6878  000A54  0100               	movlb	0	; () banked
  6879  000A56  6F66               	movwf	___awdiv@dividend& (0+255),b
  6880  000A58  0100               	movlb	0	; () banked
  6881  000A5A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  6882  000A5C  0100               	movlb	0	; () banked
  6883  000A5E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  6884  000A60  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6885  000A62  EC54  F010         	call	___awdiv	;wreg free
  6886  000A66  0E12               	movlw	18
  6887  000A68  0100               	movlb	0	; () banked
  6888  000A6A  2566               	addwf	?___awdiv& (0+255),w,b
  6889  000A6C  0100               	movlb	0	; () banked
  6890  000A6E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6891  000A70  0E00               	movlw	0
  6892  000A72  0100               	movlb	0	; () banked
  6893  000A74  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6894  000A76  0100               	movlb	0	; () banked
  6895  000A78  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6896  000A7A  0E00               	movlw	0
  6897  000A7C  0100               	movlb	0	; () banked
  6898  000A7E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6899  000A80  0E03               	movlw	3
  6900  000A82  0100               	movlb	0	; () banked
  6901  000A84  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6902  000A86  EC71  F019         	call	___wmul	;wreg free
  6903  000A8A  0EC5               	movlw	low __npowers_
  6904  000A8C  0100               	movlb	0	; () banked
  6905  000A8E  256E               	addwf	?___wmul& (0+255),w,b
  6906  000A90  6EF6               	movwf	tblptrl,c
  6907  000A92  0E7E               	movlw	high __npowers_
  6908  000A94  0100               	movlb	0	; () banked
  6909  000A96  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6910  000A98  6EF7               	movwf	tblptrh,c
  6911  000A9A                     	if	1	;There are 3 active tblptr bytes
  6912  000A9A  6AF8               	clrf	tblptru,c
  6913  000A9C  0E00               	movlw	low (__mediumconst shr (0+16))
  6914  000A9E  22F8               	addwfc	tblptru,f,c
  6915  000AA0                     	endif
  6916  000AA0  0009               	tblrd		*+
  6917  000AA2  0100               	movlb	0	; () banked
  6918  000AA4  CFF5 F074          	movff	tablat,___ftmul@f1
  6919  000AA8  0009               	tblrd		*+
  6920  000AAA  0100               	movlb	0	; () banked
  6921  000AAC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  6922  000AB0  000A               	tblrd		*-
  6923  000AB2  0100               	movlb	0	; () banked
  6924  000AB4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  6925  000AB8  ECD0  F00C         	call	___ftmul	;wreg free
  6926  000ABC  C074  F086         	movff	?___ftmul,_scale$2886
  6927  000AC0  C075  F087         	movff	?___ftmul+1,_scale$2886+1
  6928  000AC4  C076  F088         	movff	?___ftmul+2,_scale$2886+2
  6929                           
  6930                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6931  000AC8  C086  F074         	movff	_scale$2886,___ftmul@f1
  6932  000ACC  C087  F075         	movff	_scale$2886+1,___ftmul@f1+1
  6933  000AD0  C088  F076         	movff	_scale$2886+2,___ftmul@f1+2
  6934  000AD4  0E00               	movlw	0
  6935  000AD6  0100               	movlb	0	; () banked
  6936  000AD8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6937  000ADA  0E03               	movlw	3
  6938  000ADC  0100               	movlb	0	; () banked
  6939  000ADE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6940  000AE0  0E00               	movlw	0
  6941  000AE2  0100               	movlb	0	; () banked
  6942  000AE4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6943  000AE6  0E0A               	movlw	10
  6944  000AE8  0100               	movlb	0	; () banked
  6945  000AEA  6F62               	movwf	___awmod@divisor& (0+255),b
  6946  000AEC  0100               	movlb	0	; () banked
  6947  000AEE  5189               	movf	scale@scl& (0+255),w,b
  6948  000AF0  0100               	movlb	0	; () banked
  6949  000AF2  6F60               	movwf	___awmod@dividend& (0+255),b
  6950  000AF4  0100               	movlb	0	; () banked
  6951  000AF6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6952  000AF8  0100               	movlb	0	; () banked
  6953  000AFA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6954  000AFC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6955  000AFE  ECCD  F012         	call	___awmod	;wreg free
  6956  000B02  0100               	movlb	0	; () banked
  6957  000B04  C060  F06E         	movff	?___awmod,___wmul@multiplier
  6958  000B08  0100               	movlb	0	; () banked
  6959  000B0A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  6960  000B0E  EC71  F019         	call	___wmul	;wreg free
  6961  000B12  0EC5               	movlw	low __npowers_
  6962  000B14  0100               	movlb	0	; () banked
  6963  000B16  256E               	addwf	?___wmul& (0+255),w,b
  6964  000B18  6EF6               	movwf	tblptrl,c
  6965  000B1A  0E7E               	movlw	high __npowers_
  6966  000B1C  0100               	movlb	0	; () banked
  6967  000B1E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6968  000B20  6EF7               	movwf	tblptrh,c
  6969  000B22                     	if	1	;There are 3 active tblptr bytes
  6970  000B22  6AF8               	clrf	tblptru,c
  6971  000B24  0E00               	movlw	low (__mediumconst shr (0+16))
  6972  000B26  22F8               	addwfc	tblptru,f,c
  6973  000B28                     	endif
  6974  000B28  0009               	tblrd		*+
  6975  000B2A  0100               	movlb	0	; () banked
  6976  000B2C  CFF5 F077          	movff	tablat,___ftmul@f2
  6977  000B30  0009               	tblrd		*+
  6978  000B32  0100               	movlb	0	; () banked
  6979  000B34  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6980  000B38  000A               	tblrd		*-
  6981  000B3A  0100               	movlb	0	; () banked
  6982  000B3C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6983  000B40  ECD0  F00C         	call	___ftmul	;wreg free
  6984  000B44  D1C8               	goto	L15
  6985  000B46                     l3510:
  6986                           
  6987                           ;doprnt.c: 432: else if(scl > 10)
  6988  000B46  0100               	movlb	0	; () banked
  6989  000B48  5189               	movf	scale@scl& (0+255),w,b
  6990  000B4A  0A80               	xorlw	128
  6991  000B4C  0F75               	addlw	-139
  6992  000B4E  A0D8               	btfss	status,0,c
  6993  000B50  D073               	goto	l3516
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6997  000B52  0E00               	movlw	0
  6998  000B54  0100               	movlb	0	; () banked
  6999  000B56  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7000  000B58  0E0A               	movlw	10
  7001  000B5A  0100               	movlb	0	; () banked
  7002  000B5C  6F68               	movwf	___awdiv@divisor& (0+255),b
  7003  000B5E  0100               	movlb	0	; () banked
  7004  000B60  5189               	movf	scale@scl& (0+255),w,b
  7005  000B62  0100               	movlb	0	; () banked
  7006  000B64  6F66               	movwf	___awdiv@dividend& (0+255),b
  7007  000B66  0100               	movlb	0	; () banked
  7008  000B68  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7009  000B6A  0100               	movlb	0	; () banked
  7010  000B6C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7011  000B6E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7012  000B70  EC54  F010         	call	___awdiv	;wreg free
  7013  000B74  0E09               	movlw	9
  7014  000B76  0100               	movlb	0	; () banked
  7015  000B78  2566               	addwf	?___awdiv& (0+255),w,b
  7016  000B7A  0100               	movlb	0	; () banked
  7017  000B7C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7018  000B7E  0E00               	movlw	0
  7019  000B80  0100               	movlb	0	; () banked
  7020  000B82  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7021  000B84  0100               	movlb	0	; () banked
  7022  000B86  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7023  000B88  0E00               	movlw	0
  7024  000B8A  0100               	movlb	0	; () banked
  7025  000B8C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7026  000B8E  0E03               	movlw	3
  7027  000B90  0100               	movlb	0	; () banked
  7028  000B92  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7029  000B94  EC71  F019         	call	___wmul	;wreg free
  7030  000B98  0EC5               	movlw	low __npowers_
  7031  000B9A  0100               	movlb	0	; () banked
  7032  000B9C  256E               	addwf	?___wmul& (0+255),w,b
  7033  000B9E  6EF6               	movwf	tblptrl,c
  7034  000BA0  0E7E               	movlw	high __npowers_
  7035  000BA2  0100               	movlb	0	; () banked
  7036  000BA4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7037  000BA6  6EF7               	movwf	tblptrh,c
  7038  000BA8                     	if	1	;There are 3 active tblptr bytes
  7039  000BA8  6AF8               	clrf	tblptru,c
  7040  000BAA  0E00               	movlw	low (__mediumconst shr (0+16))
  7041  000BAC  22F8               	addwfc	tblptru,f,c
  7042  000BAE                     	endif
  7043  000BAE  0009               	tblrd		*+
  7044  000BB0  0100               	movlb	0	; () banked
  7045  000BB2  CFF5 F074          	movff	tablat,___ftmul@f1
  7046  000BB6  0009               	tblrd		*+
  7047  000BB8  0100               	movlb	0	; () banked
  7048  000BBA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7049  000BBE  000A               	tblrd		*-
  7050  000BC0  0100               	movlb	0	; () banked
  7051  000BC2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7052  000BC6  0E00               	movlw	0
  7053  000BC8  0100               	movlb	0	; () banked
  7054  000BCA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7055  000BCC  0E03               	movlw	3
  7056  000BCE  0100               	movlb	0	; () banked
  7057  000BD0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7058  000BD2  0E00               	movlw	0
  7059  000BD4  0100               	movlb	0	; () banked
  7060  000BD6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7061  000BD8  0E0A               	movlw	10
  7062  000BDA  0100               	movlb	0	; () banked
  7063  000BDC  6F62               	movwf	___awmod@divisor& (0+255),b
  7064  000BDE  0100               	movlb	0	; () banked
  7065  000BE0  5189               	movf	scale@scl& (0+255),w,b
  7066  000BE2  0100               	movlb	0	; () banked
  7067  000BE4  6F60               	movwf	___awmod@dividend& (0+255),b
  7068  000BE6  0100               	movlb	0	; () banked
  7069  000BE8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7070  000BEA  0100               	movlb	0	; () banked
  7071  000BEC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7072  000BEE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7073  000BF0  ECCD  F012         	call	___awmod	;wreg free
  7074  000BF4  0100               	movlb	0	; () banked
  7075  000BF6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7076  000BFA  0100               	movlb	0	; () banked
  7077  000BFC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7078  000C00  EC71  F019         	call	___wmul	;wreg free
  7079  000C04  0EC5               	movlw	low __npowers_
  7080  000C06  0100               	movlb	0	; () banked
  7081  000C08  256E               	addwf	?___wmul& (0+255),w,b
  7082  000C0A  6EF6               	movwf	tblptrl,c
  7083  000C0C  0E7E               	movlw	high __npowers_
  7084  000C0E  0100               	movlb	0	; () banked
  7085  000C10  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7086  000C12  6EF7               	movwf	tblptrh,c
  7087  000C14                     	if	1	;There are 3 active tblptr bytes
  7088  000C14  6AF8               	clrf	tblptru,c
  7089  000C16  0E00               	movlw	low (__mediumconst shr (0+16))
  7090  000C18  22F8               	addwfc	tblptru,f,c
  7091  000C1A                     	endif
  7092  000C1A  0009               	tblrd		*+
  7093  000C1C  0100               	movlb	0	; () banked
  7094  000C1E  CFF5 F077          	movff	tablat,___ftmul@f2
  7095  000C22  0009               	tblrd		*+
  7096  000C24  0100               	movlb	0	; () banked
  7097  000C26  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7098  000C2A  000A               	tblrd		*-
  7099  000C2C  0100               	movlb	0	; () banked
  7100  000C2E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7101  000C32  ECD0  F00C         	call	___ftmul	;wreg free
  7102  000C36  D14F               	goto	L15
  7103  000C38                     l3516:
  7104                           
  7105                           ;doprnt.c: 434: return _npowers_[scl];
  7106  000C38  0100               	movlb	0	; () banked
  7107  000C3A  5189               	movf	scale@scl& (0+255),w,b
  7108  000C3C  0D03               	mullw	3
  7109  000C3E  0EC5               	movlw	low __npowers_
  7110  000C40  24F3               	addwf	prodl,w,c
  7111  000C42  6EF6               	movwf	tblptrl,c
  7112  000C44  0E7E               	movlw	high __npowers_
  7113  000C46  D155               	goto	L14
  7114  000C48                     l3520:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;doprnt.c: 435: }
  7118                           ;doprnt.c: 436: if(scl>=110)
  7119  000C48  0100               	movlb	0	; () banked
  7120  000C4A  5189               	movf	scale@scl& (0+255),w,b
  7121  000C4C  0A80               	xorlw	128
  7122  000C4E  0F12               	addlw	-238
  7123  000C50  A0D8               	btfss	status,0,c
  7124  000C52  D0C9               	goto	l3528
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7128  000C54  0E00               	movlw	0
  7129  000C56  0100               	movlb	0	; () banked
  7130  000C58  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7131  000C5A  0E03               	movlw	3
  7132  000C5C  0100               	movlb	0	; () banked
  7133  000C5E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7134  000C60  0E00               	movlw	0
  7135  000C62  0100               	movlb	0	; () banked
  7136  000C64  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7137  000C66  0E0A               	movlw	10
  7138  000C68  0100               	movlb	0	; () banked
  7139  000C6A  6F68               	movwf	___awdiv@divisor& (0+255),b
  7140  000C6C  0E00               	movlw	0
  7141  000C6E  0100               	movlb	0	; () banked
  7142  000C70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7143  000C72  0E64               	movlw	100
  7144  000C74  0100               	movlb	0	; () banked
  7145  000C76  6F62               	movwf	___awmod@divisor& (0+255),b
  7146  000C78  0100               	movlb	0	; () banked
  7147  000C7A  5189               	movf	scale@scl& (0+255),w,b
  7148  000C7C  0100               	movlb	0	; () banked
  7149  000C7E  6F60               	movwf	___awmod@dividend& (0+255),b
  7150  000C80  0100               	movlb	0	; () banked
  7151  000C82  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7152  000C84  0100               	movlb	0	; () banked
  7153  000C86  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7154  000C88  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7155  000C8A  ECCD  F012         	call	___awmod	;wreg free
  7156  000C8E  0100               	movlb	0	; () banked
  7157  000C90  C060  F066         	movff	?___awmod,___awdiv@dividend
  7158  000C94  0100               	movlb	0	; () banked
  7159  000C96  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7160  000C9A  EC54  F010         	call	___awdiv	;wreg free
  7161  000C9E  0E09               	movlw	9
  7162  000CA0  0100               	movlb	0	; () banked
  7163  000CA2  2566               	addwf	?___awdiv& (0+255),w,b
  7164  000CA4  0100               	movlb	0	; () banked
  7165  000CA6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7166  000CA8  0E00               	movlw	0
  7167  000CAA  0100               	movlb	0	; () banked
  7168  000CAC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7169  000CAE  0100               	movlb	0	; () banked
  7170  000CB0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7171  000CB2  EC71  F019         	call	___wmul	;wreg free
  7172  000CB6  0EEC               	movlw	low __powers_
  7173  000CB8  0100               	movlb	0	; () banked
  7174  000CBA  256E               	addwf	?___wmul& (0+255),w,b
  7175  000CBC  6EF6               	movwf	tblptrl,c
  7176  000CBE  0E7E               	movlw	high __powers_
  7177  000CC0  0100               	movlb	0	; () banked
  7178  000CC2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7179  000CC4  6EF7               	movwf	tblptrh,c
  7180  000CC6                     	if	1	;There are 3 active tblptr bytes
  7181  000CC6  6AF8               	clrf	tblptru,c
  7182  000CC8  0E00               	movlw	low (__mediumconst shr (0+16))
  7183  000CCA  22F8               	addwfc	tblptru,f,c
  7184  000CCC                     	endif
  7185  000CCC  0009               	tblrd		*+
  7186  000CCE  0100               	movlb	0	; () banked
  7187  000CD0  CFF5 F077          	movff	tablat,___ftmul@f2
  7188  000CD4  0009               	tblrd		*+
  7189  000CD6  0100               	movlb	0	; () banked
  7190  000CD8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7191  000CDC  000A               	tblrd		*-
  7192  000CDE  0100               	movlb	0	; () banked
  7193  000CE0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7194  000CE4  0E00               	movlw	0
  7195  000CE6  0100               	movlb	0	; () banked
  7196  000CE8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7197  000CEA  0E64               	movlw	100
  7198  000CEC  0100               	movlb	0	; () banked
  7199  000CEE  6F68               	movwf	___awdiv@divisor& (0+255),b
  7200  000CF0  0100               	movlb	0	; () banked
  7201  000CF2  5189               	movf	scale@scl& (0+255),w,b
  7202  000CF4  0100               	movlb	0	; () banked
  7203  000CF6  6F66               	movwf	___awdiv@dividend& (0+255),b
  7204  000CF8  0100               	movlb	0	; () banked
  7205  000CFA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7206  000CFC  0100               	movlb	0	; () banked
  7207  000CFE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7208  000D00  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7209  000D02  EC54  F010         	call	___awdiv	;wreg free
  7210  000D06  0E12               	movlw	18
  7211  000D08  0100               	movlb	0	; () banked
  7212  000D0A  2566               	addwf	?___awdiv& (0+255),w,b
  7213  000D0C  0100               	movlb	0	; () banked
  7214  000D0E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7215  000D10  0E00               	movlw	0
  7216  000D12  0100               	movlb	0	; () banked
  7217  000D14  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7218  000D16  0100               	movlb	0	; () banked
  7219  000D18  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7220  000D1A  0E00               	movlw	0
  7221  000D1C  0100               	movlb	0	; () banked
  7222  000D1E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7223  000D20  0E03               	movlw	3
  7224  000D22  0100               	movlb	0	; () banked
  7225  000D24  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7226  000D26  EC71  F019         	call	___wmul	;wreg free
  7227  000D2A  0EEC               	movlw	low __powers_
  7228  000D2C  0100               	movlb	0	; () banked
  7229  000D2E  256E               	addwf	?___wmul& (0+255),w,b
  7230  000D30  6EF6               	movwf	tblptrl,c
  7231  000D32  0E7E               	movlw	high __powers_
  7232  000D34  0100               	movlb	0	; () banked
  7233  000D36  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7234  000D38  6EF7               	movwf	tblptrh,c
  7235  000D3A                     	if	1	;There are 3 active tblptr bytes
  7236  000D3A  6AF8               	clrf	tblptru,c
  7237  000D3C  0E00               	movlw	low (__mediumconst shr (0+16))
  7238  000D3E  22F8               	addwfc	tblptru,f,c
  7239  000D40                     	endif
  7240  000D40  0009               	tblrd		*+
  7241  000D42  0100               	movlb	0	; () banked
  7242  000D44  CFF5 F074          	movff	tablat,___ftmul@f1
  7243  000D48  0009               	tblrd		*+
  7244  000D4A  0100               	movlb	0	; () banked
  7245  000D4C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7246  000D50  000A               	tblrd		*-
  7247  000D52  0100               	movlb	0	; () banked
  7248  000D54  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7249  000D58  ECD0  F00C         	call	___ftmul	;wreg free
  7250  000D5C  C074  F086         	movff	?___ftmul,_scale$2886
  7251  000D60  C075  F087         	movff	?___ftmul+1,_scale$2886+1
  7252  000D64  C076  F088         	movff	?___ftmul+2,_scale$2886+2
  7253                           
  7254                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7255  000D68  C086  F074         	movff	_scale$2886,___ftmul@f1
  7256  000D6C  C087  F075         	movff	_scale$2886+1,___ftmul@f1+1
  7257  000D70  C088  F076         	movff	_scale$2886+2,___ftmul@f1+2
  7258  000D74  0E00               	movlw	0
  7259  000D76  0100               	movlb	0	; () banked
  7260  000D78  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7261  000D7A  0E03               	movlw	3
  7262  000D7C  0100               	movlb	0	; () banked
  7263  000D7E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7264  000D80  0E00               	movlw	0
  7265  000D82  0100               	movlb	0	; () banked
  7266  000D84  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7267  000D86  0E0A               	movlw	10
  7268  000D88  0100               	movlb	0	; () banked
  7269  000D8A  6F62               	movwf	___awmod@divisor& (0+255),b
  7270  000D8C  0100               	movlb	0	; () banked
  7271  000D8E  5189               	movf	scale@scl& (0+255),w,b
  7272  000D90  0100               	movlb	0	; () banked
  7273  000D92  6F60               	movwf	___awmod@dividend& (0+255),b
  7274  000D94  0100               	movlb	0	; () banked
  7275  000D96  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7276  000D98  0100               	movlb	0	; () banked
  7277  000D9A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7278  000D9C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7279  000D9E  ECCD  F012         	call	___awmod	;wreg free
  7280  000DA2  0100               	movlb	0	; () banked
  7281  000DA4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7282  000DA8  0100               	movlb	0	; () banked
  7283  000DAA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7284  000DAE  EC71  F019         	call	___wmul	;wreg free
  7285  000DB2  0EEC               	movlw	low __powers_
  7286  000DB4  0100               	movlb	0	; () banked
  7287  000DB6  256E               	addwf	?___wmul& (0+255),w,b
  7288  000DB8  6EF6               	movwf	tblptrl,c
  7289  000DBA  0E7E               	movlw	high __powers_
  7290  000DBC  0100               	movlb	0	; () banked
  7291  000DBE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7292  000DC0  6EF7               	movwf	tblptrh,c
  7293  000DC2                     	if	1	;There are 3 active tblptr bytes
  7294  000DC2  6AF8               	clrf	tblptru,c
  7295  000DC4  0E00               	movlw	low (__mediumconst shr (0+16))
  7296  000DC6  22F8               	addwfc	tblptru,f,c
  7297  000DC8                     	endif
  7298  000DC8  0009               	tblrd		*+
  7299  000DCA  0100               	movlb	0	; () banked
  7300  000DCC  CFF5 F077          	movff	tablat,___ftmul@f2
  7301  000DD0  0009               	tblrd		*+
  7302  000DD2  0100               	movlb	0	; () banked
  7303  000DD4  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7304  000DD8  000A               	tblrd		*-
  7305  000DDA  0100               	movlb	0	; () banked
  7306  000DDC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7307  000DE0  ECD0  F00C         	call	___ftmul	;wreg free
  7308  000DE4  D078               	goto	L15
  7309  000DE6                     l3528:
  7310                           
  7311                           ;doprnt.c: 438: else if(scl > 10)
  7312  000DE6  0100               	movlb	0	; () banked
  7313  000DE8  5189               	movf	scale@scl& (0+255),w,b
  7314  000DEA  0A80               	xorlw	128
  7315  000DEC  0F75               	addlw	-139
  7316  000DEE  A0D8               	btfss	status,0,c
  7317  000DF0  D079               	goto	l3534
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7321  000DF2  0E00               	movlw	0
  7322  000DF4  0100               	movlb	0	; () banked
  7323  000DF6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7324  000DF8  0E0A               	movlw	10
  7325  000DFA  0100               	movlb	0	; () banked
  7326  000DFC  6F68               	movwf	___awdiv@divisor& (0+255),b
  7327  000DFE  0100               	movlb	0	; () banked
  7328  000E00  5189               	movf	scale@scl& (0+255),w,b
  7329  000E02  0100               	movlb	0	; () banked
  7330  000E04  6F66               	movwf	___awdiv@dividend& (0+255),b
  7331  000E06  0100               	movlb	0	; () banked
  7332  000E08  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7333  000E0A  0100               	movlb	0	; () banked
  7334  000E0C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7335  000E0E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7336  000E10  EC54  F010         	call	___awdiv	;wreg free
  7337  000E14  0E09               	movlw	9
  7338  000E16  0100               	movlb	0	; () banked
  7339  000E18  2566               	addwf	?___awdiv& (0+255),w,b
  7340  000E1A  0100               	movlb	0	; () banked
  7341  000E1C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7342  000E1E  0E00               	movlw	0
  7343  000E20  0100               	movlb	0	; () banked
  7344  000E22  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7345  000E24  0100               	movlb	0	; () banked
  7346  000E26  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7347  000E28  0E00               	movlw	0
  7348  000E2A  0100               	movlb	0	; () banked
  7349  000E2C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7350  000E2E  0E03               	movlw	3
  7351  000E30  0100               	movlb	0	; () banked
  7352  000E32  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7353  000E34  EC71  F019         	call	___wmul	;wreg free
  7354  000E38  0EEC               	movlw	low __powers_
  7355  000E3A  0100               	movlb	0	; () banked
  7356  000E3C  256E               	addwf	?___wmul& (0+255),w,b
  7357  000E3E  6EF6               	movwf	tblptrl,c
  7358  000E40  0E7E               	movlw	high __powers_
  7359  000E42  0100               	movlb	0	; () banked
  7360  000E44  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7361  000E46  6EF7               	movwf	tblptrh,c
  7362  000E48                     	if	1	;There are 3 active tblptr bytes
  7363  000E48  6AF8               	clrf	tblptru,c
  7364  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
  7365  000E4C  22F8               	addwfc	tblptru,f,c
  7366  000E4E                     	endif
  7367  000E4E  0009               	tblrd		*+
  7368  000E50  0100               	movlb	0	; () banked
  7369  000E52  CFF5 F074          	movff	tablat,___ftmul@f1
  7370  000E56  0009               	tblrd		*+
  7371  000E58  0100               	movlb	0	; () banked
  7372  000E5A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7373  000E5E  000A               	tblrd		*-
  7374  000E60  0100               	movlb	0	; () banked
  7375  000E62  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7376  000E66  0E00               	movlw	0
  7377  000E68  0100               	movlb	0	; () banked
  7378  000E6A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7379  000E6C  0E03               	movlw	3
  7380  000E6E  0100               	movlb	0	; () banked
  7381  000E70  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7382  000E72  0E00               	movlw	0
  7383  000E74  0100               	movlb	0	; () banked
  7384  000E76  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7385  000E78  0E0A               	movlw	10
  7386  000E7A  0100               	movlb	0	; () banked
  7387  000E7C  6F62               	movwf	___awmod@divisor& (0+255),b
  7388  000E7E  0100               	movlb	0	; () banked
  7389  000E80  5189               	movf	scale@scl& (0+255),w,b
  7390  000E82  0100               	movlb	0	; () banked
  7391  000E84  6F60               	movwf	___awmod@dividend& (0+255),b
  7392  000E86  0100               	movlb	0	; () banked
  7393  000E88  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7394  000E8A  0100               	movlb	0	; () banked
  7395  000E8C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7396  000E8E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7397  000E90  ECCD  F012         	call	___awmod	;wreg free
  7398  000E94  0100               	movlb	0	; () banked
  7399  000E96  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7400  000E9A  0100               	movlb	0	; () banked
  7401  000E9C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7402  000EA0  EC71  F019         	call	___wmul	;wreg free
  7403  000EA4  0EEC               	movlw	low __powers_
  7404  000EA6  0100               	movlb	0	; () banked
  7405  000EA8  256E               	addwf	?___wmul& (0+255),w,b
  7406  000EAA  6EF6               	movwf	tblptrl,c
  7407  000EAC  0E7E               	movlw	high __powers_
  7408  000EAE  0100               	movlb	0	; () banked
  7409  000EB0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7410  000EB2  6EF7               	movwf	tblptrh,c
  7411  000EB4                     	if	1	;There are 3 active tblptr bytes
  7412  000EB4  6AF8               	clrf	tblptru,c
  7413  000EB6  0E00               	movlw	low (__mediumconst shr (0+16))
  7414  000EB8  22F8               	addwfc	tblptru,f,c
  7415  000EBA                     	endif
  7416  000EBA  0009               	tblrd		*+
  7417  000EBC  0100               	movlb	0	; () banked
  7418  000EBE  CFF5 F077          	movff	tablat,___ftmul@f2
  7419  000EC2  0009               	tblrd		*+
  7420  000EC4  0100               	movlb	0	; () banked
  7421  000EC6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7422  000ECA  000A               	tblrd		*-
  7423  000ECC  0100               	movlb	0	; () banked
  7424  000ECE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7425  000ED2  ECD0  F00C         	call	___ftmul	;wreg free
  7426  000ED6                     L15:
  7427  000ED6  C074  F083         	movff	?___ftmul,?_scale
  7428  000EDA  C075  F084         	movff	?___ftmul+1,?_scale+1
  7429  000EDE  C076  F085         	movff	?___ftmul+2,?_scale+2
  7430  000EE2  D018               	goto	l509
  7431  000EE4                     l3534:
  7432                           
  7433                           ;doprnt.c: 440: return _powers_[scl];
  7434  000EE4  0100               	movlb	0	; () banked
  7435  000EE6  5189               	movf	scale@scl& (0+255),w,b
  7436  000EE8  0D03               	mullw	3
  7437  000EEA  0EEC               	movlw	low __powers_
  7438  000EEC  24F3               	addwf	prodl,w,c
  7439  000EEE  6EF6               	movwf	tblptrl,c
  7440  000EF0  0E7E               	movlw	high __powers_
  7441  000EF2                     L14:
  7442  000EF2  20F4               	addwfc	prodh,w,c
  7443  000EF4  6EF7               	movwf	tblptrh,c
  7444  000EF6                     	if	1	;There are 3 active tblptr bytes
  7445  000EF6  6AF8               	clrf	tblptru,c
  7446  000EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  7447  000EFA  22F8               	addwfc	tblptru,f,c
  7448  000EFC                     	endif
  7449  000EFC  0009               	tblrd		*+
  7450  000EFE  0100               	movlb	0	; () banked
  7451  000F00  CFF5 F083          	movff	tablat,?_scale
  7452  000F04  0009               	tblrd		*+
  7453  000F06  0100               	movlb	0	; () banked
  7454  000F08  CFF5 F084          	movff	tablat,?_scale+1
  7455  000F0C  000A               	tblrd		*-
  7456  000F0E  0100               	movlb	0	; () banked
  7457  000F10  CFF5 F085          	movff	tablat,?_scale+2
  7458  000F14                     l509:
  7459  000F14  0012               	return	
  7460  000F16                     __end_of_scale:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           intcon2	equ	0xFF1
  7470                           intcon3	equ	0xFF0
  7471                           indf0	equ	0xFEF
  7472                           postinc0	equ	0xFEE
  7473                           fsr0h	equ	0xFEA
  7474                           fsr0l	equ	0xFE9
  7475                           wreg	equ	0xFE8
  7476                           postinc1	equ	0xFE6
  7477                           postdec1	equ	0xFE5
  7478                           fsr1l	equ	0xFE1
  7479                           indf2	equ	0xFDF
  7480                           postinc2	equ	0xFDE
  7481                           postdec2	equ	0xFDD
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _fround *****************
  7487 ;; Defined at:
  7488 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  prec            1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  prec            1   44[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  3   35[BANK0 ] unsigned char 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7502 ;;      Params:         0       3       0       0       0       0       0       0       0
  7503 ;;      Locals:         0       7       0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7505 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7506 ;;Total ram usage:       10 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    6
  7509 ;; This function calls:
  7510 ;;		___awdiv
  7511 ;;		___awmod
  7512 ;;		___ftmul
  7513 ;;		___wmul
  7514 ;; This function is called by:
  7515 ;;		_sprintf
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text31
  7520  000F16                     __ptext31:
  7521                           	opt stack 0
  7522  000F16                     _fround:
  7523                           	opt stack 21
  7524                           
  7525                           ;incstack = 0
  7526                           ;fround@prec stored from wreg
  7527  000F16  0100               	movlb	0	; () banked
  7528  000F18  6F8C               	movwf	fround@prec& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;doprnt.c: 413: if(prec>=110)
  7532  000F1A  0E6D               	movlw	109
  7533  000F1C  0100               	movlb	0	; () banked
  7534  000F1E  658C               	cpfsgt	fround@prec& (0+255),b
  7535  000F20  D0D4               	goto	l3488
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7539  000F22  0E00               	movlw	0
  7540  000F24  0100               	movlb	0	; () banked
  7541  000F26  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7542  000F28  0E03               	movlw	3
  7543  000F2A  0100               	movlb	0	; () banked
  7544  000F2C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7545  000F2E  0E00               	movlw	0
  7546  000F30  0100               	movlb	0	; () banked
  7547  000F32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7548  000F34  0E0A               	movlw	10
  7549  000F36  0100               	movlb	0	; () banked
  7550  000F38  6F68               	movwf	___awdiv@divisor& (0+255),b
  7551  000F3A  0E00               	movlw	0
  7552  000F3C  0100               	movlb	0	; () banked
  7553  000F3E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7554  000F40  0E64               	movlw	100
  7555  000F42  0100               	movlb	0	; () banked
  7556  000F44  6F62               	movwf	___awmod@divisor& (0+255),b
  7557  000F46  0100               	movlb	0	; () banked
  7558  000F48  C08C  F060         	movff	fround@prec,___awmod@dividend
  7559  000F4C  0100               	movlb	0	; () banked
  7560  000F4E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7561  000F50  ECCD  F012         	call	___awmod	;wreg free
  7562  000F54  0100               	movlb	0	; () banked
  7563  000F56  C060  F066         	movff	?___awmod,___awdiv@dividend
  7564  000F5A  0100               	movlb	0	; () banked
  7565  000F5C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7566  000F60  EC54  F010         	call	___awdiv	;wreg free
  7567  000F64  0E09               	movlw	9
  7568  000F66  0100               	movlb	0	; () banked
  7569  000F68  2566               	addwf	?___awdiv& (0+255),w,b
  7570  000F6A  0100               	movlb	0	; () banked
  7571  000F6C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7572  000F6E  0E00               	movlw	0
  7573  000F70  0100               	movlb	0	; () banked
  7574  000F72  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7575  000F74  0100               	movlb	0	; () banked
  7576  000F76  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7577  000F78  EC71  F019         	call	___wmul	;wreg free
  7578  000F7C  0EC5               	movlw	low __npowers_
  7579  000F7E  0100               	movlb	0	; () banked
  7580  000F80  256E               	addwf	?___wmul& (0+255),w,b
  7581  000F82  6EF6               	movwf	tblptrl,c
  7582  000F84  0E7E               	movlw	high __npowers_
  7583  000F86  0100               	movlb	0	; () banked
  7584  000F88  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7585  000F8A  6EF7               	movwf	tblptrh,c
  7586  000F8C                     	if	1	;There are 3 active tblptr bytes
  7587  000F8C  6AF8               	clrf	tblptru,c
  7588  000F8E  0E00               	movlw	low (__mediumconst shr (0+16))
  7589  000F90  22F8               	addwfc	tblptru,f,c
  7590  000F92                     	endif
  7591  000F92  0009               	tblrd		*+
  7592  000F94  0100               	movlb	0	; () banked
  7593  000F96  CFF5 F077          	movff	tablat,___ftmul@f2
  7594  000F9A  0009               	tblrd		*+
  7595  000F9C  0100               	movlb	0	; () banked
  7596  000F9E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7597  000FA2  000A               	tblrd		*-
  7598  000FA4  0100               	movlb	0	; () banked
  7599  000FA6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7600  000FAA  0E00               	movlw	0
  7601  000FAC  0100               	movlb	0	; () banked
  7602  000FAE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7603  000FB0  0E64               	movlw	100
  7604  000FB2  0100               	movlb	0	; () banked
  7605  000FB4  6F68               	movwf	___awdiv@divisor& (0+255),b
  7606  000FB6  0100               	movlb	0	; () banked
  7607  000FB8  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7608  000FBC  0100               	movlb	0	; () banked
  7609  000FBE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7610  000FC0  EC54  F010         	call	___awdiv	;wreg free
  7611  000FC4  0E12               	movlw	18
  7612  000FC6  0100               	movlb	0	; () banked
  7613  000FC8  2566               	addwf	?___awdiv& (0+255),w,b
  7614  000FCA  0100               	movlb	0	; () banked
  7615  000FCC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7616  000FCE  0E00               	movlw	0
  7617  000FD0  0100               	movlb	0	; () banked
  7618  000FD2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7619  000FD4  0100               	movlb	0	; () banked
  7620  000FD6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7621  000FD8  0E00               	movlw	0
  7622  000FDA  0100               	movlb	0	; () banked
  7623  000FDC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7624  000FDE  0E03               	movlw	3
  7625  000FE0  0100               	movlb	0	; () banked
  7626  000FE2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7627  000FE4  EC71  F019         	call	___wmul	;wreg free
  7628  000FE8  0EC5               	movlw	low __npowers_
  7629  000FEA  0100               	movlb	0	; () banked
  7630  000FEC  256E               	addwf	?___wmul& (0+255),w,b
  7631  000FEE  6EF6               	movwf	tblptrl,c
  7632  000FF0  0E7E               	movlw	high __npowers_
  7633  000FF2  0100               	movlb	0	; () banked
  7634  000FF4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7635  000FF6  6EF7               	movwf	tblptrh,c
  7636  000FF8                     	if	1	;There are 3 active tblptr bytes
  7637  000FF8  6AF8               	clrf	tblptru,c
  7638  000FFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7639  000FFC  22F8               	addwfc	tblptru,f,c
  7640  000FFE                     	endif
  7641  000FFE  0009               	tblrd		*+
  7642  001000  0100               	movlb	0	; () banked
  7643  001002  CFF5 F074          	movff	tablat,___ftmul@f1
  7644  001006  0009               	tblrd		*+
  7645  001008  0100               	movlb	0	; () banked
  7646  00100A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7647  00100E  000A               	tblrd		*-
  7648  001010  0100               	movlb	0	; () banked
  7649  001012  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7650  001016  ECD0  F00C         	call	___ftmul	;wreg free
  7651  00101A  C074  F089         	movff	?___ftmul,_fround$2884
  7652  00101E  C075  F08A         	movff	?___ftmul+1,_fround$2884+1
  7653  001022  C076  F08B         	movff	?___ftmul+2,_fround$2884+2
  7654                           
  7655                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7656  001026  0E00               	movlw	0
  7657  001028  0100               	movlb	0	; () banked
  7658  00102A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7659  00102C  0E03               	movlw	3
  7660  00102E  0100               	movlb	0	; () banked
  7661  001030  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7662  001032  0E00               	movlw	0
  7663  001034  0100               	movlb	0	; () banked
  7664  001036  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7665  001038  0E0A               	movlw	10
  7666  00103A  0100               	movlb	0	; () banked
  7667  00103C  6F62               	movwf	___awmod@divisor& (0+255),b
  7668  00103E  0100               	movlb	0	; () banked
  7669  001040  C08C  F060         	movff	fround@prec,___awmod@dividend
  7670  001044  0100               	movlb	0	; () banked
  7671  001046  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7672  001048  ECCD  F012         	call	___awmod	;wreg free
  7673  00104C  0100               	movlb	0	; () banked
  7674  00104E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7675  001052  0100               	movlb	0	; () banked
  7676  001054  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7677  001058  EC71  F019         	call	___wmul	;wreg free
  7678  00105C  0EC5               	movlw	low __npowers_
  7679  00105E  0100               	movlb	0	; () banked
  7680  001060  256E               	addwf	?___wmul& (0+255),w,b
  7681  001062  6EF6               	movwf	tblptrl,c
  7682  001064  0E7E               	movlw	high __npowers_
  7683  001066  0100               	movlb	0	; () banked
  7684  001068  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7685  00106A  6EF7               	movwf	tblptrh,c
  7686  00106C                     	if	1	;There are 3 active tblptr bytes
  7687  00106C  6AF8               	clrf	tblptru,c
  7688  00106E  0E00               	movlw	low (__mediumconst shr (0+16))
  7689  001070  22F8               	addwfc	tblptru,f,c
  7690  001072                     	endif
  7691  001072  0009               	tblrd		*+
  7692  001074  0100               	movlb	0	; () banked
  7693  001076  CFF5 F077          	movff	tablat,___ftmul@f2
  7694  00107A  0009               	tblrd		*+
  7695  00107C  0100               	movlb	0	; () banked
  7696  00107E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7697  001082  000A               	tblrd		*-
  7698  001084  0100               	movlb	0	; () banked
  7699  001086  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7700  00108A  C089  F074         	movff	_fround$2884,___ftmul@f1
  7701  00108E  C08A  F075         	movff	_fround$2884+1,___ftmul@f1+1
  7702  001092  C08B  F076         	movff	_fround$2884+2,___ftmul@f1+2
  7703  001096  ECD0  F00C         	call	___ftmul	;wreg free
  7704  00109A  C074  F086         	movff	?___ftmul,_fround$2885
  7705  00109E  C075  F087         	movff	?___ftmul+1,_fround$2885+1
  7706  0010A2  C076  F088         	movff	?___ftmul+2,_fround$2885+2
  7707                           
  7708                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7709  0010A6  C086  F074         	movff	_fround$2885,___ftmul@f1
  7710  0010AA  C087  F075         	movff	_fround$2885+1,___ftmul@f1+1
  7711  0010AE  C088  F076         	movff	_fround$2885+2,___ftmul@f1+2
  7712  0010B2  0E00               	movlw	0
  7713  0010B4  0100               	movlb	0	; () banked
  7714  0010B6  6F77               	movwf	___ftmul@f2& (0+255),b
  7715  0010B8  0E00               	movlw	0
  7716  0010BA  0100               	movlb	0	; () banked
  7717  0010BC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7718  0010BE  0E3F               	movlw	63
  7719  0010C0  0100               	movlb	0	; () banked
  7720  0010C2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7721  0010C4  ECD0  F00C         	call	___ftmul	;wreg free
  7722  0010C8  D0A9               	goto	L17
  7723  0010CA                     l3488:
  7724                           
  7725                           ;doprnt.c: 415: else if(prec > 10)
  7726  0010CA  0E0A               	movlw	10
  7727  0010CC  0100               	movlb	0	; () banked
  7728  0010CE  658C               	cpfsgt	fround@prec& (0+255),b
  7729  0010D0  D082               	goto	l3496
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7733  0010D2  0E00               	movlw	0
  7734  0010D4  0100               	movlb	0	; () banked
  7735  0010D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7736  0010D8  0E03               	movlw	3
  7737  0010DA  0100               	movlb	0	; () banked
  7738  0010DC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7739  0010DE  0E00               	movlw	0
  7740  0010E0  0100               	movlb	0	; () banked
  7741  0010E2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7742  0010E4  0E0A               	movlw	10
  7743  0010E6  0100               	movlb	0	; () banked
  7744  0010E8  6F62               	movwf	___awmod@divisor& (0+255),b
  7745  0010EA  0100               	movlb	0	; () banked
  7746  0010EC  C08C  F060         	movff	fround@prec,___awmod@dividend
  7747  0010F0  0100               	movlb	0	; () banked
  7748  0010F2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7749  0010F4  ECCD  F012         	call	___awmod	;wreg free
  7750  0010F8  0100               	movlb	0	; () banked
  7751  0010FA  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7752  0010FE  0100               	movlb	0	; () banked
  7753  001100  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7754  001104  EC71  F019         	call	___wmul	;wreg free
  7755  001108  0EC5               	movlw	low __npowers_
  7756  00110A  0100               	movlb	0	; () banked
  7757  00110C  256E               	addwf	?___wmul& (0+255),w,b
  7758  00110E  6EF6               	movwf	tblptrl,c
  7759  001110  0E7E               	movlw	high __npowers_
  7760  001112  0100               	movlb	0	; () banked
  7761  001114  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7762  001116  6EF7               	movwf	tblptrh,c
  7763  001118                     	if	1	;There are 3 active tblptr bytes
  7764  001118  6AF8               	clrf	tblptru,c
  7765  00111A  0E00               	movlw	low (__mediumconst shr (0+16))
  7766  00111C  22F8               	addwfc	tblptru,f,c
  7767  00111E                     	endif
  7768  00111E  0009               	tblrd		*+
  7769  001120  0100               	movlb	0	; () banked
  7770  001122  CFF5 F077          	movff	tablat,___ftmul@f2
  7771  001126  0009               	tblrd		*+
  7772  001128  0100               	movlb	0	; () banked
  7773  00112A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7774  00112E  000A               	tblrd		*-
  7775  001130  0100               	movlb	0	; () banked
  7776  001132  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7777  001136  0E00               	movlw	0
  7778  001138  0100               	movlb	0	; () banked
  7779  00113A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7780  00113C  0E0A               	movlw	10
  7781  00113E  0100               	movlb	0	; () banked
  7782  001140  6F68               	movwf	___awdiv@divisor& (0+255),b
  7783  001142  0100               	movlb	0	; () banked
  7784  001144  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7785  001148  0100               	movlb	0	; () banked
  7786  00114A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7787  00114C  EC54  F010         	call	___awdiv	;wreg free
  7788  001150  0E09               	movlw	9
  7789  001152  0100               	movlb	0	; () banked
  7790  001154  2566               	addwf	?___awdiv& (0+255),w,b
  7791  001156  0100               	movlb	0	; () banked
  7792  001158  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7793  00115A  0E00               	movlw	0
  7794  00115C  0100               	movlb	0	; () banked
  7795  00115E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7796  001160  0100               	movlb	0	; () banked
  7797  001162  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7798  001164  0E00               	movlw	0
  7799  001166  0100               	movlb	0	; () banked
  7800  001168  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7801  00116A  0E03               	movlw	3
  7802  00116C  0100               	movlb	0	; () banked
  7803  00116E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7804  001170  EC71  F019         	call	___wmul	;wreg free
  7805  001174  0EC5               	movlw	low __npowers_
  7806  001176  0100               	movlb	0	; () banked
  7807  001178  256E               	addwf	?___wmul& (0+255),w,b
  7808  00117A  6EF6               	movwf	tblptrl,c
  7809  00117C  0E7E               	movlw	high __npowers_
  7810  00117E  0100               	movlb	0	; () banked
  7811  001180  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7812  001182  6EF7               	movwf	tblptrh,c
  7813  001184                     	if	1	;There are 3 active tblptr bytes
  7814  001184  6AF8               	clrf	tblptru,c
  7815  001186  0E00               	movlw	low (__mediumconst shr (0+16))
  7816  001188  22F8               	addwfc	tblptru,f,c
  7817  00118A                     	endif
  7818  00118A  0009               	tblrd		*+
  7819  00118C  0100               	movlb	0	; () banked
  7820  00118E  CFF5 F074          	movff	tablat,___ftmul@f1
  7821  001192  0009               	tblrd		*+
  7822  001194  0100               	movlb	0	; () banked
  7823  001196  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7824  00119A  000A               	tblrd		*-
  7825  00119C  0100               	movlb	0	; () banked
  7826  00119E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7827  0011A2  ECD0  F00C         	call	___ftmul	;wreg free
  7828  0011A6  C074  F089         	movff	?___ftmul,_fround$2884
  7829  0011AA  C075  F08A         	movff	?___ftmul+1,_fround$2884+1
  7830  0011AE  C076  F08B         	movff	?___ftmul+2,_fround$2884+2
  7831                           
  7832                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7833  0011B2  C089  F074         	movff	_fround$2884,___ftmul@f1
  7834  0011B6  C08A  F075         	movff	_fround$2884+1,___ftmul@f1+1
  7835  0011BA  C08B  F076         	movff	_fround$2884+2,___ftmul@f1+2
  7836  0011BE  0E00               	movlw	0
  7837  0011C0  0100               	movlb	0	; () banked
  7838  0011C2  6F77               	movwf	___ftmul@f2& (0+255),b
  7839  0011C4  0E00               	movlw	0
  7840  0011C6  0100               	movlb	0	; () banked
  7841  0011C8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7842  0011CA  0E3F               	movlw	63
  7843  0011CC  0100               	movlb	0	; () banked
  7844  0011CE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7845  0011D0  ECD0  F00C         	call	___ftmul	;wreg free
  7846  0011D4  D023               	goto	L17
  7847  0011D6                     l3496:
  7848                           
  7849                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7850  0011D6  0100               	movlb	0	; () banked
  7851  0011D8  518C               	movf	fround@prec& (0+255),w,b
  7852  0011DA  0D03               	mullw	3
  7853  0011DC  0EC5               	movlw	low __npowers_
  7854  0011DE  24F3               	addwf	prodl,w,c
  7855  0011E0  6EF6               	movwf	tblptrl,c
  7856  0011E2  0E7E               	movlw	high __npowers_
  7857  0011E4  20F4               	addwfc	prodh,w,c
  7858  0011E6  6EF7               	movwf	tblptrh,c
  7859  0011E8                     	if	1	;There are 3 active tblptr bytes
  7860  0011E8  6AF8               	clrf	tblptru,c
  7861  0011EA  0E00               	movlw	low (__mediumconst shr (0+16))
  7862  0011EC  22F8               	addwfc	tblptru,f,c
  7863  0011EE                     	endif
  7864  0011EE  0009               	tblrd		*+
  7865  0011F0  0100               	movlb	0	; () banked
  7866  0011F2  CFF5 F074          	movff	tablat,___ftmul@f1
  7867  0011F6  0009               	tblrd		*+
  7868  0011F8  0100               	movlb	0	; () banked
  7869  0011FA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7870  0011FE  000A               	tblrd		*-
  7871  001200  0100               	movlb	0	; () banked
  7872  001202  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7873  001206  0E00               	movlw	0
  7874  001208  0100               	movlb	0	; () banked
  7875  00120A  6F77               	movwf	___ftmul@f2& (0+255),b
  7876  00120C  0E00               	movlw	0
  7877  00120E  0100               	movlb	0	; () banked
  7878  001210  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7879  001212  0E3F               	movlw	63
  7880  001214  0100               	movlb	0	; () banked
  7881  001216  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7882  001218  ECD0  F00C         	call	___ftmul	;wreg free
  7883  00121C                     L17:
  7884  00121C  C074  F083         	movff	?___ftmul,?_fround
  7885  001220  C075  F084         	movff	?___ftmul+1,?_fround+1
  7886  001224  C076  F085         	movff	?___ftmul+2,?_fround+2
  7887  001228  0012               	return	
  7888  00122A                     __end_of_fround:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           intcon	equ	0xFF2
  7897                           intcon2	equ	0xFF1
  7898                           intcon3	equ	0xFF0
  7899                           indf0	equ	0xFEF
  7900                           postinc0	equ	0xFEE
  7901                           fsr0h	equ	0xFEA
  7902                           fsr0l	equ	0xFE9
  7903                           wreg	equ	0xFE8
  7904                           postinc1	equ	0xFE6
  7905                           postdec1	equ	0xFE5
  7906                           fsr1l	equ	0xFE1
  7907                           indf2	equ	0xFDF
  7908                           postinc2	equ	0xFDE
  7909                           postdec2	equ	0xFDD
  7910                           fsr2h	equ	0xFDA
  7911                           fsr2l	equ	0xFD9
  7912                           status	equ	0xFD8
  7913                           
  7914 ;; *************** function ___wmul *****************
  7915 ;; Defined at:
  7916 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7919 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  product         2   18[BANK0 ] unsigned int 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  2   14[BANK0 ] unsigned int 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0, prodl, prodh
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7931 ;;      Params:         0       4       0       0       0       0       0       0       0
  7932 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7934 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7935 ;;Total ram usage:        6 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    4
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		_fround
  7942 ;;		_scale
  7943 ;;		_sprintf
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           	psect	text32
  7948  0032E2                     __ptext32:
  7949                           	opt stack 0
  7950  0032E2                     ___wmul:
  7951                           	opt stack 22
  7952                           
  7953                           ;incstack = 0
  7954  0032E2  0100               	movlb	0	; () banked
  7955  0032E4  516E               	movf	___wmul@multiplier& (0+255),w,b
  7956  0032E6  0100               	movlb	0	; () banked
  7957  0032E8  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7958  0032EA  CFF3 F072          	movff	prodl,___wmul@product
  7959  0032EE  CFF4 F073          	movff	prodh,___wmul@product+1
  7960  0032F2  0100               	movlb	0	; () banked
  7961  0032F4  516E               	movf	___wmul@multiplier& (0+255),w,b
  7962  0032F6  0100               	movlb	0	; () banked
  7963  0032F8  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7964  0032FA  50F3               	movf	prodl,w,c
  7965  0032FC  0100               	movlb	0	; () banked
  7966  0032FE  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7967  003300  0100               	movlb	0	; () banked
  7968  003302  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7969  003304  0100               	movlb	0	; () banked
  7970  003306  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7971  003308  50F3               	movf	prodl,w,c
  7972  00330A  0100               	movlb	0	; () banked
  7973  00330C  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7974                           
  7975                           ; BSR set to: 0
  7976  00330E  C072  F06E         	movff	___wmul@product,?___wmul
  7977  003312  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  7978                           
  7979                           ; BSR set to: 0
  7980                           
  7981                           ; BSR set to: 0
  7982  003316  0012               	return	
  7983  003318                     __end_of___wmul:
  7984                           	opt stack 0
  7985                           tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           prodh	equ	0xFF4
  7990                           prodl	equ	0xFF3
  7991                           intcon	equ	0xFF2
  7992                           intcon2	equ	0xFF1
  7993                           intcon3	equ	0xFF0
  7994                           indf0	equ	0xFEF
  7995                           postinc0	equ	0xFEE
  7996                           fsr0h	equ	0xFEA
  7997                           fsr0l	equ	0xFE9
  7998                           wreg	equ	0xFE8
  7999                           postinc1	equ	0xFE6
  8000                           postdec1	equ	0xFE5
  8001                           fsr1l	equ	0xFE1
  8002                           indf2	equ	0xFDF
  8003                           postinc2	equ	0xFDE
  8004                           postdec2	equ	0xFDD
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function ___ftmul *****************
  8010 ;; Defined at:
  8011 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  f1              3   20[BANK0 ] float 
  8014 ;;  f2              3   23[BANK0 ] float 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  8017 ;;  sign            1   34[BANK0 ] unsigned char 
  8018 ;;  cntr            1   33[BANK0 ] unsigned char 
  8019 ;;  exp             1   29[BANK0 ] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  3   20[BANK0 ] float 
  8022 ;; Registers used:
  8023 ;;		wreg, status,2, status,0, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8029 ;;      Params:         0       6       0       0       0       0       0       0       0
  8030 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8031 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8032 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8033 ;;Total ram usage:       15 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    5
  8036 ;; This function calls:
  8037 ;;		___ftpack
  8038 ;; This function is called by:
  8039 ;;		_PWM_DutyCycle1
  8040 ;;		_PWM_DutyCycle2
  8041 ;;		_fround
  8042 ;;		_scale
  8043 ;;		_sprintf
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text33
  8048  0019A0                     __ptext33:
  8049                           	opt stack 0
  8050  0019A0                     ___ftmul:
  8051                           	opt stack 24
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;incstack = 0
  8055  0019A0  0100               	movlb	0	; () banked
  8056  0019A2  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  8057  0019A6  0100               	movlb	0	; () banked
  8058  0019A8  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8059  0019AA  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8060  0019AC  0100               	movlb	0	; () banked
  8061  0019AE  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8062  0019B0  0100               	movlb	0	; () banked
  8063  0019B2  377A               	rlcf	??___ftmul& (0+255),f,b
  8064  0019B4  E301               	bnc	u2971
  8065  0019B6  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8066  0019B8                     u2971:
  8067  0019B8  0100               	movlb	0	; () banked
  8068  0019BA  517A               	movf	??___ftmul& (0+255),w,b
  8069  0019BC  0100               	movlb	0	; () banked
  8070  0019BE  6F7D               	movwf	___ftmul@exp& (0+255),b
  8071  0019C0  0100               	movlb	0	; () banked
  8072  0019C2  677D               	tstfsz	___ftmul@exp& (0+255),b
  8073  0019C4  D001               	goto	l3260
  8074  0019C6  D013               	goto	u3000
  8075  0019C8                     l3260:
  8076                           
  8077                           ; BSR set to: 0
  8078  0019C8  0100               	movlb	0	; () banked
  8079  0019CA  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  8080  0019CE  0100               	movlb	0	; () banked
  8081  0019D0  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8082  0019D2  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8083  0019D4  0100               	movlb	0	; () banked
  8084  0019D6  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8085  0019D8  0100               	movlb	0	; () banked
  8086  0019DA  377A               	rlcf	??___ftmul& (0+255),f,b
  8087  0019DC  E301               	bnc	u2991
  8088  0019DE  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8089  0019E0                     u2991:
  8090  0019E0  0100               	movlb	0	; () banked
  8091  0019E2  517A               	movf	??___ftmul& (0+255),w,b
  8092  0019E4  0100               	movlb	0	; () banked
  8093  0019E6  6F82               	movwf	___ftmul@sign& (0+255),b
  8094  0019E8  0100               	movlb	0	; () banked
  8095  0019EA  6782               	tstfsz	___ftmul@sign& (0+255),b
  8096  0019EC  D00A               	goto	l3266
  8097  0019EE                     u3000:
  8098                           
  8099                           ; BSR set to: 0
  8100  0019EE  0E00               	movlw	0
  8101  0019F0  0100               	movlb	0	; () banked
  8102  0019F2  6F74               	movwf	?___ftmul& (0+255),b
  8103  0019F4  0E00               	movlw	0
  8104  0019F6  0100               	movlb	0	; () banked
  8105  0019F8  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8106  0019FA  0E00               	movlw	0
  8107  0019FC  0100               	movlb	0	; () banked
  8108  0019FE  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8109  001A00  D080               	goto	l1103
  8110  001A02                     l3266:
  8111                           
  8112                           ; BSR set to: 0
  8113  001A02  0100               	movlb	0	; () banked
  8114  001A04  5182               	movf	___ftmul@sign& (0+255),w,b
  8115  001A06  0F7B               	addlw	123
  8116  001A08  0100               	movlb	0	; () banked
  8117  001A0A  277D               	addwf	___ftmul@exp& (0+255),f,b
  8118                           
  8119                           ; BSR set to: 0
  8120  001A0C  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  8121  001A10  0100               	movlb	0	; () banked
  8122  001A12  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8123  001A14  0100               	movlb	0	; () banked
  8124  001A16  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  8125  001A18  0E80               	movlw	128
  8126  001A1A  0100               	movlb	0	; () banked
  8127  001A1C  1782               	andwf	___ftmul@sign& (0+255),f,b
  8128                           
  8129                           ; BSR set to: 0
  8130  001A1E  0100               	movlb	0	; () banked
  8131  001A20  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8132                           
  8133                           ; BSR set to: 0
  8134  001A22  0100               	movlb	0	; () banked
  8135  001A24  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8136                           
  8137                           ; BSR set to: 0
  8138  001A26  0EFF               	movlw	255
  8139  001A28  0100               	movlb	0	; () banked
  8140  001A2A  1777               	andwf	___ftmul@f2& (0+255),f,b
  8141  001A2C  0EFF               	movlw	255
  8142  001A2E  0100               	movlb	0	; () banked
  8143  001A30  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8144  001A32  0E00               	movlw	0
  8145  001A34  0100               	movlb	0	; () banked
  8146  001A36  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8147                           
  8148                           ; BSR set to: 0
  8149  001A38  0E00               	movlw	0
  8150  001A3A  0100               	movlb	0	; () banked
  8151  001A3C  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  8152  001A3E  0E00               	movlw	0
  8153  001A40  0100               	movlb	0	; () banked
  8154  001A42  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8155  001A44  0E00               	movlw	0
  8156  001A46  0100               	movlb	0	; () banked
  8157  001A48  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8158                           
  8159                           ; BSR set to: 0
  8160  001A4A  0E07               	movlw	7
  8161  001A4C  0100               	movlb	0	; () banked
  8162  001A4E  6F81               	movwf	___ftmul@cntr& (0+255),b
  8163  001A50                     l3280:
  8164                           
  8165                           ; BSR set to: 0
  8166  001A50  0100               	movlb	0	; () banked
  8167  001A52  A174               	btfss	___ftmul@f1& (0+255),0,b
  8168  001A54  D00C               	goto	l3284
  8169                           
  8170                           ; BSR set to: 0
  8171  001A56  0100               	movlb	0	; () banked
  8172  001A58  5177               	movf	___ftmul@f2& (0+255),w,b
  8173  001A5A  0100               	movlb	0	; () banked
  8174  001A5C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8175  001A5E  0100               	movlb	0	; () banked
  8176  001A60  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8177  001A62  0100               	movlb	0	; () banked
  8178  001A64  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8179  001A66  0100               	movlb	0	; () banked
  8180  001A68  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8181  001A6A  0100               	movlb	0	; () banked
  8182  001A6C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8183  001A6E                     l3284:
  8184                           
  8185                           ; BSR set to: 0
  8186  001A6E  0100               	movlb	0	; () banked
  8187  001A70  90D8               	bcf	status,0,c
  8188  001A72  0100               	movlb	0	; () banked
  8189  001A74  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8190  001A76  0100               	movlb	0	; () banked
  8191  001A78  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8192  001A7A  0100               	movlb	0	; () banked
  8193  001A7C  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8194  001A7E  0100               	movlb	0	; () banked
  8195  001A80  90D8               	bcf	status,0,c
  8196  001A82  0100               	movlb	0	; () banked
  8197  001A84  3777               	rlcf	___ftmul@f2& (0+255),f,b
  8198  001A86  0100               	movlb	0	; () banked
  8199  001A88  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8200  001A8A  0100               	movlb	0	; () banked
  8201  001A8C  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 0
  8204  001A8E  0100               	movlb	0	; () banked
  8205  001A90  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8206  001A92  D7DE               	goto	l3280
  8207                           
  8208                           ; BSR set to: 0
  8209                           
  8210                           ; BSR set to: 0
  8211  001A94  0E09               	movlw	9
  8212  001A96  0100               	movlb	0	; () banked
  8213  001A98  6F81               	movwf	___ftmul@cntr& (0+255),b
  8214  001A9A                     l3290:
  8215                           
  8216                           ; BSR set to: 0
  8217  001A9A  0100               	movlb	0	; () banked
  8218  001A9C  A174               	btfss	___ftmul@f1& (0+255),0,b
  8219  001A9E  D00C               	goto	l3294
  8220                           
  8221                           ; BSR set to: 0
  8222  001AA0  0100               	movlb	0	; () banked
  8223  001AA2  5177               	movf	___ftmul@f2& (0+255),w,b
  8224  001AA4  0100               	movlb	0	; () banked
  8225  001AA6  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8226  001AA8  0100               	movlb	0	; () banked
  8227  001AAA  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8228  001AAC  0100               	movlb	0	; () banked
  8229  001AAE  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8230  001AB0  0100               	movlb	0	; () banked
  8231  001AB2  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8232  001AB4  0100               	movlb	0	; () banked
  8233  001AB6  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8234  001AB8                     l3294:
  8235                           
  8236                           ; BSR set to: 0
  8237  001AB8  0100               	movlb	0	; () banked
  8238  001ABA  90D8               	bcf	status,0,c
  8239  001ABC  0100               	movlb	0	; () banked
  8240  001ABE  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8241  001AC0  0100               	movlb	0	; () banked
  8242  001AC2  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8243  001AC4  0100               	movlb	0	; () banked
  8244  001AC6  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8245  001AC8  0100               	movlb	0	; () banked
  8246  001ACA  90D8               	bcf	status,0,c
  8247  001ACC  0100               	movlb	0	; () banked
  8248  001ACE  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8249  001AD0  0100               	movlb	0	; () banked
  8250  001AD2  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8251  001AD4  0100               	movlb	0	; () banked
  8252  001AD6  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8253                           
  8254                           ; BSR set to: 0
  8255  001AD8  0100               	movlb	0	; () banked
  8256  001ADA  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8257  001ADC  D7DE               	goto	l3290
  8258                           
  8259                           ; BSR set to: 0
  8260                           
  8261                           ; BSR set to: 0
  8262  001ADE  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8263  001AE2  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8264  001AE6  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8265  001AEA  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8266  001AEE  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8267  001AF2  EC5D  F00F         	call	___ftpack	;wreg free
  8268  001AF6  C060  F074         	movff	?___ftpack,?___ftmul
  8269  001AFA  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8270  001AFE  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8271  001B02                     l1103:
  8272  001B02  0012               	return	
  8273  001B04                     __end_of___ftmul:
  8274                           	opt stack 0
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           intcon2	equ	0xFF1
  8283                           intcon3	equ	0xFF0
  8284                           indf0	equ	0xFEF
  8285                           postinc0	equ	0xFEE
  8286                           fsr0h	equ	0xFEA
  8287                           fsr0l	equ	0xFE9
  8288                           wreg	equ	0xFE8
  8289                           postinc1	equ	0xFE6
  8290                           postdec1	equ	0xFE5
  8291                           fsr1l	equ	0xFE1
  8292                           indf2	equ	0xFDF
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function ___awmod *****************
  8300 ;; Defined at:
  8301 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  dividend        2    0[BANK0 ] int 
  8304 ;;  divisor         2    2[BANK0 ] int 
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;  sign            1    5[BANK0 ] unsigned char 
  8307 ;;  counter         1    4[BANK0 ] unsigned char 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  2    0[BANK0 ] int 
  8310 ;; Registers used:
  8311 ;;		wreg, status,2, status,0, prodl
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8317 ;;      Params:         0       4       0       0       0       0       0       0       0
  8318 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8320 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8321 ;;Total ram usage:        6 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    4
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_fround
  8328 ;;		_scale
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text34
  8333  00259A                     __ptext34:
  8334                           	opt stack 0
  8335  00259A                     ___awmod:
  8336                           	opt stack 22
  8337                           
  8338                           ;incstack = 0
  8339  00259A  0E00               	movlw	0
  8340  00259C  0100               	movlb	0	; () banked
  8341  00259E  6F65               	movwf	___awmod@sign& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344  0025A0  0100               	movlb	0	; () banked
  8345  0025A2  5161               	movf	(___awmod@dividend+1)& (0+255),w,b
  8346  0025A4  0A80               	xorlw	128
  8347  0025A6  6EF3               	movwf	prodl,c
  8348  0025A8  0E80               	movlw	128
  8349  0025AA  5CF3               	subwf	prodl,w,c
  8350  0025AC  0E00               	movlw	0
  8351  0025AE  B4D8               	btfsc	status,2,c
  8352  0025B0  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8353  0025B2  B0D8               	btfsc	status,0,c
  8354  0025B4  D009               	goto	l3354
  8355                           
  8356                           ; BSR set to: 0
  8357  0025B6  0100               	movlb	0	; () banked
  8358  0025B8  6D60               	negf	___awmod@dividend& (0+255),b
  8359  0025BA  0100               	movlb	0	; () banked
  8360  0025BC  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8361  0025BE  B0D8               	btfsc	status,0,c
  8362  0025C0  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8363                           
  8364                           ; BSR set to: 0
  8365  0025C2  0E01               	movlw	1
  8366  0025C4  0100               	movlb	0	; () banked
  8367  0025C6  6F65               	movwf	___awmod@sign& (0+255),b
  8368  0025C8                     l3354:
  8369                           
  8370                           ; BSR set to: 0
  8371  0025C8  0100               	movlb	0	; () banked
  8372  0025CA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8373  0025CC  0A80               	xorlw	128
  8374  0025CE  6EF3               	movwf	prodl,c
  8375  0025D0  0E80               	movlw	128
  8376  0025D2  5CF3               	subwf	prodl,w,c
  8377  0025D4  0E00               	movlw	0
  8378  0025D6  B4D8               	btfsc	status,2,c
  8379  0025D8  5D62               	subwf	___awmod@divisor& (0+255),w,b
  8380  0025DA  B0D8               	btfsc	status,0,c
  8381  0025DC  D006               	goto	l3358
  8382                           
  8383                           ; BSR set to: 0
  8384  0025DE  0100               	movlb	0	; () banked
  8385  0025E0  6D62               	negf	___awmod@divisor& (0+255),b
  8386  0025E2  0100               	movlb	0	; () banked
  8387  0025E4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  8388  0025E6  B0D8               	btfsc	status,0,c
  8389  0025E8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  8390  0025EA                     l3358:
  8391                           
  8392                           ; BSR set to: 0
  8393  0025EA  0100               	movlb	0	; () banked
  8394  0025EC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8395  0025EE  1162               	iorwf	___awmod@divisor& (0+255),w,b
  8396  0025F0  B4D8               	btfsc	status,2,c
  8397  0025F2  D026               	goto	l3374
  8398                           
  8399                           ; BSR set to: 0
  8400  0025F4  0E01               	movlw	1
  8401  0025F6  0100               	movlb	0	; () banked
  8402  0025F8  6F64               	movwf	___awmod@counter& (0+255),b
  8403  0025FA  D006               	goto	l3364
  8404  0025FC                     l3362:
  8405                           
  8406                           ; BSR set to: 0
  8407  0025FC  0100               	movlb	0	; () banked
  8408  0025FE  90D8               	bcf	status,0,c
  8409  002600  3762               	rlcf	___awmod@divisor& (0+255),f,b
  8410  002602  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8411  002604  0100               	movlb	0	; () banked
  8412  002606  2B64               	incf	___awmod@counter& (0+255),f,b
  8413  002608                     l3364:
  8414                           
  8415                           ; BSR set to: 0
  8416  002608  0100               	movlb	0	; () banked
  8417  00260A  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8418  00260C  D7F7               	goto	l3362
  8419  00260E                     l3366:
  8420                           
  8421                           ; BSR set to: 0
  8422  00260E  0100               	movlb	0	; () banked
  8423  002610  5162               	movf	___awmod@divisor& (0+255),w,b
  8424  002612  0100               	movlb	0	; () banked
  8425  002614  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8426  002616  0100               	movlb	0	; () banked
  8427  002618  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8428  00261A  0100               	movlb	0	; () banked
  8429  00261C  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8430  00261E  A0D8               	btfss	status,0,c
  8431  002620  D008               	goto	l3370
  8432                           
  8433                           ; BSR set to: 0
  8434  002622  0100               	movlb	0	; () banked
  8435  002624  5162               	movf	___awmod@divisor& (0+255),w,b
  8436  002626  0100               	movlb	0	; () banked
  8437  002628  5F60               	subwf	___awmod@dividend& (0+255),f,b
  8438  00262A  0100               	movlb	0	; () banked
  8439  00262C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8440  00262E  0100               	movlb	0	; () banked
  8441  002630  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8442  002632                     l3370:
  8443                           
  8444                           ; BSR set to: 0
  8445  002632  0100               	movlb	0	; () banked
  8446  002634  90D8               	bcf	status,0,c
  8447  002636  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8448  002638  3362               	rrcf	___awmod@divisor& (0+255),f,b
  8449                           
  8450                           ; BSR set to: 0
  8451  00263A  0100               	movlb	0	; () banked
  8452  00263C  2F64               	decfsz	___awmod@counter& (0+255),f,b
  8453  00263E  D7E7               	goto	l3366
  8454  002640                     l3374:
  8455                           
  8456                           ; BSR set to: 0
  8457  002640  0100               	movlb	0	; () banked
  8458  002642  5165               	movf	___awmod@sign& (0+255),w,b
  8459  002644  B4D8               	btfsc	status,2,c
  8460  002646  D006               	goto	l3378
  8461                           
  8462                           ; BSR set to: 0
  8463  002648  0100               	movlb	0	; () banked
  8464  00264A  6D60               	negf	___awmod@dividend& (0+255),b
  8465  00264C  0100               	movlb	0	; () banked
  8466  00264E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8467  002650  B0D8               	btfsc	status,0,c
  8468  002652  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8469  002654                     l3378:
  8470                           
  8471                           ; BSR set to: 0
  8472  002654  C060  F060         	movff	___awmod@dividend,?___awmod
  8473  002658  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  8474                           
  8475                           ; BSR set to: 0
  8476                           
  8477                           ; BSR set to: 0
  8478  00265C  0012               	return	
  8479  00265E                     __end_of___awmod:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           intcon2	equ	0xFF1
  8489                           intcon3	equ	0xFF0
  8490                           indf0	equ	0xFEF
  8491                           postinc0	equ	0xFEE
  8492                           fsr0h	equ	0xFEA
  8493                           fsr0l	equ	0xFE9
  8494                           wreg	equ	0xFE8
  8495                           postinc1	equ	0xFE6
  8496                           postdec1	equ	0xFE5
  8497                           fsr1l	equ	0xFE1
  8498                           indf2	equ	0xFDF
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           fsr2h	equ	0xFDA
  8502                           fsr2l	equ	0xFD9
  8503                           status	equ	0xFD8
  8504                           
  8505 ;; *************** function ___awdiv *****************
  8506 ;; Defined at:
  8507 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;  dividend        2    6[BANK0 ] int 
  8510 ;;  divisor         2    8[BANK0 ] int 
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  quotient        2   12[BANK0 ] int 
  8513 ;;  sign            1   11[BANK0 ] unsigned char 
  8514 ;;  counter         1   10[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  2    6[BANK0 ] int 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0, prodl
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8524 ;;      Params:         0       4       0       0       0       0       0       0       0
  8525 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8527 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8528 ;;Total ram usage:        8 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    4
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_fround
  8535 ;;		_scale
  8536 ;;		_sprintf
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           	psect	text35
  8541  0020A8                     __ptext35:
  8542                           	opt stack 0
  8543  0020A8                     ___awdiv:
  8544                           	opt stack 22
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;incstack = 0
  8548  0020A8  0E00               	movlw	0
  8549  0020AA  0100               	movlb	0	; () banked
  8550  0020AC  6F6B               	movwf	___awdiv@sign& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553  0020AE  0100               	movlb	0	; () banked
  8554  0020B0  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8555  0020B2  0A80               	xorlw	128
  8556  0020B4  6EF3               	movwf	prodl,c
  8557  0020B6  0E80               	movlw	128
  8558  0020B8  5CF3               	subwf	prodl,w,c
  8559  0020BA  0E00               	movlw	0
  8560  0020BC  B4D8               	btfsc	status,2,c
  8561  0020BE  5D68               	subwf	___awdiv@divisor& (0+255),w,b
  8562  0020C0  B0D8               	btfsc	status,0,c
  8563  0020C2  D009               	goto	l3310
  8564                           
  8565                           ; BSR set to: 0
  8566  0020C4  0100               	movlb	0	; () banked
  8567  0020C6  6D68               	negf	___awdiv@divisor& (0+255),b
  8568  0020C8  0100               	movlb	0	; () banked
  8569  0020CA  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8570  0020CC  B0D8               	btfsc	status,0,c
  8571  0020CE  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8572                           
  8573                           ; BSR set to: 0
  8574  0020D0  0E01               	movlw	1
  8575  0020D2  0100               	movlb	0	; () banked
  8576  0020D4  6F6B               	movwf	___awdiv@sign& (0+255),b
  8577  0020D6                     l3310:
  8578                           
  8579                           ; BSR set to: 0
  8580  0020D6  0100               	movlb	0	; () banked
  8581  0020D8  5167               	movf	(___awdiv@dividend+1)& (0+255),w,b
  8582  0020DA  0A80               	xorlw	128
  8583  0020DC  6EF3               	movwf	prodl,c
  8584  0020DE  0E80               	movlw	128
  8585  0020E0  5CF3               	subwf	prodl,w,c
  8586  0020E2  0E00               	movlw	0
  8587  0020E4  B4D8               	btfsc	status,2,c
  8588  0020E6  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8589  0020E8  B0D8               	btfsc	status,0,c
  8590  0020EA  D009               	goto	l3316
  8591                           
  8592                           ; BSR set to: 0
  8593  0020EC  0100               	movlb	0	; () banked
  8594  0020EE  6D66               	negf	___awdiv@dividend& (0+255),b
  8595  0020F0  0100               	movlb	0	; () banked
  8596  0020F2  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8597  0020F4  B0D8               	btfsc	status,0,c
  8598  0020F6  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8599                           
  8600                           ; BSR set to: 0
  8601  0020F8  0E01               	movlw	1
  8602  0020FA  0100               	movlb	0	; () banked
  8603  0020FC  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  8604  0020FE                     l3316:
  8605                           
  8606                           ; BSR set to: 0
  8607  0020FE  0E00               	movlw	0
  8608  002100  0100               	movlb	0	; () banked
  8609  002102  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8610  002104  0E00               	movlw	0
  8611  002106  0100               	movlb	0	; () banked
  8612  002108  6F6C               	movwf	___awdiv@quotient& (0+255),b
  8613                           
  8614                           ; BSR set to: 0
  8615  00210A  0100               	movlb	0	; () banked
  8616  00210C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8617  00210E  1168               	iorwf	___awdiv@divisor& (0+255),w,b
  8618  002110  B4D8               	btfsc	status,2,c
  8619  002112  D02C               	goto	l3338
  8620                           
  8621                           ; BSR set to: 0
  8622  002114  0E01               	movlw	1
  8623  002116  0100               	movlb	0	; () banked
  8624  002118  6F6A               	movwf	___awdiv@counter& (0+255),b
  8625  00211A  D006               	goto	l3324
  8626  00211C                     l3322:
  8627                           
  8628                           ; BSR set to: 0
  8629  00211C  0100               	movlb	0	; () banked
  8630  00211E  90D8               	bcf	status,0,c
  8631  002120  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  8632  002122  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8633  002124  0100               	movlb	0	; () banked
  8634  002126  2B6A               	incf	___awdiv@counter& (0+255),f,b
  8635  002128                     l3324:
  8636                           
  8637                           ; BSR set to: 0
  8638  002128  0100               	movlb	0	; () banked
  8639  00212A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8640  00212C  D7F7               	goto	l3322
  8641  00212E                     l3326:
  8642                           
  8643                           ; BSR set to: 0
  8644  00212E  0100               	movlb	0	; () banked
  8645  002130  90D8               	bcf	status,0,c
  8646  002132  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  8647  002134  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8648                           
  8649                           ; BSR set to: 0
  8650  002136  0100               	movlb	0	; () banked
  8651  002138  5168               	movf	___awdiv@divisor& (0+255),w,b
  8652  00213A  0100               	movlb	0	; () banked
  8653  00213C  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8654  00213E  0100               	movlb	0	; () banked
  8655  002140  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8656  002142  0100               	movlb	0	; () banked
  8657  002144  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8658  002146  A0D8               	btfss	status,0,c
  8659  002148  D00A               	goto	l3334
  8660                           
  8661                           ; BSR set to: 0
  8662  00214A  0100               	movlb	0	; () banked
  8663  00214C  5168               	movf	___awdiv@divisor& (0+255),w,b
  8664  00214E  0100               	movlb	0	; () banked
  8665  002150  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  8666  002152  0100               	movlb	0	; () banked
  8667  002154  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8668  002156  0100               	movlb	0	; () banked
  8669  002158  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8670                           
  8671                           ; BSR set to: 0
  8672  00215A  0100               	movlb	0	; () banked
  8673  00215C  816C               	bsf	___awdiv@quotient& (0+255),0,b
  8674  00215E                     l3334:
  8675                           
  8676                           ; BSR set to: 0
  8677  00215E  0100               	movlb	0	; () banked
  8678  002160  90D8               	bcf	status,0,c
  8679  002162  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8680  002164  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  8681                           
  8682                           ; BSR set to: 0
  8683  002166  0100               	movlb	0	; () banked
  8684  002168  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  8685  00216A  D7E1               	goto	l3326
  8686  00216C                     l3338:
  8687                           
  8688                           ; BSR set to: 0
  8689  00216C  0100               	movlb	0	; () banked
  8690  00216E  516B               	movf	___awdiv@sign& (0+255),w,b
  8691  002170  B4D8               	btfsc	status,2,c
  8692  002172  D006               	goto	l3342
  8693                           
  8694                           ; BSR set to: 0
  8695  002174  0100               	movlb	0	; () banked
  8696  002176  6D6C               	negf	___awdiv@quotient& (0+255),b
  8697  002178  0100               	movlb	0	; () banked
  8698  00217A  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8699  00217C  B0D8               	btfsc	status,0,c
  8700  00217E  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8701  002180                     l3342:
  8702                           
  8703                           ; BSR set to: 0
  8704  002180  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  8705  002184  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  8706                           
  8707                           ; BSR set to: 0
  8708                           
  8709                           ; BSR set to: 0
  8710  002188  0012               	return	
  8711  00218A                     __end_of___awdiv:
  8712                           	opt stack 0
  8713                           tblptru	equ	0xFF8
  8714                           tblptrh	equ	0xFF7
  8715                           tblptrl	equ	0xFF6
  8716                           tablat	equ	0xFF5
  8717                           prodh	equ	0xFF4
  8718                           prodl	equ	0xFF3
  8719                           intcon	equ	0xFF2
  8720                           intcon2	equ	0xFF1
  8721                           intcon3	equ	0xFF0
  8722                           indf0	equ	0xFEF
  8723                           postinc0	equ	0xFEE
  8724                           fsr0h	equ	0xFEA
  8725                           fsr0l	equ	0xFE9
  8726                           wreg	equ	0xFE8
  8727                           postinc1	equ	0xFE6
  8728                           postdec1	equ	0xFE5
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           fsr2h	equ	0xFDA
  8734                           fsr2l	equ	0xFD9
  8735                           status	equ	0xFD8
  8736                           
  8737 ;; *************** function __tdiv_to_l_ *****************
  8738 ;; Defined at:
  8739 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  f1              3    0[BANK0 ] float 
  8742 ;;  f2              3    3[BANK0 ] float 
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  quot            4    9[BANK0 ] unsigned long 
  8745 ;;  exp1            1   14[BANK0 ] unsigned char 
  8746 ;;  cntr            1   13[BANK0 ] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  4    0[BANK0 ] unsigned long 
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8756 ;;      Params:         0       6       0       0       0       0       0       0       0
  8757 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8758 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8759 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8760 ;;Total ram usage:       15 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    4
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_sprintf
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text36
  8771  001688                     __ptext36:
  8772                           	opt stack 0
  8773  001688                     __tdiv_to_l_:
  8774                           	opt stack 23
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;incstack = 0
  8778  001688  0100               	movlb	0	; () banked
  8779  00168A  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8780  00168E  0100               	movlb	0	; () banked
  8781  001690  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8782  001692  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8783  001694  0100               	movlb	0	; () banked
  8784  001696  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8785  001698  0100               	movlb	0	; () banked
  8786  00169A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8787  00169C  E301               	bnc	u3381
  8788  00169E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8789  0016A0                     u3381:
  8790  0016A0  0100               	movlb	0	; () banked
  8791  0016A2  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8792  0016A4  0100               	movlb	0	; () banked
  8793  0016A6  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8794  0016A8  0100               	movlb	0	; () banked
  8795  0016AA  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  8796  0016AC  D001               	goto	l3544
  8797  0016AE  D092               	goto	u3450
  8798  0016B0                     l3544:
  8799                           
  8800                           ; BSR set to: 0
  8801  0016B0  0100               	movlb	0	; () banked
  8802  0016B2  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8803  0016B6  0100               	movlb	0	; () banked
  8804  0016B8  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8805  0016BA  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8806  0016BC  0100               	movlb	0	; () banked
  8807  0016BE  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8808  0016C0  0100               	movlb	0	; () banked
  8809  0016C2  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8810  0016C4  E301               	bnc	u3401
  8811  0016C6  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8812  0016C8                     u3401:
  8813  0016C8  0100               	movlb	0	; () banked
  8814  0016CA  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8815  0016CC  0100               	movlb	0	; () banked
  8816  0016CE  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8817  0016D0  0100               	movlb	0	; () banked
  8818  0016D2  676D               	tstfsz	__tdiv_to_l_@cntr& (0+255),b
  8819  0016D4  D001               	goto	l3550
  8820  0016D6  D07E               	goto	u3450
  8821  0016D8                     l3550:
  8822                           
  8823                           ; BSR set to: 0
  8824  0016D8  0100               	movlb	0	; () banked
  8825  0016DA  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8826                           
  8827                           ; BSR set to: 0
  8828  0016DC  0EFF               	movlw	255
  8829  0016DE  0100               	movlb	0	; () banked
  8830  0016E0  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8831  0016E2  0EFF               	movlw	255
  8832  0016E4  0100               	movlb	0	; () banked
  8833  0016E6  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8834  0016E8  0E00               	movlw	0
  8835  0016EA  0100               	movlb	0	; () banked
  8836  0016EC  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8837  0016EE  0100               	movlb	0	; () banked
  8838  0016F0  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8839                           
  8840                           ; BSR set to: 0
  8841  0016F2  0EFF               	movlw	255
  8842  0016F4  0100               	movlb	0	; () banked
  8843  0016F6  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8844  0016F8  0EFF               	movlw	255
  8845  0016FA  0100               	movlb	0	; () banked
  8846  0016FC  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8847  0016FE  0E00               	movlw	0
  8848  001700  0100               	movlb	0	; () banked
  8849  001702  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852  001704  0E00               	movlw	0
  8853  001706  0100               	movlb	0	; () banked
  8854  001708  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  8855  00170A  0E00               	movlw	0
  8856  00170C  0100               	movlb	0	; () banked
  8857  00170E  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8858  001710  0E00               	movlw	0
  8859  001712  0100               	movlb	0	; () banked
  8860  001714  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8861  001716  0E00               	movlw	0
  8862  001718  0100               	movlb	0	; () banked
  8863  00171A  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866  00171C  0E7F               	movlw	127
  8867  00171E  0100               	movlb	0	; () banked
  8868  001720  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8869                           
  8870                           ; BSR set to: 0
  8871  001722  0100               	movlb	0	; () banked
  8872  001724  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8873  001726  0F98               	addlw	152
  8874  001728  0100               	movlb	0	; () banked
  8875  00172A  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8876                           
  8877                           ; BSR set to: 0
  8878  00172C  0E18               	movlw	24
  8879  00172E  0100               	movlb	0	; () banked
  8880  001730  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8881  001732                     l1081:
  8882                           
  8883                           ; BSR set to: 0
  8884  001732  0100               	movlb	0	; () banked
  8885  001734  90D8               	bcf	status,0,c
  8886  001736  0100               	movlb	0	; () banked
  8887  001738  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8888  00173A  0100               	movlb	0	; () banked
  8889  00173C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8890  00173E  0100               	movlb	0	; () banked
  8891  001740  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8892  001742  0100               	movlb	0	; () banked
  8893  001744  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8894                           
  8895                           ; BSR set to: 0
  8896  001746  0100               	movlb	0	; () banked
  8897  001748  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8898  00174A  0100               	movlb	0	; () banked
  8899  00174C  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8900  00174E  0100               	movlb	0	; () banked
  8901  001750  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8902  001752  0100               	movlb	0	; () banked
  8903  001754  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8904  001756  0100               	movlb	0	; () banked
  8905  001758  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8906  00175A  0100               	movlb	0	; () banked
  8907  00175C  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8908  00175E  A0D8               	btfss	status,0,c
  8909  001760  D00E               	goto	l1082
  8910                           
  8911                           ; BSR set to: 0
  8912  001762  0100               	movlb	0	; () banked
  8913  001764  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8914  001766  0100               	movlb	0	; () banked
  8915  001768  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8916  00176A  0100               	movlb	0	; () banked
  8917  00176C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8918  00176E  0100               	movlb	0	; () banked
  8919  001770  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8920  001772  0100               	movlb	0	; () banked
  8921  001774  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8922  001776  0100               	movlb	0	; () banked
  8923  001778  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8924                           
  8925                           ; BSR set to: 0
  8926  00177A  0100               	movlb	0	; () banked
  8927  00177C  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8928  00177E                     l1082:
  8929                           
  8930                           ; BSR set to: 0
  8931  00177E  0100               	movlb	0	; () banked
  8932  001780  90D8               	bcf	status,0,c
  8933  001782  0100               	movlb	0	; () banked
  8934  001784  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8935  001786  0100               	movlb	0	; () banked
  8936  001788  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8937  00178A  0100               	movlb	0	; () banked
  8938  00178C  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8939                           
  8940                           ; BSR set to: 0
  8941  00178E  0100               	movlb	0	; () banked
  8942  001790  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8943  001792  D7CF               	goto	l1081
  8944                           
  8945                           ; BSR set to: 0
  8946  001794  0100               	movlb	0	; () banked
  8947  001796  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8948  001798  D019               	goto	l3582
  8949                           
  8950                           ; BSR set to: 0
  8951  00179A  0100               	movlb	0	; () banked
  8952  00179C  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8953  00179E  0A80               	xorlw	128
  8954  0017A0  0100               	movlb	0	; () banked
  8955  0017A2  6F66               	movwf	??__tdiv_to_l_& (0+255),b
  8956  0017A4  0EE9               	movlw	233
  8957  0017A6  0A80               	xorlw	128
  8958  0017A8  0100               	movlb	0	; () banked
  8959  0017AA  5D66               	subwf	??__tdiv_to_l_& (0+255),w,b
  8960  0017AC  A0D8               	btfss	status,0,c
  8961  0017AE  D012               	goto	u3450
  8962  0017B0                     l3578:
  8963                           
  8964                           ; BSR set to: 0
  8965  0017B0  0100               	movlb	0	; () banked
  8966  0017B2  90D8               	bcf	status,0,c
  8967  0017B4  0100               	movlb	0	; () banked
  8968  0017B6  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8969  0017B8  0100               	movlb	0	; () banked
  8970  0017BA  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8971  0017BC  0100               	movlb	0	; () banked
  8972  0017BE  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8973  0017C0  0100               	movlb	0	; () banked
  8974  0017C2  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8975                           
  8976                           ; BSR set to: 0
  8977  0017C4  0100               	movlb	0	; () banked
  8978  0017C6  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8979  0017C8  D7F3               	goto	l3578
  8980  0017CA  D020               	goto	l1088
  8981  0017CC                     l3582:
  8982                           
  8983                           ; BSR set to: 0
  8984  0017CC  0E17               	movlw	23
  8985  0017CE  0100               	movlb	0	; () banked
  8986  0017D0  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8987  0017D2  D019               	goto	l3590
  8988  0017D4                     u3450:
  8989                           
  8990                           ; BSR set to: 0
  8991  0017D4  0E00               	movlw	0
  8992  0017D6  0100               	movlb	0	; () banked
  8993  0017D8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  8994  0017DA  0E00               	movlw	0
  8995  0017DC  0100               	movlb	0	; () banked
  8996  0017DE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8997  0017E0  0E00               	movlw	0
  8998  0017E2  0100               	movlb	0	; () banked
  8999  0017E4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9000  0017E6  0E00               	movlw	0
  9001  0017E8  0100               	movlb	0	; () banked
  9002  0017EA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9003  0017EC  D017               	goto	l1079
  9004  0017EE                     l3588:
  9005                           
  9006                           ; BSR set to: 0
  9007  0017EE  0100               	movlb	0	; () banked
  9008  0017F0  90D8               	bcf	status,0,c
  9009  0017F2  0100               	movlb	0	; () banked
  9010  0017F4  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9011  0017F6  0100               	movlb	0	; () banked
  9012  0017F8  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9013  0017FA  0100               	movlb	0	; () banked
  9014  0017FC  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9015  0017FE  0100               	movlb	0	; () banked
  9016  001800  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9017  001802  0100               	movlb	0	; () banked
  9018  001804  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  9019  001806                     l3590:
  9020                           
  9021                           ; BSR set to: 0
  9022  001806  0100               	movlb	0	; () banked
  9023  001808  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  9024  00180A  D7F1               	goto	l3588
  9025  00180C                     l1088:
  9026                           
  9027                           ; BSR set to: 0
  9028  00180C  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9029  001810  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9030  001814  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9031  001818  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9032  00181C                     l1079:
  9033                           
  9034                           ; BSR set to: 0
  9035  00181C  0012               	return	
  9036  00181E                     __end_of__tdiv_to_l_:
  9037                           	opt stack 0
  9038                           tblptru	equ	0xFF8
  9039                           tblptrh	equ	0xFF7
  9040                           tblptrl	equ	0xFF6
  9041                           tablat	equ	0xFF5
  9042                           prodh	equ	0xFF4
  9043                           prodl	equ	0xFF3
  9044                           intcon	equ	0xFF2
  9045                           intcon2	equ	0xFF1
  9046                           intcon3	equ	0xFF0
  9047                           indf0	equ	0xFEF
  9048                           postinc0	equ	0xFEE
  9049                           fsr0h	equ	0xFEA
  9050                           fsr0l	equ	0xFE9
  9051                           wreg	equ	0xFE8
  9052                           postinc1	equ	0xFE6
  9053                           postdec1	equ	0xFE5
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           fsr2h	equ	0xFDA
  9059                           fsr2l	equ	0xFD9
  9060                           status	equ	0xFD8
  9061                           
  9062 ;; *************** function __div_to_l_ *****************
  9063 ;; Defined at:
  9064 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;  f1              3    0[BANK0 ] unsigned long 
  9067 ;;  f2              3    3[BANK0 ] unsigned long 
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  quot            4   10[BANK0 ] unsigned long 
  9070 ;;  exp1            1   15[BANK0 ] unsigned char 
  9071 ;;  cntr            1   14[BANK0 ] unsigned char 
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  4    0[BANK0 ] unsigned long 
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9081 ;;      Params:         0       6       0       0       0       0       0       0       0
  9082 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9083 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9084 ;;      Totals:         0      16       0       0       0       0       0       0       0
  9085 ;;Total ram usage:       16 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    4
  9088 ;; This function calls:
  9089 ;;		Nothing
  9090 ;; This function is called by:
  9091 ;;		_sprintf
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           	psect	text37
  9096  0014AA                     __ptext37:
  9097                           	opt stack 0
  9098  0014AA                     __div_to_l_:
  9099                           	opt stack 23
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;incstack = 0
  9103  0014AA  0100               	movlb	0	; () banked
  9104  0014AC  C060  F066         	movff	__div_to_l_@f1,??__div_to_l_
  9105  0014B0  0100               	movlb	0	; () banked
  9106  0014B2  C061  F067         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  9107  0014B6  0100               	movlb	0	; () banked
  9108  0014B8  C062  F068         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  9109  0014BC  0100               	movlb	0	; () banked
  9110  0014BE  C063  F069         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  9111  0014C2  0E18               	movlw	24
  9112  0014C4  D006               	goto	u3470
  9113  0014C6                     u3475:
  9114  0014C6  0100               	movlb	0	; () banked
  9115  0014C8  90D8               	bcf	status,0,c
  9116  0014CA  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  9117  0014CC  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  9118  0014CE  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  9119  0014D0  3366               	rrcf	??__div_to_l_& (0+255),f,b
  9120  0014D2                     u3470:
  9121  0014D2  2EE8               	decfsz	wreg,f,c
  9122  0014D4  D7F8               	goto	u3475
  9123  0014D6  0100               	movlb	0	; () banked
  9124  0014D8  5166               	movf	??__div_to_l_& (0+255),w,b
  9125  0014DA  0100               	movlb	0	; () banked
  9126  0014DC  6F6F               	movwf	__div_to_l_@exp1& (0+255),b
  9127  0014DE  0100               	movlb	0	; () banked
  9128  0014E0  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9129  0014E2  D001               	goto	l3598
  9130  0014E4  D0AC               	goto	u3540
  9131  0014E6                     l3598:
  9132                           
  9133                           ; BSR set to: 0
  9134  0014E6  0100               	movlb	0	; () banked
  9135  0014E8  C063  F066         	movff	__div_to_l_@f2,??__div_to_l_
  9136  0014EC  0100               	movlb	0	; () banked
  9137  0014EE  C064  F067         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  9138  0014F2  0100               	movlb	0	; () banked
  9139  0014F4  C065  F068         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  9140  0014F8  0100               	movlb	0	; () banked
  9141  0014FA  C066  F069         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  9142  0014FE  0E18               	movlw	24
  9143  001500  D006               	goto	u3490
  9144  001502                     u3495:
  9145  001502  0100               	movlb	0	; () banked
  9146  001504  90D8               	bcf	status,0,c
  9147  001506  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  9148  001508  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  9149  00150A  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  9150  00150C  3366               	rrcf	??__div_to_l_& (0+255),f,b
  9151  00150E                     u3490:
  9152  00150E  2EE8               	decfsz	wreg,f,c
  9153  001510  D7F8               	goto	u3495
  9154  001512  0100               	movlb	0	; () banked
  9155  001514  5166               	movf	??__div_to_l_& (0+255),w,b
  9156  001516  0100               	movlb	0	; () banked
  9157  001518  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9158  00151A  0100               	movlb	0	; () banked
  9159  00151C  676E               	tstfsz	__div_to_l_@cntr& (0+255),b
  9160  00151E  D001               	goto	l3604
  9161  001520  D08E               	goto	u3540
  9162  001522                     l3604:
  9163                           
  9164                           ; BSR set to: 0
  9165  001522  0100               	movlb	0	; () banked
  9166  001524  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9167                           
  9168                           ; BSR set to: 0
  9169  001526  0EFF               	movlw	255
  9170  001528  0100               	movlb	0	; () banked
  9171  00152A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  9172  00152C  0EFF               	movlw	255
  9173  00152E  0100               	movlb	0	; () banked
  9174  001530  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9175  001532  0EFF               	movlw	255
  9176  001534  0100               	movlb	0	; () banked
  9177  001536  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9178  001538  0E00               	movlw	0
  9179  00153A  0100               	movlb	0	; () banked
  9180  00153C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9181                           
  9182                           ; BSR set to: 0
  9183  00153E  0100               	movlb	0	; () banked
  9184  001540  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9185  001542  0EFF               	movlw	255
  9186  001544  0100               	movlb	0	; () banked
  9187  001546  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  9188  001548  0EFF               	movlw	255
  9189  00154A  0100               	movlb	0	; () banked
  9190  00154C  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9191  00154E  0EFF               	movlw	255
  9192  001550  0100               	movlb	0	; () banked
  9193  001552  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9194  001554  0E00               	movlw	0
  9195  001556  0100               	movlb	0	; () banked
  9196  001558  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9197                           
  9198                           ; BSR set to: 0
  9199  00155A  0E00               	movlw	0
  9200  00155C  0100               	movlb	0	; () banked
  9201  00155E  6F6A               	movwf	__div_to_l_@quot& (0+255),b
  9202  001560  0E00               	movlw	0
  9203  001562  0100               	movlb	0	; () banked
  9204  001564  6F6B               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9205  001566  0E00               	movlw	0
  9206  001568  0100               	movlb	0	; () banked
  9207  00156A  6F6C               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9208  00156C  0E00               	movlw	0
  9209  00156E  0100               	movlb	0	; () banked
  9210  001570  6F6D               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9211                           
  9212                           ; BSR set to: 0
  9213  001572  0E7F               	movlw	127
  9214  001574  0100               	movlb	0	; () banked
  9215  001576  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9216                           
  9217                           ; BSR set to: 0
  9218  001578  0100               	movlb	0	; () banked
  9219  00157A  516E               	movf	__div_to_l_@cntr& (0+255),w,b
  9220  00157C  0FA0               	addlw	160
  9221  00157E  0100               	movlb	0	; () banked
  9222  001580  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9223                           
  9224                           ; BSR set to: 0
  9225  001582  0E20               	movlw	32
  9226  001584  0100               	movlb	0	; () banked
  9227  001586  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9228  001588                     l3618:
  9229                           
  9230                           ; BSR set to: 0
  9231  001588  0100               	movlb	0	; () banked
  9232  00158A  90D8               	bcf	status,0,c
  9233  00158C  0100               	movlb	0	; () banked
  9234  00158E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9235  001590  0100               	movlb	0	; () banked
  9236  001592  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9237  001594  0100               	movlb	0	; () banked
  9238  001596  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9239  001598  0100               	movlb	0	; () banked
  9240  00159A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9241                           
  9242                           ; BSR set to: 0
  9243  00159C  0100               	movlb	0	; () banked
  9244  00159E  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9245  0015A0  0100               	movlb	0	; () banked
  9246  0015A2  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  9247  0015A4  0100               	movlb	0	; () banked
  9248  0015A6  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9249  0015A8  0100               	movlb	0	; () banked
  9250  0015AA  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9251  0015AC  0100               	movlb	0	; () banked
  9252  0015AE  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9253  0015B0  0100               	movlb	0	; () banked
  9254  0015B2  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9255  0015B4  0100               	movlb	0	; () banked
  9256  0015B6  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9257  0015B8  0100               	movlb	0	; () banked
  9258  0015BA  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9259  0015BC  A0D8               	btfss	status,0,c
  9260  0015BE  D012               	goto	l3626
  9261                           
  9262                           ; BSR set to: 0
  9263  0015C0  0100               	movlb	0	; () banked
  9264  0015C2  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9265  0015C4  0100               	movlb	0	; () banked
  9266  0015C6  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  9267  0015C8  0100               	movlb	0	; () banked
  9268  0015CA  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9269  0015CC  0100               	movlb	0	; () banked
  9270  0015CE  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9271  0015D0  0100               	movlb	0	; () banked
  9272  0015D2  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9273  0015D4  0100               	movlb	0	; () banked
  9274  0015D6  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9275  0015D8  0100               	movlb	0	; () banked
  9276  0015DA  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9277  0015DC  0100               	movlb	0	; () banked
  9278  0015DE  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9279                           
  9280                           ; BSR set to: 0
  9281  0015E0  0100               	movlb	0	; () banked
  9282  0015E2  816A               	bsf	__div_to_l_@quot& (0+255),0,b
  9283  0015E4                     l3626:
  9284                           
  9285                           ; BSR set to: 0
  9286  0015E4  0100               	movlb	0	; () banked
  9287  0015E6  90D8               	bcf	status,0,c
  9288  0015E8  0100               	movlb	0	; () banked
  9289  0015EA  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  9290  0015EC  0100               	movlb	0	; () banked
  9291  0015EE  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9292  0015F0  0100               	movlb	0	; () banked
  9293  0015F2  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9294  0015F4  0100               	movlb	0	; () banked
  9295  0015F6  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9296                           
  9297                           ; BSR set to: 0
  9298  0015F8  0100               	movlb	0	; () banked
  9299  0015FA  2F6E               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9300  0015FC  D7C5               	goto	l3618
  9301                           
  9302                           ; BSR set to: 0
  9303  0015FE  0100               	movlb	0	; () banked
  9304  001600  AF6F               	btfss	__div_to_l_@exp1& (0+255),7,b
  9305  001602  D019               	goto	l3640
  9306                           
  9307                           ; BSR set to: 0
  9308  001604  0100               	movlb	0	; () banked
  9309  001606  516F               	movf	__div_to_l_@exp1& (0+255),w,b
  9310  001608  0A80               	xorlw	128
  9311  00160A  0100               	movlb	0	; () banked
  9312  00160C  6F66               	movwf	??__div_to_l_& (0+255),b
  9313  00160E  0EE1               	movlw	225
  9314  001610  0A80               	xorlw	128
  9315  001612  0100               	movlb	0	; () banked
  9316  001614  5D66               	subwf	??__div_to_l_& (0+255),w,b
  9317  001616  A0D8               	btfss	status,0,c
  9318  001618  D012               	goto	u3540
  9319  00161A                     l3636:
  9320                           
  9321                           ; BSR set to: 0
  9322  00161A  0100               	movlb	0	; () banked
  9323  00161C  90D8               	bcf	status,0,c
  9324  00161E  0100               	movlb	0	; () banked
  9325  001620  336D               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9326  001622  0100               	movlb	0	; () banked
  9327  001624  336C               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9328  001626  0100               	movlb	0	; () banked
  9329  001628  336B               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9330  00162A  0100               	movlb	0	; () banked
  9331  00162C  336A               	rrcf	__div_to_l_@quot& (0+255),f,b
  9332                           
  9333                           ; BSR set to: 0
  9334  00162E  0100               	movlb	0	; () banked
  9335  001630  3F6F               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9336  001632  D7F3               	goto	l3636
  9337  001634  D020               	goto	l970
  9338  001636                     l3640:
  9339                           
  9340                           ; BSR set to: 0
  9341  001636  0E1F               	movlw	31
  9342  001638  0100               	movlb	0	; () banked
  9343  00163A  656F               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9344  00163C  D019               	goto	l3648
  9345  00163E                     u3540:
  9346                           
  9347                           ; BSR set to: 0
  9348  00163E  0E00               	movlw	0
  9349  001640  0100               	movlb	0	; () banked
  9350  001642  6F60               	movwf	?__div_to_l_& (0+255),b
  9351  001644  0E00               	movlw	0
  9352  001646  0100               	movlb	0	; () banked
  9353  001648  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9354  00164A  0E00               	movlw	0
  9355  00164C  0100               	movlb	0	; () banked
  9356  00164E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9357  001650  0E00               	movlw	0
  9358  001652  0100               	movlb	0	; () banked
  9359  001654  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9360  001656  D017               	goto	l961
  9361  001658                     l3646:
  9362                           
  9363                           ; BSR set to: 0
  9364  001658  0100               	movlb	0	; () banked
  9365  00165A  90D8               	bcf	status,0,c
  9366  00165C  0100               	movlb	0	; () banked
  9367  00165E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9368  001660  0100               	movlb	0	; () banked
  9369  001662  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9370  001664  0100               	movlb	0	; () banked
  9371  001666  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9372  001668  0100               	movlb	0	; () banked
  9373  00166A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9374  00166C  0100               	movlb	0	; () banked
  9375  00166E  076F               	decf	__div_to_l_@exp1& (0+255),f,b
  9376  001670                     l3648:
  9377                           
  9378                           ; BSR set to: 0
  9379  001670  0100               	movlb	0	; () banked
  9380  001672  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9381  001674  D7F1               	goto	l3646
  9382  001676                     l970:
  9383                           
  9384                           ; BSR set to: 0
  9385  001676  C06A  F060         	movff	__div_to_l_@quot,?__div_to_l_
  9386  00167A  C06B  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9387  00167E  C06C  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9388  001682  C06D  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9389  001686                     l961:
  9390                           
  9391                           ; BSR set to: 0
  9392  001686  0012               	return	
  9393  001688                     __end_of__div_to_l_:
  9394                           	opt stack 0
  9395                           tblptru	equ	0xFF8
  9396                           tblptrh	equ	0xFF7
  9397                           tblptrl	equ	0xFF6
  9398                           tablat	equ	0xFF5
  9399                           prodh	equ	0xFF4
  9400                           prodl	equ	0xFF3
  9401                           intcon	equ	0xFF2
  9402                           intcon2	equ	0xFF1
  9403                           intcon3	equ	0xFF0
  9404                           indf0	equ	0xFEF
  9405                           postinc0	equ	0xFEE
  9406                           fsr0h	equ	0xFEA
  9407                           fsr0l	equ	0xFE9
  9408                           wreg	equ	0xFE8
  9409                           postinc1	equ	0xFE6
  9410                           postdec1	equ	0xFE5
  9411                           fsr1l	equ	0xFE1
  9412                           indf2	equ	0xFDF
  9413                           postinc2	equ	0xFDE
  9414                           postdec2	equ	0xFDD
  9415                           fsr2h	equ	0xFDA
  9416                           fsr2l	equ	0xFD9
  9417                           status	equ	0xFD8
  9418                           
  9419 ;; *************** function ___lltoft *****************
  9420 ;; Defined at:
  9421 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  c               4    8[BANK0 ] unsigned long 
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;  exp             1   16[BANK0 ] unsigned char 
  9426 ;; Return value:  Size  Location     Type
  9427 ;;                  3    8[BANK0 ] float 
  9428 ;; Registers used:
  9429 ;;		wreg, status,2, status,0, cstack
  9430 ;; Tracked objects:
  9431 ;;		On entry : 0/0
  9432 ;;		On exit  : 0/0
  9433 ;;		Unchanged: 0/0
  9434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9435 ;;      Params:         0       4       0       0       0       0       0       0       0
  9436 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9437 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9438 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9439 ;;Total ram usage:        9 bytes
  9440 ;; Hardware stack levels used:    1
  9441 ;; Hardware stack levels required when called:    5
  9442 ;; This function calls:
  9443 ;;		___ftpack
  9444 ;; This function is called by:
  9445 ;;		_sprintf
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           	psect	text38
  9450  002B4E                     __ptext38:
  9451                           	opt stack 0
  9452  002B4E                     ___lltoft:
  9453                           	opt stack 22
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;incstack = 0
  9457  002B4E  0E8E               	movlw	142
  9458  002B50  0100               	movlb	0	; () banked
  9459  002B52  6F70               	movwf	___lltoft@exp& (0+255),b
  9460  002B54  D00C               	goto	l3766
  9461  002B56                     l3764:
  9462                           
  9463                           ; BSR set to: 0
  9464  002B56  0100               	movlb	0	; () banked
  9465  002B58  90D8               	bcf	status,0,c
  9466  002B5A  0100               	movlb	0	; () banked
  9467  002B5C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9468  002B5E  0100               	movlb	0	; () banked
  9469  002B60  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9470  002B62  0100               	movlb	0	; () banked
  9471  002B64  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9472  002B66  0100               	movlb	0	; () banked
  9473  002B68  3368               	rrcf	___lltoft@c& (0+255),f,b
  9474  002B6A  0100               	movlb	0	; () banked
  9475  002B6C  2B70               	incf	___lltoft@exp& (0+255),f,b
  9476  002B6E                     l3766:
  9477                           
  9478                           ; BSR set to: 0
  9479  002B6E  0E00               	movlw	0
  9480  002B70  0100               	movlb	0	; () banked
  9481  002B72  1568               	andwf	___lltoft@c& (0+255),w,b
  9482  002B74  0100               	movlb	0	; () banked
  9483  002B76  6F6C               	movwf	??___lltoft& (0+255),b
  9484  002B78  0E00               	movlw	0
  9485  002B7A  0100               	movlb	0	; () banked
  9486  002B7C  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  9487  002B7E  0100               	movlb	0	; () banked
  9488  002B80  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  9489  002B82  0E00               	movlw	0
  9490  002B84  0100               	movlb	0	; () banked
  9491  002B86  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9492  002B88  0100               	movlb	0	; () banked
  9493  002B8A  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  9494  002B8C  0EFF               	movlw	255
  9495  002B8E  0100               	movlb	0	; () banked
  9496  002B90  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9497  002B92  0100               	movlb	0	; () banked
  9498  002B94  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  9499  002B96  0100               	movlb	0	; () banked
  9500  002B98  516F               	movf	(??___lltoft+3)& (0+255),w,b
  9501  002B9A  116C               	iorwf	??___lltoft& (0+255),w,b
  9502  002B9C  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9503  002B9E  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9504  002BA0  A4D8               	btfss	status,2,c
  9505  002BA2  D7D9               	goto	l3764
  9506                           
  9507                           ; BSR set to: 0
  9508                           
  9509                           ; BSR set to: 0
  9510  002BA4  C068  F060         	movff	___lltoft@c,___ftpack@arg
  9511  002BA8  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  9512  002BAC  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  9513  002BB0  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  9514  002BB4  0E00               	movlw	0
  9515  002BB6  0100               	movlb	0	; () banked
  9516  002BB8  6F64               	movwf	___ftpack@sign& (0+255),b
  9517  002BBA  EC5D  F00F         	call	___ftpack	;wreg free
  9518  002BBE  C060  F068         	movff	?___ftpack,?___lltoft
  9519  002BC2  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  9520  002BC6  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  9521  002BCA  0012               	return	
  9522  002BCC                     __end_of___lltoft:
  9523                           	opt stack 0
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           intcon3	equ	0xFF0
  9533                           indf0	equ	0xFEF
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           postinc1	equ	0xFE6
  9539                           postdec1	equ	0xFE5
  9540                           fsr1l	equ	0xFE1
  9541                           indf2	equ	0xFDF
  9542                           postinc2	equ	0xFDE
  9543                           postdec2	equ	0xFDD
  9544                           fsr2h	equ	0xFDA
  9545                           fsr2l	equ	0xFD9
  9546                           status	equ	0xFD8
  9547                           
  9548 ;; *************** function ___llmod *****************
  9549 ;; Defined at:
  9550 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  dividend        4   13[BANK0 ] unsigned long 
  9553 ;;  divisor         4   17[BANK0 ] unsigned long 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;  counter         1   21[BANK0 ] unsigned char 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  4   13[BANK0 ] unsigned long 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9565 ;;      Params:         0       8       0       0       0       0       0       0       0
  9566 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9568 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9569 ;;Total ram usage:        9 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    4
  9572 ;; This function calls:
  9573 ;;		Nothing
  9574 ;; This function is called by:
  9575 ;;		_sprintf
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text39
  9580  002884                     __ptext39:
  9581                           	opt stack 0
  9582  002884                     ___llmod:
  9583                           	opt stack 23
  9584                           
  9585                           ;incstack = 0
  9586  002884  0100               	movlb	0	; () banked
  9587  002886  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9588  002888  1171               	iorwf	___llmod@divisor& (0+255),w,b
  9589  00288A  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9590  00288C  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9591  00288E  B4D8               	btfsc	status,2,c
  9592  002890  D042               	goto	l1172
  9593                           
  9594                           ; BSR set to: 0
  9595  002892  0E01               	movlw	1
  9596  002894  0100               	movlb	0	; () banked
  9597  002896  6F75               	movwf	___llmod@counter& (0+255),b
  9598  002898  D00C               	goto	l3752
  9599  00289A                     l3750:
  9600                           
  9601                           ; BSR set to: 0
  9602  00289A  0100               	movlb	0	; () banked
  9603  00289C  90D8               	bcf	status,0,c
  9604  00289E  0100               	movlb	0	; () banked
  9605  0028A0  3771               	rlcf	___llmod@divisor& (0+255),f,b
  9606  0028A2  0100               	movlb	0	; () banked
  9607  0028A4  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9608  0028A6  0100               	movlb	0	; () banked
  9609  0028A8  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9610  0028AA  0100               	movlb	0	; () banked
  9611  0028AC  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9612  0028AE  0100               	movlb	0	; () banked
  9613  0028B0  2B75               	incf	___llmod@counter& (0+255),f,b
  9614  0028B2                     l3752:
  9615                           
  9616                           ; BSR set to: 0
  9617  0028B2  0100               	movlb	0	; () banked
  9618  0028B4  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9619  0028B6  D7F1               	goto	l3750
  9620  0028B8                     l3754:
  9621                           
  9622                           ; BSR set to: 0
  9623  0028B8  0100               	movlb	0	; () banked
  9624  0028BA  5171               	movf	___llmod@divisor& (0+255),w,b
  9625  0028BC  0100               	movlb	0	; () banked
  9626  0028BE  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  9627  0028C0  0100               	movlb	0	; () banked
  9628  0028C2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9629  0028C4  0100               	movlb	0	; () banked
  9630  0028C6  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9631  0028C8  0100               	movlb	0	; () banked
  9632  0028CA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9633  0028CC  0100               	movlb	0	; () banked
  9634  0028CE  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9635  0028D0  0100               	movlb	0	; () banked
  9636  0028D2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9637  0028D4  0100               	movlb	0	; () banked
  9638  0028D6  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9639  0028D8  A0D8               	btfss	status,0,c
  9640  0028DA  D010               	goto	l3758
  9641                           
  9642                           ; BSR set to: 0
  9643  0028DC  0100               	movlb	0	; () banked
  9644  0028DE  5171               	movf	___llmod@divisor& (0+255),w,b
  9645  0028E0  0100               	movlb	0	; () banked
  9646  0028E2  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  9647  0028E4  0100               	movlb	0	; () banked
  9648  0028E6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9649  0028E8  0100               	movlb	0	; () banked
  9650  0028EA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9651  0028EC  0100               	movlb	0	; () banked
  9652  0028EE  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9653  0028F0  0100               	movlb	0	; () banked
  9654  0028F2  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9655  0028F4  0100               	movlb	0	; () banked
  9656  0028F6  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9657  0028F8  0100               	movlb	0	; () banked
  9658  0028FA  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9659  0028FC                     l3758:
  9660                           
  9661                           ; BSR set to: 0
  9662  0028FC  0100               	movlb	0	; () banked
  9663  0028FE  90D8               	bcf	status,0,c
  9664  002900  0100               	movlb	0	; () banked
  9665  002902  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9666  002904  0100               	movlb	0	; () banked
  9667  002906  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9668  002908  0100               	movlb	0	; () banked
  9669  00290A  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9670  00290C  0100               	movlb	0	; () banked
  9671  00290E  3371               	rrcf	___llmod@divisor& (0+255),f,b
  9672                           
  9673                           ; BSR set to: 0
  9674  002910  0100               	movlb	0	; () banked
  9675  002912  2F75               	decfsz	___llmod@counter& (0+255),f,b
  9676  002914  D7D1               	goto	l3754
  9677  002916                     l1172:
  9678                           
  9679                           ; BSR set to: 0
  9680  002916  C06D  F06D         	movff	___llmod@dividend,?___llmod
  9681  00291A  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  9682  00291E  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  9683  002922  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  9684                           
  9685                           ; BSR set to: 0
  9686  002926  0012               	return	
  9687  002928                     __end_of___llmod:
  9688                           	opt stack 0
  9689                           tblptru	equ	0xFF8
  9690                           tblptrh	equ	0xFF7
  9691                           tblptrl	equ	0xFF6
  9692                           tablat	equ	0xFF5
  9693                           prodh	equ	0xFF4
  9694                           prodl	equ	0xFF3
  9695                           intcon	equ	0xFF2
  9696                           intcon2	equ	0xFF1
  9697                           intcon3	equ	0xFF0
  9698                           indf0	equ	0xFEF
  9699                           postinc0	equ	0xFEE
  9700                           fsr0h	equ	0xFEA
  9701                           fsr0l	equ	0xFE9
  9702                           wreg	equ	0xFE8
  9703                           postinc1	equ	0xFE6
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function ___lldiv *****************
  9714 ;; Defined at:
  9715 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  dividend        4    0[BANK0 ] unsigned long 
  9718 ;;  divisor         4    4[BANK0 ] unsigned long 
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;  quotient        4    8[BANK0 ] unsigned long 
  9721 ;;  counter         1   12[BANK0 ] unsigned char 
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  4    0[BANK0 ] unsigned long 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2, status,0
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9731 ;;      Params:         0       8       0       0       0       0       0       0       0
  9732 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9734 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9735 ;;Total ram usage:       13 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; Hardware stack levels required when called:    4
  9738 ;; This function calls:
  9739 ;;		Nothing
  9740 ;; This function is called by:
  9741 ;;		_sprintf
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text40
  9746  00218A                     __ptext40:
  9747                           	opt stack 0
  9748  00218A                     ___lldiv:
  9749                           	opt stack 23
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;incstack = 0
  9753  00218A  0E00               	movlw	0
  9754  00218C  0100               	movlb	0	; () banked
  9755  00218E  6F68               	movwf	___lldiv@quotient& (0+255),b
  9756  002190  0E00               	movlw	0
  9757  002192  0100               	movlb	0	; () banked
  9758  002194  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  9759  002196  0E00               	movlw	0
  9760  002198  0100               	movlb	0	; () banked
  9761  00219A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9762  00219C  0E00               	movlw	0
  9763  00219E  0100               	movlb	0	; () banked
  9764  0021A0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9765                           
  9766                           ; BSR set to: 0
  9767  0021A2  0100               	movlb	0	; () banked
  9768  0021A4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9769  0021A6  1164               	iorwf	___lldiv@divisor& (0+255),w,b
  9770  0021A8  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9771  0021AA  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9772  0021AC  B4D8               	btfsc	status,2,c
  9773  0021AE  D04E               	goto	l1162
  9774                           
  9775                           ; BSR set to: 0
  9776  0021B0  0E01               	movlw	1
  9777  0021B2  0100               	movlb	0	; () banked
  9778  0021B4  6F6C               	movwf	___lldiv@counter& (0+255),b
  9779  0021B6  D00C               	goto	l3732
  9780  0021B8                     l3730:
  9781                           
  9782                           ; BSR set to: 0
  9783  0021B8  0100               	movlb	0	; () banked
  9784  0021BA  90D8               	bcf	status,0,c
  9785  0021BC  0100               	movlb	0	; () banked
  9786  0021BE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  9787  0021C0  0100               	movlb	0	; () banked
  9788  0021C2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9789  0021C4  0100               	movlb	0	; () banked
  9790  0021C6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9791  0021C8  0100               	movlb	0	; () banked
  9792  0021CA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9793  0021CC  0100               	movlb	0	; () banked
  9794  0021CE  2B6C               	incf	___lldiv@counter& (0+255),f,b
  9795  0021D0                     l3732:
  9796                           
  9797                           ; BSR set to: 0
  9798  0021D0  0100               	movlb	0	; () banked
  9799  0021D2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9800  0021D4  D7F1               	goto	l3730
  9801  0021D6                     l3734:
  9802                           
  9803                           ; BSR set to: 0
  9804  0021D6  0100               	movlb	0	; () banked
  9805  0021D8  90D8               	bcf	status,0,c
  9806  0021DA  0100               	movlb	0	; () banked
  9807  0021DC  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  9808  0021DE  0100               	movlb	0	; () banked
  9809  0021E0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9810  0021E2  0100               	movlb	0	; () banked
  9811  0021E4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9812  0021E6  0100               	movlb	0	; () banked
  9813  0021E8  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9814                           
  9815                           ; BSR set to: 0
  9816  0021EA  0100               	movlb	0	; () banked
  9817  0021EC  5164               	movf	___lldiv@divisor& (0+255),w,b
  9818  0021EE  0100               	movlb	0	; () banked
  9819  0021F0  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  9820  0021F2  0100               	movlb	0	; () banked
  9821  0021F4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9822  0021F6  0100               	movlb	0	; () banked
  9823  0021F8  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9824  0021FA  0100               	movlb	0	; () banked
  9825  0021FC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9826  0021FE  0100               	movlb	0	; () banked
  9827  002200  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9828  002202  0100               	movlb	0	; () banked
  9829  002204  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9830  002206  0100               	movlb	0	; () banked
  9831  002208  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9832  00220A  A0D8               	btfss	status,0,c
  9833  00220C  D012               	goto	l3742
  9834                           
  9835                           ; BSR set to: 0
  9836  00220E  0100               	movlb	0	; () banked
  9837  002210  5164               	movf	___lldiv@divisor& (0+255),w,b
  9838  002212  0100               	movlb	0	; () banked
  9839  002214  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  9840  002216  0100               	movlb	0	; () banked
  9841  002218  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9842  00221A  0100               	movlb	0	; () banked
  9843  00221C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9844  00221E  0100               	movlb	0	; () banked
  9845  002220  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9846  002222  0100               	movlb	0	; () banked
  9847  002224  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9848  002226  0100               	movlb	0	; () banked
  9849  002228  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9850  00222A  0100               	movlb	0	; () banked
  9851  00222C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9852                           
  9853                           ; BSR set to: 0
  9854  00222E  0100               	movlb	0	; () banked
  9855  002230  8168               	bsf	___lldiv@quotient& (0+255),0,b
  9856  002232                     l3742:
  9857                           
  9858                           ; BSR set to: 0
  9859  002232  0100               	movlb	0	; () banked
  9860  002234  90D8               	bcf	status,0,c
  9861  002236  0100               	movlb	0	; () banked
  9862  002238  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9863  00223A  0100               	movlb	0	; () banked
  9864  00223C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9865  00223E  0100               	movlb	0	; () banked
  9866  002240  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9867  002242  0100               	movlb	0	; () banked
  9868  002244  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  9869                           
  9870                           ; BSR set to: 0
  9871  002246  0100               	movlb	0	; () banked
  9872  002248  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  9873  00224A  D7C5               	goto	l3734
  9874  00224C                     l1162:
  9875                           
  9876                           ; BSR set to: 0
  9877  00224C  C068  F060         	movff	___lldiv@quotient,?___lldiv
  9878  002250  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  9879  002254  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  9880  002258  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  9881                           
  9882                           ; BSR set to: 0
  9883  00225C  0012               	return	
  9884  00225E                     __end_of___lldiv:
  9885                           	opt stack 0
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon	equ	0xFF2
  9893                           intcon2	equ	0xFF1
  9894                           intcon3	equ	0xFF0
  9895                           indf0	equ	0xFEF
  9896                           postinc0	equ	0xFEE
  9897                           fsr0h	equ	0xFEA
  9898                           fsr0l	equ	0xFE9
  9899                           wreg	equ	0xFE8
  9900                           postinc1	equ	0xFE6
  9901                           postdec1	equ	0xFE5
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           fsr2h	equ	0xFDA
  9907                           fsr2l	equ	0xFD9
  9908                           status	equ	0xFD8
  9909                           
  9910 ;; *************** function ___fttol *****************
  9911 ;; Defined at:
  9912 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;  f1              3   42[BANK0 ] float 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;  lval            4   52[BANK0 ] unsigned long 
  9917 ;;  exp1            1   56[BANK0 ] unsigned char 
  9918 ;;  sign1           1   51[BANK0 ] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  4   42[BANK0 ] long 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9928 ;;      Params:         0       4       0       0       0       0       0       0       0
  9929 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9930 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9931 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9932 ;;Total ram usage:       15 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    4
  9935 ;; This function calls:
  9936 ;;		Nothing
  9937 ;; This function is called by:
  9938 ;;		_PWM_DutyCycle1
  9939 ;;		_PWM_DutyCycle2
  9940 ;;		_sprintf
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text41
  9945  001C60                     __ptext41:
  9946                           	opt stack 0
  9947  001C60                     ___fttol:
  9948                           	opt stack 25
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;incstack = 0
  9952  001C60  0100               	movlb	0	; () banked
  9953  001C62  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  9954  001C66  0100               	movlb	0	; () banked
  9955  001C68  6B8F               	clrf	(??___fttol+1)& (0+255),b
  9956  001C6A  6B90               	clrf	(??___fttol+2)& (0+255),b
  9957  001C6C  0100               	movlb	0	; () banked
  9958  001C6E  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9959  001C70  0100               	movlb	0	; () banked
  9960  001C72  378E               	rlcf	??___fttol& (0+255),f,b
  9961  001C74  E301               	bnc	u3601
  9962  001C76  818F               	bsf	(??___fttol+1)& (0+255),0,b
  9963  001C78                     u3601:
  9964  001C78  0100               	movlb	0	; () banked
  9965  001C7A  518E               	movf	??___fttol& (0+255),w,b
  9966  001C7C  0100               	movlb	0	; () banked
  9967  001C7E  6F98               	movwf	___fttol@exp1& (0+255),b
  9968  001C80  0100               	movlb	0	; () banked
  9969  001C82  6798               	tstfsz	___fttol@exp1& (0+255),b
  9970  001C84  D001               	goto	l3684
  9971  001C86  D059               	goto	u3650
  9972  001C88                     l3684:
  9973                           
  9974                           ; BSR set to: 0
  9975  001C88  0E17               	movlw	23
  9976  001C8A  0100               	movlb	0	; () banked
  9977  001C8C  6F8E               	movwf	??___fttol& (0+255),b
  9978  001C8E  0100               	movlb	0	; () banked
  9979  001C90  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  9980  001C94  0100               	movlb	0	; () banked
  9981  001C96  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  9982  001C9A  0100               	movlb	0	; () banked
  9983  001C9C  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  9984  001CA0  0100               	movlb	0	; () banked
  9985  001CA2  298E               	incf	??___fttol& (0+255),w,b
  9986  001CA4  0100               	movlb	0	; () banked
  9987  001CA6  6F92               	movwf	(??___fttol+4)& (0+255),b
  9988  001CA8  D005               	goto	u3620
  9989  001CAA                     u3625:
  9990  001CAA  0100               	movlb	0	; () banked
  9991  001CAC  90D8               	bcf	status,0,c
  9992  001CAE  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  9993  001CB0  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  9994  001CB2  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  9995  001CB4                     u3620:
  9996  001CB4  0100               	movlb	0	; () banked
  9997  001CB6  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  9998  001CB8  D7F8               	goto	u3625
  9999  001CBA  0100               	movlb	0	; () banked
 10000  001CBC  518F               	movf	(??___fttol+1)& (0+255),w,b
 10001  001CBE  0100               	movlb	0	; () banked
 10002  001CC0  6F93               	movwf	___fttol@sign1& (0+255),b
 10003                           
 10004                           ; BSR set to: 0
 10005  001CC2  0100               	movlb	0	; () banked
 10006  001CC4  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
 10007                           
 10008                           ; BSR set to: 0
 10009  001CC6  0EFF               	movlw	255
 10010  001CC8  0100               	movlb	0	; () banked
 10011  001CCA  178A               	andwf	___fttol@f1& (0+255),f,b
 10012  001CCC  0EFF               	movlw	255
 10013  001CCE  0100               	movlb	0	; () banked
 10014  001CD0  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
 10015  001CD2  0E00               	movlw	0
 10016  001CD4  0100               	movlb	0	; () banked
 10017  001CD6  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
 10018                           
 10019                           ; BSR set to: 0
 10020  001CD8  0100               	movlb	0	; () banked
 10021  001CDA  518A               	movf	___fttol@f1& (0+255),w,b
 10022  001CDC  0100               	movlb	0	; () banked
 10023  001CDE  6F94               	movwf	___fttol@lval& (0+255),b
 10024  001CE0  0100               	movlb	0	; () banked
 10025  001CE2  518B               	movf	(___fttol@f1+1)& (0+255),w,b
 10026  001CE4  0100               	movlb	0	; () banked
 10027  001CE6  6F95               	movwf	(___fttol@lval+1)& (0+255),b
 10028  001CE8  0100               	movlb	0	; () banked
 10029  001CEA  518C               	movf	(___fttol@f1+2)& (0+255),w,b
 10030  001CEC  0100               	movlb	0	; () banked
 10031  001CEE  6F96               	movwf	(___fttol@lval+2)& (0+255),b
 10032  001CF0  0100               	movlb	0	; () banked
 10033  001CF2  6B97               	clrf	(___fttol@lval+3)& (0+255),b
 10034                           
 10035                           ; BSR set to: 0
 10036  001CF4  0E8E               	movlw	142
 10037  001CF6  0100               	movlb	0	; () banked
 10038  001CF8  5F98               	subwf	___fttol@exp1& (0+255),f,b
 10039                           
 10040                           ; BSR set to: 0
 10041  001CFA  0100               	movlb	0	; () banked
 10042  001CFC  AF98               	btfss	___fttol@exp1& (0+255),7,b
 10043  001CFE  D019               	goto	l3706
 10044                           
 10045                           ; BSR set to: 0
 10046  001D00  0100               	movlb	0	; () banked
 10047  001D02  5198               	movf	___fttol@exp1& (0+255),w,b
 10048  001D04  0A80               	xorlw	128
 10049  001D06  0100               	movlb	0	; () banked
 10050  001D08  6F8E               	movwf	??___fttol& (0+255),b
 10051  001D0A  0EF1               	movlw	241
 10052  001D0C  0A80               	xorlw	128
 10053  001D0E  0100               	movlb	0	; () banked
 10054  001D10  5D8E               	subwf	??___fttol& (0+255),w,b
 10055  001D12  A0D8               	btfss	status,0,c
 10056  001D14  D012               	goto	u3650
 10057  001D16                     l3702:
 10058                           
 10059                           ; BSR set to: 0
 10060  001D16  0100               	movlb	0	; () banked
 10061  001D18  90D8               	bcf	status,0,c
 10062  001D1A  0100               	movlb	0	; () banked
 10063  001D1C  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10064  001D1E  0100               	movlb	0	; () banked
 10065  001D20  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10066  001D22  0100               	movlb	0	; () banked
 10067  001D24  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10068  001D26  0100               	movlb	0	; () banked
 10069  001D28  3394               	rrcf	___fttol@lval& (0+255),f,b
 10070                           
 10071                           ; BSR set to: 0
 10072  001D2A  0100               	movlb	0	; () banked
 10073  001D2C  3F98               	incfsz	___fttol@exp1& (0+255),f,b
 10074  001D2E  D7F3               	goto	l3702
 10075  001D30  D020               	goto	l3716
 10076  001D32                     l3706:
 10077                           
 10078                           ; BSR set to: 0
 10079  001D32  0E17               	movlw	23
 10080  001D34  0100               	movlb	0	; () banked
 10081  001D36  6598               	cpfsgt	___fttol@exp1& (0+255),b
 10082  001D38  D019               	goto	l3714
 10083  001D3A                     u3650:
 10084                           
 10085                           ; BSR set to: 0
 10086  001D3A  0E00               	movlw	0
 10087  001D3C  0100               	movlb	0	; () banked
 10088  001D3E  6F8A               	movwf	?___fttol& (0+255),b
 10089  001D40  0E00               	movlw	0
 10090  001D42  0100               	movlb	0	; () banked
 10091  001D44  6F8B               	movwf	(?___fttol+1)& (0+255),b
 10092  001D46  0E00               	movlw	0
 10093  001D48  0100               	movlb	0	; () banked
 10094  001D4A  6F8C               	movwf	(?___fttol+2)& (0+255),b
 10095  001D4C  0E00               	movlw	0
 10096  001D4E  0100               	movlb	0	; () banked
 10097  001D50  6F8D               	movwf	(?___fttol+3)& (0+255),b
 10098  001D52  D02A               	goto	l1123
 10099  001D54                     l3712:
 10100                           
 10101                           ; BSR set to: 0
 10102  001D54  0100               	movlb	0	; () banked
 10103  001D56  90D8               	bcf	status,0,c
 10104  001D58  0100               	movlb	0	; () banked
 10105  001D5A  3794               	rlcf	___fttol@lval& (0+255),f,b
 10106  001D5C  0100               	movlb	0	; () banked
 10107  001D5E  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10108  001D60  0100               	movlb	0	; () banked
 10109  001D62  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10110  001D64  0100               	movlb	0	; () banked
 10111  001D66  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10112  001D68  0100               	movlb	0	; () banked
 10113  001D6A  0798               	decf	___fttol@exp1& (0+255),f,b
 10114  001D6C                     l3714:
 10115                           
 10116                           ; BSR set to: 0
 10117  001D6C  0100               	movlb	0	; () banked
 10118  001D6E  6798               	tstfsz	___fttol@exp1& (0+255),b
 10119  001D70  D7F1               	goto	l3712
 10120  001D72                     l3716:
 10121                           
 10122                           ; BSR set to: 0
 10123  001D72  0100               	movlb	0	; () banked
 10124  001D74  5193               	movf	___fttol@sign1& (0+255),w,b
 10125  001D76  B4D8               	btfsc	status,2,c
 10126  001D78  D00F               	goto	l3720
 10127                           
 10128                           ; BSR set to: 0
 10129  001D7A  0100               	movlb	0	; () banked
 10130  001D7C  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 10131  001D7E  0100               	movlb	0	; () banked
 10132  001D80  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 10133  001D82  0100               	movlb	0	; () banked
 10134  001D84  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 10135  001D86  0100               	movlb	0	; () banked
 10136  001D88  6D94               	negf	___fttol@lval& (0+255),b
 10137  001D8A  0E00               	movlw	0
 10138  001D8C  0100               	movlb	0	; () banked
 10139  001D8E  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10140  001D90  0100               	movlb	0	; () banked
 10141  001D92  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10142  001D94  0100               	movlb	0	; () banked
 10143  001D96  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10144  001D98                     l3720:
 10145                           
 10146                           ; BSR set to: 0
 10147  001D98  C094  F08A         	movff	___fttol@lval,?___fttol
 10148  001D9C  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 10149  001DA0  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 10150  001DA4  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 10151  001DA8                     l1123:
 10152                           
 10153                           ; BSR set to: 0
 10154  001DA8  0012               	return	
 10155  001DAA                     __end_of___fttol:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           intcon2	equ	0xFF1
 10165                           intcon3	equ	0xFF0
 10166                           indf0	equ	0xFEF
 10167                           postinc0	equ	0xFEE
 10168                           fsr0h	equ	0xFEA
 10169                           fsr0l	equ	0xFE9
 10170                           wreg	equ	0xFE8
 10171                           postinc1	equ	0xFE6
 10172                           postdec1	equ	0xFE5
 10173                           fsr1l	equ	0xFE1
 10174                           indf2	equ	0xFDF
 10175                           postinc2	equ	0xFDE
 10176                           postdec2	equ	0xFDD
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function ___ftsub *****************
 10182 ;; Defined at:
 10183 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  f1              3   57[BANK0 ] float 
 10186 ;;  f2              3   60[BANK0 ] float 
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  3   57[BANK0 ] float 
 10191 ;; Registers used:
 10192 ;;		wreg, status,2, status,0, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10198 ;;      Params:         0       6       0       0       0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10201 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10202 ;;Total ram usage:        6 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    6
 10205 ;; This function calls:
 10206 ;;		___ftadd
 10207 ;; This function is called by:
 10208 ;;		_sprintf
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           	psect	text42
 10213  0031FA                     __ptext42:
 10214                           	opt stack 0
 10215  0031FA                     ___ftsub:
 10216                           	opt stack 21
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;incstack = 0
 10220  0031FA  0E00               	movlw	0
 10221  0031FC  0100               	movlb	0	; () banked
 10222  0031FE  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 10223  003200  0E00               	movlw	0
 10224  003202  0100               	movlb	0	; () banked
 10225  003204  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10226  003206  0E80               	movlw	128
 10227  003208  0100               	movlb	0	; () banked
 10228  00320A  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10229                           
 10230                           ; BSR set to: 0
 10231  00320C  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 10232  003210  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 10233  003214  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 10234  003218  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 10235  00321C  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 10236  003220  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 10237  003224  EC15  F009         	call	___ftadd	;wreg free
 10238  003228  C08D  F099         	movff	?___ftadd,?___ftsub
 10239  00322C  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 10240  003230  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 10241  003234  0012               	return	
 10242  003236                     __end_of___ftsub:
 10243                           	opt stack 0
 10244                           tblptru	equ	0xFF8
 10245                           tblptrh	equ	0xFF7
 10246                           tblptrl	equ	0xFF6
 10247                           tablat	equ	0xFF5
 10248                           prodh	equ	0xFF4
 10249                           prodl	equ	0xFF3
 10250                           intcon	equ	0xFF2
 10251                           intcon2	equ	0xFF1
 10252                           intcon3	equ	0xFF0
 10253                           indf0	equ	0xFEF
 10254                           postinc0	equ	0xFEE
 10255                           fsr0h	equ	0xFEA
 10256                           fsr0l	equ	0xFE9
 10257                           wreg	equ	0xFE8
 10258                           postinc1	equ	0xFE6
 10259                           postdec1	equ	0xFE5
 10260                           fsr1l	equ	0xFE1
 10261                           indf2	equ	0xFDF
 10262                           postinc2	equ	0xFDE
 10263                           postdec2	equ	0xFDD
 10264                           fsr2h	equ	0xFDA
 10265                           fsr2l	equ	0xFD9
 10266                           status	equ	0xFD8
 10267                           
 10268 ;; *************** function ___ftadd *****************
 10269 ;; Defined at:
 10270 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  f1              3   45[BANK0 ] float 
 10273 ;;  f2              3   48[BANK0 ] float 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  exp1            1   56[BANK0 ] unsigned char 
 10276 ;;  exp2            1   55[BANK0 ] unsigned char 
 10277 ;;  sign            1   54[BANK0 ] unsigned char 
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  3   45[BANK0 ] float 
 10280 ;; Registers used:
 10281 ;;		wreg, status,2, status,0, cstack
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10287 ;;      Params:         0       6       0       0       0       0       0       0       0
 10288 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10289 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10290 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10291 ;;Total ram usage:       12 bytes
 10292 ;; Hardware stack levels used:    1
 10293 ;; Hardware stack levels required when called:    5
 10294 ;; This function calls:
 10295 ;;		___ftpack
 10296 ;; This function is called by:
 10297 ;;		_sprintf
 10298 ;;		___ftsub
 10299 ;; This function uses a non-reentrant model
 10300 ;;
 10301                           
 10302                           	psect	text43
 10303  00122A                     __ptext43:
 10304                           	opt stack 0
 10305  00122A                     ___ftadd:
 10306                           	opt stack 21
 10307                           
 10308                           ;incstack = 0
 10309  00122A  0100               	movlb	0	; () banked
 10310  00122C  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 10311  001230  0100               	movlb	0	; () banked
 10312  001232  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10313  001234  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10314  001236  0100               	movlb	0	; () banked
 10315  001238  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10316  00123A  0100               	movlb	0	; () banked
 10317  00123C  3793               	rlcf	??___ftadd& (0+255),f,b
 10318  00123E  E301               	bnc	u2761
 10319  001240  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10320  001242                     u2761:
 10321  001242  0100               	movlb	0	; () banked
 10322  001244  5193               	movf	??___ftadd& (0+255),w,b
 10323  001246  0100               	movlb	0	; () banked
 10324  001248  6F98               	movwf	___ftadd@exp1& (0+255),b
 10325  00124A  0100               	movlb	0	; () banked
 10326  00124C  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 10327  001250  0100               	movlb	0	; () banked
 10328  001252  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10329  001254  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10330  001256  0100               	movlb	0	; () banked
 10331  001258  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10332  00125A  0100               	movlb	0	; () banked
 10333  00125C  3793               	rlcf	??___ftadd& (0+255),f,b
 10334  00125E  E301               	bnc	u2771
 10335  001260  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10336  001262                     u2771:
 10337  001262  0100               	movlb	0	; () banked
 10338  001264  5193               	movf	??___ftadd& (0+255),w,b
 10339  001266  0100               	movlb	0	; () banked
 10340  001268  6F97               	movwf	___ftadd@exp2& (0+255),b
 10341                           
 10342                           ; BSR set to: 0
 10343  00126A  0100               	movlb	0	; () banked
 10344  00126C  5198               	movf	___ftadd@exp1& (0+255),w,b
 10345  00126E  B4D8               	btfsc	status,2,c
 10346  001270  D012               	goto	l1039
 10347                           
 10348                           ; BSR set to: 0
 10349  001272  0100               	movlb	0	; () banked
 10350  001274  5197               	movf	___ftadd@exp2& (0+255),w,b
 10351  001276  0100               	movlb	0	; () banked
 10352  001278  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10353  00127A  B0D8               	btfsc	status,0,c
 10354  00127C  D013               	goto	l3192
 10355                           
 10356                           ; BSR set to: 0
 10357  00127E  0100               	movlb	0	; () banked
 10358  001280  5198               	movf	___ftadd@exp1& (0+255),w,b
 10359  001282  0800               	sublw	0
 10360  001284  0100               	movlb	0	; () banked
 10361  001286  2597               	addwf	___ftadd@exp2& (0+255),w,b
 10362  001288  0100               	movlb	0	; () banked
 10363  00128A  6F93               	movwf	??___ftadd& (0+255),b
 10364  00128C  0E19               	movlw	25
 10365  00128E  0100               	movlb	0	; () banked
 10366  001290  5D93               	subwf	??___ftadd& (0+255),w,b
 10367  001292  A0D8               	btfss	status,0,c
 10368  001294  D007               	goto	l3192
 10369  001296                     l1039:
 10370                           
 10371                           ; BSR set to: 0
 10372  001296  C090  F08D         	movff	___ftadd@f2,?___ftadd
 10373  00129A  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 10374  00129E  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 10375  0012A2  D102               	goto	l1040
 10376  0012A4                     l3192:
 10377                           
 10378                           ; BSR set to: 0
 10379  0012A4  0100               	movlb	0	; () banked
 10380  0012A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10381  0012A8  B4D8               	btfsc	status,2,c
 10382  0012AA  D012               	goto	l1043
 10383                           
 10384                           ; BSR set to: 0
 10385  0012AC  0100               	movlb	0	; () banked
 10386  0012AE  5198               	movf	___ftadd@exp1& (0+255),w,b
 10387  0012B0  0100               	movlb	0	; () banked
 10388  0012B2  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10389  0012B4  B0D8               	btfsc	status,0,c
 10390  0012B6  D013               	goto	l3198
 10391                           
 10392                           ; BSR set to: 0
 10393  0012B8  0100               	movlb	0	; () banked
 10394  0012BA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10395  0012BC  0800               	sublw	0
 10396  0012BE  0100               	movlb	0	; () banked
 10397  0012C0  2598               	addwf	___ftadd@exp1& (0+255),w,b
 10398  0012C2  0100               	movlb	0	; () banked
 10399  0012C4  6F93               	movwf	??___ftadd& (0+255),b
 10400  0012C6  0E19               	movlw	25
 10401  0012C8  0100               	movlb	0	; () banked
 10402  0012CA  5D93               	subwf	??___ftadd& (0+255),w,b
 10403  0012CC  A0D8               	btfss	status,0,c
 10404  0012CE  D007               	goto	l3198
 10405  0012D0                     l1043:
 10406                           
 10407                           ; BSR set to: 0
 10408  0012D0  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 10409  0012D4  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 10410  0012D8  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 10411  0012DC  D0E5               	goto	l1040
 10412  0012DE                     l3198:
 10413                           
 10414                           ; BSR set to: 0
 10415  0012DE  0E06               	movlw	6
 10416  0012E0  0100               	movlb	0	; () banked
 10417  0012E2  6F96               	movwf	___ftadd@sign& (0+255),b
 10418                           
 10419                           ; BSR set to: 0
 10420  0012E4  0100               	movlb	0	; () banked
 10421  0012E6  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10422  0012E8  D002               	goto	l3204
 10423                           
 10424                           ; BSR set to: 0
 10425  0012EA  0100               	movlb	0	; () banked
 10426  0012EC  8F96               	bsf	___ftadd@sign& (0+255),7,b
 10427  0012EE                     l3204:
 10428                           
 10429                           ; BSR set to: 0
 10430  0012EE  0100               	movlb	0	; () banked
 10431  0012F0  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10432  0012F2  D002               	goto	l1045
 10433                           
 10434                           ; BSR set to: 0
 10435  0012F4  0100               	movlb	0	; () banked
 10436  0012F6  8D96               	bsf	___ftadd@sign& (0+255),6,b
 10437  0012F8                     l1045:
 10438                           
 10439                           ; BSR set to: 0
 10440  0012F8  0100               	movlb	0	; () banked
 10441  0012FA  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10442                           
 10443                           ; BSR set to: 0
 10444  0012FC  0EFF               	movlw	255
 10445  0012FE  0100               	movlb	0	; () banked
 10446  001300  178D               	andwf	___ftadd@f1& (0+255),f,b
 10447  001302  0EFF               	movlw	255
 10448  001304  0100               	movlb	0	; () banked
 10449  001306  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10450  001308  0E00               	movlw	0
 10451  00130A  0100               	movlb	0	; () banked
 10452  00130C  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10453  00130E  0100               	movlb	0	; () banked
 10454  001310  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10455                           
 10456                           ; BSR set to: 0
 10457  001312  0EFF               	movlw	255
 10458  001314  0100               	movlb	0	; () banked
 10459  001316  1790               	andwf	___ftadd@f2& (0+255),f,b
 10460  001318  0EFF               	movlw	255
 10461  00131A  0100               	movlb	0	; () banked
 10462  00131C  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10463  00131E  0E00               	movlw	0
 10464  001320  0100               	movlb	0	; () banked
 10465  001322  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10466                           
 10467                           ; BSR set to: 0
 10468  001324  0100               	movlb	0	; () banked
 10469  001326  5197               	movf	___ftadd@exp2& (0+255),w,b
 10470  001328  0100               	movlb	0	; () banked
 10471  00132A  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10472  00132C  B0D8               	btfsc	status,0,c
 10473  00132E  D02A               	goto	l3224
 10474  001330                     l3214:
 10475                           
 10476                           ; BSR set to: 0
 10477  001330  0100               	movlb	0	; () banked
 10478  001332  90D8               	bcf	status,0,c
 10479  001334  0100               	movlb	0	; () banked
 10480  001336  3790               	rlcf	___ftadd@f2& (0+255),f,b
 10481  001338  0100               	movlb	0	; () banked
 10482  00133A  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10483  00133C  0100               	movlb	0	; () banked
 10484  00133E  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10485  001340  0100               	movlb	0	; () banked
 10486  001342  0797               	decf	___ftadd@exp2& (0+255),f,b
 10487                           
 10488                           ; BSR set to: 0
 10489  001344  0100               	movlb	0	; () banked
 10490  001346  5197               	movf	___ftadd@exp2& (0+255),w,b
 10491  001348  0100               	movlb	0	; () banked
 10492  00134A  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10493  00134C  B4D8               	btfsc	status,2,c
 10494  00134E  D014               	goto	l3222
 10495                           
 10496                           ; BSR set to: 0
 10497  001350  0100               	movlb	0	; () banked
 10498  001352  0796               	decf	___ftadd@sign& (0+255),f,b
 10499  001354  C096  F093         	movff	___ftadd@sign,??___ftadd
 10500  001358  0E07               	movlw	7
 10501  00135A  0100               	movlb	0	; () banked
 10502  00135C  1793               	andwf	??___ftadd& (0+255),f,b
 10503  00135E  B4D8               	btfsc	status,2,c
 10504  001360  D00B               	goto	l3222
 10505  001362  D7E6               	goto	l3214
 10506  001364                     l3220:
 10507                           
 10508                           ; BSR set to: 0
 10509  001364  0100               	movlb	0	; () banked
 10510  001366  90D8               	bcf	status,0,c
 10511  001368  0100               	movlb	0	; () banked
 10512  00136A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10513  00136C  0100               	movlb	0	; () banked
 10514  00136E  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10515  001370  0100               	movlb	0	; () banked
 10516  001372  338D               	rrcf	___ftadd@f1& (0+255),f,b
 10517  001374  0100               	movlb	0	; () banked
 10518  001376  2B98               	incf	___ftadd@exp1& (0+255),f,b
 10519  001378                     l3222:
 10520                           
 10521                           ; BSR set to: 0
 10522  001378  0100               	movlb	0	; () banked
 10523  00137A  5197               	movf	___ftadd@exp2& (0+255),w,b
 10524  00137C  0100               	movlb	0	; () banked
 10525  00137E  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10526  001380  D7F1               	goto	l3220
 10527  001382  D02F               	goto	l1054
 10528  001384                     l3224:
 10529                           
 10530                           ; BSR set to: 0
 10531  001384  0100               	movlb	0	; () banked
 10532  001386  5198               	movf	___ftadd@exp1& (0+255),w,b
 10533  001388  0100               	movlb	0	; () banked
 10534  00138A  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10535  00138C  B0D8               	btfsc	status,0,c
 10536  00138E  D029               	goto	l1054
 10537  001390                     l3226:
 10538                           
 10539                           ; BSR set to: 0
 10540  001390  0100               	movlb	0	; () banked
 10541  001392  90D8               	bcf	status,0,c
 10542  001394  0100               	movlb	0	; () banked
 10543  001396  378D               	rlcf	___ftadd@f1& (0+255),f,b
 10544  001398  0100               	movlb	0	; () banked
 10545  00139A  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10546  00139C  0100               	movlb	0	; () banked
 10547  00139E  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10548  0013A0  0100               	movlb	0	; () banked
 10549  0013A2  0798               	decf	___ftadd@exp1& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  0013A4  0100               	movlb	0	; () banked
 10553  0013A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10554  0013A8  0100               	movlb	0	; () banked
 10555  0013AA  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10556  0013AC  B4D8               	btfsc	status,2,c
 10557  0013AE  D014               	goto	l3234
 10558                           
 10559                           ; BSR set to: 0
 10560  0013B0  0100               	movlb	0	; () banked
 10561  0013B2  0796               	decf	___ftadd@sign& (0+255),f,b
 10562  0013B4  C096  F093         	movff	___ftadd@sign,??___ftadd
 10563  0013B8  0E07               	movlw	7
 10564  0013BA  0100               	movlb	0	; () banked
 10565  0013BC  1793               	andwf	??___ftadd& (0+255),f,b
 10566  0013BE  B4D8               	btfsc	status,2,c
 10567  0013C0  D00B               	goto	l3234
 10568  0013C2  D7E6               	goto	l3226
 10569  0013C4                     l3232:
 10570                           
 10571                           ; BSR set to: 0
 10572  0013C4  0100               	movlb	0	; () banked
 10573  0013C6  90D8               	bcf	status,0,c
 10574  0013C8  0100               	movlb	0	; () banked
 10575  0013CA  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10576  0013CC  0100               	movlb	0	; () banked
 10577  0013CE  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10578  0013D0  0100               	movlb	0	; () banked
 10579  0013D2  3390               	rrcf	___ftadd@f2& (0+255),f,b
 10580  0013D4  0100               	movlb	0	; () banked
 10581  0013D6  2B97               	incf	___ftadd@exp2& (0+255),f,b
 10582  0013D8                     l3234:
 10583                           
 10584                           ; BSR set to: 0
 10585  0013D8  0100               	movlb	0	; () banked
 10586  0013DA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10587  0013DC  0100               	movlb	0	; () banked
 10588  0013DE  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10589  0013E0  D7F1               	goto	l3232
 10590  0013E2                     l1054:
 10591                           
 10592                           ; BSR set to: 0
 10593  0013E2  0100               	movlb	0	; () banked
 10594  0013E4  AF96               	btfss	___ftadd@sign& (0+255),7,b
 10595  0013E6  D012               	goto	l1063
 10596                           
 10597                           ; BSR set to: 0
 10598  0013E8  0EFF               	movlw	255
 10599  0013EA  0100               	movlb	0	; () banked
 10600  0013EC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 10601  0013EE  0EFF               	movlw	255
 10602  0013F0  0100               	movlb	0	; () banked
 10603  0013F2  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10604  0013F4  0EFF               	movlw	255
 10605  0013F6  0100               	movlb	0	; () banked
 10606  0013F8  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10607  0013FA  0E01               	movlw	1
 10608  0013FC  0100               	movlb	0	; () banked
 10609  0013FE  278D               	addwf	___ftadd@f1& (0+255),f,b
 10610  001400  0E00               	movlw	0
 10611  001402  0100               	movlb	0	; () banked
 10612  001404  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10613  001406  0E00               	movlw	0
 10614  001408  0100               	movlb	0	; () banked
 10615  00140A  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10616  00140C                     l1063:
 10617                           
 10618                           ; BSR set to: 0
 10619  00140C  0100               	movlb	0	; () banked
 10620  00140E  AD96               	btfss	___ftadd@sign& (0+255),6,b
 10621  001410  D012               	goto	l3240
 10622                           
 10623                           ; BSR set to: 0
 10624  001412  0EFF               	movlw	255
 10625  001414  0100               	movlb	0	; () banked
 10626  001416  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10627  001418  0EFF               	movlw	255
 10628  00141A  0100               	movlb	0	; () banked
 10629  00141C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10630  00141E  0EFF               	movlw	255
 10631  001420  0100               	movlb	0	; () banked
 10632  001422  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10633  001424  0E01               	movlw	1
 10634  001426  0100               	movlb	0	; () banked
 10635  001428  2790               	addwf	___ftadd@f2& (0+255),f,b
 10636  00142A  0E00               	movlw	0
 10637  00142C  0100               	movlb	0	; () banked
 10638  00142E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10639  001430  0E00               	movlw	0
 10640  001432  0100               	movlb	0	; () banked
 10641  001434  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10642  001436                     l3240:
 10643                           
 10644                           ; BSR set to: 0
 10645  001436  0E00               	movlw	0
 10646  001438  0100               	movlb	0	; () banked
 10647  00143A  6F96               	movwf	___ftadd@sign& (0+255),b
 10648                           
 10649                           ; BSR set to: 0
 10650  00143C  0100               	movlb	0	; () banked
 10651  00143E  518D               	movf	___ftadd@f1& (0+255),w,b
 10652  001440  0100               	movlb	0	; () banked
 10653  001442  2790               	addwf	___ftadd@f2& (0+255),f,b
 10654  001444  0100               	movlb	0	; () banked
 10655  001446  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 10656  001448  0100               	movlb	0	; () banked
 10657  00144A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10658  00144C  0100               	movlb	0	; () banked
 10659  00144E  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 10660  001450  0100               	movlb	0	; () banked
 10661  001452  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10662                           
 10663                           ; BSR set to: 0
 10664  001454  0100               	movlb	0	; () banked
 10665  001456  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10666  001458  D015               	goto	l3250
 10667                           
 10668                           ; BSR set to: 0
 10669  00145A  0EFF               	movlw	255
 10670  00145C  0100               	movlb	0	; () banked
 10671  00145E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10672  001460  0EFF               	movlw	255
 10673  001462  0100               	movlb	0	; () banked
 10674  001464  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10675  001466  0EFF               	movlw	255
 10676  001468  0100               	movlb	0	; () banked
 10677  00146A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10678  00146C  0E01               	movlw	1
 10679  00146E  0100               	movlb	0	; () banked
 10680  001470  2790               	addwf	___ftadd@f2& (0+255),f,b
 10681  001472  0E00               	movlw	0
 10682  001474  0100               	movlb	0	; () banked
 10683  001476  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10684  001478  0E00               	movlw	0
 10685  00147A  0100               	movlb	0	; () banked
 10686  00147C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10687                           
 10688                           ; BSR set to: 0
 10689  00147E  0E01               	movlw	1
 10690  001480  0100               	movlb	0	; () banked
 10691  001482  6F96               	movwf	___ftadd@sign& (0+255),b
 10692  001484                     l3250:
 10693                           
 10694                           ; BSR set to: 0
 10695  001484  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 10696  001488  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10697  00148C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10698  001490  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 10699  001494  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 10700  001498  EC5D  F00F         	call	___ftpack	;wreg free
 10701  00149C  C060  F08D         	movff	?___ftpack,?___ftadd
 10702  0014A0  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 10703  0014A4  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 10704  0014A8                     l1040:
 10705  0014A8  0012               	return	
 10706  0014AA                     __end_of___ftadd:
 10707                           	opt stack 0
 10708                           tblptru	equ	0xFF8
 10709                           tblptrh	equ	0xFF7
 10710                           tblptrl	equ	0xFF6
 10711                           tablat	equ	0xFF5
 10712                           prodh	equ	0xFF4
 10713                           prodl	equ	0xFF3
 10714                           intcon	equ	0xFF2
 10715                           intcon2	equ	0xFF1
 10716                           intcon3	equ	0xFF0
 10717                           indf0	equ	0xFEF
 10718                           postinc0	equ	0xFEE
 10719                           fsr0h	equ	0xFEA
 10720                           fsr0l	equ	0xFE9
 10721                           wreg	equ	0xFE8
 10722                           postinc1	equ	0xFE6
 10723                           postdec1	equ	0xFE5
 10724                           fsr1l	equ	0xFE1
 10725                           indf2	equ	0xFDF
 10726                           postinc2	equ	0xFDE
 10727                           postdec2	equ	0xFDD
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function ___ftpack *****************
 10733 ;; Defined at:
 10734 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  arg             3    0[BANK0 ] unsigned um
 10737 ;;  exp             1    3[BANK0 ] unsigned char 
 10738 ;;  sign            1    4[BANK0 ] unsigned char 
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;		None
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  3    0[BANK0 ] float 
 10743 ;; Registers used:
 10744 ;;		wreg, status,2, status,0
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10750 ;;      Params:         0       5       0       0       0       0       0       0       0
 10751 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10752 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10753 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10754 ;;Total ram usage:        8 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    4
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		___ftadd
 10761 ;;		___ftmul
 10762 ;;		___lbtoft
 10763 ;;		___lltoft
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           	psect	text44
 10768  001EBA                     __ptext44:
 10769                           	opt stack 0
 10770  001EBA                     ___ftpack:
 10771                           	opt stack 24
 10772                           
 10773                           ;incstack = 0
 10774  001EBA  0100               	movlb	0	; () banked
 10775  001EBC  5163               	movf	___ftpack@exp& (0+255),w,b
 10776  001EBE  B4D8               	btfsc	status,2,c
 10777  001EC0  D008               	goto	l3130
 10778                           
 10779                           ; BSR set to: 0
 10780  001EC2  0100               	movlb	0	; () banked
 10781  001EC4  5160               	movf	___ftpack@arg& (0+255),w,b
 10782  001EC6  0100               	movlb	0	; () banked
 10783  001EC8  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10784  001ECA  0100               	movlb	0	; () banked
 10785  001ECC  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10786  001ECE  A4D8               	btfss	status,2,c
 10787  001ED0  D014               	goto	l3136
 10788  001ED2                     l3130:
 10789                           
 10790                           ; BSR set to: 0
 10791  001ED2  0E00               	movlw	0
 10792  001ED4  0100               	movlb	0	; () banked
 10793  001ED6  6F60               	movwf	?___ftpack& (0+255),b
 10794  001ED8  0E00               	movlw	0
 10795  001EDA  0100               	movlb	0	; () banked
 10796  001EDC  6F61               	movwf	(?___ftpack+1)& (0+255),b
 10797  001EDE  0E00               	movlw	0
 10798  001EE0  0100               	movlb	0	; () banked
 10799  001EE2  6F62               	movwf	(?___ftpack+2)& (0+255),b
 10800  001EE4  D06E               	goto	l1002
 10801  001EE6                     l3134:
 10802                           
 10803                           ; BSR set to: 0
 10804  001EE6  0100               	movlb	0	; () banked
 10805  001EE8  2B63               	incf	___ftpack@exp& (0+255),f,b
 10806  001EEA  0100               	movlb	0	; () banked
 10807  001EEC  90D8               	bcf	status,0,c
 10808  001EEE  0100               	movlb	0	; () banked
 10809  001EF0  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10810  001EF2  0100               	movlb	0	; () banked
 10811  001EF4  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10812  001EF6  0100               	movlb	0	; () banked
 10813  001EF8  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10814  001EFA                     l3136:
 10815                           
 10816                           ; BSR set to: 0
 10817  001EFA  0E00               	movlw	0
 10818  001EFC  0100               	movlb	0	; () banked
 10819  001EFE  1560               	andwf	___ftpack@arg& (0+255),w,b
 10820  001F00  0100               	movlb	0	; () banked
 10821  001F02  6F65               	movwf	??___ftpack& (0+255),b
 10822  001F04  0E00               	movlw	0
 10823  001F06  0100               	movlb	0	; () banked
 10824  001F08  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10825  001F0A  0100               	movlb	0	; () banked
 10826  001F0C  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10827  001F0E  0EFE               	movlw	254
 10828  001F10  0100               	movlb	0	; () banked
 10829  001F12  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10830  001F14  0100               	movlb	0	; () banked
 10831  001F16  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10832  001F18  0100               	movlb	0	; () banked
 10833  001F1A  5165               	movf	??___ftpack& (0+255),w,b
 10834  001F1C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10835  001F1E  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10836  001F20  B4D8               	btfsc	status,2,c
 10837  001F22  D014               	goto	l3142
 10838  001F24  D7E0               	goto	l3134
 10839  001F26                     l3138:
 10840                           
 10841                           ; BSR set to: 0
 10842  001F26  0100               	movlb	0	; () banked
 10843  001F28  2B63               	incf	___ftpack@exp& (0+255),f,b
 10844                           
 10845                           ; BSR set to: 0
 10846  001F2A  0E01               	movlw	1
 10847  001F2C  0100               	movlb	0	; () banked
 10848  001F2E  2760               	addwf	___ftpack@arg& (0+255),f,b
 10849  001F30  0E00               	movlw	0
 10850  001F32  0100               	movlb	0	; () banked
 10851  001F34  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10852  001F36  0E00               	movlw	0
 10853  001F38  0100               	movlb	0	; () banked
 10854  001F3A  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10855  001F3C  0100               	movlb	0	; () banked
 10856  001F3E  90D8               	bcf	status,0,c
 10857  001F40  0100               	movlb	0	; () banked
 10858  001F42  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10859  001F44  0100               	movlb	0	; () banked
 10860  001F46  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10861  001F48  0100               	movlb	0	; () banked
 10862  001F4A  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10863  001F4C                     l3142:
 10864                           
 10865                           ; BSR set to: 0
 10866  001F4C  0E00               	movlw	0
 10867  001F4E  0100               	movlb	0	; () banked
 10868  001F50  1560               	andwf	___ftpack@arg& (0+255),w,b
 10869  001F52  0100               	movlb	0	; () banked
 10870  001F54  6F65               	movwf	??___ftpack& (0+255),b
 10871  001F56  0E00               	movlw	0
 10872  001F58  0100               	movlb	0	; () banked
 10873  001F5A  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10874  001F5C  0100               	movlb	0	; () banked
 10875  001F5E  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10876  001F60  0EFF               	movlw	255
 10877  001F62  0100               	movlb	0	; () banked
 10878  001F64  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10879  001F66  0100               	movlb	0	; () banked
 10880  001F68  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10881  001F6A  0100               	movlb	0	; () banked
 10882  001F6C  5165               	movf	??___ftpack& (0+255),w,b
 10883  001F6E  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10884  001F70  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10885  001F72  B4D8               	btfsc	status,2,c
 10886  001F74  D00B               	goto	l3146
 10887  001F76  D7D7               	goto	l3138
 10888  001F78                     l3144:
 10889                           
 10890                           ; BSR set to: 0
 10891  001F78  0100               	movlb	0	; () banked
 10892  001F7A  0763               	decf	___ftpack@exp& (0+255),f,b
 10893  001F7C  0100               	movlb	0	; () banked
 10894  001F7E  90D8               	bcf	status,0,c
 10895  001F80  0100               	movlb	0	; () banked
 10896  001F82  3760               	rlcf	___ftpack@arg& (0+255),f,b
 10897  001F84  0100               	movlb	0	; () banked
 10898  001F86  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10899  001F88  0100               	movlb	0	; () banked
 10900  001F8A  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10901  001F8C                     l3146:
 10902                           
 10903                           ; BSR set to: 0
 10904  001F8C  0100               	movlb	0	; () banked
 10905  001F8E  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
 10906  001F90  D7F3               	goto	l3144
 10907                           
 10908                           ; BSR set to: 0
 10909  001F92  0100               	movlb	0	; () banked
 10910  001F94  B163               	btfsc	___ftpack@exp& (0+255),0,b
 10911  001F96  D002               	goto	l3150
 10912                           
 10913                           ; BSR set to: 0
 10914  001F98  0100               	movlb	0	; () banked
 10915  001F9A  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10916  001F9C                     l3150:
 10917                           
 10918                           ; BSR set to: 0
 10919  001F9C  0100               	movlb	0	; () banked
 10920  001F9E  90D8               	bcf	status,0,c
 10921  001FA0  3363               	rrcf	___ftpack@exp& (0+255),f,b
 10922  001FA2  0100               	movlb	0	; () banked
 10923  001FA4  5163               	movf	___ftpack@exp& (0+255),w,b
 10924  001FA6  0100               	movlb	0	; () banked
 10925  001FA8  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10926                           
 10927                           ; BSR set to: 0
 10928  001FAA  0100               	movlb	0	; () banked
 10929  001FAC  5164               	movf	___ftpack@sign& (0+255),w,b
 10930  001FAE  B4D8               	btfsc	status,2,c
 10931  001FB0  D002               	goto	l3156
 10932                           
 10933                           ; BSR set to: 0
 10934  001FB2  0100               	movlb	0	; () banked
 10935  001FB4  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10936  001FB6                     l3156:
 10937                           
 10938                           ; BSR set to: 0
 10939  001FB6  C060  F060         	movff	___ftpack@arg,?___ftpack
 10940  001FBA  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 10941  001FBE  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 10942  001FC2                     l1002:
 10943                           
 10944                           ; BSR set to: 0
 10945  001FC2  0012               	return	
 10946  001FC4                     __end_of___ftpack:
 10947                           	opt stack 0
 10948                           tblptru	equ	0xFF8
 10949                           tblptrh	equ	0xFF7
 10950                           tblptrl	equ	0xFF6
 10951                           tablat	equ	0xFF5
 10952                           prodh	equ	0xFF4
 10953                           prodl	equ	0xFF3
 10954                           intcon	equ	0xFF2
 10955                           intcon2	equ	0xFF1
 10956                           intcon3	equ	0xFF0
 10957                           indf0	equ	0xFEF
 10958                           postinc0	equ	0xFEE
 10959                           fsr0h	equ	0xFEA
 10960                           fsr0l	equ	0xFE9
 10961                           wreg	equ	0xFE8
 10962                           postinc1	equ	0xFE6
 10963                           postdec1	equ	0xFE5
 10964                           fsr1l	equ	0xFE1
 10965                           indf2	equ	0xFDF
 10966                           postinc2	equ	0xFDE
 10967                           postdec2	equ	0xFDD
 10968                           fsr2h	equ	0xFDA
 10969                           fsr2l	equ	0xFD9
 10970                           status	equ	0xFD8
 10971                           
 10972 ;; *************** function ___ftneg *****************
 10973 ;; Defined at:
 10974 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;  f1              3    0[BANK0 ] float 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;		None
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  3    0[BANK0 ] float 
 10981 ;; Registers used:
 10982 ;;		wreg, status,2, status,0
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10988 ;;      Params:         0       3       0       0       0       0       0       0       0
 10989 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10990 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10991 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10992 ;;Total ram usage:        3 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    4
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_sprintf
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           	psect	text45
 11003  003380                     __ptext45:
 11004                           	opt stack 0
 11005  003380                     ___ftneg:
 11006                           	opt stack 23
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;incstack = 0
 11010  003380  0E7F               	movlw	127
 11011  003382  0100               	movlb	0	; () banked
 11012  003384  1562               	andwf	(___ftneg@f1+2)& (0+255),w,b
 11013  003386  0100               	movlb	0	; () banked
 11014  003388  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11015  00338A  0100               	movlb	0	; () banked
 11016  00338C  1160               	iorwf	___ftneg@f1& (0+255),w,b
 11017  00338E  B4D8               	btfsc	status,2,c
 11018  003390  D009               	goto	l1113
 11019                           
 11020                           ; BSR set to: 0
 11021  003392  0E00               	movlw	0
 11022  003394  0100               	movlb	0	; () banked
 11023  003396  1B60               	xorwf	___ftneg@f1& (0+255),f,b
 11024  003398  0E00               	movlw	0
 11025  00339A  0100               	movlb	0	; () banked
 11026  00339C  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11027  00339E  0E80               	movlw	128
 11028  0033A0  0100               	movlb	0	; () banked
 11029  0033A2  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11030  0033A4                     l1113:
 11031                           
 11032                           ; BSR set to: 0
 11033  0033A4  C060  F060         	movff	___ftneg@f1,?___ftneg
 11034  0033A8  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 11035  0033AC  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 11036                           
 11037                           ; BSR set to: 0
 11038  0033B0  0012               	return	
 11039  0033B2                     __end_of___ftneg:
 11040                           	opt stack 0
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           intcon3	equ	0xFF0
 11050                           indf0	equ	0xFEF
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           postinc1	equ	0xFE6
 11056                           postdec1	equ	0xFE5
 11057                           fsr1l	equ	0xFE1
 11058                           indf2	equ	0xFDF
 11059                           postinc2	equ	0xFDE
 11060                           postdec2	equ	0xFDD
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065 ;; *************** function ___ftge *****************
 11066 ;; Defined at:
 11067 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  ff1             3    0[BANK0 ] float 
 11070 ;;  ff2             3    3[BANK0 ] float 
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;		None
 11073 ;; Return value:  Size  Location     Type
 11074 ;;		None               void
 11075 ;; Registers used:
 11076 ;;		wreg, status,2, status,0
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11082 ;;      Params:         0       6       0       0       0       0       0       0       0
 11083 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11084 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11085 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11086 ;;Total ram usage:        9 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    4
 11089 ;; This function calls:
 11090 ;;		Nothing
 11091 ;; This function is called by:
 11092 ;;		_sprintf
 11093 ;; This function uses a non-reentrant model
 11094 ;;
 11095                           
 11096                           	psect	text46
 11097  00225E                     __ptext46:
 11098                           	opt stack 0
 11099  00225E                     ___ftge:
 11100                           	opt stack 23
 11101                           
 11102                           ; BSR set to: 0
 11103                           ;incstack = 0
 11104  00225E  0100               	movlb	0	; () banked
 11105  002260  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11106  002262  D020               	goto	l3660
 11107                           
 11108                           ; BSR set to: 0
 11109  002264  0100               	movlb	0	; () banked
 11110  002266  C060  F066         	movff	___ftge@ff1,??___ftge
 11111  00226A  0100               	movlb	0	; () banked
 11112  00226C  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
 11113  002270  0100               	movlb	0	; () banked
 11114  002272  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
 11115  002276  0100               	movlb	0	; () banked
 11116  002278  1F66               	comf	??___ftge& (0+255),f,b
 11117  00227A  1F67               	comf	(??___ftge+1)& (0+255),f,b
 11118  00227C  1F68               	comf	(??___ftge+2)& (0+255),f,b
 11119  00227E  2B66               	incf	??___ftge& (0+255),f,b
 11120  002280  0E00               	movlw	0
 11121  002282  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 11122  002284  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 11123  002286  0E00               	movlw	0
 11124  002288  0100               	movlb	0	; () banked
 11125  00228A  2566               	addwf	??___ftge& (0+255),w,b
 11126  00228C  0100               	movlb	0	; () banked
 11127  00228E  6F60               	movwf	___ftge@ff1& (0+255),b
 11128  002290  0E00               	movlw	0
 11129  002292  0100               	movlb	0	; () banked
 11130  002294  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11131  002296  0100               	movlb	0	; () banked
 11132  002298  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
 11133  00229A  0E80               	movlw	128
 11134  00229C  0100               	movlb	0	; () banked
 11135  00229E  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11136  0022A0  0100               	movlb	0	; () banked
 11137  0022A2  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
 11138  0022A4                     l3660:
 11139                           
 11140                           ; BSR set to: 0
 11141  0022A4  0100               	movlb	0	; () banked
 11142  0022A6  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11143  0022A8  D020               	goto	l3664
 11144                           
 11145                           ; BSR set to: 0
 11146  0022AA  0100               	movlb	0	; () banked
 11147  0022AC  C063  F066         	movff	___ftge@ff2,??___ftge
 11148  0022B0  0100               	movlb	0	; () banked
 11149  0022B2  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
 11150  0022B6  0100               	movlb	0	; () banked
 11151  0022B8  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
 11152  0022BC  0100               	movlb	0	; () banked
 11153  0022BE  1F66               	comf	??___ftge& (0+255),f,b
 11154  0022C0  1F67               	comf	(??___ftge+1)& (0+255),f,b
 11155  0022C2  1F68               	comf	(??___ftge+2)& (0+255),f,b
 11156  0022C4  2B66               	incf	??___ftge& (0+255),f,b
 11157  0022C6  0E00               	movlw	0
 11158  0022C8  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 11159  0022CA  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 11160  0022CC  0E00               	movlw	0
 11161  0022CE  0100               	movlb	0	; () banked
 11162  0022D0  2566               	addwf	??___ftge& (0+255),w,b
 11163  0022D2  0100               	movlb	0	; () banked
 11164  0022D4  6F63               	movwf	___ftge@ff2& (0+255),b
 11165  0022D6  0E00               	movlw	0
 11166  0022D8  0100               	movlb	0	; () banked
 11167  0022DA  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11168  0022DC  0100               	movlb	0	; () banked
 11169  0022DE  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
 11170  0022E0  0E80               	movlw	128
 11171  0022E2  0100               	movlb	0	; () banked
 11172  0022E4  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11173  0022E6  0100               	movlb	0	; () banked
 11174  0022E8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
 11175  0022EA                     l3664:
 11176                           
 11177                           ; BSR set to: 0
 11178  0022EA  0E00               	movlw	0
 11179  0022EC  0100               	movlb	0	; () banked
 11180  0022EE  1B60               	xorwf	___ftge@ff1& (0+255),f,b
 11181  0022F0  0E00               	movlw	0
 11182  0022F2  0100               	movlb	0	; () banked
 11183  0022F4  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11184  0022F6  0E80               	movlw	128
 11185  0022F8  0100               	movlb	0	; () banked
 11186  0022FA  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11187                           
 11188                           ; BSR set to: 0
 11189  0022FC  0E00               	movlw	0
 11190  0022FE  0100               	movlb	0	; () banked
 11191  002300  1B63               	xorwf	___ftge@ff2& (0+255),f,b
 11192  002302  0E00               	movlw	0
 11193  002304  0100               	movlb	0	; () banked
 11194  002306  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11195  002308  0E80               	movlw	128
 11196  00230A  0100               	movlb	0	; () banked
 11197  00230C  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11198  00230E  0100               	movlb	0	; () banked
 11199  002310  5163               	movf	___ftge@ff2& (0+255),w,b
 11200  002312  0100               	movlb	0	; () banked
 11201  002314  5D60               	subwf	___ftge@ff1& (0+255),w,b
 11202  002316  0100               	movlb	0	; () banked
 11203  002318  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
 11204  00231A  0100               	movlb	0	; () banked
 11205  00231C  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11206  00231E  0100               	movlb	0	; () banked
 11207  002320  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
 11208  002322  0100               	movlb	0	; () banked
 11209  002324  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11210  002326  B0D8               	btfsc	status,0,c
 11211  002328  D002               	goto	l3670
 11212                           
 11213                           ; BSR set to: 0
 11214  00232A  90D8               	bcf	status,0,c
 11215  00232C  D001               	goto	l1097
 11216  00232E                     l3670:
 11217                           
 11218                           ; BSR set to: 0
 11219  00232E  80D8               	bsf	status,0,c
 11220  002330                     l1097:
 11221                           
 11222                           ; BSR set to: 0
 11223  002330  0012               	return	
 11224  002332                     __end_of___ftge:
 11225                           	opt stack 0
 11226                           tblptru	equ	0xFF8
 11227                           tblptrh	equ	0xFF7
 11228                           tblptrl	equ	0xFF6
 11229                           tablat	equ	0xFF5
 11230                           prodh	equ	0xFF4
 11231                           prodl	equ	0xFF3
 11232                           intcon	equ	0xFF2
 11233                           intcon2	equ	0xFF1
 11234                           intcon3	equ	0xFF0
 11235                           indf0	equ	0xFEF
 11236                           postinc0	equ	0xFEE
 11237                           fsr0h	equ	0xFEA
 11238                           fsr0l	equ	0xFE9
 11239                           wreg	equ	0xFE8
 11240                           postinc1	equ	0xFE6
 11241                           postdec1	equ	0xFE5
 11242                           fsr1l	equ	0xFE1
 11243                           indf2	equ	0xFDF
 11244                           postinc2	equ	0xFDE
 11245                           postdec2	equ	0xFDD
 11246                           fsr2h	equ	0xFDA
 11247                           fsr2l	equ	0xFD9
 11248                           status	equ	0xFD8
 11249                           
 11250 ;; *************** function _Lcd_Write_String *****************
 11251 ;; Defined at:
 11252 ;;		line 90 in file "lcd.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;  a               2    4[BANK0 ] PTR unsigned char 
 11255 ;;		 -> STR_24(11), STR_23(7), STR_22(18), STR_21(17), 
 11256 ;;		 -> STR_20(17), STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
 11257 ;;		 -> STR_16(8), STR_14(2), STR_13(2), STR_12(2), 
 11258 ;;		 -> STR_11(16), STR_10(7), 
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;  i               2    8[BANK0 ] int 
 11261 ;; Return value:  Size  Location     Type
 11262 ;;		None               void
 11263 ;; Registers used:
 11264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11270 ;;      Params:         0       2       0       0       0       0       0       0       0
 11271 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11272 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11273 ;;      Totals:         0       6       0       0       0       0       0       0       0
 11274 ;;Total ram usage:        6 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; Hardware stack levels required when called:    6
 11277 ;; This function calls:
 11278 ;;		_Lcd_Write_Char
 11279 ;; This function is called by:
 11280 ;;		_Inicializa_Driveby
 11281 ;;		_Comando_Tablet
 11282 ;;		_Lcd_Write_Integer
 11283 ;;		_main
 11284 ;;		_Lcd_Write_Float
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text47
 11289  002928                     __ptext47:
 11290                           	opt stack 0
 11291  002928                     _Lcd_Write_String:
 11292                           	opt stack 24
 11293                           
 11294                           ;lcd.c: 91: int i;
 11295                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;incstack = 0
 11299  002928  0E00               	movlw	0
 11300  00292A  0100               	movlb	0	; () banked
 11301  00292C  6F69               	movwf	(Lcd_Write_String@i+1)& (0+255),b
 11302  00292E  0E00               	movlw	0
 11303  002930  0100               	movlb	0	; () banked
 11304  002932  6F68               	movwf	Lcd_Write_String@i& (0+255),b
 11305  002934  D023               	goto	l4002
 11306  002936                     l3998:
 11307                           
 11308                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 11309  002936  0100               	movlb	0	; () banked
 11310  002938  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11311  00293C  0100               	movlb	0	; () banked
 11312  00293E  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11313  002942  0100               	movlb	0	; () banked
 11314  002944  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11315  002946  0100               	movlb	0	; () banked
 11316  002948  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11317  00294A  0100               	movlb	0	; () banked
 11318  00294C  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11319  00294E  0100               	movlb	0	; () banked
 11320  002950  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11321  002952  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11322  002956  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11323  00295A  6AF8               	clrf	tblptru,c
 11324  00295C  0E07               	movlw	(high __ramtop+-1)
 11325  00295E  64F7               	cpfsgt	tblptrh,c
 11326  002960  D003               	bra	u4077
 11327  002962  0008               	tblrd		*
 11328  002964  50F5               	movf	tablat,w,c
 11329  002966  D005               	bra	u4070
 11330  002968                     u4077:
 11331  002968  CFF6 FFE9          	movff	tblptrl,fsr0l
 11332  00296C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11333  002970  50EF               	movf	indf0,w,c
 11334  002972                     u4070:
 11335  002972  EC77  F018         	call	_Lcd_Write_Char
 11336  002976  0100               	movlb	0	; () banked
 11337  002978  4B68               	infsnz	Lcd_Write_String@i& (0+255),f,b
 11338  00297A  2B69               	incf	(Lcd_Write_String@i+1)& (0+255),f,b
 11339  00297C                     l4002:
 11340                           
 11341                           ; BSR set to: 0
 11342  00297C  0100               	movlb	0	; () banked
 11343  00297E  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11344  002982  0100               	movlb	0	; () banked
 11345  002984  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11346  002988  0100               	movlb	0	; () banked
 11347  00298A  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11348  00298C  0100               	movlb	0	; () banked
 11349  00298E  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11350  002990  0100               	movlb	0	; () banked
 11351  002992  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11352  002994  0100               	movlb	0	; () banked
 11353  002996  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11354  002998  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11355  00299C  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11356  0029A0  6AF8               	clrf	tblptru,c
 11357  0029A2  0E07               	movlw	(high __ramtop+-1)
 11358  0029A4  64F7               	cpfsgt	tblptrh,c
 11359  0029A6  D003               	bra	u4087
 11360  0029A8  0008               	tblrd		*
 11361  0029AA  50F5               	movf	tablat,w,c
 11362  0029AC  D005               	bra	u4080
 11363  0029AE                     u4087:
 11364  0029AE  CFF6 FFE9          	movff	tblptrl,fsr0l
 11365  0029B2  CFF7 FFEA          	movff	tblptrh,fsr0h
 11366  0029B6  50EF               	movf	indf0,w,c
 11367  0029B8                     u4080:
 11368  0029B8  0900               	iorlw	0
 11369  0029BA  B4D8               	btfsc	status,2,c
 11370  0029BC  0012               	return	
 11371  0029BE  D7BB               	goto	l3998
 11372  0029C0                     __end_of_Lcd_Write_String:
 11373                           	opt stack 0
 11374                           tblptru	equ	0xFF8
 11375                           tblptrh	equ	0xFF7
 11376                           tblptrl	equ	0xFF6
 11377                           tablat	equ	0xFF5
 11378                           prodh	equ	0xFF4
 11379                           prodl	equ	0xFF3
 11380                           intcon	equ	0xFF2
 11381                           intcon2	equ	0xFF1
 11382                           intcon3	equ	0xFF0
 11383                           indf0	equ	0xFEF
 11384                           postinc0	equ	0xFEE
 11385                           fsr0h	equ	0xFEA
 11386                           fsr0l	equ	0xFE9
 11387                           wreg	equ	0xFE8
 11388                           postinc1	equ	0xFE6
 11389                           postdec1	equ	0xFE5
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           fsr2h	equ	0xFDA
 11395                           fsr2l	equ	0xFD9
 11396                           status	equ	0xFD8
 11397                           
 11398 ;; *************** function _Lcd_Write_Char *****************
 11399 ;; Defined at:
 11400 ;;		line 75 in file "lcd.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  a               1    wreg     unsigned char 
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;  a               1    3[BANK0 ] unsigned char 
 11405 ;;  y               1    2[BANK0 ] unsigned char 
 11406 ;;  temp            1    1[BANK0 ] unsigned char 
 11407 ;; Return value:  Size  Location     Type
 11408 ;;		None               void
 11409 ;; Registers used:
 11410 ;;		wreg, status,2, status,0, cstack
 11411 ;; Tracked objects:
 11412 ;;		On entry : 0/0
 11413 ;;		On exit  : 0/0
 11414 ;;		Unchanged: 0/0
 11415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11416 ;;      Params:         0       0       0       0       0       0       0       0       0
 11417 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11418 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11419 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11420 ;;Total ram usage:        3 bytes
 11421 ;; Hardware stack levels used:    1
 11422 ;; Hardware stack levels required when called:    5
 11423 ;; This function calls:
 11424 ;;		_Lcd_Port
 11425 ;; This function is called by:
 11426 ;;		_Lcd_Write_String
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text48
 11431  0030EE                     __ptext48:
 11432                           	opt stack 0
 11433  0030EE                     _Lcd_Write_Char:
 11434                           	opt stack 24
 11435                           
 11436                           ;incstack = 0
 11437                           ;Lcd_Write_Char@a stored from wreg
 11438  0030EE  0100               	movlb	0	; () banked
 11439  0030F0  6F63               	movwf	Lcd_Write_Char@a& (0+255),b
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;lcd.c: 76: char temp, y;
 11443                           ;lcd.c: 77: temp = a & 0x0F;
 11444  0030F2  0100               	movlb	0	; () banked
 11445  0030F4  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11446  0030F6  0B0F               	andlw	15
 11447  0030F8  0100               	movlb	0	; () banked
 11448  0030FA  6F61               	movwf	Lcd_Write_Char@temp& (0+255),b
 11449                           
 11450                           ;lcd.c: 78: y = a & 0xF0;
 11451  0030FC  0100               	movlb	0	; () banked
 11452  0030FE  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11453  003100  0BF0               	andlw	240
 11454  003102  0100               	movlb	0	; () banked
 11455  003104  6F62               	movwf	Lcd_Write_Char@y& (0+255),b
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 11459  003106  8084               	bsf	3972,0,c	;volatile
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;lcd.c: 80: Lcd_Port(y >> 4);
 11463  003108  0100               	movlb	0	; () banked
 11464  00310A  3962               	swapf	Lcd_Write_Char@y& (0+255),w,b
 11465  00310C  0B0F               	andlw	15
 11466  00310E  EC8C  F019         	call	_Lcd_Port
 11467                           
 11468                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 11469  003112  8484               	bsf	3972,2,c	;volatile
 11470                           
 11471                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11472  003114  0E0D               	movlw	13
 11473  003116                     u5327:
 11474  003116  2EE8               	decfsz	wreg,f,c
 11475  003118  D7FE               	goto	u5327
 11476  00311A  F000               	nop	
 11477                           
 11478                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 11479  00311C  9484               	bcf	3972,2,c	;volatile
 11480                           
 11481                           ;lcd.c: 84: Lcd_Port(temp);
 11482  00311E  0100               	movlb	0	; () banked
 11483  003120  5161               	movf	Lcd_Write_Char@temp& (0+255),w,b
 11484  003122  EC8C  F019         	call	_Lcd_Port
 11485                           
 11486                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 11487  003126  8484               	bsf	3972,2,c	;volatile
 11488                           
 11489                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11490  003128  0E0D               	movlw	13
 11491  00312A                     u5337:
 11492  00312A  2EE8               	decfsz	wreg,f,c
 11493  00312C  D7FE               	goto	u5337
 11494  00312E  F000               	nop	
 11495                           
 11496                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 11497  003130  9484               	bcf	3972,2,c	;volatile
 11498  003132  0012               	return	
 11499  003134                     __end_of_Lcd_Write_Char:
 11500                           	opt stack 0
 11501                           tblptru	equ	0xFF8
 11502                           tblptrh	equ	0xFF7
 11503                           tblptrl	equ	0xFF6
 11504                           tablat	equ	0xFF5
 11505                           prodh	equ	0xFF4
 11506                           prodl	equ	0xFF3
 11507                           intcon	equ	0xFF2
 11508                           intcon2	equ	0xFF1
 11509                           intcon3	equ	0xFF0
 11510                           indf0	equ	0xFEF
 11511                           postinc0	equ	0xFEE
 11512                           fsr0h	equ	0xFEA
 11513                           fsr0l	equ	0xFE9
 11514                           wreg	equ	0xFE8
 11515                           postinc1	equ	0xFE6
 11516                           postdec1	equ	0xFE5
 11517                           fsr1l	equ	0xFE1
 11518                           indf2	equ	0xFDF
 11519                           postinc2	equ	0xFDE
 11520                           postdec2	equ	0xFDD
 11521                           fsr2h	equ	0xFDA
 11522                           fsr2l	equ	0xFD9
 11523                           status	equ	0xFD8
 11524                           
 11525 ;; *************** function _Lcd_Set_Cursor *****************
 11526 ;; Defined at:
 11527 ;;		line 40 in file "lcd.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;  a               1    wreg     unsigned char 
 11530 ;;  b               1    3[BANK0 ] unsigned char 
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  a               1    4[BANK0 ] unsigned char 
 11533 ;;  temp            1    7[BANK0 ] unsigned char 
 11534 ;;  y               1    6[BANK0 ] unsigned char 
 11535 ;;  z               1    5[BANK0 ] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;		None               void
 11538 ;; Registers used:
 11539 ;;		wreg, status,2, status,0, cstack
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11545 ;;      Params:         0       1       0       0       0       0       0       0       0
 11546 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11548 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11549 ;;Total ram usage:        5 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    6
 11552 ;; This function calls:
 11553 ;;		_Lcd_Cmd
 11554 ;; This function is called by:
 11555 ;;		_Inicializa_Driveby
 11556 ;;		_Comando_Tablet
 11557 ;;		_main
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           	psect	text49
 11562  002DB6                     __ptext49:
 11563                           	opt stack 0
 11564  002DB6                     _Lcd_Set_Cursor:
 11565                           	opt stack 24
 11566                           
 11567                           ;incstack = 0
 11568                           ;Lcd_Set_Cursor@a stored from wreg
 11569  002DB6  0100               	movlb	0	; () banked
 11570  002DB8  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;lcd.c: 41: char temp, z, y;
 11574                           ;lcd.c: 42: if (a == 1) {
 11575  002DBA  0100               	movlb	0	; () banked
 11576  002DBC  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 11577  002DBE  A4D8               	btfss	status,2,c
 11578  002DC0  D018               	goto	l4184
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;lcd.c: 43: temp = 0x80 + b - 1;
 11582  002DC2  0100               	movlb	0	; () banked
 11583  002DC4  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11584  002DC6  0F7F               	addlw	127
 11585  002DC8  0100               	movlb	0	; () banked
 11586  002DCA  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11587                           
 11588                           ;lcd.c: 44: z = temp >> 4;
 11589  002DCC  0100               	movlb	0	; () banked
 11590  002DCE  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11591  002DD0  0B0F               	andlw	15
 11592  002DD2  0100               	movlb	0	; () banked
 11593  002DD4  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11594                           
 11595                           ;lcd.c: 45: y = temp & 0x0F;
 11596  002DD6  0100               	movlb	0	; () banked
 11597  002DD8  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11598  002DDA  0B0F               	andlw	15
 11599  002DDC  0100               	movlb	0	; () banked
 11600  002DDE  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;lcd.c: 46: Lcd_Cmd(z);
 11604  002DE0  0100               	movlb	0	; () banked
 11605  002DE2  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11606  002DE4  EC15  F01A         	call	_Lcd_Cmd
 11607                           
 11608                           ;lcd.c: 47: Lcd_Cmd(y);
 11609  002DE8  0100               	movlb	0	; () banked
 11610  002DEA  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11611  002DEC  EC15  F01A         	call	_Lcd_Cmd
 11612                           
 11613                           ;lcd.c: 48: } else if (a == 2) {
 11614  002DF0  D01C               	goto	l289
 11615  002DF2                     l4184:
 11616  002DF2  0100               	movlb	0	; () banked
 11617  002DF4  5164               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 11618  002DF6  0A02               	xorlw	2
 11619  002DF8  A4D8               	btfss	status,2,c
 11620  002DFA  D017               	goto	l289
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 11624  002DFC  0100               	movlb	0	; () banked
 11625  002DFE  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11626  002E00  0FBF               	addlw	191
 11627  002E02  0100               	movlb	0	; () banked
 11628  002E04  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11629                           
 11630                           ;lcd.c: 50: z = temp >> 4;
 11631  002E06  0100               	movlb	0	; () banked
 11632  002E08  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11633  002E0A  0B0F               	andlw	15
 11634  002E0C  0100               	movlb	0	; () banked
 11635  002E0E  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11636                           
 11637                           ;lcd.c: 51: y = temp & 0x0F;
 11638  002E10  0100               	movlb	0	; () banked
 11639  002E12  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11640  002E14  0B0F               	andlw	15
 11641  002E16  0100               	movlb	0	; () banked
 11642  002E18  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;lcd.c: 52: Lcd_Cmd(z);
 11646  002E1A  0100               	movlb	0	; () banked
 11647  002E1C  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11648  002E1E  EC15  F01A         	call	_Lcd_Cmd
 11649                           
 11650                           ;lcd.c: 53: Lcd_Cmd(y);
 11651  002E22  0100               	movlb	0	; () banked
 11652  002E24  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11653  002E26  EC15  F01A         	call	_Lcd_Cmd
 11654  002E2A                     l289:
 11655  002E2A  0012               	return	
 11656  002E2C                     __end_of_Lcd_Set_Cursor:
 11657                           	opt stack 0
 11658                           tblptru	equ	0xFF8
 11659                           tblptrh	equ	0xFF7
 11660                           tblptrl	equ	0xFF6
 11661                           tablat	equ	0xFF5
 11662                           prodh	equ	0xFF4
 11663                           prodl	equ	0xFF3
 11664                           intcon	equ	0xFF2
 11665                           intcon2	equ	0xFF1
 11666                           intcon3	equ	0xFF0
 11667                           indf0	equ	0xFEF
 11668                           postinc0	equ	0xFEE
 11669                           fsr0h	equ	0xFEA
 11670                           fsr0l	equ	0xFE9
 11671                           wreg	equ	0xFE8
 11672                           postinc1	equ	0xFE6
 11673                           postdec1	equ	0xFE5
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           postdec2	equ	0xFDD
 11678                           fsr2h	equ	0xFDA
 11679                           fsr2l	equ	0xFD9
 11680                           status	equ	0xFD8
 11681                           
 11682 ;; *************** function _Lcd_Clear *****************
 11683 ;; Defined at:
 11684 ;;		line 35 in file "lcd.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;		None
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;		None
 11689 ;; Return value:  Size  Location     Type
 11690 ;;		None               void
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0
 11699 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11701 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11702 ;;Total ram usage:        0 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    6
 11705 ;; This function calls:
 11706 ;;		_Lcd_Cmd
 11707 ;; This function is called by:
 11708 ;;		_Inicializa_Driveby
 11709 ;;		_Comando_Tablet
 11710 ;;		_main
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           	psect	text50
 11715  003548                     __ptext50:
 11716                           	opt stack 0
 11717  003548                     _Lcd_Clear:
 11718                           	opt stack 24
 11719                           
 11720                           ;lcd.c: 36: Lcd_Cmd(0);
 11721                           
 11722                           ;incstack = 0
 11723  003548  0E00               	movlw	0
 11724  00354A  EC15  F01A         	call	_Lcd_Cmd
 11725                           
 11726                           ;lcd.c: 37: Lcd_Cmd(1);
 11727  00354E  0E01               	movlw	1
 11728  003550  EC15  F01A         	call	_Lcd_Cmd
 11729  003554  0012               	return	
 11730  003556                     __end_of_Lcd_Clear:
 11731                           	opt stack 0
 11732                           tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           intcon2	equ	0xFF1
 11740                           intcon3	equ	0xFF0
 11741                           indf0	equ	0xFEF
 11742                           postinc0	equ	0xFEE
 11743                           fsr0h	equ	0xFEA
 11744                           fsr0l	equ	0xFE9
 11745                           wreg	equ	0xFE8
 11746                           postinc1	equ	0xFE6
 11747                           postdec1	equ	0xFE5
 11748                           fsr1l	equ	0xFE1
 11749                           indf2	equ	0xFDF
 11750                           postinc2	equ	0xFDE
 11751                           postdec2	equ	0xFDD
 11752                           fsr2h	equ	0xFDA
 11753                           fsr2l	equ	0xFD9
 11754                           status	equ	0xFD8
 11755                           
 11756 ;; *************** function _Lcd_Cmd *****************
 11757 ;; Defined at:
 11758 ;;		line 27 in file "lcd.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  a               1    wreg     unsigned char 
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;  a               1    2[BANK0 ] unsigned char 
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0
 11773 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11774 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11775 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11776 ;;Total ram usage:        2 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    5
 11779 ;; This function calls:
 11780 ;;		_Lcd_Port
 11781 ;; This function is called by:
 11782 ;;		_Lcd_Clear
 11783 ;;		_Lcd_Set_Cursor
 11784 ;;		_Lcd_Init
 11785 ;;		_Lcd_Shift_Right
 11786 ;;		_Lcd_Shift_Left
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           	psect	text51
 11791  00342A                     __ptext51:
 11792                           	opt stack 0
 11793  00342A                     _Lcd_Cmd:
 11794                           	opt stack 24
 11795                           
 11796                           ;incstack = 0
 11797                           ;Lcd_Cmd@a stored from wreg
 11798  00342A  0100               	movlb	0	; () banked
 11799  00342C  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 11803  00342E  9084               	bcf	3972,0,c	;volatile
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;lcd.c: 29: Lcd_Port(a);
 11807  003430  0100               	movlb	0	; () banked
 11808  003432  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 11809  003434  EC8C  F019         	call	_Lcd_Port
 11810                           
 11811                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 11812  003438  8484               	bsf	3972,2,c	;volatile
 11813                           
 11814                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 11815  00343A  0E06               	movlw	6
 11816  00343C  0100               	movlb	0	; () banked
 11817  00343E  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 11818  003440  0E30               	movlw	48
 11819  003442                     u5347:
 11820  003442  2EE8               	decfsz	wreg,f,c
 11821  003444  D7FE               	goto	u5347
 11822  003446  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 11823  003448  D7FC               	goto	u5347
 11824  00344A  D000               	nop2	
 11825                           
 11826                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 11827  00344C  9484               	bcf	3972,2,c	;volatile
 11828  00344E  0012               	return	
 11829  003450                     __end_of_Lcd_Cmd:
 11830                           	opt stack 0
 11831                           tblptru	equ	0xFF8
 11832                           tblptrh	equ	0xFF7
 11833                           tblptrl	equ	0xFF6
 11834                           tablat	equ	0xFF5
 11835                           prodh	equ	0xFF4
 11836                           prodl	equ	0xFF3
 11837                           intcon	equ	0xFF2
 11838                           intcon2	equ	0xFF1
 11839                           intcon3	equ	0xFF0
 11840                           indf0	equ	0xFEF
 11841                           postinc0	equ	0xFEE
 11842                           fsr0h	equ	0xFEA
 11843                           fsr0l	equ	0xFE9
 11844                           wreg	equ	0xFE8
 11845                           postinc1	equ	0xFE6
 11846                           postdec1	equ	0xFE5
 11847                           fsr1l	equ	0xFE1
 11848                           indf2	equ	0xFDF
 11849                           postinc2	equ	0xFDE
 11850                           postdec2	equ	0xFDD
 11851                           fsr2h	equ	0xFDA
 11852                           fsr2l	equ	0xFD9
 11853                           status	equ	0xFD8
 11854                           
 11855 ;; *************** function _Lcd_Port *****************
 11856 ;; Defined at:
 11857 ;;		line 6 in file "lcd.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;  a               1    wreg     unsigned char 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  a               1    0[BANK0 ] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;		None               void
 11864 ;; Registers used:
 11865 ;;		wreg
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11871 ;;      Params:         0       0       0       0       0       0       0       0       0
 11872 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11874 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11875 ;;Total ram usage:        1 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    4
 11878 ;; This function calls:
 11879 ;;		Nothing
 11880 ;; This function is called by:
 11881 ;;		_Lcd_Cmd
 11882 ;;		_Lcd_Init
 11883 ;;		_Lcd_Write_Char
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           	psect	text52
 11888  003318                     __ptext52:
 11889                           	opt stack 0
 11890  003318                     _Lcd_Port:
 11891                           	opt stack 24
 11892                           
 11893                           ;incstack = 0
 11894                           ;Lcd_Port@a stored from wreg
 11895  003318  0100               	movlb	0	; () banked
 11896  00331A  6F60               	movwf	Lcd_Port@a& (0+255),b
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;lcd.c: 7: if (a & 1)
 11900  00331C  0100               	movlb	0	; () banked
 11901  00331E  A160               	btfss	Lcd_Port@a& (0+255),0,b
 11902  003320  D002               	goto	l269
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 11906  003322  8883               	bsf	3971,4,c	;volatile
 11907  003324  D001               	goto	l3166
 11908  003326                     l269:
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;lcd.c: 9: else
 11912                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 11913  003326  9883               	bcf	3971,4,c	;volatile
 11914  003328                     l3166:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;lcd.c: 12: if (a & 2)
 11918  003328  0100               	movlb	0	; () banked
 11919  00332A  A360               	btfss	Lcd_Port@a& (0+255),1,b
 11920  00332C  D002               	goto	l271
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 11924  00332E  8A83               	bsf	3971,5,c	;volatile
 11925  003330  D001               	goto	l3170
 11926  003332                     l271:
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;lcd.c: 14: else
 11930                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 11931  003332  9A83               	bcf	3971,5,c	;volatile
 11932  003334                     l3170:
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;lcd.c: 17: if (a & 4)
 11936  003334  0100               	movlb	0	; () banked
 11937  003336  A560               	btfss	Lcd_Port@a& (0+255),2,b
 11938  003338  D002               	goto	l273
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 11942  00333A  8C83               	bsf	3971,6,c	;volatile
 11943  00333C  D001               	goto	l3174
 11944  00333E                     l273:
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;lcd.c: 19: else
 11948                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 11949  00333E  9C83               	bcf	3971,6,c	;volatile
 11950  003340                     l3174:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;lcd.c: 22: if (a & 8)
 11954  003340  0100               	movlb	0	; () banked
 11955  003342  A760               	btfss	Lcd_Port@a& (0+255),3,b
 11956  003344  D002               	goto	l275
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 11960  003346  8E83               	bsf	3971,7,c	;volatile
 11961  003348  D001               	goto	l277
 11962  00334A                     l275:
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;lcd.c: 24: else
 11966                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 11967  00334A  9E83               	bcf	3971,7,c	;volatile
 11968  00334C                     l277:
 11969                           
 11970                           ; BSR set to: 0
 11971  00334C  0012               	return	
 11972  00334E                     __end_of_Lcd_Port:
 11973                           	opt stack 0
 11974                           tblptru	equ	0xFF8
 11975                           tblptrh	equ	0xFF7
 11976                           tblptrl	equ	0xFF6
 11977                           tablat	equ	0xFF5
 11978                           prodh	equ	0xFF4
 11979                           prodl	equ	0xFF3
 11980                           intcon	equ	0xFF2
 11981                           intcon2	equ	0xFF1
 11982                           intcon3	equ	0xFF0
 11983                           indf0	equ	0xFEF
 11984                           postinc0	equ	0xFEE
 11985                           fsr0h	equ	0xFEA
 11986                           fsr0l	equ	0xFE9
 11987                           wreg	equ	0xFE8
 11988                           postinc1	equ	0xFE6
 11989                           postdec1	equ	0xFE5
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function _TMRO_USART *****************
 11999 ;; Defined at:
 12000 ;;		line 84 in file "robot.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12016 ;;      Temps:         14       0       0       0       0       0       0       0       0
 12017 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12018 ;;Total ram usage:       14 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    3
 12021 ;; This function calls:
 12022 ;;		_ReadUSART
 12023 ;;		i2_Lcd_Clear
 12024 ;;		i2_Lcd_Set_Cursor
 12025 ;;		i2_Lcd_Write_String
 12026 ;;		i2_PWM_DutyCycle1
 12027 ;;		i2_PWM_DutyCycle2
 12028 ;; This function is called by:
 12029 ;;		Interrupt level 2
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           	psect	intcode
 12034  000008                     __pintcode:
 12035                           	opt stack 0
 12036  000008                     _TMRO_USART:
 12037                           	opt stack 21
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;incstack = 0
 12041  000008  CFFA F034          	movff	pclath,??_TMRO_USART
 12042  00000C  CFFB F035          	movff	pclatu,??_TMRO_USART+1
 12043  000010  CFE9 F036          	movff	fsr0l,??_TMRO_USART+2
 12044  000014  ED0F  F00C         	call	int_func,f	;refresh shadow registers
 12045                           pclatu	equ	0xFFB
 12046                           pclath	equ	0xFFA
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           intcon2	equ	0xFF1
 12055                           intcon3	equ	0xFF0
 12056                           indf0	equ	0xFEF
 12057                           postinc0	equ	0xFEE
 12058                           fsr0h	equ	0xFEA
 12059                           fsr0l	equ	0xFE9
 12060                           wreg	equ	0xFE8
 12061                           postinc1	equ	0xFE6
 12062                           postdec1	equ	0xFE5
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           postinc2	equ	0xFDE
 12066                           postdec2	equ	0xFDD
 12067                           fsr2h	equ	0xFDA
 12068                           fsr2l	equ	0xFD9
 12069                           status	equ	0xFD8
 12070                           
 12071                           	psect	intcode_body
 12072  00181E                     __pintcode_body:
 12073                           	opt stack 21
 12074  00181E                     int_func:
 12075                           	opt stack 21
 12076  00181E  0006               	pop		; remove dummy address from shadow register refresh
 12077  001820  CFEA F037          	movff	fsr0h,??_TMRO_USART+3
 12078  001824  CFE1 F038          	movff	fsr1l,??_TMRO_USART+4
 12079  001828  CFE2 F039          	movff	fsr1h,??_TMRO_USART+5
 12080  00182C  CFD9 F03A          	movff	fsr2l,??_TMRO_USART+6
 12081  001830  CFDA F03B          	movff	fsr2h,??_TMRO_USART+7
 12082  001834  CFF3 F03C          	movff	prodl,??_TMRO_USART+8
 12083  001838  CFF4 F03D          	movff	prodh,??_TMRO_USART+9
 12084  00183C  CFF6 F03E          	movff	tblptrl,??_TMRO_USART+10
 12085  001840  CFF7 F03F          	movff	tblptrh,??_TMRO_USART+11
 12086  001844  CFF8 F040          	movff	tblptru,??_TMRO_USART+12
 12087  001848  CFF5 F041          	movff	tablat,??_TMRO_USART+13
 12088                           
 12089                           ;robot.c: 89: if (PIR1bits.RCIF) {
 12090  00184C  AA9E               	btfss	3998,5,c	;volatile
 12091  00184E  D034               	goto	i2l398
 12092                           
 12093                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 12094  001850  5055               	movf	_cad,w,c
 12095  001852  0D01               	mullw	1
 12096  001854  0101               	movlb	1	; () banked
 12097  001856  0E28               	movlw	low _BluetoothDato
 12098  001858  24F3               	addwf	prodl,w,c
 12099  00185A  6ED9               	movwf	fsr2l,c
 12100  00185C  0101               	movlb	1	; () banked
 12101  00185E  0E01               	movlw	high _BluetoothDato
 12102  001860  20F4               	addwfc	prodh,w,c
 12103  001862  6EDA               	movwf	fsr2h,c
 12104  001864  EC4A  F01A         	call	_ReadUSART	;wreg free
 12105  001868  6EDF               	movwf	indf2,c
 12106                           
 12107                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 12108  00186A  5055               	movf	_cad,w,c
 12109  00186C  0D01               	mullw	1
 12110  00186E  0101               	movlb	1	; () banked
 12111  001870  0E28               	movlw	low _BluetoothDato
 12112  001872  24F3               	addwf	prodl,w,c
 12113  001874  6ED9               	movwf	fsr2l,c
 12114  001876  0101               	movlb	1	; () banked
 12115  001878  0E01               	movlw	high _BluetoothDato
 12116  00187A  20F4               	addwfc	prodh,w,c
 12117  00187C  6EDA               	movwf	fsr2h,c
 12118  00187E  0E23               	movlw	35
 12119  001880  62DF               	cpfseq	indf2,c
 12120  001882  D015               	goto	i2l4794
 12121                           
 12122                           ; BSR set to: 1
 12123                           ;robot.c: 93: if (ComanTFlag == 0) {
 12124  001884  664C               	tstfsz	_ComanTFlag,c
 12125  001886  D008               	goto	i2l4790
 12126                           
 12127                           ; BSR set to: 1
 12128                           ;robot.c: 94: EntTrama = 1;
 12129  001888  0E01               	movlw	1
 12130  00188A  6E4F               	movwf	_EntTrama,c
 12131                           
 12132                           ;robot.c: 95: FinComandT = 0;
 12133  00188C  0E00               	movlw	0
 12134  00188E  0100               	movlb	0	; () banked
 12135  001890  6FEC               	movwf	_FinComandT& (0+255),b
 12136                           
 12137                           ;robot.c: 96: ComanTFlag = 1;
 12138  001892  0E01               	movlw	1
 12139  001894  6E4C               	movwf	_ComanTFlag,c
 12140  001896  D00E               	goto	i2u518_40
 12141  001898                     i2l4790:
 12142                           
 12143                           ;robot.c: 99: else if (ComanTFlag == 1) {
 12144  001898  044C               	decf	_ComanTFlag,w,c
 12145  00189A  A4D8               	btfss	status,2,c
 12146  00189C  D05F               	goto	i2l4836
 12147                           
 12148                           ;robot.c: 100: ComanTFlag = 0;
 12149  00189E  0E00               	movlw	0
 12150  0018A0  6E4C               	movwf	_ComanTFlag,c
 12151                           
 12152                           ;robot.c: 101: FinComandT = 1;
 12153  0018A2  0E01               	movlw	1
 12154  0018A4  0100               	movlb	0	; () banked
 12155  0018A6  6FEC               	movwf	_FinComandT& (0+255),b
 12156                           
 12157                           ;robot.c: 102: EntTrama = 0;
 12158  0018A8  0E00               	movlw	0
 12159  0018AA  6E4F               	movwf	_EntTrama,c
 12160  0018AC  D057               	goto	i2l4836
 12161  0018AE                     i2l4794:
 12162                           
 12163                           ;robot.c: 106: else if (EntTrama == 1)
 12164  0018AE  044F               	decf	_EntTrama,w,c
 12165  0018B0  A4D8               	btfss	status,2,c
 12166  0018B2  D054               	goto	i2l4836
 12167  0018B4                     i2u518_40:
 12168                           
 12169                           ;robot.c: 107: cad++;
 12170  0018B4  2A55               	incf	_cad,f,c
 12171  0018B6  D052               	goto	i2l4836
 12172  0018B8                     i2l398:
 12173                           
 12174                           ;robot.c: 111: else if(INTCONbits.INT0F == 1){
 12175  0018B8  A2F2               	btfss	intcon,1,c	;volatile
 12176  0018BA  D014               	goto	i2l406
 12177                           
 12178                           ;robot.c: 112: Lcd_Clear();
 12179  0018BC  ECAB  F01A         	call	i2_Lcd_Clear	;wreg free
 12180                           
 12181                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 12182  0018C0  0E01               	movlw	1
 12183  0018C2  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12184  0018C4  0E01               	movlw	1
 12185  0018C6  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12186                           
 12187                           ;robot.c: 114: Lcd_Write_String("Interruption RB0");
 12188  0018CA  0E7F               	movlw	high STR_19
 12189  0018CC  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12190  0018CE  0E25               	movlw	low STR_19
 12191  0018D0  6E05               	movwf	i2Lcd_Write_String@a,c
 12192  0018D2  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12193                           
 12194                           ;robot.c: 117: PWM_DutyCycle1(100);
 12195  0018D6  0E64               	movlw	100
 12196  0018D8  EC4B  F017         	call	i2_PWM_DutyCycle1
 12197                           
 12198                           ;robot.c: 118: PWM_DutyCycle2(0);
 12199  0018DC  0E00               	movlw	0
 12200  0018DE  EC16  F017         	call	i2_PWM_DutyCycle2
 12201                           
 12202                           ;robot.c: 119: }
 12203  0018E2  D03C               	goto	i2l4836
 12204  0018E4                     i2l406:
 12205                           
 12206                           ;robot.c: 121: else if(INTCON3bits.INT1F == 1){
 12207  0018E4  A0F0               	btfss	intcon3,0,c	;volatile
 12208  0018E6  D014               	goto	i2l408
 12209                           
 12210                           ;robot.c: 122: Lcd_Clear();
 12211  0018E8  ECAB  F01A         	call	i2_Lcd_Clear	;wreg free
 12212                           
 12213                           ;robot.c: 123: Lcd_Set_Cursor(1,1);
 12214  0018EC  0E01               	movlw	1
 12215  0018EE  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12216  0018F0  0E01               	movlw	1
 12217  0018F2  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12218                           
 12219                           ;robot.c: 124: Lcd_Write_String("Interruption RB1");
 12220  0018F6  0E7F               	movlw	high STR_20
 12221  0018F8  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12222  0018FA  0E36               	movlw	low STR_20
 12223  0018FC  6E05               	movwf	i2Lcd_Write_String@a,c
 12224  0018FE  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12225                           
 12226                           ;robot.c: 127: PWM_DutyCycle1(0);
 12227  001902  0E00               	movlw	0
 12228  001904  EC4B  F017         	call	i2_PWM_DutyCycle1
 12229                           
 12230                           ;robot.c: 128: PWM_DutyCycle2(100);
 12231  001908  0E64               	movlw	100
 12232  00190A  EC16  F017         	call	i2_PWM_DutyCycle2
 12233                           
 12234                           ;robot.c: 129: }
 12235  00190E  D026               	goto	i2l4836
 12236  001910                     i2l408:
 12237                           
 12238                           ;robot.c: 130: else if(INTCON3bits.INT2F == 1){
 12239  001910  A2F0               	btfss	intcon3,1,c	;volatile
 12240  001912  D014               	goto	i2l410
 12241                           
 12242                           ;robot.c: 131: Lcd_Clear();
 12243  001914  ECAB  F01A         	call	i2_Lcd_Clear	;wreg free
 12244                           
 12245                           ;robot.c: 132: Lcd_Set_Cursor(1,1);
 12246  001918  0E01               	movlw	1
 12247  00191A  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12248  00191C  0E01               	movlw	1
 12249  00191E  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12250                           
 12251                           ;robot.c: 133: Lcd_Write_String("Interruption RB2");
 12252  001922  0E7F               	movlw	high STR_21
 12253  001924  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12254  001926  0E47               	movlw	low STR_21
 12255  001928  6E05               	movwf	i2Lcd_Write_String@a,c
 12256  00192A  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12257                           
 12258                           ;robot.c: 136: PWM_DutyCycle1(100);
 12259  00192E  0E64               	movlw	100
 12260  001930  EC4B  F017         	call	i2_PWM_DutyCycle1
 12261                           
 12262                           ;robot.c: 137: PWM_DutyCycle2(100);
 12263  001934  0E64               	movlw	100
 12264  001936  EC16  F017         	call	i2_PWM_DutyCycle2
 12265                           
 12266                           ;robot.c: 138: }
 12267  00193A  D010               	goto	i2l4836
 12268  00193C                     i2l410:
 12269                           
 12270                           ;robot.c: 139: else if(PIR1bits.TMR2IF){
 12271  00193C  A29E               	btfss	3998,1,c	;volatile
 12272  00193E  D00E               	goto	i2l4836
 12273                           
 12274                           ;robot.c: 140: Lcd_Clear();
 12275  001940  ECAB  F01A         	call	i2_Lcd_Clear	;wreg free
 12276                           
 12277                           ;robot.c: 141: Lcd_Set_Cursor(1,1);
 12278  001944  0E01               	movlw	1
 12279  001946  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12280  001948  0E01               	movlw	1
 12281  00194A  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12282                           
 12283                           ;robot.c: 142: Lcd_Write_String("Interruption TMR2");
 12284  00194E  0E7F               	movlw	high STR_22
 12285  001950  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12286  001952  0E13               	movlw	low STR_22
 12287  001954  6E05               	movwf	i2Lcd_Write_String@a,c
 12288  001956  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12289                           
 12290                           ;robot.c: 143: PIE1bits.TMR2IE = 0;
 12291  00195A  929D               	bcf	3997,1,c	;volatile
 12292  00195C                     i2l4836:
 12293                           
 12294                           ;robot.c: 144: }
 12295                           ;robot.c: 145: INTCON3bits.INT2F = 0;
 12296  00195C  92F0               	bcf	intcon3,1,c	;volatile
 12297                           
 12298                           ;robot.c: 146: INTCON3bits.INT1F = 0;
 12299  00195E  90F0               	bcf	intcon3,0,c	;volatile
 12300                           
 12301                           ;robot.c: 147: INTCONbits.INT0F = 0;
 12302  001960  92F2               	bcf	intcon,1,c	;volatile
 12303                           
 12304                           ;robot.c: 148: PIR1bits.TMR2IF=0;
 12305  001962  929E               	bcf	3998,1,c	;volatile
 12306                           
 12307                           ;robot.c: 149: PIR1bits.RCIF=0;
 12308  001964  9A9E               	bcf	3998,5,c	;volatile
 12309                           
 12310                           ;robot.c: 151: return;
 12311  001966  C041  FFF5         	movff	??_TMRO_USART+13,tablat
 12312  00196A  C040  FFF8         	movff	??_TMRO_USART+12,tblptru
 12313  00196E  C03F  FFF7         	movff	??_TMRO_USART+11,tblptrh
 12314  001972  C03E  FFF6         	movff	??_TMRO_USART+10,tblptrl
 12315  001976  C03D  FFF4         	movff	??_TMRO_USART+9,prodh
 12316  00197A  C03C  FFF3         	movff	??_TMRO_USART+8,prodl
 12317  00197E  C03B  FFDA         	movff	??_TMRO_USART+7,fsr2h
 12318  001982  C03A  FFD9         	movff	??_TMRO_USART+6,fsr2l
 12319  001986  C039  FFE2         	movff	??_TMRO_USART+5,fsr1h
 12320  00198A  C038  FFE1         	movff	??_TMRO_USART+4,fsr1l
 12321  00198E  C037  FFEA         	movff	??_TMRO_USART+3,fsr0h
 12322  001992  C036  FFE9         	movff	??_TMRO_USART+2,fsr0l
 12323  001996  C035  FFFB         	movff	??_TMRO_USART+1,pclatu
 12324  00199A  C034  FFFA         	movff	??_TMRO_USART,pclath
 12325  00199E  0011               	retfie		f
 12326  0019A0                     __end_of_TMRO_USART:
 12327                           	opt stack 0
 12328                           pclatu	equ	0xFFB
 12329                           pclath	equ	0xFFA
 12330                           tblptru	equ	0xFF8
 12331                           tblptrh	equ	0xFF7
 12332                           tblptrl	equ	0xFF6
 12333                           tablat	equ	0xFF5
 12334                           prodh	equ	0xFF4
 12335                           prodl	equ	0xFF3
 12336                           intcon	equ	0xFF2
 12337                           intcon2	equ	0xFF1
 12338                           intcon3	equ	0xFF0
 12339                           indf0	equ	0xFEF
 12340                           postinc0	equ	0xFEE
 12341                           fsr0h	equ	0xFEA
 12342                           fsr0l	equ	0xFE9
 12343                           wreg	equ	0xFE8
 12344                           postinc1	equ	0xFE6
 12345                           postdec1	equ	0xFE5
 12346                           fsr1h	equ	0xFE2
 12347                           fsr1l	equ	0xFE1
 12348                           indf2	equ	0xFDF
 12349                           postinc2	equ	0xFDE
 12350                           postdec2	equ	0xFDD
 12351                           fsr2h	equ	0xFDA
 12352                           fsr2l	equ	0xFD9
 12353                           status	equ	0xFD8
 12354                           
 12355 ;; *************** function i2_PWM_DutyCycle2 *****************
 12356 ;; Defined at:
 12357 ;;		line 55 in file "pwm.c"
 12358 ;; Parameters:    Size  Location     Type
 12359 ;;  percentageDu    1    wreg     unsigned char 
 12360 ;; Auto vars:     Size  Location     Type
 12361 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12362 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12363 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;		None               void
 12366 ;; Registers used:
 12367 ;;		wreg, status,2, status,0, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0
 12374 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12375 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12376 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12377 ;;Total ram usage:        9 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    2
 12380 ;; This function calls:
 12381 ;;		i2_SetDCPWM2
 12382 ;;		i2___ftmul
 12383 ;;		i2___fttol
 12384 ;;		i2___lbtoft
 12385 ;; This function is called by:
 12386 ;;		_TMRO_USART
 12387 ;; This function uses a non-reentrant model
 12388 ;;
 12389                           
 12390                           	psect	text54
 12391  002E2C                     __ptext54:
 12392                           	opt stack 0
 12393  002E2C                     i2_PWM_DutyCycle2:
 12394                           	opt stack 21
 12395                           
 12396                           ;incstack = 0
 12397                           ;i2PWM_DutyCycle2@percentageDuty stored from wreg
 12398  002E2C  6E31               	movwf	i2PWM_DutyCycle2@percentageDuty,c
 12399                           
 12400                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
 12401  002E2E  0E00               	movlw	0
 12402  002E30  6E33               	movwf	i2PWM_DutyCycle2@DC+1,c
 12403  002E32  0E00               	movlw	0
 12404  002E34  6E32               	movwf	i2PWM_DutyCycle2@DC,c
 12405  002E36  0E00               	movlw	0
 12406  002E38  6E30               	movwf	i2PWM_DutyCycle2@DutyCycle+1,c
 12407  002E3A  0E00               	movlw	0
 12408  002E3C  6E2F               	movwf	i2PWM_DutyCycle2@DutyCycle,c
 12409                           
 12410                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
 12411  002E3E  0EAE               	movlw	174
 12412  002E40  6E10               	movwf	i2___ftmul@f2,c
 12413  002E42  0E23               	movlw	35
 12414  002E44  6E11               	movwf	i2___ftmul@f2+1,c
 12415  002E46  0E41               	movlw	65
 12416  002E48  6E12               	movwf	i2___ftmul@f2+2,c
 12417  002E4A  5031               	movf	i2PWM_DutyCycle2@percentageDuty,w,c
 12418  002E4C  EC28  F01A         	call	i2___lbtoft
 12419  002E50  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12420  002E54  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12421  002E58  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12422  002E5C  ECE2  F00F         	call	i2___ftmul	;wreg free
 12423  002E60  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12424  002E64  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12425  002E68  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12426  002E6C  EC99  F011         	call	i2___fttol	;wreg free
 12427  002E70  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle2
 12428  002E74  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle2+1
 12429  002E78  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle2+2
 12430  002E7C  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle2+3
 12431  002E80  C02B  F032         	movff	??i2_PWM_DutyCycle2,i2PWM_DutyCycle2@DC
 12432  002E84  C02C  F033         	movff	??i2_PWM_DutyCycle2+1,i2PWM_DutyCycle2@DC+1
 12433                           
 12434                           ;pwm.c: 60: SetDCPWM2(DC);
 12435  002E88  C032  F001         	movff	i2PWM_DutyCycle2@DC,i2SetDCPWM2@dutycycle
 12436  002E8C  C033  F002         	movff	i2PWM_DutyCycle2@DC+1,i2SetDCPWM2@dutycycle+1
 12437  002E90  EC1B  F019         	call	i2_SetDCPWM2	;wreg free
 12438                           
 12439                           ;pwm.c: 61: return;
 12440  002E94  0012               	return	
 12441  002E96                     __end_ofi2_PWM_DutyCycle2:
 12442                           	opt stack 0
 12443                           pclatu	equ	0xFFB
 12444                           pclath	equ	0xFFA
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           intcon2	equ	0xFF1
 12453                           intcon3	equ	0xFF0
 12454                           indf0	equ	0xFEF
 12455                           postinc0	equ	0xFEE
 12456                           fsr0h	equ	0xFEA
 12457                           fsr0l	equ	0xFE9
 12458                           wreg	equ	0xFE8
 12459                           postinc1	equ	0xFE6
 12460                           postdec1	equ	0xFE5
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           fsr2h	equ	0xFDA
 12467                           fsr2l	equ	0xFD9
 12468                           status	equ	0xFD8
 12469                           
 12470 ;; *************** function i2_SetDCPWM2 *****************
 12471 ;; Defined at:
 12472 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
 12473 ;; Parameters:    Size  Location     Type
 12474 ;;  dutycycle       2    0[COMRAM] unsigned int 
 12475 ;; Auto vars:     Size  Location     Type
 12476 ;;  SetDCPWM2       2    4[COMRAM] struct PWMDC
 12477 ;; Return value:  Size  Location     Type
 12478 ;;		None               void
 12479 ;; Registers used:
 12480 ;;		wreg, status,2, status,0
 12481 ;; Tracked objects:
 12482 ;;		On entry : 0/0
 12483 ;;		On exit  : 0/0
 12484 ;;		Unchanged: 0/0
 12485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12486 ;;      Params:         2       0       0       0       0       0       0       0       0
 12487 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12488 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12489 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12490 ;;Total ram usage:        6 bytes
 12491 ;; Hardware stack levels used:    1
 12492 ;; This function calls:
 12493 ;;		Nothing
 12494 ;; This function is called by:
 12495 ;;		i2_PWM_DutyCycle2
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text55
 12500  003236                     __ptext55:
 12501                           	opt stack 0
 12502  003236                     i2_SetDCPWM2:
 12503                           	opt stack 22
 12504                           
 12505                           ;incstack = 0
 12506  003236  C001  F003         	movff	i2SetDCPWM2@dutycycle,??i2_SetDCPWM2
 12507  00323A  C002  F004         	movff	i2SetDCPWM2@dutycycle+1,??i2_SetDCPWM2+1
 12508  00323E  0E06               	movlw	6
 12509  003240                     i2u480_45:
 12510  003240  90D8               	bcf	status,0,c
 12511  003242  3603               	rlcf	??i2_SetDCPWM2,f,c
 12512  003244  3604               	rlcf	??i2_SetDCPWM2+1,f,c
 12513  003246  2EE8               	decfsz	wreg,f,c
 12514  003248  D7FB               	goto	i2u480_45
 12515  00324A  C003  F005         	movff	??i2_SetDCPWM2,i2SetDCPWM2@DCycle
 12516  00324E  C004  F006         	movff	??i2_SetDCPWM2+1,i2SetDCPWM2@DCycle+1
 12517  003252  C006  FFBB         	movff	i2SetDCPWM2@DCycle+1,4027	;volatile
 12518  003256  C005  F003         	movff	i2SetDCPWM2@DCycle,??i2_SetDCPWM2
 12519  00325A  90D8               	bcf	status,0,c
 12520  00325C  3203               	rrcf	??i2_SetDCPWM2,f,c
 12521  00325E  90D8               	bcf	status,0,c
 12522  003260  3203               	rrcf	??i2_SetDCPWM2,f,c
 12523  003262  0E30               	movlw	48
 12524  003264  1603               	andwf	??i2_SetDCPWM2,f,c
 12525  003266  50BA               	movf	4026,w,c	;volatile
 12526  003268  0BCF               	andlw	207
 12527  00326A  1003               	iorwf	??i2_SetDCPWM2,w,c
 12528  00326C  6EBA               	movwf	4026,c	;volatile
 12529  00326E  0012               	return	
 12530  003270                     __end_ofi2_SetDCPWM2:
 12531                           	opt stack 0
 12532                           pclatu	equ	0xFFB
 12533                           pclath	equ	0xFFA
 12534                           tblptru	equ	0xFF8
 12535                           tblptrh	equ	0xFF7
 12536                           tblptrl	equ	0xFF6
 12537                           tablat	equ	0xFF5
 12538                           prodh	equ	0xFF4
 12539                           prodl	equ	0xFF3
 12540                           intcon	equ	0xFF2
 12541                           intcon2	equ	0xFF1
 12542                           intcon3	equ	0xFF0
 12543                           indf0	equ	0xFEF
 12544                           postinc0	equ	0xFEE
 12545                           fsr0h	equ	0xFEA
 12546                           fsr0l	equ	0xFE9
 12547                           wreg	equ	0xFE8
 12548                           postinc1	equ	0xFE6
 12549                           postdec1	equ	0xFE5
 12550                           fsr1h	equ	0xFE2
 12551                           fsr1l	equ	0xFE1
 12552                           indf2	equ	0xFDF
 12553                           postinc2	equ	0xFDE
 12554                           postdec2	equ	0xFDD
 12555                           fsr2h	equ	0xFDA
 12556                           fsr2l	equ	0xFD9
 12557                           status	equ	0xFD8
 12558                           
 12559 ;; *************** function i2_PWM_DutyCycle1 *****************
 12560 ;; Defined at:
 12561 ;;		line 33 in file "pwm.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;  percentageDu    1    wreg     unsigned char 
 12564 ;; Auto vars:     Size  Location     Type
 12565 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12566 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12567 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12568 ;; Return value:  Size  Location     Type
 12569 ;;		None               void
 12570 ;; Registers used:
 12571 ;;		wreg, status,2, status,0, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12577 ;;      Params:         0       0       0       0       0       0       0       0       0
 12578 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12579 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12580 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12581 ;;Total ram usage:        9 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    2
 12584 ;; This function calls:
 12585 ;;		i2_SetDCPWM1
 12586 ;;		i2___ftmul
 12587 ;;		i2___fttol
 12588 ;;		i2___lbtoft
 12589 ;; This function is called by:
 12590 ;;		_TMRO_USART
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           	psect	text56
 12595  002E96                     __ptext56:
 12596                           	opt stack 0
 12597  002E96                     i2_PWM_DutyCycle1:
 12598                           	opt stack 21
 12599                           
 12600                           ;incstack = 0
 12601                           ;i2PWM_DutyCycle1@percentageDuty stored from wreg
 12602  002E96  6E31               	movwf	i2PWM_DutyCycle1@percentageDuty,c
 12603                           
 12604                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
 12605  002E98  0E00               	movlw	0
 12606  002E9A  6E33               	movwf	i2PWM_DutyCycle1@DC+1,c
 12607  002E9C  0E00               	movlw	0
 12608  002E9E  6E32               	movwf	i2PWM_DutyCycle1@DC,c
 12609  002EA0  0E00               	movlw	0
 12610  002EA2  6E30               	movwf	i2PWM_DutyCycle1@DutyCycle+1,c
 12611  002EA4  0E00               	movlw	0
 12612  002EA6  6E2F               	movwf	i2PWM_DutyCycle1@DutyCycle,c
 12613                           
 12614                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
 12615  002EA8  0EAE               	movlw	174
 12616  002EAA  6E10               	movwf	i2___ftmul@f2,c
 12617  002EAC  0E23               	movlw	35
 12618  002EAE  6E11               	movwf	i2___ftmul@f2+1,c
 12619  002EB0  0E41               	movlw	65
 12620  002EB2  6E12               	movwf	i2___ftmul@f2+2,c
 12621  002EB4  5031               	movf	i2PWM_DutyCycle1@percentageDuty,w,c
 12622  002EB6  EC28  F01A         	call	i2___lbtoft
 12623  002EBA  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12624  002EBE  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12625  002EC2  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12626  002EC6  ECE2  F00F         	call	i2___ftmul	;wreg free
 12627  002ECA  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12628  002ECE  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12629  002ED2  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12630  002ED6  EC99  F011         	call	i2___fttol	;wreg free
 12631  002EDA  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle1
 12632  002EDE  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle1+1
 12633  002EE2  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle1+2
 12634  002EE6  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle1+3
 12635  002EEA  C02B  F032         	movff	??i2_PWM_DutyCycle1,i2PWM_DutyCycle1@DC
 12636  002EEE  C02C  F033         	movff	??i2_PWM_DutyCycle1+1,i2PWM_DutyCycle1@DC+1
 12637                           
 12638                           ;pwm.c: 38: SetDCPWM1(DC);
 12639  002EF2  C032  F001         	movff	i2PWM_DutyCycle1@DC,i2SetDCPWM1@dutycycle
 12640  002EF6  C033  F002         	movff	i2PWM_DutyCycle1@DC+1,i2SetDCPWM1@dutycycle+1
 12641  002EFA  EC38  F019         	call	i2_SetDCPWM1	;wreg free
 12642                           
 12643                           ;pwm.c: 39: return;
 12644  002EFE  0012               	return	
 12645  002F00                     __end_ofi2_PWM_DutyCycle1:
 12646                           	opt stack 0
 12647                           pclatu	equ	0xFFB
 12648                           pclath	equ	0xFFA
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           intcon2	equ	0xFF1
 12657                           intcon3	equ	0xFF0
 12658                           indf0	equ	0xFEF
 12659                           postinc0	equ	0xFEE
 12660                           fsr0h	equ	0xFEA
 12661                           fsr0l	equ	0xFE9
 12662                           wreg	equ	0xFE8
 12663                           postinc1	equ	0xFE6
 12664                           postdec1	equ	0xFE5
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function i2___lbtoft *****************
 12675 ;; Defined at:
 12676 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  c               1    wreg     unsigned char 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  c               1   11[COMRAM] unsigned char 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  3    8[COMRAM] float 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12690 ;;      Params:         3       0       0       0       0       0       0       0       0
 12691 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12693 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12694 ;;Total ram usage:        4 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:    1
 12697 ;; This function calls:
 12698 ;;		i2___ftpack
 12699 ;; This function is called by:
 12700 ;;		i2_PWM_DutyCycle1
 12701 ;;		i2_PWM_DutyCycle2
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           	psect	text57
 12706  003450                     __ptext57:
 12707                           	opt stack 0
 12708  003450                     i2___lbtoft:
 12709                           	opt stack 21
 12710                           
 12711                           ;incstack = 0
 12712                           ;i2___lbtoft@c stored from wreg
 12713  003450  6E0C               	movwf	i2___lbtoft@c,c
 12714  003452  500C               	movf	i2___lbtoft@c,w,c
 12715  003454  6E01               	movwf	i2___ftpack@arg,c
 12716  003456  6A02               	clrf	i2___ftpack@arg+1,c
 12717  003458  6A03               	clrf	i2___ftpack@arg+2,c
 12718  00345A  0E8E               	movlw	142
 12719  00345C  6E04               	movwf	i2___ftpack@exp,c
 12720  00345E  0E00               	movlw	0
 12721  003460  6E05               	movwf	i2___ftpack@sign,c
 12722  003462  ECEE  F013         	call	i2___ftpack	;wreg free
 12723  003466  C001  F009         	movff	?i2___ftpack,?i2___lbtoft
 12724  00346A  C002  F00A         	movff	?i2___ftpack+1,?i2___lbtoft+1
 12725  00346E  C003  F00B         	movff	?i2___ftpack+2,?i2___lbtoft+2
 12726  003472  0012               	return	
 12727  003474                     __end_ofi2___lbtoft:
 12728                           	opt stack 0
 12729                           pclatu	equ	0xFFB
 12730                           pclath	equ	0xFFA
 12731                           tblptru	equ	0xFF8
 12732                           tblptrh	equ	0xFF7
 12733                           tblptrl	equ	0xFF6
 12734                           tablat	equ	0xFF5
 12735                           prodh	equ	0xFF4
 12736                           prodl	equ	0xFF3
 12737                           intcon	equ	0xFF2
 12738                           intcon2	equ	0xFF1
 12739                           intcon3	equ	0xFF0
 12740                           indf0	equ	0xFEF
 12741                           postinc0	equ	0xFEE
 12742                           fsr0h	equ	0xFEA
 12743                           fsr0l	equ	0xFE9
 12744                           wreg	equ	0xFE8
 12745                           postinc1	equ	0xFE6
 12746                           postdec1	equ	0xFE5
 12747                           fsr1h	equ	0xFE2
 12748                           fsr1l	equ	0xFE1
 12749                           indf2	equ	0xFDF
 12750                           postinc2	equ	0xFDE
 12751                           postdec2	equ	0xFDD
 12752                           fsr2h	equ	0xFDA
 12753                           fsr2l	equ	0xFD9
 12754                           status	equ	0xFD8
 12755                           
 12756 ;; *************** function i2___fttol *****************
 12757 ;; Defined at:
 12758 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
 12759 ;; Parameters:    Size  Location     Type
 12760 ;;  f1              3   27[COMRAM] float 
 12761 ;; Auto vars:     Size  Location     Type
 12762 ;;  __fttol         4   37[COMRAM] unsigned long 
 12763 ;;  __fttol         1   41[COMRAM] unsigned char 
 12764 ;;  __fttol         1   36[COMRAM] unsigned char 
 12765 ;; Return value:  Size  Location     Type
 12766 ;;                  4   27[COMRAM] long 
 12767 ;; Registers used:
 12768 ;;		wreg, status,2, status,0
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12774 ;;      Params:         4       0       0       0       0       0       0       0       0
 12775 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12776 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12777 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12778 ;;Total ram usage:       15 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; This function calls:
 12781 ;;		Nothing
 12782 ;; This function is called by:
 12783 ;;		i2_PWM_DutyCycle1
 12784 ;;		i2_PWM_DutyCycle2
 12785 ;; This function uses a non-reentrant model
 12786 ;;
 12787                           
 12788                           	psect	text58
 12789  002332                     __ptext58:
 12790                           	opt stack 0
 12791  002332                     i2___fttol:
 12792                           	opt stack 22
 12793                           
 12794                           ;incstack = 0
 12795  002332  C01E  F020         	movff	i2___fttol@f1+2,??i2___fttol
 12796  002336  6A21               	clrf	(??i2___fttol+1)& (0+255),c
 12797  002338  6A22               	clrf	(??i2___fttol+2)& (0+255),c
 12798  00233A  341D               	rlcf	i2___fttol@f1+1,w,c
 12799  00233C  3620               	rlcf	??i2___fttol& (0+255),f,c
 12800  00233E  E301               	bnc	u487_41
 12801  002340  8021               	bsf	(??i2___fttol+1)& (0+255),0,c
 12802  002342                     u487_41:
 12803  002342  5020               	movf	??i2___fttol,w,c
 12804  002344  6E2A               	movwf	i2___fttol@exp1,c
 12805  002346  662A               	tstfsz	i2___fttol@exp1& (0+255),c
 12806  002348  D001               	goto	i2l4464
 12807  00234A  D038               	goto	i2u492_40
 12808  00234C                     i2l4464:
 12809  00234C  0E17               	movlw	23
 12810  00234E  6E20               	movwf	??i2___fttol& (0+255),c
 12811  002350  C01C  F021         	movff	i2___fttol@f1,??i2___fttol+1
 12812  002354  C01D  F022         	movff	i2___fttol@f1+1,??i2___fttol+2
 12813  002358  C01E  F023         	movff	i2___fttol@f1+2,??i2___fttol+3
 12814  00235C  2820               	incf	??i2___fttol,w,c
 12815  00235E  6E24               	movwf	(??i2___fttol+4)& (0+255),c
 12816  002360  D004               	goto	i2u489_40
 12817  002362                     i2u489_45:
 12818  002362  90D8               	bcf	status,0,c
 12819  002364  3223               	rrcf	??i2___fttol+3,f,c
 12820  002366  3222               	rrcf	??i2___fttol+2,f,c
 12821  002368  3221               	rrcf	??i2___fttol+1,f,c
 12822  00236A                     i2u489_40:
 12823  00236A  2E24               	decfsz	(??i2___fttol+4)& (0+255),f,c
 12824  00236C  D7FA               	goto	i2u489_45
 12825  00236E  5021               	movf	??i2___fttol+1,w,c
 12826  002370  6E25               	movwf	i2___fttol@sign1,c
 12827  002372  8E1D               	bsf	i2___fttol@f1+1,7,c
 12828  002374  0EFF               	movlw	255
 12829  002376  161C               	andwf	i2___fttol@f1,f,c
 12830  002378  0EFF               	movlw	255
 12831  00237A  161D               	andwf	i2___fttol@f1+1,f,c
 12832  00237C  0E00               	movlw	0
 12833  00237E  161E               	andwf	i2___fttol@f1+2,f,c
 12834  002380  501C               	movf	i2___fttol@f1,w,c
 12835  002382  6E26               	movwf	i2___fttol@lval,c
 12836  002384  501D               	movf	i2___fttol@f1+1,w,c
 12837  002386  6E27               	movwf	i2___fttol@lval+1,c
 12838  002388  501E               	movf	i2___fttol@f1+2,w,c
 12839  00238A  6E28               	movwf	i2___fttol@lval+2,c
 12840  00238C  6A29               	clrf	i2___fttol@lval+3,c
 12841  00238E  0E8E               	movlw	142
 12842  002390  5E2A               	subwf	i2___fttol@exp1,f,c
 12843  002392  AE2A               	btfss	i2___fttol@exp1,7,c
 12844  002394  D010               	goto	i2l4486
 12845  002396  502A               	movf	i2___fttol@exp1,w,c
 12846  002398  0A80               	xorlw	128
 12847  00239A  6E20               	movwf	??i2___fttol& (0+255),c
 12848  00239C  0EF1               	movlw	241
 12849  00239E  0A80               	xorlw	128
 12850  0023A0  5C20               	subwf	??i2___fttol,w,c
 12851  0023A2  A0D8               	btfss	status,0,c
 12852  0023A4  D00B               	goto	i2u492_40
 12853  0023A6                     i2l4482:
 12854  0023A6  90D8               	bcf	status,0,c
 12855  0023A8  3229               	rrcf	i2___fttol@lval+3,f,c
 12856  0023AA  3228               	rrcf	i2___fttol@lval+2,f,c
 12857  0023AC  3227               	rrcf	i2___fttol@lval+1,f,c
 12858  0023AE  3226               	rrcf	i2___fttol@lval,f,c
 12859  0023B0  3E2A               	incfsz	i2___fttol@exp1,f,c
 12860  0023B2  D7F9               	goto	i2l4482
 12861  0023B4  D014               	goto	i2l4496
 12862  0023B6                     i2l4486:
 12863  0023B6  0E17               	movlw	23
 12864  0023B8  642A               	cpfsgt	i2___fttol@exp1,c
 12865  0023BA  D00F               	goto	i2l4494
 12866  0023BC                     i2u492_40:
 12867  0023BC  0E00               	movlw	0
 12868  0023BE  6E1C               	movwf	?i2___fttol,c
 12869  0023C0  0E00               	movlw	0
 12870  0023C2  6E1D               	movwf	?i2___fttol+1,c
 12871  0023C4  0E00               	movlw	0
 12872  0023C6  6E1E               	movwf	?i2___fttol+2,c
 12873  0023C8  0E00               	movlw	0
 12874  0023CA  6E1F               	movwf	?i2___fttol+3,c
 12875  0023CC  D01B               	goto	i2l1123
 12876  0023CE                     i2l4492:
 12877  0023CE  90D8               	bcf	status,0,c
 12878  0023D0  3626               	rlcf	i2___fttol@lval,f,c
 12879  0023D2  3627               	rlcf	i2___fttol@lval+1,f,c
 12880  0023D4  3628               	rlcf	i2___fttol@lval+2,f,c
 12881  0023D6  3629               	rlcf	i2___fttol@lval+3,f,c
 12882  0023D8  062A               	decf	i2___fttol@exp1,f,c
 12883  0023DA                     i2l4494:
 12884  0023DA  662A               	tstfsz	i2___fttol@exp1,c
 12885  0023DC  D7F8               	goto	i2l4492
 12886  0023DE                     i2l4496:
 12887  0023DE  5025               	movf	i2___fttol@sign1,w,c
 12888  0023E0  B4D8               	btfsc	status,2,c
 12889  0023E2  D008               	goto	i2l4500
 12890  0023E4  1E29               	comf	i2___fttol@lval+3,f,c
 12891  0023E6  1E28               	comf	i2___fttol@lval+2,f,c
 12892  0023E8  1E27               	comf	i2___fttol@lval+1,f,c
 12893  0023EA  6C26               	negf	i2___fttol@lval,c
 12894  0023EC  0E00               	movlw	0
 12895  0023EE  2227               	addwfc	i2___fttol@lval+1,f,c
 12896  0023F0  2228               	addwfc	i2___fttol@lval+2,f,c
 12897  0023F2  2229               	addwfc	i2___fttol@lval+3,f,c
 12898  0023F4                     i2l4500:
 12899  0023F4  C026  F01C         	movff	i2___fttol@lval,?i2___fttol
 12900  0023F8  C027  F01D         	movff	i2___fttol@lval+1,?i2___fttol+1
 12901  0023FC  C028  F01E         	movff	i2___fttol@lval+2,?i2___fttol+2
 12902  002400  C029  F01F         	movff	i2___fttol@lval+3,?i2___fttol+3
 12903  002404                     i2l1123:
 12904  002404  0012               	return	
 12905  002406                     __end_ofi2___fttol:
 12906                           	opt stack 0
 12907                           pclatu	equ	0xFFB
 12908                           pclath	equ	0xFFA
 12909                           tblptru	equ	0xFF8
 12910                           tblptrh	equ	0xFF7
 12911                           tblptrl	equ	0xFF6
 12912                           tablat	equ	0xFF5
 12913                           prodh	equ	0xFF4
 12914                           prodl	equ	0xFF3
 12915                           intcon	equ	0xFF2
 12916                           intcon2	equ	0xFF1
 12917                           intcon3	equ	0xFF0
 12918                           indf0	equ	0xFEF
 12919                           postinc0	equ	0xFEE
 12920                           fsr0h	equ	0xFEA
 12921                           fsr0l	equ	0xFE9
 12922                           wreg	equ	0xFE8
 12923                           postinc1	equ	0xFE6
 12924                           postdec1	equ	0xFE5
 12925                           fsr1h	equ	0xFE2
 12926                           fsr1l	equ	0xFE1
 12927                           indf2	equ	0xFDF
 12928                           postinc2	equ	0xFDE
 12929                           postdec2	equ	0xFDD
 12930                           fsr2h	equ	0xFDA
 12931                           fsr2l	equ	0xFD9
 12932                           status	equ	0xFD8
 12933                           
 12934 ;; *************** function i2___ftmul *****************
 12935 ;; Defined at:
 12936 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  f1              3   12[COMRAM] float 
 12939 ;;  f2              3   15[COMRAM] float 
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  __ftmul         3   22[COMRAM] unsigned um
 12942 ;;  __ftmul         1   26[COMRAM] unsigned char 
 12943 ;;  __ftmul         1   25[COMRAM] unsigned char 
 12944 ;;  __ftmul         1   21[COMRAM] unsigned char 
 12945 ;; Return value:  Size  Location     Type
 12946 ;;                  3   12[COMRAM] float 
 12947 ;; Registers used:
 12948 ;;		wreg, status,2, status,0, cstack
 12949 ;; Tracked objects:
 12950 ;;		On entry : 0/0
 12951 ;;		On exit  : 0/0
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12954 ;;      Params:         6       0       0       0       0       0       0       0       0
 12955 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12956 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12957 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12958 ;;Total ram usage:       15 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:    1
 12961 ;; This function calls:
 12962 ;;		i2___ftpack
 12963 ;; This function is called by:
 12964 ;;		i2_PWM_DutyCycle1
 12965 ;;		i2_PWM_DutyCycle2
 12966 ;; This function uses a non-reentrant model
 12967 ;;
 12968                           
 12969                           	psect	text59
 12970  001FC4                     __ptext59:
 12971                           	opt stack 0
 12972  001FC4                     i2___ftmul:
 12973                           	opt stack 21
 12974                           
 12975                           ;incstack = 0
 12976  001FC4  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
 12977  001FC8  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12978  001FCA  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12979  001FCC  340E               	rlcf	i2___ftmul@f1+1,w,c
 12980  001FCE  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12981  001FD0  E301               	bnc	u481_41
 12982  001FD2  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12983  001FD4                     u481_41:
 12984  001FD4  5013               	movf	??i2___ftmul,w,c
 12985  001FD6  6E16               	movwf	i2___ftmul@exp,c
 12986  001FD8  6616               	tstfsz	i2___ftmul@exp& (0+255),c
 12987  001FDA  D001               	goto	i2l4416
 12988  001FDC  D00C               	goto	i2u484_40
 12989  001FDE                     i2l4416:
 12990  001FDE  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
 12991  001FE2  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12992  001FE4  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12993  001FE6  3411               	rlcf	i2___ftmul@f2+1,w,c
 12994  001FE8  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12995  001FEA  E301               	bnc	u483_41
 12996  001FEC  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12997  001FEE                     u483_41:
 12998  001FEE  5013               	movf	??i2___ftmul,w,c
 12999  001FF0  6E1B               	movwf	i2___ftmul@sign,c
 13000  001FF2  661B               	tstfsz	i2___ftmul@sign& (0+255),c
 13001  001FF4  D007               	goto	i2l4422
 13002  001FF6                     i2u484_40:
 13003  001FF6  0E00               	movlw	0
 13004  001FF8  6E0D               	movwf	?i2___ftmul,c
 13005  001FFA  0E00               	movlw	0
 13006  001FFC  6E0E               	movwf	?i2___ftmul+1,c
 13007  001FFE  0E00               	movlw	0
 13008  002000  6E0F               	movwf	?i2___ftmul+2,c
 13009  002002  D051               	goto	i2l1103
 13010  002004                     i2l4422:
 13011  002004  501B               	movf	i2___ftmul@sign,w,c
 13012  002006  0F7B               	addlw	123
 13013  002008  2616               	addwf	i2___ftmul@exp,f,c
 13014  00200A  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 13015  00200E  5012               	movf	i2___ftmul@f2+2,w,c
 13016  002010  1A1B               	xorwf	i2___ftmul@sign,f,c
 13017  002012  0E80               	movlw	128
 13018  002014  161B               	andwf	i2___ftmul@sign,f,c
 13019  002016  8E0E               	bsf	i2___ftmul@f1+1,7,c
 13020  002018  8E11               	bsf	i2___ftmul@f2+1,7,c
 13021  00201A  0EFF               	movlw	255
 13022  00201C  1610               	andwf	i2___ftmul@f2,f,c
 13023  00201E  0EFF               	movlw	255
 13024  002020  1611               	andwf	i2___ftmul@f2+1,f,c
 13025  002022  0E00               	movlw	0
 13026  002024  1612               	andwf	i2___ftmul@f2+2,f,c
 13027  002026  0E00               	movlw	0
 13028  002028  6E17               	movwf	i2___ftmul@f3_as_product,c
 13029  00202A  0E00               	movlw	0
 13030  00202C  6E18               	movwf	i2___ftmul@f3_as_product+1,c
 13031  00202E  0E00               	movlw	0
 13032  002030  6E19               	movwf	i2___ftmul@f3_as_product+2,c
 13033  002032  0E07               	movlw	7
 13034  002034  6E1A               	movwf	i2___ftmul@cntr,c
 13035  002036                     i2l4436:
 13036  002036  A00D               	btfss	i2___ftmul@f1,0,c
 13037  002038  D006               	goto	i2l4440
 13038  00203A  5010               	movf	i2___ftmul@f2,w,c
 13039  00203C  2617               	addwf	i2___ftmul@f3_as_product,f,c
 13040  00203E  5011               	movf	i2___ftmul@f2+1,w,c
 13041  002040  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13042  002042  5012               	movf	i2___ftmul@f2+2,w,c
 13043  002044  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13044  002046                     i2l4440:
 13045  002046  90D8               	bcf	status,0,c
 13046  002048  320F               	rrcf	i2___ftmul@f1+2,f,c
 13047  00204A  320E               	rrcf	i2___ftmul@f1+1,f,c
 13048  00204C  320D               	rrcf	i2___ftmul@f1,f,c
 13049  00204E  90D8               	bcf	status,0,c
 13050  002050  3610               	rlcf	i2___ftmul@f2,f,c
 13051  002052  3611               	rlcf	i2___ftmul@f2+1,f,c
 13052  002054  3612               	rlcf	i2___ftmul@f2+2,f,c
 13053  002056  2E1A               	decfsz	i2___ftmul@cntr,f,c
 13054  002058  D7EE               	goto	i2l4436
 13055  00205A  0E09               	movlw	9
 13056  00205C  6E1A               	movwf	i2___ftmul@cntr,c
 13057  00205E                     i2l4446:
 13058  00205E  A00D               	btfss	i2___ftmul@f1,0,c
 13059  002060  D006               	goto	i2l4450
 13060  002062  5010               	movf	i2___ftmul@f2,w,c
 13061  002064  2617               	addwf	i2___ftmul@f3_as_product,f,c
 13062  002066  5011               	movf	i2___ftmul@f2+1,w,c
 13063  002068  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13064  00206A  5012               	movf	i2___ftmul@f2+2,w,c
 13065  00206C  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13066  00206E                     i2l4450:
 13067  00206E  90D8               	bcf	status,0,c
 13068  002070  320F               	rrcf	i2___ftmul@f1+2,f,c
 13069  002072  320E               	rrcf	i2___ftmul@f1+1,f,c
 13070  002074  320D               	rrcf	i2___ftmul@f1,f,c
 13071  002076  90D8               	bcf	status,0,c
 13072  002078  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
 13073  00207A  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
 13074  00207C  3217               	rrcf	i2___ftmul@f3_as_product,f,c
 13075  00207E  2E1A               	decfsz	i2___ftmul@cntr,f,c
 13076  002080  D7EE               	goto	i2l4446
 13077  002082  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 13078  002086  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 13079  00208A  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 13080  00208E  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 13081  002092  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 13082  002096  ECEE  F013         	call	i2___ftpack	;wreg free
 13083  00209A  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
 13084  00209E  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
 13085  0020A2  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
 13086  0020A6                     i2l1103:
 13087  0020A6  0012               	return	
 13088  0020A8                     __end_ofi2___ftmul:
 13089                           	opt stack 0
 13090                           pclatu	equ	0xFFB
 13091                           pclath	equ	0xFFA
 13092                           tblptru	equ	0xFF8
 13093                           tblptrh	equ	0xFF7
 13094                           tblptrl	equ	0xFF6
 13095                           tablat	equ	0xFF5
 13096                           prodh	equ	0xFF4
 13097                           prodl	equ	0xFF3
 13098                           intcon	equ	0xFF2
 13099                           intcon2	equ	0xFF1
 13100                           intcon3	equ	0xFF0
 13101                           indf0	equ	0xFEF
 13102                           postinc0	equ	0xFEE
 13103                           fsr0h	equ	0xFEA
 13104                           fsr0l	equ	0xFE9
 13105                           wreg	equ	0xFE8
 13106                           postinc1	equ	0xFE6
 13107                           postdec1	equ	0xFE5
 13108                           fsr1h	equ	0xFE2
 13109                           fsr1l	equ	0xFE1
 13110                           indf2	equ	0xFDF
 13111                           postinc2	equ	0xFDE
 13112                           postdec2	equ	0xFDD
 13113                           fsr2h	equ	0xFDA
 13114                           fsr2l	equ	0xFD9
 13115                           status	equ	0xFD8
 13116                           
 13117 ;; *************** function i2___ftpack *****************
 13118 ;; Defined at:
 13119 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  arg             3    0[COMRAM] unsigned um
 13122 ;;  exp             1    3[COMRAM] unsigned char 
 13123 ;;  sign            1    4[COMRAM] unsigned char 
 13124 ;; Auto vars:     Size  Location     Type
 13125 ;;		None
 13126 ;; Return value:  Size  Location     Type
 13127 ;;                  3    0[COMRAM] float 
 13128 ;; Registers used:
 13129 ;;		wreg, status,2, status,0
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13135 ;;      Params:         5       0       0       0       0       0       0       0       0
 13136 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13137 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13138 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13139 ;;Total ram usage:        8 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; This function calls:
 13142 ;;		Nothing
 13143 ;; This function is called by:
 13144 ;;		i2___ftmul
 13145 ;;		i2___lbtoft
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           	psect	text60
 13150  0027DC                     __ptext60:
 13151                           	opt stack 0
 13152  0027DC                     i2___ftpack:
 13153                           	opt stack 21
 13154                           
 13155                           ;incstack = 0
 13156  0027DC  5004               	movf	i2___ftpack@exp,w,c
 13157  0027DE  B4D8               	btfsc	status,2,c
 13158  0027E0  D005               	goto	i2l4066
 13159  0027E2  5001               	movf	i2___ftpack@arg,w,c
 13160  0027E4  1002               	iorwf	i2___ftpack@arg+1,w,c
 13161  0027E6  1003               	iorwf	i2___ftpack@arg+2,w,c
 13162  0027E8  A4D8               	btfss	status,2,c
 13163  0027EA  D00C               	goto	i2l4072
 13164  0027EC                     i2l4066:
 13165  0027EC  0E00               	movlw	0
 13166  0027EE  6E01               	movwf	?i2___ftpack,c
 13167  0027F0  0E00               	movlw	0
 13168  0027F2  6E02               	movwf	?i2___ftpack+1,c
 13169  0027F4  0E00               	movlw	0
 13170  0027F6  6E03               	movwf	?i2___ftpack+2,c
 13171  0027F8  D044               	goto	i2l1002
 13172  0027FA                     i2l4070:
 13173  0027FA  2A04               	incf	i2___ftpack@exp,f,c
 13174  0027FC  90D8               	bcf	status,0,c
 13175  0027FE  3203               	rrcf	i2___ftpack@arg+2,f,c
 13176  002800  3202               	rrcf	i2___ftpack@arg+1,f,c
 13177  002802  3201               	rrcf	i2___ftpack@arg,f,c
 13178  002804                     i2l4072:
 13179  002804  0E00               	movlw	0
 13180  002806  1401               	andwf	i2___ftpack@arg,w,c
 13181  002808  6E06               	movwf	??i2___ftpack& (0+255),c
 13182  00280A  0E00               	movlw	0
 13183  00280C  1402               	andwf	i2___ftpack@arg+1,w,c
 13184  00280E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13185  002810  0EFE               	movlw	254
 13186  002812  1403               	andwf	i2___ftpack@arg+2,w,c
 13187  002814  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13188  002816  5006               	movf	??i2___ftpack,w,c
 13189  002818  1007               	iorwf	??i2___ftpack+1,w,c
 13190  00281A  1008               	iorwf	??i2___ftpack+2,w,c
 13191  00281C  B4D8               	btfsc	status,2,c
 13192  00281E  D00C               	goto	i2l4078
 13193  002820  D7EC               	goto	i2l4070
 13194  002822                     i2l4074:
 13195  002822  2A04               	incf	i2___ftpack@exp,f,c
 13196  002824  0E01               	movlw	1
 13197  002826  2601               	addwf	i2___ftpack@arg,f,c
 13198  002828  0E00               	movlw	0
 13199  00282A  2202               	addwfc	i2___ftpack@arg+1,f,c
 13200  00282C  0E00               	movlw	0
 13201  00282E  2203               	addwfc	i2___ftpack@arg+2,f,c
 13202  002830  90D8               	bcf	status,0,c
 13203  002832  3203               	rrcf	i2___ftpack@arg+2,f,c
 13204  002834  3202               	rrcf	i2___ftpack@arg+1,f,c
 13205  002836  3201               	rrcf	i2___ftpack@arg,f,c
 13206  002838                     i2l4078:
 13207  002838  0E00               	movlw	0
 13208  00283A  1401               	andwf	i2___ftpack@arg,w,c
 13209  00283C  6E06               	movwf	??i2___ftpack& (0+255),c
 13210  00283E  0E00               	movlw	0
 13211  002840  1402               	andwf	i2___ftpack@arg+1,w,c
 13212  002842  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13213  002844  0EFF               	movlw	255
 13214  002846  1403               	andwf	i2___ftpack@arg+2,w,c
 13215  002848  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13216  00284A  5006               	movf	??i2___ftpack,w,c
 13217  00284C  1007               	iorwf	??i2___ftpack+1,w,c
 13218  00284E  1008               	iorwf	??i2___ftpack+2,w,c
 13219  002850  B4D8               	btfsc	status,2,c
 13220  002852  D006               	goto	i2l4082
 13221  002854  D7E6               	goto	i2l4074
 13222  002856                     i2l4080:
 13223  002856  0604               	decf	i2___ftpack@exp,f,c
 13224  002858  90D8               	bcf	status,0,c
 13225  00285A  3601               	rlcf	i2___ftpack@arg,f,c
 13226  00285C  3602               	rlcf	i2___ftpack@arg+1,f,c
 13227  00285E  3603               	rlcf	i2___ftpack@arg+2,f,c
 13228  002860                     i2l4082:
 13229  002860  AE02               	btfss	i2___ftpack@arg+1,7,c
 13230  002862  D7F9               	goto	i2l4080
 13231  002864  A004               	btfss	i2___ftpack@exp,0,c
 13232  002866  9E02               	bcf	i2___ftpack@arg+1,7,c
 13233  002868  90D8               	bcf	status,0,c
 13234  00286A  3204               	rrcf	i2___ftpack@exp,f,c
 13235  00286C  5004               	movf	i2___ftpack@exp,w,c
 13236  00286E  1203               	iorwf	i2___ftpack@arg+2,f,c
 13237  002870  5005               	movf	i2___ftpack@sign,w,c
 13238  002872  A4D8               	btfss	status,2,c
 13239  002874  8E03               	bsf	i2___ftpack@arg+2,7,c
 13240  002876  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13241  00287A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13242  00287E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13243  002882                     i2l1002:
 13244  002882  0012               	return	
 13245  002884                     __end_ofi2___ftpack:
 13246                           	opt stack 0
 13247                           pclatu	equ	0xFFB
 13248                           pclath	equ	0xFFA
 13249                           tblptru	equ	0xFF8
 13250                           tblptrh	equ	0xFF7
 13251                           tblptrl	equ	0xFF6
 13252                           tablat	equ	0xFF5
 13253                           prodh	equ	0xFF4
 13254                           prodl	equ	0xFF3
 13255                           intcon	equ	0xFF2
 13256                           intcon2	equ	0xFF1
 13257                           intcon3	equ	0xFF0
 13258                           indf0	equ	0xFEF
 13259                           postinc0	equ	0xFEE
 13260                           fsr0h	equ	0xFEA
 13261                           fsr0l	equ	0xFE9
 13262                           wreg	equ	0xFE8
 13263                           postinc1	equ	0xFE6
 13264                           postdec1	equ	0xFE5
 13265                           fsr1h	equ	0xFE2
 13266                           fsr1l	equ	0xFE1
 13267                           indf2	equ	0xFDF
 13268                           postinc2	equ	0xFDE
 13269                           postdec2	equ	0xFDD
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function i2_SetDCPWM1 *****************
 13275 ;; Defined at:
 13276 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;  dutycycle       2    0[COMRAM] unsigned int 
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  SetDCPWM1       2    4[COMRAM] struct PWMDC
 13281 ;; Return value:  Size  Location     Type
 13282 ;;		None               void
 13283 ;; Registers used:
 13284 ;;		wreg, status,2, status,0
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13290 ;;      Params:         2       0       0       0       0       0       0       0       0
 13291 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13292 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13293 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13294 ;;Total ram usage:        6 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; This function calls:
 13297 ;;		Nothing
 13298 ;; This function is called by:
 13299 ;;		i2_PWM_DutyCycle1
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           	psect	text61
 13304  003270                     __ptext61:
 13305                           	opt stack 0
 13306  003270                     i2_SetDCPWM1:
 13307                           	opt stack 22
 13308                           
 13309                           ;incstack = 0
 13310  003270  C001  F003         	movff	i2SetDCPWM1@dutycycle,??i2_SetDCPWM1
 13311  003274  C002  F004         	movff	i2SetDCPWM1@dutycycle+1,??i2_SetDCPWM1+1
 13312  003278  0E06               	movlw	6
 13313  00327A                     i2u479_45:
 13314  00327A  90D8               	bcf	status,0,c
 13315  00327C  3603               	rlcf	??i2_SetDCPWM1,f,c
 13316  00327E  3604               	rlcf	??i2_SetDCPWM1+1,f,c
 13317  003280  2EE8               	decfsz	wreg,f,c
 13318  003282  D7FB               	goto	i2u479_45
 13319  003284  C003  F005         	movff	??i2_SetDCPWM1,i2SetDCPWM1@DCycle
 13320  003288  C004  F006         	movff	??i2_SetDCPWM1+1,i2SetDCPWM1@DCycle+1
 13321  00328C  C006  FFBE         	movff	i2SetDCPWM1@DCycle+1,4030	;volatile
 13322  003290  C005  F003         	movff	i2SetDCPWM1@DCycle,??i2_SetDCPWM1
 13323  003294  90D8               	bcf	status,0,c
 13324  003296  3203               	rrcf	??i2_SetDCPWM1,f,c
 13325  003298  90D8               	bcf	status,0,c
 13326  00329A  3203               	rrcf	??i2_SetDCPWM1,f,c
 13327  00329C  0E30               	movlw	48
 13328  00329E  1603               	andwf	??i2_SetDCPWM1,f,c
 13329  0032A0  50BD               	movf	4029,w,c	;volatile
 13330  0032A2  0BCF               	andlw	207
 13331  0032A4  1003               	iorwf	??i2_SetDCPWM1,w,c
 13332  0032A6  6EBD               	movwf	4029,c	;volatile
 13333  0032A8  0012               	return	
 13334  0032AA                     __end_ofi2_SetDCPWM1:
 13335                           	opt stack 0
 13336                           pclatu	equ	0xFFB
 13337                           pclath	equ	0xFFA
 13338                           tblptru	equ	0xFF8
 13339                           tblptrh	equ	0xFF7
 13340                           tblptrl	equ	0xFF6
 13341                           tablat	equ	0xFF5
 13342                           prodh	equ	0xFF4
 13343                           prodl	equ	0xFF3
 13344                           intcon	equ	0xFF2
 13345                           intcon2	equ	0xFF1
 13346                           intcon3	equ	0xFF0
 13347                           indf0	equ	0xFEF
 13348                           postinc0	equ	0xFEE
 13349                           fsr0h	equ	0xFEA
 13350                           fsr0l	equ	0xFE9
 13351                           wreg	equ	0xFE8
 13352                           postinc1	equ	0xFE6
 13353                           postdec1	equ	0xFE5
 13354                           fsr1h	equ	0xFE2
 13355                           fsr1l	equ	0xFE1
 13356                           indf2	equ	0xFDF
 13357                           postinc2	equ	0xFDE
 13358                           postdec2	equ	0xFDD
 13359                           fsr2h	equ	0xFDA
 13360                           fsr2l	equ	0xFD9
 13361                           status	equ	0xFD8
 13362                           
 13363 ;; *************** function i2_Lcd_Write_String *****************
 13364 ;; Defined at:
 13365 ;;		line 90 in file "lcd.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;  a               2    4[COMRAM] PTR unsigned char 
 13368 ;;		 -> STR_24(11), STR_23(7), STR_22(18), STR_21(17), 
 13369 ;;		 -> STR_20(17), STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
 13370 ;;		 -> STR_16(8), STR_14(2), STR_13(2), STR_12(2), 
 13371 ;;		 -> STR_11(16), STR_10(7), 
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;  Lcd_Write_St    2    8[COMRAM] int 
 13374 ;; Return value:  Size  Location     Type
 13375 ;;		None               void
 13376 ;; Registers used:
 13377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13378 ;; Tracked objects:
 13379 ;;		On entry : 0/0
 13380 ;;		On exit  : 0/0
 13381 ;;		Unchanged: 0/0
 13382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13383 ;;      Params:         2       0       0       0       0       0       0       0       0
 13384 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13385 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13386 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13387 ;;Total ram usage:        6 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:    2
 13390 ;; This function calls:
 13391 ;;		i2_Lcd_Write_Char
 13392 ;; This function is called by:
 13393 ;;		_TMRO_USART
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           	psect	text62
 13398  002CC4                     __ptext62:
 13399                           	opt stack 0
 13400  002CC4                     i2_Lcd_Write_String:
 13401                           	opt stack 21
 13402                           
 13403                           ;lcd.c: 91: int i;
 13404                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 13405                           
 13406                           ;incstack = 0
 13407  002CC4  0E00               	movlw	0
 13408  002CC6  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 13409  002CC8  0E00               	movlw	0
 13410  002CCA  6E09               	movwf	i2Lcd_Write_String@i,c
 13411  002CCC  D01C               	goto	i2l4712
 13412  002CCE                     i2l4708:
 13413                           
 13414                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 13415  002CCE  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13416  002CD2  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13417  002CD6  5009               	movf	i2Lcd_Write_String@i,w,c
 13418  002CD8  2607               	addwf	??i2_Lcd_Write_String,f,c
 13419  002CDA  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13420  002CDC  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13421  002CDE  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13422  002CE2  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13423  002CE6  6AF8               	clrf	tblptru,c
 13424  002CE8  0E07               	movlw	(high __ramtop+-1)
 13425  002CEA  64F7               	cpfsgt	tblptrh,c
 13426  002CEC  D003               	bra	i2u506_47
 13427  002CEE  0008               	tblrd		*
 13428  002CF0  50F5               	movf	tablat,w,c
 13429  002CF2  D005               	bra	i2u506_40
 13430  002CF4                     i2u506_47:
 13431  002CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 13432  002CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 13433  002CFC  50EF               	movf	indf0,w,c
 13434  002CFE                     i2u506_40:
 13435  002CFE  EC55  F019         	call	i2_Lcd_Write_Char
 13436  002D02  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 13437  002D04  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 13438  002D06                     i2l4712:
 13439  002D06  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13440  002D0A  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13441  002D0E  5009               	movf	i2Lcd_Write_String@i,w,c
 13442  002D10  2607               	addwf	??i2_Lcd_Write_String,f,c
 13443  002D12  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13444  002D14  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13445  002D16  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13446  002D1A  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13447  002D1E  6AF8               	clrf	tblptru,c
 13448  002D20  0E07               	movlw	(high __ramtop+-1)
 13449  002D22  64F7               	cpfsgt	tblptrh,c
 13450  002D24  D003               	bra	i2u507_47
 13451  002D26  0008               	tblrd		*
 13452  002D28  50F5               	movf	tablat,w,c
 13453  002D2A  D005               	bra	i2u507_40
 13454  002D2C                     i2u507_47:
 13455  002D2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13456  002D30  CFF7 FFEA          	movff	tblptrh,fsr0h
 13457  002D34  50EF               	movf	indf0,w,c
 13458  002D36                     i2u507_40:
 13459  002D36  0900               	iorlw	0
 13460  002D38  B4D8               	btfsc	status,2,c
 13461  002D3A  0012               	return	
 13462  002D3C  D7C8               	goto	i2l4708
 13463  002D3E                     __end_ofi2_Lcd_Write_String:
 13464                           	opt stack 0
 13465                           pclatu	equ	0xFFB
 13466                           pclath	equ	0xFFA
 13467                           tblptru	equ	0xFF8
 13468                           tblptrh	equ	0xFF7
 13469                           tblptrl	equ	0xFF6
 13470                           tablat	equ	0xFF5
 13471                           prodh	equ	0xFF4
 13472                           prodl	equ	0xFF3
 13473                           intcon	equ	0xFF2
 13474                           intcon2	equ	0xFF1
 13475                           intcon3	equ	0xFF0
 13476                           indf0	equ	0xFEF
 13477                           postinc0	equ	0xFEE
 13478                           fsr0h	equ	0xFEA
 13479                           fsr0l	equ	0xFE9
 13480                           wreg	equ	0xFE8
 13481                           postinc1	equ	0xFE6
 13482                           postdec1	equ	0xFE5
 13483                           fsr1h	equ	0xFE2
 13484                           fsr1l	equ	0xFE1
 13485                           indf2	equ	0xFDF
 13486                           postinc2	equ	0xFDE
 13487                           postdec2	equ	0xFDD
 13488                           fsr2h	equ	0xFDA
 13489                           fsr2l	equ	0xFD9
 13490                           status	equ	0xFD8
 13491                           
 13492 ;; *************** function i2_Lcd_Write_Char *****************
 13493 ;; Defined at:
 13494 ;;		line 75 in file "lcd.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  a               1    wreg     unsigned char 
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;  a               1    3[COMRAM] unsigned char 
 13499 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 13500 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 13501 ;; Return value:  Size  Location     Type
 13502 ;;		None               void
 13503 ;; Registers used:
 13504 ;;		wreg, status,2, status,0, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13510 ;;      Params:         0       0       0       0       0       0       0       0       0
 13511 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13513 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13514 ;;Total ram usage:        3 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    1
 13517 ;; This function calls:
 13518 ;;		i2_Lcd_Port
 13519 ;; This function is called by:
 13520 ;;		i2_Lcd_Write_String
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           	psect	text63
 13525  0032AA                     __ptext63:
 13526                           	opt stack 0
 13527  0032AA                     i2_Lcd_Write_Char:
 13528                           	opt stack 21
 13529                           
 13530                           ;incstack = 0
 13531                           ;i2Lcd_Write_Char@a stored from wreg
 13532  0032AA  6E04               	movwf	i2Lcd_Write_Char@a,c
 13533                           
 13534                           ;lcd.c: 76: char temp, y;
 13535                           ;lcd.c: 77: temp = a & 0x0F;
 13536  0032AC  5004               	movf	i2Lcd_Write_Char@a,w,c
 13537  0032AE  0B0F               	andlw	15
 13538  0032B0  6E02               	movwf	i2Lcd_Write_Char@temp,c
 13539                           
 13540                           ;lcd.c: 78: y = a & 0xF0;
 13541  0032B2  5004               	movf	i2Lcd_Write_Char@a,w,c
 13542  0032B4  0BF0               	andlw	240
 13543  0032B6  6E03               	movwf	i2Lcd_Write_Char@y,c
 13544                           
 13545                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 13546  0032B8  8084               	bsf	3972,0,c	;volatile
 13547                           
 13548                           ;lcd.c: 80: Lcd_Port(y >> 4);
 13549  0032BA  3803               	swapf	i2Lcd_Write_Char@y,w,c
 13550  0032BC  0B0F               	andlw	15
 13551  0032BE  ECD9  F019         	call	i2_Lcd_Port
 13552                           
 13553                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 13554  0032C2  8484               	bsf	3972,2,c	;volatile
 13555                           
 13556                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13557  0032C4  0E0D               	movlw	13
 13558  0032C6                     i2u535_47:
 13559  0032C6  2EE8               	decfsz	wreg,f,c
 13560  0032C8  D7FE               	goto	i2u535_47
 13561  0032CA  F000               	nop	
 13562                           
 13563                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 13564  0032CC  9484               	bcf	3972,2,c	;volatile
 13565                           
 13566                           ;lcd.c: 84: Lcd_Port(temp);
 13567  0032CE  5002               	movf	i2Lcd_Write_Char@temp,w,c
 13568  0032D0  ECD9  F019         	call	i2_Lcd_Port
 13569                           
 13570                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 13571  0032D4  8484               	bsf	3972,2,c	;volatile
 13572                           
 13573                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13574  0032D6  0E0D               	movlw	13
 13575  0032D8                     i2u536_47:
 13576  0032D8  2EE8               	decfsz	wreg,f,c
 13577  0032DA  D7FE               	goto	i2u536_47
 13578  0032DC  F000               	nop	
 13579                           
 13580                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 13581  0032DE  9484               	bcf	3972,2,c	;volatile
 13582  0032E0  0012               	return	
 13583  0032E2                     __end_ofi2_Lcd_Write_Char:
 13584                           	opt stack 0
 13585                           pclatu	equ	0xFFB
 13586                           pclath	equ	0xFFA
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           intcon2	equ	0xFF1
 13595                           intcon3	equ	0xFF0
 13596                           indf0	equ	0xFEF
 13597                           postinc0	equ	0xFEE
 13598                           fsr0h	equ	0xFEA
 13599                           fsr0l	equ	0xFE9
 13600                           wreg	equ	0xFE8
 13601                           postinc1	equ	0xFE6
 13602                           postdec1	equ	0xFE5
 13603                           fsr1h	equ	0xFE2
 13604                           fsr1l	equ	0xFE1
 13605                           indf2	equ	0xFDF
 13606                           postinc2	equ	0xFDE
 13607                           postdec2	equ	0xFDD
 13608                           fsr2h	equ	0xFDA
 13609                           fsr2l	equ	0xFD9
 13610                           status	equ	0xFD8
 13611                           
 13612 ;; *************** function i2_Lcd_Set_Cursor *****************
 13613 ;; Defined at:
 13614 ;;		line 40 in file "lcd.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  a               1    wreg     unsigned char 
 13617 ;;  b               1    3[COMRAM] unsigned char 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  a               1    4[COMRAM] unsigned char 
 13620 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 13621 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 13622 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 13623 ;; Return value:  Size  Location     Type
 13624 ;;		None               void
 13625 ;; Registers used:
 13626 ;;		wreg, status,2, status,0, cstack
 13627 ;; Tracked objects:
 13628 ;;		On entry : 0/0
 13629 ;;		On exit  : 0/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13632 ;;      Params:         1       0       0       0       0       0       0       0       0
 13633 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13634 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13635 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13636 ;;Total ram usage:        5 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; Hardware stack levels required when called:    2
 13639 ;; This function calls:
 13640 ;;		i2_Lcd_Cmd
 13641 ;; This function is called by:
 13642 ;;		_TMRO_USART
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           	psect	text64
 13647  002FC8                     __ptext64:
 13648                           	opt stack 0
 13649  002FC8                     i2_Lcd_Set_Cursor:
 13650                           	opt stack 21
 13651                           
 13652                           ;incstack = 0
 13653                           ;i2Lcd_Set_Cursor@a stored from wreg
 13654  002FC8  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 13655                           
 13656                           ;lcd.c: 41: char temp, z, y;
 13657                           ;lcd.c: 42: if (a == 1) {
 13658  002FCA  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 13659  002FCC  A4D8               	btfss	status,2,c
 13660  002FCE  D010               	goto	i2l4698
 13661                           
 13662                           ;lcd.c: 43: temp = 0x80 + b - 1;
 13663  002FD0  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13664  002FD2  0F7F               	addlw	127
 13665  002FD4  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13666                           
 13667                           ;lcd.c: 44: z = temp >> 4;
 13668  002FD6  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13669  002FD8  0B0F               	andlw	15
 13670  002FDA  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13671                           
 13672                           ;lcd.c: 45: y = temp & 0x0F;
 13673  002FDC  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13674  002FDE  0B0F               	andlw	15
 13675  002FE0  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13676                           
 13677                           ;lcd.c: 46: Lcd_Cmd(z);
 13678  002FE2  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13679  002FE4  EC3A  F01A         	call	i2_Lcd_Cmd
 13680                           
 13681                           ;lcd.c: 47: Lcd_Cmd(y);
 13682  002FE8  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13683  002FEA  EC3A  F01A         	call	i2_Lcd_Cmd
 13684                           
 13685                           ;lcd.c: 48: } else if (a == 2) {
 13686  002FEE  D013               	goto	i2l289
 13687  002FF0                     i2l4698:
 13688  002FF0  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 13689  002FF2  0A02               	xorlw	2
 13690  002FF4  A4D8               	btfss	status,2,c
 13691  002FF6  D00F               	goto	i2l289
 13692                           
 13693                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 13694  002FF8  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13695  002FFA  0FBF               	addlw	191
 13696  002FFC  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13697                           
 13698                           ;lcd.c: 50: z = temp >> 4;
 13699  002FFE  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13700  003000  0B0F               	andlw	15
 13701  003002  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13702                           
 13703                           ;lcd.c: 51: y = temp & 0x0F;
 13704  003004  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13705  003006  0B0F               	andlw	15
 13706  003008  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13707                           
 13708                           ;lcd.c: 52: Lcd_Cmd(z);
 13709  00300A  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13710  00300C  EC3A  F01A         	call	i2_Lcd_Cmd
 13711                           
 13712                           ;lcd.c: 53: Lcd_Cmd(y);
 13713  003010  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13714  003012  EC3A  F01A         	call	i2_Lcd_Cmd
 13715  003016                     i2l289:
 13716  003016  0012               	return	
 13717  003018                     __end_ofi2_Lcd_Set_Cursor:
 13718                           	opt stack 0
 13719                           pclatu	equ	0xFFB
 13720                           pclath	equ	0xFFA
 13721                           tblptru	equ	0xFF8
 13722                           tblptrh	equ	0xFF7
 13723                           tblptrl	equ	0xFF6
 13724                           tablat	equ	0xFF5
 13725                           prodh	equ	0xFF4
 13726                           prodl	equ	0xFF3
 13727                           intcon	equ	0xFF2
 13728                           intcon2	equ	0xFF1
 13729                           intcon3	equ	0xFF0
 13730                           indf0	equ	0xFEF
 13731                           postinc0	equ	0xFEE
 13732                           fsr0h	equ	0xFEA
 13733                           fsr0l	equ	0xFE9
 13734                           wreg	equ	0xFE8
 13735                           postinc1	equ	0xFE6
 13736                           postdec1	equ	0xFE5
 13737                           fsr1h	equ	0xFE2
 13738                           fsr1l	equ	0xFE1
 13739                           indf2	equ	0xFDF
 13740                           postinc2	equ	0xFDE
 13741                           postdec2	equ	0xFDD
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8
 13745                           
 13746 ;; *************** function i2_Lcd_Clear *****************
 13747 ;; Defined at:
 13748 ;;		line 35 in file "lcd.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;		None
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;		None
 13753 ;; Return value:  Size  Location     Type
 13754 ;;		None               void
 13755 ;; Registers used:
 13756 ;;		wreg, status,2, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0
 13763 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13765 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13766 ;;Total ram usage:        0 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    2
 13769 ;; This function calls:
 13770 ;;		i2_Lcd_Cmd
 13771 ;; This function is called by:
 13772 ;;		_TMRO_USART
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           	psect	text65
 13777  003556                     __ptext65:
 13778                           	opt stack 0
 13779  003556                     i2_Lcd_Clear:
 13780                           	opt stack 21
 13781                           
 13782                           ;lcd.c: 36: Lcd_Cmd(0);
 13783                           
 13784                           ;incstack = 0
 13785  003556  0E00               	movlw	0
 13786  003558  EC3A  F01A         	call	i2_Lcd_Cmd
 13787                           
 13788                           ;lcd.c: 37: Lcd_Cmd(1);
 13789  00355C  0E01               	movlw	1
 13790  00355E  EC3A  F01A         	call	i2_Lcd_Cmd
 13791  003562  0012               	return	
 13792  003564                     __end_ofi2_Lcd_Clear:
 13793                           	opt stack 0
 13794                           pclatu	equ	0xFFB
 13795                           pclath	equ	0xFFA
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           intcon	equ	0xFF2
 13803                           intcon2	equ	0xFF1
 13804                           intcon3	equ	0xFF0
 13805                           indf0	equ	0xFEF
 13806                           postinc0	equ	0xFEE
 13807                           fsr0h	equ	0xFEA
 13808                           fsr0l	equ	0xFE9
 13809                           wreg	equ	0xFE8
 13810                           postinc1	equ	0xFE6
 13811                           postdec1	equ	0xFE5
 13812                           fsr1h	equ	0xFE2
 13813                           fsr1l	equ	0xFE1
 13814                           indf2	equ	0xFDF
 13815                           postinc2	equ	0xFDE
 13816                           postdec2	equ	0xFDD
 13817                           fsr2h	equ	0xFDA
 13818                           fsr2l	equ	0xFD9
 13819                           status	equ	0xFD8
 13820                           
 13821 ;; *************** function i2_Lcd_Cmd *****************
 13822 ;; Defined at:
 13823 ;;		line 27 in file "lcd.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;  a               1    wreg     unsigned char 
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;  a               1    2[COMRAM] unsigned char 
 13828 ;; Return value:  Size  Location     Type
 13829 ;;		None               void
 13830 ;; Registers used:
 13831 ;;		wreg, status,2, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0
 13838 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13839 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13840 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13841 ;;Total ram usage:        2 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    1
 13844 ;; This function calls:
 13845 ;;		i2_Lcd_Port
 13846 ;; This function is called by:
 13847 ;;		i2_Lcd_Clear
 13848 ;;		i2_Lcd_Set_Cursor
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           	psect	text66
 13853  003474                     __ptext66:
 13854                           	opt stack 0
 13855  003474                     i2_Lcd_Cmd:
 13856                           	opt stack 21
 13857                           
 13858                           ;incstack = 0
 13859                           ;i2Lcd_Cmd@a stored from wreg
 13860  003474  6E03               	movwf	i2Lcd_Cmd@a,c
 13861                           
 13862                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 13863  003476  9084               	bcf	3972,0,c	;volatile
 13864                           
 13865                           ;lcd.c: 29: Lcd_Port(a);
 13866  003478  5003               	movf	i2Lcd_Cmd@a,w,c
 13867  00347A  ECD9  F019         	call	i2_Lcd_Port
 13868                           
 13869                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 13870  00347E  8484               	bsf	3972,2,c	;volatile
 13871                           
 13872                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 13873  003480  0E06               	movlw	6
 13874  003482  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 13875  003484  0E30               	movlw	48
 13876  003486                     i2u537_47:
 13877  003486  2EE8               	decfsz	wreg,f,c
 13878  003488  D7FE               	goto	i2u537_47
 13879  00348A  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 13880  00348C  D7FC               	goto	i2u537_47
 13881  00348E  D000               	nop2	
 13882                           
 13883                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 13884  003490  9484               	bcf	3972,2,c	;volatile
 13885  003492  0012               	return	
 13886  003494                     __end_ofi2_Lcd_Cmd:
 13887                           	opt stack 0
 13888                           pclatu	equ	0xFFB
 13889                           pclath	equ	0xFFA
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           intcon	equ	0xFF2
 13897                           intcon2	equ	0xFF1
 13898                           intcon3	equ	0xFF0
 13899                           indf0	equ	0xFEF
 13900                           postinc0	equ	0xFEE
 13901                           fsr0h	equ	0xFEA
 13902                           fsr0l	equ	0xFE9
 13903                           wreg	equ	0xFE8
 13904                           postinc1	equ	0xFE6
 13905                           postdec1	equ	0xFE5
 13906                           fsr1h	equ	0xFE2
 13907                           fsr1l	equ	0xFE1
 13908                           indf2	equ	0xFDF
 13909                           postinc2	equ	0xFDE
 13910                           postdec2	equ	0xFDD
 13911                           fsr2h	equ	0xFDA
 13912                           fsr2l	equ	0xFD9
 13913                           status	equ	0xFD8
 13914                           
 13915 ;; *************** function i2_Lcd_Port *****************
 13916 ;; Defined at:
 13917 ;;		line 6 in file "lcd.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  a               1    wreg     unsigned char 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  a               1    0[COMRAM] unsigned char 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;		None               void
 13924 ;; Registers used:
 13925 ;;		wreg
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0
 13932 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13934 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13935 ;;Total ram usage:        1 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; This function calls:
 13938 ;;		Nothing
 13939 ;; This function is called by:
 13940 ;;		i2_Lcd_Cmd
 13941 ;;		i2_Lcd_Write_Char
 13942 ;; This function uses a non-reentrant model
 13943 ;;
 13944                           
 13945                           	psect	text67
 13946  0033B2                     __ptext67:
 13947                           	opt stack 0
 13948  0033B2                     i2_Lcd_Port:
 13949                           	opt stack 21
 13950                           
 13951                           ;incstack = 0
 13952                           ;i2Lcd_Port@a stored from wreg
 13953  0033B2  6E01               	movwf	i2Lcd_Port@a,c
 13954                           
 13955                           ;lcd.c: 7: if (a & 1)
 13956  0033B4  A001               	btfss	i2Lcd_Port@a,0,c
 13957  0033B6  D002               	goto	i2l269
 13958                           
 13959                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 13960  0033B8  8883               	bsf	3971,4,c	;volatile
 13961  0033BA  D001               	goto	i2l4050
 13962  0033BC                     i2l269:
 13963                           
 13964                           ;lcd.c: 9: else
 13965                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 13966  0033BC  9883               	bcf	3971,4,c	;volatile
 13967  0033BE                     i2l4050:
 13968                           
 13969                           ;lcd.c: 12: if (a & 2)
 13970  0033BE  A201               	btfss	i2Lcd_Port@a,1,c
 13971  0033C0  D002               	goto	i2l271
 13972                           
 13973                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 13974  0033C2  8A83               	bsf	3971,5,c	;volatile
 13975  0033C4  D001               	goto	i2l4054
 13976  0033C6                     i2l271:
 13977                           
 13978                           ;lcd.c: 14: else
 13979                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 13980  0033C6  9A83               	bcf	3971,5,c	;volatile
 13981  0033C8                     i2l4054:
 13982                           
 13983                           ;lcd.c: 17: if (a & 4)
 13984  0033C8  A401               	btfss	i2Lcd_Port@a,2,c
 13985  0033CA  D002               	goto	i2l273
 13986                           
 13987                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 13988  0033CC  8C83               	bsf	3971,6,c	;volatile
 13989  0033CE  D001               	goto	i2l4058
 13990  0033D0                     i2l273:
 13991                           
 13992                           ;lcd.c: 19: else
 13993                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 13994  0033D0  9C83               	bcf	3971,6,c	;volatile
 13995  0033D2                     i2l4058:
 13996                           
 13997                           ;lcd.c: 22: if (a & 8)
 13998  0033D2  A601               	btfss	i2Lcd_Port@a,3,c
 13999  0033D4  D002               	goto	i2l275
 14000                           
 14001                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 14002  0033D6  8E83               	bsf	3971,7,c	;volatile
 14003  0033D8  D001               	goto	i2l277
 14004  0033DA                     i2l275:
 14005                           
 14006                           ;lcd.c: 24: else
 14007                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 14008  0033DA  9E83               	bcf	3971,7,c	;volatile
 14009  0033DC                     i2l277:
 14010  0033DC  0012               	return	
 14011  0033DE                     __end_ofi2_Lcd_Port:
 14012                           	opt stack 0
 14013                           pclatu	equ	0xFFB
 14014                           pclath	equ	0xFFA
 14015                           tblptru	equ	0xFF8
 14016                           tblptrh	equ	0xFF7
 14017                           tblptrl	equ	0xFF6
 14018                           tablat	equ	0xFF5
 14019                           prodh	equ	0xFF4
 14020                           prodl	equ	0xFF3
 14021                           intcon	equ	0xFF2
 14022                           intcon2	equ	0xFF1
 14023                           intcon3	equ	0xFF0
 14024                           indf0	equ	0xFEF
 14025                           postinc0	equ	0xFEE
 14026                           fsr0h	equ	0xFEA
 14027                           fsr0l	equ	0xFE9
 14028                           wreg	equ	0xFE8
 14029                           postinc1	equ	0xFE6
 14030                           postdec1	equ	0xFE5
 14031                           fsr1h	equ	0xFE2
 14032                           fsr1l	equ	0xFE1
 14033                           indf2	equ	0xFDF
 14034                           postinc2	equ	0xFDE
 14035                           postdec2	equ	0xFDD
 14036                           fsr2h	equ	0xFDA
 14037                           fsr2l	equ	0xFD9
 14038                           status	equ	0xFD8
 14039                           
 14040 ;; *************** function _ReadUSART *****************
 14041 ;; Defined at:
 14042 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 14043 ;; Parameters:    Size  Location     Type
 14044 ;;		None
 14045 ;; Auto vars:     Size  Location     Type
 14046 ;;  data            1    0[COMRAM] unsigned char 
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  1    wreg      unsigned char 
 14049 ;; Registers used:
 14050 ;;		wreg, status,2, status,0
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14056 ;;      Params:         0       0       0       0       0       0       0       0       0
 14057 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14059 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14060 ;;Total ram usage:        1 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		_TMRO_USART
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           	psect	text68
 14070  003494                     __ptext68:
 14071                           	opt stack 0
 14072  003494                     _ReadUSART:
 14073                           	opt stack 23
 14074                           
 14075                           ;incstack = 0
 14076  003494  0EF2               	movlw	242
 14077  003496  1654               	andwf	_USART_Status,f,c
 14078  003498  ACAB               	btfss	4011,6,c	;volatile
 14079  00349A  D003               	goto	i2l661
 14080  00349C  9054               	bcf	_USART_Status,0,c
 14081  00349E  B0AB               	btfsc	4011,0,c	;volatile
 14082  0034A0  8054               	bsf	_USART_Status,0,c
 14083  0034A2                     i2l661:
 14084  0034A2  B4AB               	btfsc	4011,2,c	;volatile
 14085  0034A4  8454               	bsf	_USART_Status,2,c
 14086  0034A6  B2AB               	btfsc	4011,1,c	;volatile
 14087  0034A8  8654               	bsf	_USART_Status,3,c
 14088  0034AA  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 14089  0034AE  5001               	movf	ReadUSART@data,w,c
 14090  0034B0  0012               	return	
 14091  0034B2                     __end_of_ReadUSART:
 14092                           	opt stack 0
 14093                           pclatu	equ	0xFFB
 14094                           pclath	equ	0xFFA
 14095                           tblptru	equ	0xFF8
 14096                           tblptrh	equ	0xFF7
 14097                           tblptrl	equ	0xFF6
 14098                           tablat	equ	0xFF5
 14099                           prodh	equ	0xFF4
 14100                           prodl	equ	0xFF3
 14101                           intcon	equ	0xFF2
 14102                           intcon2	equ	0xFF1
 14103                           intcon3	equ	0xFF0
 14104                           indf0	equ	0xFEF
 14105                           postinc0	equ	0xFEE
 14106                           fsr0h	equ	0xFEA
 14107                           fsr0l	equ	0xFE9
 14108                           wreg	equ	0xFE8
 14109                           postinc1	equ	0xFE6
 14110                           postdec1	equ	0xFE5
 14111                           fsr1h	equ	0xFE2
 14112                           fsr1l	equ	0xFE1
 14113                           indf2	equ	0xFDF
 14114                           postinc2	equ	0xFDE
 14115                           postdec2	equ	0xFDD
 14116                           fsr2h	equ	0xFDA
 14117                           fsr2l	equ	0xFD9
 14118                           status	equ	0xFD8
 14119                           pclatu	equ	0xFFB
 14120                           pclath	equ	0xFFA
 14121                           tblptru	equ	0xFF8
 14122                           tblptrh	equ	0xFF7
 14123                           tblptrl	equ	0xFF6
 14124                           tablat	equ	0xFF5
 14125                           prodh	equ	0xFF4
 14126                           prodl	equ	0xFF3
 14127                           intcon	equ	0xFF2
 14128                           intcon2	equ	0xFF1
 14129                           intcon3	equ	0xFF0
 14130                           indf0	equ	0xFEF
 14131                           postinc0	equ	0xFEE
 14132                           fsr0h	equ	0xFEA
 14133                           fsr0l	equ	0xFE9
 14134                           wreg	equ	0xFE8
 14135                           postinc1	equ	0xFE6
 14136                           postdec1	equ	0xFE5
 14137                           fsr1h	equ	0xFE2
 14138                           fsr1l	equ	0xFE1
 14139                           indf2	equ	0xFDF
 14140                           postinc2	equ	0xFDE
 14141                           postdec2	equ	0xFDD
 14142                           fsr2h	equ	0xFDA
 14143                           fsr2l	equ	0xFD9
 14144                           status	equ	0xFD8
 14145                           
 14146                           	psect	rparam
 14147  0000                     pclatu	equ	0xFFB
 14148                           pclath	equ	0xFFA
 14149                           tblptru	equ	0xFF8
 14150                           tblptrh	equ	0xFF7
 14151                           tblptrl	equ	0xFF6
 14152                           tablat	equ	0xFF5
 14153                           prodh	equ	0xFF4
 14154                           prodl	equ	0xFF3
 14155                           intcon	equ	0xFF2
 14156                           intcon2	equ	0xFF1
 14157                           intcon3	equ	0xFF0
 14158                           indf0	equ	0xFEF
 14159                           postinc0	equ	0xFEE
 14160                           fsr0h	equ	0xFEA
 14161                           fsr0l	equ	0xFE9
 14162                           wreg	equ	0xFE8
 14163                           postinc1	equ	0xFE6
 14164                           postdec1	equ	0xFE5
 14165                           fsr1h	equ	0xFE2
 14166                           fsr1l	equ	0xFE1
 14167                           indf2	equ	0xFDF
 14168                           postinc2	equ	0xFDE
 14169                           postdec2	equ	0xFDD
 14170                           fsr2h	equ	0xFDA
 14171                           fsr2l	equ	0xFD9
 14172                           status	equ	0xFD8


Data Sizes:
    Strings     236
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      95
    BANK0           160    137     143
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1844$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_24(CODE[11]), STR_23(CODE[7]), STR_22(CODE[18]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), 
		 -> STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK1[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_PWM_DutyCycle1
    _TMRO_USART->i2_PWM_DutyCycle2
    i2_PWM_DutyCycle2->i2___fttol
    i2_PWM_DutyCycle1->i2___fttol
    i2___lbtoft->i2___ftpack
    i2___fttol->i2___ftmul
    i2___ftmul->i2___lbtoft
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Comando_Tablet
    _Lcd_Init->_Lcd_Cmd
    _Inicializa_Driveby->_BT_Init
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothString->_UART1_Init
    _putcBluetoothInt->_sprintf
    _UART1_Init->_OpenUSART
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    ___lbtoft->___ftpack
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  128507
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                         _UART1_Init
                     _clrBufferUSART
                  _motor_Backforward
 ---------------------------------------------------------------------------------
 (1) _motor_Backforward                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    4703
                                             32 BANK0      3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _PWM_init1
                          _PWM_init2
                          _Pause_seg
                     _clrBufferUSART
            _external_interrupt_init
 ---------------------------------------------------------------------------------
 (2) _external_interrupt_init                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                              3 BANK0      1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                              1 BANK0      1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    1720
                                             14 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1039
                                             10 BANK0      4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     355
                                              2 BANK0      8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      44
                                              1 BANK0      1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     350
                                              5 BANK0      2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     303
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  106134
                                            135 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     482
                                              7 BANK0      6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   43823
                                            111 BANK0     24    22      2
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     306
                                              6 BANK0      1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM2                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2070
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   44617
                                            111 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   43275
                                             63 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10248
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10050
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2207
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4524
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     574
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2181
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     572
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3521
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3246
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1060
                                              4 BANK0      6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1236
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    4241
                                             51 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
                   i2_PWM_DutyCycle1
                   i2_PWM_DutyCycle2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle2                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM2
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM2                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle1                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM1
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2___lbtoft                                           4     1      3     387
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     304
                                             27 COMRAM    15    11      4
                          i2___ftmul (ARG)
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     795
                                             12 COMRAM    15     9      6
                         i2___ftpack
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     365
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM1                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     372
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     484
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
     _external_interrupt_init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _PWM_DutyCycle1
     _SetDCPWM1
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _PWM_DutyCycle2
     _SetDCPWM2
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _UART1_Init
     _OpenUSART
   _clrBufferUSART
   _motor_Backforward

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port
   i2_PWM_DutyCycle1
     i2_SetDCPWM1
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack
   i2_PWM_DutyCycle2
     i2_SetDCPWM2
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     89      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16E      20        0.0%
DATA                 0      0     16E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Sep 20 17:05:48 2017

                               _i 0048                                 _j 0058  
         __size_of_PWM_DutyCycle1 007C           __size_of_PWM_DutyCycle2 007C  
                              l54 31BA                                l59 2A02  
                              l68 2A9E                     _InicioComando 0050  
                    ___awdiv@sign 006B               ___wmul@multiplicand 0070  
                     __CFG_BORV$3 000000                        i2___ftpack 27DC  
                      i2___lbtoft 3450                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      ___ftadd@exp1 0098  
                    ___ftadd@exp2 0097                      ___ftadd@sign 0096  
                             l204 1B78                               l205 1BC4  
       __size_ofi2_Lcd_Write_Char 0038                               l224 30D8  
                             l245 3542                               l271 3332  
                             l273 333E                               l610 316C  
                             l275 334A                               l611 316E  
                             l277 334C                               l269 3326  
                             l509 0F14                               l471 250E  
                             l289 2E2A                               l481 2572  
                             l473 251E                               l609 3160  
                             l466 24E4                               l650 2B24  
                             l475 252E                               l467 2598  
                             l643 2AFA                               l556 05C4  
                             l652 2B4C                               l477 2548  
                             l469 24F4                               l479 2558  
                             l647 2B14                               l648 2B16  
                             l649 2B22                               l961 1686  
                             l970 1676                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
                    __CFG_BOR$OFF 000000                               _cad 0055  
                    ___awmod@sign 0065                               prod 000FF3  
                             wreg 000FE8                      __CFG_LVP$OFF 000000  
                    __CFG_WDT$OFF 000000                              l1002 1FC2  
                            l1103 1B02                              l1040 14A8  
                            l1113 33A4                              l1043 12D0  
                            l1123 1DA8                              l1045 12F8  
                            l1054 13E2                              l1063 140C  
                            l1039 1296                              l1081 1732  
                            l1162 224C                              l1082 177E  
                            l1172 2916                              l1079 181C  
                            l1088 180C                              l1097 2330  
                            l4002 297C                              l3130 1ED2  
                            l3220 1364                              l3204 12EE  
                            l3124 351E                              l3150 1F9C  
                            l3142 1F4C                              l3134 1EE6  
                            l3222 1378                              l3214 1330  
                            l3310 20D6                              l3144 1F78  
                            l3136 1EFA                              l3240 1436  
                            l3232 13C4                              l3224 1384  
                            l3400 27CE                              l3170 3334  
                            l3146 1F8C                              l3138 1F26  
                            l3250 1484                              l3234 13D8  
                            l3226 1390                              l3322 211C  
                            l4034 315A                              l3156 1FB6  
                            l3324 2128                              l3316 20FE  
                            l3260 19C8                              l3404 30C2  
                            l3174 3340                              l3166 3328  
                            l3342 2180                              l3334 215E  
                            l3326 212E                              l3510 0B46  
                            l4142 29D4                              l3192 12A4  
                            l3280 1A50                              l3520 0C48  
                            l4160 2A84                              l3338 216C  
                            l3370 2632                              l3362 25FC  
                            l3354 25C8                              l3290 1A9A  
                            l3266 1A02                              l3426 2AFC  
                            l3418 2AEA                              l4146 2A0C  
                            l3604 1522                              l3364 2608  
                            l3284 1A6E                              l3516 0C38  
                            l4164 2AA8                              l3198 12DE  
                            l3702 1D16                              l3550 16D8  
                            l3366 260E                              l3374 2640  
                            l3358 25EA                              l3294 1AB8  
                            l3534 0EE4                              l3390 2776  
                            l4184 2DF2                              l3720 1D98  
                            l3712 1D54                              l3640 1636  
                            l3544 16B0                              l3528 0DE6  
                            l3800 0066                              l3384 272C  
                            l3714 1D6C                              l3706 1D32  
                            l3730 21B8                              l3626 15E4  
                            l3618 1588                              l3378 2654  
                            l3802 00A2                              l3394 279C  
                            l3660 22A4                              l3716 1D72  
                            l3732 21D0                              l3636 161A  
                            l4348 258C                              l3670 232E  
                            l3742 2232                              l3734 21D6  
                            l3750 289A                              l3646 1658  
                            l3590 1806                              l3582 17CC  
                            l3664 22EA                              l3752 28B2  
                            l3648 1670                              l3496 11D6  
                            l3488 10CA                              l3912 0594  
                            l3904 056C                              l3840 0262  
                            l3832 01F4                              l3816 011C  
                            l3754 28B8                              l3578 17B0  
                            l3930 0648                              l3906 057A  
                            l4546 1E44                              l3684 1C88  
                            l3764 2B56                              l3588 17EE  
                            l3940 0752                              l3860 0368  
                            l3844 028E                              l4628 1C14  
                            l4636 1C36                              l3780 2FBA  
                            l3758 28FC                              l3766 2B6E  
                            l3598 14E6                              l3942 0760  
                            l3926 05F6                              l3918 05C8  
                            l3950 0786                              l4638 1C5A  
                            l4902 270C                              l3960 0800  
                            l3872 03DA                              l3856 033C  
                            l3848 02D4                              l4592 1B34  
                            l3776 2F76                              l3890 0494  
                            l3794 0052                              l4586 1B12  
                            l3980 0882                              l3948 077A  
                            l3876 0442                              l3796 0060  
                            l3788 0030                              l3982 0896  
                            l3974 0852                              l3990 0968  
                            l4598 1B56                              l3896 04BE  
                            l3992 098C                              l4872 26B0  
                            l4866 269E                              l3988 0954  
                            l4892 26F4                              l3998 2936  
                            STR_1 7FBC                              STR_2 7F68  
                            STR_3 7FDE                              STR_4 7FDE  
                            STR_5 7FB9                              STR_6 7F77  
                            STR_7 7F85                              STR_8 7FA1  
                            STR_9 7F93                  i2_PWM_DutyCycle1 2E96  
                i2_PWM_DutyCycle2 2E2C                   __end_of_BT_Init 24D4  
                            u3000 19EE                              u4005 07D8  
                            u3150 276A                              u3401 16C8  
                            u4105 306E                              u3180 27C0  
                            u3157 2760                              u4070 2972  
                            u4135 3026                              _PIE1 000F9D  
                            u4080 29B8                              u3601 1C78  
                            u3450 17D4                              u3187 27B6  
                            u4251 241C                              u3620 1CB4  
                            u3540 163E                              u4077 2968  
                            u3381 16A0                              u3470 14D2  
                            u4087 29AE                              u3800 016C  
                            u2761 1242                              u3625 1CAA  
                            u3650 1D3A                              u3490 150E  
                            u2771 1262                              u3475 14C6  
                            u5307 1E32                              u3805 0160  
                            u5317 30CA                              u4630 253E  
                            u5327 3116                              u3495 1502  
                            u5337 312A                              u4730 2568  
                            u5347 3442                              u2971 19B8  
                            u5267 2D4C                              u5277 2D64  
                            u2991 19E0                              u5287 2D7C  
                            u3785 00F6                              u5297 1DD2  
                            u4780 2582                              _TMR2 000FCC  
               ?_Lcd_Write_String 0064                              _main 265E  
                    ___ftpack@arg 0060                      ___ftpack@exp 0063  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            pclat 000FFA                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
              ??_Lcd_Write_String 0066                     __CFG_IESO$OFF 000000  
                      _FinComandB 00EB                        _FinComandT 00EC  
                 __end_of_Lcd_Cmd 3450                      _sprintf$1857 00AF  
                    _sprintf$2887 00AC                      i2___lbtoft@c 000C  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 0081  
                    i2___ftmul@f1 000D                      i2___ftmul@f2 0010  
                    ___ftmul@sign 0082                      i2___fttol@f1 001C  
                     ?_UART1_Init 0001                      ___fttol@exp1 0098  
                    ___fttol@lval 0094                        _ComanBFlag 004B  
         __size_of_clrBufferUSART 0044                     __CFG_PLLDIV$1 000000  
                      _ComanTFlag 004C                 _Lcd_Write_Integer 31BC  
                  __CFG_CCP2MX$ON 000000                             ?_main 0001  
                 __end_of___awdiv 218A                   __end_of___ftadd 14AA  
                           STR_10 7FF6                             STR_11 7F58  
                           STR_12 7F45                             STR_20 7F36  
                           STR_13 7F56                             STR_21 7F47  
                           STR_14 7FFD                             STR_22 7F13  
                           STR_15 7F75                             STR_23 7FEF  
                           STR_16 7FE7                             STR_24 7FC8  
                           STR_17 7FD3                             STR_18 7FAF  
                           STR_19 7F25                   __end_of___awmod 265E  
                 __end_of___ftneg 33B2                   __end_of___lldiv 225E  
                 __end_of___ftmul 1B04                   ___awdiv@divisor 0068  
                 __end_of___llmod 2928                   __end_of___ftsub 3236  
                 __end_of___fttol 1DAA                             _T2CON 000FCA  
                     _RXComandoTB 0051                    __CFG_DEBUG$OFF 000000  
              ?_Lcd_Write_Integer 00CF                             i2l410 193C  
                           i2l406 18E4                             i2l271 33C6  
                           i2l408 1910                             i2l273 33D0  
                           i2l275 33DA                             i2l277 33DC  
                           i2l269 33BC                             i2l289 3016  
                           i2l661 34A2                             i2l398 18B8  
                 ___awdiv@counter 006A                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _SPBRG 000FAF  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                     __CFG_USBDIV$2 000000  
         __size_of_Lcd_Set_Cursor 0076                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
         PWM_DutyCycle1@DutyCycle 009D                     __CFG_WRT3$OFF 000000  
                    ___lltoft@exp 0070                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                __size_ofi2_Lcd_Cmd 0020  
                  __CFG_EBTRB$OFF 000000                       ?i2_Lcd_Port 0001  
                 __end_of_dpowers 7EC5                             _array 0114  
             ??_Lcd_Write_Integer 00D1                             _scale 099A  
                   ___ftpack@sign 0064                             tablat 000FF5  
         PWM_DutyCycle2@DutyCycle 009D                             status 000FD8  
                 __end_of_sprintf 099A                    __CFG_ICPRT$OFF 000000  
                      Pause_seg@i 0066                        Pause_seg@x 0065  
              __size_ofi2___ftmul 00E4                __size_ofi2___fttol 00D4  
                i2_Lcd_Set_Cursor 2FC8                       ?_TMRO_USART 0001  
                __end_of_Lcd_Init 2DB6                    WriteUSART@data 0060  
                __end_of_Lcd_Port 334E                __size_of_PWM_init1 0026  
              __size_of_PWM_init2 0026                   __initialization 2F00  
                    __end_of_main 271E                     i2___ftmul@exp 0016  
       __end_of_Lcd_Write_Integer 31FA       __size_of_Inicializa_Driveby 0110  
                     ?i2___ftpack 0001                       ?i2___lbtoft 0009  
               ?_putcBluetoothInt 00CF                  __end_of_OpenPWM1 3510  
                __end_of_OpenPWM2 3178                            ??_main 00E9  
                   ___fttol@sign1 0093                  __end_of_Pause_ms 30EE  
              __size_of_Lcd_Clear 000E                     __activetblptr 000003  
              ??_putcBluetoothInt 00D1              __size_of__tdiv_to_l_ 0196  
              i2PWM_DutyCycle1@DC 0032                i2PWM_DutyCycle2@DC 0032  
                       ??_BT_Init 006E                  ___llmod@dividend 006D  
                          ?_scale 0083                            _CCPR1L 000FBE  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0066  
                 putSTRINGU1@dato 0062                   putSTRINGU1@cont 0069  
                __end_of___ftpack 1FC4                  __end_of___lbtoft 3380  
                 putSTRINGU1@last 0068                   clrBufferUSART@i 0060  
             __size_of_UART1_Init 0016                  __end_of___lltoft 2BCC  
                          i2l1002 2882                            i2l1103 20A6  
                          i2l1123 2404                            i2l4050 33BE  
                          i2l4054 33C8                            i2l4070 27FA  
                          i2l4080 2856                            i2l4072 2804  
                          i2l4058 33D2                            i2l4082 2860  
                          i2l4074 2822                            i2l4066 27EC  
                          i2l4500 23F4                            i2l4078 2838  
                          i2l4422 2004                            i2l4440 2046  
                          i2l4416 1FDE                            i2l4450 206E  
                          i2l4436 2036                            i2l4446 205E  
                          i2l4712 2D06                            i2l4464 234C  
                          i2l4482 23A6                            i2l4708 2CCE  
                          i2l4492 23CE                            i2l4494 23DA  
                          i2l4486 23B6                            i2l4496 23DE  
                          _INTCON 000FF2                            i2l4836 195C  
                          i2l4790 1898                            i2l4698 2FF0  
                          i2l4794 18AE                __size_of_ReadUSART 001E  
            i2SetDCPWM1@dutycycle 0001                            u481_41 1FD4  
                          u483_41 1FEE               _putcBluetoothString 29C0  
                          u487_41 2342                         ??_Lcd_Cmd 0061  
                          _SPBRGH 000FB0                __size_of_SetDCPWM1 0048  
              __size_of_SetDCPWM2 0048           __size_of_Lcd_Write_Char 0046  
                  __CFG_XINST$OFF 000000              i2SetDCPWM2@dutycycle 0001  
                __end_of__powers_ 7F13                            _Timer1 0053  
              __size_of_OpenUSART 0080     __size_of_SendBlueToothCommand 001A  
                    ?i2_Lcd_Clear 0001                            ___ftge 225E  
              __size_of_Pause_seg 0064                 __end_ofi2_Lcd_Cmd 3494  
                          ___wmul 32E2                      ?_putSTRINGU1 0062  
                       ??___awdiv 006A                         ??___ftadd 0093  
                  _PWM_DutyCycle1 2C48                    _PWM_DutyCycle2 2BCC  
                  __CFG_STVREN$ON 000000                         ??___awmod 0064  
                       ??___ftneg 0063                         ??___lldiv 0068  
                       ??___ftmul 007A                         ??___llmod 0075  
                       ??___ftsub 009F                         ??___fttol 008E  
             __size_ofi2_Lcd_Port 002C               i2Lcd_Write_String@a 0005  
             i2Lcd_Write_String@i 0009          ?_external_interrupt_init 0001  
                          _packet 005D                            _lenght 0059  
                          _fround 0F16                            clear_0 2F06  
                          clear_1 2F20                  ___awdiv@quotient 006C  
            ?_putcBluetoothString 0067                   ___awmod@divisor 0062  
                  sprintf@vd_1859 00B7                   ___awmod@counter 0064  
                i2_Lcd_Write_Char 32AA             ___ftmul@f3_as_product 007E  
                    __pdataCOMRAM 005E                 __end_ofi2___ftmul 20A8  
               __end_ofi2___fttol 2406                      __mediumconst 7E9C  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8               __size_of_TMRO_USART 1998  
                    ?i2_SetDCPWM1 0001                      ?i2_SetDCPWM2 0001  
               __end_of_PWM_init1 342A                 __end_of_PWM_init2 3404  
                __end_of_putcTxU1 3548                         ??_sprintf 00A6  
         __size_of_Comando_Tablet 015C                 i2SetDCPWM1@DCycle 0005  
                 Lcd_Set_Cursor@a 0064                   Lcd_Set_Cursor@b 0063  
                 Lcd_Set_Cursor@y 0066                   Lcd_Set_Cursor@z 0065  
               i2SetDCPWM2@DCycle 0005                 _motor_Backforward 3564  
                      __accesstop 0060           __end_of__initialization 2F5E  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 008D  
                      ___ftadd@f2 0090               __size_ofi2___ftpack 00A8  
             __size_ofi2___lbtoft 0024                ?_motor_Backforward 0001  
                      ___ftge@ff1 0060                        ___ftge@ff2 0063  
    PWM_DutyCycle2@percentageDuty 009F                 __end_of_Lcd_Clear 3556  
                      ___ftneg@f1 0060                    i2___ftpack@arg 0001  
                  i2___ftpack@exp 0004                        ___lbtoft@c 006B  
          __end_of_PWM_DutyCycle1 2CC4            __end_of_PWM_DutyCycle2 2C48  
                      ___ftmul@f1 0074                        ___ftmul@f2 0077  
                      ___ftsub@f1 0099                        ___ftsub@f2 009C  
                      ___fttol@f1 008A                        _WriteUSART 3510  
                  __pcstackCOMRAM 0001               ??_motor_Backforward 0060  
                    __pidataBANK1 3524        __size_of_Lcd_Write_Integer 003E  
                      ___lltoft@c 0068                    _clrBufferUSART 3178  
                  i2___ftmul@cntr 001A                     __end_of_scale 0F16  
                  i2___ftmul@sign 001B          __end_ofi2_PWM_DutyCycle1 2F00  
        __end_ofi2_PWM_DutyCycle2 2E96             ??_putcBluetoothString 0069  
     __size_ofi2_Lcd_Write_String 007A                 __end_of_ReadUSART 34B2  
                  i2___fttol@exp1 002A                    i2___fttol@lval 0026  
               __end_of_SetDCPWM1 30A8                 __end_of_SetDCPWM2 3060  
               i2Lcd_Write_Char@a 0004                 i2Lcd_Write_Char@y 0003  
                  _Lcd_Set_Cursor 2DB6                        __div_to_l_ 14AA  
                       ?_Lcd_Init 0001                     ReadUSART@data 0001  
            putcBluetoothString@a 0067              putcBluetoothString@i 006B  
                       ?_Lcd_Port 0001                 __end_of_OpenUSART 2B4E  
       __end_of_motor_Backforward 356E                     UART1_Init@bdr 0066  
                 __div_to_l_@exp1 006F                   __div_to_l_@cntr 006E  
                    sprintf@integ 00BF                 __end_of_Pause_seg 2FC8  
                         ??_scale 0086                   __div_to_l_@quot 006A  
            i2Lcd_Write_Char@temp 0002                        __pbssBANK0 00E9  
                      __pbssBANK1 0100                         ?_OpenPWM1 0001  
                       ?_OpenPWM2 0001                     __div_to_l_@f1 0060  
                   __div_to_l_@f2 0063                         ?_Pause_ms 0060  
          __end_of_clrBufferUSART 31BC                   ?_PWM_DutyCycle1 0001  
                 ?_PWM_DutyCycle2 0001                           ?___ftge 0060  
                    ??_UART1_Init 0066                           ?___wmul 006E  
             Inicializa_Driveby@i 0081            __size_of_getCNY70Value 00C6  
                         _CCP1CON 000FBD                           _CCP2CON 000FBA  
            i2Lcd_Set_Cursor@temp 0008       SendBlueToothCommand@command 006A  
                         ?_fround 0083         __size_of_Lcd_Write_String 0098  
                       ?___ftpack 0060                         ?___lbtoft 0068  
          __end_of_Lcd_Set_Cursor 2E2C                         ?___lltoft 0068  
                putSTRINGU1@total 0064          __end_ofi2_Lcd_Set_Cursor 3018  
                         _BT_Init 2406                           _SBUSART 0052  
                      ??_Lcd_Init 0063                      ??i2_Lcd_Port 0001  
                      ??_Lcd_Port 0060                __end_of_UART1_Init 34FC  
                 __CFG_VREGEN$OFF 000000                    _Lcd_Write_Char 30EE  
                         _Lcd_Cmd 342A                           _Comando 004D  
                         _Med_lsb 0042                           _Med_msb 0044  
                      ??_OpenPWM1 0060                        ??_OpenPWM2 0060  
                      ??_Pause_ms 0062                      ??_TMRO_USART 0034  
               __end_of__npowers_ 7EEC                           __Hparam 0000  
                      _scale$2886 0086                           __Lparam 0000  
                 ?_clrBufferUSART 0001                       ?_WriteUSART 0001  
                 __size_of___ftge 00D4                           ___awdiv 20A8  
                         ___ftadd 122A                           ___awmod 259A  
                       ?_putcTxU1 0001                           ___ftneg 3380  
                         ___lldiv 218A                   __size_of___wmul 0036  
                         ___ftmul 19A0                           ___llmod 2884  
                         ___ftsub 31FA                           ___fttol 1C60  
              __end_ofi2_Lcd_Port 33DE              __size_ofi2_Lcd_Clear 000E  
                         __pcinit 2F00                      ??i2___ftpack 0006  
                    ??i2___lbtoft 000C                        ??___ftpack 0065  
                      ??___lbtoft 006B              __size_of_putSTRINGU1 00BE  
                 __size_of_fround 0314                      BT_Init@F5675 016E  
         i2___ftmul@f3_as_product 0017                           __ramtop 0800  
                 ?_Lcd_Set_Cursor 0063                        ??___lltoft 006C  
                         __ptext0 265E                           __ptext1 3564  
                         __ptext2 2D3E                           __ptext3 1DAA  
                         __ptext4 34B2                           __ptext5 33DE  
                         __ptext6 3134                           __ptext7 3404  
                         __ptext8 34FC                           __ptext9 2406  
  i2PWM_DutyCycle1@percentageDuty 0031                           _comando 015A  
                     ?__div_to_l_ 0060                           _countup 005E  
                         _dpowers 7E9D                         _T2CONbits 000FCA  
                ___awmod@dividend 0060                __end_of_TMRO_USART 19A0  
                  _Comando_Tablet 1B04        __size_of_motor_Backforward 000A  
                         _sprintf 001C                     _getCNY70Value 24D4  
          __end_of_Lcd_Write_Char 3134                    __pintcode_body 181E  
            __size_ofi2_SetDCPWM1 003A              __size_ofi2_SetDCPWM2 003A  
            end_of_initialization 2F5E                       _TramaTablet 0100  
       __size_of_putcBluetoothInt 0086                           int_func 181E  
        __end_ofi2_Lcd_Write_Char 32E2                __end_ofi2___ftpack 2884  
              __end_ofi2___lbtoft 3474                   ___lldiv@divisor 0064  
       i2PWM_DutyCycle1@DutyCycle 002F                   ___lldiv@counter 006C  
                       _RCSTAbits 000FAB        __end_of_Inicializa_Driveby 1EBA  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                         Lcd_Port@a 0060  
                      ??_putcTxU1 0061                        _num_med_hi 005A  
                  __tdiv_to_l_@f1 0060                    __tdiv_to_l_@f2 0063  
       i2PWM_DutyCycle2@DutyCycle 002F                     ??__tdiv_to_l_ 0066  
                       i2_Lcd_Cmd 3474                         _PORTAbits 000F80  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
          __end_of_Comando_Tablet 1C60      __end_of_SendBlueToothCommand 34E6  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
                  ?_getCNY70Value 0060               __size_of_WriteUSART 0014  
__size_of_external_interrupt_init 001A                         i2___ftmul 1FC4  
                       i2___fttol 2332                   ?_Lcd_Write_Char 0001  
               Lcd_Write_String@a 0064                 Lcd_Write_String@i 0068  
                       _PWM_init1 3404                         _PWM_init2 33DE  
                       _TXSTAbits 000FAC                   i2___ftpack@sign 0005  
             __size_of__div_to_l_ 01DE                       ___ftmul@exp 007D  
                       _Lcd_Clear 3548                    __end_of___ftge 2332  
                  __end_of___wmul 3318                  _Lcd_Write_String 2928  
               ?i2_PWM_DutyCycle1 0001                 ?i2_PWM_DutyCycle2 0001  
                   __pidataCOMRAM 356E                        ?i2_Lcd_Cmd 0001  
                  __end_of_fround 122A                ??i2_PWM_DutyCycle1 002B  
              ??i2_PWM_DutyCycle2 002B               start_initialization 2F00  
                       Pause_ms@i 0063                         Pause_ms@x 0060  
                 ?_Comando_Tablet 0001                         _ReadUSART 3494  
                       _SetDCPWM1 3060                         _SetDCPWM2 3018  
                 SetDCPWM1@DCycle 0064               __end_of__tdiv_to_l_ 181E  
                 SetDCPWM2@DCycle 0064                   i2___fttol@sign1 0025  
                       _DutyCycle 00E9                        ?i2___ftmul 000D  
                      ?i2___fttol 001C                 __size_of_Lcd_Init 0078  
               __size_of_Lcd_Port 0036                        ?_PWM_init1 0001  
                      ?_PWM_init2 0001              Comando_Tablet@sensed 00E7  
                       _OpenUSART 2ACE                  ??_PWM_DutyCycle1 0099  
                ??_PWM_DutyCycle2 0099                         _Pause_seg 2F64  
                 ___llmod@divisor 0071                   ___llmod@counter 0075  
     __end_of_putcBluetoothString 2A48                 __size_of_OpenPWM1 0014  
               __size_of_OpenPWM2 0044                 __size_of_Pause_ms 0046  
                      ?_Lcd_Clear 0001                          ??___ftge 0066  
      __end_ofi2_Lcd_Write_String 2D3E                          ??___wmul 0072  
                     __pdataBANK1 016E                  __CFG_LPT1OSC$OFF 000000  
                 Lcd_Write_Char@a 0063                   Lcd_Write_Char@y 0062  
                        ??_fround 0086                    _num_med_medium 005C  
                      fround@prec 008C                 __size_of___ftpack 010A  
               __size_of___lbtoft 0032                 __size_of___lltoft 007E  
                     __pbssCOMRAM 0042                   ??_getCNY70Value 0062  
                      ?_ReadUSART 0001                          ?_BT_Init 0001  
                   __pcstackBANK0 0060                 ?i2_Lcd_Set_Cursor 0004  
                      ?_SetDCPWM1 0060                        ?_SetDCPWM2 0060  
             __end_of__stringdata 7FFF                ??i2_Lcd_Set_Cursor 0005  
                _putcBluetoothInt 2A48                        ?_OpenUSART 0060  
                        ?_Lcd_Cmd 0001                       sprintf@_val 00C4  
                     sprintf@flag 00BD                  ??_clrBufferUSART 0060  
                      ?_Pause_seg 0001                       sprintf@fval 00CB  
                     sprintf@prec 00C2                         _cleanBfer 00ED  
                    ??_WriteUSART 0060                  ??_Lcd_Set_Cursor 0064  
            _SendBlueToothCommand 34CC                         __pintcode 0008  
                   __pmediumconst 7E9C                          ?___awdiv 0066  
                        ?___ftadd 008D                          ?___awmod 0060  
                        ?___ftneg 0060                          ?___lldiv 0060  
                        ?___ftmul 0074                          ?___llmod 006D  
                        ?___ftsub 0099                         __npowers_ 7EC5  
                        ?___fttol 008A                 putcTxU1@character 0061  
                     ??i2_Lcd_Cmd 0002                 __size_of_putcTxU1 0012  
                     __tdiv_to_l_ 1688                         _contador2 0057  
                    ??__div_to_l_ 0066         SendBlueToothCommand@total 006C  
         _external_interrupt_init 34B2                      _TamanhoTrama 0046  
                        ?_sprintf 009F                       ??i2___ftmul 0013  
                  __size_of_scale 057C                       ??i2___fttol 0020  
              __end_of_WriteUSART 3524                       ??_PWM_init1 0061  
                     ??_PWM_init2 0063      PWM_DutyCycle1@percentageDuty 009F  
                   _ComandoTablet 004E                    ___wmul@product 0072  
               ?i2_Lcd_Write_Char 0001                          _PIE1bits 000F9D  
                        Lcd_Cmd@a 0062                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 1688                          i2u506_40 2CFE  
                        i2u506_47 2CF4                          i2u507_40 2D36  
                        i2u507_47 2D2C                          i2u518_40 18B4  
              ??i2_Lcd_Write_Char 0002                          i2u535_47 32C6  
                        i2u480_45 3240                          i2u536_47 32D8  
                        i2u537_47 3486                          i2u484_40 1FF6  
                        i2u492_40 23BC             ?_SendBlueToothCommand 006A  
                        i2u479_45 327A                          i2u489_40 236A  
                        i2u489_45 2362                     ??i2_Lcd_Clear 0004  
                     ??_Lcd_Clear 0063                  __CFG_WDTPS$32768 000000  
                   ??_putSTRINGU1 0066                        _ADCON1bits 000FC1  
                     __stringdata 7F13                 ___wmul@multiplier 006E  
                        _CheckSum 004A                  ??_Lcd_Write_Char 0061  
                     ??_ReadUSART 0001                _Inicializa_Driveby 1DAA  
                   ??i2_SetDCPWM1 0003                     ??i2_SetDCPWM2 0003  
                     ??_SetDCPWM1 0062                       ??_SetDCPWM2 0062  
                __size_of_BT_Init 00CE                          _Lcd_Init 2D3E  
                        _Lcd_Port 3318                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 2F3A  
                        _EntTrama 004F               ?_Inicializa_Driveby 0001  
                   _BluetoothDato 0128          __end_of_Lcd_Write_String 29C0  
                     ??_OpenUSART 0062                SetDCPWM1@dutycycle 0060  
                     ??_Pause_seg 0065                   OpenUSART@config 0065  
                __size_of_Lcd_Cmd 0026                      _Timer2Config 00EE  
                        _OpenPWM1 34FC                          _OpenPWM2 3134  
                        _Pause_ms 30A8                          __Hrparam 0000  
                        __Lrparam 0000                SetDCPWM2@dutycycle 0060  
                __size_of___awdiv 00E2                  __size_of___ftadd 0280  
                __size_of___awmod 00C4              ??_Inicializa_Driveby 0080  
                PWM_DutyCycle1@DC 00A0                  PWM_DutyCycle2@DC 00A0  
                __size_of___ftneg 0032                  __size_of___lldiv 00D4  
                __size_of___ftmul 0164                  __size_of___llmod 00A4  
                __size_of___ftsub 003C                  __size_of___fttol 014A  
                ??_Comando_Tablet 00E7                          ___ftpack 1EBA  
                        ___lbtoft 334E                       _fround$2884 0089  
                     _fround$2885 0086                          ___lltoft 2B4E  
             __end_ofi2_Lcd_Clear 3564                    OpenPWM2@ccp2mx 0062  
           __CFG_FOSC$INTOSCIO_EC 000000               __end_of_putSTRINGU1 27DC  
       ??_external_interrupt_init 0060                        sprintf@exp 00C9  
                  OpenPWM1@period 0060                    OpenPWM2@period 0061  
                        __ptext10 34CC                          __ptext11 271E  
                        __ptext20 2ACE                          __ptext12 3536  
                        __ptext21 24D4                          __ptext13 2F64  
                        __ptext30 099A                          __ptext22 3178  
                        __ptext14 30A8                          __ptext31 0F16  
                        __ptext23 2BCC                          __ptext15 1B04  
                        __ptext40 218A                          __ptext32 32E2  
                        __ptext24 3018                          __ptext16 29C0  
                        __ptext41 1C60                          __ptext33 19A0  
                        __ptext25 2C48                          __ptext17 2A48  
                        __ptext50 3548                          __ptext42 31FA  
                        __ptext34 259A                          __ptext26 334E  
                        __ptext18 3510                          __ptext51 342A  
                        __ptext43 122A                          __ptext35 20A8  
                        __ptext27 3060                          __ptext19 34E6  
                        __ptext60 27DC                          __ptext52 3318  
                        __ptext44 1EBA                          __ptext36 1688  
                        __ptext28 31BC                          __ptext61 3270  
                        __ptext45 3380                          __ptext37 14AA  
                        __ptext29 001C                          __ptext62 2CC4  
                        __ptext54 2E2C                          __ptext46 225E  
                        __ptext38 2B4E                          __ptext63 32AA  
                        __ptext55 3236                          __ptext47 2928  
                        __ptext39 2884                          __ptext64 2FC8  
                        __ptext56 2E96                          __ptext48 30EE  
                        __ptext65 3556                          __ptext57 3450  
                        __ptext49 2DB6                          __ptext66 3474  
                        __ptext58 2332                          __ptext67 33B2  
                        __ptext59 1FC4                          __ptext68 3494  
                        __powers_ 7EEC                   PWM_init1@period 0061  
                 PWM_init2@period 0063                          _contador 0056  
       __size_ofi2_PWM_DutyCycle1 006A         __size_ofi2_PWM_DutyCycle2 006A  
                __size_of_sprintf 097E               __end_ofi2_SetDCPWM1 32AA  
             __end_ofi2_SetDCPWM2 3270                     __size_of_main 00C0  
          ??_SendBlueToothCommand 006E                          _putcTxU1 3536  
                     i2Lcd_Port@a 0001                     BT_Init@nameBT 006E  
        __end_of_putcBluetoothInt 2ACE             __CFG_CPUDIV$OSC1_PLL2 000000  
                      _INTCONbits 000FF2                i2_Lcd_Write_String 2CC4  
                  OpenUSART@spbrg 0060                          scale@scl 0089  
               putcBluetoothInt@a 00CF                 putcBluetoothInt@i 00E5  
               putcBluetoothInt@s 00D1                Lcd_Write_Char@temp 0061  
                        intlevel2 0000                         sprintf@ap 00BB  
                __tdiv_to_l_@exp1 006E                         sprintf@vd 00B3  
                       sprintf@sp 009F                  __tdiv_to_l_@cntr 006D  
             ?i2_Lcd_Write_String 0005                  __tdiv_to_l_@quot 0069  
               i2Lcd_Set_Cursor@a 0005                 i2Lcd_Set_Cursor@b 0004  
               i2Lcd_Set_Cursor@y 0007                 i2Lcd_Set_Cursor@z 0006  
                ___lldiv@dividend 0060   __end_of_external_interrupt_init 34CC  
       __size_ofi2_Lcd_Set_Cursor 0050                        _OSCCONbits 000FD3  
                      i2Lcd_Cmd@a 0003                       i2_Lcd_Clear 3556  
                      _UART1_Init 34E6                       _putSTRINGU1 271E  
            ??i2_Lcd_Write_String 0007                Lcd_Set_Cursor@temp 0067  
    __size_of_putcBluetoothString 0088                      ?__tdiv_to_l_ 0060  
                     _num_med_low 005B                          sprintf@c 00CE  
                        sprintf@f 00A1                  ___lldiv@quotient 0068  
  i2PWM_DutyCycle2@percentageDuty 0031                       i2_SetDCPWM1 3270  
                     i2_SetDCPWM2 3236                Lcd_Write_Integer@a 00CF  
              Lcd_Write_Integer@s 00D1             __end_of_getCNY70Value 259A  
                      i2_Lcd_Port 33B2                      _USART_Status 0054  
                      _TMRO_USART 0008  
