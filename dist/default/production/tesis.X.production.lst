

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Aug 28 15:42:10 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK0
    79  002902                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for BT_Init@F5671
    83  002902  41                 	db	65
    84  002903  54                 	db	84
    85  002904  2B                 	db	43
    86  002905  4E                 	db	78
    87  002906  41                 	db	65
    88  002907  4D                 	db	77
    89  002908  45                 	db	69
    90  002909  3D                 	db	61
    91  00290A  72                 	db	114
    92  00290B  6F                 	db	111
    93  00290C  62                 	db	98
    94  00290D  6F                 	db	111
    95  00290E  74                 	db	116
    96  00290F  0D                 	db	13
    97  002910  0A                 	db	10
    98  002911  00                 	db	0
    99  002912  00                 	db	0
   100  002913  00                 	db	0
   101                           
   102                           ;initializer for _countup
   103  002914  0001               	dw	1
   104                           
   105                           	psect	mediumconst
   106  007ECC                     __pmediumconst:
   107                           	opt stack 0
   108  007ECC  00                 	db	0
   109  007ECD                     _dpowers:
   110                           	opt stack 0
   111  007ECD  0001               	dw	1
   112  007ECF  0000               	dw	0
   113  007ED1  000A               	dw	10
   114  007ED3  0000               	dw	0
   115  007ED5  0064               	dw	100
   116  007ED7  0000               	dw	0
   117  007ED9  03E8               	dw	1000
   118  007EDB  0000               	dw	0
   119  007EDD  2710               	dw	10000
   120  007EDF  0000               	dw	0
   121  007EE1  86A0               	dw	34464
   122  007EE3  0001               	dw	1
   123  007EE5  4240               	dw	16960
   124  007EE7  000F               	dw	15
   125  007EE9  9680               	dw	38528
   126  007EEB  0098               	dw	152
   127  007EED  E100               	dw	57600
   128  007EEF  05F5               	dw	1525
   129  007EF1  CA00               	dw	51712
   130  007EF3  3B9A               	dw	15258
   131  007EF5                     __end_of_dpowers:
   132                           	opt stack 0
   133  007EF5                     __npowers_:
   134                           	opt stack 0
   135  007EF5  00                 	db	0
   136  007EF6  80                 	db	128
   137  007EF7  3F                 	db	63
   138  007EF8  CD                 	db	205
   139  007EF9  CC                 	db	204
   140  007EFA  3D                 	db	61
   141  007EFB  D7                 	db	215
   142  007EFC  23                 	db	35
   143  007EFD  3C                 	db	60
   144  007EFE  12                 	db	18
   145  007EFF  83                 	db	131
   146  007F00  3A                 	db	58
   147  007F01  B7                 	db	183
   148  007F02  D1                 	db	209
   149  007F03  38                 	db	56
   150  007F04  C6                 	db	198
   151  007F05  27                 	db	39
   152  007F06  37                 	db	55
   153  007F07  38                 	db	56
   154  007F08  86                 	db	134
   155  007F09  35                 	db	53
   156  007F0A  C0                 	db	192
   157  007F0B  D6                 	db	214
   158  007F0C  33                 	db	51
   159  007F0D  CC                 	db	204
   160  007F0E  2B                 	db	43
   161  007F0F  32                 	db	50
   162  007F10  70                 	db	112
   163  007F11  89                 	db	137
   164  007F12  30                 	db	48
   165  007F13  E7                 	db	231
   166  007F14  DB                 	db	219
   167  007F15  2E                 	db	46
   168  007F16  E5                 	db	229
   169  007F17  3C                 	db	60
   170  007F18  1E                 	db	30
   171  007F19  42                 	db	66
   172  007F1A  A2                 	db	162
   173  007F1B  0D                 	db	13
   174  007F1C                     __end_of__npowers_:
   175                           	opt stack 0
   176  007F1C                     __powers_:
   177                           	opt stack 0
   178  007F1C  00                 	db	0
   179  007F1D  80                 	db	128
   180  007F1E  3F                 	db	63
   181  007F1F  00                 	db	0
   182  007F20  20                 	db	32
   183  007F21  41                 	db	65
   184  007F22  00                 	db	0
   185  007F23  C8                 	db	200
   186  007F24  42                 	db	66
   187  007F25  00                 	db	0
   188  007F26  7A                 	db	122
   189  007F27  44                 	db	68
   190  007F28  40                 	db	64
   191  007F29  1C                 	db	28
   192  007F2A  46                 	db	70
   193  007F2B  50                 	db	80
   194  007F2C  C3                 	db	195
   195  007F2D  47                 	db	71
   196  007F2E  24                 	db	36
   197  007F2F  74                 	db	116
   198  007F30  49                 	db	73
   199  007F31  97                 	db	151
   200  007F32  18                 	db	24
   201  007F33  4B                 	db	75
   202  007F34  BC                 	db	188
   203  007F35  BE                 	db	190
   204  007F36  4C                 	db	76
   205  007F37  6B                 	db	107
   206  007F38  6E                 	db	110
   207  007F39  4E                 	db	78
   208  007F3A  03                 	db	3
   209  007F3B  15                 	db	21
   210  007F3C  50                 	db	80
   211  007F3D  79                 	db	121
   212  007F3E  AD                 	db	173
   213  007F3F  60                 	db	96
   214  007F40  F3                 	db	243
   215  007F41  49                 	db	73
   216  007F42  71                 	db	113
   217  007F43                     __end_of__powers_:
   218                           	opt stack 0
   219  0000                     _ADCON1bits	set	4033
   220  0000                     _CCP1CON	set	4029
   221  0000                     _CCP2CON	set	4026
   222  0000                     _CCPR1L	set	4030
   223  0000                     _CCPR2L	set	4027
   224  0000                     _INTCON	set	4082
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _PIE1	set	3997
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTAbits	set	3968
   231  0000                     _PORTB	set	3969
   232  0000                     _PORTBbits	set	3969
   233  0000                     _PORTDbits	set	3971
   234  0000                     _PORTE	set	3972
   235  0000                     _PORTEbits	set	3972
   236  0000                     _PR2	set	4043
   237  0000                     _RCREG	set	4014
   238  0000                     _RCSTA	set	4011
   239  0000                     _RCSTAbits	set	4011
   240  0000                     _SPBRG	set	4015
   241  0000                     _SPBRGH	set	4016
   242  0000                     _T2CON	set	4042
   243  0000                     _T2CONbits	set	4042
   244  0000                     _TMR2	set	4044
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISBbits	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISCbits	set	3988
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISE	set	3990
   252  0000                     _TXREG	set	4013
   253  0000                     _TXSTA	set	4012
   254  0000                     _TXSTAbits	set	4012
   255  007F43                     __stringdata:
   256                           	opt stack 0
   257  007F43                     STR_19:
   258  007F43  49                 	db	73	;'I'
   259  007F44  6E                 	db	110	;'n'
   260  007F45  74                 	db	116	;'t'
   261  007F46  65                 	db	101	;'e'
   262  007F47  72                 	db	114	;'r'
   263  007F48  72                 	db	114	;'r'
   264  007F49  75                 	db	117	;'u'
   265  007F4A  70                 	db	112	;'p'
   266  007F4B  74                 	db	116	;'t'
   267  007F4C  69                 	db	105	;'i'
   268  007F4D  6F                 	db	111	;'o'
   269  007F4E  6E                 	db	110	;'n'
   270  007F4F  20                 	db	32
   271  007F50  54                 	db	84	;'T'
   272  007F51  4D                 	db	77	;'M'
   273  007F52  52                 	db	82	;'R'
   274  007F53  32                 	db	50	;'2'
   275  007F54  00                 	db	0
   276  007F55                     STR_11:
   277  007F55  42                 	db	66	;'B'
   278  007F56  54                 	db	84	;'T'
   279  007F57  20                 	db	32
   280  007F58  49                 	db	73	;'I'
   281  007F59  4E                 	db	78	;'N'
   282  007F5A  49                 	db	73	;'I'
   283  007F5B  43                 	db	67	;'C'
   284  007F5C  49                 	db	73	;'I'
   285  007F5D  41                 	db	65	;'A'
   286  007F5E  4C                 	db	76	;'L'
   287  007F5F  49                 	db	73	;'I'
   288  007F60  5A                 	db	90	;'Z'
   289  007F61  41                 	db	65	;'A'
   290  007F62  44                 	db	68	;'D'
   291  007F63  4F                 	db	79	;'O'
   292  007F64  00                 	db	0
   293  007F65                     STR_2:
   294  007F65  41                 	db	65	;'A'
   295  007F66  54                 	db	84	;'T'
   296  007F67  2B                 	db	43
   297  007F68  50                 	db	80	;'P'
   298  007F69  53                 	db	83	;'S'
   299  007F6A  57                 	db	87	;'W'
   300  007F6B  44                 	db	68	;'D'
   301  007F6C  3D                 	db	61	;'='
   302  007F6D  30                 	db	48	;'0'
   303  007F6E  30                 	db	48	;'0'
   304  007F6F  30                 	db	48	;'0'
   305  007F70  30                 	db	48	;'0'
   306  007F71  0D                 	db	13
   307  007F72  0A                 	db	10
   308  007F73  00                 	db	0
   309  007F74  0A                 	db	10
   310  007F75  2B                 	db	43
   311  007F76  42                 	db	66	;'B'
   312  007F77  54                 	db	84	;'T'
   313  007F78  53                 	db	83	;'S'
   314  007F79  54                 	db	84	;'T'
   315  007F7A  41                 	db	65	;'A'
   316  007F7B  54                 	db	84	;'T'
   317  007F7C  45                 	db	69	;'E'
   318  007F7D  3A                 	db	58	;':'
   319  007F7E  31                 	db	49	;'1'
   320  007F7F  0D                 	db	13
   321  007F80  0A                 	db	10
   322  007F81  00                 	db	0
   323  007F82  0A                 	db	10
   324  007F83  2B                 	db	43
   325  007F84  42                 	db	66	;'B'
   326  007F85  54                 	db	84	;'T'
   327  007F86  53                 	db	83	;'S'
   328  007F87  54                 	db	84	;'T'
   329  007F88  41                 	db	65	;'A'
   330  007F89  54                 	db	84	;'T'
   331  007F8A  45                 	db	69	;'E'
   332  007F8B  3A                 	db	58	;':'
   333  007F8C  33                 	db	51	;'3'
   334  007F8D  0D                 	db	13
   335  007F8E  0A                 	db	10
   336  007F8F  00                 	db	0
   337  007F90  0A                 	db	10
   338  007F91  2B                 	db	43
   339  007F92  42                 	db	66	;'B'
   340  007F93  54                 	db	84	;'T'
   341  007F94  53                 	db	83	;'S'
   342  007F95  54                 	db	84	;'T'
   343  007F96  41                 	db	65	;'A'
   344  007F97  54                 	db	84	;'T'
   345  007F98  45                 	db	69	;'E'
   346  007F99  3A                 	db	58	;':'
   347  007F9A  34                 	db	52	;'4'
   348  007F9B  0D                 	db	13
   349  007F9C  0A                 	db	10
   350  007F9D  00                 	db	0
   351  007F9E  0A                 	db	10
   352  007F9F  43                 	db	67	;'C'
   353  007FA0  4F                 	db	79	;'O'
   354  007FA1  4E                 	db	78	;'N'
   355  007FA2  4E                 	db	78	;'N'
   356  007FA3  45                 	db	69	;'E'
   357  007FA4  43                 	db	67	;'C'
   358  007FA5  54                 	db	84	;'T'
   359  007FA6  3A                 	db	58	;':'
   360  007FA7  4F                 	db	79	;'O'
   361  007FA8  4B                 	db	75	;'K'
   362  007FA9  0D                 	db	13
   363  007FAA  0A                 	db	10
   364  007FAB  00                 	db	0
   365  007FAC                     STR_18:
   366  007FAC  49                 	db	73	;'I'
   367  007FAD  6E                 	db	110	;'n'
   368  007FAE  74                 	db	116	;'t'
   369  007FAF  65                 	db	101	;'e'
   370  007FB0  67                 	db	103	;'g'
   371  007FB1  65                 	db	101	;'e'
   372  007FB2  72                 	db	114	;'r'
   373  007FB3  20                 	db	32
   374  007FB4  3D                 	db	61	;'='
   375  007FB5  20                 	db	32
   376  007FB6  25                 	db	37
   377  007FB7  64                 	db	100	;'d'
   378  007FB8  00                 	db	0
   379  007FB9                     STR_1:
   380  007FB9  41                 	db	65	;'A'
   381  007FBA  54                 	db	84	;'T'
   382  007FBB  2B                 	db	43
   383  007FBC  52                 	db	82	;'R'
   384  007FBD  4F                 	db	79	;'O'
   385  007FBE  4C                 	db	76	;'L'
   386  007FBF  45                 	db	69	;'E'
   387  007FC0  3D                 	db	61	;'='
   388  007FC1  30                 	db	48	;'0'
   389  007FC2  0D                 	db	13
   390  007FC3  0A                 	db	10
   391  007FC4  00                 	db	0
   392  007FC5                     STR_21:
   393  007FC5  43                 	db	67	;'C'
   394  007FC6  4D                 	db	77	;'M'
   395  007FC7  44                 	db	68	;'D'
   396  007FC8  20                 	db	32
   397  007FC9  54                 	db	84	;'T'
   398  007FCA  41                 	db	65	;'A'
   399  007FCB  42                 	db	66	;'B'
   400  007FCC  4C                 	db	76	;'L'
   401  007FCD  45                 	db	69	;'E'
   402  007FCE  54                 	db	84	;'T'
   403  007FCF  00                 	db	0
   404  007FD0  46                 	db	70	;'F'
   405  007FD1  6C                 	db	108	;'l'
   406  007FD2  6F                 	db	111	;'o'
   407  007FD3  61                 	db	97	;'a'
   408  007FD4  74                 	db	116	;'t'
   409  007FD5  20                 	db	32
   410  007FD6  3D                 	db	61	;'='
   411  007FD7  20                 	db	32
   412  007FD8  25                 	db	37
   413  007FD9  66                 	db	102	;'f'
   414  007FDA  00                 	db	0
   415  007FDB                     STR_3:
   416  007FDB  41                 	db	65	;'A'
   417  007FDC  54                 	db	84	;'T'
   418  007FDD  2B                 	db	43
   419  007FDE  49                 	db	73	;'I'
   420  007FDF  4E                 	db	78	;'N'
   421  007FE0  51                 	db	81	;'Q'
   422  007FE1  0D                 	db	13
   423  007FE2  0A                 	db	10
   424  007FE3  00                 	db	0
   425  007FE4                     STR_16:
   426  007FE4  44                 	db	68	;'D'
   427  007FE5  65                 	db	101	;'e'
   428  007FE6  66                 	db	102	;'f'
   429  007FE7  61                 	db	97	;'a'
   430  007FE8  75                 	db	117	;'u'
   431  007FE9  6C                 	db	108	;'l'
   432  007FEA  74                 	db	116	;'t'
   433  007FEB  00                 	db	0
   434  007FEC                     STR_20:
   435  007FEC  49                 	db	73	;'I'
   436  007FED  6E                 	db	110	;'n'
   437  007FEE  69                 	db	105	;'i'
   438  007FEF  63                 	db	99	;'c'
   439  007FF0  69                 	db	105	;'i'
   440  007FF1  6F                 	db	111	;'o'
   441  007FF2  00                 	db	0
   442  007FF3                     STR_10:
   443  007FF3  49                 	db	73	;'I'
   444  007FF4  4E                 	db	78	;'N'
   445  007FF5  49                 	db	73	;'I'
   446  007FF6  43                 	db	67	;'C'
   447  007FF7  49                 	db	73	;'I'
   448  007FF8  4F                 	db	79	;'O'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_12:
   451  007FFA  31                 	db	49	;'1'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_14:
   454  007FFC  33                 	db	51	;'3'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  0024FA                     __pcinit:
   464                           	opt stack 0
   465  0024FA                     start_initialization:
   466                           	opt stack 0
   467  0024FA                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  0024FA  EE01  F000         	lfsr	0,__pbssBANK1
   472  0024FE  0E5A               	movlw	90
   473  002500                     clear_0:
   474  002500  6AEE               	clrf	postinc0,c
   475  002502  06E8               	decf	wreg,f,c
   476  002504  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (30 bytes)
   479  002506  EE00  F0CE         	lfsr	0,__pbssBANK0
   480  00250A  0E1E               	movlw	30
   481  00250C                     clear_1:
   482  00250C  6AEE               	clrf	postinc0,c
   483  00250E  06E8               	decf	wreg,f,c
   484  002510  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  002512  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  002516  0E18               	movlw	24
   489  002518                     clear_2:
   490  002518  6AEE               	clrf	postinc0,c
   491  00251A  06E8               	decf	wreg,f,c
   492  00251C  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  00251E  0E02               	movlw	low __pidataBANK0
   497  002520  6EF6               	movwf	tblptrl,c
   498  002522  0E29               	movlw	high __pidataBANK0
   499  002524  6EF7               	movwf	tblptrh,c
   500  002526  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  002528  6EF8               	movwf	tblptru,c
   502  00252A  EE00  F0EC         	lfsr	0,__pdataBANK0
   503  00252E  EE10 F014          	lfsr	1,20
   504  002532                     copy_data0:
   505  002532  0009               	tblrd		*+
   506  002534  CFF5 FFEE          	movff	tablat,postinc0
   507  002538  50E5               	movf	postdec1,w,c
   508  00253A  50E1               	movf	fsr1l,w,c
   509  00253C  E1FA               	bnz	copy_data0
   510  00253E                     end_of_initialization:
   511                           	opt stack 0
   512  00253E                     __end_of__initialization:
   513                           	opt stack 0
   514  00253E  0100               	movlb	0
   515  002540  EF4F  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000CE                     __pbssBANK0:
   611                           	opt stack 0
   612  0000CE                     _DutyCycle:
   613                           	opt stack 0
   614  0000CE                     	ds	2
   615  0000D0                     _Med_lsb:
   616                           	opt stack 0
   617  0000D0                     	ds	2
   618  0000D2                     _Med_msb:
   619                           	opt stack 0
   620  0000D2                     	ds	2
   621  0000D4                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000D4                     	ds	2
   624  0000D6                     _i:
   625                           	opt stack 0
   626  0000D6                     	ds	2
   627  0000D8                     _comando:
   628                           	opt stack 0
   629  0000D8                     	ds	20
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK0
   640  0000EC                     __pdataBANK0:
   641                           	opt stack 0
   642  0000EC                     BT_Init@F5671:
   643                           	opt stack 0
   644  0000EC                     	ds	18
   645  0000FE                     _countup:
   646                           	opt stack 0
   647  0000FE                     	ds	2
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK1
   658  000100                     __pbssBANK1:
   659                           	opt stack 0
   660  000100                     _TramaTablet:
   661                           	opt stack 0
   662  000100                     	ds	20
   663  000114                     _array:
   664                           	opt stack 0
   665  000114                     	ds	20
   666  000128                     _BluetoothDato:
   667                           	opt stack 0
   668  000128                     	ds	50
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  00015A                     __pcstackBANK1:
   680                           	opt stack 0
   681  00015A                     putcBluetoothInt@s:
   682                           	opt stack 0
   683                           
   684                           ; 20 bytes @ 0x0
   685  00015A                     	ds	20
   686  00016E                     putcBluetoothInt@i:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x14
   690  00016E                     	ds	2
   691  000170                     Comando_Tablet@sensed:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695  000170                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2454:
   750                           	opt stack 0
   751  00006F                     _scale$2455:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2453:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2456:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1428:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1430:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934  0000BA                     Lcd_Write_Integer@s:
   935                           	opt stack 0
   936                           
   937                           ; 20 bytes @ 0x5A
   938  0000BA                     	ds	20
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ReadUSART@data:
   952                           	opt stack 0
   953  000001                     i2Lcd_Port@a:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x0
   957  000001                     	ds	1
   958  000002                     ??i2_Lcd_Cmd:
   959  000002                     i2Lcd_Write_Char@temp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1
   963  000002                     	ds	1
   964  000003                     i2Lcd_Cmd@a:
   965                           	opt stack 0
   966  000003                     i2Lcd_Write_Char@y:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     i2Lcd_Set_Cursor@b:
   972                           	opt stack 0
   973  000004                     i2Lcd_Write_Char@a:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3
   977  000004                     	ds	1
   978  000005                     i2Lcd_Set_Cursor@a:
   979                           	opt stack 0
   980  000005                     i2Lcd_Write_String@a:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x4
   984  000005                     	ds	1
   985  000006                     i2Lcd_Set_Cursor@z:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x5
   989  000006                     	ds	1
   990  000007                     ??i2_Lcd_Write_String:
   991  000007                     i2Lcd_Set_Cursor@y:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x6
   995  000007                     	ds	1
   996  000008                     i2Lcd_Set_Cursor@temp:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x7
  1000  000008                     	ds	1
  1001  000009                     i2Lcd_Write_String@i:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  000009                     	ds	2
  1006  00000B                     ??_TMRO_USART:
  1007                           
  1008                           ; 0 bytes @ 0xA
  1009  00000B                     	ds	14
  1010  000019                     ??_OpenPWM2:
  1011  000019                     ?_getCNY70Value:
  1012                           	opt stack 0
  1013  000019                     ?___awmod:
  1014                           	opt stack 0
  1015  000019                     ?___ftpack:
  1016                           	opt stack 0
  1017  000019                     ?___ftneg:
  1018                           	opt stack 0
  1019  000019                     ?__tdiv_to_l_:
  1020                           	opt stack 0
  1021  000019                     ?__div_to_l_:
  1022                           	opt stack 0
  1023  000019                     ?___lldiv:
  1024                           	opt stack 0
  1025  000019                     Lcd_Port@a:
  1026                           	opt stack 0
  1027  000019                     OpenPWM1@period:
  1028                           	opt stack 0
  1029  000019                     WriteUSART@data:
  1030                           	opt stack 0
  1031  000019                     clrBufferUSART@i:
  1032                           	opt stack 0
  1033  000019                     Pause_ms@x:
  1034                           	opt stack 0
  1035  000019                     SetDCPWM1@dutycycle:
  1036                           	opt stack 0
  1037  000019                     SetDCPWM2@dutycycle:
  1038                           	opt stack 0
  1039  000019                     OpenUSART@spbrg:
  1040                           	opt stack 0
  1041  000019                     ___awmod@dividend:
  1042                           	opt stack 0
  1043  000019                     __div_to_l_@f1:
  1044                           	opt stack 0
  1045  000019                     ___ftpack@arg:
  1046                           	opt stack 0
  1047  000019                     __tdiv_to_l_@f1:
  1048                           	opt stack 0
  1049  000019                     ___ftge@ff1:
  1050                           	opt stack 0
  1051  000019                     ___ftneg@f1:
  1052                           	opt stack 0
  1053  000019                     ___lldiv@dividend:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x18
  1057  000019                     	ds	1
  1058  00001A                     ??_Lcd_Cmd:
  1059  00001A                     putcTxU1@character:
  1060                           	opt stack 0
  1061  00001A                     Lcd_Write_Char@temp:
  1062                           	opt stack 0
  1063  00001A                     PWM_init1@period:
  1064                           	opt stack 0
  1065  00001A                     OpenPWM2@period:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x19
  1069  00001A                     	ds	1
  1070  00001B                     ??_OpenUSART:
  1071  00001B                     ??_SetDCPWM1:
  1072  00001B                     ??_SetDCPWM2:
  1073  00001B                     ??_Pause_ms:
  1074  00001B                     Lcd_Cmd@a:
  1075                           	opt stack 0
  1076  00001B                     Lcd_Write_Char@y:
  1077                           	opt stack 0
  1078  00001B                     OpenPWM2@ccp2mx:
  1079                           	opt stack 0
  1080  00001B                     putSTRINGU1@dato:
  1081                           	opt stack 0
  1082  00001B                     ___awmod@divisor:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1A
  1086  00001B                     	ds	1
  1087  00001C                     ??_Lcd_Init:
  1088  00001C                     Lcd_Set_Cursor@b:
  1089                           	opt stack 0
  1090  00001C                     Lcd_Write_Char@a:
  1091                           	opt stack 0
  1092  00001C                     PWM_init2@period:
  1093                           	opt stack 0
  1094  00001C                     ___ftpack@exp:
  1095                           	opt stack 0
  1096  00001C                     Pause_ms@i:
  1097                           	opt stack 0
  1098  00001C                     __div_to_l_@f2:
  1099                           	opt stack 0
  1100  00001C                     __tdiv_to_l_@f2:
  1101                           	opt stack 0
  1102  00001C                     ___ftge@ff2:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x1B
  1106  00001C                     	ds	1
  1107  00001D                     Lcd_Set_Cursor@a:
  1108                           	opt stack 0
  1109  00001D                     ___awmod@counter:
  1110                           	opt stack 0
  1111  00001D                     ___ftpack@sign:
  1112                           	opt stack 0
  1113  00001D                     putSTRINGU1@total:
  1114                           	opt stack 0
  1115  00001D                     Lcd_Write_String@a:
  1116                           	opt stack 0
  1117  00001D                     SetDCPWM1@DCycle:
  1118                           	opt stack 0
  1119  00001D                     SetDCPWM2@DCycle:
  1120                           	opt stack 0
  1121  00001D                     ___lldiv@divisor:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1C
  1125  00001D                     	ds	1
  1126  00001E                     ??___ftpack:
  1127  00001E                     Pause_seg@x:
  1128                           	opt stack 0
  1129  00001E                     Lcd_Set_Cursor@z:
  1130                           	opt stack 0
  1131  00001E                     OpenUSART@config:
  1132                           	opt stack 0
  1133  00001E                     ___awmod@sign:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x1D
  1137  00001E                     	ds	1
  1138  00001F                     ??_putSTRINGU1:
  1139  00001F                     ??_Lcd_Write_String:
  1140  00001F                     ??__tdiv_to_l_:
  1141  00001F                     ??__div_to_l_:
  1142  00001F                     ??___ftge:
  1143  00001F                     ?___awdiv:
  1144                           	opt stack 0
  1145  00001F                     Pause_seg@i:
  1146                           	opt stack 0
  1147  00001F                     UART1_Init@bdr:
  1148                           	opt stack 0
  1149  00001F                     Lcd_Set_Cursor@y:
  1150                           	opt stack 0
  1151  00001F                     ___awdiv@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1E
  1155  00001F                     	ds	1
  1156  000020                     Lcd_Set_Cursor@temp:
  1157                           	opt stack 0
  1158  000020                     putcBluetoothString@a:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1F
  1162  000020                     	ds	1
  1163  000021                     ?___lbtoft:
  1164                           	opt stack 0
  1165  000021                     ?___lltoft:
  1166                           	opt stack 0
  1167  000021                     putSTRINGU1@last:
  1168                           	opt stack 0
  1169  000021                     Lcd_Write_String@i:
  1170                           	opt stack 0
  1171  000021                     ___awdiv@divisor:
  1172                           	opt stack 0
  1173  000021                     ___lldiv@quotient:
  1174                           	opt stack 0
  1175  000021                     ___lltoft@c:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x20
  1179  000021                     	ds	1
  1180  000022                     ??_putcBluetoothString:
  1181  000022                     putSTRINGU1@cont:
  1182                           	opt stack 0
  1183  000022                     __tdiv_to_l_@quot:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x21
  1187  000022                     	ds	1
  1188  000023                     ___awdiv@counter:
  1189                           	opt stack 0
  1190  000023                     SendBlueToothCommand@command:
  1191                           	opt stack 0
  1192  000023                     __div_to_l_@quot:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x22
  1196  000023                     	ds	1
  1197  000024                     ___awdiv@sign:
  1198                           	opt stack 0
  1199  000024                     ___lbtoft@c:
  1200                           	opt stack 0
  1201  000024                     putcBluetoothString@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x23
  1205  000024                     	ds	1
  1206  000025                     ??___lltoft:
  1207  000025                     ___lldiv@counter:
  1208                           	opt stack 0
  1209  000025                     SendBlueToothCommand@total:
  1210                           	opt stack 0
  1211  000025                     ___awdiv@quotient:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x24
  1215  000025                     	ds	1
  1216  000026                     ?___llmod:
  1217                           	opt stack 0
  1218  000026                     __tdiv_to_l_@cntr:
  1219                           	opt stack 0
  1220  000026                     ___llmod@dividend:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x25
  1224  000026                     	ds	1
  1225  000027                     ??_Inicializa_Driveby:
  1226  000027                     ?___wmul:
  1227                           	opt stack 0
  1228  000027                     __div_to_l_@cntr:
  1229                           	opt stack 0
  1230  000027                     __tdiv_to_l_@exp1:
  1231                           	opt stack 0
  1232  000027                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x26
  1236  000027                     	ds	1
  1237  000028                     __div_to_l_@exp1:
  1238                           	opt stack 0
  1239  000028                     Inicializa_Driveby@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x27
  1243  000028                     	ds	1
  1244  000029                     ___lltoft@exp:
  1245                           	opt stack 0
  1246  000029                     ___wmul@multiplicand:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x28
  1250  000029                     	ds	1
  1251  00002A                     ___llmod@divisor:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x29
  1255  00002A                     	ds	1
  1256  00002B                     ___wmul@product:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2A
  1260  00002B                     	ds	2
  1261  00002D                     ??___ftmul:
  1262                           
  1263                           ; 0 bytes @ 0x2C
  1264  00002D                     	ds	1
  1265  00002E                     ___llmod@counter:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x2D
  1269  00002E                     	ds	2
  1270  000030                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 0 bytes @ 0x2F
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 122 in file "robot.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2  382[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1299 ;;      Params:         0       0       0       0       0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   10
  1305 ;; This function calls:
  1306 ;;		_Comando_Tablet
  1307 ;;		_Inicializa_Driveby
  1308 ;;		_Lcd_Clear
  1309 ;;		_Lcd_Init
  1310 ;;		_Lcd_Set_Cursor
  1311 ;;		_Lcd_Write_String
  1312 ;;		_UART1_Init
  1313 ;;		_clrBufferUSART
  1314 ;; This function is called by:
  1315 ;;		Startup code after reset
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text0
  1320  001C9E                     __ptext0:
  1321                           	opt stack 0
  1322  001C9E                     _main:
  1323                           	opt stack 21
  1324                           
  1325                           ;robot.c: 124: INTCON =0X00;
  1326                           
  1327                           ;incstack = 0
  1328  001C9E  0E00               	movlw	0
  1329  001CA0  6EF2               	movwf	intcon,c	;volatile
  1330                           
  1331                           ;robot.c: 125: TRISD = 0x00;
  1332  001CA2  0E00               	movlw	0
  1333  001CA4  6E95               	movwf	3989,c	;volatile
  1334                           
  1335                           ;robot.c: 126: TRISE = 0x00;
  1336  001CA6  0E00               	movlw	0
  1337  001CA8  6E96               	movwf	3990,c	;volatile
  1338                           
  1339                           ;robot.c: 127: PORTEbits.RE1=0;
  1340  001CAA  9284               	bcf	3972,1,c	;volatile
  1341                           
  1342                           ;robot.c: 128: ADCON1bits.PCFG=0b1111;
  1343  001CAC  80C1               	bsf	4033,0,c	;volatile
  1344  001CAE  82C1               	bsf	4033,1,c	;volatile
  1345  001CB0  84C1               	bsf	4033,2,c	;volatile
  1346  001CB2  86C1               	bsf	4033,3,c	;volatile
  1347                           
  1348                           ;robot.c: 129: Lcd_Init();
  1349  001CB4  EC2A  F011         	call	_Lcd_Init	;wreg free
  1350                           
  1351                           ;robot.c: 130: Lcd_Clear();
  1352  001CB8  ECAC  F014         	call	_Lcd_Clear	;wreg free
  1353                           
  1354                           ;robot.c: 131: Lcd_Set_Cursor(1,1);
  1355  001CBC  0E01               	movlw	1
  1356  001CBE  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1357  001CC0  0E01               	movlw	1
  1358  001CC2  EC2D  F012         	call	_Lcd_Set_Cursor
  1359                           
  1360                           ;robot.c: 132: Lcd_Write_String("Inicio");
  1361  001CC6  0E7F               	movlw	high STR_20
  1362  001CC8  6E1E               	movwf	Lcd_Write_String@a+1,c
  1363  001CCA  0EEC               	movlw	low STR_20
  1364  001CCC  6E1D               	movwf	Lcd_Write_String@a,c
  1365  001CCE  EC74  F010         	call	_Lcd_Write_String	;wreg free
  1366                           
  1367                           ;robot.c: 133: Inicializa_Driveby();
  1368  001CD2  ECF4  F00C         	call	_Inicializa_Driveby	;wreg free
  1369  001CD6                     l5711:
  1370                           
  1371                           ;robot.c: 138: {
  1372                           ;robot.c: 141: if (cleanBfer == 1) {
  1373  001CD6  043E               	decf	_cleanBfer,w,c
  1374  001CD8  A4D8               	btfss	status,2,c
  1375  001CDA  D004               	goto	l5717
  1376                           
  1377                           ;robot.c: 142: clrBufferUSART();
  1378  001CDC  EC58  F013         	call	_clrBufferUSART	;wreg free
  1379                           
  1380                           ;robot.c: 143: cleanBfer = 0;
  1381  001CE0  0E00               	movlw	0
  1382  001CE2  6E3E               	movwf	_cleanBfer,c
  1383  001CE4                     l5717:
  1384                           
  1385                           ;robot.c: 144: }
  1386                           ;robot.c: 145: if (FinComandT == 1) {
  1387  001CE4  0437               	decf	_FinComandT,w,c
  1388  001CE6  A4D8               	btfss	status,2,c
  1389  001CE8  D01A               	goto	l5737
  1390                           
  1391                           ;robot.c: 146: Lcd_Clear();
  1392  001CEA  ECAC  F014         	call	_Lcd_Clear	;wreg free
  1393                           
  1394                           ;robot.c: 147: Lcd_Set_Cursor(2,1);
  1395  001CEE  0E01               	movlw	1
  1396  001CF0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1397  001CF2  0E02               	movlw	2
  1398  001CF4  EC2D  F012         	call	_Lcd_Set_Cursor
  1399                           
  1400                           ;robot.c: 148: Lcd_Write_String("CMD TABLET");
  1401  001CF8  0E7F               	movlw	high STR_21
  1402  001CFA  6E1E               	movwf	Lcd_Write_String@a+1,c
  1403  001CFC  0EC5               	movlw	low STR_21
  1404  001CFE  6E1D               	movwf	Lcd_Write_String@a,c
  1405  001D00  EC74  F010         	call	_Lcd_Write_String	;wreg free
  1406                           
  1407                           ;robot.c: 149: FinComandT = 0;
  1408  001D04  0E00               	movlw	0
  1409  001D06  6E37               	movwf	_FinComandT,c
  1410                           
  1411                           ;robot.c: 150: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1412  001D08  0E4F               	movlw	79
  1413  001D0A  16AB               	andwf	4011,f,c	;volatile
  1414  001D0C  9AAC               	bcf	4012,5,c	;volatile
  1415  001D0E  0ECF               	movlw	207
  1416  001D10  169D               	andwf	3997,f,c	;volatile
  1417                           
  1418                           ;robot.c: 151: Comando_Tablet();
  1419  001D12  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1420                           
  1421                           ;robot.c: 152: UART1_Init(51);
  1422  001D16  0E33               	movlw	51
  1423  001D18  EC9D  F014         	call	_UART1_Init
  1424                           
  1425                           ;robot.c: 154: }
  1426  001D1C  D7DC               	goto	l5711
  1427  001D1E                     l5737:
  1428                           
  1429                           ;robot.c: 155: else if (FinComandB == 1) {
  1430  001D1E  0436               	decf	_FinComandB,w,c
  1431  001D20  A4D8               	btfss	status,2,c
  1432  001D22  D7D9               	goto	l5711
  1433                           
  1434                           ;robot.c: 160: FinComandB = 0;
  1435  001D24  0E00               	movlw	0
  1436  001D26  6E36               	movwf	_FinComandB,c
  1437                           
  1438                           ;robot.c: 161: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1439  001D28  0E4F               	movlw	79
  1440  001D2A  16AB               	andwf	4011,f,c	;volatile
  1441  001D2C  9AAC               	bcf	4012,5,c	;volatile
  1442  001D2E  0ECF               	movlw	207
  1443  001D30  169D               	andwf	3997,f,c	;volatile
  1444  001D32  D7D1               	goto	l5711
  1445  001D34                     __end_of_main:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           intcon	equ	0xFF2
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _Lcd_Init *****************
  1459 ;; Defined at:
  1460 ;;		line 57 in file "lcd.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;		None               void
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1474 ;;      Params:         0       0       0       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1476 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1477 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1478 ;;Total ram usage:        1 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    6
  1481 ;; This function calls:
  1482 ;;		_Lcd_Cmd
  1483 ;;		_Lcd_Port
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text1
  1490  002254                     __ptext1:
  1491                           	opt stack 0
  1492  002254                     _Lcd_Init:
  1493                           	opt stack 24
  1494                           
  1495                           ;lcd.c: 58: Lcd_Port(0x00);
  1496                           
  1497                           ;incstack = 0
  1498  002254  0E00               	movlw	0
  1499  002256  ECC5  F013         	call	_Lcd_Port
  1500                           
  1501                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1502  00225A  0E1A               	movlw	26
  1503  00225C  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1504  00225E  0EF8               	movlw	248
  1505  002260                     u6347:
  1506  002260  2EE8               	decfsz	wreg,f,c
  1507  002262  D7FE               	goto	u6347
  1508  002264  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1509  002266  D7FC               	goto	u6347
  1510  002268  D000               	nop2	
  1511                           
  1512                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1513  00226A  0E03               	movlw	3
  1514  00226C  EC29  F014         	call	_Lcd_Cmd
  1515                           
  1516                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1517  002270  0E07               	movlw	7
  1518  002272  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1519  002274  0E7D               	movlw	125
  1520  002276                     u6357:
  1521  002276  2EE8               	decfsz	wreg,f,c
  1522  002278  D7FE               	goto	u6357
  1523  00227A  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1524  00227C  D7FC               	goto	u6357
  1525  00227E  F000               	nop	
  1526                           
  1527                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1528  002280  0E03               	movlw	3
  1529  002282  EC29  F014         	call	_Lcd_Cmd
  1530                           
  1531                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1532  002286  0E0F               	movlw	15
  1533  002288  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1534  00228A  0E48               	movlw	72
  1535  00228C                     u6367:
  1536  00228C  2EE8               	decfsz	wreg,f,c
  1537  00228E  D7FE               	goto	u6367
  1538  002290  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1539  002292  D7FC               	goto	u6367
  1540                           
  1541                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1542  002294  0E03               	movlw	3
  1543  002296  EC29  F014         	call	_Lcd_Cmd
  1544                           
  1545                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1546  00229A  0E02               	movlw	2
  1547  00229C  EC29  F014         	call	_Lcd_Cmd
  1548                           
  1549                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1550  0022A0  0E02               	movlw	2
  1551  0022A2  EC29  F014         	call	_Lcd_Cmd
  1552                           
  1553                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1554  0022A6  0E08               	movlw	8
  1555  0022A8  EC29  F014         	call	_Lcd_Cmd
  1556                           
  1557                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1558  0022AC  0E00               	movlw	0
  1559  0022AE  EC29  F014         	call	_Lcd_Cmd
  1560                           
  1561                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1562  0022B2  0E0C               	movlw	12
  1563  0022B4  EC29  F014         	call	_Lcd_Cmd
  1564                           
  1565                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1566  0022B8  0E00               	movlw	0
  1567  0022BA  EC29  F014         	call	_Lcd_Cmd
  1568                           
  1569                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1570  0022BE  0E06               	movlw	6
  1571  0022C0  EC29  F014         	call	_Lcd_Cmd
  1572  0022C4  0012               	return	
  1573  0022C6                     __end_of_Lcd_Init:
  1574                           	opt stack 0
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _Inicializa_Driveby *****************
  1587 ;; Defined at:
  1588 ;;		line 62 in file "Funciones_Db.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  i               2   39[COMRAM] int 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1604 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1605 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1606 ;;Total ram usage:        3 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    9
  1609 ;; This function calls:
  1610 ;;		_BT_Init
  1611 ;;		_Lcd_Clear
  1612 ;;		_Lcd_Set_Cursor
  1613 ;;		_Lcd_Write_String
  1614 ;;		_Pause_seg
  1615 ;;		_clrBufferUSART
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text2
  1622  0019E8                     __ptext2:
  1623                           	opt stack 0
  1624  0019E8                     _Inicializa_Driveby:
  1625                           	opt stack 21
  1626                           
  1627                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1628                           
  1629                           ;incstack = 0
  1630  0019E8  0E00               	movlw	0
  1631  0019EA  6E95               	movwf	3989,c	;volatile
  1632  0019EC  CF95 FF94          	movff	3989,3988	;volatile
  1633  0019F0  CF94 FF93          	movff	3988,3987	;volatile
  1634  0019F4  CF93 FF92          	movff	3987,3986	;volatile
  1635                           
  1636                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1637  0019F8  0EC0               	movlw	192
  1638  0019FA  6EF2               	movwf	intcon,c	;volatile
  1639                           
  1640                           ;Funciones_Db.c: 67: int i = 0;
  1641  0019FC  0E00               	movlw	0
  1642  0019FE  6E29               	movwf	Inicializa_Driveby@i+1,c
  1643  001A00  0E00               	movlw	0
  1644  001A02  6E28               	movwf	Inicializa_Driveby@i,c
  1645                           
  1646                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1647  001A04  0E34               	movlw	52
  1648  001A06  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1649  001A08  0EF2               	movlw	242
  1650  001A0A                     u6377:
  1651  001A0A  2EE8               	decfsz	wreg,f,c
  1652  001A0C  D7FE               	goto	u6377
  1653  001A0E  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1654  001A10  D7FC               	goto	u6377
  1655                           
  1656                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1657  001A12  88D3               	bsf	4051,4,c	;volatile
  1658  001A14  8AD3               	bsf	4051,5,c	;volatile
  1659  001A16  8CD3               	bsf	4051,6,c	;volatile
  1660                           
  1661                           ;Funciones_Db.c: 74: TRISA = 0;
  1662  001A18  0E00               	movlw	0
  1663  001A1A  6E92               	movwf	3986,c	;volatile
  1664                           
  1665                           ;Funciones_Db.c: 75: PORTA = 0;
  1666  001A1C  0E00               	movlw	0
  1667  001A1E  6E80               	movwf	3968,c	;volatile
  1668                           
  1669                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  1670  001A20  8E94               	bsf	3988,7,c	;volatile
  1671                           
  1672                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  1673  001A22  9C94               	bcf	3988,6,c	;volatile
  1674                           
  1675                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  1676  001A24  0E00               	movlw	0
  1677  001A26  6E29               	movwf	Inicializa_Driveby@i+1,c
  1678  001A28  0E01               	movlw	1
  1679  001A2A  6E28               	movwf	Inicializa_Driveby@i,c
  1680  001A2C  5029               	movf	Inicializa_Driveby@i+1,w,c
  1681  001A2E  0A80               	xorlw	128
  1682  001A30  0F80               	addlw	-128
  1683  001A32  0E33               	movlw	51
  1684  001A34  B4D8               	btfsc	status,2,c
  1685  001A36  5C28               	subwf	Inicializa_Driveby@i,w,c
  1686  001A38  B0D8               	btfsc	status,0,c
  1687  001A3A  D00B               	goto	l5541
  1688                           
  1689                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1690  001A3C  0E1A               	movlw	26
  1691  001A3E  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1692  001A40  0EF8               	movlw	248
  1693  001A42                     u6387:
  1694  001A42  2EE8               	decfsz	wreg,f,c
  1695  001A44  D7FE               	goto	u6387
  1696  001A46  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1697  001A48  D7FC               	goto	u6387
  1698  001A4A  D000               	nop2	
  1699  001A4C  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1700  001A4E  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1701  001A50  D7ED               	goto	L1
  1702  001A52                     l5541:
  1703                           
  1704                           ;Funciones_Db.c: 80: PORTE = 0;
  1705  001A52  0E00               	movlw	0
  1706  001A54  6E84               	movwf	3972,c	;volatile
  1707                           
  1708                           ;Funciones_Db.c: 81: PORTB = 0;
  1709  001A56  0E00               	movlw	0
  1710  001A58  6E81               	movwf	3969,c	;volatile
  1711                           
  1712                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  1713  001A5A  8093               	bsf	3987,0,c	;volatile
  1714                           
  1715                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  1716  001A5C  8293               	bsf	3987,1,c	;volatile
  1717                           
  1718                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  1719  001A5E  8493               	bsf	3987,2,c	;volatile
  1720                           
  1721                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  1722  001A60  8693               	bsf	3987,3,c	;volatile
  1723                           
  1724                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  1725  001A62  8893               	bsf	3987,4,c	;volatile
  1726                           
  1727                           ;Funciones_Db.c: 87: Lcd_Clear();
  1728  001A64  ECAC  F014         	call	_Lcd_Clear	;wreg free
  1729                           
  1730                           ;Funciones_Db.c: 88: Lcd_Set_Cursor(2, 1);
  1731  001A68  0E01               	movlw	1
  1732  001A6A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1733  001A6C  0E02               	movlw	2
  1734  001A6E  EC2D  F012         	call	_Lcd_Set_Cursor
  1735                           
  1736                           ;Funciones_Db.c: 89: Lcd_Write_String("INICIO");
  1737  001A72  0E7F               	movlw	high STR_10
  1738  001A74  6E1E               	movwf	Lcd_Write_String@a+1,c
  1739  001A76  0EF3               	movlw	low STR_10
  1740  001A78  6E1D               	movwf	Lcd_Write_String@a,c
  1741  001A7A  EC74  F010         	call	_Lcd_Write_String	;wreg free
  1742                           
  1743                           ;Funciones_Db.c: 91: BT_Init();
  1744  001A7E  ECAA  F00D         	call	_BT_Init	;wreg free
  1745                           
  1746                           ;Funciones_Db.c: 92: Lcd_Clear();
  1747  001A82  ECAC  F014         	call	_Lcd_Clear	;wreg free
  1748                           
  1749                           ;Funciones_Db.c: 93: Lcd_Set_Cursor(1, 1);
  1750  001A86  0E01               	movlw	1
  1751  001A88  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1752  001A8A  0E01               	movlw	1
  1753  001A8C  EC2D  F012         	call	_Lcd_Set_Cursor
  1754                           
  1755                           ;Funciones_Db.c: 94: Lcd_Write_String("BT INICIALIZADO");
  1756  001A90  0E7F               	movlw	high STR_11
  1757  001A92  6E1E               	movwf	Lcd_Write_String@a+1,c
  1758  001A94  0E55               	movlw	low STR_11
  1759  001A96  6E1D               	movwf	Lcd_Write_String@a,c
  1760  001A98  EC74  F010         	call	_Lcd_Write_String	;wreg free
  1761                           
  1762                           ;Funciones_Db.c: 96: Pause_seg(7);
  1763  001A9C  0E07               	movlw	7
  1764  001A9E  ECA2  F012         	call	_Pause_seg
  1765                           
  1766                           ;Funciones_Db.c: 97: cad = 0;
  1767  001AA2  0E00               	movlw	0
  1768  001AA4  6E3D               	movwf	_cad,c
  1769                           
  1770                           ;Funciones_Db.c: 98: clrBufferUSART();
  1771  001AA6  EC58  F013         	call	_clrBufferUSART	;wreg free
  1772                           
  1773                           ;Funciones_Db.c: 99: return;
  1774  001AAA  0012               	return	
  1775  001AAC                     __end_of_Inicializa_Driveby:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           intcon	equ	0xFF2
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           postdec1	equ	0xFE5
  1785                           fsr1l	equ	0xFE1
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _BT_Init *****************
  1789 ;; Defined at:
  1790 ;;		line 16 in file "Bluetooth.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1804 ;;      Params:         0       0       0       0       0       0       0       0       0
  1805 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1807 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1808 ;;Total ram usage:       18 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    8
  1811 ;; This function calls:
  1812 ;;		_Pause_seg
  1813 ;;		_SendBlueToothCommand
  1814 ;;		_UART1_Init
  1815 ;; This function is called by:
  1816 ;;		_Inicializa_Driveby
  1817 ;;		_EstadoBluetooth
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text3
  1822  001B54                     __ptext3:
  1823                           	opt stack 0
  1824  001B54                     _BT_Init:
  1825                           	opt stack 21
  1826                           
  1827                           ;Bluetooth.c: 18: UART1_Init(51);
  1828                           
  1829                           ;incstack = 0
  1830  001B54  0E33               	movlw	51
  1831  001B56  EC9D  F014         	call	_UART1_Init
  1832                           
  1833                           ;Bluetooth.c: 21: Pause_seg(1);
  1834  001B5A  0E01               	movlw	1
  1835  001B5C  ECA2  F012         	call	_Pause_seg
  1836                           
  1837                           ;Bluetooth.c: 22: char nameBT[18] = {
  1838                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1839                           ;Bluetooth.c: 24: };
  1840  001B60  EE20  F0EC         	lfsr	2,BT_Init@F5671
  1841  001B64  EE10  F060         	lfsr	1,BT_Init@nameBT
  1842  001B68  0E12               	movlw	18
  1843  001B6A                     u5911:
  1844  001B6A  CFDE FFE6          	movff	postinc2,postinc1
  1845  001B6E  2EE8               	decfsz	wreg,f,c
  1846  001B70  D7FC               	goto	u5911
  1847                           
  1848                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1849  001B72  0E7F               	movlw	high STR_1
  1850  001B74  6E24               	movwf	SendBlueToothCommand@command+1,c
  1851  001B76  0EB9               	movlw	low STR_1
  1852  001B78  6E23               	movwf	SendBlueToothCommand@command,c
  1853  001B7A  0E00               	movlw	0
  1854  001B7C  6E26               	movwf	SendBlueToothCommand@total+1,c
  1855  001B7E  0E0B               	movlw	11
  1856  001B80  6E25               	movwf	SendBlueToothCommand@total,c
  1857  001B82  EC76  F014         	call	_SendBlueToothCommand	;wreg free
  1858                           
  1859                           ;Bluetooth.c: 29: Pause_seg(1);
  1860  001B86  0E01               	movlw	1
  1861  001B88  ECA2  F012         	call	_Pause_seg
  1862                           
  1863                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1864  001B8C  0100               	movlb	0	; () banked
  1865  001B8E  0E00               	movlw	high BT_Init@nameBT
  1866  001B90  6E24               	movwf	SendBlueToothCommand@command+1,c
  1867  001B92  0100               	movlb	0	; () banked
  1868  001B94  0E60               	movlw	low BT_Init@nameBT
  1869  001B96  6E23               	movwf	SendBlueToothCommand@command,c
  1870  001B98  0E00               	movlw	0
  1871  001B9A  6E26               	movwf	SendBlueToothCommand@total+1,c
  1872  001B9C  0E12               	movlw	18
  1873  001B9E  6E25               	movwf	SendBlueToothCommand@total,c
  1874  001BA0  EC76  F014         	call	_SendBlueToothCommand	;wreg free
  1875                           
  1876                           ;Bluetooth.c: 33: Pause_seg(2);
  1877  001BA4  0E02               	movlw	2
  1878  001BA6  ECA2  F012         	call	_Pause_seg
  1879                           
  1880                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1881  001BAA  0E7F               	movlw	high STR_2
  1882  001BAC  6E24               	movwf	SendBlueToothCommand@command+1,c
  1883  001BAE  0E65               	movlw	low STR_2
  1884  001BB0  6E23               	movwf	SendBlueToothCommand@command,c
  1885  001BB2  0E00               	movlw	0
  1886  001BB4  6E26               	movwf	SendBlueToothCommand@total+1,c
  1887  001BB6  0E0E               	movlw	14
  1888  001BB8  6E25               	movwf	SendBlueToothCommand@total,c
  1889  001BBA  EC76  F014         	call	_SendBlueToothCommand	;wreg free
  1890                           
  1891                           ;Bluetooth.c: 36: Pause_seg(2);
  1892  001BBE  0E02               	movlw	2
  1893  001BC0  ECA2  F012         	call	_Pause_seg
  1894                           
  1895                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1896  001BC4  0E7F               	movlw	high STR_3
  1897  001BC6  6E24               	movwf	SendBlueToothCommand@command+1,c
  1898  001BC8  0EDB               	movlw	low STR_3
  1899  001BCA  6E23               	movwf	SendBlueToothCommand@command,c
  1900  001BCC  0E00               	movlw	0
  1901  001BCE  6E26               	movwf	SendBlueToothCommand@total+1,c
  1902  001BD0  0E08               	movlw	8
  1903  001BD2  6E25               	movwf	SendBlueToothCommand@total,c
  1904  001BD4  EC76  F014         	call	_SendBlueToothCommand	;wreg free
  1905                           
  1906                           ;Bluetooth.c: 41: Pause_seg(2);
  1907  001BD8  0E02               	movlw	2
  1908  001BDA  ECA2  F012         	call	_Pause_seg
  1909                           
  1910                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1911  001BDE  0E7F               	movlw	high STR_3
  1912  001BE0  6E24               	movwf	SendBlueToothCommand@command+1,c
  1913  001BE2  0EDB               	movlw	low STR_3
  1914  001BE4  6E23               	movwf	SendBlueToothCommand@command,c
  1915  001BE6  0E00               	movlw	0
  1916  001BE8  6E26               	movwf	SendBlueToothCommand@total+1,c
  1917  001BEA  0E08               	movlw	8
  1918  001BEC  6E25               	movwf	SendBlueToothCommand@total,c
  1919  001BEE  EC76  F014         	call	_SendBlueToothCommand	;wreg free
  1920                           
  1921                           ;Bluetooth.c: 44: Pause_seg(2);
  1922  001BF2  0E02               	movlw	2
  1923  001BF4  ECA2  F012         	call	_Pause_seg
  1924                           
  1925                           ;Bluetooth.c: 45: return;
  1926  001BF8  0012               	return	
  1927  001BFA                     __end_of_BT_Init:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postinc1	equ	0xFE6
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           postinc2	equ	0xFDE
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _SendBlueToothCommand *****************
  1943 ;; Defined at:
  1944 ;;		line 48 in file "Bluetooth.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1947 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1948 ;;		 -> BT_Init@nameBT(18), 
  1949 ;;  total           2   36[COMRAM] unsigned int 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;		None               void
  1954 ;; Registers used:
  1955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1961 ;;      Params:         4       0       0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1964 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1965 ;;Total ram usage:        4 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    7
  1968 ;; This function calls:
  1969 ;;		_putSTRINGU1
  1970 ;; This function is called by:
  1971 ;;		_BT_Init
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text4
  1976  0028EC                     __ptext4:
  1977                           	opt stack 0
  1978  0028EC                     _SendBlueToothCommand:
  1979                           	opt stack 21
  1980                           
  1981                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1982                           
  1983                           ;incstack = 0
  1984  0028EC  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1985  0028F0  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1986  0028F4  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1987  0028F8  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1988  0028FC  EC9A  F00E         	call	_putSTRINGU1	;wreg free
  1989                           
  1990                           ;Bluetooth.c: 50: return;
  1991  002900  0012               	return	
  1992  002902                     __end_of_SendBlueToothCommand:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           intcon	equ	0xFF2
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postinc1	equ	0xFE6
  2002                           postdec1	equ	0xFE5
  2003                           fsr1l	equ	0xFE1
  2004                           postinc2	equ	0xFDE
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _putSTRINGU1 *****************
  2008 ;; Defined at:
  2009 ;;		line 18 in file "UART1.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  2012 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2013 ;;		 -> BT_Init@nameBT(18), 
  2014 ;;  total           2   28[COMRAM] unsigned int 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  cont            1   33[COMRAM] unsigned char 
  2017 ;;  last            1   32[COMRAM] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;		None               void
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2027 ;;      Params:         4       0       0       0       0       0       0       0       0
  2028 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2029 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2030 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2031 ;;Total ram usage:        8 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    6
  2034 ;; This function calls:
  2035 ;;		_putcTxU1
  2036 ;; This function is called by:
  2037 ;;		_SendBlueToothCommand
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text5
  2042  001D34                     __ptext5:
  2043                           	opt stack 0
  2044  001D34                     _putSTRINGU1:
  2045                           	opt stack 21
  2046                           
  2047                           ;UART1.c: 19: unsigned char cont,last;
  2048                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2049                           
  2050                           ;incstack = 0
  2051  001D34  0E00               	movlw	0
  2052  001D36  6E22               	movwf	putSTRINGU1@cont,c
  2053  001D38  0E00               	movlw	0
  2054  001D3A  6E21               	movwf	putSTRINGU1@last,c
  2055  001D3C  D01F               	goto	l4627
  2056  001D3E                     l4621:
  2057                           
  2058                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2059  001D3E  5022               	movf	putSTRINGU1@cont,w,c
  2060  001D40  0D01               	mullw	1
  2061  001D42  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2062  001D46  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2063  001D4A  50F3               	movf	prodl,w,c
  2064  001D4C  261F               	addwf	??_putSTRINGU1,f,c
  2065  001D4E  50F4               	movf	prodh,w,c
  2066  001D50  2220               	addwfc	??_putSTRINGU1+1,f,c
  2067  001D52  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2068  001D56  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2069  001D5A  6AF8               	clrf	tblptru,c
  2070  001D5C  0E07               	movlw	(high __ramtop+-1)
  2071  001D5E  64F7               	cpfsgt	tblptrh,c
  2072  001D60  D003               	bra	u4927
  2073  001D62  0008               	tblrd		*
  2074  001D64  50F5               	movf	tablat,w,c
  2075  001D66  D005               	bra	u4920
  2076  001D68                     u4927:
  2077  001D68  CFF6 FFE9          	movff	tblptrl,fsr0l
  2078  001D6C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2079  001D70  50EF               	movf	indf0,w,c
  2080  001D72                     u4920:
  2081  001D72  0900               	iorlw	0
  2082  001D74  A4D8               	btfss	status,2,c
  2083  001D76  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2084  001D7A  2A22               	incf	putSTRINGU1@cont,f,c
  2085  001D7C                     l4627:
  2086  001D7C  5022               	movf	putSTRINGU1@cont,w,c
  2087  001D7E  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2088  001D80  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2089  001D82  501D               	movf	putSTRINGU1@total,w,c
  2090  001D84  5C1F               	subwf	??_putSTRINGU1,w,c
  2091  001D86  501E               	movf	putSTRINGU1@total+1,w,c
  2092  001D88  5820               	subwfb	??_putSTRINGU1+1,w,c
  2093  001D8A  A0D8               	btfss	status,0,c
  2094  001D8C  D7D8               	goto	l4621
  2095                           
  2096                           ;UART1.c: 23: }
  2097                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2098  001D8E  0E00               	movlw	0
  2099  001D90  6E22               	movwf	putSTRINGU1@cont,c
  2100  001D92  D015               	goto	l4637
  2101  001D94                     l4631:
  2102                           
  2103                           ;UART1.c: 26: putcTxU1(*dato++);
  2104  001D94  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2105  001D98  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2106  001D9C  6AF8               	clrf	tblptru,c
  2107  001D9E  0E07               	movlw	(high __ramtop+-1)
  2108  001DA0  64F7               	cpfsgt	tblptrh,c
  2109  001DA2  D003               	bra	u4957
  2110  001DA4  0008               	tblrd		*
  2111  001DA6  50F5               	movf	tablat,w,c
  2112  001DA8  D005               	bra	u4950
  2113  001DAA                     u4957:
  2114  001DAA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2115  001DAE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2116  001DB2  50EF               	movf	indf0,w,c
  2117  001DB4                     u4950:
  2118  001DB4  ECA5  F014         	call	_putcTxU1
  2119  001DB8  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2120  001DBA  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2121  001DBC  2A22               	incf	putSTRINGU1@cont,f,c
  2122  001DBE                     l4637:
  2123  001DBE  5022               	movf	putSTRINGU1@cont,w,c
  2124  001DC0  5C21               	subwf	putSTRINGU1@last,w,c
  2125  001DC2  A0D8               	btfss	status,0,c
  2126  001DC4  0012               	return	
  2127  001DC6  D7E6               	goto	l4631
  2128  001DC8                     __end_of_putSTRINGU1:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           indf0	equ	0xFEF
  2138                           postinc0	equ	0xFEE
  2139                           fsr0h	equ	0xFEA
  2140                           fsr0l	equ	0xFE9
  2141                           wreg	equ	0xFE8
  2142                           postinc1	equ	0xFE6
  2143                           postdec1	equ	0xFE5
  2144                           fsr1l	equ	0xFE1
  2145                           postinc2	equ	0xFDE
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _putcTxU1 *****************
  2149 ;; Defined at:
  2150 ;;		line 12 in file "UART1.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  character       1    wreg     unsigned char 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  character       1   25[COMRAM] unsigned char 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;		None               void
  2157 ;; Registers used:
  2158 ;;		wreg, status,2, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0
  2165 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2167 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2168 ;;Total ram usage:        1 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    5
  2171 ;; This function calls:
  2172 ;;		_WriteUSART
  2173 ;; This function is called by:
  2174 ;;		_putSTRINGU1
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text6
  2179  00294A                     __ptext6:
  2180                           	opt stack 0
  2181  00294A                     _putcTxU1:
  2182                           	opt stack 21
  2183                           
  2184                           ;incstack = 0
  2185                           ;putcTxU1@character stored from wreg
  2186  00294A  6E1A               	movwf	putcTxU1@character,c
  2187                           
  2188                           ;UART1.c: 14: WriteUSART(character);
  2189  00294C  501A               	movf	putcTxU1@character,w,c
  2190  00294E  EC8B  F014         	call	_WriteUSART
  2191  002952                     l230:
  2192  002952  B2AC               	btfsc	4012,1,c	;volatile
  2193  002954  0012               	return	
  2194  002956  D7FD               	goto	l230
  2195  002958                     __end_of_putcTxU1:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           intcon	equ	0xFF2
  2204                           indf0	equ	0xFEF
  2205                           postinc0	equ	0xFEE
  2206                           fsr0h	equ	0xFEA
  2207                           fsr0l	equ	0xFE9
  2208                           wreg	equ	0xFE8
  2209                           postinc1	equ	0xFE6
  2210                           postdec1	equ	0xFE5
  2211                           fsr1l	equ	0xFE1
  2212                           postinc2	equ	0xFDE
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _Pause_seg *****************
  2216 ;; Defined at:
  2217 ;;		line 18 in file "Retardos.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  x               1    wreg     unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  x               1   29[COMRAM] unsigned char 
  2222 ;;  i               1   30[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0
  2233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2235 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    5
  2239 ;; This function calls:
  2240 ;;		_Pause_ms
  2241 ;; This function is called by:
  2242 ;;		_BT_Init
  2243 ;;		_Inicializa_Driveby
  2244 ;;		_EstadoBluetooth
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text7
  2249  002544                     __ptext7:
  2250                           	opt stack 0
  2251  002544                     _Pause_seg:
  2252                           	opt stack 24
  2253                           
  2254                           ;incstack = 0
  2255                           ;Pause_seg@x stored from wreg
  2256  002544  6E1E               	movwf	Pause_seg@x,c
  2257                           
  2258                           ;Retardos.c: 19: unsigned char i=0;
  2259  002546  0E00               	movlw	0
  2260  002548  6E1F               	movwf	Pause_seg@i,c
  2261                           
  2262                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2263  00254A  0E00               	movlw	0
  2264  00254C  6E1F               	movwf	Pause_seg@i,c
  2265  00254E  D019               	goto	l5017
  2266  002550                     l5013:
  2267                           
  2268                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2269  002550  0E00               	movlw	0
  2270  002552  6E1A               	movwf	Pause_ms@x+1,c
  2271  002554  0EFA               	movlw	250
  2272  002556  6E19               	movwf	Pause_ms@x,c
  2273  002558  ECAC  F013         	call	_Pause_ms	;wreg free
  2274  00255C  0E00               	movlw	0
  2275  00255E  6E1A               	movwf	Pause_ms@x+1,c
  2276  002560  0EFA               	movlw	250
  2277  002562  6E19               	movwf	Pause_ms@x,c
  2278  002564  ECAC  F013         	call	_Pause_ms	;wreg free
  2279                           
  2280                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2281  002568  0E00               	movlw	0
  2282  00256A  6E1A               	movwf	Pause_ms@x+1,c
  2283  00256C  0EFA               	movlw	250
  2284  00256E  6E19               	movwf	Pause_ms@x,c
  2285  002570  ECAC  F013         	call	_Pause_ms	;wreg free
  2286  002574  0E00               	movlw	0
  2287  002576  6E1A               	movwf	Pause_ms@x+1,c
  2288  002578  0EFA               	movlw	250
  2289  00257A  6E19               	movwf	Pause_ms@x,c
  2290  00257C  ECAC  F013         	call	_Pause_ms	;wreg free
  2291  002580  2A1F               	incf	Pause_seg@i,f,c
  2292  002582                     l5017:
  2293  002582  501F               	movf	Pause_seg@i,w,c
  2294  002584  5C1E               	subwf	Pause_seg@x,w,c
  2295  002586  A0D8               	btfss	status,0,c
  2296  002588  0012               	return	
  2297  00258A  D7E2               	goto	l5013
  2298  00258C                     __end_of_Pause_seg:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           intcon	equ	0xFF2
  2307                           indf0	equ	0xFEF
  2308                           postinc0	equ	0xFEE
  2309                           fsr0h	equ	0xFEA
  2310                           fsr0l	equ	0xFE9
  2311                           wreg	equ	0xFE8
  2312                           postinc1	equ	0xFE6
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           postinc2	equ	0xFDE
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _Pause_ms *****************
  2319 ;; Defined at:
  2320 ;;		line 11 in file "Retardos.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  x               2   24[COMRAM] unsigned int 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  i               2   27[COMRAM] unsigned int 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2334 ;;      Params:         2       0       0       0       0       0       0       0       0
  2335 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2336 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2337 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2338 ;;Total ram usage:        5 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    4
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_Pause_seg
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  002758                     __ptext8:
  2350                           	opt stack 0
  2351  002758                     _Pause_ms:
  2352                           	opt stack 24
  2353                           
  2354                           ;Retardos.c: 12: unsigned int i=0;
  2355                           
  2356                           ;incstack = 0
  2357  002758  0E00               	movlw	0
  2358  00275A  6E1D               	movwf	Pause_ms@i+1,c
  2359  00275C  0E00               	movlw	0
  2360  00275E  6E1C               	movwf	Pause_ms@i,c
  2361                           
  2362                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2363  002760  0E00               	movlw	0
  2364  002762  6E1D               	movwf	Pause_ms@i+1,c
  2365  002764  0E00               	movlw	0
  2366  002766  6E1C               	movwf	Pause_ms@i,c
  2367  002768  D009               	goto	l209
  2368  00276A                     l4641:
  2369                           
  2370                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2371  00276A  0E03               	movlw	3
  2372  00276C  6E1B               	movwf	??_Pause_ms& (0+255),c
  2373  00276E  0E98               	movlw	152
  2374  002770                     u6397:
  2375  002770  2EE8               	decfsz	wreg,f,c
  2376  002772  D7FE               	goto	u6397
  2377  002774  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2378  002776  D7FC               	goto	u6397
  2379  002778  4A1C               	infsnz	Pause_ms@i,f,c
  2380  00277A  2A1D               	incf	Pause_ms@i+1,f,c
  2381  00277C                     l209:
  2382  00277C  501C               	movf	Pause_ms@i,w,c
  2383  00277E  5C19               	subwf	Pause_ms@x,w,c
  2384  002780  501D               	movf	Pause_ms@i+1,w,c
  2385  002782  581A               	subwfb	Pause_ms@x+1,w,c
  2386  002784  A0D8               	btfss	status,0,c
  2387  002786  0012               	return	
  2388  002788  D7F0               	goto	l4641
  2389  00278A                     __end_of_Pause_ms:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           indf0	equ	0xFEF
  2399                           postinc0	equ	0xFEE
  2400                           fsr0h	equ	0xFEA
  2401                           fsr0l	equ	0xFE9
  2402                           wreg	equ	0xFE8
  2403                           postinc1	equ	0xFE6
  2404                           postdec1	equ	0xFE5
  2405                           fsr1l	equ	0xFE1
  2406                           postinc2	equ	0xFDE
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _Comando_Tablet *****************
  2410 ;; Defined at:
  2411 ;;		line 104 in file "Funciones_Db.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  sensed          2   22[BANK1 ] int 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2425 ;;      Params:         0       0       0       0       0       0       0       0       0
  2426 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2428 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2429 ;;Total ram usage:        2 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    9
  2432 ;; This function calls:
  2433 ;;		_Lcd_Clear
  2434 ;;		_Lcd_Set_Cursor
  2435 ;;		_Lcd_Write_Integer
  2436 ;;		_Lcd_Write_String
  2437 ;;		_PWM_DutyCycle1
  2438 ;;		_PWM_DutyCycle2
  2439 ;;		_PWM_init1
  2440 ;;		_PWM_init2
  2441 ;;		_clrBufferUSART
  2442 ;;		_getCNY70Value
  2443 ;;		_putcBluetoothInt
  2444 ;;		_putcBluetoothString
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text9
  2451  001580                     __ptext9:
  2452                           	opt stack 0
  2453  001580                     _Comando_Tablet:
  2454                           	opt stack 21
  2455                           
  2456                           ;Funciones_Db.c: 106: int sensed=0;
  2457                           
  2458                           ;incstack = 0
  2459  001580  0E00               	movlw	0
  2460  001582  0101               	movlb	1	; () banked
  2461  001584  6F71               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  2462  001586  0E00               	movlw	0
  2463  001588  0101               	movlb	1	; () banked
  2464  00158A  6F70               	movwf	Comando_Tablet@sensed& (0+255),b
  2465                           
  2466                           ;Funciones_Db.c: 107: switch (BluetoothDato[1]) {
  2467  00158C  D083               	goto	l5631
  2468  00158E                     l5577:
  2469                           
  2470                           ; BSR set to: 1
  2471                           ;Funciones_Db.c: 109: Lcd_Clear();
  2472  00158E  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2473                           
  2474                           ;Funciones_Db.c: 110: Lcd_Set_Cursor(1, 1);
  2475  001592  0E01               	movlw	1
  2476  001594  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2477  001596  0E01               	movlw	1
  2478  001598  EC2D  F012         	call	_Lcd_Set_Cursor
  2479                           
  2480                           ;Funciones_Db.c: 111: Lcd_Write_String("1");
  2481  00159C  0E7F               	movlw	high STR_12
  2482  00159E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2483  0015A0  0EFA               	movlw	low STR_12
  2484  0015A2  6E1D               	movwf	Lcd_Write_String@a,c
  2485  0015A4  EC74  F010         	call	_Lcd_Write_String	;wreg free
  2486                           
  2487                           ;Funciones_Db.c: 112: break;
  2488  0015A8  D087               	goto	l5633
  2489  0015AA                     l5583:
  2490                           
  2491                           ;Funciones_Db.c: 114: Lcd_Clear();
  2492  0015AA  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2493                           
  2494                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2495  0015AE  0E01               	movlw	1
  2496  0015B0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2497  0015B2  0E01               	movlw	1
  2498  0015B4  EC2D  F012         	call	_Lcd_Set_Cursor
  2499                           
  2500                           ;Funciones_Db.c: 116: Lcd_Write_String("2");
  2501  0015B8  0E7F               	movlw	high (STR_19+16)
  2502  0015BA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2503  0015BC  0E53               	movlw	low (STR_19+16)
  2504  0015BE  6E1D               	movwf	Lcd_Write_String@a,c
  2505  0015C0  EC74  F010         	call	_Lcd_Write_String	;wreg free
  2506                           
  2507                           ;Funciones_Db.c: 117: break;
  2508  0015C4  D079               	goto	l5633
  2509  0015C6                     l5589:
  2510                           
  2511                           ;Funciones_Db.c: 120: Lcd_Clear();
  2512  0015C6  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2513                           
  2514                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2515  0015CA  0E01               	movlw	1
  2516  0015CC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2517  0015CE  0E01               	movlw	1
  2518  0015D0  EC2D  F012         	call	_Lcd_Set_Cursor
  2519                           
  2520                           ;Funciones_Db.c: 123: Lcd_Write_String("3");
  2521  0015D4  0E7F               	movlw	high STR_14
  2522  0015D6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2523  0015D8  0EFC               	movlw	low STR_14
  2524  0015DA  6E1D               	movwf	Lcd_Write_String@a,c
  2525  0015DC  EC74  F010         	call	_Lcd_Write_String	;wreg free
  2526                           
  2527                           ;Funciones_Db.c: 124: break;
  2528  0015E0  D06B               	goto	l5633
  2529  0015E2                     l5595:
  2530                           
  2531                           ;Funciones_Db.c: 129: sensed = getCNY70Value();
  2532  0015E2  ECEE  F010         	call	_getCNY70Value	;wreg free
  2533  0015E6  C019  F170         	movff	?_getCNY70Value,Comando_Tablet@sensed
  2534  0015EA  C01A  F171         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  2535                           
  2536                           ;Funciones_Db.c: 130: Lcd_Clear();
  2537  0015EE  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2538                           
  2539                           ;Funciones_Db.c: 131: Lcd_Set_Cursor(1,1);
  2540  0015F2  0E01               	movlw	1
  2541  0015F4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2542  0015F6  0E01               	movlw	1
  2543  0015F8  EC2D  F012         	call	_Lcd_Set_Cursor
  2544                           
  2545                           ;Funciones_Db.c: 132: Lcd_Write_Integer(sensed);
  2546  0015FC  C170  F0B8         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  2547  001600  C171  F0B9         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  2548  001604  EC3B  F013         	call	_Lcd_Write_Integer	;wreg free
  2549                           
  2550                           ;Funciones_Db.c: 133: putcBluetoothInt(sensed);
  2551  001608  C170  F0B8         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  2552  00160C  C171  F0B9         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  2553  001610  EC74  F00F         	call	_putcBluetoothInt	;wreg free
  2554                           
  2555                           ;Funciones_Db.c: 134: putcBluetoothString("\n");
  2556  001614  0E7F               	movlw	high (STR_2+13)
  2557  001616  6E21               	movwf	putcBluetoothString@a+1,c
  2558  001618  0E72               	movlw	low (STR_2+13)
  2559  00161A  6E20               	movwf	putcBluetoothString@a,c
  2560  00161C  EC63  F011         	call	_putcBluetoothString	;wreg free
  2561                           
  2562                           ;Funciones_Db.c: 135: break;
  2563  001620  D04B               	goto	l5633
  2564  001622                     l5605:
  2565                           
  2566                           ;Funciones_Db.c: 137: Lcd_Clear();
  2567  001622  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2568                           
  2569                           ;Funciones_Db.c: 138: Lcd_Set_Cursor(1, 1);
  2570  001626  0E01               	movlw	1
  2571  001628  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2572  00162A  0E01               	movlw	1
  2573  00162C  EC2D  F012         	call	_Lcd_Set_Cursor
  2574                           
  2575                           ;Funciones_Db.c: 139: Lcd_Write_Integer(BluetoothDato[3]);
  2576  001630  0101               	movlb	1	; () banked
  2577  001632  0100               	movlb	0	; () banked
  2578  001634  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2579  001638  0100               	movlb	0	; () banked
  2580  00163A  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2581  00163C  EC3B  F013         	call	_Lcd_Write_Integer	;wreg free
  2582                           
  2583                           ;Funciones_Db.c: 140: Lcd_Set_Cursor(2, 1);
  2584  001640  0E01               	movlw	1
  2585  001642  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2586  001644  0E02               	movlw	2
  2587  001646  EC2D  F012         	call	_Lcd_Set_Cursor
  2588                           
  2589                           ;Funciones_Db.c: 141: Lcd_Write_Integer(BluetoothDato[4]);
  2590  00164A  0101               	movlb	1	; () banked
  2591  00164C  0100               	movlb	0	; () banked
  2592  00164E  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2593  001652  0100               	movlb	0	; () banked
  2594  001654  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2595  001656  EC3B  F013         	call	_Lcd_Write_Integer	;wreg free
  2596                           
  2597                           ;Funciones_Db.c: 142: PWM_init1(0xff);
  2598  00165A  0EFF               	movlw	255
  2599  00165C  EC58  F014         	call	_PWM_init1
  2600                           
  2601                           ;Funciones_Db.c: 143: PWM_init2(0xff);
  2602  001660  0EFF               	movlw	255
  2603  001662  EC49  F014         	call	_PWM_init2
  2604                           
  2605                           ;Funciones_Db.c: 144: PWM_DutyCycle1(BluetoothDato[3]);
  2606  001666  0101               	movlb	1	; () banked
  2607  001668  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2608  00166A  EC36  F010         	call	_PWM_DutyCycle1
  2609                           
  2610                           ;Funciones_Db.c: 145: PWM_DutyCycle2(BluetoothDato[4]);
  2611  00166E  0101               	movlb	1	; () banked
  2612  001670  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2613  001672  ECF8  F00F         	call	_PWM_DutyCycle2
  2614                           
  2615                           ;Funciones_Db.c: 146: break;
  2616  001676  D020               	goto	l5633
  2617  001678                     l5623:
  2618                           
  2619                           ;Funciones_Db.c: 148: Lcd_Clear();
  2620  001678  ECAC  F014         	call	_Lcd_Clear	;wreg free
  2621                           
  2622                           ;Funciones_Db.c: 149: Lcd_Set_Cursor(1, 1);
  2623  00167C  0E01               	movlw	1
  2624  00167E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2625  001680  0E01               	movlw	1
  2626  001682  EC2D  F012         	call	_Lcd_Set_Cursor
  2627                           
  2628                           ;Funciones_Db.c: 150: Lcd_Write_String("Default");
  2629  001686  0E7F               	movlw	high STR_16
  2630  001688  6E1E               	movwf	Lcd_Write_String@a+1,c
  2631  00168A  0EE4               	movlw	low STR_16
  2632  00168C  6E1D               	movwf	Lcd_Write_String@a,c
  2633  00168E  EC74  F010         	call	_Lcd_Write_String	;wreg free
  2634                           
  2635                           ;Funciones_Db.c: 151: break;
  2636  001692  D012               	goto	l5633
  2637  001694                     l5631:
  2638  001694  0101               	movlb	1	; () banked
  2639  001696  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2640                           
  2641                           ; Switch size 1, requested type "space"
  2642                           ; Number of cases is 5, Range of values is 1 to 5
  2643                           ; switch strategies available:
  2644                           ; Name         Instructions Cycles
  2645                           ; simple_byte           16     9 (average)
  2646                           ;	Chosen strategy is simple_byte
  2647  001698  0A01               	xorlw	1	; case 1
  2648  00169A  B4D8               	btfsc	status,2,c
  2649  00169C  D778               	goto	l5577
  2650  00169E  0A03               	xorlw	3	; case 2
  2651  0016A0  B4D8               	btfsc	status,2,c
  2652  0016A2  D783               	goto	l5583
  2653  0016A4  0A01               	xorlw	1	; case 3
  2654  0016A6  B4D8               	btfsc	status,2,c
  2655  0016A8  D78E               	goto	l5589
  2656  0016AA  0A07               	xorlw	7	; case 4
  2657  0016AC  B4D8               	btfsc	status,2,c
  2658  0016AE  D799               	goto	l5595
  2659  0016B0  0A01               	xorlw	1	; case 5
  2660  0016B2  B4D8               	btfsc	status,2,c
  2661  0016B4  D7B6               	goto	l5605
  2662  0016B6  D7E0               	goto	l5623
  2663  0016B8                     l5633:
  2664                           
  2665                           ;Funciones_Db.c: 153: clrBufferUSART();
  2666  0016B8  EC58  F013         	call	_clrBufferUSART	;wreg free
  2667                           
  2668                           ;Funciones_Db.c: 154: return;
  2669  0016BC  0012               	return	
  2670  0016BE                     __end_of_Comando_Tablet:
  2671                           	opt stack 0
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           indf0	equ	0xFEF
  2680                           postinc0	equ	0xFEE
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           wreg	equ	0xFE8
  2684                           postinc1	equ	0xFE6
  2685                           postdec1	equ	0xFE5
  2686                           fsr1l	equ	0xFE1
  2687                           postinc2	equ	0xFDE
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _putcBluetoothString *****************
  2691 ;; Defined at:
  2692 ;;		line 90 in file "Bluetooth.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  a               2   31[COMRAM] PTR unsigned char 
  2695 ;;		 -> STR_15(2), 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  i               2   35[COMRAM] int 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;		None               void
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         2       0       0       0       0       0       0       0       0
  2708 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2709 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2710 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        6 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    6
  2714 ;; This function calls:
  2715 ;;		_UART1_Init
  2716 ;;		_WriteUSART
  2717 ;; This function is called by:
  2718 ;;		_Comando_Tablet
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text10
  2723  0022C6                     __ptext10:
  2724                           	opt stack 0
  2725  0022C6                     _putcBluetoothString:
  2726                           	opt stack 23
  2727                           
  2728                           ;Bluetooth.c: 92: int i;
  2729                           ;Bluetooth.c: 93: UART1_Init(51);
  2730                           
  2731                           ;incstack = 0
  2732  0022C6  0E33               	movlw	51
  2733  0022C8  EC9D  F014         	call	_UART1_Init
  2734                           
  2735                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2736  0022CC  0E00               	movlw	0
  2737  0022CE  6E25               	movwf	putcBluetoothString@i+1,c
  2738  0022D0  0E00               	movlw	0
  2739  0022D2  6E24               	movwf	putcBluetoothString@i,c
  2740  0022D4  D015               	goto	l5333
  2741  0022D6                     l5329:
  2742                           
  2743                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2744  0022D6  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2745  0022DA  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2746  0022DE  5024               	movf	putcBluetoothString@i,w,c
  2747  0022E0  2622               	addwf	??_putcBluetoothString,f,c
  2748  0022E2  5025               	movf	putcBluetoothString@i+1,w,c
  2749  0022E4  2223               	addwfc	??_putcBluetoothString+1,f,c
  2750  0022E6  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2751  0022EA  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2752  0022EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2753  0022EE  6AF8               	clrf	tblptru,c
  2754  0022F0                     	endif
  2755  0022F0                     	if	0	;tblptru may be non-zero
  2756  0022F0                     	endif
  2757  0022F0  0008               	tblrd		*
  2758  0022F2  50F5               	movf	tablat,w,c
  2759  0022F4  EC8B  F014         	call	_WriteUSART
  2760  0022F8                     l59:
  2761  0022F8  A2AC               	btfss	4012,1,c	;volatile
  2762  0022FA  D7FE               	goto	l59
  2763  0022FC  4A24               	infsnz	putcBluetoothString@i,f,c
  2764  0022FE  2A25               	incf	putcBluetoothString@i+1,f,c
  2765  002300                     l5333:
  2766  002300  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2767  002304  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2768  002308  5024               	movf	putcBluetoothString@i,w,c
  2769  00230A  2622               	addwf	??_putcBluetoothString,f,c
  2770  00230C  5025               	movf	putcBluetoothString@i+1,w,c
  2771  00230E  2223               	addwfc	??_putcBluetoothString+1,f,c
  2772  002310  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2773  002314  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2774  002318                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2775  002318  6AF8               	clrf	tblptru,c
  2776  00231A                     	endif
  2777  00231A                     	if	0	;tblptru may be non-zero
  2778  00231A                     	endif
  2779  00231A  0008               	tblrd		*
  2780  00231C  50F5               	movf	tablat,w,c
  2781  00231E  0900               	iorlw	0
  2782  002320  A4D8               	btfss	status,2,c
  2783  002322  D7D9               	goto	l5329
  2784                           
  2785                           ;Bluetooth.c: 98: }
  2786                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2787  002324  0E4F               	movlw	79
  2788  002326  16AB               	andwf	4011,f,c	;volatile
  2789  002328  9AAC               	bcf	4012,5,c	;volatile
  2790  00232A  0ECF               	movlw	207
  2791  00232C  169D               	andwf	3997,f,c	;volatile
  2792                           
  2793                           ;Bluetooth.c: 100: return;
  2794  00232E  0012               	return	
  2795  002330                     __end_of_putcBluetoothString:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           indf0	equ	0xFEF
  2805                           postinc0	equ	0xFEE
  2806                           fsr0h	equ	0xFEA
  2807                           fsr0l	equ	0xFE9
  2808                           wreg	equ	0xFE8
  2809                           postinc1	equ	0xFE6
  2810                           postdec1	equ	0xFE5
  2811                           fsr1l	equ	0xFE1
  2812                           postinc2	equ	0xFDE
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _putcBluetoothInt *****************
  2816 ;; Defined at:
  2817 ;;		line 102 in file "Bluetooth.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  a               2   88[BANK0 ] int 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  s              20    0[BANK1 ] unsigned char [20]
  2822 ;;  i               2   20[BANK1 ] int 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;		None               void
  2825 ;; Registers used:
  2826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2832 ;;      Params:         0       2       0       0       0       0       0       0       0
  2833 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2835 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2836 ;;Total ram usage:       24 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    8
  2839 ;; This function calls:
  2840 ;;		_UART1_Init
  2841 ;;		_WriteUSART
  2842 ;;		_sprintf
  2843 ;; This function is called by:
  2844 ;;		_Comando_Tablet
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text11
  2849  001EE8                     __ptext11:
  2850                           	opt stack 0
  2851  001EE8                     _putcBluetoothInt:
  2852                           	opt stack 21
  2853                           
  2854                           ;Bluetooth.c: 104: int i;
  2855                           ;Bluetooth.c: 105: unsigned char s[20];
  2856                           ;Bluetooth.c: 106: UART1_Init(51);
  2857                           
  2858                           ;incstack = 0
  2859  001EE8  0E33               	movlw	51
  2860  001EEA  EC9D  F014         	call	_UART1_Init
  2861                           
  2862                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2863  001EEE  0101               	movlb	1	; () banked
  2864  001EF0  0E01               	movlw	high putcBluetoothInt@s
  2865  001EF2  0100               	movlb	0	; () banked
  2866  001EF4  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2867  001EF6  0101               	movlb	1	; () banked
  2868  001EF8  0E5A               	movlw	low putcBluetoothInt@s
  2869  001EFA  0100               	movlb	0	; () banked
  2870  001EFC  6F88               	movwf	sprintf@sp& (0+255),b
  2871  001EFE  0E7F               	movlw	high (STR_18+10)
  2872  001F00  0100               	movlb	0	; () banked
  2873  001F02  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2874  001F04  0EB6               	movlw	low (STR_18+10)
  2875  001F06  0100               	movlb	0	; () banked
  2876  001F08  6F8A               	movwf	sprintf@f& (0+255),b
  2877  001F0A  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2878  001F0E  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2879  001F12  EC0E  F000         	call	_sprintf	;wreg free
  2880                           
  2881                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2882  001F16  0E00               	movlw	0
  2883  001F18  0101               	movlb	1	; () banked
  2884  001F1A  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2885  001F1C  0E00               	movlw	0
  2886  001F1E  0101               	movlb	1	; () banked
  2887  001F20  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2888  001F22  D012               	goto	l5351
  2889  001F24                     l5347:
  2890                           
  2891                           ; BSR set to: 1
  2892                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2893  001F24  0101               	movlb	1	; () banked
  2894  001F26  0E5A               	movlw	low putcBluetoothInt@s
  2895  001F28  0101               	movlb	1	; () banked
  2896  001F2A  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2897  001F2C  6ED9               	movwf	fsr2l,c
  2898  001F2E  0101               	movlb	1	; () banked
  2899  001F30  0E01               	movlw	high putcBluetoothInt@s
  2900  001F32  0101               	movlb	1	; () banked
  2901  001F34  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2902  001F36  6EDA               	movwf	fsr2h,c
  2903  001F38  50DF               	movf	indf2,w,c
  2904  001F3A  EC8B  F014         	call	_WriteUSART
  2905  001F3E                     l68:
  2906  001F3E  A2AC               	btfss	4012,1,c	;volatile
  2907  001F40  D7FE               	goto	l68
  2908  001F42  0101               	movlb	1	; () banked
  2909  001F44  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2910  001F46  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2911  001F48                     l5351:
  2912                           
  2913                           ; BSR set to: 1
  2914  001F48  0101               	movlb	1	; () banked
  2915  001F4A  0E5A               	movlw	low putcBluetoothInt@s
  2916  001F4C  0101               	movlb	1	; () banked
  2917  001F4E  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2918  001F50  6ED9               	movwf	fsr2l,c
  2919  001F52  0101               	movlb	1	; () banked
  2920  001F54  0E01               	movlw	high putcBluetoothInt@s
  2921  001F56  0101               	movlb	1	; () banked
  2922  001F58  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2923  001F5A  6EDA               	movwf	fsr2h,c
  2924  001F5C  50DF               	movf	indf2,w,c
  2925  001F5E  A4D8               	btfss	status,2,c
  2926  001F60  D7E1               	goto	l5347
  2927                           
  2928                           ; BSR set to: 1
  2929                           ;Bluetooth.c: 112: }
  2930                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2931                           
  2932                           ; BSR set to: 1
  2933  001F62  0E4F               	movlw	79
  2934  001F64  16AB               	andwf	4011,f,c	;volatile
  2935                           
  2936                           ; BSR set to: 1
  2937  001F66  9AAC               	bcf	4012,5,c	;volatile
  2938  001F68  0ECF               	movlw	207
  2939  001F6A  169D               	andwf	3997,f,c	;volatile
  2940                           
  2941                           ; BSR set to: 1
  2942                           
  2943                           ; BSR set to: 1
  2944                           ;Bluetooth.c: 114: return;
  2945  001F6C  0012               	return	
  2946  001F6E                     __end_of_putcBluetoothInt:
  2947                           	opt stack 0
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           indf0	equ	0xFEF
  2956                           postinc0	equ	0xFEE
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           postinc1	equ	0xFE6
  2961                           postdec1	equ	0xFE5
  2962                           fsr1l	equ	0xFE1
  2963                           indf2	equ	0xFDF
  2964                           postinc2	equ	0xFDE
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _WriteUSART *****************
  2970 ;; Defined at:
  2971 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  data            1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  data            1   24[COMRAM] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;		None               void
  2978 ;; Registers used:
  2979 ;;		wreg
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0
  2986 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2988 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    4
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_putcBluetoothString
  2996 ;;		_putcBluetoothInt
  2997 ;;		_putcTxU1
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text12
  3002  002916                     __ptext12:
  3003                           	opt stack 0
  3004  002916                     _WriteUSART:
  3005                           	opt stack 21
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;incstack = 0
  3009                           ;WriteUSART@data stored from wreg
  3010  002916  6E19               	movwf	WriteUSART@data,c
  3011  002918  ACAC               	btfss	4012,6,c	;volatile
  3012  00291A  D003               	goto	l4361
  3013  00291C  90AC               	bcf	4012,0,c	;volatile
  3014  00291E  B23C               	btfsc	_USART_Status,1,c
  3015  002920  80AC               	bsf	4012,0,c	;volatile
  3016  002922                     l4361:
  3017  002922  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3018  002926  0012               	return	
  3019  002928                     __end_of_WriteUSART:
  3020                           	opt stack 0
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           intcon	equ	0xFF2
  3028                           indf0	equ	0xFEF
  3029                           postinc0	equ	0xFEE
  3030                           fsr0h	equ	0xFEA
  3031                           fsr0l	equ	0xFE9
  3032                           wreg	equ	0xFE8
  3033                           postinc1	equ	0xFE6
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _UART1_Init *****************
  3043 ;; Defined at:
  3044 ;;		line 5 in file "UART1.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  bdr             1    wreg     unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  bdr             1   30[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0
  3059 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3061 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    5
  3065 ;; This function calls:
  3066 ;;		_OpenUSART
  3067 ;; This function is called by:
  3068 ;;		_BT_Init
  3069 ;;		_putcBluetoothString
  3070 ;;		_putcBluetoothInt
  3071 ;;		_main
  3072 ;;		_EstadoBluetooth
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text13
  3077  00293A                     __ptext13:
  3078                           	opt stack 0
  3079  00293A                     _UART1_Init:
  3080                           	opt stack 25
  3081                           
  3082                           ;incstack = 0
  3083                           ;UART1_Init@bdr stored from wreg
  3084  00293A  6E1F               	movwf	UART1_Init@bdr,c
  3085                           
  3086                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3087  00293C  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3088  002940  6A1A               	clrf	OpenUSART@spbrg+1,c
  3089  002942  0E7C               	movlw	124
  3090  002944  EC98  F011         	call	_OpenUSART
  3091  002948  0012               	return	
  3092  00294A                     __end_of_UART1_Init:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           indf0	equ	0xFEF
  3102                           postinc0	equ	0xFEE
  3103                           fsr0h	equ	0xFEA
  3104                           fsr0l	equ	0xFE9
  3105                           wreg	equ	0xFE8
  3106                           postinc1	equ	0xFE6
  3107                           postdec1	equ	0xFE5
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _OpenUSART *****************
  3116 ;; Defined at:
  3117 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  config          1    wreg     unsigned char 
  3120 ;;  spbrg           2   24[COMRAM] unsigned int 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  config          1   29[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;		None               void
  3125 ;; Registers used:
  3126 ;;		wreg, status,2
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3132 ;;      Params:         2       0       0       0       0       0       0       0       0
  3133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3134 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3135 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3136 ;;Total ram usage:        6 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    4
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_UART1_Init
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text14
  3147  002330                     __ptext14:
  3148                           	opt stack 0
  3149  002330                     _OpenUSART:
  3150                           	opt stack 25
  3151                           
  3152                           ;incstack = 0
  3153                           ;OpenUSART@config stored from wreg
  3154  002330  6E1E               	movwf	OpenUSART@config,c
  3155  002332  0E00               	movlw	0
  3156  002334  6EAC               	movwf	4012,c	;volatile
  3157  002336  0E00               	movlw	0
  3158  002338  6EAB               	movwf	4011,c	;volatile
  3159  00233A  B01E               	btfsc	OpenUSART@config,0,c
  3160  00233C  88AC               	bsf	4012,4,c	;volatile
  3161  00233E  A21E               	btfss	OpenUSART@config,1,c
  3162  002340  D002               	goto	l4655
  3163  002342  8CAC               	bsf	4012,6,c	;volatile
  3164  002344  8CAB               	bsf	4011,6,c	;volatile
  3165  002346                     l4655:
  3166  002346  B41E               	btfsc	OpenUSART@config,2,c
  3167  002348  8EAC               	bsf	4012,7,c	;volatile
  3168  00234A  A61E               	btfss	OpenUSART@config,3,c
  3169  00234C  D002               	goto	l602
  3170  00234E  88AB               	bsf	4011,4,c	;volatile
  3171  002350  D001               	goto	l4663
  3172  002352                     l602:
  3173  002352  8AAB               	bsf	4011,5,c	;volatile
  3174  002354                     l4663:
  3175  002354  B81E               	btfsc	OpenUSART@config,4,c
  3176  002356  84AC               	bsf	4012,2,c	;volatile
  3177  002358  989E               	bcf	3998,4,c	;volatile
  3178  00235A  BA1E               	btfsc	OpenUSART@config,5,c
  3179  00235C  86AB               	bsf	4011,3,c	;volatile
  3180  00235E  AC1E               	btfss	OpenUSART@config,6,c
  3181  002360  D002               	goto	l606
  3182  002362  8A9D               	bsf	3997,5,c	;volatile
  3183  002364  D001               	goto	l607
  3184  002366                     l606:
  3185  002366  9A9D               	bcf	3997,5,c	;volatile
  3186  002368                     l607:
  3187  002368  9A9E               	bcf	3998,5,c	;volatile
  3188  00236A  AE1E               	btfss	OpenUSART@config,7,c
  3189  00236C  D002               	goto	l608
  3190  00236E  889D               	bsf	3997,4,c	;volatile
  3191  002370  D001               	goto	l609
  3192  002372                     l608:
  3193  002372  989D               	bcf	3997,4,c	;volatile
  3194  002374                     l609:
  3195  002374  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3196  002378  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3197  00237C  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3198  002380  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3199  002382  501C               	movf	??_OpenUSART+1,w,c
  3200  002384  6EB0               	movwf	4016,c	;volatile
  3201  002386  8AAC               	bsf	4012,5,c	;volatile
  3202  002388  8EAB               	bsf	4011,7,c	;volatile
  3203  00238A  9C94               	bcf	3988,6,c	;volatile
  3204  00238C  8E94               	bsf	3988,7,c	;volatile
  3205  00238E  B8AC               	btfsc	4012,4,c	;volatile
  3206  002390  BEAC               	btfsc	4012,7,c	;volatile
  3207  002392  D001               	goto	l611
  3208  002394  8C94               	bsf	3988,6,c	;volatile
  3209  002396                     l611:
  3210  002396  0012               	return	
  3211  002398                     __end_of_OpenUSART:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           indf0	equ	0xFEF
  3221                           postinc0	equ	0xFEE
  3222                           fsr0h	equ	0xFEA
  3223                           fsr0l	equ	0xFE9
  3224                           wreg	equ	0xFE8
  3225                           postinc1	equ	0xFE6
  3226                           postdec1	equ	0xFE5
  3227                           fsr1l	equ	0xFE1
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _getCNY70Value *****************
  3235 ;; Defined at:
  3236 ;;		line 3 in file "cny70.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2   24[COMRAM] int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3250 ;;      Params:         2       0       0       0       0       0       0       0       0
  3251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3253 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3254 ;;Total ram usage:        2 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    4
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_Comando_Tablet
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text15
  3265  0021DC                     __ptext15:
  3266                           	opt stack 0
  3267  0021DC                     _getCNY70Value:
  3268                           	opt stack 25
  3269                           
  3270                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  3271                           
  3272                           ;incstack = 0
  3273  0021DC  B081               	btfsc	3969,0,c	;volatile
  3274  0021DE  A281               	btfss	3969,1,c	;volatile
  3275  0021E0  D005               	goto	l433
  3276  0021E2  A481               	btfss	3969,2,c	;volatile
  3277  0021E4  A681               	btfss	3969,3,c	;volatile
  3278  0021E6  D002               	goto	l433
  3279  0021E8  B881               	btfsc	3969,4,c	;volatile
  3280  0021EA  D02F               	goto	l5447
  3281  0021EC                     l433:
  3282                           
  3283                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3284  0021EC  B081               	btfsc	3969,0,c	;volatile
  3285  0021EE  B281               	btfsc	3969,1,c	;volatile
  3286  0021F0  D008               	goto	l436
  3287  0021F2  B481               	btfsc	3969,2,c	;volatile
  3288  0021F4  A681               	btfss	3969,3,c	;volatile
  3289  0021F6  D005               	goto	l436
  3290  0021F8  A881               	btfss	3969,4,c	;volatile
  3291  0021FA  D003               	goto	l436
  3292                           
  3293                           ;cny70.c: 8: return -1;
  3294  0021FC  6819               	setf	?_getCNY70Value,c
  3295  0021FE  681A               	setf	?_getCNY70Value+1,c
  3296  002200  D028               	goto	l434
  3297  002202                     l436:
  3298                           
  3299                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3300  002202  A081               	btfss	3969,0,c	;volatile
  3301  002204  A281               	btfss	3969,1,c	;volatile
  3302  002206  D009               	goto	l438
  3303  002208  B481               	btfsc	3969,2,c	;volatile
  3304  00220A  A681               	btfss	3969,3,c	;volatile
  3305  00220C  D006               	goto	l438
  3306  00220E  A881               	btfss	3969,4,c	;volatile
  3307  002210  D004               	goto	l438
  3308                           
  3309                           ;cny70.c: 10: return -2;
  3310  002212  0EFF               	movlw	255
  3311  002214  6E1A               	movwf	?_getCNY70Value+1,c
  3312  002216  0EFE               	movlw	254
  3313  002218  D01B               	goto	L5
  3314  00221A                     l438:
  3315                           
  3316                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3317  00221A  B081               	btfsc	3969,0,c	;volatile
  3318  00221C  A281               	btfss	3969,1,c	;volatile
  3319  00221E  D009               	goto	l440
  3320  002220  B481               	btfsc	3969,2,c	;volatile
  3321  002222  B681               	btfsc	3969,3,c	;volatile
  3322  002224  D006               	goto	l440
  3323  002226  A881               	btfss	3969,4,c	;volatile
  3324  002228  D004               	goto	l440
  3325                           
  3326                           ;cny70.c: 12: return 1;
  3327  00222A  0E00               	movlw	0
  3328  00222C  6E1A               	movwf	?_getCNY70Value+1,c
  3329  00222E  0E01               	movlw	1
  3330  002230  D00F               	goto	L5
  3331  002232                     l440:
  3332                           
  3333                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  3334  002232  B081               	btfsc	3969,0,c	;volatile
  3335  002234  A281               	btfss	3969,1,c	;volatile
  3336  002236  D009               	goto	l5447
  3337  002238  B481               	btfsc	3969,2,c	;volatile
  3338  00223A  A681               	btfss	3969,3,c	;volatile
  3339  00223C  D006               	goto	l5447
  3340  00223E  B881               	btfsc	3969,4,c	;volatile
  3341  002240  D004               	goto	l5447
  3342                           
  3343                           ;cny70.c: 14: return 2;
  3344  002242  0E00               	movlw	0
  3345  002244  6E1A               	movwf	?_getCNY70Value+1,c
  3346  002246  0E02               	movlw	2
  3347  002248  D003               	goto	L5
  3348  00224A                     l5447:
  3349                           
  3350                           ;cny70.c: 15: else
  3351                           ;cny70.c: 16: return 0;
  3352  00224A  0E00               	movlw	0
  3353  00224C  6E1A               	movwf	?_getCNY70Value+1,c
  3354  00224E  0E00               	movlw	0
  3355  002250                     L5:
  3356  002250  6E19               	movwf	?_getCNY70Value,c
  3357  002252                     l434:
  3358  002252  0012               	return	
  3359  002254                     __end_of_getCNY70Value:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           indf0	equ	0xFEF
  3369                           postinc0	equ	0xFEE
  3370                           fsr0h	equ	0xFEA
  3371                           fsr0l	equ	0xFE9
  3372                           wreg	equ	0xFE8
  3373                           postinc1	equ	0xFE6
  3374                           postdec1	equ	0xFE5
  3375                           fsr1l	equ	0xFE1
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _clrBufferUSART *****************
  3383 ;; Defined at:
  3384 ;;		line 68 in file "Bluetooth.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  i               2   24[COMRAM] int 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0
  3399 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3401 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3402 ;;Total ram usage:        2 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    4
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_Inicializa_Driveby
  3409 ;;		_Comando_Tablet
  3410 ;;		_main
  3411 ;;		_CheckTX
  3412 ;;		_EstadoBluetooth
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text16
  3417  0026B0                     __ptext16:
  3418                           	opt stack 0
  3419  0026B0                     _clrBufferUSART:
  3420                           	opt stack 26
  3421                           
  3422                           ;Bluetooth.c: 69: int i;
  3423                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3424                           
  3425                           ;incstack = 0
  3426  0026B0  0E00               	movlw	0
  3427  0026B2  6E1A               	movwf	clrBufferUSART@i+1,c
  3428  0026B4  0E00               	movlw	0
  3429  0026B6  6E19               	movwf	clrBufferUSART@i,c
  3430  0026B8  501A               	movf	clrBufferUSART@i+1,w,c
  3431  0026BA  0A80               	xorlw	128
  3432  0026BC  0F80               	addlw	-128
  3433  0026BE  0E14               	movlw	20
  3434  0026C0  B4D8               	btfsc	status,2,c
  3435  0026C2  5C19               	subwf	clrBufferUSART@i,w,c
  3436  0026C4  B0D8               	btfsc	status,0,c
  3437  0026C6  D00F               	goto	l54
  3438                           
  3439                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3440  0026C8  0101               	movlb	1	; () banked
  3441  0026CA  0E28               	movlw	low _BluetoothDato
  3442  0026CC  2419               	addwf	clrBufferUSART@i,w,c
  3443  0026CE  6ED9               	movwf	fsr2l,c
  3444  0026D0  0101               	movlb	1	; () banked
  3445  0026D2  0E01               	movlw	high _BluetoothDato
  3446  0026D4  201A               	addwfc	clrBufferUSART@i+1,w,c
  3447  0026D6  6EDA               	movwf	fsr2h,c
  3448  0026D8  0E00               	movlw	0
  3449  0026DA  6EDF               	movwf	indf2,c
  3450                           
  3451                           ; BSR set to: 1
  3452                           ;Bluetooth.c: 72: cad = 0;
  3453  0026DC  0E00               	movlw	0
  3454  0026DE  6E3D               	movwf	_cad,c
  3455                           
  3456                           ; BSR set to: 1
  3457  0026E0  4A19               	infsnz	clrBufferUSART@i,f,c
  3458  0026E2  2A1A               	incf	clrBufferUSART@i+1,f,c
  3459  0026E4  D7E9               	goto	L6
  3460  0026E6                     l54:
  3461  0026E6  0012               	return	
  3462  0026E8                     __end_of_clrBufferUSART:
  3463                           	opt stack 0
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           indf0	equ	0xFEF
  3472                           postinc0	equ	0xFEE
  3473                           fsr0h	equ	0xFEA
  3474                           fsr0l	equ	0xFE9
  3475                           wreg	equ	0xFE8
  3476                           postinc1	equ	0xFE6
  3477                           postdec1	equ	0xFE5
  3478                           fsr1l	equ	0xFE1
  3479                           indf2	equ	0xFDF
  3480                           postinc2	equ	0xFDE
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _PWM_init2 *****************
  3486 ;; Defined at:
  3487 ;;		line 42 in file "pwm.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  period          1    wreg     unsigned char 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  period          1   27[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3501 ;;      Params:         0       0       0       0       0       0       0       0       0
  3502 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3504 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3505 ;;Total ram usage:        1 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    5
  3508 ;; This function calls:
  3509 ;;		_OpenPWM2
  3510 ;; This function is called by:
  3511 ;;		_Comando_Tablet
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text17
  3516  002892                     __ptext17:
  3517                           	opt stack 0
  3518  002892                     _PWM_init2:
  3519                           	opt stack 24
  3520                           
  3521                           ;incstack = 0
  3522                           ;PWM_init2@period stored from wreg
  3523  002892  6E1C               	movwf	PWM_init2@period,c
  3524                           
  3525                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3526  002894  0EFE               	movlw	254
  3527  002896  6E47               	movwf	_Timer2Config,c
  3528                           
  3529                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3530  002898  5047               	movf	_Timer2Config,w,c
  3531  00289A  0BFB               	andlw	251
  3532  00289C  6ECA               	movwf	4042,c	;volatile
  3533                           
  3534                           ;pwm.c: 47: TMR2 = 0;
  3535  00289E  0E00               	movlw	0
  3536  0028A0  6ECC               	movwf	4044,c	;volatile
  3537                           
  3538                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3539  0028A2  929E               	bcf	3998,1,c	;volatile
  3540                           
  3541                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3542  0028A4  929D               	bcf	3997,1,c	;volatile
  3543                           
  3544                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3545  0028A6  84CA               	bsf	4042,2,c	;volatile
  3546                           
  3547                           ;pwm.c: 51: OpenPWM2(period);
  3548  0028A8  501C               	movf	PWM_init2@period,w,c
  3549  0028AA  ECE4  F012         	call	_OpenPWM2
  3550                           
  3551                           ;pwm.c: 53: return;
  3552  0028AE  0012               	return	
  3553  0028B0                     __end_of_PWM_init2:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           intcon	equ	0xFF2
  3562                           indf0	equ	0xFEF
  3563                           postinc0	equ	0xFEE
  3564                           fsr0h	equ	0xFEA
  3565                           fsr0l	equ	0xFE9
  3566                           wreg	equ	0xFE8
  3567                           postinc1	equ	0xFE6
  3568                           postdec1	equ	0xFE5
  3569                           fsr1l	equ	0xFE1
  3570                           indf2	equ	0xFDF
  3571                           postinc2	equ	0xFDE
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function _OpenPWM2 *****************
  3577 ;; Defined at:
  3578 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  period          1    wreg     unsigned char 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  period          1   25[COMRAM] unsigned char 
  3583 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3584 ;;  pmmode          1    0        unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0
  3595 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3596 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3597 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3598 ;;Total ram usage:        3 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    4
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_PWM_init2
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text18
  3609  0025C8                     __ptext18:
  3610                           	opt stack 0
  3611  0025C8                     _OpenPWM2:
  3612                           	opt stack 24
  3613                           
  3614                           ;incstack = 0
  3615                           ;OpenPWM2@period stored from wreg
  3616  0025C8  6E1A               	movwf	OpenPWM2@period,c
  3617  0025CA  0E0C               	movlw	12
  3618  0025CC  6EBA               	movwf	4026,c	;volatile
  3619  0025CE  0E05               	movlw	5
  3620  0025D0  6EF6               	movwf	tblptrl,c
  3621  0025D2                     	if	1	;There is more than 1 active tblptr byte
  3622  0025D2  0E00               	movlw	0
  3623  0025D4  6EF7               	movwf	tblptrh,c
  3624  0025D6                     	endif
  3625  0025D6                     	if	1	;There are 3 active tblptr bytes
  3626  0025D6  0E30               	movlw	48
  3627  0025D8  6EF8               	movwf	tblptru,c
  3628  0025DA                     	endif
  3629  0025DA  0008               	tblrd		*
  3630  0025DC  CFF5 F019          	movff	tablat,??_OpenPWM2
  3631  0025E0  A019               	btfss	??_OpenPWM2,0,c
  3632  0025E2  D002               	goto	l5271
  3633  0025E4  681B               	setf	OpenPWM2@ccp2mx,c
  3634  0025E6  D002               	goto	l568
  3635  0025E8                     l5271:
  3636  0025E8  0E00               	movlw	0
  3637  0025EA  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3638  0025EC                     l568:
  3639  0025EC  501B               	movf	OpenPWM2@ccp2mx,w,c
  3640  0025EE  B4D8               	btfsc	status,2,c
  3641  0025F0  D002               	goto	l569
  3642  0025F2  9294               	bcf	3988,1,c	;volatile
  3643  0025F4  D001               	goto	l570
  3644  0025F6                     l569:
  3645  0025F6  9693               	bcf	3987,3,c	;volatile
  3646  0025F8                     l570:
  3647  0025F8  94CA               	bcf	4042,2,c	;volatile
  3648  0025FA  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3649  0025FE  84CA               	bsf	4042,2,c	;volatile
  3650  002600  0012               	return	
  3651  002602                     __end_of_OpenPWM2:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           prodh	equ	0xFF4
  3658                           prodl	equ	0xFF3
  3659                           intcon	equ	0xFF2
  3660                           indf0	equ	0xFEF
  3661                           postinc0	equ	0xFEE
  3662                           fsr0h	equ	0xFEA
  3663                           fsr0l	equ	0xFE9
  3664                           wreg	equ	0xFE8
  3665                           postinc1	equ	0xFE6
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           fsr2h	equ	0xFDA
  3671                           fsr2l	equ	0xFD9
  3672                           status	equ	0xFD8
  3673                           
  3674 ;; *************** function _PWM_init1 *****************
  3675 ;; Defined at:
  3676 ;;		line 20 in file "pwm.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  period          1    wreg     unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  period          1   25[COMRAM] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;		None               void
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3690 ;;      Params:         0       0       0       0       0       0       0       0       0
  3691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3693 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3694 ;;Total ram usage:        1 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    5
  3697 ;; This function calls:
  3698 ;;		_OpenPWM1
  3699 ;; This function is called by:
  3700 ;;		_Comando_Tablet
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text19
  3705  0028B0                     __ptext19:
  3706                           	opt stack 0
  3707  0028B0                     _PWM_init1:
  3708                           	opt stack 24
  3709                           
  3710                           ;incstack = 0
  3711                           ;PWM_init1@period stored from wreg
  3712  0028B0  6E1A               	movwf	PWM_init1@period,c
  3713                           
  3714                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3715  0028B2  0EFE               	movlw	254
  3716  0028B4  6E47               	movwf	_Timer2Config,c
  3717                           
  3718                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3719  0028B6  5047               	movf	_Timer2Config,w,c
  3720  0028B8  0BFB               	andlw	251
  3721  0028BA  6ECA               	movwf	4042,c	;volatile
  3722                           
  3723                           ;pwm.c: 25: TMR2 = 0;
  3724  0028BC  0E00               	movlw	0
  3725  0028BE  6ECC               	movwf	4044,c	;volatile
  3726                           
  3727                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3728  0028C0  929E               	bcf	3998,1,c	;volatile
  3729                           
  3730                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3731  0028C2  929D               	bcf	3997,1,c	;volatile
  3732                           
  3733                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3734  0028C4  84CA               	bsf	4042,2,c	;volatile
  3735                           
  3736                           ;pwm.c: 29: OpenPWM1(period);
  3737  0028C6  501A               	movf	PWM_init1@period,w,c
  3738  0028C8  EC94  F014         	call	_OpenPWM1
  3739                           
  3740                           ;pwm.c: 31: return;
  3741  0028CC  0012               	return	
  3742  0028CE                     __end_of_PWM_init1:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           indf0	equ	0xFEF
  3752                           postinc0	equ	0xFEE
  3753                           fsr0h	equ	0xFEA
  3754                           fsr0l	equ	0xFE9
  3755                           wreg	equ	0xFE8
  3756                           postinc1	equ	0xFE6
  3757                           postdec1	equ	0xFE5
  3758                           fsr1l	equ	0xFE1
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           fsr2h	equ	0xFDA
  3762                           fsr2l	equ	0xFD9
  3763                           status	equ	0xFD8
  3764                           
  3765 ;; *************** function _OpenPWM1 *****************
  3766 ;; Defined at:
  3767 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  period          1    wreg     unsigned char 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  period          1   24[COMRAM] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;		None               void
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0
  3782 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3784 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3785 ;;Total ram usage:        1 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    4
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		_PWM_init1
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text20
  3796  002928                     __ptext20:
  3797                           	opt stack 0
  3798  002928                     _OpenPWM1:
  3799                           	opt stack 24
  3800                           
  3801                           ;incstack = 0
  3802                           ;OpenPWM1@period stored from wreg
  3803  002928  6E19               	movwf	OpenPWM1@period,c
  3804  00292A  0E0C               	movlw	12
  3805  00292C  12BD               	iorwf	4029,f,c	;volatile
  3806  00292E  9494               	bcf	3988,2,c	;volatile
  3807  002930  94CA               	bcf	4042,2,c	;volatile
  3808  002932  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3809  002936  84CA               	bsf	4042,2,c	;volatile
  3810  002938  0012               	return	
  3811  00293A                     __end_of_OpenPWM1:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           tblptrh	equ	0xFF7
  3815                           tblptrl	equ	0xFF6
  3816                           tablat	equ	0xFF5
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           indf0	equ	0xFEF
  3821                           postinc0	equ	0xFEE
  3822                           fsr0h	equ	0xFEA
  3823                           fsr0l	equ	0xFE9
  3824                           wreg	equ	0xFE8
  3825                           postinc1	equ	0xFE6
  3826                           postdec1	equ	0xFE5
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _PWM_DutyCycle2 *****************
  3835 ;; Defined at:
  3836 ;;		line 55 in file "pwm.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  percentageDu    1    wreg     unsigned char 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3841 ;;  DC              2   41[BANK0 ] unsigned int 
  3842 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;		None               void
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0
  3853 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3854 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3855 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3856 ;;Total ram usage:        9 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    6
  3859 ;; This function calls:
  3860 ;;		_SetDCPWM2
  3861 ;;		___ftmul
  3862 ;;		___fttol
  3863 ;;		___lbtoft
  3864 ;; This function is called by:
  3865 ;;		_Comando_Tablet
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text21
  3870  001FF0                     __ptext21:
  3871                           	opt stack 0
  3872  001FF0                     _PWM_DutyCycle2:
  3873                           	opt stack 23
  3874                           
  3875                           ;incstack = 0
  3876                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3877  001FF0  0100               	movlb	0	; () banked
  3878  001FF2  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3882  001FF4  0E00               	movlw	0
  3883  001FF6  0100               	movlb	0	; () banked
  3884  001FF8  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3885  001FFA  0E00               	movlw	0
  3886  001FFC  0100               	movlb	0	; () banked
  3887  001FFE  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3888  002000  0E00               	movlw	0
  3889  002002  0100               	movlb	0	; () banked
  3890  002004  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3891  002006  0E00               	movlw	0
  3892  002008  0100               	movlb	0	; () banked
  3893  00200A  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3897  00200C  0EAE               	movlw	174
  3898  00200E  0100               	movlb	0	; () banked
  3899  002010  6F63               	movwf	___ftmul@f2& (0+255),b
  3900  002012  0E23               	movlw	35
  3901  002014  0100               	movlb	0	; () banked
  3902  002016  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3903  002018  0E41               	movlw	65
  3904  00201A  0100               	movlb	0	; () banked
  3905  00201C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3906  00201E  0100               	movlb	0	; () banked
  3907  002020  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3908  002022  EC17  F014         	call	___lbtoft
  3909  002026  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3910  00202A  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3911  00202E  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3912  002032  EC6F  F009         	call	___ftmul	;wreg free
  3913  002036  C060  F073         	movff	?___ftmul,___fttol@f1
  3914  00203A  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3915  00203E  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3916  002042  EC1B  F00A         	call	___fttol	;wreg free
  3917  002046  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3918  00204A  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3919  00204E  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3920  002052  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3921  002056  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3922  00205A  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3923                           
  3924                           ;pwm.c: 60: SetDCPWM2(DC);
  3925  00205E  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3926  002062  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3927  002066  EC01  F013         	call	_SetDCPWM2	;wreg free
  3928                           
  3929                           ;pwm.c: 61: return;
  3930  00206A  0012               	return	
  3931  00206C                     __end_of_PWM_DutyCycle2:
  3932                           	opt stack 0
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon	equ	0xFF2
  3940                           indf0	equ	0xFEF
  3941                           postinc0	equ	0xFEE
  3942                           fsr0h	equ	0xFEA
  3943                           fsr0l	equ	0xFE9
  3944                           wreg	equ	0xFE8
  3945                           postinc1	equ	0xFE6
  3946                           postdec1	equ	0xFE5
  3947                           fsr1l	equ	0xFE1
  3948                           indf2	equ	0xFDF
  3949                           postinc2	equ	0xFDE
  3950                           fsr2h	equ	0xFDA
  3951                           fsr2l	equ	0xFD9
  3952                           status	equ	0xFD8
  3953                           
  3954 ;; *************** function _SetDCPWM2 *****************
  3955 ;; Defined at:
  3956 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3961 ;; Return value:  Size  Location     Type
  3962 ;;		None               void
  3963 ;; Registers used:
  3964 ;;		wreg, status,2, status,0
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3970 ;;      Params:         2       0       0       0       0       0       0       0       0
  3971 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3972 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3973 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3974 ;;Total ram usage:        6 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    4
  3977 ;; This function calls:
  3978 ;;		Nothing
  3979 ;; This function is called by:
  3980 ;;		_PWM_DutyCycle2
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text22
  3985  002602                     __ptext22:
  3986                           	opt stack 0
  3987  002602                     _SetDCPWM2:
  3988                           	opt stack 24
  3989                           
  3990                           ;incstack = 0
  3991  002602  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  3992  002606  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  3993  00260A  0E06               	movlw	6
  3994  00260C                     u5905:
  3995  00260C  90D8               	bcf	status,0,c
  3996  00260E  361B               	rlcf	??_SetDCPWM2,f,c
  3997  002610  361C               	rlcf	??_SetDCPWM2+1,f,c
  3998  002612  2EE8               	decfsz	wreg,f,c
  3999  002614  D7FB               	goto	u5905
  4000  002616  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4001  00261A  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4002  00261E  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4003  002622  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4004  002626  90D8               	bcf	status,0,c
  4005  002628  321B               	rrcf	??_SetDCPWM2,f,c
  4006  00262A  90D8               	bcf	status,0,c
  4007  00262C  321B               	rrcf	??_SetDCPWM2,f,c
  4008  00262E  0E30               	movlw	48
  4009  002630  161B               	andwf	??_SetDCPWM2,f,c
  4010  002632  50BA               	movf	4026,w,c	;volatile
  4011  002634  0BCF               	andlw	207
  4012  002636  101B               	iorwf	??_SetDCPWM2,w,c
  4013  002638  6EBA               	movwf	4026,c	;volatile
  4014  00263A  0012               	return	
  4015  00263C                     __end_of_SetDCPWM2:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           indf0	equ	0xFEF
  4025                           postinc0	equ	0xFEE
  4026                           fsr0h	equ	0xFEA
  4027                           fsr0l	equ	0xFE9
  4028                           wreg	equ	0xFE8
  4029                           postinc1	equ	0xFE6
  4030                           postdec1	equ	0xFE5
  4031                           fsr1l	equ	0xFE1
  4032                           indf2	equ	0xFDF
  4033                           postinc2	equ	0xFDE
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _PWM_DutyCycle1 *****************
  4039 ;; Defined at:
  4040 ;;		line 33 in file "pwm.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  percentageDu    1    wreg     unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  4045 ;;  DC              2   41[BANK0 ] unsigned int 
  4046 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0
  4057 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4058 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4059 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4060 ;;Total ram usage:        9 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    6
  4063 ;; This function calls:
  4064 ;;		_SetDCPWM1
  4065 ;;		___ftmul
  4066 ;;		___fttol
  4067 ;;		___lbtoft
  4068 ;; This function is called by:
  4069 ;;		_Comando_Tablet
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text23
  4074  00206C                     __ptext23:
  4075                           	opt stack 0
  4076  00206C                     _PWM_DutyCycle1:
  4077                           	opt stack 23
  4078                           
  4079                           ;incstack = 0
  4080                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4081  00206C  0100               	movlb	0	; () banked
  4082  00206E  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4086  002070  0E00               	movlw	0
  4087  002072  0100               	movlb	0	; () banked
  4088  002074  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4089  002076  0E00               	movlw	0
  4090  002078  0100               	movlb	0	; () banked
  4091  00207A  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4092  00207C  0E00               	movlw	0
  4093  00207E  0100               	movlb	0	; () banked
  4094  002080  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4095  002082  0E00               	movlw	0
  4096  002084  0100               	movlb	0	; () banked
  4097  002086  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4101  002088  0EAE               	movlw	174
  4102  00208A  0100               	movlb	0	; () banked
  4103  00208C  6F63               	movwf	___ftmul@f2& (0+255),b
  4104  00208E  0E23               	movlw	35
  4105  002090  0100               	movlb	0	; () banked
  4106  002092  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4107  002094  0E41               	movlw	65
  4108  002096  0100               	movlb	0	; () banked
  4109  002098  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4110  00209A  0100               	movlb	0	; () banked
  4111  00209C  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4112  00209E  EC17  F014         	call	___lbtoft
  4113  0020A2  C021  F060         	movff	?___lbtoft,___ftmul@f1
  4114  0020A6  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  4115  0020AA  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  4116  0020AE  EC6F  F009         	call	___ftmul	;wreg free
  4117  0020B2  C060  F073         	movff	?___ftmul,___fttol@f1
  4118  0020B6  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  4119  0020BA  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  4120  0020BE  EC1B  F00A         	call	___fttol	;wreg free
  4121  0020C2  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  4122  0020C6  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4123  0020CA  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4124  0020CE  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4125  0020D2  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4126  0020D6  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4127                           
  4128                           ;pwm.c: 38: SetDCPWM1(DC);
  4129  0020DA  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4130  0020DE  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4131  0020E2  EC1E  F013         	call	_SetDCPWM1	;wreg free
  4132                           
  4133                           ;pwm.c: 39: return;
  4134  0020E6  0012               	return	
  4135  0020E8                     __end_of_PWM_DutyCycle1:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           prodh	equ	0xFF4
  4142                           prodl	equ	0xFF3
  4143                           intcon	equ	0xFF2
  4144                           indf0	equ	0xFEF
  4145                           postinc0	equ	0xFEE
  4146                           fsr0h	equ	0xFEA
  4147                           fsr0l	equ	0xFE9
  4148                           wreg	equ	0xFE8
  4149                           postinc1	equ	0xFE6
  4150                           postdec1	equ	0xFE5
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           fsr2h	equ	0xFDA
  4155                           fsr2l	equ	0xFD9
  4156                           status	equ	0xFD8
  4157                           
  4158 ;; *************** function ___lbtoft *****************
  4159 ;; Defined at:
  4160 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  c               1    wreg     unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  c               1   35[COMRAM] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  3   32[COMRAM] float 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4174 ;;      Params:         3       0       0       0       0       0       0       0       0
  4175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4177 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4178 ;;Total ram usage:        4 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    5
  4181 ;; This function calls:
  4182 ;;		___ftpack
  4183 ;; This function is called by:
  4184 ;;		_PWM_DutyCycle1
  4185 ;;		_PWM_DutyCycle2
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text24
  4190  00282E                     __ptext24:
  4191                           	opt stack 0
  4192  00282E                     ___lbtoft:
  4193                           	opt stack 23
  4194                           
  4195                           ;incstack = 0
  4196                           ;___lbtoft@c stored from wreg
  4197  00282E  6E24               	movwf	___lbtoft@c,c
  4198  002830  5024               	movf	___lbtoft@c,w,c
  4199  002832  6E19               	movwf	___ftpack@arg,c
  4200  002834  6A1A               	clrf	___ftpack@arg+1,c
  4201  002836  6A1B               	clrf	___ftpack@arg+2,c
  4202  002838  0E8E               	movlw	142
  4203  00283A  6E1C               	movwf	___ftpack@exp,c
  4204  00283C  0E00               	movlw	0
  4205  00283E  6E1D               	movwf	___ftpack@sign,c
  4206  002840  EC56  F00D         	call	___ftpack	;wreg free
  4207  002844  C019  F021         	movff	?___ftpack,?___lbtoft
  4208  002848  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4209  00284C  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4210  002850  0012               	return	
  4211  002852                     __end_of___lbtoft:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           intcon	equ	0xFF2
  4220                           indf0	equ	0xFEF
  4221                           postinc0	equ	0xFEE
  4222                           fsr0h	equ	0xFEA
  4223                           fsr0l	equ	0xFE9
  4224                           wreg	equ	0xFE8
  4225                           postinc1	equ	0xFE6
  4226                           postdec1	equ	0xFE5
  4227                           fsr1l	equ	0xFE1
  4228                           indf2	equ	0xFDF
  4229                           postinc2	equ	0xFDE
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _SetDCPWM1 *****************
  4235 ;; Defined at:
  4236 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4241 ;; Return value:  Size  Location     Type
  4242 ;;		None               void
  4243 ;; Registers used:
  4244 ;;		wreg, status,2, status,0
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4250 ;;      Params:         2       0       0       0       0       0       0       0       0
  4251 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4252 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4253 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4254 ;;Total ram usage:        6 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    4
  4257 ;; This function calls:
  4258 ;;		Nothing
  4259 ;; This function is called by:
  4260 ;;		_PWM_DutyCycle1
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text25
  4265  00263C                     __ptext25:
  4266                           	opt stack 0
  4267  00263C                     _SetDCPWM1:
  4268                           	opt stack 24
  4269                           
  4270                           ;incstack = 0
  4271  00263C  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4272  002640  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4273  002644  0E06               	movlw	6
  4274  002646                     u5875:
  4275  002646  90D8               	bcf	status,0,c
  4276  002648  361B               	rlcf	??_SetDCPWM1,f,c
  4277  00264A  361C               	rlcf	??_SetDCPWM1+1,f,c
  4278  00264C  2EE8               	decfsz	wreg,f,c
  4279  00264E  D7FB               	goto	u5875
  4280  002650  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4281  002654  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4282  002658  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4283  00265C  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4284  002660  90D8               	bcf	status,0,c
  4285  002662  321B               	rrcf	??_SetDCPWM1,f,c
  4286  002664  90D8               	bcf	status,0,c
  4287  002666  321B               	rrcf	??_SetDCPWM1,f,c
  4288  002668  0E30               	movlw	48
  4289  00266A  161B               	andwf	??_SetDCPWM1,f,c
  4290  00266C  50BD               	movf	4029,w,c	;volatile
  4291  00266E  0BCF               	andlw	207
  4292  002670  101B               	iorwf	??_SetDCPWM1,w,c
  4293  002672  6EBD               	movwf	4029,c	;volatile
  4294  002674  0012               	return	
  4295  002676                     __end_of_SetDCPWM1:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           intcon	equ	0xFF2
  4304                           indf0	equ	0xFEF
  4305                           postinc0	equ	0xFEE
  4306                           fsr0h	equ	0xFEA
  4307                           fsr0l	equ	0xFE9
  4308                           wreg	equ	0xFE8
  4309                           postinc1	equ	0xFE6
  4310                           postdec1	equ	0xFE5
  4311                           fsr1l	equ	0xFE1
  4312                           indf2	equ	0xFDF
  4313                           postinc2	equ	0xFDE
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8
  4317                           
  4318 ;; *************** function _Lcd_Write_Integer *****************
  4319 ;; Defined at:
  4320 ;;		line 113 in file "lcd.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  a               2   88[BANK0 ] int 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  s              20   90[BANK0 ] unsigned char [20]
  4325 ;; Return value:  Size  Location     Type
  4326 ;;		None               void
  4327 ;; Registers used:
  4328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4334 ;;      Params:         0       2       0       0       0       0       0       0       0
  4335 ;;      Locals:         0      20       0       0       0       0       0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4337 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4338 ;;Total ram usage:       22 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    8
  4341 ;; This function calls:
  4342 ;;		_Lcd_Write_String
  4343 ;;		_sprintf
  4344 ;; This function is called by:
  4345 ;;		_Comando_Tablet
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text26
  4350  002676                     __ptext26:
  4351                           	opt stack 0
  4352  002676                     _Lcd_Write_Integer:
  4353                           	opt stack 21
  4354                           
  4355                           ;lcd.c: 114: unsigned char s[20];
  4356                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4357                           
  4358                           ;incstack = 0
  4359  002676  0100               	movlb	0	; () banked
  4360  002678  0E00               	movlw	high Lcd_Write_Integer@s
  4361  00267A  0100               	movlb	0	; () banked
  4362  00267C  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4363  00267E  0100               	movlb	0	; () banked
  4364  002680  0EBA               	movlw	low Lcd_Write_Integer@s
  4365  002682  0100               	movlb	0	; () banked
  4366  002684  6F88               	movwf	sprintf@sp& (0+255),b
  4367  002686  0E7F               	movlw	high STR_18
  4368  002688  0100               	movlb	0	; () banked
  4369  00268A  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4370  00268C  0EAC               	movlw	low STR_18
  4371  00268E  0100               	movlb	0	; () banked
  4372  002690  6F8A               	movwf	sprintf@f& (0+255),b
  4373  002692  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4374  002696  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4375  00269A  EC0E  F000         	call	_sprintf	;wreg free
  4376                           
  4377                           ;lcd.c: 117: Lcd_Write_String(s);
  4378  00269E  0100               	movlb	0	; () banked
  4379  0026A0  0E00               	movlw	high Lcd_Write_Integer@s
  4380  0026A2  6E1E               	movwf	Lcd_Write_String@a+1,c
  4381  0026A4  0100               	movlb	0	; () banked
  4382  0026A6  0EBA               	movlw	low Lcd_Write_Integer@s
  4383  0026A8  6E1D               	movwf	Lcd_Write_String@a,c
  4384  0026AA  EC74  F010         	call	_Lcd_Write_String	;wreg free
  4385  0026AE  0012               	return	
  4386  0026B0                     __end_of_Lcd_Write_Integer:
  4387                           	opt stack 0
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           prodh	equ	0xFF4
  4393                           prodl	equ	0xFF3
  4394                           intcon	equ	0xFF2
  4395                           indf0	equ	0xFEF
  4396                           postinc0	equ	0xFEE
  4397                           fsr0h	equ	0xFEA
  4398                           fsr0l	equ	0xFE9
  4399                           wreg	equ	0xFE8
  4400                           postinc1	equ	0xFE6
  4401                           postdec1	equ	0xFE5
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _sprintf *****************
  4410 ;; Defined at:
  4411 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4414 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4415 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4416 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  vd              4   60[BANK0 ] unsigned long 
  4419 ;;  vd              4   64[BANK0 ] unsigned long 
  4420 ;;  _val            5   77[BANK0 ] struct .
  4421 ;;  fval            3   84[BANK0 ] struct .
  4422 ;;  integ           3   72[BANK0 ] struct .
  4423 ;;  ival            3    0        struct .
  4424 ;;  exp             2   82[BANK0 ] int 
  4425 ;;  prec            2   75[BANK0 ] int 
  4426 ;;  flag            2   70[BANK0 ] unsigned short 
  4427 ;;  ap              2   68[BANK0 ] PTR void [1]
  4428 ;;		 -> ?_sprintf(2), 
  4429 ;;  width           2    0        int 
  4430 ;;  c               1   87[BANK0 ] char 
  4431 ;;  d               1    0        unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  2   40[BANK0 ] int 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4441 ;;      Params:         0       7       0       0       0       0       0       0       0
  4442 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4443 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4444 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4445 ;;Total ram usage:       48 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    7
  4448 ;; This function calls:
  4449 ;;		___awdiv
  4450 ;;		___ftadd
  4451 ;;		___ftge
  4452 ;;		___ftmul
  4453 ;;		___ftneg
  4454 ;;		___ftsub
  4455 ;;		___fttol
  4456 ;;		___lldiv
  4457 ;;		___llmod
  4458 ;;		___lltoft
  4459 ;;		___wmul
  4460 ;;		__div_to_l_
  4461 ;;		__tdiv_to_l_
  4462 ;;		_fround
  4463 ;;		_scale
  4464 ;; This function is called by:
  4465 ;;		_putcBluetoothInt
  4466 ;;		_Lcd_Write_Integer
  4467 ;;		_Lcd_Write_Float
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text27
  4472  00001C                     __ptext27:
  4473                           	opt stack 0
  4474  00001C                     _sprintf:
  4475                           	opt stack 21
  4476                           
  4477                           ;doprnt.c: 494: va_list ap;
  4478                           ;doprnt.c: 499: signed char c;
  4479                           ;doprnt.c: 501: int width;
  4480                           ;doprnt.c: 504: int prec;
  4481                           ;doprnt.c: 508: unsigned short flag;
  4482                           ;doprnt.c: 515: char d;
  4483                           ;doprnt.c: 516: double fval, integ;
  4484                           ;doprnt.c: 517: int exp;
  4485                           ;doprnt.c: 518: double ival;
  4486                           ;doprnt.c: 519: union {
  4487                           ;doprnt.c: 520: unsigned long _val;
  4488                           ;doprnt.c: 521: struct {
  4489                           ;doprnt.c: 522: const char * _cp;
  4490                           ;doprnt.c: 523: unsigned _len;
  4491                           ;doprnt.c: 524: } _str;
  4492                           ;doprnt.c: 525: } _val;
  4493                           ;doprnt.c: 542: *ap = __va_start();
  4494                           
  4495                           ;incstack = 0
  4496  00001C  0100               	movlb	0	; () banked
  4497  00001E  0E00               	movlw	high (?_sprintf+4)
  4498  000020  0100               	movlb	0	; () banked
  4499  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4500  000024  0100               	movlb	0	; () banked
  4501  000026  0E8C               	movlw	low (?_sprintf+4)
  4502  000028  0100               	movlb	0	; () banked
  4503  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4504                           
  4505                           ;doprnt.c: 545: while(c = *f++) {
  4506  00002C  EF87  F004         	goto	l5227
  4507  000030                     l5025:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 547: if(c != '%')
  4511  000030  0100               	movlb	0	; () banked
  4512  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4513  000034  0A25               	xorlw	37
  4514  000036  B4D8               	btfsc	status,2,c
  4515  000038  D00C               	goto	l5031
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;doprnt.c: 549: {
  4519                           ;doprnt.c: 550: ((*sp++ = (c)));
  4520  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4521  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4522  000042  0100               	movlb	0	; () banked
  4523  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4524                           
  4525                           ; BSR set to: 0
  4526  000048  0100               	movlb	0	; () banked
  4527  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4528  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4529                           
  4530                           ;doprnt.c: 551: continue;
  4531  00004E  EF87  F004         	goto	l5227
  4532  000052                     l5031:
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 552: }
  4536                           ;doprnt.c: 557: flag = 0;
  4537  000052  0E00               	movlw	0
  4538  000054  0100               	movlb	0	; () banked
  4539  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4540  000058  0E00               	movlw	0
  4541  00005A  0100               	movlb	0	; () banked
  4542  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4543                           
  4544                           ;doprnt.c: 644: switch(c = *f++) {
  4545  00005E  D003               	goto	l5037
  4546  000060                     l5033:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;doprnt.c: 672: flag |= 0x400;
  4550  000060  0100               	movlb	0	; () banked
  4551  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4552                           
  4553                           ;doprnt.c: 673: break;
  4554  000064  D01E               	goto	l5039
  4555  000066                     l5037:
  4556                           
  4557                           ; BSR set to: 0
  4558  000066  0100               	movlb	0	; () banked
  4559  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4560  00006C  0100               	movlb	0	; () banked
  4561  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4562  000072  0100               	movlb	0	; () banked
  4563  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4564  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4565  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4566  000078  6AF8               	clrf	tblptru,c
  4567  00007A                     	endif
  4568  00007A                     	if	0	;tblptru may be non-zero
  4569  00007A                     	endif
  4570  00007A  0008               	tblrd		*
  4571  00007C  0100               	movlb	0	; () banked
  4572  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4573  000082  0100               	movlb	0	; () banked
  4574  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4575                           
  4576                           ; Switch size 1, requested type "space"
  4577                           ; Number of cases is 4, Range of values is 0 to 105
  4578                           ; switch strategies available:
  4579                           ; Name         Instructions Cycles
  4580                           ; simple_byte           13     7 (average)
  4581                           ;	Chosen strategy is simple_byte
  4582  000086  0A00               	xorlw	0	; case 0
  4583  000088  B4D8               	btfsc	status,2,c
  4584  00008A  EF99  F004         	goto	l5229
  4585  00008E  0A64               	xorlw	100	; case 100
  4586  000090  B4D8               	btfsc	status,2,c
  4587  000092  D007               	goto	l5039
  4588  000094  0A02               	xorlw	2	; case 102
  4589  000096  B4D8               	btfsc	status,2,c
  4590  000098  D7E3               	goto	l5033
  4591  00009A  0A0F               	xorlw	15	; case 105
  4592  00009C  A4D8               	btfss	status,2,c
  4593  00009E  EF87  F004         	goto	l5227
  4594  0000A2                     l5039:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 834: if(flag & (0x700)) {
  4598  0000A2  0E07               	movlw	7
  4599  0000A4  0100               	movlb	0	; () banked
  4600  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4601  0000A8  B4D8               	btfsc	status,2,c
  4602  0000AA  D348               	goto	l5187
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;doprnt.c: 838: prec = 6;
  4606  0000AC  0E00               	movlw	0
  4607  0000AE  0100               	movlb	0	; () banked
  4608  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4609  0000B2  0E06               	movlw	6
  4610  0000B4  0100               	movlb	0	; () banked
  4611  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4615  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4616  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4617  0000C0  0100               	movlb	0	; () banked
  4618  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4619  0000C6  0100               	movlb	0	; () banked
  4620  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4621  0000CC  0100               	movlb	0	; () banked
  4622  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4623                           
  4624                           ; BSR set to: 0
  4625  0000D2  0E03               	movlw	3
  4626  0000D4  0100               	movlb	0	; () banked
  4627  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4628  0000D8  0E00               	movlw	0
  4629  0000DA  0100               	movlb	0	; () banked
  4630  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;doprnt.c: 840: if(fval < 0.0) {
  4634  0000DE  0100               	movlb	0	; () banked
  4635  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4636  0000E2  0A80               	xorlw	128
  4637  0000E4  0F80               	addlw	128
  4638  0000E6  E107               	bnz	u5555
  4639  0000E8  0E00               	movlw	0
  4640  0000EA  0100               	movlb	0	; () banked
  4641  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4642  0000EE  E103               	bnz	u5555
  4643  0000F0  0E00               	movlw	0
  4644  0000F2  0100               	movlb	0	; () banked
  4645  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4646  0000F6                     u5555:
  4647  0000F6  B0D8               	btfsc	status,0,c
  4648  0000F8  D011               	goto	l5053
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;doprnt.c: 841: fval = -fval;
  4652  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4653  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4654  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4655  000106  EC04  F014         	call	___ftneg	;wreg free
  4656  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4657  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4658  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4659                           
  4660                           ;doprnt.c: 842: flag |= 0x03;
  4661  000116  0E03               	movlw	3
  4662  000118  0100               	movlb	0	; () banked
  4663  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4664  00011C                     l5053:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;doprnt.c: 843: }
  4668                           ;doprnt.c: 844: exp = 0;
  4669  00011C  0E00               	movlw	0
  4670  00011E  0100               	movlb	0	; () banked
  4671  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4672  000122  0E00               	movlw	0
  4673  000124  0100               	movlb	0	; () banked
  4674  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 845: if( fval!=0) {
  4678  000128  0E7F               	movlw	127
  4679  00012A  0100               	movlb	0	; () banked
  4680  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4681  00012E  0100               	movlb	0	; () banked
  4682  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4683  000132  0100               	movlb	0	; () banked
  4684  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4685  000136  B4D8               	btfsc	status,2,c
  4686  000138  D09C               	goto	l5081
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4690  00013A  0E82               	movlw	130
  4691  00013C  0100               	movlb	0	; () banked
  4692  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4693  000140  0EFF               	movlw	255
  4694  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4695  000144  0100               	movlb	0	; () banked
  4696  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4697  00014A  0100               	movlb	0	; () banked
  4698  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4699  000150  0100               	movlb	0	; () banked
  4700  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4701  000156  0100               	movlb	0	; () banked
  4702  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4703  00015C  0E10               	movlw	16
  4704  00015E  D006               	goto	u5570
  4705  000160                     u5575:
  4706  000160  0100               	movlb	0	; () banked
  4707  000162  90D8               	bcf	status,0,c
  4708  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4709  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4710  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4711  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4712  00016C                     u5570:
  4713  00016C  2EE8               	decfsz	wreg,f,c
  4714  00016E  D7F8               	goto	u5575
  4715  000170  0100               	movlb	0	; () banked
  4716  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4717  000174  0100               	movlb	0	; () banked
  4718  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4719  000178  0100               	movlb	0	; () banked
  4720  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4721  00017C  0E00               	movlw	0
  4722  00017E  0100               	movlb	0	; () banked
  4723  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4724  000182  0100               	movlb	0	; () banked
  4725  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;doprnt.c: 847: exp--;
  4729  000186  0100               	movlb	0	; () banked
  4730  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4731  00018A  A0D8               	btfss	status,0,c
  4732  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 848: exp *= 3;
  4736  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4737  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4738  000196  0E00               	movlw	0
  4739  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4740  00019A  0E03               	movlw	3
  4741  00019C  6E29               	movwf	___wmul@multiplicand,c
  4742  00019E  ECF1  F013         	call	___wmul	;wreg free
  4743  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4744  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4745                           
  4746                           ;doprnt.c: 849: exp /= 10;
  4747  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4748  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4749  0001B2  0E00               	movlw	0
  4750  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4751  0001B6  0E0A               	movlw	10
  4752  0001B8  6E21               	movwf	___awdiv@divisor,c
  4753  0001BA  ECFD  F00D         	call	___awdiv	;wreg free
  4754  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4755  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4756                           
  4757                           ;doprnt.c: 850: if(exp < 0)
  4758  0001C6  0100               	movlb	0	; () banked
  4759  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4760  0001CA  0A80               	xorlw	128
  4761  0001CC  6EF3               	movwf	prodl,c
  4762  0001CE  0E80               	movlw	128
  4763  0001D0  5CF3               	subwf	prodl,w,c
  4764  0001D2  0E00               	movlw	0
  4765  0001D4  B4D8               	btfsc	status,2,c
  4766  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4767  0001D8  B0D8               	btfsc	status,0,c
  4768  0001DA  D004               	goto	l5069
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;doprnt.c: 851: exp--;
  4772  0001DC  0100               	movlb	0	; () banked
  4773  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4774  0001E0  A0D8               	btfss	status,0,c
  4775  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4776  0001E4                     l5069:
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 855: integ = scale(-exp);
  4780  0001E4  0100               	movlb	0	; () banked
  4781  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4782  0001E8  0800               	sublw	0
  4783  0001EA  ECA0  F004         	call	_scale
  4784  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4785  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4786  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4787                           
  4788                           ;doprnt.c: 856: integ *= fval;
  4789  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4790  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4791  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4792  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4793  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4794  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4795  000212  EC6F  F009         	call	___ftmul	;wreg free
  4796  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4797  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4798  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4799                           
  4800                           ;doprnt.c: 857: if(integ < 1.0)
  4801  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4802  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4803  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4804  00022E  0E00               	movlw	0
  4805  000230  6E1C               	movwf	___ftge@ff2,c
  4806  000232  0E80               	movlw	128
  4807  000234  6E1D               	movwf	___ftge@ff2+1,c
  4808  000236  0E3F               	movlw	63
  4809  000238  6E1E               	movwf	___ftge@ff2+2,c
  4810  00023A  EC2C  F00F         	call	___ftge	;wreg free
  4811  00023E  B0D8               	btfsc	status,0,c
  4812  000240  D005               	goto	l5077
  4813                           
  4814                           ;doprnt.c: 858: exp--;
  4815  000242  0100               	movlb	0	; () banked
  4816  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4817  000246  A0D8               	btfss	status,0,c
  4818  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4819  00024A  D013               	goto	l5081
  4820  00024C                     l5077:
  4821                           
  4822                           ;doprnt.c: 859: else if(integ >= 10.0)
  4823  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4824  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4825  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4826  000258  0E00               	movlw	0
  4827  00025A  6E1C               	movwf	___ftge@ff2,c
  4828  00025C  0E20               	movlw	32
  4829  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4830  000260  0E41               	movlw	65
  4831  000262  6E1E               	movwf	___ftge@ff2+2,c
  4832  000264  EC2C  F00F         	call	___ftge	;wreg free
  4833  000268  A0D8               	btfss	status,0,c
  4834  00026A  D003               	goto	l5081
  4835                           
  4836                           ;doprnt.c: 860: exp++;
  4837  00026C  0100               	movlb	0	; () banked
  4838  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4839  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4840  000272                     l5081:
  4841                           
  4842                           ;doprnt.c: 861: }
  4843                           ;doprnt.c: 1121: if(prec <= 12)
  4844  000272  0100               	movlb	0	; () banked
  4845  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4846  000276  0A80               	xorlw	128
  4847  000278  6EF3               	movwf	prodl,c
  4848  00027A  0E80               	movlw	128
  4849  00027C  5CF3               	subwf	prodl,w,c
  4850  00027E  0E0D               	movlw	13
  4851  000280  B4D8               	btfsc	status,2,c
  4852  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4853  000284  B0D8               	btfsc	status,0,c
  4854  000286  D018               	goto	l5085
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;doprnt.c: 1122: fval += fround(prec);
  4858  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4859  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4860  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4861  000294  0100               	movlb	0	; () banked
  4862  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4863  000298  ECDC  F006         	call	_fround
  4864  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4865  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4866  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4867  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4868  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4869  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4870  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4871  0002B8                     l5085:
  4872                           
  4873                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4874  0002B8  0100               	movlb	0	; () banked
  4875  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4876  0002BC  0A80               	xorlw	128
  4877  0002BE  6EF3               	movwf	prodl,c
  4878  0002C0  0E80               	movlw	128
  4879  0002C2  5CF3               	subwf	prodl,w,c
  4880  0002C4  0E0A               	movlw	10
  4881  0002C6  B4D8               	btfsc	status,2,c
  4882  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4883  0002CA  B0D8               	btfsc	status,0,c
  4884  0002CC  D029               	goto	l5093
  4885                           
  4886                           ; BSR set to: 0
  4887  0002CE  0E7F               	movlw	127
  4888  0002D0  0100               	movlb	0	; () banked
  4889  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4890  0002D4  0100               	movlb	0	; () banked
  4891  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4892  0002D8  0100               	movlb	0	; () banked
  4893  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4894  0002DC  B4D8               	btfsc	status,2,c
  4895  0002DE  D06C               	goto	l5109
  4896                           
  4897                           ; BSR set to: 0
  4898  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4899  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4900  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4901  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4902  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4903  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4904  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4905  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4906  000300  0100               	movlb	0	; () banked
  4907  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4908  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4909  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4910  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4911  00030A  A4D8               	btfss	status,2,c
  4912  00030C  D055               	goto	l5109
  4913                           
  4914                           ; BSR set to: 0
  4915  00030E  0100               	movlb	0	; () banked
  4916  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4917  000312  0A80               	xorlw	128
  4918  000314  0F80               	addlw	-128
  4919  000316  0E02               	movlw	2
  4920  000318  B4D8               	btfsc	status,2,c
  4921  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4922  00031C  A0D8               	btfss	status,0,c
  4923  00031E  D04C               	goto	l5109
  4924  000320                     l5093:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4928  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4929  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4930  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4931  00032C  0E70               	movlw	112
  4932  00032E  6E1C               	movwf	___ftge@ff2,c
  4933  000330  0E89               	movlw	137
  4934  000332  6E1D               	movwf	___ftge@ff2+1,c
  4935  000334  0E40               	movlw	64
  4936  000336  6E1E               	movwf	___ftge@ff2+2,c
  4937  000338  EC2C  F00F         	call	___ftge	;wreg free
  4938  00033C  B0D8               	btfsc	status,0,c
  4939  00033E  D003               	goto	l5097
  4940                           
  4941                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4942  000340  0100               	movlb	0	; () banked
  4943  000342  0EF7               	movlw	247
  4944  000344  D002               	goto	L7
  4945  000346                     l5097:
  4946                           
  4947                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4948  000346  0100               	movlb	0	; () banked
  4949  000348  0EF8               	movlw	248
  4950  00034A                     L7:
  4951  00034A  0100               	movlb	0	; () banked
  4952  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  4953  00034E  0EFF               	movlw	255
  4954  000350  0100               	movlb	0	; () banked
  4955  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;doprnt.c: 1133: }
  4959                           ;doprnt.c: 1134: integ = scale(exp);
  4960                           
  4961                           ; BSR set to: 0
  4962  000354  0100               	movlb	0	; () banked
  4963  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  4964  000358  ECA0  F004         	call	_scale
  4965  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  4966  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4967  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4968                           
  4969                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4970  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4971  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4972  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4973  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4974  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4975  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4976  000380  ECFA  F00B         	call	__tdiv_to_l_	;wreg free
  4977  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1428
  4978  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1428+1
  4979  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1428+2
  4980  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1428+3
  4981  000394  C098  F0AD         	movff	_sprintf$1428,sprintf@_val
  4982  000398  C099  F0AE         	movff	_sprintf$1428+1,sprintf@_val+1
  4983  00039C  C09A  F0AF         	movff	_sprintf$1428+2,sprintf@_val+2
  4984  0003A0  C09B  F0B0         	movff	_sprintf$1428+3,sprintf@_val+3
  4985                           
  4986                           ;doprnt.c: 1138: fval = 0.0;
  4987  0003A4  0E00               	movlw	0
  4988  0003A6  0100               	movlb	0	; () banked
  4989  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  4990  0003AA  0E00               	movlw	0
  4991  0003AC  0100               	movlb	0	; () banked
  4992  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4993  0003B0  0E00               	movlw	0
  4994  0003B2  0100               	movlb	0	; () banked
  4995  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4996                           
  4997                           ;doprnt.c: 1139: } else {
  4998  0003B6  D034               	goto	l5113
  4999  0003B8                     l5109:
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5003  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  5004  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  5005  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  5006  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  5007  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  5008  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5009  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5010  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5011                           
  5012                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5013  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  5014  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  5015  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  5016  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  5017  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  5018  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  5019  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  5020  0003F4  ECFF  F011         	call	___lltoft	;wreg free
  5021  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  5022  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  5023  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  5024  000404  ECC6  F012         	call	___ftsub	;wreg free
  5025  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  5026  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  5027  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  5028                           
  5029                           ;doprnt.c: 1142: exp = 0;
  5030  000414  0E00               	movlw	0
  5031  000416  0100               	movlb	0	; () banked
  5032  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  5033  00041A  0E00               	movlw	0
  5034  00041C  0100               	movlb	0	; () banked
  5035  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  5036  000420                     l5113:
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;doprnt.c: 1143: }
  5040                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5041  000420  0E01               	movlw	1
  5042  000422  0100               	movlb	0	; () banked
  5043  000424  6FB7               	movwf	sprintf@c& (0+255),b
  5044  000426                     
  5045                           ; BSR set to: 0
  5046  000426  0100               	movlb	0	; () banked
  5047  000428  51B7               	movf	sprintf@c& (0+255),w,b
  5048  00042A  0A0A               	xorlw	10
  5049  00042C  B4D8               	btfsc	status,2,c
  5050  00042E  D021               	goto	l5127
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5054                           
  5055                           ; BSR set to: 0
  5056                           
  5057                           ; BSR set to: 0
  5058  000430  0100               	movlb	0	; () banked
  5059  000432  51B7               	movf	sprintf@c& (0+255),w,b
  5060  000434  0D04               	mullw	4
  5061  000436  0ECD               	movlw	low _dpowers
  5062  000438  24F3               	addwf	prodl,w,c
  5063  00043A  6EF6               	movwf	tblptrl,c
  5064  00043C  0E7E               	movlw	high _dpowers
  5065  00043E  20F4               	addwfc	prodh,w,c
  5066  000440  6EF7               	movwf	tblptrh,c
  5067  000442                     	if	1	;There are 3 active tblptr bytes
  5068  000442  6AF8               	clrf	tblptru,c
  5069  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  5070  000446  22F8               	addwfc	tblptru,f,c
  5071  000448                     	endif
  5072  000448  0009               	tblrd		*+
  5073  00044A  50F5               	movf	tablat,w,c
  5074  00044C  0100               	movlb	0	; () banked
  5075  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5076  000450  0009               	tblrd		*+
  5077  000452  50F5               	movf	tablat,w,c
  5078  000454  0100               	movlb	0	; () banked
  5079  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5080  000458  0009               	tblrd		*+
  5081  00045A  50F5               	movf	tablat,w,c
  5082  00045C  0100               	movlb	0	; () banked
  5083  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5084  000460  0009               	tblrd		*+
  5085  000462  50F5               	movf	tablat,w,c
  5086  000464  0100               	movlb	0	; () banked
  5087  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5088  000468  A0D8               	btfss	status,0,c
  5089  00046A  D003               	goto	l5127
  5090                           
  5091                           ; BSR set to: 0
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;doprnt.c: 1147: break;
  5097  00046C  0100               	movlb	0	; () banked
  5098  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  5099  000470  D7DA               	goto	L8
  5100  000472                     l5127:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1184: {
  5104                           ;doprnt.c: 1197: if(flag & 0x03)
  5105  000472  0E03               	movlw	3
  5106  000474  0100               	movlb	0	; () banked
  5107  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  5108  000478  0100               	movlb	0	; () banked
  5109  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  5110  00047C  0E00               	movlw	0
  5111  00047E  0100               	movlb	0	; () banked
  5112  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5113  000482  0100               	movlb	0	; () banked
  5114  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5115  000486  0100               	movlb	0	; () banked
  5116  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5117  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  5118  00048C  B4D8               	btfsc	status,2,c
  5119  00048E  D055               	goto	l5141
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5123  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  5124  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5125  000498  0E2D               	movlw	45
  5126  00049A  D04B               	goto	L9
  5127  00049C                     l5133:
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;doprnt.c: 1209: {
  5131                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5132  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5133  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5134  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5135  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5136  0004AC  0100               	movlb	0	; () banked
  5137  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  5138  0004B0  0D04               	mullw	4
  5139  0004B2  0ECD               	movlw	low _dpowers
  5140  0004B4  24F3               	addwf	prodl,w,c
  5141  0004B6  6EF6               	movwf	tblptrl,c
  5142  0004B8  0E7E               	movlw	high _dpowers
  5143  0004BA  20F4               	addwfc	prodh,w,c
  5144  0004BC  6EF7               	movwf	tblptrh,c
  5145  0004BE                     	if	1	;There are 3 active tblptr bytes
  5146  0004BE  6AF8               	clrf	tblptru,c
  5147  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  5148  0004C2  22F8               	addwfc	tblptru,f,c
  5149  0004C4                     	endif
  5150  0004C4  0009               	tblrd		*+
  5151  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5152  0004CA  0009               	tblrd		*+
  5153  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5154  0004D0  0009               	tblrd		*+
  5155  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5156  0004D6  000A               	tblrd		*-
  5157  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5158  0004DC  ECB7  F00F         	call	___lldiv	;wreg free
  5159  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  5160  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  5161  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5162  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5163                           
  5164                           ;doprnt.c: 1211: vd %= 10;
  5165  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5166  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5167  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5168  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5169  000500  0E0A               	movlw	10
  5170  000502  6E2A               	movwf	___llmod@divisor,c
  5171  000504  0E00               	movlw	0
  5172  000506  6E2B               	movwf	___llmod@divisor+1,c
  5173  000508  0E00               	movlw	0
  5174  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5175  00050C  0E00               	movlw	0
  5176  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5177  000510  ECCC  F011         	call	___llmod	;wreg free
  5178  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5179  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5180  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5181  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5182                           
  5183                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5184  000524  0100               	movlb	0	; () banked
  5185  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5186  000528  0F30               	addlw	48
  5187  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5188  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5189  000532                     L9:
  5190  000532  6EDF               	movwf	indf2,c
  5191                           
  5192                           ; BSR set to: 0
  5193  000534  0100               	movlb	0	; () banked
  5194  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5195  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5196  00053A                     l5141:
  5197                           
  5198                           ; BSR set to: 0
  5199  00053A  0100               	movlb	0	; () banked
  5200  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5201  00053E  0100               	movlb	0	; () banked
  5202  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5203  000542  B4D8               	btfsc	status,2,c
  5204  000544  D00E               	goto	l5149
  5205  000546  D7AA               	goto	l5133
  5206  000548                     l5143:
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5210  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5211  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5212  000550  0E30               	movlw	48
  5213  000552  6EDF               	movwf	indf2,c
  5214                           
  5215                           ; BSR set to: 0
  5216  000554  0100               	movlb	0	; () banked
  5217  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5218  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 1218: exp--;
  5222  00055A  0100               	movlb	0	; () banked
  5223  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5224  00055E  A0D8               	btfss	status,0,c
  5225  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5226  000562                     l5149:
  5227                           
  5228                           ; BSR set to: 0
  5229  000562  0100               	movlb	0	; () banked
  5230  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5231  000566  0A80               	xorlw	128
  5232  000568  6EF3               	movwf	prodl,c
  5233  00056A  0E80               	movlw	128
  5234  00056C  5CF3               	subwf	prodl,w,c
  5235  00056E  0E01               	movlw	1
  5236  000570  B4D8               	btfsc	status,2,c
  5237  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5238  000574  B0D8               	btfsc	status,0,c
  5239  000576  D7E8               	goto	l5143
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;doprnt.c: 1219: }
  5243                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5244                           
  5245                           ; BSR set to: 0
  5246  000578  0100               	movlb	0	; () banked
  5247  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5248  00057C  0A80               	xorlw	128
  5249  00057E  0F80               	addlw	-128
  5250  000580  0E09               	movlw	9
  5251  000582  B4D8               	btfsc	status,2,c
  5252  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5253  000586  A0D8               	btfss	status,0,c
  5254  000588  D004               	goto	l515
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5258  00058A  0E08               	movlw	8
  5259  00058C  0100               	movlb	0	; () banked
  5260  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5261  000590  D002               	goto	l5155
  5262  000592                     l515:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 1222: else
  5266                           ;doprnt.c: 1223: c = prec;
  5267  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5268  000596                     l5155:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1224: prec -= c;
  5272  000596  0100               	movlb	0	; () banked
  5273  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5274  00059A  0100               	movlb	0	; () banked
  5275  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5276  00059E  0E00               	movlw	0
  5277  0005A0  0100               	movlb	0	; () banked
  5278  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5279  0005A4  0EFF               	movlw	255
  5280  0005A6  0100               	movlb	0	; () banked
  5281  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;doprnt.c: 1228: if(c)
  5285  0005AA  0100               	movlb	0	; () banked
  5286  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5287  0005AE  B4D8               	btfsc	status,2,c
  5288  0005B0  D009               	goto	l5163
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5292  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5293  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5294  0005BA  0E2E               	movlw	46
  5295  0005BC  6EDF               	movwf	indf2,c
  5296                           
  5297                           ; BSR set to: 0
  5298  0005BE  0100               	movlb	0	; () banked
  5299  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5300  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5301  0005C4                     l5163:
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5305  0005C4  0100               	movlb	0	; () banked
  5306  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5307  0005C8  ECA0  F004         	call	_scale
  5308  0005CC  C06C  F095         	movff	?_scale,_sprintf$2456
  5309  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2456+1
  5310  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2456+2
  5311                           
  5312                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5313  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5314  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5315  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5316  0005E4  C095  F060         	movff	_sprintf$2456,___ftmul@f1
  5317  0005E8  C096  F061         	movff	_sprintf$2456+1,___ftmul@f1+1
  5318  0005EC  C097  F062         	movff	_sprintf$2456+2,___ftmul@f1+2
  5319  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5320  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5321  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5322  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5323  000600  EC1B  F00A         	call	___fttol	;wreg free
  5324  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5325  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5326  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5327  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5328                           
  5329                           ;doprnt.c: 1237: while(c--) {
  5330  000614  D079               	goto	l5177
  5331  000616                     l5167:
  5332                           
  5333                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5334  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5335  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5336  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5337  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5338  000626  0100               	movlb	0	; () banked
  5339  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5340  00062A  0D04               	mullw	4
  5341  00062C  0ECD               	movlw	low _dpowers
  5342  00062E  24F3               	addwf	prodl,w,c
  5343  000630  6EF6               	movwf	tblptrl,c
  5344  000632  0E7E               	movlw	high _dpowers
  5345  000634  20F4               	addwfc	prodh,w,c
  5346  000636  6EF7               	movwf	tblptrh,c
  5347  000638                     	if	1	;There are 3 active tblptr bytes
  5348  000638  6AF8               	clrf	tblptru,c
  5349  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5350  00063C  22F8               	addwfc	tblptru,f,c
  5351  00063E                     	endif
  5352  00063E  0009               	tblrd		*+
  5353  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5354  000644  0009               	tblrd		*+
  5355  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5356  00064A  0009               	tblrd		*+
  5357  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5358  000650  000A               	tblrd		*-
  5359  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5360  000656  ECB7  F00F         	call	___lldiv	;wreg free
  5361  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1430
  5362  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1430+1
  5363  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1430+2
  5364  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1430+3
  5365                           
  5366                           ;doprnt.c: 1239: vd %= 10;
  5367  00066A  C0A0  F026         	movff	sprintf@vd_1430,___llmod@dividend
  5368  00066E  C0A1  F027         	movff	sprintf@vd_1430+1,___llmod@dividend+1
  5369  000672  C0A2  F028         	movff	sprintf@vd_1430+2,___llmod@dividend+2
  5370  000676  C0A3  F029         	movff	sprintf@vd_1430+3,___llmod@dividend+3
  5371  00067A  0E0A               	movlw	10
  5372  00067C  6E2A               	movwf	___llmod@divisor,c
  5373  00067E  0E00               	movlw	0
  5374  000680  6E2B               	movwf	___llmod@divisor+1,c
  5375  000682  0E00               	movlw	0
  5376  000684  6E2C               	movwf	___llmod@divisor+2,c
  5377  000686  0E00               	movlw	0
  5378  000688  6E2D               	movwf	___llmod@divisor+3,c
  5379  00068A  ECCC  F011         	call	___llmod	;wreg free
  5380  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1430
  5381  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1430+1
  5382  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1430+2
  5383  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1430+3
  5384                           
  5385                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5386  00069E  0100               	movlb	0	; () banked
  5387  0006A0  51A0               	movf	sprintf@vd_1430& (0+255),w,b
  5388  0006A2  0F30               	addlw	48
  5389  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5390  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5391  0006AC  6EDF               	movwf	indf2,c
  5392                           
  5393                           ; BSR set to: 0
  5394  0006AE  0100               	movlb	0	; () banked
  5395  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5396  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5400  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5401  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5402  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5403  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5404  0006C4  0100               	movlb	0	; () banked
  5405  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5406  0006C8  0D04               	mullw	4
  5407  0006CA  0ECD               	movlw	low _dpowers
  5408  0006CC  24F3               	addwf	prodl,w,c
  5409  0006CE  6EF6               	movwf	tblptrl,c
  5410  0006D0  0E7E               	movlw	high _dpowers
  5411  0006D2  20F4               	addwfc	prodh,w,c
  5412  0006D4  6EF7               	movwf	tblptrh,c
  5413  0006D6                     	if	1	;There are 3 active tblptr bytes
  5414  0006D6  6AF8               	clrf	tblptru,c
  5415  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5416  0006DA  22F8               	addwfc	tblptru,f,c
  5417  0006DC                     	endif
  5418  0006DC  0009               	tblrd		*+
  5419  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5420  0006E2  0009               	tblrd		*+
  5421  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5422  0006E8  0009               	tblrd		*+
  5423  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5424  0006EE  000A               	tblrd		*-
  5425  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5426  0006F4  ECCC  F011         	call	___llmod	;wreg free
  5427  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5428  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5429  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5430  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5431  000708                     l5177:
  5432  000708  0100               	movlb	0	; () banked
  5433  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5434  00070C  0100               	movlb	0	; () banked
  5435  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5436  000710  B4D8               	btfsc	status,2,c
  5437  000712  D00E               	goto	l5185
  5438  000714  D780               	goto	l5167
  5439  000716                     l5179:
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5443  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5444  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5445  00071E  0E30               	movlw	48
  5446  000720  6EDF               	movwf	indf2,c
  5447                           
  5448                           ; BSR set to: 0
  5449  000722  0100               	movlb	0	; () banked
  5450  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5451  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 1246: prec--;
  5455  000728  0100               	movlb	0	; () banked
  5456  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5457  00072C  A0D8               	btfss	status,0,c
  5458  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5459  000730                     l5185:
  5460                           
  5461                           ; BSR set to: 0
  5462  000730  0100               	movlb	0	; () banked
  5463  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5464  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5465  000736  B4D8               	btfsc	status,2,c
  5466  000738  D0EA               	goto	l5227
  5467  00073A  D7ED               	goto	l5179
  5468  00073C                     l5187:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1255: }
  5472                           ;doprnt.c: 1262: {
  5473                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5474  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5475  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5476  000744  0100               	movlb	0	; () banked
  5477  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5478  00074A  0100               	movlb	0	; () banked
  5479  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5480  000750  0100               	movlb	0	; () banked
  5481  000752  0E00               	movlw	0
  5482  000754  0100               	movlb	0	; () banked
  5483  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5484  000758  0EFF               	movlw	-1
  5485  00075A  0100               	movlb	0	; () banked
  5486  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5487  00075E  0100               	movlb	0	; () banked
  5488  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491  000762  0E02               	movlw	2
  5492  000764  0100               	movlb	0	; () banked
  5493  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5494  000768  0E00               	movlw	0
  5495  00076A  0100               	movlb	0	; () banked
  5496  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5500  00076E  0100               	movlb	0	; () banked
  5501  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5502  000772  0A80               	xorlw	128
  5503  000774  0F80               	addlw	128
  5504  000776  E10B               	bnz	u5775
  5505  000778  0E00               	movlw	0
  5506  00077A  0100               	movlb	0	; () banked
  5507  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5508  00077E  E107               	bnz	u5775
  5509  000780  0E00               	movlw	0
  5510  000782  0100               	movlb	0	; () banked
  5511  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5512  000786  E103               	bnz	u5775
  5513  000788  0E00               	movlw	0
  5514  00078A  0100               	movlb	0	; () banked
  5515  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5516  00078E                     u5775:
  5517  00078E  B0D8               	btfsc	status,0,c
  5518  000790  D012               	goto	l5197
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;doprnt.c: 1271: flag |= 0x03;
  5522  000792  0E03               	movlw	3
  5523  000794  0100               	movlb	0	; () banked
  5524  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;doprnt.c: 1272: _val._val = -_val._val;
  5528  000798  0100               	movlb	0	; () banked
  5529  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5530  00079C  0100               	movlb	0	; () banked
  5531  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5532  0007A0  0100               	movlb	0	; () banked
  5533  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5534  0007A4  0100               	movlb	0	; () banked
  5535  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5536  0007A8  0E00               	movlw	0
  5537  0007AA  0100               	movlb	0	; () banked
  5538  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5539  0007AE  0100               	movlb	0	; () banked
  5540  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5541  0007B2  0100               	movlb	0	; () banked
  5542  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5543  0007B6                     l5197:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;doprnt.c: 1273: }
  5547                           ;doprnt.c: 1275: }
  5548                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5549  0007B6  0E01               	movlw	1
  5550  0007B8  0100               	movlb	0	; () banked
  5551  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5552  0007BC                     
  5553                           ; BSR set to: 0
  5554  0007BC  0100               	movlb	0	; () banked
  5555  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5556  0007C0  0A0A               	xorlw	10
  5557  0007C2  B4D8               	btfsc	status,2,c
  5558  0007C4  D021               	goto	l5211
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5562                           
  5563                           ; BSR set to: 0
  5564                           
  5565                           ; BSR set to: 0
  5566  0007C6  0100               	movlb	0	; () banked
  5567  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5568  0007CA  0D04               	mullw	4
  5569  0007CC  0ECD               	movlw	low _dpowers
  5570  0007CE  24F3               	addwf	prodl,w,c
  5571  0007D0  6EF6               	movwf	tblptrl,c
  5572  0007D2  0E7E               	movlw	high _dpowers
  5573  0007D4  20F4               	addwfc	prodh,w,c
  5574  0007D6  6EF7               	movwf	tblptrh,c
  5575  0007D8                     	if	1	;There are 3 active tblptr bytes
  5576  0007D8  6AF8               	clrf	tblptru,c
  5577  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5578  0007DC  22F8               	addwfc	tblptru,f,c
  5579  0007DE                     	endif
  5580  0007DE  0009               	tblrd		*+
  5581  0007E0  50F5               	movf	tablat,w,c
  5582  0007E2  0100               	movlb	0	; () banked
  5583  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5584  0007E6  0009               	tblrd		*+
  5585  0007E8  50F5               	movf	tablat,w,c
  5586  0007EA  0100               	movlb	0	; () banked
  5587  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5588  0007EE  0009               	tblrd		*+
  5589  0007F0  50F5               	movf	tablat,w,c
  5590  0007F2  0100               	movlb	0	; () banked
  5591  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5592  0007F6  0009               	tblrd		*+
  5593  0007F8  50F5               	movf	tablat,w,c
  5594  0007FA  0100               	movlb	0	; () banked
  5595  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5596  0007FE  A0D8               	btfss	status,0,c
  5597  000800  D003               	goto	l5211
  5598                           
  5599                           ; BSR set to: 0
  5600                           
  5601                           ; BSR set to: 0
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;doprnt.c: 1316: break;
  5605  000802  0100               	movlb	0	; () banked
  5606  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5607  000806  D7DA               	goto	L10
  5608  000808                     l5211:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;doprnt.c: 1431: {
  5612                           ;doprnt.c: 1447: if(flag & 0x03)
  5613  000808  0E03               	movlw	3
  5614  00080A  0100               	movlb	0	; () banked
  5615  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5616  00080E  0100               	movlb	0	; () banked
  5617  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5618  000812  0E00               	movlw	0
  5619  000814  0100               	movlb	0	; () banked
  5620  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5621  000818  0100               	movlb	0	; () banked
  5622  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5623  00081C  0100               	movlb	0	; () banked
  5624  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5625  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5626  000822  B4D8               	btfsc	status,2,c
  5627  000824  D009               	goto	l5217
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5631  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5632  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5633  00082E  0E2D               	movlw	45
  5634  000830  6EDF               	movwf	indf2,c
  5635                           
  5636                           ; BSR set to: 0
  5637  000832  0100               	movlb	0	; () banked
  5638  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5639  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5640  000838                     l5217:
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;doprnt.c: 1478: }
  5644                           ;doprnt.c: 1481: prec = c;
  5645  000838  0100               	movlb	0	; () banked
  5646  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5647  00083C  0100               	movlb	0	; () banked
  5648  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5649  000840  0100               	movlb	0	; () banked
  5650  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5651  000844  0100               	movlb	0	; () banked
  5652  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5653  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5654                           
  5655                           ;doprnt.c: 1483: while(prec--) {
  5656  00084A  D057               	goto	l5225
  5657  00084C                     l5219:
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;doprnt.c: 1487: {
  5661                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5662  00084C  0100               	movlb	0	; () banked
  5663  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5664  000852  0100               	movlb	0	; () banked
  5665  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5666  000858  0100               	movlb	0	; () banked
  5667  00085A  90D8               	bcf	status,0,c
  5668  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5669  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5670  000860  0100               	movlb	0	; () banked
  5671  000862  90D8               	bcf	status,0,c
  5672  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5673  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5674  000868  0ECD               	movlw	low _dpowers
  5675  00086A  0100               	movlb	0	; () banked
  5676  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5677  00086E  6EF6               	movwf	tblptrl,c
  5678  000870  0E7E               	movlw	high _dpowers
  5679  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5680  000874  6EF7               	movwf	tblptrh,c
  5681  000876                     	if	1	;There are 3 active tblptr bytes
  5682  000876  6AF8               	clrf	tblptru,c
  5683  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5684  00087A  22F8               	addwfc	tblptru,f,c
  5685  00087C                     	endif
  5686  00087C  0009               	tblrd		*+
  5687  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5688  000882  0009               	tblrd		*+
  5689  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5690  000888  0009               	tblrd		*+
  5691  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5692  00088E  000A               	tblrd		*-
  5693  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5694  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5695  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5696  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5697  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5698  0008A4  ECB7  F00F         	call	___lldiv	;wreg free
  5699  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5700  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5701  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5702  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5703  0008B8  0E0A               	movlw	10
  5704  0008BA  6E2A               	movwf	___llmod@divisor,c
  5705  0008BC  0E00               	movlw	0
  5706  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5707  0008C0  0E00               	movlw	0
  5708  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5709  0008C4  0E00               	movlw	0
  5710  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5711  0008C8  ECCC  F011         	call	___llmod	;wreg free
  5712  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5713  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5714  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5715  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5716  0008DC  0100               	movlb	0	; () banked
  5717  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5718  0008E0  0F30               	addlw	48
  5719  0008E2  0100               	movlb	0	; () banked
  5720  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;doprnt.c: 1532: }
  5724                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5725  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5726  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5727  0008EE  0100               	movlb	0	; () banked
  5728  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5729                           
  5730                           ; BSR set to: 0
  5731  0008F4  0100               	movlb	0	; () banked
  5732  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5733  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5734  0008FA                     l5225:
  5735                           
  5736                           ; BSR set to: 0
  5737  0008FA  0100               	movlb	0	; () banked
  5738  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5739  0008FE  A0D8               	btfss	status,0,c
  5740  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5741  000902  0100               	movlb	0	; () banked
  5742  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5743  000906  B4D8               	btfsc	status,2,c
  5744  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5745  00090A  A4D8               	btfss	status,2,c
  5746  00090C  D79F               	goto	l5219
  5747  00090E                     l5227:
  5748                           
  5749                           ; BSR set to: 0
  5750  00090E  0100               	movlb	0	; () banked
  5751  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5752  000914  0100               	movlb	0	; () banked
  5753  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5754  00091A  0100               	movlb	0	; () banked
  5755  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5756  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5757  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5758  000920  6AF8               	clrf	tblptru,c
  5759  000922                     	endif
  5760  000922                     	if	0	;tblptru may be non-zero
  5761  000922                     	endif
  5762  000922  0008               	tblrd		*
  5763  000924  0100               	movlb	0	; () banked
  5764  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5765  00092A  0100               	movlb	0	; () banked
  5766  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5767  00092E  EF18  F000         	goto	l5025
  5768  000932                     l5229:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;doprnt.c: 1547: *sp = 0;
  5772  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5773  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5774  00093A  0E00               	movlw	0
  5775  00093C  6EDF               	movwf	indf2,c
  5776                           
  5777                           ; BSR set to: 0
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;doprnt.c: 1549: return 0;
  5781                           ;	Return value of _sprintf is never used
  5782  00093E  0012               	return	
  5783  000940                     __end_of_sprintf:
  5784                           	opt stack 0
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           indf0	equ	0xFEF
  5793                           postinc0	equ	0xFEE
  5794                           fsr0h	equ	0xFEA
  5795                           fsr0l	equ	0xFE9
  5796                           wreg	equ	0xFE8
  5797                           postinc1	equ	0xFE6
  5798                           postdec1	equ	0xFE5
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _scale *****************
  5808 ;; Defined at:
  5809 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  scl             1    wreg     char 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  scl             1   18[BANK0 ] char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  3   12[BANK0 ] char 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5823 ;;      Params:         0       3       0       0       0       0       0       0       0
  5824 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5826 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5827 ;;Total ram usage:        7 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    6
  5830 ;; This function calls:
  5831 ;;		___awdiv
  5832 ;;		___awmod
  5833 ;;		___ftmul
  5834 ;;		___wmul
  5835 ;; This function is called by:
  5836 ;;		_sprintf
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text28
  5841  000940                     __ptext28:
  5842                           	opt stack 0
  5843  000940                     _scale:
  5844                           	opt stack 21
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;incstack = 0
  5848                           ;scale@scl stored from wreg
  5849  000940  0100               	movlb	0	; () banked
  5850  000942  6F72               	movwf	scale@scl& (0+255),b
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;doprnt.c: 428: if(scl < 0) {
  5854  000944  0100               	movlb	0	; () banked
  5855  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5856  000948  D111               	goto	l4757
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;doprnt.c: 429: scl = -scl;
  5860  00094A  0100               	movlb	0	; () banked
  5861  00094C  6D72               	negf	scale@scl& (0+255),b
  5862                           
  5863                           ;doprnt.c: 430: if(scl>=110)
  5864  00094E  0100               	movlb	0	; () banked
  5865  000950  5172               	movf	scale@scl& (0+255),w,b
  5866  000952  0A80               	xorlw	128
  5867  000954  0F12               	addlw	-238
  5868  000956  A0D8               	btfss	status,0,c
  5869  000958  D0A0               	goto	l4747
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5873  00095A  0E00               	movlw	0
  5874  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5875  00095E  0E03               	movlw	3
  5876  000960  6E29               	movwf	___wmul@multiplicand,c
  5877  000962  0E00               	movlw	0
  5878  000964  6E22               	movwf	___awdiv@divisor+1,c
  5879  000966  0E0A               	movlw	10
  5880  000968  6E21               	movwf	___awdiv@divisor,c
  5881  00096A  0E00               	movlw	0
  5882  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5883  00096E  0E64               	movlw	100
  5884  000970  6E1B               	movwf	___awmod@divisor,c
  5885  000972  0100               	movlb	0	; () banked
  5886  000974  5172               	movf	scale@scl& (0+255),w,b
  5887  000976  6E19               	movwf	___awmod@dividend,c
  5888  000978  6A1A               	clrf	___awmod@dividend+1,c
  5889  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5890  00097C  061A               	decf	___awmod@dividend+1,f,c
  5891  00097E  ECE4  F00E         	call	___awmod	;wreg free
  5892  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5893  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5894  00098A  ECFD  F00D         	call	___awdiv	;wreg free
  5895  00098E  0E09               	movlw	9
  5896  000990  241F               	addwf	?___awdiv,w,c
  5897  000992  6E27               	movwf	___wmul@multiplier,c
  5898  000994  0E00               	movlw	0
  5899  000996  2020               	addwfc	?___awdiv+1,w,c
  5900  000998  6E28               	movwf	___wmul@multiplier+1,c
  5901  00099A  ECF1  F013         	call	___wmul	;wreg free
  5902  00099E  0EF5               	movlw	low __npowers_
  5903  0009A0  2427               	addwf	?___wmul,w,c
  5904  0009A2  6EF6               	movwf	tblptrl,c
  5905  0009A4  0E7E               	movlw	high __npowers_
  5906  0009A6  2028               	addwfc	?___wmul+1,w,c
  5907  0009A8  6EF7               	movwf	tblptrh,c
  5908  0009AA                     	if	1	;There are 3 active tblptr bytes
  5909  0009AA  6AF8               	clrf	tblptru,c
  5910  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5911  0009AE  22F8               	addwfc	tblptru,f,c
  5912  0009B0                     	endif
  5913  0009B0  0009               	tblrd		*+
  5914  0009B2  0100               	movlb	0	; () banked
  5915  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5916  0009B8  0009               	tblrd		*+
  5917  0009BA  0100               	movlb	0	; () banked
  5918  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5919  0009C0  000A               	tblrd		*-
  5920  0009C2  0100               	movlb	0	; () banked
  5921  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5922  0009C8  0E00               	movlw	0
  5923  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5924  0009CC  0E64               	movlw	100
  5925  0009CE  6E21               	movwf	___awdiv@divisor,c
  5926  0009D0  0100               	movlb	0	; () banked
  5927  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5928  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5929  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5930  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5931  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5932  0009DC  ECFD  F00D         	call	___awdiv	;wreg free
  5933  0009E0  0E12               	movlw	18
  5934  0009E2  241F               	addwf	?___awdiv,w,c
  5935  0009E4  6E27               	movwf	___wmul@multiplier,c
  5936  0009E6  0E00               	movlw	0
  5937  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5938  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5939  0009EC  0E00               	movlw	0
  5940  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5941  0009F0  0E03               	movlw	3
  5942  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5943  0009F4  ECF1  F013         	call	___wmul	;wreg free
  5944  0009F8  0EF5               	movlw	low __npowers_
  5945  0009FA  2427               	addwf	?___wmul,w,c
  5946  0009FC  6EF6               	movwf	tblptrl,c
  5947  0009FE  0E7E               	movlw	high __npowers_
  5948  000A00  2028               	addwfc	?___wmul+1,w,c
  5949  000A02  6EF7               	movwf	tblptrh,c
  5950  000A04                     	if	1	;There are 3 active tblptr bytes
  5951  000A04  6AF8               	clrf	tblptru,c
  5952  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  5953  000A08  22F8               	addwfc	tblptru,f,c
  5954  000A0A                     	endif
  5955  000A0A  0009               	tblrd		*+
  5956  000A0C  0100               	movlb	0	; () banked
  5957  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  5958  000A12  0009               	tblrd		*+
  5959  000A14  0100               	movlb	0	; () banked
  5960  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5961  000A1A  000A               	tblrd		*-
  5962  000A1C  0100               	movlb	0	; () banked
  5963  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5964  000A22  EC6F  F009         	call	___ftmul	;wreg free
  5965  000A26  C060  F06F         	movff	?___ftmul,_scale$2455
  5966  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2455+1
  5967  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2455+2
  5968                           
  5969                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5970  000A32  C06F  F060         	movff	_scale$2455,___ftmul@f1
  5971  000A36  C070  F061         	movff	_scale$2455+1,___ftmul@f1+1
  5972  000A3A  C071  F062         	movff	_scale$2455+2,___ftmul@f1+2
  5973  000A3E  0E00               	movlw	0
  5974  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  5975  000A42  0E03               	movlw	3
  5976  000A44  6E29               	movwf	___wmul@multiplicand,c
  5977  000A46  0E00               	movlw	0
  5978  000A48  6E1C               	movwf	___awmod@divisor+1,c
  5979  000A4A  0E0A               	movlw	10
  5980  000A4C  6E1B               	movwf	___awmod@divisor,c
  5981  000A4E  0100               	movlb	0	; () banked
  5982  000A50  5172               	movf	scale@scl& (0+255),w,b
  5983  000A52  6E19               	movwf	___awmod@dividend,c
  5984  000A54  6A1A               	clrf	___awmod@dividend+1,c
  5985  000A56  BE19               	btfsc	___awmod@dividend,7,c
  5986  000A58  061A               	decf	___awmod@dividend+1,f,c
  5987  000A5A  ECE4  F00E         	call	___awmod	;wreg free
  5988  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5989  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5990  000A66  ECF1  F013         	call	___wmul	;wreg free
  5991  000A6A  0EF5               	movlw	low __npowers_
  5992  000A6C  2427               	addwf	?___wmul,w,c
  5993  000A6E  6EF6               	movwf	tblptrl,c
  5994  000A70  0E7E               	movlw	high __npowers_
  5995  000A72  2028               	addwfc	?___wmul+1,w,c
  5996  000A74  6EF7               	movwf	tblptrh,c
  5997  000A76                     	if	1	;There are 3 active tblptr bytes
  5998  000A76  6AF8               	clrf	tblptru,c
  5999  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  6000  000A7A  22F8               	addwfc	tblptru,f,c
  6001  000A7C                     	endif
  6002  000A7C  0009               	tblrd		*+
  6003  000A7E  0100               	movlb	0	; () banked
  6004  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  6005  000A84  0009               	tblrd		*+
  6006  000A86  0100               	movlb	0	; () banked
  6007  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6008  000A8C  000A               	tblrd		*-
  6009  000A8E  0100               	movlb	0	; () banked
  6010  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6011  000A94  EC6F  F009         	call	___ftmul	;wreg free
  6012  000A98  D16F               	goto	L14
  6013  000A9A                     l4747:
  6014                           
  6015                           ;doprnt.c: 432: else if(scl > 10)
  6016  000A9A  0100               	movlb	0	; () banked
  6017  000A9C  5172               	movf	scale@scl& (0+255),w,b
  6018  000A9E  0A80               	xorlw	128
  6019  000AA0  0F75               	addlw	-139
  6020  000AA2  A0D8               	btfss	status,0,c
  6021  000AA4  D05B               	goto	l4753
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6025  000AA6  0E00               	movlw	0
  6026  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  6027  000AAA  0E0A               	movlw	10
  6028  000AAC  6E21               	movwf	___awdiv@divisor,c
  6029  000AAE  0100               	movlb	0	; () banked
  6030  000AB0  5172               	movf	scale@scl& (0+255),w,b
  6031  000AB2  6E1F               	movwf	___awdiv@dividend,c
  6032  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  6033  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  6034  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  6035  000ABA  ECFD  F00D         	call	___awdiv	;wreg free
  6036  000ABE  0E09               	movlw	9
  6037  000AC0  241F               	addwf	?___awdiv,w,c
  6038  000AC2  6E27               	movwf	___wmul@multiplier,c
  6039  000AC4  0E00               	movlw	0
  6040  000AC6  2020               	addwfc	?___awdiv+1,w,c
  6041  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  6042  000ACA  0E00               	movlw	0
  6043  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  6044  000ACE  0E03               	movlw	3
  6045  000AD0  6E29               	movwf	___wmul@multiplicand,c
  6046  000AD2  ECF1  F013         	call	___wmul	;wreg free
  6047  000AD6  0EF5               	movlw	low __npowers_
  6048  000AD8  2427               	addwf	?___wmul,w,c
  6049  000ADA  6EF6               	movwf	tblptrl,c
  6050  000ADC  0E7E               	movlw	high __npowers_
  6051  000ADE  2028               	addwfc	?___wmul+1,w,c
  6052  000AE0  6EF7               	movwf	tblptrh,c
  6053  000AE2                     	if	1	;There are 3 active tblptr bytes
  6054  000AE2  6AF8               	clrf	tblptru,c
  6055  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  6056  000AE6  22F8               	addwfc	tblptru,f,c
  6057  000AE8                     	endif
  6058  000AE8  0009               	tblrd		*+
  6059  000AEA  0100               	movlb	0	; () banked
  6060  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  6061  000AF0  0009               	tblrd		*+
  6062  000AF2  0100               	movlb	0	; () banked
  6063  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6064  000AF8  000A               	tblrd		*-
  6065  000AFA  0100               	movlb	0	; () banked
  6066  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6067  000B00  0E00               	movlw	0
  6068  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  6069  000B04  0E03               	movlw	3
  6070  000B06  6E29               	movwf	___wmul@multiplicand,c
  6071  000B08  0E00               	movlw	0
  6072  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  6073  000B0C  0E0A               	movlw	10
  6074  000B0E  6E1B               	movwf	___awmod@divisor,c
  6075  000B10  0100               	movlb	0	; () banked
  6076  000B12  5172               	movf	scale@scl& (0+255),w,b
  6077  000B14  6E19               	movwf	___awmod@dividend,c
  6078  000B16  6A1A               	clrf	___awmod@dividend+1,c
  6079  000B18  BE19               	btfsc	___awmod@dividend,7,c
  6080  000B1A  061A               	decf	___awmod@dividend+1,f,c
  6081  000B1C  ECE4  F00E         	call	___awmod	;wreg free
  6082  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  6083  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6084  000B28  ECF1  F013         	call	___wmul	;wreg free
  6085  000B2C  0EF5               	movlw	low __npowers_
  6086  000B2E  2427               	addwf	?___wmul,w,c
  6087  000B30  6EF6               	movwf	tblptrl,c
  6088  000B32  0E7E               	movlw	high __npowers_
  6089  000B34  2028               	addwfc	?___wmul+1,w,c
  6090  000B36  6EF7               	movwf	tblptrh,c
  6091  000B38                     	if	1	;There are 3 active tblptr bytes
  6092  000B38  6AF8               	clrf	tblptru,c
  6093  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6094  000B3C  22F8               	addwfc	tblptru,f,c
  6095  000B3E                     	endif
  6096  000B3E  0009               	tblrd		*+
  6097  000B40  0100               	movlb	0	; () banked
  6098  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  6099  000B46  0009               	tblrd		*+
  6100  000B48  0100               	movlb	0	; () banked
  6101  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6102  000B4E  000A               	tblrd		*-
  6103  000B50  0100               	movlb	0	; () banked
  6104  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6105  000B56  EC6F  F009         	call	___ftmul	;wreg free
  6106  000B5A  D10E               	goto	L14
  6107  000B5C                     l4753:
  6108                           
  6109                           ;doprnt.c: 434: return _npowers_[scl];
  6110  000B5C  0100               	movlb	0	; () banked
  6111  000B5E  5172               	movf	scale@scl& (0+255),w,b
  6112  000B60  0D03               	mullw	3
  6113  000B62  0EF5               	movlw	low __npowers_
  6114  000B64  24F3               	addwf	prodl,w,c
  6115  000B66  6EF6               	movwf	tblptrl,c
  6116  000B68  0E7E               	movlw	high __npowers_
  6117  000B6A  D114               	goto	L13
  6118  000B6C                     l4757:
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;doprnt.c: 435: }
  6122                           ;doprnt.c: 436: if(scl>=110)
  6123  000B6C  0100               	movlb	0	; () banked
  6124  000B6E  5172               	movf	scale@scl& (0+255),w,b
  6125  000B70  0A80               	xorlw	128
  6126  000B72  0F12               	addlw	-238
  6127  000B74  A0D8               	btfss	status,0,c
  6128  000B76  D0A0               	goto	l4765
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6132  000B78  0E00               	movlw	0
  6133  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  6134  000B7C  0E03               	movlw	3
  6135  000B7E  6E29               	movwf	___wmul@multiplicand,c
  6136  000B80  0E00               	movlw	0
  6137  000B82  6E22               	movwf	___awdiv@divisor+1,c
  6138  000B84  0E0A               	movlw	10
  6139  000B86  6E21               	movwf	___awdiv@divisor,c
  6140  000B88  0E00               	movlw	0
  6141  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  6142  000B8C  0E64               	movlw	100
  6143  000B8E  6E1B               	movwf	___awmod@divisor,c
  6144  000B90  0100               	movlb	0	; () banked
  6145  000B92  5172               	movf	scale@scl& (0+255),w,b
  6146  000B94  6E19               	movwf	___awmod@dividend,c
  6147  000B96  6A1A               	clrf	___awmod@dividend+1,c
  6148  000B98  BE19               	btfsc	___awmod@dividend,7,c
  6149  000B9A  061A               	decf	___awmod@dividend+1,f,c
  6150  000B9C  ECE4  F00E         	call	___awmod	;wreg free
  6151  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6152  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6153  000BA8  ECFD  F00D         	call	___awdiv	;wreg free
  6154  000BAC  0E09               	movlw	9
  6155  000BAE  241F               	addwf	?___awdiv,w,c
  6156  000BB0  6E27               	movwf	___wmul@multiplier,c
  6157  000BB2  0E00               	movlw	0
  6158  000BB4  2020               	addwfc	?___awdiv+1,w,c
  6159  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  6160  000BB8  ECF1  F013         	call	___wmul	;wreg free
  6161  000BBC  0E1C               	movlw	low __powers_
  6162  000BBE  2427               	addwf	?___wmul,w,c
  6163  000BC0  6EF6               	movwf	tblptrl,c
  6164  000BC2  0E7F               	movlw	high __powers_
  6165  000BC4  2028               	addwfc	?___wmul+1,w,c
  6166  000BC6  6EF7               	movwf	tblptrh,c
  6167  000BC8                     	if	1	;There are 3 active tblptr bytes
  6168  000BC8  6AF8               	clrf	tblptru,c
  6169  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6170  000BCC  22F8               	addwfc	tblptru,f,c
  6171  000BCE                     	endif
  6172  000BCE  0009               	tblrd		*+
  6173  000BD0  0100               	movlb	0	; () banked
  6174  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6175  000BD6  0009               	tblrd		*+
  6176  000BD8  0100               	movlb	0	; () banked
  6177  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6178  000BDE  000A               	tblrd		*-
  6179  000BE0  0100               	movlb	0	; () banked
  6180  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6181  000BE6  0E00               	movlw	0
  6182  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6183  000BEA  0E64               	movlw	100
  6184  000BEC  6E21               	movwf	___awdiv@divisor,c
  6185  000BEE  0100               	movlb	0	; () banked
  6186  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6187  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6188  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6189  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6190  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6191  000BFA  ECFD  F00D         	call	___awdiv	;wreg free
  6192  000BFE  0E12               	movlw	18
  6193  000C00  241F               	addwf	?___awdiv,w,c
  6194  000C02  6E27               	movwf	___wmul@multiplier,c
  6195  000C04  0E00               	movlw	0
  6196  000C06  2020               	addwfc	?___awdiv+1,w,c
  6197  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6198  000C0A  0E00               	movlw	0
  6199  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6200  000C0E  0E03               	movlw	3
  6201  000C10  6E29               	movwf	___wmul@multiplicand,c
  6202  000C12  ECF1  F013         	call	___wmul	;wreg free
  6203  000C16  0E1C               	movlw	low __powers_
  6204  000C18  2427               	addwf	?___wmul,w,c
  6205  000C1A  6EF6               	movwf	tblptrl,c
  6206  000C1C  0E7F               	movlw	high __powers_
  6207  000C1E  2028               	addwfc	?___wmul+1,w,c
  6208  000C20  6EF7               	movwf	tblptrh,c
  6209  000C22                     	if	1	;There are 3 active tblptr bytes
  6210  000C22  6AF8               	clrf	tblptru,c
  6211  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6212  000C26  22F8               	addwfc	tblptru,f,c
  6213  000C28                     	endif
  6214  000C28  0009               	tblrd		*+
  6215  000C2A  0100               	movlb	0	; () banked
  6216  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6217  000C30  0009               	tblrd		*+
  6218  000C32  0100               	movlb	0	; () banked
  6219  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6220  000C38  000A               	tblrd		*-
  6221  000C3A  0100               	movlb	0	; () banked
  6222  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6223  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6224  000C44  C060  F06F         	movff	?___ftmul,_scale$2455
  6225  000C48  C061  F070         	movff	?___ftmul+1,_scale$2455+1
  6226  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2455+2
  6227                           
  6228                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6229  000C50  C06F  F060         	movff	_scale$2455,___ftmul@f1
  6230  000C54  C070  F061         	movff	_scale$2455+1,___ftmul@f1+1
  6231  000C58  C071  F062         	movff	_scale$2455+2,___ftmul@f1+2
  6232  000C5C  0E00               	movlw	0
  6233  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6234  000C60  0E03               	movlw	3
  6235  000C62  6E29               	movwf	___wmul@multiplicand,c
  6236  000C64  0E00               	movlw	0
  6237  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6238  000C68  0E0A               	movlw	10
  6239  000C6A  6E1B               	movwf	___awmod@divisor,c
  6240  000C6C  0100               	movlb	0	; () banked
  6241  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6242  000C70  6E19               	movwf	___awmod@dividend,c
  6243  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6244  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6245  000C76  061A               	decf	___awmod@dividend+1,f,c
  6246  000C78  ECE4  F00E         	call	___awmod	;wreg free
  6247  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6248  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6249  000C84  ECF1  F013         	call	___wmul	;wreg free
  6250  000C88  0E1C               	movlw	low __powers_
  6251  000C8A  2427               	addwf	?___wmul,w,c
  6252  000C8C  6EF6               	movwf	tblptrl,c
  6253  000C8E  0E7F               	movlw	high __powers_
  6254  000C90  2028               	addwfc	?___wmul+1,w,c
  6255  000C92  6EF7               	movwf	tblptrh,c
  6256  000C94                     	if	1	;There are 3 active tblptr bytes
  6257  000C94  6AF8               	clrf	tblptru,c
  6258  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6259  000C98  22F8               	addwfc	tblptru,f,c
  6260  000C9A                     	endif
  6261  000C9A  0009               	tblrd		*+
  6262  000C9C  0100               	movlb	0	; () banked
  6263  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6264  000CA2  0009               	tblrd		*+
  6265  000CA4  0100               	movlb	0	; () banked
  6266  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6267  000CAA  000A               	tblrd		*-
  6268  000CAC  0100               	movlb	0	; () banked
  6269  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6270  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6271  000CB6  D060               	goto	L14
  6272  000CB8                     l4765:
  6273                           
  6274                           ;doprnt.c: 438: else if(scl > 10)
  6275  000CB8  0100               	movlb	0	; () banked
  6276  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6277  000CBC  0A80               	xorlw	128
  6278  000CBE  0F75               	addlw	-139
  6279  000CC0  A0D8               	btfss	status,0,c
  6280  000CC2  D061               	goto	l4771
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6284  000CC4  0E00               	movlw	0
  6285  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6286  000CC8  0E0A               	movlw	10
  6287  000CCA  6E21               	movwf	___awdiv@divisor,c
  6288  000CCC  0100               	movlb	0	; () banked
  6289  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6290  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6291  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6292  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6293  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6294  000CD8  ECFD  F00D         	call	___awdiv	;wreg free
  6295  000CDC  0E09               	movlw	9
  6296  000CDE  241F               	addwf	?___awdiv,w,c
  6297  000CE0  6E27               	movwf	___wmul@multiplier,c
  6298  000CE2  0E00               	movlw	0
  6299  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6300  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6301  000CE8  0E00               	movlw	0
  6302  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6303  000CEC  0E03               	movlw	3
  6304  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6305  000CF0  ECF1  F013         	call	___wmul	;wreg free
  6306  000CF4  0E1C               	movlw	low __powers_
  6307  000CF6  2427               	addwf	?___wmul,w,c
  6308  000CF8  6EF6               	movwf	tblptrl,c
  6309  000CFA  0E7F               	movlw	high __powers_
  6310  000CFC  2028               	addwfc	?___wmul+1,w,c
  6311  000CFE  6EF7               	movwf	tblptrh,c
  6312  000D00                     	if	1	;There are 3 active tblptr bytes
  6313  000D00  6AF8               	clrf	tblptru,c
  6314  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6315  000D04  22F8               	addwfc	tblptru,f,c
  6316  000D06                     	endif
  6317  000D06  0009               	tblrd		*+
  6318  000D08  0100               	movlb	0	; () banked
  6319  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6320  000D0E  0009               	tblrd		*+
  6321  000D10  0100               	movlb	0	; () banked
  6322  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6323  000D16  000A               	tblrd		*-
  6324  000D18  0100               	movlb	0	; () banked
  6325  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6326  000D1E  0E00               	movlw	0
  6327  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6328  000D22  0E03               	movlw	3
  6329  000D24  6E29               	movwf	___wmul@multiplicand,c
  6330  000D26  0E00               	movlw	0
  6331  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6332  000D2A  0E0A               	movlw	10
  6333  000D2C  6E1B               	movwf	___awmod@divisor,c
  6334  000D2E  0100               	movlb	0	; () banked
  6335  000D30  5172               	movf	scale@scl& (0+255),w,b
  6336  000D32  6E19               	movwf	___awmod@dividend,c
  6337  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6338  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6339  000D38  061A               	decf	___awmod@dividend+1,f,c
  6340  000D3A  ECE4  F00E         	call	___awmod	;wreg free
  6341  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6342  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6343  000D46  ECF1  F013         	call	___wmul	;wreg free
  6344  000D4A  0E1C               	movlw	low __powers_
  6345  000D4C  2427               	addwf	?___wmul,w,c
  6346  000D4E  6EF6               	movwf	tblptrl,c
  6347  000D50  0E7F               	movlw	high __powers_
  6348  000D52  2028               	addwfc	?___wmul+1,w,c
  6349  000D54  6EF7               	movwf	tblptrh,c
  6350  000D56                     	if	1	;There are 3 active tblptr bytes
  6351  000D56  6AF8               	clrf	tblptru,c
  6352  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6353  000D5A  22F8               	addwfc	tblptru,f,c
  6354  000D5C                     	endif
  6355  000D5C  0009               	tblrd		*+
  6356  000D5E  0100               	movlb	0	; () banked
  6357  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6358  000D64  0009               	tblrd		*+
  6359  000D66  0100               	movlb	0	; () banked
  6360  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6361  000D6C  000A               	tblrd		*-
  6362  000D6E  0100               	movlb	0	; () banked
  6363  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6364  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6365  000D78                     L14:
  6366  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6367  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6368  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6369  000D84  D018               	goto	l468
  6370  000D86                     l4771:
  6371                           
  6372                           ;doprnt.c: 440: return _powers_[scl];
  6373  000D86  0100               	movlb	0	; () banked
  6374  000D88  5172               	movf	scale@scl& (0+255),w,b
  6375  000D8A  0D03               	mullw	3
  6376  000D8C  0E1C               	movlw	low __powers_
  6377  000D8E  24F3               	addwf	prodl,w,c
  6378  000D90  6EF6               	movwf	tblptrl,c
  6379  000D92  0E7F               	movlw	high __powers_
  6380  000D94                     L13:
  6381  000D94  20F4               	addwfc	prodh,w,c
  6382  000D96  6EF7               	movwf	tblptrh,c
  6383  000D98                     	if	1	;There are 3 active tblptr bytes
  6384  000D98  6AF8               	clrf	tblptru,c
  6385  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6386  000D9C  22F8               	addwfc	tblptru,f,c
  6387  000D9E                     	endif
  6388  000D9E  0009               	tblrd		*+
  6389  000DA0  0100               	movlb	0	; () banked
  6390  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6391  000DA6  0009               	tblrd		*+
  6392  000DA8  0100               	movlb	0	; () banked
  6393  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6394  000DAE  000A               	tblrd		*-
  6395  000DB0  0100               	movlb	0	; () banked
  6396  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6397  000DB6                     l468:
  6398  000DB6  0012               	return	
  6399  000DB8                     __end_of_scale:
  6400                           	opt stack 0
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodh	equ	0xFF4
  6406                           prodl	equ	0xFF3
  6407                           intcon	equ	0xFF2
  6408                           indf0	equ	0xFEF
  6409                           postinc0	equ	0xFEE
  6410                           fsr0h	equ	0xFEA
  6411                           fsr0l	equ	0xFE9
  6412                           wreg	equ	0xFE8
  6413                           postinc1	equ	0xFE6
  6414                           postdec1	equ	0xFE5
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _fround *****************
  6424 ;; Defined at:
  6425 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  prec            1    wreg     unsigned char 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  prec            1   21[BANK0 ] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  3   12[BANK0 ] unsigned char 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6439 ;;      Params:         0       3       0       0       0       0       0       0       0
  6440 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6442 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6443 ;;Total ram usage:       10 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    6
  6446 ;; This function calls:
  6447 ;;		___awdiv
  6448 ;;		___awmod
  6449 ;;		___ftmul
  6450 ;;		___wmul
  6451 ;; This function is called by:
  6452 ;;		_sprintf
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text29
  6457  000DB8                     __ptext29:
  6458                           	opt stack 0
  6459  000DB8                     _fround:
  6460                           	opt stack 21
  6461                           
  6462                           ;incstack = 0
  6463                           ;fround@prec stored from wreg
  6464  000DB8  0100               	movlb	0	; () banked
  6465  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;doprnt.c: 413: if(prec>=110)
  6469  000DBC  0E6D               	movlw	109
  6470  000DBE  0100               	movlb	0	; () banked
  6471  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6472  000DC2  D0B1               	goto	l4725
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6476  000DC4  0E00               	movlw	0
  6477  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6478  000DC8  0E03               	movlw	3
  6479  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6480  000DCC  0E00               	movlw	0
  6481  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6482  000DD0  0E0A               	movlw	10
  6483  000DD2  6E21               	movwf	___awdiv@divisor,c
  6484  000DD4  0E00               	movlw	0
  6485  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6486  000DD8  0E64               	movlw	100
  6487  000DDA  6E1B               	movwf	___awmod@divisor,c
  6488  000DDC  0100               	movlb	0	; () banked
  6489  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6490  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6491  000DE4  ECE4  F00E         	call	___awmod	;wreg free
  6492  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6493  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6494  000DF0  ECFD  F00D         	call	___awdiv	;wreg free
  6495  000DF4  0E09               	movlw	9
  6496  000DF6  241F               	addwf	?___awdiv,w,c
  6497  000DF8  6E27               	movwf	___wmul@multiplier,c
  6498  000DFA  0E00               	movlw	0
  6499  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6500  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6501  000E00  ECF1  F013         	call	___wmul	;wreg free
  6502  000E04  0EF5               	movlw	low __npowers_
  6503  000E06  2427               	addwf	?___wmul,w,c
  6504  000E08  6EF6               	movwf	tblptrl,c
  6505  000E0A  0E7E               	movlw	high __npowers_
  6506  000E0C  2028               	addwfc	?___wmul+1,w,c
  6507  000E0E  6EF7               	movwf	tblptrh,c
  6508  000E10                     	if	1	;There are 3 active tblptr bytes
  6509  000E10  6AF8               	clrf	tblptru,c
  6510  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6511  000E14  22F8               	addwfc	tblptru,f,c
  6512  000E16                     	endif
  6513  000E16  0009               	tblrd		*+
  6514  000E18  0100               	movlb	0	; () banked
  6515  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6516  000E1E  0009               	tblrd		*+
  6517  000E20  0100               	movlb	0	; () banked
  6518  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6519  000E26  000A               	tblrd		*-
  6520  000E28  0100               	movlb	0	; () banked
  6521  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6522  000E2E  0E00               	movlw	0
  6523  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6524  000E32  0E64               	movlw	100
  6525  000E34  6E21               	movwf	___awdiv@divisor,c
  6526  000E36  0100               	movlb	0	; () banked
  6527  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6528  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6529  000E3E  ECFD  F00D         	call	___awdiv	;wreg free
  6530  000E42  0E12               	movlw	18
  6531  000E44  241F               	addwf	?___awdiv,w,c
  6532  000E46  6E27               	movwf	___wmul@multiplier,c
  6533  000E48  0E00               	movlw	0
  6534  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6535  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6536  000E4E  0E00               	movlw	0
  6537  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6538  000E52  0E03               	movlw	3
  6539  000E54  6E29               	movwf	___wmul@multiplicand,c
  6540  000E56  ECF1  F013         	call	___wmul	;wreg free
  6541  000E5A  0EF5               	movlw	low __npowers_
  6542  000E5C  2427               	addwf	?___wmul,w,c
  6543  000E5E  6EF6               	movwf	tblptrl,c
  6544  000E60  0E7E               	movlw	high __npowers_
  6545  000E62  2028               	addwfc	?___wmul+1,w,c
  6546  000E64  6EF7               	movwf	tblptrh,c
  6547  000E66                     	if	1	;There are 3 active tblptr bytes
  6548  000E66  6AF8               	clrf	tblptru,c
  6549  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6550  000E6A  22F8               	addwfc	tblptru,f,c
  6551  000E6C                     	endif
  6552  000E6C  0009               	tblrd		*+
  6553  000E6E  0100               	movlb	0	; () banked
  6554  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6555  000E74  0009               	tblrd		*+
  6556  000E76  0100               	movlb	0	; () banked
  6557  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6558  000E7C  000A               	tblrd		*-
  6559  000E7E  0100               	movlb	0	; () banked
  6560  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6561  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6562  000E88  C060  F072         	movff	?___ftmul,_fround$2453
  6563  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2453+1
  6564  000E90  C062  F074         	movff	?___ftmul+2,_fround$2453+2
  6565                           
  6566                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6567  000E94  0E00               	movlw	0
  6568  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6569  000E98  0E03               	movlw	3
  6570  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6571  000E9C  0E00               	movlw	0
  6572  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6573  000EA0  0E0A               	movlw	10
  6574  000EA2  6E1B               	movwf	___awmod@divisor,c
  6575  000EA4  0100               	movlb	0	; () banked
  6576  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6577  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6578  000EAC  ECE4  F00E         	call	___awmod	;wreg free
  6579  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6580  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6581  000EB8  ECF1  F013         	call	___wmul	;wreg free
  6582  000EBC  0EF5               	movlw	low __npowers_
  6583  000EBE  2427               	addwf	?___wmul,w,c
  6584  000EC0  6EF6               	movwf	tblptrl,c
  6585  000EC2  0E7E               	movlw	high __npowers_
  6586  000EC4  2028               	addwfc	?___wmul+1,w,c
  6587  000EC6  6EF7               	movwf	tblptrh,c
  6588  000EC8                     	if	1	;There are 3 active tblptr bytes
  6589  000EC8  6AF8               	clrf	tblptru,c
  6590  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6591  000ECC  22F8               	addwfc	tblptru,f,c
  6592  000ECE                     	endif
  6593  000ECE  0009               	tblrd		*+
  6594  000ED0  0100               	movlb	0	; () banked
  6595  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6596  000ED6  0009               	tblrd		*+
  6597  000ED8  0100               	movlb	0	; () banked
  6598  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6599  000EDE  000A               	tblrd		*-
  6600  000EE0  0100               	movlb	0	; () banked
  6601  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6602  000EE6  C072  F060         	movff	_fround$2453,___ftmul@f1
  6603  000EEA  C073  F061         	movff	_fround$2453+1,___ftmul@f1+1
  6604  000EEE  C074  F062         	movff	_fround$2453+2,___ftmul@f1+2
  6605  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6606  000EF6  C060  F06F         	movff	?___ftmul,_fround$2454
  6607  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2454+1
  6608  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2454+2
  6609                           
  6610                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6611  000F02  C06F  F060         	movff	_fround$2454,___ftmul@f1
  6612  000F06  C070  F061         	movff	_fround$2454+1,___ftmul@f1+1
  6613  000F0A  C071  F062         	movff	_fround$2454+2,___ftmul@f1+2
  6614  000F0E  0E00               	movlw	0
  6615  000F10  0100               	movlb	0	; () banked
  6616  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6617  000F14  0E00               	movlw	0
  6618  000F16  0100               	movlb	0	; () banked
  6619  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6620  000F1A  0E3F               	movlw	63
  6621  000F1C  0100               	movlb	0	; () banked
  6622  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6623  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6624  000F24  D095               	goto	L16
  6625  000F26                     l4725:
  6626                           
  6627                           ;doprnt.c: 415: else if(prec > 10)
  6628  000F26  0E0A               	movlw	10
  6629  000F28  0100               	movlb	0	; () banked
  6630  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6631  000F2C  D06E               	goto	l4733
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6635  000F2E  0E00               	movlw	0
  6636  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6637  000F32  0E03               	movlw	3
  6638  000F34  6E29               	movwf	___wmul@multiplicand,c
  6639  000F36  0E00               	movlw	0
  6640  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6641  000F3A  0E0A               	movlw	10
  6642  000F3C  6E1B               	movwf	___awmod@divisor,c
  6643  000F3E  0100               	movlb	0	; () banked
  6644  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6645  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6646  000F46  ECE4  F00E         	call	___awmod	;wreg free
  6647  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6648  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6649  000F52  ECF1  F013         	call	___wmul	;wreg free
  6650  000F56  0EF5               	movlw	low __npowers_
  6651  000F58  2427               	addwf	?___wmul,w,c
  6652  000F5A  6EF6               	movwf	tblptrl,c
  6653  000F5C  0E7E               	movlw	high __npowers_
  6654  000F5E  2028               	addwfc	?___wmul+1,w,c
  6655  000F60  6EF7               	movwf	tblptrh,c
  6656  000F62                     	if	1	;There are 3 active tblptr bytes
  6657  000F62  6AF8               	clrf	tblptru,c
  6658  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6659  000F66  22F8               	addwfc	tblptru,f,c
  6660  000F68                     	endif
  6661  000F68  0009               	tblrd		*+
  6662  000F6A  0100               	movlb	0	; () banked
  6663  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6664  000F70  0009               	tblrd		*+
  6665  000F72  0100               	movlb	0	; () banked
  6666  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6667  000F78  000A               	tblrd		*-
  6668  000F7A  0100               	movlb	0	; () banked
  6669  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6670  000F80  0E00               	movlw	0
  6671  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6672  000F84  0E0A               	movlw	10
  6673  000F86  6E21               	movwf	___awdiv@divisor,c
  6674  000F88  0100               	movlb	0	; () banked
  6675  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6676  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6677  000F90  ECFD  F00D         	call	___awdiv	;wreg free
  6678  000F94  0E09               	movlw	9
  6679  000F96  241F               	addwf	?___awdiv,w,c
  6680  000F98  6E27               	movwf	___wmul@multiplier,c
  6681  000F9A  0E00               	movlw	0
  6682  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6683  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6684  000FA0  0E00               	movlw	0
  6685  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6686  000FA4  0E03               	movlw	3
  6687  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6688  000FA8  ECF1  F013         	call	___wmul	;wreg free
  6689  000FAC  0EF5               	movlw	low __npowers_
  6690  000FAE  2427               	addwf	?___wmul,w,c
  6691  000FB0  6EF6               	movwf	tblptrl,c
  6692  000FB2  0E7E               	movlw	high __npowers_
  6693  000FB4  2028               	addwfc	?___wmul+1,w,c
  6694  000FB6  6EF7               	movwf	tblptrh,c
  6695  000FB8                     	if	1	;There are 3 active tblptr bytes
  6696  000FB8  6AF8               	clrf	tblptru,c
  6697  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6698  000FBC  22F8               	addwfc	tblptru,f,c
  6699  000FBE                     	endif
  6700  000FBE  0009               	tblrd		*+
  6701  000FC0  0100               	movlb	0	; () banked
  6702  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6703  000FC6  0009               	tblrd		*+
  6704  000FC8  0100               	movlb	0	; () banked
  6705  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6706  000FCE  000A               	tblrd		*-
  6707  000FD0  0100               	movlb	0	; () banked
  6708  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6709  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6710  000FDA  C060  F072         	movff	?___ftmul,_fround$2453
  6711  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2453+1
  6712  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2453+2
  6713                           
  6714                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6715  000FE6  C072  F060         	movff	_fround$2453,___ftmul@f1
  6716  000FEA  C073  F061         	movff	_fround$2453+1,___ftmul@f1+1
  6717  000FEE  C074  F062         	movff	_fround$2453+2,___ftmul@f1+2
  6718  000FF2  0E00               	movlw	0
  6719  000FF4  0100               	movlb	0	; () banked
  6720  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6721  000FF8  0E00               	movlw	0
  6722  000FFA  0100               	movlb	0	; () banked
  6723  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6724  000FFE  0E3F               	movlw	63
  6725  001000  0100               	movlb	0	; () banked
  6726  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6727  001004  EC6F  F009         	call	___ftmul	;wreg free
  6728  001008  D023               	goto	L16
  6729  00100A                     l4733:
  6730                           
  6731                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6732  00100A  0100               	movlb	0	; () banked
  6733  00100C  5175               	movf	fround@prec& (0+255),w,b
  6734  00100E  0D03               	mullw	3
  6735  001010  0EF5               	movlw	low __npowers_
  6736  001012  24F3               	addwf	prodl,w,c
  6737  001014  6EF6               	movwf	tblptrl,c
  6738  001016  0E7E               	movlw	high __npowers_
  6739  001018  20F4               	addwfc	prodh,w,c
  6740  00101A  6EF7               	movwf	tblptrh,c
  6741  00101C                     	if	1	;There are 3 active tblptr bytes
  6742  00101C  6AF8               	clrf	tblptru,c
  6743  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6744  001020  22F8               	addwfc	tblptru,f,c
  6745  001022                     	endif
  6746  001022  0009               	tblrd		*+
  6747  001024  0100               	movlb	0	; () banked
  6748  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6749  00102A  0009               	tblrd		*+
  6750  00102C  0100               	movlb	0	; () banked
  6751  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6752  001032  000A               	tblrd		*-
  6753  001034  0100               	movlb	0	; () banked
  6754  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6755  00103A  0E00               	movlw	0
  6756  00103C  0100               	movlb	0	; () banked
  6757  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6758  001040  0E00               	movlw	0
  6759  001042  0100               	movlb	0	; () banked
  6760  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6761  001046  0E3F               	movlw	63
  6762  001048  0100               	movlb	0	; () banked
  6763  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6764  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6765  001050                     L16:
  6766  001050  C060  F06C         	movff	?___ftmul,?_fround
  6767  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6768  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6769  00105C  0012               	return	
  6770  00105E                     __end_of_fround:
  6771                           	opt stack 0
  6772                           tblptru	equ	0xFF8
  6773                           tblptrh	equ	0xFF7
  6774                           tblptrl	equ	0xFF6
  6775                           tablat	equ	0xFF5
  6776                           prodh	equ	0xFF4
  6777                           prodl	equ	0xFF3
  6778                           intcon	equ	0xFF2
  6779                           indf0	equ	0xFEF
  6780                           postinc0	equ	0xFEE
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           postinc1	equ	0xFE6
  6785                           postdec1	equ	0xFE5
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function ___wmul *****************
  6795 ;; Defined at:
  6796 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  multiplier      2   38[COMRAM] unsigned int 
  6799 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  product         2   42[COMRAM] unsigned int 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  2   38[COMRAM] unsigned int 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0, prodl, prodh
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6811 ;;      Params:         4       0       0       0       0       0       0       0       0
  6812 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6814 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6815 ;;Total ram usage:        6 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    4
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_fround
  6822 ;;		_scale
  6823 ;;		_sprintf
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text30
  6828  0027E2                     __ptext30:
  6829                           	opt stack 0
  6830  0027E2                     ___wmul:
  6831                           	opt stack 22
  6832                           
  6833                           ;incstack = 0
  6834  0027E2  5027               	movf	___wmul@multiplier,w,c
  6835  0027E4  0229               	mulwf	___wmul@multiplicand,c
  6836  0027E6  CFF3 F02B          	movff	prodl,___wmul@product
  6837  0027EA  CFF4 F02C          	movff	prodh,___wmul@product+1
  6838  0027EE  5027               	movf	___wmul@multiplier,w,c
  6839  0027F0  022A               	mulwf	___wmul@multiplicand+1,c
  6840  0027F2  50F3               	movf	prodl,w,c
  6841  0027F4  262C               	addwf	___wmul@product+1,f,c
  6842  0027F6  5028               	movf	___wmul@multiplier+1,w,c
  6843  0027F8  0229               	mulwf	___wmul@multiplicand,c
  6844  0027FA  50F3               	movf	prodl,w,c
  6845  0027FC  262C               	addwf	___wmul@product+1,f,c
  6846  0027FE  C02B  F027         	movff	___wmul@product,?___wmul
  6847  002802  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6848  002806  0012               	return	
  6849  002808                     __end_of___wmul:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           indf0	equ	0xFEF
  6859                           postinc0	equ	0xFEE
  6860                           fsr0h	equ	0xFEA
  6861                           fsr0l	equ	0xFE9
  6862                           wreg	equ	0xFE8
  6863                           postinc1	equ	0xFE6
  6864                           postdec1	equ	0xFE5
  6865                           fsr1l	equ	0xFE1
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function ___ftmul *****************
  6874 ;; Defined at:
  6875 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  f1              3    0[BANK0 ] float 
  6878 ;;  f2              3    3[BANK0 ] float 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6881 ;;  sign            1   11[BANK0 ] unsigned char 
  6882 ;;  cntr            1   10[BANK0 ] unsigned char 
  6883 ;;  exp             1    6[BANK0 ] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  3    0[BANK0 ] float 
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6893 ;;      Params:         0       6       0       0       0       0       0       0       0
  6894 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6895 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6896 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6897 ;;Total ram usage:       15 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    5
  6900 ;; This function calls:
  6901 ;;		___ftpack
  6902 ;; This function is called by:
  6903 ;;		_PWM_DutyCycle1
  6904 ;;		_PWM_DutyCycle2
  6905 ;;		_fround
  6906 ;;		_scale
  6907 ;;		_sprintf
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text31
  6912  0012DE                     __ptext31:
  6913                           	opt stack 0
  6914  0012DE                     ___ftmul:
  6915                           	opt stack 21
  6916                           
  6917                           ;incstack = 0
  6918  0012DE  0100               	movlb	0	; () banked
  6919  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6920  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6921  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6922  0012E8  0100               	movlb	0	; () banked
  6923  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6924  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6925  0012EE  E301               	bnc	u4741
  6926  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6927  0012F2                     u4741:
  6928  0012F2  502D               	movf	??___ftmul,w,c
  6929  0012F4  0100               	movlb	0	; () banked
  6930  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6931  0012F8  0100               	movlb	0	; () banked
  6932  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6933  0012FC  D001               	goto	l4497
  6934  0012FE  D010               	goto	u4770
  6935  001300                     l4497:
  6936                           
  6937                           ; BSR set to: 0
  6938  001300  0100               	movlb	0	; () banked
  6939  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6940  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6941  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6942  00130A  0100               	movlb	0	; () banked
  6943  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6944  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6945  001310  E301               	bnc	u4761
  6946  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6947  001314                     u4761:
  6948  001314  502D               	movf	??___ftmul,w,c
  6949  001316  0100               	movlb	0	; () banked
  6950  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6951  00131A  0100               	movlb	0	; () banked
  6952  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  6953  00131E  D00A               	goto	l4503
  6954  001320                     u4770:
  6955                           
  6956                           ; BSR set to: 0
  6957  001320  0E00               	movlw	0
  6958  001322  0100               	movlb	0	; () banked
  6959  001324  6F60               	movwf	?___ftmul& (0+255),b
  6960  001326  0E00               	movlw	0
  6961  001328  0100               	movlb	0	; () banked
  6962  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6963  00132C  0E00               	movlw	0
  6964  00132E  0100               	movlb	0	; () banked
  6965  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6966  001332  D080               	goto	l1062
  6967  001334                     l4503:
  6968                           
  6969                           ; BSR set to: 0
  6970  001334  0100               	movlb	0	; () banked
  6971  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  6972  001338  0F7B               	addlw	123
  6973  00133A  0100               	movlb	0	; () banked
  6974  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  6975                           
  6976                           ; BSR set to: 0
  6977  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6978  001342  0100               	movlb	0	; () banked
  6979  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6980  001346  0100               	movlb	0	; () banked
  6981  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6982  00134A  0E80               	movlw	128
  6983  00134C  0100               	movlb	0	; () banked
  6984  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  6985                           
  6986                           ; BSR set to: 0
  6987  001350  0100               	movlb	0	; () banked
  6988  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6989                           
  6990                           ; BSR set to: 0
  6991  001354  0100               	movlb	0	; () banked
  6992  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6993                           
  6994                           ; BSR set to: 0
  6995  001358  0EFF               	movlw	255
  6996  00135A  0100               	movlb	0	; () banked
  6997  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  6998  00135E  0EFF               	movlw	255
  6999  001360  0100               	movlb	0	; () banked
  7000  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7001  001364  0E00               	movlw	0
  7002  001366  0100               	movlb	0	; () banked
  7003  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7004                           
  7005                           ; BSR set to: 0
  7006  00136A  0E00               	movlw	0
  7007  00136C  0100               	movlb	0	; () banked
  7008  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  7009  001370  0E00               	movlw	0
  7010  001372  0100               	movlb	0	; () banked
  7011  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7012  001376  0E00               	movlw	0
  7013  001378  0100               	movlb	0	; () banked
  7014  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7015                           
  7016                           ; BSR set to: 0
  7017  00137C  0E07               	movlw	7
  7018  00137E  0100               	movlb	0	; () banked
  7019  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7020  001382                     l4517:
  7021                           
  7022                           ; BSR set to: 0
  7023  001382  0100               	movlb	0	; () banked
  7024  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  7025  001386  D00C               	goto	l4521
  7026                           
  7027                           ; BSR set to: 0
  7028  001388  0100               	movlb	0	; () banked
  7029  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  7030  00138C  0100               	movlb	0	; () banked
  7031  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7032  001390  0100               	movlb	0	; () banked
  7033  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7034  001394  0100               	movlb	0	; () banked
  7035  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7036  001398  0100               	movlb	0	; () banked
  7037  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7038  00139C  0100               	movlb	0	; () banked
  7039  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7040  0013A0                     l4521:
  7041                           
  7042                           ; BSR set to: 0
  7043  0013A0  0100               	movlb	0	; () banked
  7044  0013A2  90D8               	bcf	status,0,c
  7045  0013A4  0100               	movlb	0	; () banked
  7046  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7047  0013A8  0100               	movlb	0	; () banked
  7048  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7049  0013AC  0100               	movlb	0	; () banked
  7050  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7051  0013B0  0100               	movlb	0	; () banked
  7052  0013B2  90D8               	bcf	status,0,c
  7053  0013B4  0100               	movlb	0	; () banked
  7054  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  7055  0013B8  0100               	movlb	0	; () banked
  7056  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7057  0013BC  0100               	movlb	0	; () banked
  7058  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7059                           
  7060                           ; BSR set to: 0
  7061  0013C0  0100               	movlb	0	; () banked
  7062  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7063  0013C4  D7DE               	goto	l4517
  7064                           
  7065                           ; BSR set to: 0
  7066                           
  7067                           ; BSR set to: 0
  7068  0013C6  0E09               	movlw	9
  7069  0013C8  0100               	movlb	0	; () banked
  7070  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7071  0013CC                     l4527:
  7072                           
  7073                           ; BSR set to: 0
  7074  0013CC  0100               	movlb	0	; () banked
  7075  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  7076  0013D0  D00C               	goto	l4531
  7077                           
  7078                           ; BSR set to: 0
  7079  0013D2  0100               	movlb	0	; () banked
  7080  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  7081  0013D6  0100               	movlb	0	; () banked
  7082  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7083  0013DA  0100               	movlb	0	; () banked
  7084  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7085  0013DE  0100               	movlb	0	; () banked
  7086  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7087  0013E2  0100               	movlb	0	; () banked
  7088  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7089  0013E6  0100               	movlb	0	; () banked
  7090  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7091  0013EA                     l4531:
  7092                           
  7093                           ; BSR set to: 0
  7094  0013EA  0100               	movlb	0	; () banked
  7095  0013EC  90D8               	bcf	status,0,c
  7096  0013EE  0100               	movlb	0	; () banked
  7097  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7098  0013F2  0100               	movlb	0	; () banked
  7099  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7100  0013F6  0100               	movlb	0	; () banked
  7101  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7102  0013FA  0100               	movlb	0	; () banked
  7103  0013FC  90D8               	bcf	status,0,c
  7104  0013FE  0100               	movlb	0	; () banked
  7105  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7106  001402  0100               	movlb	0	; () banked
  7107  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7108  001406  0100               	movlb	0	; () banked
  7109  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7110                           
  7111                           ; BSR set to: 0
  7112  00140A  0100               	movlb	0	; () banked
  7113  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7114  00140E  D7DE               	goto	l4527
  7115                           
  7116                           ; BSR set to: 0
  7117                           
  7118                           ; BSR set to: 0
  7119  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  7120  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7121  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7122  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  7123  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  7124  001424  EC56  F00D         	call	___ftpack	;wreg free
  7125  001428  C019  F060         	movff	?___ftpack,?___ftmul
  7126  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  7127  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  7128  001434                     l1062:
  7129  001434  0012               	return	
  7130  001436                     __end_of___ftmul:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           postinc1	equ	0xFE6
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function ___awmod *****************
  7155 ;; Defined at:
  7156 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  dividend        2   24[COMRAM] int 
  7159 ;;  divisor         2   26[COMRAM] int 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  sign            1   29[COMRAM] unsigned char 
  7162 ;;  counter         1   28[COMRAM] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  2   24[COMRAM] int 
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0, prodl
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7172 ;;      Params:         4       0       0       0       0       0       0       0       0
  7173 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7175 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7176 ;;Total ram usage:        6 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    4
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		_fround
  7183 ;;		_scale
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text32
  7188  001DC8                     __ptext32:
  7189                           	opt stack 0
  7190  001DC8                     ___awmod:
  7191                           	opt stack 22
  7192                           
  7193                           ;incstack = 0
  7194  001DC8  0E00               	movlw	0
  7195  001DCA  6E1E               	movwf	___awmod@sign,c
  7196  001DCC  501A               	movf	___awmod@dividend+1,w,c
  7197  001DCE  0A80               	xorlw	128
  7198  001DD0  6EF3               	movwf	prodl,c
  7199  001DD2  0E80               	movlw	128
  7200  001DD4  5CF3               	subwf	prodl,w,c
  7201  001DD6  0E00               	movlw	0
  7202  001DD8  B4D8               	btfsc	status,2,c
  7203  001DDA  5C19               	subwf	___awmod@dividend,w,c
  7204  001DDC  B0D8               	btfsc	status,0,c
  7205  001DDE  D006               	goto	l4591
  7206  001DE0  6C19               	negf	___awmod@dividend,c
  7207  001DE2  1E1A               	comf	___awmod@dividend+1,f,c
  7208  001DE4  B0D8               	btfsc	status,0,c
  7209  001DE6  2A1A               	incf	___awmod@dividend+1,f,c
  7210  001DE8  0E01               	movlw	1
  7211  001DEA  6E1E               	movwf	___awmod@sign,c
  7212  001DEC                     l4591:
  7213  001DEC  501C               	movf	___awmod@divisor+1,w,c
  7214  001DEE  0A80               	xorlw	128
  7215  001DF0  6EF3               	movwf	prodl,c
  7216  001DF2  0E80               	movlw	128
  7217  001DF4  5CF3               	subwf	prodl,w,c
  7218  001DF6  0E00               	movlw	0
  7219  001DF8  B4D8               	btfsc	status,2,c
  7220  001DFA  5C1B               	subwf	___awmod@divisor,w,c
  7221  001DFC  B0D8               	btfsc	status,0,c
  7222  001DFE  D004               	goto	l4595
  7223  001E00  6C1B               	negf	___awmod@divisor,c
  7224  001E02  1E1C               	comf	___awmod@divisor+1,f,c
  7225  001E04  B0D8               	btfsc	status,0,c
  7226  001E06  2A1C               	incf	___awmod@divisor+1,f,c
  7227  001E08                     l4595:
  7228  001E08  501C               	movf	___awmod@divisor+1,w,c
  7229  001E0A  101B               	iorwf	___awmod@divisor,w,c
  7230  001E0C  B4D8               	btfsc	status,2,c
  7231  001E0E  D018               	goto	l4611
  7232  001E10  0E01               	movlw	1
  7233  001E12  6E1D               	movwf	___awmod@counter,c
  7234  001E14  D004               	goto	l4601
  7235  001E16                     l4599:
  7236  001E16  90D8               	bcf	status,0,c
  7237  001E18  361B               	rlcf	___awmod@divisor,f,c
  7238  001E1A  361C               	rlcf	___awmod@divisor+1,f,c
  7239  001E1C  2A1D               	incf	___awmod@counter,f,c
  7240  001E1E                     l4601:
  7241  001E1E  AE1C               	btfss	___awmod@divisor+1,7,c
  7242  001E20  D7FA               	goto	l4599
  7243  001E22                     l4603:
  7244  001E22  501B               	movf	___awmod@divisor,w,c
  7245  001E24  5C19               	subwf	___awmod@dividend,w,c
  7246  001E26  501C               	movf	___awmod@divisor+1,w,c
  7247  001E28  581A               	subwfb	___awmod@dividend+1,w,c
  7248  001E2A  A0D8               	btfss	status,0,c
  7249  001E2C  D004               	goto	l4607
  7250  001E2E  501B               	movf	___awmod@divisor,w,c
  7251  001E30  5E19               	subwf	___awmod@dividend,f,c
  7252  001E32  501C               	movf	___awmod@divisor+1,w,c
  7253  001E34  5A1A               	subwfb	___awmod@dividend+1,f,c
  7254  001E36                     l4607:
  7255  001E36  90D8               	bcf	status,0,c
  7256  001E38  321C               	rrcf	___awmod@divisor+1,f,c
  7257  001E3A  321B               	rrcf	___awmod@divisor,f,c
  7258  001E3C  2E1D               	decfsz	___awmod@counter,f,c
  7259  001E3E  D7F1               	goto	l4603
  7260  001E40                     l4611:
  7261  001E40  501E               	movf	___awmod@sign,w,c
  7262  001E42  B4D8               	btfsc	status,2,c
  7263  001E44  D004               	goto	l4615
  7264  001E46  6C19               	negf	___awmod@dividend,c
  7265  001E48  1E1A               	comf	___awmod@dividend+1,f,c
  7266  001E4A  B0D8               	btfsc	status,0,c
  7267  001E4C  2A1A               	incf	___awmod@dividend+1,f,c
  7268  001E4E                     l4615:
  7269  001E4E  C019  F019         	movff	___awmod@dividend,?___awmod
  7270  001E52  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7271  001E56  0012               	return	
  7272  001E58                     __end_of___awmod:
  7273                           	opt stack 0
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           indf0	equ	0xFEF
  7282                           postinc0	equ	0xFEE
  7283                           fsr0h	equ	0xFEA
  7284                           fsr0l	equ	0xFE9
  7285                           wreg	equ	0xFE8
  7286                           postinc1	equ	0xFE6
  7287                           postdec1	equ	0xFE5
  7288                           fsr1l	equ	0xFE1
  7289                           indf2	equ	0xFDF
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296 ;; *************** function ___awdiv *****************
  7297 ;; Defined at:
  7298 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  dividend        2   30[COMRAM] int 
  7301 ;;  divisor         2   32[COMRAM] int 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  quotient        2   36[COMRAM] int 
  7304 ;;  sign            1   35[COMRAM] unsigned char 
  7305 ;;  counter         1   34[COMRAM] unsigned char 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  2   30[COMRAM] int 
  7308 ;; Registers used:
  7309 ;;		wreg, status,2, status,0, prodl
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7315 ;;      Params:         4       0       0       0       0       0       0       0       0
  7316 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7318 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7319 ;;Total ram usage:        8 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    4
  7322 ;; This function calls:
  7323 ;;		Nothing
  7324 ;; This function is called by:
  7325 ;;		_fround
  7326 ;;		_scale
  7327 ;;		_sprintf
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text33
  7332  001BFA                     __ptext33:
  7333                           	opt stack 0
  7334  001BFA                     ___awdiv:
  7335                           	opt stack 22
  7336                           
  7337                           ;incstack = 0
  7338  001BFA  0E00               	movlw	0
  7339  001BFC  6E24               	movwf	___awdiv@sign,c
  7340  001BFE  5022               	movf	___awdiv@divisor+1,w,c
  7341  001C00  0A80               	xorlw	128
  7342  001C02  6EF3               	movwf	prodl,c
  7343  001C04  0E80               	movlw	128
  7344  001C06  5CF3               	subwf	prodl,w,c
  7345  001C08  0E00               	movlw	0
  7346  001C0A  B4D8               	btfsc	status,2,c
  7347  001C0C  5C21               	subwf	___awdiv@divisor,w,c
  7348  001C0E  B0D8               	btfsc	status,0,c
  7349  001C10  D006               	goto	l4547
  7350  001C12  6C21               	negf	___awdiv@divisor,c
  7351  001C14  1E22               	comf	___awdiv@divisor+1,f,c
  7352  001C16  B0D8               	btfsc	status,0,c
  7353  001C18  2A22               	incf	___awdiv@divisor+1,f,c
  7354  001C1A  0E01               	movlw	1
  7355  001C1C  6E24               	movwf	___awdiv@sign,c
  7356  001C1E                     l4547:
  7357  001C1E  5020               	movf	___awdiv@dividend+1,w,c
  7358  001C20  0A80               	xorlw	128
  7359  001C22  6EF3               	movwf	prodl,c
  7360  001C24  0E80               	movlw	128
  7361  001C26  5CF3               	subwf	prodl,w,c
  7362  001C28  0E00               	movlw	0
  7363  001C2A  B4D8               	btfsc	status,2,c
  7364  001C2C  5C1F               	subwf	___awdiv@dividend,w,c
  7365  001C2E  B0D8               	btfsc	status,0,c
  7366  001C30  D006               	goto	l4553
  7367  001C32  6C1F               	negf	___awdiv@dividend,c
  7368  001C34  1E20               	comf	___awdiv@dividend+1,f,c
  7369  001C36  B0D8               	btfsc	status,0,c
  7370  001C38  2A20               	incf	___awdiv@dividend+1,f,c
  7371  001C3A  0E01               	movlw	1
  7372  001C3C  1A24               	xorwf	___awdiv@sign,f,c
  7373  001C3E                     l4553:
  7374  001C3E  0E00               	movlw	0
  7375  001C40  6E26               	movwf	___awdiv@quotient+1,c
  7376  001C42  0E00               	movlw	0
  7377  001C44  6E25               	movwf	___awdiv@quotient,c
  7378  001C46  5022               	movf	___awdiv@divisor+1,w,c
  7379  001C48  1021               	iorwf	___awdiv@divisor,w,c
  7380  001C4A  B4D8               	btfsc	status,2,c
  7381  001C4C  D01C               	goto	l4575
  7382  001C4E  0E01               	movlw	1
  7383  001C50  6E23               	movwf	___awdiv@counter,c
  7384  001C52  D004               	goto	l4561
  7385  001C54                     l4559:
  7386  001C54  90D8               	bcf	status,0,c
  7387  001C56  3621               	rlcf	___awdiv@divisor,f,c
  7388  001C58  3622               	rlcf	___awdiv@divisor+1,f,c
  7389  001C5A  2A23               	incf	___awdiv@counter,f,c
  7390  001C5C                     l4561:
  7391  001C5C  AE22               	btfss	___awdiv@divisor+1,7,c
  7392  001C5E  D7FA               	goto	l4559
  7393  001C60                     l4563:
  7394  001C60  90D8               	bcf	status,0,c
  7395  001C62  3625               	rlcf	___awdiv@quotient,f,c
  7396  001C64  3626               	rlcf	___awdiv@quotient+1,f,c
  7397  001C66  5021               	movf	___awdiv@divisor,w,c
  7398  001C68  5C1F               	subwf	___awdiv@dividend,w,c
  7399  001C6A  5022               	movf	___awdiv@divisor+1,w,c
  7400  001C6C  5820               	subwfb	___awdiv@dividend+1,w,c
  7401  001C6E  A0D8               	btfss	status,0,c
  7402  001C70  D005               	goto	l4571
  7403  001C72  5021               	movf	___awdiv@divisor,w,c
  7404  001C74  5E1F               	subwf	___awdiv@dividend,f,c
  7405  001C76  5022               	movf	___awdiv@divisor+1,w,c
  7406  001C78  5A20               	subwfb	___awdiv@dividend+1,f,c
  7407  001C7A  8025               	bsf	___awdiv@quotient,0,c
  7408  001C7C                     l4571:
  7409  001C7C  90D8               	bcf	status,0,c
  7410  001C7E  3222               	rrcf	___awdiv@divisor+1,f,c
  7411  001C80  3221               	rrcf	___awdiv@divisor,f,c
  7412  001C82  2E23               	decfsz	___awdiv@counter,f,c
  7413  001C84  D7ED               	goto	l4563
  7414  001C86                     l4575:
  7415  001C86  5024               	movf	___awdiv@sign,w,c
  7416  001C88  B4D8               	btfsc	status,2,c
  7417  001C8A  D004               	goto	l4579
  7418  001C8C  6C25               	negf	___awdiv@quotient,c
  7419  001C8E  1E26               	comf	___awdiv@quotient+1,f,c
  7420  001C90  B0D8               	btfsc	status,0,c
  7421  001C92  2A26               	incf	___awdiv@quotient+1,f,c
  7422  001C94                     l4579:
  7423  001C94  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7424  001C98  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7425  001C9C  0012               	return	
  7426  001C9E                     __end_of___awdiv:
  7427                           	opt stack 0
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           intcon	equ	0xFF2
  7435                           indf0	equ	0xFEF
  7436                           postinc0	equ	0xFEE
  7437                           fsr0h	equ	0xFEA
  7438                           fsr0l	equ	0xFE9
  7439                           wreg	equ	0xFE8
  7440                           postinc1	equ	0xFE6
  7441                           postdec1	equ	0xFE5
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function __tdiv_to_l_ *****************
  7451 ;; Defined at:
  7452 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  f1              3   24[COMRAM] float 
  7455 ;;  f2              3   27[COMRAM] float 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  quot            4   33[COMRAM] unsigned long 
  7458 ;;  exp1            1   38[COMRAM] unsigned char 
  7459 ;;  cntr            1   37[COMRAM] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  4   24[COMRAM] unsigned long 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7469 ;;      Params:         6       0       0       0       0       0       0       0       0
  7470 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7471 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7472 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7473 ;;Total ram usage:       15 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    4
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_sprintf
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text34
  7484  0017F4                     __ptext34:
  7485                           	opt stack 0
  7486  0017F4                     __tdiv_to_l_:
  7487                           	opt stack 23
  7488                           
  7489                           ;incstack = 0
  7490  0017F4  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7491  0017F8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7492  0017FA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7493  0017FC  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7494  0017FE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7495  001800  E301               	bnc	u5151
  7496  001802  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7497  001804                     u5151:
  7498  001804  501F               	movf	??__tdiv_to_l_,w,c
  7499  001806  6E27               	movwf	__tdiv_to_l_@exp1,c
  7500  001808  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7501  00180A  D001               	goto	l4781
  7502  00180C  D059               	goto	u5220
  7503  00180E                     l4781:
  7504  00180E  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7505  001812  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7506  001814  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7507  001816  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7508  001818  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7509  00181A  E301               	bnc	u5171
  7510  00181C  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7511  00181E                     u5171:
  7512  00181E  501F               	movf	??__tdiv_to_l_,w,c
  7513  001820  6E26               	movwf	__tdiv_to_l_@cntr,c
  7514  001822  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7515  001824  D001               	goto	l4787
  7516  001826  D04C               	goto	u5220
  7517  001828                     l4787:
  7518  001828  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7519  00182A  0EFF               	movlw	255
  7520  00182C  1619               	andwf	__tdiv_to_l_@f1,f,c
  7521  00182E  0EFF               	movlw	255
  7522  001830  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7523  001832  0E00               	movlw	0
  7524  001834  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7525  001836  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7526  001838  0EFF               	movlw	255
  7527  00183A  161C               	andwf	__tdiv_to_l_@f2,f,c
  7528  00183C  0EFF               	movlw	255
  7529  00183E  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7530  001840  0E00               	movlw	0
  7531  001842  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7532  001844  0E00               	movlw	0
  7533  001846  6E22               	movwf	__tdiv_to_l_@quot,c
  7534  001848  0E00               	movlw	0
  7535  00184A  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7536  00184C  0E00               	movlw	0
  7537  00184E  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7538  001850  0E00               	movlw	0
  7539  001852  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7540  001854  0E7F               	movlw	127
  7541  001856  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7542  001858  5026               	movf	__tdiv_to_l_@cntr,w,c
  7543  00185A  0F98               	addlw	152
  7544  00185C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7545  00185E  0E18               	movlw	24
  7546  001860  6E26               	movwf	__tdiv_to_l_@cntr,c
  7547  001862                     l1040:
  7548  001862  90D8               	bcf	status,0,c
  7549  001864  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7550  001866  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7551  001868  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7552  00186A  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7553  00186C  501C               	movf	__tdiv_to_l_@f2,w,c
  7554  00186E  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7555  001870  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7556  001872  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7557  001874  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7558  001876  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7559  001878  A0D8               	btfss	status,0,c
  7560  00187A  D007               	goto	l1041
  7561  00187C  501C               	movf	__tdiv_to_l_@f2,w,c
  7562  00187E  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7563  001880  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7564  001882  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7565  001884  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7566  001886  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7567  001888  8022               	bsf	__tdiv_to_l_@quot,0,c
  7568  00188A                     l1041:
  7569  00188A  90D8               	bcf	status,0,c
  7570  00188C  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7571  00188E  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7572  001890  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7573  001892  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7574  001894  D7E6               	goto	l1040
  7575  001896  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7576  001898  D010               	goto	l4819
  7577  00189A  5027               	movf	__tdiv_to_l_@exp1,w,c
  7578  00189C  0A80               	xorlw	128
  7579  00189E  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7580  0018A0  0EE9               	movlw	233
  7581  0018A2  0A80               	xorlw	128
  7582  0018A4  5C1F               	subwf	??__tdiv_to_l_,w,c
  7583  0018A6  A0D8               	btfss	status,0,c
  7584  0018A8  D00B               	goto	u5220
  7585  0018AA                     l4815:
  7586  0018AA  90D8               	bcf	status,0,c
  7587  0018AC  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7588  0018AE  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7589  0018B0  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7590  0018B2  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7591  0018B4  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7592  0018B6  D7F9               	goto	l4815
  7593  0018B8  D014               	goto	l1047
  7594  0018BA                     l4819:
  7595  0018BA  0E17               	movlw	23
  7596  0018BC  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7597  0018BE  D00F               	goto	l4827
  7598  0018C0                     u5220:
  7599  0018C0  0E00               	movlw	0
  7600  0018C2  6E19               	movwf	?__tdiv_to_l_,c
  7601  0018C4  0E00               	movlw	0
  7602  0018C6  6E1A               	movwf	?__tdiv_to_l_+1,c
  7603  0018C8  0E00               	movlw	0
  7604  0018CA  6E1B               	movwf	?__tdiv_to_l_+2,c
  7605  0018CC  0E00               	movlw	0
  7606  0018CE  6E1C               	movwf	?__tdiv_to_l_+3,c
  7607  0018D0  D010               	goto	l1038
  7608  0018D2                     l4825:
  7609  0018D2  90D8               	bcf	status,0,c
  7610  0018D4  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7611  0018D6  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7612  0018D8  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7613  0018DA  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7614  0018DC  0627               	decf	__tdiv_to_l_@exp1,f,c
  7615  0018DE                     l4827:
  7616  0018DE  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7617  0018E0  D7F8               	goto	l4825
  7618  0018E2                     l1047:
  7619  0018E2  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7620  0018E6  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7621  0018EA  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7622  0018EE  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7623  0018F2                     l1038:
  7624  0018F2  0012               	return	
  7625  0018F4                     __end_of__tdiv_to_l_:
  7626                           	opt stack 0
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           indf0	equ	0xFEF
  7635                           postinc0	equ	0xFEE
  7636                           fsr0h	equ	0xFEA
  7637                           fsr0l	equ	0xFE9
  7638                           wreg	equ	0xFE8
  7639                           postinc1	equ	0xFE6
  7640                           postdec1	equ	0xFE5
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function __div_to_l_ *****************
  7650 ;; Defined at:
  7651 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  f1              3   24[COMRAM] unsigned long 
  7654 ;;  f2              3   27[COMRAM] unsigned long 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  quot            4   34[COMRAM] unsigned long 
  7657 ;;  exp1            1   39[COMRAM] unsigned char 
  7658 ;;  cntr            1   38[COMRAM] unsigned char 
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  4   24[COMRAM] unsigned long 
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, status,0
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7668 ;;      Params:         6       0       0       0       0       0       0       0       0
  7669 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7670 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7671 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7672 ;;Total ram usage:       16 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    4
  7675 ;; This function calls:
  7676 ;;		Nothing
  7677 ;; This function is called by:
  7678 ;;		_sprintf
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text35
  7683  0016BE                     __ptext35:
  7684                           	opt stack 0
  7685  0016BE                     __div_to_l_:
  7686                           	opt stack 23
  7687                           
  7688                           ;incstack = 0
  7689  0016BE  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7690  0016C2  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7691  0016C6  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7692  0016CA  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7693  0016CE  0E18               	movlw	24
  7694  0016D0  D005               	goto	u5240
  7695  0016D2                     u5245:
  7696  0016D2  90D8               	bcf	status,0,c
  7697  0016D4  3222               	rrcf	??__div_to_l_+3,f,c
  7698  0016D6  3221               	rrcf	??__div_to_l_+2,f,c
  7699  0016D8  3220               	rrcf	??__div_to_l_+1,f,c
  7700  0016DA  321F               	rrcf	??__div_to_l_,f,c
  7701  0016DC                     u5240:
  7702  0016DC  2EE8               	decfsz	wreg,f,c
  7703  0016DE  D7F9               	goto	u5245
  7704  0016E0  501F               	movf	??__div_to_l_,w,c
  7705  0016E2  6E28               	movwf	__div_to_l_@exp1,c
  7706  0016E4  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7707  0016E6  D001               	goto	l4835
  7708  0016E8  D06B               	goto	u5310
  7709  0016EA                     l4835:
  7710  0016EA  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7711  0016EE  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7712  0016F2  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7713  0016F6  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7714  0016FA  0E18               	movlw	24
  7715  0016FC  D005               	goto	u5260
  7716  0016FE                     u5265:
  7717  0016FE  90D8               	bcf	status,0,c
  7718  001700  3222               	rrcf	??__div_to_l_+3,f,c
  7719  001702  3221               	rrcf	??__div_to_l_+2,f,c
  7720  001704  3220               	rrcf	??__div_to_l_+1,f,c
  7721  001706  321F               	rrcf	??__div_to_l_,f,c
  7722  001708                     u5260:
  7723  001708  2EE8               	decfsz	wreg,f,c
  7724  00170A  D7F9               	goto	u5265
  7725  00170C  501F               	movf	??__div_to_l_,w,c
  7726  00170E  6E27               	movwf	__div_to_l_@cntr,c
  7727  001710  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7728  001712  D001               	goto	l4841
  7729  001714  D055               	goto	u5310
  7730  001716                     l4841:
  7731  001716  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7732  001718  0EFF               	movlw	255
  7733  00171A  1619               	andwf	__div_to_l_@f1,f,c
  7734  00171C  0EFF               	movlw	255
  7735  00171E  161A               	andwf	__div_to_l_@f1+1,f,c
  7736  001720  0EFF               	movlw	255
  7737  001722  161B               	andwf	__div_to_l_@f1+2,f,c
  7738  001724  0E00               	movlw	0
  7739  001726  161C               	andwf	__div_to_l_@f1+3,f,c
  7740  001728  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7741  00172A  0EFF               	movlw	255
  7742  00172C  161C               	andwf	__div_to_l_@f2,f,c
  7743  00172E  0EFF               	movlw	255
  7744  001730  161D               	andwf	__div_to_l_@f2+1,f,c
  7745  001732  0EFF               	movlw	255
  7746  001734  161E               	andwf	__div_to_l_@f2+2,f,c
  7747  001736  0E00               	movlw	0
  7748  001738  161F               	andwf	__div_to_l_@f2+3,f,c
  7749  00173A  0E00               	movlw	0
  7750  00173C  6E23               	movwf	__div_to_l_@quot,c
  7751  00173E  0E00               	movlw	0
  7752  001740  6E24               	movwf	__div_to_l_@quot+1,c
  7753  001742  0E00               	movlw	0
  7754  001744  6E25               	movwf	__div_to_l_@quot+2,c
  7755  001746  0E00               	movlw	0
  7756  001748  6E26               	movwf	__div_to_l_@quot+3,c
  7757  00174A  0E7F               	movlw	127
  7758  00174C  5E28               	subwf	__div_to_l_@exp1,f,c
  7759  00174E  5027               	movf	__div_to_l_@cntr,w,c
  7760  001750  0FA0               	addlw	160
  7761  001752  5E28               	subwf	__div_to_l_@exp1,f,c
  7762  001754  0E20               	movlw	32
  7763  001756  6E27               	movwf	__div_to_l_@cntr,c
  7764  001758                     l4855:
  7765  001758  90D8               	bcf	status,0,c
  7766  00175A  3623               	rlcf	__div_to_l_@quot,f,c
  7767  00175C  3624               	rlcf	__div_to_l_@quot+1,f,c
  7768  00175E  3625               	rlcf	__div_to_l_@quot+2,f,c
  7769  001760  3626               	rlcf	__div_to_l_@quot+3,f,c
  7770  001762  501C               	movf	__div_to_l_@f2,w,c
  7771  001764  5C19               	subwf	__div_to_l_@f1,w,c
  7772  001766  501D               	movf	__div_to_l_@f2+1,w,c
  7773  001768  581A               	subwfb	__div_to_l_@f1+1,w,c
  7774  00176A  501E               	movf	__div_to_l_@f2+2,w,c
  7775  00176C  581B               	subwfb	__div_to_l_@f1+2,w,c
  7776  00176E  501F               	movf	__div_to_l_@f2+3,w,c
  7777  001770  581C               	subwfb	__div_to_l_@f1+3,w,c
  7778  001772  A0D8               	btfss	status,0,c
  7779  001774  D009               	goto	l4863
  7780  001776  501C               	movf	__div_to_l_@f2,w,c
  7781  001778  5E19               	subwf	__div_to_l_@f1,f,c
  7782  00177A  501D               	movf	__div_to_l_@f2+1,w,c
  7783  00177C  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7784  00177E  501E               	movf	__div_to_l_@f2+2,w,c
  7785  001780  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7786  001782  501F               	movf	__div_to_l_@f2+3,w,c
  7787  001784  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7788  001786  8023               	bsf	__div_to_l_@quot,0,c
  7789  001788                     l4863:
  7790  001788  90D8               	bcf	status,0,c
  7791  00178A  3619               	rlcf	__div_to_l_@f1,f,c
  7792  00178C  361A               	rlcf	__div_to_l_@f1+1,f,c
  7793  00178E  361B               	rlcf	__div_to_l_@f1+2,f,c
  7794  001790  361C               	rlcf	__div_to_l_@f1+3,f,c
  7795  001792  2E27               	decfsz	__div_to_l_@cntr,f,c
  7796  001794  D7E1               	goto	l4855
  7797  001796  AE28               	btfss	__div_to_l_@exp1,7,c
  7798  001798  D010               	goto	l4877
  7799  00179A  5028               	movf	__div_to_l_@exp1,w,c
  7800  00179C  0A80               	xorlw	128
  7801  00179E  6E1F               	movwf	??__div_to_l_& (0+255),c
  7802  0017A0  0EE1               	movlw	225
  7803  0017A2  0A80               	xorlw	128
  7804  0017A4  5C1F               	subwf	??__div_to_l_,w,c
  7805  0017A6  A0D8               	btfss	status,0,c
  7806  0017A8  D00B               	goto	u5310
  7807  0017AA                     l4873:
  7808  0017AA  90D8               	bcf	status,0,c
  7809  0017AC  3226               	rrcf	__div_to_l_@quot+3,f,c
  7810  0017AE  3225               	rrcf	__div_to_l_@quot+2,f,c
  7811  0017B0  3224               	rrcf	__div_to_l_@quot+1,f,c
  7812  0017B2  3223               	rrcf	__div_to_l_@quot,f,c
  7813  0017B4  3E28               	incfsz	__div_to_l_@exp1,f,c
  7814  0017B6  D7F9               	goto	l4873
  7815  0017B8  D014               	goto	l929
  7816  0017BA                     l4877:
  7817  0017BA  0E1F               	movlw	31
  7818  0017BC  6428               	cpfsgt	__div_to_l_@exp1,c
  7819  0017BE  D00F               	goto	l4885
  7820  0017C0                     u5310:
  7821  0017C0  0E00               	movlw	0
  7822  0017C2  6E19               	movwf	?__div_to_l_,c
  7823  0017C4  0E00               	movlw	0
  7824  0017C6  6E1A               	movwf	?__div_to_l_+1,c
  7825  0017C8  0E00               	movlw	0
  7826  0017CA  6E1B               	movwf	?__div_to_l_+2,c
  7827  0017CC  0E00               	movlw	0
  7828  0017CE  6E1C               	movwf	?__div_to_l_+3,c
  7829  0017D0  D010               	goto	l920
  7830  0017D2                     l4883:
  7831  0017D2  90D8               	bcf	status,0,c
  7832  0017D4  3623               	rlcf	__div_to_l_@quot,f,c
  7833  0017D6  3624               	rlcf	__div_to_l_@quot+1,f,c
  7834  0017D8  3625               	rlcf	__div_to_l_@quot+2,f,c
  7835  0017DA  3626               	rlcf	__div_to_l_@quot+3,f,c
  7836  0017DC  0628               	decf	__div_to_l_@exp1,f,c
  7837  0017DE                     l4885:
  7838  0017DE  6628               	tstfsz	__div_to_l_@exp1,c
  7839  0017E0  D7F8               	goto	l4883
  7840  0017E2                     l929:
  7841  0017E2  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7842  0017E6  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7843  0017EA  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7844  0017EE  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7845  0017F2                     l920:
  7846  0017F2  0012               	return	
  7847  0017F4                     __end_of__div_to_l_:
  7848                           	opt stack 0
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           intcon	equ	0xFF2
  7856                           indf0	equ	0xFEF
  7857                           postinc0	equ	0xFEE
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           postinc1	equ	0xFE6
  7862                           postdec1	equ	0xFE5
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           postdec2	equ	0xFDD
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function ___lltoft *****************
  7872 ;; Defined at:
  7873 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  c               4   32[COMRAM] unsigned long 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  exp             1   40[COMRAM] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  3   32[COMRAM] float 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7887 ;;      Params:         4       0       0       0       0       0       0       0       0
  7888 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7889 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7890 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7891 ;;Total ram usage:        9 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    5
  7894 ;; This function calls:
  7895 ;;		___ftpack
  7896 ;; This function is called by:
  7897 ;;		_sprintf
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text36
  7902  0023FE                     __ptext36:
  7903                           	opt stack 0
  7904  0023FE                     ___lltoft:
  7905                           	opt stack 22
  7906                           
  7907                           ;incstack = 0
  7908  0023FE  0E8E               	movlw	142
  7909  002400  6E29               	movwf	___lltoft@exp,c
  7910  002402  D006               	goto	l5003
  7911  002404                     l5001:
  7912  002404  90D8               	bcf	status,0,c
  7913  002406  3224               	rrcf	___lltoft@c+3,f,c
  7914  002408  3223               	rrcf	___lltoft@c+2,f,c
  7915  00240A  3222               	rrcf	___lltoft@c+1,f,c
  7916  00240C  3221               	rrcf	___lltoft@c,f,c
  7917  00240E  2A29               	incf	___lltoft@exp,f,c
  7918  002410                     l5003:
  7919  002410  0E00               	movlw	0
  7920  002412  1421               	andwf	___lltoft@c,w,c
  7921  002414  6E25               	movwf	??___lltoft& (0+255),c
  7922  002416  0E00               	movlw	0
  7923  002418  1422               	andwf	___lltoft@c+1,w,c
  7924  00241A  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7925  00241C  0E00               	movlw	0
  7926  00241E  1423               	andwf	___lltoft@c+2,w,c
  7927  002420  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7928  002422  0EFF               	movlw	255
  7929  002424  1424               	andwf	___lltoft@c+3,w,c
  7930  002426  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7931  002428  5028               	movf	??___lltoft+3,w,c
  7932  00242A  1025               	iorwf	??___lltoft,w,c
  7933  00242C  1026               	iorwf	??___lltoft+1,w,c
  7934  00242E  1027               	iorwf	??___lltoft+2,w,c
  7935  002430  A4D8               	btfss	status,2,c
  7936  002432  D7E8               	goto	l5001
  7937  002434  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7938  002438  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7939  00243C  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7940  002440  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7941  002444  0E00               	movlw	0
  7942  002446  6E1D               	movwf	___ftpack@sign,c
  7943  002448  EC56  F00D         	call	___ftpack	;wreg free
  7944  00244C  C019  F021         	movff	?___ftpack,?___lltoft
  7945  002450  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7946  002454  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7947  002458  0012               	return	
  7948  00245A                     __end_of___lltoft:
  7949                           	opt stack 0
  7950                           tblptru	equ	0xFF8
  7951                           tblptrh	equ	0xFF7
  7952                           tblptrl	equ	0xFF6
  7953                           tablat	equ	0xFF5
  7954                           prodh	equ	0xFF4
  7955                           prodl	equ	0xFF3
  7956                           intcon	equ	0xFF2
  7957                           indf0	equ	0xFEF
  7958                           postinc0	equ	0xFEE
  7959                           fsr0h	equ	0xFEA
  7960                           fsr0l	equ	0xFE9
  7961                           wreg	equ	0xFE8
  7962                           postinc1	equ	0xFE6
  7963                           postdec1	equ	0xFE5
  7964                           fsr1l	equ	0xFE1
  7965                           indf2	equ	0xFDF
  7966                           postinc2	equ	0xFDE
  7967                           postdec2	equ	0xFDD
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           
  7972 ;; *************** function ___llmod *****************
  7973 ;; Defined at:
  7974 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  dividend        4   37[COMRAM] unsigned long 
  7977 ;;  divisor         4   41[COMRAM] unsigned long 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  counter         1   45[COMRAM] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  4   37[COMRAM] unsigned long 
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7989 ;;      Params:         8       0       0       0       0       0       0       0       0
  7990 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7991 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7992 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7993 ;;Total ram usage:        9 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    4
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_sprintf
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           	psect	text37
  8004  002398                     __ptext37:
  8005                           	opt stack 0
  8006  002398                     ___llmod:
  8007                           	opt stack 23
  8008                           
  8009                           ;incstack = 0
  8010  002398  502D               	movf	___llmod@divisor+3,w,c
  8011  00239A  102A               	iorwf	___llmod@divisor,w,c
  8012  00239C  102B               	iorwf	___llmod@divisor+1,w,c
  8013  00239E  102C               	iorwf	___llmod@divisor+2,w,c
  8014  0023A0  B4D8               	btfsc	status,2,c
  8015  0023A2  D024               	goto	l1131
  8016  0023A4  0E01               	movlw	1
  8017  0023A6  6E2E               	movwf	___llmod@counter,c
  8018  0023A8  D006               	goto	l4989
  8019  0023AA                     l4987:
  8020  0023AA  90D8               	bcf	status,0,c
  8021  0023AC  362A               	rlcf	___llmod@divisor,f,c
  8022  0023AE  362B               	rlcf	___llmod@divisor+1,f,c
  8023  0023B0  362C               	rlcf	___llmod@divisor+2,f,c
  8024  0023B2  362D               	rlcf	___llmod@divisor+3,f,c
  8025  0023B4  2A2E               	incf	___llmod@counter,f,c
  8026  0023B6                     l4989:
  8027  0023B6  AE2D               	btfss	___llmod@divisor+3,7,c
  8028  0023B8  D7F8               	goto	l4987
  8029  0023BA                     l4991:
  8030  0023BA  502A               	movf	___llmod@divisor,w,c
  8031  0023BC  5C26               	subwf	___llmod@dividend,w,c
  8032  0023BE  502B               	movf	___llmod@divisor+1,w,c
  8033  0023C0  5827               	subwfb	___llmod@dividend+1,w,c
  8034  0023C2  502C               	movf	___llmod@divisor+2,w,c
  8035  0023C4  5828               	subwfb	___llmod@dividend+2,w,c
  8036  0023C6  502D               	movf	___llmod@divisor+3,w,c
  8037  0023C8  5829               	subwfb	___llmod@dividend+3,w,c
  8038  0023CA  A0D8               	btfss	status,0,c
  8039  0023CC  D008               	goto	l4995
  8040  0023CE  502A               	movf	___llmod@divisor,w,c
  8041  0023D0  5E26               	subwf	___llmod@dividend,f,c
  8042  0023D2  502B               	movf	___llmod@divisor+1,w,c
  8043  0023D4  5A27               	subwfb	___llmod@dividend+1,f,c
  8044  0023D6  502C               	movf	___llmod@divisor+2,w,c
  8045  0023D8  5A28               	subwfb	___llmod@dividend+2,f,c
  8046  0023DA  502D               	movf	___llmod@divisor+3,w,c
  8047  0023DC  5A29               	subwfb	___llmod@dividend+3,f,c
  8048  0023DE                     l4995:
  8049  0023DE  90D8               	bcf	status,0,c
  8050  0023E0  322D               	rrcf	___llmod@divisor+3,f,c
  8051  0023E2  322C               	rrcf	___llmod@divisor+2,f,c
  8052  0023E4  322B               	rrcf	___llmod@divisor+1,f,c
  8053  0023E6  322A               	rrcf	___llmod@divisor,f,c
  8054  0023E8  2E2E               	decfsz	___llmod@counter,f,c
  8055  0023EA  D7E7               	goto	l4991
  8056  0023EC                     l1131:
  8057  0023EC  C026  F026         	movff	___llmod@dividend,?___llmod
  8058  0023F0  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  8059  0023F4  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  8060  0023F8  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  8061  0023FC  0012               	return	
  8062  0023FE                     __end_of___llmod:
  8063                           	opt stack 0
  8064                           tblptru	equ	0xFF8
  8065                           tblptrh	equ	0xFF7
  8066                           tblptrl	equ	0xFF6
  8067                           tablat	equ	0xFF5
  8068                           prodh	equ	0xFF4
  8069                           prodl	equ	0xFF3
  8070                           intcon	equ	0xFF2
  8071                           indf0	equ	0xFEF
  8072                           postinc0	equ	0xFEE
  8073                           fsr0h	equ	0xFEA
  8074                           fsr0l	equ	0xFE9
  8075                           wreg	equ	0xFE8
  8076                           postinc1	equ	0xFE6
  8077                           postdec1	equ	0xFE5
  8078                           fsr1l	equ	0xFE1
  8079                           indf2	equ	0xFDF
  8080                           postinc2	equ	0xFDE
  8081                           postdec2	equ	0xFDD
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function ___lldiv *****************
  8087 ;; Defined at:
  8088 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  dividend        4   24[COMRAM] unsigned long 
  8091 ;;  divisor         4   28[COMRAM] unsigned long 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  quotient        4   32[COMRAM] unsigned long 
  8094 ;;  counter         1   36[COMRAM] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  4   24[COMRAM] unsigned long 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8104 ;;      Params:         8       0       0       0       0       0       0       0       0
  8105 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8107 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8108 ;;Total ram usage:       13 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    4
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_sprintf
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text38
  8119  001F6E                     __ptext38:
  8120                           	opt stack 0
  8121  001F6E                     ___lldiv:
  8122                           	opt stack 23
  8123                           
  8124                           ;incstack = 0
  8125  001F6E  0E00               	movlw	0
  8126  001F70  6E21               	movwf	___lldiv@quotient,c
  8127  001F72  0E00               	movlw	0
  8128  001F74  6E22               	movwf	___lldiv@quotient+1,c
  8129  001F76  0E00               	movlw	0
  8130  001F78  6E23               	movwf	___lldiv@quotient+2,c
  8131  001F7A  0E00               	movlw	0
  8132  001F7C  6E24               	movwf	___lldiv@quotient+3,c
  8133  001F7E  5020               	movf	___lldiv@divisor+3,w,c
  8134  001F80  101D               	iorwf	___lldiv@divisor,w,c
  8135  001F82  101E               	iorwf	___lldiv@divisor+1,w,c
  8136  001F84  101F               	iorwf	___lldiv@divisor+2,w,c
  8137  001F86  B4D8               	btfsc	status,2,c
  8138  001F88  D02A               	goto	l1121
  8139  001F8A  0E01               	movlw	1
  8140  001F8C  6E25               	movwf	___lldiv@counter,c
  8141  001F8E  D006               	goto	l4969
  8142  001F90                     l4967:
  8143  001F90  90D8               	bcf	status,0,c
  8144  001F92  361D               	rlcf	___lldiv@divisor,f,c
  8145  001F94  361E               	rlcf	___lldiv@divisor+1,f,c
  8146  001F96  361F               	rlcf	___lldiv@divisor+2,f,c
  8147  001F98  3620               	rlcf	___lldiv@divisor+3,f,c
  8148  001F9A  2A25               	incf	___lldiv@counter,f,c
  8149  001F9C                     l4969:
  8150  001F9C  AE20               	btfss	___lldiv@divisor+3,7,c
  8151  001F9E  D7F8               	goto	l4967
  8152  001FA0                     l4971:
  8153  001FA0  90D8               	bcf	status,0,c
  8154  001FA2  3621               	rlcf	___lldiv@quotient,f,c
  8155  001FA4  3622               	rlcf	___lldiv@quotient+1,f,c
  8156  001FA6  3623               	rlcf	___lldiv@quotient+2,f,c
  8157  001FA8  3624               	rlcf	___lldiv@quotient+3,f,c
  8158  001FAA  501D               	movf	___lldiv@divisor,w,c
  8159  001FAC  5C19               	subwf	___lldiv@dividend,w,c
  8160  001FAE  501E               	movf	___lldiv@divisor+1,w,c
  8161  001FB0  581A               	subwfb	___lldiv@dividend+1,w,c
  8162  001FB2  501F               	movf	___lldiv@divisor+2,w,c
  8163  001FB4  581B               	subwfb	___lldiv@dividend+2,w,c
  8164  001FB6  5020               	movf	___lldiv@divisor+3,w,c
  8165  001FB8  581C               	subwfb	___lldiv@dividend+3,w,c
  8166  001FBA  A0D8               	btfss	status,0,c
  8167  001FBC  D009               	goto	l4979
  8168  001FBE  501D               	movf	___lldiv@divisor,w,c
  8169  001FC0  5E19               	subwf	___lldiv@dividend,f,c
  8170  001FC2  501E               	movf	___lldiv@divisor+1,w,c
  8171  001FC4  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8172  001FC6  501F               	movf	___lldiv@divisor+2,w,c
  8173  001FC8  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8174  001FCA  5020               	movf	___lldiv@divisor+3,w,c
  8175  001FCC  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8176  001FCE  8021               	bsf	___lldiv@quotient,0,c
  8177  001FD0                     l4979:
  8178  001FD0  90D8               	bcf	status,0,c
  8179  001FD2  3220               	rrcf	___lldiv@divisor+3,f,c
  8180  001FD4  321F               	rrcf	___lldiv@divisor+2,f,c
  8181  001FD6  321E               	rrcf	___lldiv@divisor+1,f,c
  8182  001FD8  321D               	rrcf	___lldiv@divisor,f,c
  8183  001FDA  2E25               	decfsz	___lldiv@counter,f,c
  8184  001FDC  D7E1               	goto	l4971
  8185  001FDE                     l1121:
  8186  001FDE  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8187  001FE2  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8188  001FE6  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8189  001FEA  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8190  001FEE  0012               	return	
  8191  001FF0                     __end_of___lldiv:
  8192                           	opt stack 0
  8193                           tblptru	equ	0xFF8
  8194                           tblptrh	equ	0xFF7
  8195                           tblptrl	equ	0xFF6
  8196                           tablat	equ	0xFF5
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           indf0	equ	0xFEF
  8201                           postinc0	equ	0xFEE
  8202                           fsr0h	equ	0xFEA
  8203                           fsr0l	equ	0xFE9
  8204                           wreg	equ	0xFE8
  8205                           postinc1	equ	0xFE6
  8206                           postdec1	equ	0xFE5
  8207                           fsr1l	equ	0xFE1
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215 ;; *************** function ___fttol *****************
  8216 ;; Defined at:
  8217 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  f1              3   19[BANK0 ] float 
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  lval            4   29[BANK0 ] unsigned long 
  8222 ;;  exp1            1   33[BANK0 ] unsigned char 
  8223 ;;  sign1           1   28[BANK0 ] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  4   19[BANK0 ] long 
  8226 ;; Registers used:
  8227 ;;		wreg, status,2, status,0
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8233 ;;      Params:         0       4       0       0       0       0       0       0       0
  8234 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8235 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8236 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8237 ;;Total ram usage:       15 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    4
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_PWM_DutyCycle1
  8244 ;;		_PWM_DutyCycle2
  8245 ;;		_sprintf
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text39
  8250  001436                     __ptext39:
  8251                           	opt stack 0
  8252  001436                     ___fttol:
  8253                           	opt stack 23
  8254                           
  8255                           ;incstack = 0
  8256  001436  0100               	movlb	0	; () banked
  8257  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8258  00143C  0100               	movlb	0	; () banked
  8259  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8260  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8261  001442  0100               	movlb	0	; () banked
  8262  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8263  001446  0100               	movlb	0	; () banked
  8264  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8265  00144A  E301               	bnc	u5371
  8266  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8267  00144E                     u5371:
  8268  00144E  0100               	movlb	0	; () banked
  8269  001450  5177               	movf	??___fttol& (0+255),w,b
  8270  001452  0100               	movlb	0	; () banked
  8271  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8272  001456  0100               	movlb	0	; () banked
  8273  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8274  00145A  D001               	goto	l4921
  8275  00145C  D059               	goto	u5420
  8276  00145E                     l4921:
  8277                           
  8278                           ; BSR set to: 0
  8279  00145E  0E17               	movlw	23
  8280  001460  0100               	movlb	0	; () banked
  8281  001462  6F77               	movwf	??___fttol& (0+255),b
  8282  001464  0100               	movlb	0	; () banked
  8283  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8284  00146A  0100               	movlb	0	; () banked
  8285  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8286  001470  0100               	movlb	0	; () banked
  8287  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8288  001476  0100               	movlb	0	; () banked
  8289  001478  2977               	incf	??___fttol& (0+255),w,b
  8290  00147A  0100               	movlb	0	; () banked
  8291  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8292  00147E  D005               	goto	u5390
  8293  001480                     u5395:
  8294  001480  0100               	movlb	0	; () banked
  8295  001482  90D8               	bcf	status,0,c
  8296  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8297  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8298  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8299  00148A                     u5390:
  8300  00148A  0100               	movlb	0	; () banked
  8301  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8302  00148E  D7F8               	goto	u5395
  8303  001490  0100               	movlb	0	; () banked
  8304  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8305  001494  0100               	movlb	0	; () banked
  8306  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8307                           
  8308                           ; BSR set to: 0
  8309  001498  0100               	movlb	0	; () banked
  8310  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8311                           
  8312                           ; BSR set to: 0
  8313  00149C  0EFF               	movlw	255
  8314  00149E  0100               	movlb	0	; () banked
  8315  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8316  0014A2  0EFF               	movlw	255
  8317  0014A4  0100               	movlb	0	; () banked
  8318  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8319  0014A8  0E00               	movlw	0
  8320  0014AA  0100               	movlb	0	; () banked
  8321  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8322                           
  8323                           ; BSR set to: 0
  8324  0014AE  0100               	movlb	0	; () banked
  8325  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8326  0014B2  0100               	movlb	0	; () banked
  8327  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8328  0014B6  0100               	movlb	0	; () banked
  8329  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8330  0014BA  0100               	movlb	0	; () banked
  8331  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8332  0014BE  0100               	movlb	0	; () banked
  8333  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8334  0014C2  0100               	movlb	0	; () banked
  8335  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8336  0014C6  0100               	movlb	0	; () banked
  8337  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8338                           
  8339                           ; BSR set to: 0
  8340  0014CA  0E8E               	movlw	142
  8341  0014CC  0100               	movlb	0	; () banked
  8342  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8343                           
  8344                           ; BSR set to: 0
  8345  0014D0  0100               	movlb	0	; () banked
  8346  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8347  0014D4  D019               	goto	l4943
  8348                           
  8349                           ; BSR set to: 0
  8350  0014D6  0100               	movlb	0	; () banked
  8351  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8352  0014DA  0A80               	xorlw	128
  8353  0014DC  0100               	movlb	0	; () banked
  8354  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8355  0014E0  0EF1               	movlw	241
  8356  0014E2  0A80               	xorlw	128
  8357  0014E4  0100               	movlb	0	; () banked
  8358  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8359  0014E8  A0D8               	btfss	status,0,c
  8360  0014EA  D012               	goto	u5420
  8361  0014EC                     l4939:
  8362                           
  8363                           ; BSR set to: 0
  8364  0014EC  0100               	movlb	0	; () banked
  8365  0014EE  90D8               	bcf	status,0,c
  8366  0014F0  0100               	movlb	0	; () banked
  8367  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8368  0014F4  0100               	movlb	0	; () banked
  8369  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8370  0014F8  0100               	movlb	0	; () banked
  8371  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8372  0014FC  0100               	movlb	0	; () banked
  8373  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8374                           
  8375                           ; BSR set to: 0
  8376  001500  0100               	movlb	0	; () banked
  8377  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8378  001504  D7F3               	goto	l4939
  8379  001506  D020               	goto	l4953
  8380  001508                     l4943:
  8381                           
  8382                           ; BSR set to: 0
  8383  001508  0E17               	movlw	23
  8384  00150A  0100               	movlb	0	; () banked
  8385  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8386  00150E  D019               	goto	l4951
  8387  001510                     u5420:
  8388                           
  8389                           ; BSR set to: 0
  8390  001510  0E00               	movlw	0
  8391  001512  0100               	movlb	0	; () banked
  8392  001514  6F73               	movwf	?___fttol& (0+255),b
  8393  001516  0E00               	movlw	0
  8394  001518  0100               	movlb	0	; () banked
  8395  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8396  00151C  0E00               	movlw	0
  8397  00151E  0100               	movlb	0	; () banked
  8398  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8399  001522  0E00               	movlw	0
  8400  001524  0100               	movlb	0	; () banked
  8401  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8402  001528  D02A               	goto	l1082
  8403  00152A                     l4949:
  8404                           
  8405                           ; BSR set to: 0
  8406  00152A  0100               	movlb	0	; () banked
  8407  00152C  90D8               	bcf	status,0,c
  8408  00152E  0100               	movlb	0	; () banked
  8409  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8410  001532  0100               	movlb	0	; () banked
  8411  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8412  001536  0100               	movlb	0	; () banked
  8413  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8414  00153A  0100               	movlb	0	; () banked
  8415  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8416  00153E  0100               	movlb	0	; () banked
  8417  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8418  001542                     l4951:
  8419                           
  8420                           ; BSR set to: 0
  8421  001542  0100               	movlb	0	; () banked
  8422  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8423  001546  D7F1               	goto	l4949
  8424  001548                     l4953:
  8425                           
  8426                           ; BSR set to: 0
  8427  001548  0100               	movlb	0	; () banked
  8428  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8429  00154C  B4D8               	btfsc	status,2,c
  8430  00154E  D00F               	goto	l4957
  8431                           
  8432                           ; BSR set to: 0
  8433  001550  0100               	movlb	0	; () banked
  8434  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8435  001554  0100               	movlb	0	; () banked
  8436  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8437  001558  0100               	movlb	0	; () banked
  8438  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8439  00155C  0100               	movlb	0	; () banked
  8440  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8441  001560  0E00               	movlw	0
  8442  001562  0100               	movlb	0	; () banked
  8443  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8444  001566  0100               	movlb	0	; () banked
  8445  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8446  00156A  0100               	movlb	0	; () banked
  8447  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8448  00156E                     l4957:
  8449                           
  8450                           ; BSR set to: 0
  8451  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8452  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8453  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8454  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8455  00157E                     l1082:
  8456                           
  8457                           ; BSR set to: 0
  8458  00157E  0012               	return	
  8459  001580                     __end_of___fttol:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           indf0	equ	0xFEF
  8469                           postinc0	equ	0xFEE
  8470                           fsr0h	equ	0xFEA
  8471                           fsr0l	equ	0xFE9
  8472                           wreg	equ	0xFE8
  8473                           postinc1	equ	0xFE6
  8474                           postdec1	equ	0xFE5
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           fsr2h	equ	0xFDA
  8480                           fsr2l	equ	0xFD9
  8481                           status	equ	0xFD8
  8482                           
  8483 ;; *************** function ___ftsub *****************
  8484 ;; Defined at:
  8485 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  f1              3   34[BANK0 ] float 
  8488 ;;  f2              3   37[BANK0 ] float 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  3   34[BANK0 ] float 
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8500 ;;      Params:         0       6       0       0       0       0       0       0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8503 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8504 ;;Total ram usage:        6 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    6
  8507 ;; This function calls:
  8508 ;;		___ftadd
  8509 ;; This function is called by:
  8510 ;;		_sprintf
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text40
  8515  00258C                     __ptext40:
  8516                           	opt stack 0
  8517  00258C                     ___ftsub:
  8518                           	opt stack 21
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;incstack = 0
  8522  00258C  0E00               	movlw	0
  8523  00258E  0100               	movlb	0	; () banked
  8524  002590  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8525  002592  0E00               	movlw	0
  8526  002594  0100               	movlb	0	; () banked
  8527  002596  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8528  002598  0E80               	movlw	128
  8529  00259A  0100               	movlb	0	; () banked
  8530  00259C  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8531                           
  8532                           ; BSR set to: 0
  8533  00259E  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8534  0025A2  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8535  0025A6  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8536  0025AA  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8537  0025AE  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8538  0025B2  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8539  0025B6  EC2F  F008         	call	___ftadd	;wreg free
  8540  0025BA  C076  F082         	movff	?___ftadd,?___ftsub
  8541  0025BE  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8542  0025C2  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8543  0025C6  0012               	return	
  8544  0025C8                     __end_of___ftsub:
  8545                           	opt stack 0
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           indf0	equ	0xFEF
  8554                           postinc0	equ	0xFEE
  8555                           fsr0h	equ	0xFEA
  8556                           fsr0l	equ	0xFE9
  8557                           wreg	equ	0xFE8
  8558                           postinc1	equ	0xFE6
  8559                           postdec1	equ	0xFE5
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           fsr2h	equ	0xFDA
  8565                           fsr2l	equ	0xFD9
  8566                           status	equ	0xFD8
  8567                           
  8568 ;; *************** function ___ftadd *****************
  8569 ;; Defined at:
  8570 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  f1              3   22[BANK0 ] float 
  8573 ;;  f2              3   25[BANK0 ] float 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  exp1            1   33[BANK0 ] unsigned char 
  8576 ;;  exp2            1   32[BANK0 ] unsigned char 
  8577 ;;  sign            1   31[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  3   22[BANK0 ] float 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8587 ;;      Params:         0       6       0       0       0       0       0       0       0
  8588 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8589 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8590 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8591 ;;Total ram usage:       12 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    5
  8594 ;; This function calls:
  8595 ;;		___ftpack
  8596 ;; This function is called by:
  8597 ;;		_sprintf
  8598 ;;		___ftsub
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text41
  8603  00105E                     __ptext41:
  8604                           	opt stack 0
  8605  00105E                     ___ftadd:
  8606                           	opt stack 21
  8607                           
  8608                           ;incstack = 0
  8609  00105E  0100               	movlb	0	; () banked
  8610  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8611  001064  0100               	movlb	0	; () banked
  8612  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8613  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8614  00106A  0100               	movlb	0	; () banked
  8615  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8616  00106E  0100               	movlb	0	; () banked
  8617  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8618  001072  E301               	bnc	u4531
  8619  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8620  001076                     u4531:
  8621  001076  0100               	movlb	0	; () banked
  8622  001078  517C               	movf	??___ftadd& (0+255),w,b
  8623  00107A  0100               	movlb	0	; () banked
  8624  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8625  00107E  0100               	movlb	0	; () banked
  8626  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8627  001084  0100               	movlb	0	; () banked
  8628  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8629  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8630  00108A  0100               	movlb	0	; () banked
  8631  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8632  00108E  0100               	movlb	0	; () banked
  8633  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8634  001092  E301               	bnc	u4541
  8635  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8636  001096                     u4541:
  8637  001096  0100               	movlb	0	; () banked
  8638  001098  517C               	movf	??___ftadd& (0+255),w,b
  8639  00109A  0100               	movlb	0	; () banked
  8640  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8641                           
  8642                           ; BSR set to: 0
  8643  00109E  0100               	movlb	0	; () banked
  8644  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8645  0010A2  B4D8               	btfsc	status,2,c
  8646  0010A4  D012               	goto	l998
  8647                           
  8648                           ; BSR set to: 0
  8649  0010A6  0100               	movlb	0	; () banked
  8650  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8651  0010AA  0100               	movlb	0	; () banked
  8652  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8653  0010AE  B0D8               	btfsc	status,0,c
  8654  0010B0  D013               	goto	l4429
  8655                           
  8656                           ; BSR set to: 0
  8657  0010B2  0100               	movlb	0	; () banked
  8658  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8659  0010B6  0800               	sublw	0
  8660  0010B8  0100               	movlb	0	; () banked
  8661  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8662  0010BC  0100               	movlb	0	; () banked
  8663  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8664  0010C0  0E19               	movlw	25
  8665  0010C2  0100               	movlb	0	; () banked
  8666  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8667  0010C6  A0D8               	btfss	status,0,c
  8668  0010C8  D007               	goto	l4429
  8669  0010CA                     l998:
  8670                           
  8671                           ; BSR set to: 0
  8672  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8673  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8674  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8675  0010D6  D102               	goto	l999
  8676  0010D8                     l4429:
  8677                           
  8678                           ; BSR set to: 0
  8679  0010D8  0100               	movlb	0	; () banked
  8680  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8681  0010DC  B4D8               	btfsc	status,2,c
  8682  0010DE  D012               	goto	l1002
  8683                           
  8684                           ; BSR set to: 0
  8685  0010E0  0100               	movlb	0	; () banked
  8686  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8687  0010E4  0100               	movlb	0	; () banked
  8688  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8689  0010E8  B0D8               	btfsc	status,0,c
  8690  0010EA  D013               	goto	l4435
  8691                           
  8692                           ; BSR set to: 0
  8693  0010EC  0100               	movlb	0	; () banked
  8694  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8695  0010F0  0800               	sublw	0
  8696  0010F2  0100               	movlb	0	; () banked
  8697  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8698  0010F6  0100               	movlb	0	; () banked
  8699  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8700  0010FA  0E19               	movlw	25
  8701  0010FC  0100               	movlb	0	; () banked
  8702  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8703  001100  A0D8               	btfss	status,0,c
  8704  001102  D007               	goto	l4435
  8705  001104                     l1002:
  8706                           
  8707                           ; BSR set to: 0
  8708  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8709  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8710  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8711  001110  D0E5               	goto	l999
  8712  001112                     l4435:
  8713                           
  8714                           ; BSR set to: 0
  8715  001112  0E06               	movlw	6
  8716  001114  0100               	movlb	0	; () banked
  8717  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8718                           
  8719                           ; BSR set to: 0
  8720  001118  0100               	movlb	0	; () banked
  8721  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8722  00111C  D002               	goto	l4441
  8723                           
  8724                           ; BSR set to: 0
  8725  00111E  0100               	movlb	0	; () banked
  8726  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8727  001122                     l4441:
  8728                           
  8729                           ; BSR set to: 0
  8730  001122  0100               	movlb	0	; () banked
  8731  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8732  001126  D002               	goto	l1004
  8733                           
  8734                           ; BSR set to: 0
  8735  001128  0100               	movlb	0	; () banked
  8736  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8737  00112C                     l1004:
  8738                           
  8739                           ; BSR set to: 0
  8740  00112C  0100               	movlb	0	; () banked
  8741  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8742                           
  8743                           ; BSR set to: 0
  8744  001130  0EFF               	movlw	255
  8745  001132  0100               	movlb	0	; () banked
  8746  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8747  001136  0EFF               	movlw	255
  8748  001138  0100               	movlb	0	; () banked
  8749  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8750  00113C  0E00               	movlw	0
  8751  00113E  0100               	movlb	0	; () banked
  8752  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8753  001142  0100               	movlb	0	; () banked
  8754  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8755                           
  8756                           ; BSR set to: 0
  8757  001146  0EFF               	movlw	255
  8758  001148  0100               	movlb	0	; () banked
  8759  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8760  00114C  0EFF               	movlw	255
  8761  00114E  0100               	movlb	0	; () banked
  8762  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8763  001152  0E00               	movlw	0
  8764  001154  0100               	movlb	0	; () banked
  8765  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8766                           
  8767                           ; BSR set to: 0
  8768  001158  0100               	movlb	0	; () banked
  8769  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8770  00115C  0100               	movlb	0	; () banked
  8771  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8772  001160  B0D8               	btfsc	status,0,c
  8773  001162  D02A               	goto	l4461
  8774  001164                     l4451:
  8775                           
  8776                           ; BSR set to: 0
  8777  001164  0100               	movlb	0	; () banked
  8778  001166  90D8               	bcf	status,0,c
  8779  001168  0100               	movlb	0	; () banked
  8780  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8781  00116C  0100               	movlb	0	; () banked
  8782  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8783  001170  0100               	movlb	0	; () banked
  8784  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8785  001174  0100               	movlb	0	; () banked
  8786  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8787                           
  8788                           ; BSR set to: 0
  8789  001178  0100               	movlb	0	; () banked
  8790  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8791  00117C  0100               	movlb	0	; () banked
  8792  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8793  001180  B4D8               	btfsc	status,2,c
  8794  001182  D014               	goto	l4459
  8795                           
  8796                           ; BSR set to: 0
  8797  001184  0100               	movlb	0	; () banked
  8798  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8799  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8800  00118C  0E07               	movlw	7
  8801  00118E  0100               	movlb	0	; () banked
  8802  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8803  001192  B4D8               	btfsc	status,2,c
  8804  001194  D00B               	goto	l4459
  8805  001196  D7E6               	goto	l4451
  8806  001198                     l4457:
  8807                           
  8808                           ; BSR set to: 0
  8809  001198  0100               	movlb	0	; () banked
  8810  00119A  90D8               	bcf	status,0,c
  8811  00119C  0100               	movlb	0	; () banked
  8812  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8813  0011A0  0100               	movlb	0	; () banked
  8814  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8815  0011A4  0100               	movlb	0	; () banked
  8816  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8817  0011A8  0100               	movlb	0	; () banked
  8818  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8819  0011AC                     l4459:
  8820                           
  8821                           ; BSR set to: 0
  8822  0011AC  0100               	movlb	0	; () banked
  8823  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8824  0011B0  0100               	movlb	0	; () banked
  8825  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8826  0011B4  D7F1               	goto	l4457
  8827  0011B6  D02F               	goto	l1013
  8828  0011B8                     l4461:
  8829                           
  8830                           ; BSR set to: 0
  8831  0011B8  0100               	movlb	0	; () banked
  8832  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8833  0011BC  0100               	movlb	0	; () banked
  8834  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8835  0011C0  B0D8               	btfsc	status,0,c
  8836  0011C2  D029               	goto	l1013
  8837  0011C4                     l4463:
  8838                           
  8839                           ; BSR set to: 0
  8840  0011C4  0100               	movlb	0	; () banked
  8841  0011C6  90D8               	bcf	status,0,c
  8842  0011C8  0100               	movlb	0	; () banked
  8843  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8844  0011CC  0100               	movlb	0	; () banked
  8845  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8846  0011D0  0100               	movlb	0	; () banked
  8847  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8848  0011D4  0100               	movlb	0	; () banked
  8849  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852  0011D8  0100               	movlb	0	; () banked
  8853  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8854  0011DC  0100               	movlb	0	; () banked
  8855  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8856  0011E0  B4D8               	btfsc	status,2,c
  8857  0011E2  D014               	goto	l4471
  8858                           
  8859                           ; BSR set to: 0
  8860  0011E4  0100               	movlb	0	; () banked
  8861  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8862  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8863  0011EC  0E07               	movlw	7
  8864  0011EE  0100               	movlb	0	; () banked
  8865  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8866  0011F2  B4D8               	btfsc	status,2,c
  8867  0011F4  D00B               	goto	l4471
  8868  0011F6  D7E6               	goto	l4463
  8869  0011F8                     l4469:
  8870                           
  8871                           ; BSR set to: 0
  8872  0011F8  0100               	movlb	0	; () banked
  8873  0011FA  90D8               	bcf	status,0,c
  8874  0011FC  0100               	movlb	0	; () banked
  8875  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8876  001200  0100               	movlb	0	; () banked
  8877  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8878  001204  0100               	movlb	0	; () banked
  8879  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8880  001208  0100               	movlb	0	; () banked
  8881  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8882  00120C                     l4471:
  8883                           
  8884                           ; BSR set to: 0
  8885  00120C  0100               	movlb	0	; () banked
  8886  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8887  001210  0100               	movlb	0	; () banked
  8888  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8889  001214  D7F1               	goto	l4469
  8890  001216                     l1013:
  8891                           
  8892                           ; BSR set to: 0
  8893  001216  0100               	movlb	0	; () banked
  8894  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8895  00121A  D012               	goto	l1022
  8896                           
  8897                           ; BSR set to: 0
  8898  00121C  0EFF               	movlw	255
  8899  00121E  0100               	movlb	0	; () banked
  8900  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8901  001222  0EFF               	movlw	255
  8902  001224  0100               	movlb	0	; () banked
  8903  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8904  001228  0EFF               	movlw	255
  8905  00122A  0100               	movlb	0	; () banked
  8906  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8907  00122E  0E01               	movlw	1
  8908  001230  0100               	movlb	0	; () banked
  8909  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8910  001234  0E00               	movlw	0
  8911  001236  0100               	movlb	0	; () banked
  8912  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8913  00123A  0E00               	movlw	0
  8914  00123C  0100               	movlb	0	; () banked
  8915  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8916  001240                     l1022:
  8917                           
  8918                           ; BSR set to: 0
  8919  001240  0100               	movlb	0	; () banked
  8920  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8921  001244  D012               	goto	l4477
  8922                           
  8923                           ; BSR set to: 0
  8924  001246  0EFF               	movlw	255
  8925  001248  0100               	movlb	0	; () banked
  8926  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8927  00124C  0EFF               	movlw	255
  8928  00124E  0100               	movlb	0	; () banked
  8929  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8930  001252  0EFF               	movlw	255
  8931  001254  0100               	movlb	0	; () banked
  8932  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8933  001258  0E01               	movlw	1
  8934  00125A  0100               	movlb	0	; () banked
  8935  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8936  00125E  0E00               	movlw	0
  8937  001260  0100               	movlb	0	; () banked
  8938  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8939  001264  0E00               	movlw	0
  8940  001266  0100               	movlb	0	; () banked
  8941  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8942  00126A                     l4477:
  8943                           
  8944                           ; BSR set to: 0
  8945  00126A  0E00               	movlw	0
  8946  00126C  0100               	movlb	0	; () banked
  8947  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8948                           
  8949                           ; BSR set to: 0
  8950  001270  0100               	movlb	0	; () banked
  8951  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8952  001274  0100               	movlb	0	; () banked
  8953  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  8954  001278  0100               	movlb	0	; () banked
  8955  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8956  00127C  0100               	movlb	0	; () banked
  8957  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8958  001280  0100               	movlb	0	; () banked
  8959  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8960  001284  0100               	movlb	0	; () banked
  8961  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8962                           
  8963                           ; BSR set to: 0
  8964  001288  0100               	movlb	0	; () banked
  8965  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8966  00128C  D015               	goto	l4487
  8967                           
  8968                           ; BSR set to: 0
  8969  00128E  0EFF               	movlw	255
  8970  001290  0100               	movlb	0	; () banked
  8971  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8972  001294  0EFF               	movlw	255
  8973  001296  0100               	movlb	0	; () banked
  8974  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8975  00129A  0EFF               	movlw	255
  8976  00129C  0100               	movlb	0	; () banked
  8977  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8978  0012A0  0E01               	movlw	1
  8979  0012A2  0100               	movlb	0	; () banked
  8980  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  8981  0012A6  0E00               	movlw	0
  8982  0012A8  0100               	movlb	0	; () banked
  8983  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8984  0012AC  0E00               	movlw	0
  8985  0012AE  0100               	movlb	0	; () banked
  8986  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8987                           
  8988                           ; BSR set to: 0
  8989  0012B2  0E01               	movlw	1
  8990  0012B4  0100               	movlb	0	; () banked
  8991  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  8992  0012B8                     l4487:
  8993                           
  8994                           ; BSR set to: 0
  8995  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8996  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8997  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8998  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8999  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  9000  0012CC  EC56  F00D         	call	___ftpack	;wreg free
  9001  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  9002  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  9003  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  9004  0012DC                     l999:
  9005  0012DC  0012               	return	
  9006  0012DE                     __end_of___ftadd:
  9007                           	opt stack 0
  9008                           tblptru	equ	0xFF8
  9009                           tblptrh	equ	0xFF7
  9010                           tblptrl	equ	0xFF6
  9011                           tablat	equ	0xFF5
  9012                           prodh	equ	0xFF4
  9013                           prodl	equ	0xFF3
  9014                           intcon	equ	0xFF2
  9015                           indf0	equ	0xFEF
  9016                           postinc0	equ	0xFEE
  9017                           fsr0h	equ	0xFEA
  9018                           fsr0l	equ	0xFE9
  9019                           wreg	equ	0xFE8
  9020                           postinc1	equ	0xFE6
  9021                           postdec1	equ	0xFE5
  9022                           fsr1l	equ	0xFE1
  9023                           indf2	equ	0xFDF
  9024                           postinc2	equ	0xFDE
  9025                           postdec2	equ	0xFDD
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030 ;; *************** function ___ftpack *****************
  9031 ;; Defined at:
  9032 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  arg             3   24[COMRAM] unsigned um
  9035 ;;  exp             1   27[COMRAM] unsigned char 
  9036 ;;  sign            1   28[COMRAM] unsigned char 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  3   24[COMRAM] float 
  9041 ;; Registers used:
  9042 ;;		wreg, status,2, status,0
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9048 ;;      Params:         5       0       0       0       0       0       0       0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9050 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9051 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9052 ;;Total ram usage:        8 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    4
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		___ftadd
  9059 ;;		___ftmul
  9060 ;;		___lbtoft
  9061 ;;		___lltoft
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text42
  9066  001AAC                     __ptext42:
  9067                           	opt stack 0
  9068  001AAC                     ___ftpack:
  9069                           	opt stack 21
  9070                           
  9071                           ;incstack = 0
  9072  001AAC  501C               	movf	___ftpack@exp,w,c
  9073  001AAE  B4D8               	btfsc	status,2,c
  9074  001AB0  D005               	goto	l4367
  9075  001AB2  5019               	movf	___ftpack@arg,w,c
  9076  001AB4  101A               	iorwf	___ftpack@arg+1,w,c
  9077  001AB6  101B               	iorwf	___ftpack@arg+2,w,c
  9078  001AB8  A4D8               	btfss	status,2,c
  9079  001ABA  D00C               	goto	l4373
  9080  001ABC                     l4367:
  9081  001ABC  0E00               	movlw	0
  9082  001ABE  6E19               	movwf	?___ftpack,c
  9083  001AC0  0E00               	movlw	0
  9084  001AC2  6E1A               	movwf	?___ftpack+1,c
  9085  001AC4  0E00               	movlw	0
  9086  001AC6  6E1B               	movwf	?___ftpack+2,c
  9087  001AC8  D044               	goto	l961
  9088  001ACA                     l4371:
  9089  001ACA  2A1C               	incf	___ftpack@exp,f,c
  9090  001ACC  90D8               	bcf	status,0,c
  9091  001ACE  321B               	rrcf	___ftpack@arg+2,f,c
  9092  001AD0  321A               	rrcf	___ftpack@arg+1,f,c
  9093  001AD2  3219               	rrcf	___ftpack@arg,f,c
  9094  001AD4                     l4373:
  9095  001AD4  0E00               	movlw	0
  9096  001AD6  1419               	andwf	___ftpack@arg,w,c
  9097  001AD8  6E1E               	movwf	??___ftpack& (0+255),c
  9098  001ADA  0E00               	movlw	0
  9099  001ADC  141A               	andwf	___ftpack@arg+1,w,c
  9100  001ADE  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9101  001AE0  0EFE               	movlw	254
  9102  001AE2  141B               	andwf	___ftpack@arg+2,w,c
  9103  001AE4  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9104  001AE6  501E               	movf	??___ftpack,w,c
  9105  001AE8  101F               	iorwf	??___ftpack+1,w,c
  9106  001AEA  1020               	iorwf	??___ftpack+2,w,c
  9107  001AEC  B4D8               	btfsc	status,2,c
  9108  001AEE  D00C               	goto	l4379
  9109  001AF0  D7EC               	goto	l4371
  9110  001AF2                     l4375:
  9111  001AF2  2A1C               	incf	___ftpack@exp,f,c
  9112  001AF4  0E01               	movlw	1
  9113  001AF6  2619               	addwf	___ftpack@arg,f,c
  9114  001AF8  0E00               	movlw	0
  9115  001AFA  221A               	addwfc	___ftpack@arg+1,f,c
  9116  001AFC  0E00               	movlw	0
  9117  001AFE  221B               	addwfc	___ftpack@arg+2,f,c
  9118  001B00  90D8               	bcf	status,0,c
  9119  001B02  321B               	rrcf	___ftpack@arg+2,f,c
  9120  001B04  321A               	rrcf	___ftpack@arg+1,f,c
  9121  001B06  3219               	rrcf	___ftpack@arg,f,c
  9122  001B08                     l4379:
  9123  001B08  0E00               	movlw	0
  9124  001B0A  1419               	andwf	___ftpack@arg,w,c
  9125  001B0C  6E1E               	movwf	??___ftpack& (0+255),c
  9126  001B0E  0E00               	movlw	0
  9127  001B10  141A               	andwf	___ftpack@arg+1,w,c
  9128  001B12  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9129  001B14  0EFF               	movlw	255
  9130  001B16  141B               	andwf	___ftpack@arg+2,w,c
  9131  001B18  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9132  001B1A  501E               	movf	??___ftpack,w,c
  9133  001B1C  101F               	iorwf	??___ftpack+1,w,c
  9134  001B1E  1020               	iorwf	??___ftpack+2,w,c
  9135  001B20  B4D8               	btfsc	status,2,c
  9136  001B22  D006               	goto	l4383
  9137  001B24  D7E6               	goto	l4375
  9138  001B26                     l4381:
  9139  001B26  061C               	decf	___ftpack@exp,f,c
  9140  001B28  90D8               	bcf	status,0,c
  9141  001B2A  3619               	rlcf	___ftpack@arg,f,c
  9142  001B2C  361A               	rlcf	___ftpack@arg+1,f,c
  9143  001B2E  361B               	rlcf	___ftpack@arg+2,f,c
  9144  001B30                     l4383:
  9145  001B30  AE1A               	btfss	___ftpack@arg+1,7,c
  9146  001B32  D7F9               	goto	l4381
  9147  001B34  A01C               	btfss	___ftpack@exp,0,c
  9148  001B36  9E1A               	bcf	___ftpack@arg+1,7,c
  9149  001B38  90D8               	bcf	status,0,c
  9150  001B3A  321C               	rrcf	___ftpack@exp,f,c
  9151  001B3C  501C               	movf	___ftpack@exp,w,c
  9152  001B3E  121B               	iorwf	___ftpack@arg+2,f,c
  9153  001B40  501D               	movf	___ftpack@sign,w,c
  9154  001B42  A4D8               	btfss	status,2,c
  9155  001B44  8E1B               	bsf	___ftpack@arg+2,7,c
  9156  001B46  C019  F019         	movff	___ftpack@arg,?___ftpack
  9157  001B4A  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  9158  001B4E  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  9159  001B52                     l961:
  9160  001B52  0012               	return	
  9161  001B54                     __end_of___ftpack:
  9162                           	opt stack 0
  9163                           tblptru	equ	0xFF8
  9164                           tblptrh	equ	0xFF7
  9165                           tblptrl	equ	0xFF6
  9166                           tablat	equ	0xFF5
  9167                           prodh	equ	0xFF4
  9168                           prodl	equ	0xFF3
  9169                           intcon	equ	0xFF2
  9170                           indf0	equ	0xFEF
  9171                           postinc0	equ	0xFEE
  9172                           fsr0h	equ	0xFEA
  9173                           fsr0l	equ	0xFE9
  9174                           wreg	equ	0xFE8
  9175                           postinc1	equ	0xFE6
  9176                           postdec1	equ	0xFE5
  9177                           fsr1l	equ	0xFE1
  9178                           indf2	equ	0xFDF
  9179                           postinc2	equ	0xFDE
  9180                           postdec2	equ	0xFDD
  9181                           fsr2h	equ	0xFDA
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8
  9184                           
  9185 ;; *************** function ___ftneg *****************
  9186 ;; Defined at:
  9187 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  f1              3   24[COMRAM] float 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  3   24[COMRAM] float 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9201 ;;      Params:         3       0       0       0       0       0       0       0       0
  9202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9204 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9205 ;;Total ram usage:        3 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    4
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_sprintf
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text43
  9216  002808                     __ptext43:
  9217                           	opt stack 0
  9218  002808                     ___ftneg:
  9219                           	opt stack 23
  9220                           
  9221                           ;incstack = 0
  9222  002808  0E7F               	movlw	127
  9223  00280A  141B               	andwf	___ftneg@f1+2,w,c
  9224  00280C  101A               	iorwf	___ftneg@f1+1,w,c
  9225  00280E  1019               	iorwf	___ftneg@f1,w,c
  9226  002810  B4D8               	btfsc	status,2,c
  9227  002812  D006               	goto	l1072
  9228  002814  0E00               	movlw	0
  9229  002816  1A19               	xorwf	___ftneg@f1,f,c
  9230  002818  0E00               	movlw	0
  9231  00281A  1A1A               	xorwf	___ftneg@f1+1,f,c
  9232  00281C  0E80               	movlw	128
  9233  00281E  1A1B               	xorwf	___ftneg@f1+2,f,c
  9234  002820                     l1072:
  9235  002820  C019  F019         	movff	___ftneg@f1,?___ftneg
  9236  002824  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9237  002828  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9238  00282C  0012               	return	
  9239  00282E                     __end_of___ftneg:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           prodh	equ	0xFF4
  9246                           prodl	equ	0xFF3
  9247                           intcon	equ	0xFF2
  9248                           indf0	equ	0xFEF
  9249                           postinc0	equ	0xFEE
  9250                           fsr0h	equ	0xFEA
  9251                           fsr0l	equ	0xFE9
  9252                           wreg	equ	0xFE8
  9253                           postinc1	equ	0xFE6
  9254                           postdec1	equ	0xFE5
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function ___ftge *****************
  9264 ;; Defined at:
  9265 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  ff1             3   24[COMRAM] float 
  9268 ;;  ff2             3   27[COMRAM] float 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9280 ;;      Params:         6       0       0       0       0       0       0       0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9282 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9283 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9284 ;;Total ram usage:        9 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    4
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_sprintf
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text44
  9295  001E58                     __ptext44:
  9296                           	opt stack 0
  9297  001E58                     ___ftge:
  9298                           	opt stack 23
  9299                           
  9300                           ;incstack = 0
  9301  001E58  AE1B               	btfss	___ftge@ff1+2,7,c
  9302  001E5A  D016               	goto	l4897
  9303  001E5C  C019  F01F         	movff	___ftge@ff1,??___ftge
  9304  001E60  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9305  001E64  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9306  001E68  1E1F               	comf	??___ftge,f,c
  9307  001E6A  1E20               	comf	??___ftge+1,f,c
  9308  001E6C  1E21               	comf	??___ftge+2,f,c
  9309  001E6E  2A1F               	incf	??___ftge,f,c
  9310  001E70  0E00               	movlw	0
  9311  001E72  2220               	addwfc	??___ftge+1,f,c
  9312  001E74  2221               	addwfc	??___ftge+2,f,c
  9313  001E76  0E00               	movlw	0
  9314  001E78  241F               	addwf	??___ftge,w,c
  9315  001E7A  6E19               	movwf	___ftge@ff1,c
  9316  001E7C  0E00               	movlw	0
  9317  001E7E  2020               	addwfc	??___ftge+1,w,c
  9318  001E80  6E1A               	movwf	___ftge@ff1+1,c
  9319  001E82  0E80               	movlw	128
  9320  001E84  2021               	addwfc	??___ftge+2,w,c
  9321  001E86  6E1B               	movwf	___ftge@ff1+2,c
  9322  001E88                     l4897:
  9323  001E88  AE1E               	btfss	___ftge@ff2+2,7,c
  9324  001E8A  D016               	goto	l4901
  9325  001E8C  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9326  001E90  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9327  001E94  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9328  001E98  1E1F               	comf	??___ftge,f,c
  9329  001E9A  1E20               	comf	??___ftge+1,f,c
  9330  001E9C  1E21               	comf	??___ftge+2,f,c
  9331  001E9E  2A1F               	incf	??___ftge,f,c
  9332  001EA0  0E00               	movlw	0
  9333  001EA2  2220               	addwfc	??___ftge+1,f,c
  9334  001EA4  2221               	addwfc	??___ftge+2,f,c
  9335  001EA6  0E00               	movlw	0
  9336  001EA8  241F               	addwf	??___ftge,w,c
  9337  001EAA  6E1C               	movwf	___ftge@ff2,c
  9338  001EAC  0E00               	movlw	0
  9339  001EAE  2020               	addwfc	??___ftge+1,w,c
  9340  001EB0  6E1D               	movwf	___ftge@ff2+1,c
  9341  001EB2  0E80               	movlw	128
  9342  001EB4  2021               	addwfc	??___ftge+2,w,c
  9343  001EB6  6E1E               	movwf	___ftge@ff2+2,c
  9344  001EB8                     l4901:
  9345  001EB8  0E00               	movlw	0
  9346  001EBA  1A19               	xorwf	___ftge@ff1,f,c
  9347  001EBC  0E00               	movlw	0
  9348  001EBE  1A1A               	xorwf	___ftge@ff1+1,f,c
  9349  001EC0  0E80               	movlw	128
  9350  001EC2  1A1B               	xorwf	___ftge@ff1+2,f,c
  9351  001EC4  0E00               	movlw	0
  9352  001EC6  1A1C               	xorwf	___ftge@ff2,f,c
  9353  001EC8  0E00               	movlw	0
  9354  001ECA  1A1D               	xorwf	___ftge@ff2+1,f,c
  9355  001ECC  0E80               	movlw	128
  9356  001ECE  1A1E               	xorwf	___ftge@ff2+2,f,c
  9357  001ED0  501C               	movf	___ftge@ff2,w,c
  9358  001ED2  5C19               	subwf	___ftge@ff1,w,c
  9359  001ED4  501D               	movf	___ftge@ff2+1,w,c
  9360  001ED6  581A               	subwfb	___ftge@ff1+1,w,c
  9361  001ED8  501E               	movf	___ftge@ff2+2,w,c
  9362  001EDA  581B               	subwfb	___ftge@ff1+2,w,c
  9363  001EDC  B0D8               	btfsc	status,0,c
  9364  001EDE  D002               	goto	l4907
  9365  001EE0  90D8               	bcf	status,0,c
  9366  001EE2  D001               	goto	l1056
  9367  001EE4                     l4907:
  9368  001EE4  80D8               	bsf	status,0,c
  9369  001EE6                     l1056:
  9370  001EE6  0012               	return	
  9371  001EE8                     __end_of___ftge:
  9372                           	opt stack 0
  9373                           tblptru	equ	0xFF8
  9374                           tblptrh	equ	0xFF7
  9375                           tblptrl	equ	0xFF6
  9376                           tablat	equ	0xFF5
  9377                           prodh	equ	0xFF4
  9378                           prodl	equ	0xFF3
  9379                           intcon	equ	0xFF2
  9380                           indf0	equ	0xFEF
  9381                           postinc0	equ	0xFEE
  9382                           fsr0h	equ	0xFEA
  9383                           fsr0l	equ	0xFE9
  9384                           wreg	equ	0xFE8
  9385                           postinc1	equ	0xFE6
  9386                           postdec1	equ	0xFE5
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function _Lcd_Write_String *****************
  9396 ;; Defined at:
  9397 ;;		line 90 in file "lcd.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  a               2   28[COMRAM] PTR unsigned char 
  9400 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9401 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
  9402 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  i               2   32[COMRAM] int 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;		None               void
  9407 ;; Registers used:
  9408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9414 ;;      Params:         2       0       0       0       0       0       0       0       0
  9415 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9416 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9417 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9418 ;;Total ram usage:        6 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; Hardware stack levels required when called:    6
  9421 ;; This function calls:
  9422 ;;		_Lcd_Write_Char
  9423 ;; This function is called by:
  9424 ;;		_Inicializa_Driveby
  9425 ;;		_Comando_Tablet
  9426 ;;		_Lcd_Write_Integer
  9427 ;;		_main
  9428 ;;		_Lcd_Write_Float
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           	psect	text45
  9433  0020E8                     __ptext45:
  9434                           	opt stack 0
  9435  0020E8                     _Lcd_Write_String:
  9436                           	opt stack 24
  9437                           
  9438                           ;lcd.c: 91: int i;
  9439                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9440                           
  9441                           ;incstack = 0
  9442  0020E8  0E00               	movlw	0
  9443  0020EA  6E22               	movwf	Lcd_Write_String@i+1,c
  9444  0020EC  0E00               	movlw	0
  9445  0020EE  6E21               	movwf	Lcd_Write_String@i,c
  9446  0020F0  D01C               	goto	l5239
  9447  0020F2                     l5235:
  9448                           
  9449                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9450  0020F2  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9451  0020F6  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9452  0020FA  5021               	movf	Lcd_Write_String@i,w,c
  9453  0020FC  261F               	addwf	??_Lcd_Write_String,f,c
  9454  0020FE  5022               	movf	Lcd_Write_String@i+1,w,c
  9455  002100  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9456  002102  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9457  002106  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9458  00210A  6AF8               	clrf	tblptru,c
  9459  00210C  0E07               	movlw	(high __ramtop+-1)
  9460  00210E  64F7               	cpfsgt	tblptrh,c
  9461  002110  D003               	bra	u5847
  9462  002112  0008               	tblrd		*
  9463  002114  50F5               	movf	tablat,w,c
  9464  002116  D005               	bra	u5840
  9465  002118                     u5847:
  9466  002118  CFF6 FFE9          	movff	tblptrl,fsr0l
  9467  00211C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9468  002120  50EF               	movf	indf0,w,c
  9469  002122                     u5840:
  9470  002122  EC74  F013         	call	_Lcd_Write_Char
  9471  002126  4A21               	infsnz	Lcd_Write_String@i,f,c
  9472  002128  2A22               	incf	Lcd_Write_String@i+1,f,c
  9473  00212A                     l5239:
  9474  00212A  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9475  00212E  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9476  002132  5021               	movf	Lcd_Write_String@i,w,c
  9477  002134  261F               	addwf	??_Lcd_Write_String,f,c
  9478  002136  5022               	movf	Lcd_Write_String@i+1,w,c
  9479  002138  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9480  00213A  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9481  00213E  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9482  002142  6AF8               	clrf	tblptru,c
  9483  002144  0E07               	movlw	(high __ramtop+-1)
  9484  002146  64F7               	cpfsgt	tblptrh,c
  9485  002148  D003               	bra	u5857
  9486  00214A  0008               	tblrd		*
  9487  00214C  50F5               	movf	tablat,w,c
  9488  00214E  D005               	bra	u5850
  9489  002150                     u5857:
  9490  002150  CFF6 FFE9          	movff	tblptrl,fsr0l
  9491  002154  CFF7 FFEA          	movff	tblptrh,fsr0h
  9492  002158  50EF               	movf	indf0,w,c
  9493  00215A                     u5850:
  9494  00215A  0900               	iorlw	0
  9495  00215C  B4D8               	btfsc	status,2,c
  9496  00215E  0012               	return	
  9497  002160  D7C8               	goto	l5235
  9498  002162                     __end_of_Lcd_Write_String:
  9499                           	opt stack 0
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           indf0	equ	0xFEF
  9508                           postinc0	equ	0xFEE
  9509                           fsr0h	equ	0xFEA
  9510                           fsr0l	equ	0xFE9
  9511                           wreg	equ	0xFE8
  9512                           postinc1	equ	0xFE6
  9513                           postdec1	equ	0xFE5
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           fsr2h	equ	0xFDA
  9519                           fsr2l	equ	0xFD9
  9520                           status	equ	0xFD8
  9521                           
  9522 ;; *************** function _Lcd_Write_Char *****************
  9523 ;; Defined at:
  9524 ;;		line 75 in file "lcd.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;  a               1    wreg     unsigned char 
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;  a               1   27[COMRAM] unsigned char 
  9529 ;;  y               1   26[COMRAM] unsigned char 
  9530 ;;  temp            1   25[COMRAM] unsigned char 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;		None               void
  9533 ;; Registers used:
  9534 ;;		wreg, status,2, status,0, cstack
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9540 ;;      Params:         0       0       0       0       0       0       0       0       0
  9541 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9543 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9544 ;;Total ram usage:        3 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    5
  9547 ;; This function calls:
  9548 ;;		_Lcd_Port
  9549 ;; This function is called by:
  9550 ;;		_Lcd_Write_String
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text46
  9555  0026E8                     __ptext46:
  9556                           	opt stack 0
  9557  0026E8                     _Lcd_Write_Char:
  9558                           	opt stack 24
  9559                           
  9560                           ;incstack = 0
  9561                           ;Lcd_Write_Char@a stored from wreg
  9562  0026E8  6E1C               	movwf	Lcd_Write_Char@a,c
  9563                           
  9564                           ;lcd.c: 76: char temp, y;
  9565                           ;lcd.c: 77: temp = a & 0x0F;
  9566  0026EA  501C               	movf	Lcd_Write_Char@a,w,c
  9567  0026EC  0B0F               	andlw	15
  9568  0026EE  6E1A               	movwf	Lcd_Write_Char@temp,c
  9569                           
  9570                           ;lcd.c: 78: y = a & 0xF0;
  9571  0026F0  501C               	movf	Lcd_Write_Char@a,w,c
  9572  0026F2  0BF0               	andlw	240
  9573  0026F4  6E1B               	movwf	Lcd_Write_Char@y,c
  9574                           
  9575                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9576  0026F6  8084               	bsf	3972,0,c	;volatile
  9577                           
  9578                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9579  0026F8  381B               	swapf	Lcd_Write_Char@y,w,c
  9580  0026FA  0B0F               	andlw	15
  9581  0026FC  ECC5  F013         	call	_Lcd_Port
  9582                           
  9583                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9584  002700  8484               	bsf	3972,2,c	;volatile
  9585                           
  9586                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9587  002702  0E0D               	movlw	13
  9588  002704                     u6407:
  9589  002704  2EE8               	decfsz	wreg,f,c
  9590  002706  D7FE               	goto	u6407
  9591  002708  F000               	nop	
  9592                           
  9593                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9594  00270A  9484               	bcf	3972,2,c	;volatile
  9595                           
  9596                           ;lcd.c: 84: Lcd_Port(temp);
  9597  00270C  501A               	movf	Lcd_Write_Char@temp,w,c
  9598  00270E  ECC5  F013         	call	_Lcd_Port
  9599                           
  9600                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9601  002712  8484               	bsf	3972,2,c	;volatile
  9602                           
  9603                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9604  002714  0E0D               	movlw	13
  9605  002716                     u6417:
  9606  002716  2EE8               	decfsz	wreg,f,c
  9607  002718  D7FE               	goto	u6417
  9608  00271A  F000               	nop	
  9609                           
  9610                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9611  00271C  9484               	bcf	3972,2,c	;volatile
  9612  00271E  0012               	return	
  9613  002720                     __end_of_Lcd_Write_Char:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           indf0	equ	0xFEF
  9623                           postinc0	equ	0xFEE
  9624                           fsr0h	equ	0xFEA
  9625                           fsr0l	equ	0xFE9
  9626                           wreg	equ	0xFE8
  9627                           postinc1	equ	0xFE6
  9628                           postdec1	equ	0xFE5
  9629                           fsr1l	equ	0xFE1
  9630                           indf2	equ	0xFDF
  9631                           postinc2	equ	0xFDE
  9632                           postdec2	equ	0xFDD
  9633                           fsr2h	equ	0xFDA
  9634                           fsr2l	equ	0xFD9
  9635                           status	equ	0xFD8
  9636                           
  9637 ;; *************** function _Lcd_Set_Cursor *****************
  9638 ;; Defined at:
  9639 ;;		line 40 in file "lcd.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;  a               1    wreg     unsigned char 
  9642 ;;  b               1   27[COMRAM] unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  a               1   28[COMRAM] unsigned char 
  9645 ;;  temp            1   31[COMRAM] unsigned char 
  9646 ;;  y               1   30[COMRAM] unsigned char 
  9647 ;;  z               1   29[COMRAM] unsigned char 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;		None               void
  9650 ;; Registers used:
  9651 ;;		wreg, status,2, status,0, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9657 ;;      Params:         1       0       0       0       0       0       0       0       0
  9658 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9660 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9661 ;;Total ram usage:        5 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    6
  9664 ;; This function calls:
  9665 ;;		_Lcd_Cmd
  9666 ;; This function is called by:
  9667 ;;		_Inicializa_Driveby
  9668 ;;		_Comando_Tablet
  9669 ;;		_main
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text47
  9674  00245A                     __ptext47:
  9675                           	opt stack 0
  9676  00245A                     _Lcd_Set_Cursor:
  9677                           	opt stack 24
  9678                           
  9679                           ;incstack = 0
  9680                           ;Lcd_Set_Cursor@a stored from wreg
  9681  00245A  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9682                           
  9683                           ;lcd.c: 41: char temp, z, y;
  9684                           ;lcd.c: 42: if (a == 1) {
  9685  00245C  041D               	decf	Lcd_Set_Cursor@a,w,c
  9686  00245E  A4D8               	btfss	status,2,c
  9687  002460  D010               	goto	l5369
  9688                           
  9689                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9690  002462  501C               	movf	Lcd_Set_Cursor@b,w,c
  9691  002464  0F7F               	addlw	127
  9692  002466  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9693                           
  9694                           ;lcd.c: 44: z = temp >> 4;
  9695  002468  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9696  00246A  0B0F               	andlw	15
  9697  00246C  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9698                           
  9699                           ;lcd.c: 45: y = temp & 0x0F;
  9700  00246E  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9701  002470  0B0F               	andlw	15
  9702  002472  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9703                           
  9704                           ;lcd.c: 46: Lcd_Cmd(z);
  9705  002474  501E               	movf	Lcd_Set_Cursor@z,w,c
  9706  002476  EC29  F014         	call	_Lcd_Cmd
  9707                           
  9708                           ;lcd.c: 47: Lcd_Cmd(y);
  9709  00247A  501F               	movf	Lcd_Set_Cursor@y,w,c
  9710  00247C  EC29  F014         	call	_Lcd_Cmd
  9711                           
  9712                           ;lcd.c: 48: } else if (a == 2) {
  9713  002480  D013               	goto	l274
  9714  002482                     l5369:
  9715  002482  501D               	movf	Lcd_Set_Cursor@a,w,c
  9716  002484  0A02               	xorlw	2
  9717  002486  A4D8               	btfss	status,2,c
  9718  002488  D00F               	goto	l274
  9719                           
  9720                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9721  00248A  501C               	movf	Lcd_Set_Cursor@b,w,c
  9722  00248C  0FBF               	addlw	191
  9723  00248E  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9724                           
  9725                           ;lcd.c: 50: z = temp >> 4;
  9726  002490  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9727  002492  0B0F               	andlw	15
  9728  002494  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9729                           
  9730                           ;lcd.c: 51: y = temp & 0x0F;
  9731  002496  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9732  002498  0B0F               	andlw	15
  9733  00249A  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9734                           
  9735                           ;lcd.c: 52: Lcd_Cmd(z);
  9736  00249C  501E               	movf	Lcd_Set_Cursor@z,w,c
  9737  00249E  EC29  F014         	call	_Lcd_Cmd
  9738                           
  9739                           ;lcd.c: 53: Lcd_Cmd(y);
  9740  0024A2  501F               	movf	Lcd_Set_Cursor@y,w,c
  9741  0024A4  EC29  F014         	call	_Lcd_Cmd
  9742  0024A8                     l274:
  9743  0024A8  0012               	return	
  9744  0024AA                     __end_of_Lcd_Set_Cursor:
  9745                           	opt stack 0
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           intcon	equ	0xFF2
  9753                           indf0	equ	0xFEF
  9754                           postinc0	equ	0xFEE
  9755                           fsr0h	equ	0xFEA
  9756                           fsr0l	equ	0xFE9
  9757                           wreg	equ	0xFE8
  9758                           postinc1	equ	0xFE6
  9759                           postdec1	equ	0xFE5
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function _Lcd_Clear *****************
  9769 ;; Defined at:
  9770 ;;		line 35 in file "lcd.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;		None
  9775 ;; Return value:  Size  Location     Type
  9776 ;;		None               void
  9777 ;; Registers used:
  9778 ;;		wreg, status,2, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0
  9785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9788 ;;Total ram usage:        0 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    6
  9791 ;; This function calls:
  9792 ;;		_Lcd_Cmd
  9793 ;; This function is called by:
  9794 ;;		_Inicializa_Driveby
  9795 ;;		_Comando_Tablet
  9796 ;;		_main
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text48
  9801  002958                     __ptext48:
  9802                           	opt stack 0
  9803  002958                     _Lcd_Clear:
  9804                           	opt stack 24
  9805                           
  9806                           ;lcd.c: 36: Lcd_Cmd(0);
  9807                           
  9808                           ;incstack = 0
  9809  002958  0E00               	movlw	0
  9810  00295A  EC29  F014         	call	_Lcd_Cmd
  9811                           
  9812                           ;lcd.c: 37: Lcd_Cmd(1);
  9813  00295E  0E01               	movlw	1
  9814  002960  EC29  F014         	call	_Lcd_Cmd
  9815  002964  0012               	return	
  9816  002966                     __end_of_Lcd_Clear:
  9817                           	opt stack 0
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           indf0	equ	0xFEF
  9826                           postinc0	equ	0xFEE
  9827                           fsr0h	equ	0xFEA
  9828                           fsr0l	equ	0xFE9
  9829                           wreg	equ	0xFE8
  9830                           postinc1	equ	0xFE6
  9831                           postdec1	equ	0xFE5
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _Lcd_Cmd *****************
  9841 ;; Defined at:
  9842 ;;		line 27 in file "lcd.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  a               1    wreg     unsigned char 
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;  a               1   26[COMRAM] unsigned char 
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		wreg, status,2, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0
  9857 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9858 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9859 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9860 ;;Total ram usage:        2 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    5
  9863 ;; This function calls:
  9864 ;;		_Lcd_Port
  9865 ;; This function is called by:
  9866 ;;		_Lcd_Clear
  9867 ;;		_Lcd_Set_Cursor
  9868 ;;		_Lcd_Init
  9869 ;;		_Lcd_Shift_Right
  9870 ;;		_Lcd_Shift_Left
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           	psect	text49
  9875  002852                     __ptext49:
  9876                           	opt stack 0
  9877  002852                     _Lcd_Cmd:
  9878                           	opt stack 24
  9879                           
  9880                           ;incstack = 0
  9881                           ;Lcd_Cmd@a stored from wreg
  9882  002852  6E1B               	movwf	Lcd_Cmd@a,c
  9883                           
  9884                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9885  002854  9084               	bcf	3972,0,c	;volatile
  9886                           
  9887                           ;lcd.c: 29: Lcd_Port(a);
  9888  002856  501B               	movf	Lcd_Cmd@a,w,c
  9889  002858  ECC5  F013         	call	_Lcd_Port
  9890                           
  9891                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9892  00285C  8484               	bsf	3972,2,c	;volatile
  9893                           
  9894                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9895  00285E  0E06               	movlw	6
  9896  002860  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9897  002862  0E30               	movlw	48
  9898  002864                     u6427:
  9899  002864  2EE8               	decfsz	wreg,f,c
  9900  002866  D7FE               	goto	u6427
  9901  002868  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9902  00286A  D7FC               	goto	u6427
  9903  00286C  D000               	nop2	
  9904                           
  9905                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9906  00286E  9484               	bcf	3972,2,c	;volatile
  9907  002870  0012               	return	
  9908  002872                     __end_of_Lcd_Cmd:
  9909                           	opt stack 0
  9910                           tblptru	equ	0xFF8
  9911                           tblptrh	equ	0xFF7
  9912                           tblptrl	equ	0xFF6
  9913                           tablat	equ	0xFF5
  9914                           prodh	equ	0xFF4
  9915                           prodl	equ	0xFF3
  9916                           intcon	equ	0xFF2
  9917                           indf0	equ	0xFEF
  9918                           postinc0	equ	0xFEE
  9919                           fsr0h	equ	0xFEA
  9920                           fsr0l	equ	0xFE9
  9921                           wreg	equ	0xFE8
  9922                           postinc1	equ	0xFE6
  9923                           postdec1	equ	0xFE5
  9924                           fsr1l	equ	0xFE1
  9925                           indf2	equ	0xFDF
  9926                           postinc2	equ	0xFDE
  9927                           postdec2	equ	0xFDD
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function _Lcd_Port *****************
  9933 ;; Defined at:
  9934 ;;		line 6 in file "lcd.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;  a               1    wreg     unsigned char 
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;  a               1   24[COMRAM] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9948 ;;      Params:         0       0       0       0       0       0       0       0       0
  9949 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9951 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9952 ;;Total ram usage:        1 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    4
  9955 ;; This function calls:
  9956 ;;		Nothing
  9957 ;; This function is called by:
  9958 ;;		_Lcd_Cmd
  9959 ;;		_Lcd_Init
  9960 ;;		_Lcd_Write_Char
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text50
  9965  00278A                     __ptext50:
  9966                           	opt stack 0
  9967  00278A                     _Lcd_Port:
  9968                           	opt stack 24
  9969                           
  9970                           ;incstack = 0
  9971                           ;Lcd_Port@a stored from wreg
  9972  00278A  6E19               	movwf	Lcd_Port@a,c
  9973                           
  9974                           ;lcd.c: 7: if (a & 1)
  9975  00278C  A019               	btfss	Lcd_Port@a,0,c
  9976  00278E  D002               	goto	l254
  9977                           
  9978                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9979  002790  8883               	bsf	3971,4,c	;volatile
  9980  002792  D001               	goto	l4403
  9981  002794                     l254:
  9982                           
  9983                           ;lcd.c: 9: else
  9984                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9985  002794  9883               	bcf	3971,4,c	;volatile
  9986  002796                     l4403:
  9987                           
  9988                           ;lcd.c: 12: if (a & 2)
  9989  002796  A219               	btfss	Lcd_Port@a,1,c
  9990  002798  D002               	goto	l256
  9991                           
  9992                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9993  00279A  8A83               	bsf	3971,5,c	;volatile
  9994  00279C  D001               	goto	l4407
  9995  00279E                     l256:
  9996                           
  9997                           ;lcd.c: 14: else
  9998                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9999  00279E  9A83               	bcf	3971,5,c	;volatile
 10000  0027A0                     l4407:
 10001                           
 10002                           ;lcd.c: 17: if (a & 4)
 10003  0027A0  A419               	btfss	Lcd_Port@a,2,c
 10004  0027A2  D002               	goto	l258
 10005                           
 10006                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10007  0027A4  8C83               	bsf	3971,6,c	;volatile
 10008  0027A6  D001               	goto	l4411
 10009  0027A8                     l258:
 10010                           
 10011                           ;lcd.c: 19: else
 10012                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10013  0027A8  9C83               	bcf	3971,6,c	;volatile
 10014  0027AA                     l4411:
 10015                           
 10016                           ;lcd.c: 22: if (a & 8)
 10017  0027AA  A619               	btfss	Lcd_Port@a,3,c
 10018  0027AC  D002               	goto	l260
 10019                           
 10020                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10021  0027AE  8E83               	bsf	3971,7,c	;volatile
 10022  0027B0  D001               	goto	l262
 10023  0027B2                     l260:
 10024                           
 10025                           ;lcd.c: 24: else
 10026                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10027  0027B2  9E83               	bcf	3971,7,c	;volatile
 10028  0027B4                     l262:
 10029  0027B4  0012               	return	
 10030  0027B6                     __end_of_Lcd_Port:
 10031                           	opt stack 0
 10032                           tblptru	equ	0xFF8
 10033                           tblptrh	equ	0xFF7
 10034                           tblptrl	equ	0xFF6
 10035                           tablat	equ	0xFF5
 10036                           prodh	equ	0xFF4
 10037                           prodl	equ	0xFF3
 10038                           intcon	equ	0xFF2
 10039                           indf0	equ	0xFEF
 10040                           postinc0	equ	0xFEE
 10041                           fsr0h	equ	0xFEA
 10042                           fsr0l	equ	0xFE9
 10043                           wreg	equ	0xFE8
 10044                           postinc1	equ	0xFE6
 10045                           postdec1	equ	0xFE5
 10046                           fsr1l	equ	0xFE1
 10047                           indf2	equ	0xFDF
 10048                           postinc2	equ	0xFDE
 10049                           postdec2	equ	0xFDD
 10050                           fsr2h	equ	0xFDA
 10051                           fsr2l	equ	0xFD9
 10052                           status	equ	0xFD8
 10053                           
 10054 ;; *************** function _TMRO_USART *****************
 10055 ;; Defined at:
 10056 ;;		line 84 in file "robot.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;		None
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;		None
 10061 ;; Return value:  Size  Location     Type
 10062 ;;		None               void
 10063 ;; Registers used:
 10064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10070 ;;      Params:         0       0       0       0       0       0       0       0       0
 10071 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10072 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10073 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10074 ;;Total ram usage:       14 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    3
 10077 ;; This function calls:
 10078 ;;		_ReadUSART
 10079 ;;		i2_Lcd_Clear
 10080 ;;		i2_Lcd_Set_Cursor
 10081 ;;		i2_Lcd_Write_String
 10082 ;; This function is called by:
 10083 ;;		Interrupt level 2
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           	psect	intcode
 10088  000008                     __pintcode:
 10089                           	opt stack 0
 10090  000008                     _TMRO_USART:
 10091                           	opt stack 21
 10092                           
 10093                           ;incstack = 0
 10094  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
 10095  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
 10096  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
 10097  000014  ED7A  F00C         	call	int_func,f	;refresh shadow registers
 10098                           pclatu	equ	0xFFB
 10099                           pclath	equ	0xFFA
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           indf0	equ	0xFEF
 10108                           postinc0	equ	0xFEE
 10109                           fsr0h	equ	0xFEA
 10110                           fsr0l	equ	0xFE9
 10111                           wreg	equ	0xFE8
 10112                           postinc1	equ	0xFE6
 10113                           postdec1	equ	0xFE5
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           postdec2	equ	0xFDD
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122                           	psect	intcode_body
 10123  0018F4                     __pintcode_body:
 10124                           	opt stack 21
 10125  0018F4                     int_func:
 10126                           	opt stack 21
 10127  0018F4  0006               	pop		; remove dummy address from shadow register refresh
 10128  0018F6  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
 10129  0018FA  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
 10130  0018FE  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
 10131  001902  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
 10132  001906  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
 10133  00190A  CFF3 F013          	movff	prodl,??_TMRO_USART+8
 10134  00190E  CFF4 F014          	movff	prodh,??_TMRO_USART+9
 10135  001912  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
 10136  001916  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
 10137  00191A  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
 10138  00191E  CFF5 F018          	movff	tablat,??_TMRO_USART+13
 10139                           
 10140                           ;robot.c: 89: if (PIR1bits.RCIF) {
 10141  001922  AA9E               	btfss	3998,5,c	;volatile
 10142  001924  D032               	goto	i2l371
 10143                           
 10144                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 10145  001926  503D               	movf	_cad,w,c
 10146  001928  0D01               	mullw	1
 10147  00192A  0101               	movlb	1	; () banked
 10148  00192C  0E28               	movlw	low _BluetoothDato
 10149  00192E  24F3               	addwf	prodl,w,c
 10150  001930  6ED9               	movwf	fsr2l,c
 10151  001932  0101               	movlb	1	; () banked
 10152  001934  0E01               	movlw	high _BluetoothDato
 10153  001936  20F4               	addwfc	prodh,w,c
 10154  001938  6EDA               	movwf	fsr2h,c
 10155  00193A  EC67  F014         	call	_ReadUSART	;wreg free
 10156  00193E  6EDF               	movwf	indf2,c
 10157                           
 10158                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 10159  001940  503D               	movf	_cad,w,c
 10160  001942  0D01               	mullw	1
 10161  001944  0101               	movlb	1	; () banked
 10162  001946  0E28               	movlw	low _BluetoothDato
 10163  001948  24F3               	addwf	prodl,w,c
 10164  00194A  6ED9               	movwf	fsr2l,c
 10165  00194C  0101               	movlb	1	; () banked
 10166  00194E  0E01               	movlw	high _BluetoothDato
 10167  001950  20F4               	addwfc	prodh,w,c
 10168  001952  6EDA               	movwf	fsr2h,c
 10169  001954  0E23               	movlw	35
 10170  001956  62DF               	cpfseq	indf2,c
 10171  001958  D013               	goto	i2l4283
 10172                           
 10173                           ; BSR set to: 1
 10174                           ;robot.c: 93: if (ComanTFlag == 0) {
 10175  00195A  6632               	tstfsz	_ComanTFlag,c
 10176  00195C  D007               	goto	i2l4279
 10177                           
 10178                           ; BSR set to: 1
 10179                           ;robot.c: 94: EntTrama = 1;
 10180  00195E  0E01               	movlw	1
 10181  001960  6E35               	movwf	_EntTrama,c
 10182                           
 10183                           ;robot.c: 95: FinComandT = 0;
 10184  001962  0E00               	movlw	0
 10185  001964  6E37               	movwf	_FinComandT,c
 10186                           
 10187                           ;robot.c: 96: ComanTFlag = 1;
 10188  001966  0E01               	movlw	1
 10189  001968  6E32               	movwf	_ComanTFlag,c
 10190  00196A  D00D               	goto	i2u434_40
 10191  00196C                     i2l4279:
 10192                           
 10193                           ; BSR set to: 1
 10194                           ;robot.c: 99: else if (ComanTFlag == 1) {
 10195  00196C  0432               	decf	_ComanTFlag,w,c
 10196  00196E  A4D8               	btfss	status,2,c
 10197  001970  D01C               	goto	i2l4295
 10198                           
 10199                           ; BSR set to: 1
 10200                           ;robot.c: 100: ComanTFlag = 0;
 10201  001972  0E00               	movlw	0
 10202  001974  6E32               	movwf	_ComanTFlag,c
 10203                           
 10204                           ;robot.c: 101: FinComandT = 1;
 10205  001976  0E01               	movlw	1
 10206  001978  6E37               	movwf	_FinComandT,c
 10207                           
 10208                           ;robot.c: 102: EntTrama = 0;
 10209  00197A  0E00               	movlw	0
 10210  00197C  6E35               	movwf	_EntTrama,c
 10211  00197E  D015               	goto	i2l4295
 10212  001980                     i2l4283:
 10213                           
 10214                           ; BSR set to: 1
 10215                           ;robot.c: 106: else if (EntTrama == 1)
 10216  001980  0435               	decf	_EntTrama,w,c
 10217  001982  A4D8               	btfss	status,2,c
 10218  001984  D012               	goto	i2l4295
 10219  001986                     i2u434_40:
 10220                           
 10221                           ; BSR set to: 1
 10222                           ;robot.c: 107: cad++;
 10223  001986  2A3D               	incf	_cad,f,c
 10224  001988  D010               	goto	i2l4295
 10225  00198A                     i2l371:
 10226                           
 10227                           ;robot.c: 111: else if(PIR1bits.TMR2IF){
 10228  00198A  A29E               	btfss	3998,1,c	;volatile
 10229  00198C  D00E               	goto	i2l4295
 10230                           
 10231                           ;robot.c: 112: Lcd_Clear();
 10232  00198E  ECB3  F014         	call	i2_Lcd_Clear	;wreg free
 10233                           
 10234                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 10235  001992  0E01               	movlw	1
 10236  001994  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10237  001996  0E01               	movlw	1
 10238  001998  EC55  F012         	call	i2_Lcd_Set_Cursor
 10239                           
 10240                           ;robot.c: 114: Lcd_Write_String("Interruption TMR2");
 10241  00199C  0E7F               	movlw	high STR_19
 10242  00199E  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10243  0019A0  0E43               	movlw	low STR_19
 10244  0019A2  6E05               	movwf	i2Lcd_Write_String@a,c
 10245  0019A4  ECB1  F010         	call	i2_Lcd_Write_String	;wreg free
 10246                           
 10247                           ;robot.c: 115: PIE1bits.TMR2IE = 0;
 10248  0019A8  929D               	bcf	3997,1,c	;volatile
 10249  0019AA                     i2l4295:
 10250                           
 10251                           ;robot.c: 116: }
 10252                           ;robot.c: 117: PIR1bits.TMR2IF=0;
 10253  0019AA  929E               	bcf	3998,1,c	;volatile
 10254                           
 10255                           ;robot.c: 118: PIR1bits.RCIF=0;
 10256  0019AC  9A9E               	bcf	3998,5,c	;volatile
 10257  0019AE  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10258  0019B2  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10259  0019B6  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10260  0019BA  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10261  0019BE  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10262  0019C2  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10263  0019C6  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10264  0019CA  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10265  0019CE  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10266  0019D2  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10267  0019D6  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10268  0019DA  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10269  0019DE  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10270  0019E2  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10271  0019E6  0011               	retfie		f
 10272  0019E8                     __end_of_TMRO_USART:
 10273                           	opt stack 0
 10274                           pclatu	equ	0xFFB
 10275                           pclath	equ	0xFFA
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           indf0	equ	0xFEF
 10284                           postinc0	equ	0xFEE
 10285                           fsr0h	equ	0xFEA
 10286                           fsr0l	equ	0xFE9
 10287                           wreg	equ	0xFE8
 10288                           postinc1	equ	0xFE6
 10289                           postdec1	equ	0xFE5
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           indf2	equ	0xFDF
 10293                           postinc2	equ	0xFDE
 10294                           postdec2	equ	0xFDD
 10295                           fsr2h	equ	0xFDA
 10296                           fsr2l	equ	0xFD9
 10297                           status	equ	0xFD8
 10298                           
 10299 ;; *************** function i2_Lcd_Write_String *****************
 10300 ;; Defined at:
 10301 ;;		line 90 in file "lcd.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  a               2    4[COMRAM] PTR unsigned char 
 10304 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
 10305 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
 10306 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10309 ;; Return value:  Size  Location     Type
 10310 ;;		None               void
 10311 ;; Registers used:
 10312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10318 ;;      Params:         2       0       0       0       0       0       0       0       0
 10319 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10320 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10321 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10322 ;;Total ram usage:        6 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    2
 10325 ;; This function calls:
 10326 ;;		i2_Lcd_Write_Char
 10327 ;; This function is called by:
 10328 ;;		_TMRO_USART
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           	psect	text52
 10333  002162                     __ptext52:
 10334                           	opt stack 0
 10335  002162                     i2_Lcd_Write_String:
 10336                           	opt stack 21
 10337                           
 10338                           ;lcd.c: 91: int i;
 10339                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10340                           
 10341                           ;incstack = 0
 10342  002162  0E00               	movlw	0
 10343  002164  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10344  002166  0E00               	movlw	0
 10345  002168  6E09               	movwf	i2Lcd_Write_String@i,c
 10346  00216A  D01C               	goto	i2l4217
 10347  00216C                     i2l4213:
 10348                           
 10349                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10350  00216C  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10351  002170  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10352  002174  5009               	movf	i2Lcd_Write_String@i,w,c
 10353  002176  2607               	addwf	??i2_Lcd_Write_String,f,c
 10354  002178  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10355  00217A  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10356  00217C  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10357  002180  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10358  002184  6AF8               	clrf	tblptru,c
 10359  002186  0E07               	movlw	(high __ramtop+-1)
 10360  002188  64F7               	cpfsgt	tblptrh,c
 10361  00218A  D003               	bra	i2u422_47
 10362  00218C  0008               	tblrd		*
 10363  00218E  50F5               	movf	tablat,w,c
 10364  002190  D005               	bra	i2u422_40
 10365  002192                     i2u422_47:
 10366  002192  CFF6 FFE9          	movff	tblptrl,fsr0l
 10367  002196  CFF7 FFEA          	movff	tblptrh,fsr0h
 10368  00219A  50EF               	movf	indf0,w,c
 10369  00219C                     i2u422_40:
 10370  00219C  EC90  F013         	call	i2_Lcd_Write_Char
 10371  0021A0  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10372  0021A2  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10373  0021A4                     i2l4217:
 10374  0021A4  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10375  0021A8  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10376  0021AC  5009               	movf	i2Lcd_Write_String@i,w,c
 10377  0021AE  2607               	addwf	??i2_Lcd_Write_String,f,c
 10378  0021B0  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10379  0021B2  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10380  0021B4  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10381  0021B8  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10382  0021BC  6AF8               	clrf	tblptru,c
 10383  0021BE  0E07               	movlw	(high __ramtop+-1)
 10384  0021C0  64F7               	cpfsgt	tblptrh,c
 10385  0021C2  D003               	bra	i2u423_47
 10386  0021C4  0008               	tblrd		*
 10387  0021C6  50F5               	movf	tablat,w,c
 10388  0021C8  D005               	bra	i2u423_40
 10389  0021CA                     i2u423_47:
 10390  0021CA  CFF6 FFE9          	movff	tblptrl,fsr0l
 10391  0021CE  CFF7 FFEA          	movff	tblptrh,fsr0h
 10392  0021D2  50EF               	movf	indf0,w,c
 10393  0021D4                     i2u423_40:
 10394  0021D4  0900               	iorlw	0
 10395  0021D6  B4D8               	btfsc	status,2,c
 10396  0021D8  0012               	return	
 10397  0021DA  D7C8               	goto	i2l4213
 10398  0021DC                     __end_ofi2_Lcd_Write_String:
 10399                           	opt stack 0
 10400                           pclatu	equ	0xFFB
 10401                           pclath	equ	0xFFA
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           indf0	equ	0xFEF
 10410                           postinc0	equ	0xFEE
 10411                           fsr0h	equ	0xFEA
 10412                           fsr0l	equ	0xFE9
 10413                           wreg	equ	0xFE8
 10414                           postinc1	equ	0xFE6
 10415                           postdec1	equ	0xFE5
 10416                           fsr1h	equ	0xFE2
 10417                           fsr1l	equ	0xFE1
 10418                           indf2	equ	0xFDF
 10419                           postinc2	equ	0xFDE
 10420                           postdec2	equ	0xFDD
 10421                           fsr2h	equ	0xFDA
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function i2_Lcd_Write_Char *****************
 10426 ;; Defined at:
 10427 ;;		line 75 in file "lcd.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;  a               1    wreg     unsigned char 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  a               1    3[COMRAM] unsigned char 
 10432 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10433 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10434 ;; Return value:  Size  Location     Type
 10435 ;;		None               void
 10436 ;; Registers used:
 10437 ;;		wreg, status,2, status,0, cstack
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10443 ;;      Params:         0       0       0       0       0       0       0       0       0
 10444 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10446 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10447 ;;Total ram usage:        3 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    1
 10450 ;; This function calls:
 10451 ;;		i2_Lcd_Port
 10452 ;; This function is called by:
 10453 ;;		i2_Lcd_Write_String
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text53
 10458  002720                     __ptext53:
 10459                           	opt stack 0
 10460  002720                     i2_Lcd_Write_Char:
 10461                           	opt stack 21
 10462                           
 10463                           ;incstack = 0
 10464                           ;i2Lcd_Write_Char@a stored from wreg
 10465  002720  6E04               	movwf	i2Lcd_Write_Char@a,c
 10466                           
 10467                           ;lcd.c: 76: char temp, y;
 10468                           ;lcd.c: 77: temp = a & 0x0F;
 10469  002722  5004               	movf	i2Lcd_Write_Char@a,w,c
 10470  002724  0B0F               	andlw	15
 10471  002726  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10472                           
 10473                           ;lcd.c: 78: y = a & 0xF0;
 10474  002728  5004               	movf	i2Lcd_Write_Char@a,w,c
 10475  00272A  0BF0               	andlw	240
 10476  00272C  6E03               	movwf	i2Lcd_Write_Char@y,c
 10477                           
 10478                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10479  00272E  8084               	bsf	3972,0,c	;volatile
 10480                           
 10481                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10482  002730  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10483  002732  0B0F               	andlw	15
 10484  002734  ECDB  F013         	call	i2_Lcd_Port
 10485                           
 10486                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10487  002738  8484               	bsf	3972,2,c	;volatile
 10488                           
 10489                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10490  00273A  0E0D               	movlw	13
 10491  00273C                     i2u643_47:
 10492  00273C  2EE8               	decfsz	wreg,f,c
 10493  00273E  D7FE               	goto	i2u643_47
 10494  002740  F000               	nop	
 10495                           
 10496                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10497  002742  9484               	bcf	3972,2,c	;volatile
 10498                           
 10499                           ;lcd.c: 84: Lcd_Port(temp);
 10500  002744  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10501  002746  ECDB  F013         	call	i2_Lcd_Port
 10502                           
 10503                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10504  00274A  8484               	bsf	3972,2,c	;volatile
 10505                           
 10506                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10507  00274C  0E0D               	movlw	13
 10508  00274E                     i2u644_47:
 10509  00274E  2EE8               	decfsz	wreg,f,c
 10510  002750  D7FE               	goto	i2u644_47
 10511  002752  F000               	nop	
 10512                           
 10513                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10514  002754  9484               	bcf	3972,2,c	;volatile
 10515  002756  0012               	return	
 10516  002758                     __end_ofi2_Lcd_Write_Char:
 10517                           	opt stack 0
 10518                           pclatu	equ	0xFFB
 10519                           pclath	equ	0xFFA
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           indf0	equ	0xFEF
 10528                           postinc0	equ	0xFEE
 10529                           fsr0h	equ	0xFEA
 10530                           fsr0l	equ	0xFE9
 10531                           wreg	equ	0xFE8
 10532                           postinc1	equ	0xFE6
 10533                           postdec1	equ	0xFE5
 10534                           fsr1h	equ	0xFE2
 10535                           fsr1l	equ	0xFE1
 10536                           indf2	equ	0xFDF
 10537                           postinc2	equ	0xFDE
 10538                           postdec2	equ	0xFDD
 10539                           fsr2h	equ	0xFDA
 10540                           fsr2l	equ	0xFD9
 10541                           status	equ	0xFD8
 10542                           
 10543 ;; *************** function i2_Lcd_Set_Cursor *****************
 10544 ;; Defined at:
 10545 ;;		line 40 in file "lcd.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;  a               1    wreg     unsigned char 
 10548 ;;  b               1    3[COMRAM] unsigned char 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  a               1    4[COMRAM] unsigned char 
 10551 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10552 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10553 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;		None               void
 10556 ;; Registers used:
 10557 ;;		wreg, status,2, status,0, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10563 ;;      Params:         1       0       0       0       0       0       0       0       0
 10564 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10565 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10566 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10567 ;;Total ram usage:        5 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    2
 10570 ;; This function calls:
 10571 ;;		i2_Lcd_Cmd
 10572 ;; This function is called by:
 10573 ;;		_TMRO_USART
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           	psect	text54
 10578  0024AA                     __ptext54:
 10579                           	opt stack 0
 10580  0024AA                     i2_Lcd_Set_Cursor:
 10581                           	opt stack 21
 10582                           
 10583                           ;incstack = 0
 10584                           ;i2Lcd_Set_Cursor@a stored from wreg
 10585  0024AA  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10586                           
 10587                           ;lcd.c: 41: char temp, z, y;
 10588                           ;lcd.c: 42: if (a == 1) {
 10589  0024AC  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10590  0024AE  A4D8               	btfss	status,2,c
 10591  0024B0  D010               	goto	i2l4203
 10592                           
 10593                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10594  0024B2  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10595  0024B4  0F7F               	addlw	127
 10596  0024B6  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10597                           
 10598                           ;lcd.c: 44: z = temp >> 4;
 10599  0024B8  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10600  0024BA  0B0F               	andlw	15
 10601  0024BC  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10602                           
 10603                           ;lcd.c: 45: y = temp & 0x0F;
 10604  0024BE  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10605  0024C0  0B0F               	andlw	15
 10606  0024C2  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10607                           
 10608                           ;lcd.c: 46: Lcd_Cmd(z);
 10609  0024C4  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10610  0024C6  EC39  F014         	call	i2_Lcd_Cmd
 10611                           
 10612                           ;lcd.c: 47: Lcd_Cmd(y);
 10613  0024CA  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10614  0024CC  EC39  F014         	call	i2_Lcd_Cmd
 10615                           
 10616                           ;lcd.c: 48: } else if (a == 2) {
 10617  0024D0  D013               	goto	i2l274
 10618  0024D2                     i2l4203:
 10619  0024D2  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10620  0024D4  0A02               	xorlw	2
 10621  0024D6  A4D8               	btfss	status,2,c
 10622  0024D8  D00F               	goto	i2l274
 10623                           
 10624                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10625  0024DA  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10626  0024DC  0FBF               	addlw	191
 10627  0024DE  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10628                           
 10629                           ;lcd.c: 50: z = temp >> 4;
 10630  0024E0  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10631  0024E2  0B0F               	andlw	15
 10632  0024E4  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10633                           
 10634                           ;lcd.c: 51: y = temp & 0x0F;
 10635  0024E6  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10636  0024E8  0B0F               	andlw	15
 10637  0024EA  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10638                           
 10639                           ;lcd.c: 52: Lcd_Cmd(z);
 10640  0024EC  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10641  0024EE  EC39  F014         	call	i2_Lcd_Cmd
 10642                           
 10643                           ;lcd.c: 53: Lcd_Cmd(y);
 10644  0024F2  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10645  0024F4  EC39  F014         	call	i2_Lcd_Cmd
 10646  0024F8                     i2l274:
 10647  0024F8  0012               	return	
 10648  0024FA                     __end_ofi2_Lcd_Set_Cursor:
 10649                           	opt stack 0
 10650                           pclatu	equ	0xFFB
 10651                           pclath	equ	0xFFA
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           intcon	equ	0xFF2
 10659                           indf0	equ	0xFEF
 10660                           postinc0	equ	0xFEE
 10661                           fsr0h	equ	0xFEA
 10662                           fsr0l	equ	0xFE9
 10663                           wreg	equ	0xFE8
 10664                           postinc1	equ	0xFE6
 10665                           postdec1	equ	0xFE5
 10666                           fsr1h	equ	0xFE2
 10667                           fsr1l	equ	0xFE1
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function i2_Lcd_Clear *****************
 10676 ;; Defined at:
 10677 ;;		line 35 in file "lcd.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;		None               void
 10684 ;; Registers used:
 10685 ;;		wreg, status,2, cstack
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10691 ;;      Params:         0       0       0       0       0       0       0       0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10694 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    2
 10698 ;; This function calls:
 10699 ;;		i2_Lcd_Cmd
 10700 ;; This function is called by:
 10701 ;;		_TMRO_USART
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           	psect	text55
 10706  002966                     __ptext55:
 10707                           	opt stack 0
 10708  002966                     i2_Lcd_Clear:
 10709                           	opt stack 21
 10710                           
 10711                           ;lcd.c: 36: Lcd_Cmd(0);
 10712                           
 10713                           ;incstack = 0
 10714  002966  0E00               	movlw	0
 10715  002968  EC39  F014         	call	i2_Lcd_Cmd
 10716                           
 10717                           ;lcd.c: 37: Lcd_Cmd(1);
 10718  00296C  0E01               	movlw	1
 10719  00296E  EC39  F014         	call	i2_Lcd_Cmd
 10720  002972  0012               	return	
 10721  002974                     __end_ofi2_Lcd_Clear:
 10722                           	opt stack 0
 10723                           pclatu	equ	0xFFB
 10724                           pclath	equ	0xFFA
 10725                           tblptru	equ	0xFF8
 10726                           tblptrh	equ	0xFF7
 10727                           tblptrl	equ	0xFF6
 10728                           tablat	equ	0xFF5
 10729                           prodh	equ	0xFF4
 10730                           prodl	equ	0xFF3
 10731                           intcon	equ	0xFF2
 10732                           indf0	equ	0xFEF
 10733                           postinc0	equ	0xFEE
 10734                           fsr0h	equ	0xFEA
 10735                           fsr0l	equ	0xFE9
 10736                           wreg	equ	0xFE8
 10737                           postinc1	equ	0xFE6
 10738                           postdec1	equ	0xFE5
 10739                           fsr1h	equ	0xFE2
 10740                           fsr1l	equ	0xFE1
 10741                           indf2	equ	0xFDF
 10742                           postinc2	equ	0xFDE
 10743                           postdec2	equ	0xFDD
 10744                           fsr2h	equ	0xFDA
 10745                           fsr2l	equ	0xFD9
 10746                           status	equ	0xFD8
 10747                           
 10748 ;; *************** function i2_Lcd_Cmd *****************
 10749 ;; Defined at:
 10750 ;;		line 27 in file "lcd.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;  a               1    wreg     unsigned char 
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;  a               1    2[COMRAM] unsigned char 
 10755 ;; Return value:  Size  Location     Type
 10756 ;;		None               void
 10757 ;; Registers used:
 10758 ;;		wreg, status,2, cstack
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10764 ;;      Params:         0       0       0       0       0       0       0       0       0
 10765 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10766 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10767 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10768 ;;Total ram usage:        2 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    1
 10771 ;; This function calls:
 10772 ;;		i2_Lcd_Port
 10773 ;; This function is called by:
 10774 ;;		i2_Lcd_Clear
 10775 ;;		i2_Lcd_Set_Cursor
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text56
 10780  002872                     __ptext56:
 10781                           	opt stack 0
 10782  002872                     i2_Lcd_Cmd:
 10783                           	opt stack 21
 10784                           
 10785                           ;incstack = 0
 10786                           ;i2Lcd_Cmd@a stored from wreg
 10787  002872  6E03               	movwf	i2Lcd_Cmd@a,c
 10788                           
 10789                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10790  002874  9084               	bcf	3972,0,c	;volatile
 10791                           
 10792                           ;lcd.c: 29: Lcd_Port(a);
 10793  002876  5003               	movf	i2Lcd_Cmd@a,w,c
 10794  002878  ECDB  F013         	call	i2_Lcd_Port
 10795                           
 10796                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10797  00287C  8484               	bsf	3972,2,c	;volatile
 10798                           
 10799                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10800  00287E  0E06               	movlw	6
 10801  002880  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10802  002882  0E30               	movlw	48
 10803  002884                     i2u645_47:
 10804  002884  2EE8               	decfsz	wreg,f,c
 10805  002886  D7FE               	goto	i2u645_47
 10806  002888  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10807  00288A  D7FC               	goto	i2u645_47
 10808  00288C  D000               	nop2	
 10809                           
 10810                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10811  00288E  9484               	bcf	3972,2,c	;volatile
 10812  002890  0012               	return	
 10813  002892                     __end_ofi2_Lcd_Cmd:
 10814                           	opt stack 0
 10815                           pclatu	equ	0xFFB
 10816                           pclath	equ	0xFFA
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           indf0	equ	0xFEF
 10825                           postinc0	equ	0xFEE
 10826                           fsr0h	equ	0xFEA
 10827                           fsr0l	equ	0xFE9
 10828                           wreg	equ	0xFE8
 10829                           postinc1	equ	0xFE6
 10830                           postdec1	equ	0xFE5
 10831                           fsr1h	equ	0xFE2
 10832                           fsr1l	equ	0xFE1
 10833                           indf2	equ	0xFDF
 10834                           postinc2	equ	0xFDE
 10835                           postdec2	equ	0xFDD
 10836                           fsr2h	equ	0xFDA
 10837                           fsr2l	equ	0xFD9
 10838                           status	equ	0xFD8
 10839                           
 10840 ;; *************** function i2_Lcd_Port *****************
 10841 ;; Defined at:
 10842 ;;		line 6 in file "lcd.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  a               1    wreg     unsigned char 
 10845 ;; Auto vars:     Size  Location     Type
 10846 ;;  a               1    0[COMRAM] unsigned char 
 10847 ;; Return value:  Size  Location     Type
 10848 ;;		None               void
 10849 ;; Registers used:
 10850 ;;		wreg
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10856 ;;      Params:         0       0       0       0       0       0       0       0       0
 10857 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10858 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10859 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10860 ;;Total ram usage:        1 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; This function calls:
 10863 ;;		Nothing
 10864 ;; This function is called by:
 10865 ;;		i2_Lcd_Cmd
 10866 ;;		i2_Lcd_Write_Char
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           	psect	text57
 10871  0027B6                     __ptext57:
 10872                           	opt stack 0
 10873  0027B6                     i2_Lcd_Port:
 10874                           	opt stack 21
 10875                           
 10876                           ;incstack = 0
 10877                           ;i2Lcd_Port@a stored from wreg
 10878  0027B6  6E01               	movwf	i2Lcd_Port@a,c
 10879                           
 10880                           ;lcd.c: 7: if (a & 1)
 10881  0027B8  A001               	btfss	i2Lcd_Port@a,0,c
 10882  0027BA  D002               	goto	i2l254
 10883                           
 10884                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10885  0027BC  8883               	bsf	3971,4,c	;volatile
 10886  0027BE  D001               	goto	i2l3753
 10887  0027C0                     i2l254:
 10888                           
 10889                           ;lcd.c: 9: else
 10890                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10891  0027C0  9883               	bcf	3971,4,c	;volatile
 10892  0027C2                     i2l3753:
 10893                           
 10894                           ;lcd.c: 12: if (a & 2)
 10895  0027C2  A201               	btfss	i2Lcd_Port@a,1,c
 10896  0027C4  D002               	goto	i2l256
 10897                           
 10898                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10899  0027C6  8A83               	bsf	3971,5,c	;volatile
 10900  0027C8  D001               	goto	i2l3757
 10901  0027CA                     i2l256:
 10902                           
 10903                           ;lcd.c: 14: else
 10904                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10905  0027CA  9A83               	bcf	3971,5,c	;volatile
 10906  0027CC                     i2l3757:
 10907                           
 10908                           ;lcd.c: 17: if (a & 4)
 10909  0027CC  A401               	btfss	i2Lcd_Port@a,2,c
 10910  0027CE  D002               	goto	i2l258
 10911                           
 10912                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10913  0027D0  8C83               	bsf	3971,6,c	;volatile
 10914  0027D2  D001               	goto	i2l3761
 10915  0027D4                     i2l258:
 10916                           
 10917                           ;lcd.c: 19: else
 10918                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10919  0027D4  9C83               	bcf	3971,6,c	;volatile
 10920  0027D6                     i2l3761:
 10921                           
 10922                           ;lcd.c: 22: if (a & 8)
 10923  0027D6  A601               	btfss	i2Lcd_Port@a,3,c
 10924  0027D8  D002               	goto	i2l260
 10925                           
 10926                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10927  0027DA  8E83               	bsf	3971,7,c	;volatile
 10928  0027DC  D001               	goto	i2l262
 10929  0027DE                     i2l260:
 10930                           
 10931                           ;lcd.c: 24: else
 10932                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10933  0027DE  9E83               	bcf	3971,7,c	;volatile
 10934  0027E0                     i2l262:
 10935  0027E0  0012               	return	
 10936  0027E2                     __end_ofi2_Lcd_Port:
 10937                           	opt stack 0
 10938                           pclatu	equ	0xFFB
 10939                           pclath	equ	0xFFA
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           indf0	equ	0xFEF
 10948                           postinc0	equ	0xFEE
 10949                           fsr0h	equ	0xFEA
 10950                           fsr0l	equ	0xFE9
 10951                           wreg	equ	0xFE8
 10952                           postinc1	equ	0xFE6
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _ReadUSART *****************
 10964 ;; Defined at:
 10965 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;  data            1    0[COMRAM] unsigned char 
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg, status,2, status,0
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0
 10980 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10982 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10983 ;;Total ram usage:        1 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; This function calls:
 10986 ;;		Nothing
 10987 ;; This function is called by:
 10988 ;;		_TMRO_USART
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	text58
 10993  0028CE                     __ptext58:
 10994                           	opt stack 0
 10995  0028CE                     _ReadUSART:
 10996                           	opt stack 23
 10997                           
 10998                           ;incstack = 0
 10999  0028CE  0EF2               	movlw	242
 11000  0028D0  163C               	andwf	_USART_Status,f,c
 11001  0028D2  ACAB               	btfss	4011,6,c	;volatile
 11002  0028D4  D003               	goto	i2l620
 11003  0028D6  903C               	bcf	_USART_Status,0,c
 11004  0028D8  B0AB               	btfsc	4011,0,c	;volatile
 11005  0028DA  803C               	bsf	_USART_Status,0,c
 11006  0028DC                     i2l620:
 11007  0028DC  B4AB               	btfsc	4011,2,c	;volatile
 11008  0028DE  843C               	bsf	_USART_Status,2,c
 11009  0028E0  B2AB               	btfsc	4011,1,c	;volatile
 11010  0028E2  863C               	bsf	_USART_Status,3,c
 11011  0028E4  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 11012  0028E8  5001               	movf	ReadUSART@data,w,c
 11013  0028EA  0012               	return	
 11014  0028EC                     __end_of_ReadUSART:
 11015                           	opt stack 0
 11016                           pclatu	equ	0xFFB
 11017                           pclath	equ	0xFFA
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           indf0	equ	0xFEF
 11026                           postinc0	equ	0xFEE
 11027                           fsr0h	equ	0xFEA
 11028                           fsr0l	equ	0xFE9
 11029                           wreg	equ	0xFE8
 11030                           postinc1	equ	0xFE6
 11031                           postdec1	equ	0xFE5
 11032                           fsr1h	equ	0xFE2
 11033                           fsr1l	equ	0xFE1
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           fsr2h	equ	0xFDA
 11038                           fsr2l	equ	0xFD9
 11039                           status	equ	0xFD8
 11040                           pclatu	equ	0xFFB
 11041                           pclath	equ	0xFFA
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           indf0	equ	0xFEF
 11050                           postinc0	equ	0xFEE
 11051                           fsr0h	equ	0xFEA
 11052                           fsr0l	equ	0xFE9
 11053                           wreg	equ	0xFE8
 11054                           postinc1	equ	0xFE6
 11055                           postdec1	equ	0xFE5
 11056                           fsr1h	equ	0xFE2
 11057                           fsr1l	equ	0xFE1
 11058                           indf2	equ	0xFDF
 11059                           postinc2	equ	0xFDE
 11060                           postdec2	equ	0xFDD
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065                           	psect	rparam
 11066  0000                     pclatu	equ	0xFFB
 11067                           pclath	equ	0xFFA
 11068                           tblptru	equ	0xFF8
 11069                           tblptrh	equ	0xFF7
 11070                           tblptrl	equ	0xFF6
 11071                           tablat	equ	0xFF5
 11072                           prodh	equ	0xFF4
 11073                           prodl	equ	0xFF3
 11074                           intcon	equ	0xFF2
 11075                           indf0	equ	0xFEF
 11076                           postinc0	equ	0xFEE
 11077                           fsr0h	equ	0xFEA
 11078                           fsr0l	equ	0xFE9
 11079                           wreg	equ	0xFE8
 11080                           postinc1	equ	0xFE6
 11081                           postdec1	equ	0xFE5
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           fsr2h	equ	0xFDA
 11088                           fsr2l	equ	0xFD9
 11089                           status	equ	0xFD8


Data Sizes:
    Strings     187
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1415$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124750
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5102
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  116355
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      99
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1064
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Aug 28 15:42:10 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 26E6                             l59 22F8  
                           l68 1F3E                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l230 2952                            l209 277C  
                          l260 27B2                            l262 27B4                            l254 2794  
                          l256 279E                            l440 2232                            l433 21EC  
                          l258 27A8                            l274 24A8                            l434 2252  
                          l602 2352                            l515 0592                            l611 2396  
                          l436 2202                            l438 221A                            l606 2366  
                          l607 2368                            l608 2372                            l609 2374  
                          l570 25F8                            l468 0DB6                            l920 17F2  
                          l568 25EC                            l569 25F6                            l961 1B52  
                          l929 17E2                            l998 10CA                            l999 12DC  
                 __CFG_CPB$OFF 000000                            _PR2 000FCB                   __CFG_CPD$OFF 000000  
                 __CFG_BOR$OFF 000000                            _cad 003D                   ___awmod@sign 001E  
                          prod 000FF3                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1002 1104                           l1004 112C  
                         l1013 1216                           l1022 1240                           l1040 1862  
                         l1121 1FDE                           l1041 188A                           l1131 23EC  
                         l1038 18F2                           l1062 1434                           l1047 18E2  
                         l1056 1EE6                           l1072 2820                           l1082 157E  
                         l5001 2404                           l5003 2410                           l5013 2550  
                         l5031 0052                           l5113 0420                           l5033 0060  
                         l5025 0030                           l5017 2582                           l4411 27AA  
                         l4403 2796                           l5211 0808                           l5133 049C  
                         l5141 053A                           l5109 03B8                           l5053 011C  
                         l5037 0066                           l4407 27A0                           l4503 1334  
                         l5143 0548                           l5127 0472                           l5039 00A2  
                         l4441 1122                           l4601 1E1E                           l4521 13A0  
                         l5225 08FA                           l5217 0838                           l5081 0272  
                         l4361 2922                           l5235 20F2                           l4371 1ACA  
                         l4451 1164                           l4435 1112                           l4603 1E22  
                         l4611 1E40                           l4531 13EA                           l5219 084C  
                         l5163 05C4                           l5155 0596                           l5227 090E  
                         l4381 1B26                           l4373 1AD4                           l4461 11B8  
                         l4429 10D8                           l4517 1382                           l5149 0562  
                         l5093 0320                           l5085 02B8                           l5077 024C  
                         l5069 01E4                           l5229 0932                           l5333 2300  
                         l4621 1D3E                           l5239 212A                           l4383 1B30  
                         l4375 1AF2                           l4367 1ABC                           l4471 120C  
                         l4463 11C4                           l4615 1E4E                           l4607 1E36  
                         l4527 13CC                           l5167 0616                           l5271 25E8  
                         l5351 1F48                           l4631 1D94                           l4457 1198  
                         l4561 1C5C                           l4553 1C3E                           l5185 0730  
                         l5177 0708                           l5097 0346                           l5329 22D6  
                         l4641 276A                           l4379 1B08                           l4459 11AC  
                         l4571 1C7C                           l4563 1C60                           l4547 1C1E  
                         l5179 0716                           l5187 073C                           l5347 1F24  
                         l4627 1D7C                           l4901 1EB8                           l4477 126A  
                         l4469 11F8                           l4733 100A                           l4725 0F26  
                         l5197 07B6                           l5605 1622                           l4637 1DBE  
                         l5541 1A52                           l4487 12B8                           l4815 18AA  
                         l4559 1C54                           l4575 1C86                           l4591 1DEC  
                         l5447 224A                           l4663 2354                           l4655 2346  
                         l5623 1678                           l5631 1694                           l5711 1CD6  
                         l5369 2482                           l4921 145E                           l4841 1716  
                         l4825 18D2                           l4497 1300                           l4753 0B5C  
                         l5633 16B8                           l4907 1EE4                           l4835 16EA  
                         l4827 18DE                           l4819 18BA                           l4579 1C94  
                         l4595 1E08                           l4771 0D86                           l4747 0A9A  
                         l4781 180E                           l4765 0CB8                           l4757 0B6C  
                         l5717 1CE4                           l4951 1542                           l4943 1508  
                         l4863 1788                           l4855 1758                           l4599 1E16  
                         l5583 15AA                           l4953 1548                           l4873 17AA  
                         l5577 158E                           l5737 1D1E                           l4939 14EC  
                         l4971 1FA0                           l4883 17D2                           l4787 1828  
                         l5595 15E2                           l4957 156E                           l4949 152A  
                         l4885 17DE                           l4877 17BA                           l5589 15C6  
                         l4967 1F90                           l4991 23BA                           l4897 1E88  
                         l4969 1F9C                           l4979 1FD0                           l4995 23DE  
                         l4987 23AA                           l4989 23B6                           STR_1 7FB9  
                         STR_2 7F65                           STR_3 7FDB                           STR_4 7FDB  
                         STR_5 7FB6                           STR_6 7F74                           STR_7 7F82  
                         STR_8 7F9E                           STR_9 7F90                __end_of_BT_Init 1BFA  
                         _PIE1 000F9D                           u5220 18C0                           u5310 17C0  
                         u5151 1804                           u5240 16DC                           u4531 1076  
                         u5171 181E                           u5420 1510                           u5260 1708  
                         u4541 1096                           u5245 16D2                           u5265 16FE  
                         u5371 144E                           u4741 12F2                           u5390 148A  
                         u6407 2704                           u4920 1D72                           u6417 2716  
                         u4761 1314                           u4770 1320                           u5570 016C  
                         u6427 2864                           u5395 1480                           u5555 00F6  
                         u6347 2260                           u6357 2276                           u4950 1DB4  
                         u5575 0160                           u4927 1D68                           u5911 1B6A  
                         u6367 228C                           u5840 2122                           u5905 260C  
                         u6377 1A0A                           u5850 215A                           u6387 1A42  
                         u6397 2770                           u4957 1DAA                           u5847 2118  
                         u5775 078E                           u5857 2150                           u5875 2646  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1C9E  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1428 0098                   _sprintf$2456 0095                __end_of_Lcd_Cmd 2872  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 2676                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1C9E                __end_of___ftadd 12DE  
                        STR_10 7FF3                          STR_11 7F55                          STR_12 7FFA  
                        STR_20 7FEC                          STR_13 7F53                          STR_21 7FC5  
                        STR_14 7FFC                          STR_15 7F72                          STR_16 7FE4  
                        STR_17 7FD0                          STR_18 7FAC                          STR_19 7F43  
              __end_of___awmod 1E58                __end_of___ftneg 282E                __end_of___lldiv 1FF0  
              __end_of___ftmul 1436                ___awdiv@divisor 0021                __end_of___llmod 23FE  
              __end_of___ftsub 25C8                __end_of___fttol 1580                          _T2CON 000FCA  
                  _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000             ?_Lcd_Write_Integer 00B8  
                        i2l260 27DE                          i2l262 27E0                          i2l254 27C0  
                        i2l256 27CA                          i2l258 27D4                          i2l274 24F8  
                        i2l371 198A                          i2l620 28DC                ___awdiv@counter 0023  
                        _RCREG 000FAE                          _RCSTA 000FAB                          _SPBRG 000FAF  
                        _PORTA 000F80                          _PORTB 000F81                          _PORTE 000F84  
                __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD                          _TXSTA 000FAC  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086                  __CFG_WRT3$OFF 000000  
                 ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
           __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000                    ?i2_Lcd_Port 0001  
              __end_of_dpowers 7EF5                          _array 0114            ??_Lcd_Write_Integer 0030  
                        _scale 0940                  ___ftpack@sign 001D                          tablat 000FF5  
      PWM_DutyCycle2@DutyCycle 0086                          status 000FD8                __end_of_sprintf 0940  
               __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F                     Pause_seg@x 001E  
             i2_Lcd_Set_Cursor 24AA                    ?_TMRO_USART 0001               __end_of_Lcd_Init 22C6  
               WriteUSART@data 0019               __end_of_Lcd_Port 27B6             __size_of_PWM_init1 001E  
           __size_of_PWM_init2 001E                __initialization 24FA                   __end_of_main 1D34  
    __end_of_Lcd_Write_Integer 26B0    __size_of_Inicializa_Driveby 00C4              ?_putcBluetoothInt 00B8  
             __end_of_OpenPWM1 293A               __end_of_OpenPWM2 2602                         ??_main 0030  
                ___fttol@sign1 007C               __end_of_Pause_ms 278A             __size_of_Lcd_Clear 000E  
                __activetblptr 000003             ??_putcBluetoothInt 0030           __size_of__tdiv_to_l_ 0100  
                    ??_BT_Init 0027               ___llmod@dividend 0026                         ?_scale 006C  
                       _CCPR1L 000FBE                         _CCPR2L 000FBB               ___awdiv@dividend 001F  
              putSTRINGU1@dato 001B                putSTRINGU1@cont 0022               __end_of___ftpack 1B54  
             __end_of___lbtoft 2852                putSTRINGU1@last 0021                clrBufferUSART@i 0019  
          __size_of_UART1_Init 0010               __end_of___lltoft 245A                         i2l4203 24D2  
                       i2l4213 216C                         i2l4217 21A4                         i2l4283 1980  
                       i2l4295 19AA                         i2l4279 196C                         i2l3761 27D6  
                       i2l3753 27C2                         i2l3757 27CC                         _INTCON 000FF2  
           __size_of_ReadUSART 001E            _putcBluetoothString 22C6                      ??_Lcd_Cmd 001A  
                       _SPBRGH 000FB0             __size_of_SetDCPWM1 003A             __size_of_SetDCPWM2 003A  
      __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000               __end_of__powers_ 7F43  
                       _Timer1 003B             __size_of_OpenUSART 0068  __size_of_SendBlueToothCommand 0016  
                 ?i2_Lcd_Clear 0001                         ___ftge 1E58             __size_of_Pause_seg 0048  
            __end_ofi2_Lcd_Cmd 2892                         ___wmul 27E2                   ?_putSTRINGU1 001B  
                    ??___awdiv 0023                      ??___ftadd 007C                 _PWM_DutyCycle1 206C  
               _PWM_DutyCycle2 1FF0                 __CFG_STVREN$ON 000000                      ??___awmod 001D  
                    ??___ftneg 001C                      ??___lldiv 0021                      ??___ftmul 002D  
                    ??___llmod 002E                      ??___ftsub 0030                      ??___fttol 0077  
          __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005            i2Lcd_Write_String@i 0009  
                       _packet 0046                         _lenght 0042                         _fround 0DB8  
                       clear_0 2500                         clear_1 250C                         clear_2 2518  
             ___awdiv@quotient 0025                 sprintf@vd_1430 00A0           ?_putcBluetoothString 0020  
              ___awmod@divisor 001B                ___awmod@counter 001D               i2_Lcd_Write_Char 2720  
        ___ftmul@f3_as_product 0067                   __mediumconst 7ECC                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8            __size_of_TMRO_USART 19E0  
            __end_of_PWM_init1 28CE              __end_of_PWM_init2 28B0               __end_of_putcTxU1 2958  
                    ??_sprintf 008F        __size_of_Comando_Tablet 013E                Lcd_Set_Cursor@a 001D  
              Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F                Lcd_Set_Cursor@z 001E  
                   __accesstop 0060        __end_of__initialization 253E                __CFG_PBADEN$OFF 000000  
                   ___ftadd@f1 0076                     ___ftadd@f2 0079                     ___ftge@ff1 0019  
                   ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088              __end_of_Lcd_Clear 2966  
                   ___ftneg@f1 0019                     ___lbtoft@c 0024         __end_of_PWM_DutyCycle1 20E8  
       __end_of_PWM_DutyCycle2 206C                     ___ftmul@f1 0060                     ___ftmul@f2 0063  
                   ___ftsub@f1 0082                     ___ftsub@f2 0085                     ___fttol@f1 0073  
                   _WriteUSART 2916                 __pcstackCOMRAM 0001                   __pidataBANK0 2902  
   __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021                 _clrBufferUSART 26B0  
                __end_of_scale 0DB8          ??_putcBluetoothString 0022    __size_ofi2_Lcd_Write_String 007A  
            __end_of_ReadUSART 28EC              __end_of_SetDCPWM1 2676              __end_of_SetDCPWM2 263C  
            i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003                 _Lcd_Set_Cursor 245A  
                   __div_to_l_ 16BE                      ?_Lcd_Init 0001                  ReadUSART@data 0001  
         putcBluetoothString@a 0020           putcBluetoothString@i 0024                      ?_Lcd_Port 0001  
            __end_of_OpenUSART 2398                  UART1_Init@bdr 001F                __div_to_l_@exp1 0028  
              __div_to_l_@cntr 0027                   sprintf@integ 00A8              __end_of_Pause_seg 258C  
                      ??_scale 0030                __div_to_l_@quot 0023           i2Lcd_Write_Char@temp 0002  
                   __pbssBANK0 00CE                     __pbssBANK1 0100                      ?_OpenPWM1 0001  
                    ?_OpenPWM2 0001                  __div_to_l_@f1 0019                  __div_to_l_@f2 001C  
                    ?_Pause_ms 0019         __end_of_clrBufferUSART 26E8                ?_PWM_DutyCycle1 0001  
              ?_PWM_DutyCycle2 0001                        ?___ftge 0019                   ??_UART1_Init 001F  
                      ?___wmul 0027            Inicializa_Driveby@i 0028         __size_of_getCNY70Value 0078  
                      _CCP1CON 000FBD                        _CCP2CON 000FBA           i2Lcd_Set_Cursor@temp 0008  
  SendBlueToothCommand@command 0023                        ?_fround 006C      __size_of_Lcd_Write_String 007A  
                    ?___ftpack 0019                      ?___lbtoft 0021         __end_of_Lcd_Set_Cursor 24AA  
                    ?___lltoft 0021               putSTRINGU1@total 001D       __end_ofi2_Lcd_Set_Cursor 24FA  
                      _BT_Init 1B54                        _SBUSART 003A                     ??_Lcd_Init 001C  
                 ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019             __end_of_UART1_Init 294A  
              __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 26E8                        _Lcd_Cmd 2852  
                      _Comando 0033                        _Med_lsb 00D0                        _Med_msb 00D2  
                   ??_OpenPWM1 0019                     ??_OpenPWM2 0019                     ??_Pause_ms 001B  
                 ??_TMRO_USART 000B              __end_of__npowers_ 7F1C                        __Hparam 0000  
                   _scale$2455 006F                        __Lparam 0000                ?_clrBufferUSART 0001  
                  ?_WriteUSART 0001                __size_of___ftge 0090                        ___awdiv 1BFA  
                      ___ftadd 105E                        ___awmod 1DC8                      ?_putcTxU1 0001  
                      ___ftneg 2808                        ___lldiv 1F6E                __size_of___wmul 0026  
                      ___ftmul 12DE                        ___llmod 2398                        ___ftsub 258C  
                      ___fttol 1436             __end_ofi2_Lcd_Port 27E2           __size_ofi2_Lcd_Clear 000E  
                      __pcinit 24FA                     ??___ftpack 001E                     ??___lbtoft 0024  
         __size_of_putSTRINGU1 0094                __size_of_fround 02A6                   BT_Init@F5671 00EC  
                      __ramtop 0800                ?_Lcd_Set_Cursor 001C                     ??___lltoft 0025  
                      __ptext0 1C9E                        __ptext1 2254                        __ptext2 19E8  
                      __ptext3 1B54                        __ptext4 28EC                        __ptext5 1D34  
                      __ptext6 294A                        __ptext7 2544                        __ptext8 2758  
                      __ptext9 1580                        _comando 00D8                    ?__div_to_l_ 0019  
                      _countup 00FE                        _dpowers 7ECD                      _T2CONbits 000FCA  
             ___awmod@dividend 0019             __end_of_TMRO_USART 19E8                 _Comando_Tablet 1580  
                      _sprintf 001C                  _getCNY70Value 21DC         __end_of_Lcd_Write_Char 2720  
               __pintcode_body 18F4           end_of_initialization 253E                    _TramaTablet 0100  
    __size_of_putcBluetoothInt 0086                        int_func 18F4       __end_ofi2_Lcd_Write_Char 2758  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                      _RCSTAbits 000FAB  
   __end_of_Inicializa_Driveby 1AAC                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0019                     ??_putcTxU1 001A                     _num_med_hi 0043  
               __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F  
                    i2_Lcd_Cmd 2872                      _PORTAbits 000F80                      _PORTBbits 000F81  
                    _PORTDbits 000F83                      _PORTEbits 000F84         __end_of_Comando_Tablet 16BE  
 __end_of_SendBlueToothCommand 2902                      _TRISBbits 000F93                      _TRISCbits 000F94  
               ?_getCNY70Value 0019            __size_of_WriteUSART 0012                ?_Lcd_Write_Char 0001  
            Lcd_Write_String@a 001D              Lcd_Write_String@i 0021                      _PWM_init1 28B0  
                    _PWM_init2 2892                      _TXSTAbits 000FAC            __size_of__div_to_l_ 0136  
                  ___ftmul@exp 0066                      _Lcd_Clear 2958                 __end_of___ftge 1EE8  
               __end_of___wmul 2808               _Lcd_Write_String 20E8                     ?i2_Lcd_Cmd 0001  
               __end_of_fround 105E            start_initialization 24FA                      Pause_ms@i 001C  
                    Pause_ms@x 0019                ?_Comando_Tablet 0001                      _ReadUSART 28CE  
                    _SetDCPWM1 263C                      _SetDCPWM2 2602                SetDCPWM1@DCycle 001D  
          __end_of__tdiv_to_l_ 18F4                SetDCPWM2@DCycle 001D                      _DutyCycle 00CE  
            __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C                     ?_PWM_init1 0001  
                   ?_PWM_init2 0001           Comando_Tablet@sensed 0170                      _OpenUSART 2330  
             ??_PWM_DutyCycle1 0082               ??_PWM_DutyCycle2 0082                      _Pause_seg 2544  
              ___llmod@divisor 002A                ___llmod@counter 002E    __end_of_putcBluetoothString 2330  
            __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A              __size_of_Pause_ms 0032  
                   ?_Lcd_Clear 0001                       ??___ftge 001F     __end_ofi2_Lcd_Write_String 21DC  
                     ??___wmul 002B                    __pdataBANK0 00EC               __CFG_LPT1OSC$OFF 000000  
              Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B                       ??_fround 0030  
               _num_med_medium 0045                     fround@prec 0075              __size_of___ftpack 00A8  
            __size_of___lbtoft 0024              __size_of___lltoft 005C                    __pbssCOMRAM 0030  
              ??_getCNY70Value 001B                     ?_ReadUSART 0001                       ?_BT_Init 0001  
                __pcstackBANK0 0060                  __pcstackBANK1 015A              ?i2_Lcd_Set_Cursor 0004  
                   ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019            __end_of__stringdata 7FFE  
           ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1EE8                     ?_OpenUSART 0019  
                     ?_Lcd_Cmd 0001                    sprintf@_val 00AD                    sprintf@flag 00A6  
             ??_clrBufferUSART 0019                     ?_Pause_seg 0001                    sprintf@fval 00B4  
                  sprintf@prec 00AB                      _cleanBfer 003E                   ??_WriteUSART 0019  
             ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 28EC                      __pintcode 0008  
                __pmediumconst 7ECC                       ?___awdiv 001F                       ?___ftadd 0076  
                     ?___awmod 0019                       ?___ftneg 0019                       ?___lldiv 0019  
                     ?___ftmul 0060                       ?___llmod 0026                       ?___ftsub 0082  
                    __npowers_ 7EF5                       ?___fttol 0073              putcTxU1@character 001A  
                  ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E                    __tdiv_to_l_ 17F4  
                    _contador2 0040                   ??__div_to_l_ 001F      SendBlueToothCommand@total 0025  
                 _TamanhoTrama 00D4                       ?_sprintf 0088                 __size_of_scale 0478  
           __end_of_WriteUSART 2928                    ??_PWM_init1 001A                    ??_PWM_init2 001C  
 PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034                 ___wmul@product 002B  
            ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D                       Lcd_Cmd@a 001B  
                     i2u422_40 219C                       i2u422_47 2192                       i2u423_40 21D4  
                     i2u423_47 21CA                       _PIR1bits 000F9E             __end_of__div_to_l_ 17F4  
                     i2u434_40 1986             ??i2_Lcd_Write_Char 0002                       i2u643_47 273C  
        ?_SendBlueToothCommand 0023                       i2u644_47 274E                       i2u645_47 2884  
                ??i2_Lcd_Clear 0004                    ??_Lcd_Clear 001C               __CFG_WDTPS$32768 000000  
                ??_putSTRINGU1 001F                     _ADCON1bits 000FC1                    __stringdata 7F43  
            ___wmul@multiplier 0027                       _CheckSum 0030               ??_Lcd_Write_Char 001A  
                  ??_ReadUSART 0001             _Inicializa_Driveby 19E8                    ??_SetDCPWM1 001B  
                  ??_SetDCPWM2 001B               __size_of_BT_Init 00A6                       _Lcd_Init 2254  
                     _Lcd_Port 278A                      copy_data0 2532                       _EntTrama 0035  
          ?_Inicializa_Driveby 0001                  _BluetoothDato 0128       __end_of_Lcd_Write_String 2162  
                  ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019                    ??_Pause_seg 001E  
              OpenUSART@config 001E               __size_of_Lcd_Cmd 0020                   _Timer2Config 0047  
                     _OpenPWM1 2928                       _OpenPWM2 25C8                       _Pause_ms 2758  
                     __Hrparam 0000                       __Lrparam 0000             SetDCPWM2@dutycycle 0019  
             __size_of___awdiv 00A4               __size_of___ftadd 0280               __size_of___awmod 0090  
         ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089               PWM_DutyCycle2@DC 0089  
             __size_of___ftneg 0026               __size_of___lldiv 0082               __size_of___ftmul 0158  
             __size_of___llmod 0066               __size_of___ftsub 003C               __size_of___fttol 014A  
             ??_Comando_Tablet 0030                       ___ftpack 1AAC                       ___lbtoft 282E  
                  _fround$2453 0072                    _fround$2454 006F                       ___lltoft 23FE  
          __end_ofi2_Lcd_Clear 2974                 OpenPWM2@ccp2mx 001B          __CFG_FOSC$INTOSCIO_EC 000000  
          __end_of_putSTRINGU1 1DC8                     sprintf@exp 00B2                 OpenPWM1@period 0019  
               OpenPWM2@period 001A                       __ptext10 22C6                       __ptext11 1EE8  
                     __ptext20 2928                       __ptext12 2916                       __ptext21 1FF0  
                     __ptext13 293A                       __ptext30 27E2                       __ptext22 2602  
                     __ptext14 2330                       __ptext31 12DE                       __ptext23 206C  
                     __ptext15 21DC                       __ptext40 258C                       __ptext32 1DC8  
                     __ptext24 282E                       __ptext16 26B0                       __ptext41 105E  
                     __ptext33 1BFA                       __ptext25 263C                       __ptext17 2892  
                     __ptext50 278A                       __ptext42 1AAC                       __ptext34 17F4  
                     __ptext26 2676                       __ptext18 25C8                       __ptext43 2808  
                     __ptext35 16BE                       __ptext27 001C                       __ptext19 28B0  
                     __ptext52 2162                       __ptext44 1E58                       __ptext36 23FE  
                     __ptext28 0940                       __ptext53 2720                       __ptext45 20E8  
                     __ptext37 2398                       __ptext29 0DB8                       __ptext54 24AA  
                     __ptext46 26E8                       __ptext38 1F6E                       __ptext55 2966  
                     __ptext47 245A                       __ptext39 1436                       __ptext56 2872  
                     __ptext48 2958                       __ptext57 27B6                       __ptext49 2852  
                     __ptext58 28CE                       __powers_ 7F1C                PWM_init1@period 001A  
              PWM_init2@period 001C                       _contador 003F               __size_of_sprintf 0924  
                __size_of_main 0096         ??_SendBlueToothCommand 0027                       _putcTxU1 294A  
                  i2Lcd_Port@a 0001                  BT_Init@nameBT 0060       __end_of_putcBluetoothInt 1F6E  
        __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 2162                 OpenUSART@spbrg 0019  
                     scale@scl 0072              putcBluetoothInt@a 00B8              putcBluetoothInt@i 016E  
            putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A                       intlevel2 0000  
                    sprintf@ap 00A4               __tdiv_to_l_@exp1 0027                      sprintf@vd 009C  
             __tdiv_to_l_@cntr 0026                      sprintf@sp 0088            ?i2_Lcd_Write_String 0005  
             __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005              i2Lcd_Set_Cursor@b 0004  
            i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006               ___lldiv@dividend 0019  
    __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3                     i2Lcd_Cmd@a 0003  
                  i2_Lcd_Clear 2966                     _UART1_Init 293A                    _putSTRINGU1 1D34  
         ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020   __size_of_putcBluetoothString 006A  
                 ?__tdiv_to_l_ 0019                    _num_med_low 0044                       sprintf@c 00B7  
                     sprintf@f 008A               ___lldiv@quotient 0021             Lcd_Write_Integer@a 00B8  
           Lcd_Write_Integer@s 00BA          __end_of_getCNY70Value 2254                     i2_Lcd_Port 27B6  
                 _USART_Status 003C                     _TMRO_USART 0008  
