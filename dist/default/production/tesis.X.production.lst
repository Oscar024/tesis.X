

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 18 17:06:18 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           	psect	idataCOMRAM
    90  003572                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _countup
    94  003572  0001               	dw	1
    95                           
    96                           	psect	idataBANK1
    97  003524                     __pidataBANK1:
    98                           	opt stack 0
    99                           
   100                           ;initializer for BT_Init@F5675
   101  003524  41                 	db	65
   102  003525  54                 	db	84
   103  003526  2B                 	db	43
   104  003527  4E                 	db	78
   105  003528  41                 	db	65
   106  003529  4D                 	db	77
   107  00352A  45                 	db	69
   108  00352B  3D                 	db	61
   109  00352C  72                 	db	114
   110  00352D  6F                 	db	111
   111  00352E  62                 	db	98
   112  00352F  6F                 	db	111
   113  003530  74                 	db	116
   114  003531  0D                 	db	13
   115  003532  0A                 	db	10
   116  003533  00                 	db	0
   117  003534  00                 	db	0
   118  003535  00                 	db	0
   119                           
   120                           	psect	mediumconst
   121  007E9C                     __pmediumconst:
   122                           	opt stack 0
   123  007E9C  00                 	db	0
   124  007E9D                     _dpowers:
   125                           	opt stack 0
   126  007E9D  0001               	dw	1
   127  007E9F  0000               	dw	0
   128  007EA1  000A               	dw	10
   129  007EA3  0000               	dw	0
   130  007EA5  0064               	dw	100
   131  007EA7  0000               	dw	0
   132  007EA9  03E8               	dw	1000
   133  007EAB  0000               	dw	0
   134  007EAD  2710               	dw	10000
   135  007EAF  0000               	dw	0
   136  007EB1  86A0               	dw	34464
   137  007EB3  0001               	dw	1
   138  007EB5  4240               	dw	16960
   139  007EB7  000F               	dw	15
   140  007EB9  9680               	dw	38528
   141  007EBB  0098               	dw	152
   142  007EBD  E100               	dw	57600
   143  007EBF  05F5               	dw	1525
   144  007EC1  CA00               	dw	51712
   145  007EC3  3B9A               	dw	15258
   146  007EC5                     __end_of_dpowers:
   147                           	opt stack 0
   148  007EC5                     __npowers_:
   149                           	opt stack 0
   150  007EC5  00                 	db	0
   151  007EC6  80                 	db	128
   152  007EC7  3F                 	db	63
   153  007EC8  CD                 	db	205
   154  007EC9  CC                 	db	204
   155  007ECA  3D                 	db	61
   156  007ECB  D7                 	db	215
   157  007ECC  23                 	db	35
   158  007ECD  3C                 	db	60
   159  007ECE  12                 	db	18
   160  007ECF  83                 	db	131
   161  007ED0  3A                 	db	58
   162  007ED1  B7                 	db	183
   163  007ED2  D1                 	db	209
   164  007ED3  38                 	db	56
   165  007ED4  C6                 	db	198
   166  007ED5  27                 	db	39
   167  007ED6  37                 	db	55
   168  007ED7  38                 	db	56
   169  007ED8  86                 	db	134
   170  007ED9  35                 	db	53
   171  007EDA  C0                 	db	192
   172  007EDB  D6                 	db	214
   173  007EDC  33                 	db	51
   174  007EDD  CC                 	db	204
   175  007EDE  2B                 	db	43
   176  007EDF  32                 	db	50
   177  007EE0  70                 	db	112
   178  007EE1  89                 	db	137
   179  007EE2  30                 	db	48
   180  007EE3  E7                 	db	231
   181  007EE4  DB                 	db	219
   182  007EE5  2E                 	db	46
   183  007EE6  E5                 	db	229
   184  007EE7  3C                 	db	60
   185  007EE8  1E                 	db	30
   186  007EE9  42                 	db	66
   187  007EEA  A2                 	db	162
   188  007EEB  0D                 	db	13
   189  007EEC                     __end_of__npowers_:
   190                           	opt stack 0
   191  007EEC                     __powers_:
   192                           	opt stack 0
   193  007EEC  00                 	db	0
   194  007EED  80                 	db	128
   195  007EEE  3F                 	db	63
   196  007EEF  00                 	db	0
   197  007EF0  20                 	db	32
   198  007EF1  41                 	db	65
   199  007EF2  00                 	db	0
   200  007EF3  C8                 	db	200
   201  007EF4  42                 	db	66
   202  007EF5  00                 	db	0
   203  007EF6  7A                 	db	122
   204  007EF7  44                 	db	68
   205  007EF8  40                 	db	64
   206  007EF9  1C                 	db	28
   207  007EFA  46                 	db	70
   208  007EFB  50                 	db	80
   209  007EFC  C3                 	db	195
   210  007EFD  47                 	db	71
   211  007EFE  24                 	db	36
   212  007EFF  74                 	db	116
   213  007F00  49                 	db	73
   214  007F01  97                 	db	151
   215  007F02  18                 	db	24
   216  007F03  4B                 	db	75
   217  007F04  BC                 	db	188
   218  007F05  BE                 	db	190
   219  007F06  4C                 	db	76
   220  007F07  6B                 	db	107
   221  007F08  6E                 	db	110
   222  007F09  4E                 	db	78
   223  007F0A  03                 	db	3
   224  007F0B  15                 	db	21
   225  007F0C  50                 	db	80
   226  007F0D  79                 	db	121
   227  007F0E  AD                 	db	173
   228  007F0F  60                 	db	96
   229  007F10  F3                 	db	243
   230  007F11  49                 	db	73
   231  007F12  71                 	db	113
   232  007F13                     __end_of__powers_:
   233                           	opt stack 0
   234  0000                     _ADCON1bits	set	4033
   235  0000                     _CCP1CON	set	4029
   236  0000                     _CCP2CON	set	4026
   237  0000                     _CCPR1L	set	4030
   238  0000                     _CCPR2L	set	4027
   239  0000                     _INTCON	set	4082
   240  0000                     _INTCON2bits	set	4081
   241  0000                     _INTCON3bits	set	4080
   242  0000                     _INTCONbits	set	4082
   243  0000                     _OSCCONbits	set	4051
   244  0000                     _PIE1	set	3997
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PORTA	set	3968
   248  0000                     _PORTAbits	set	3968
   249  0000                     _PORTB	set	3969
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTC	set	3970
   252  0000                     _PORTCbits	set	3970
   253  0000                     _PORTD	set	3971
   254  0000                     _PORTDbits	set	3971
   255  0000                     _PORTE	set	3972
   256  0000                     _PORTEbits	set	3972
   257  0000                     _PR2	set	4043
   258  0000                     _RCREG	set	4014
   259  0000                     _RCSTA	set	4011
   260  0000                     _RCSTAbits	set	4011
   261  0000                     _SPBRG	set	4015
   262  0000                     _SPBRGH	set	4016
   263  0000                     _T2CON	set	4042
   264  0000                     _T2CONbits	set	4042
   265  0000                     _TMR2	set	4044
   266  0000                     _TRISA	set	3986
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISBbits	set	3987
   269  0000                     _TRISC	set	3988
   270  0000                     _TRISCbits	set	3988
   271  0000                     _TRISD	set	3989
   272  0000                     _TRISE	set	3990
   273  0000                     _TXREG	set	4013
   274  0000                     _TXSTA	set	4012
   275  0000                     _TXSTAbits	set	4012
   276  007F13                     __stringdata:
   277                           	opt stack 0
   278  007F13                     STR_22:
   279  007F13  49                 	db	73	;'I'
   280  007F14  6E                 	db	110	;'n'
   281  007F15  74                 	db	116	;'t'
   282  007F16  65                 	db	101	;'e'
   283  007F17  72                 	db	114	;'r'
   284  007F18  72                 	db	114	;'r'
   285  007F19  75                 	db	117	;'u'
   286  007F1A  70                 	db	112	;'p'
   287  007F1B  74                 	db	116	;'t'
   288  007F1C  69                 	db	105	;'i'
   289  007F1D  6F                 	db	111	;'o'
   290  007F1E  6E                 	db	110	;'n'
   291  007F1F  20                 	db	32
   292  007F20  54                 	db	84	;'T'
   293  007F21  4D                 	db	77	;'M'
   294  007F22  52                 	db	82	;'R'
   295  007F23  32                 	db	50	;'2'
   296  007F24  00                 	db	0
   297  007F25                     STR_19:
   298  007F25  49                 	db	73	;'I'
   299  007F26  6E                 	db	110	;'n'
   300  007F27  74                 	db	116	;'t'
   301  007F28  65                 	db	101	;'e'
   302  007F29  72                 	db	114	;'r'
   303  007F2A  72                 	db	114	;'r'
   304  007F2B  75                 	db	117	;'u'
   305  007F2C  70                 	db	112	;'p'
   306  007F2D  74                 	db	116	;'t'
   307  007F2E  69                 	db	105	;'i'
   308  007F2F  6F                 	db	111	;'o'
   309  007F30  6E                 	db	110	;'n'
   310  007F31  20                 	db	32
   311  007F32  52                 	db	82	;'R'
   312  007F33  42                 	db	66	;'B'
   313  007F34  30                 	db	48	;'0'
   314  007F35  00                 	db	0
   315  007F36                     STR_20:
   316  007F36  49                 	db	73	;'I'
   317  007F37  6E                 	db	110	;'n'
   318  007F38  74                 	db	116	;'t'
   319  007F39  65                 	db	101	;'e'
   320  007F3A  72                 	db	114	;'r'
   321  007F3B  72                 	db	114	;'r'
   322  007F3C  75                 	db	117	;'u'
   323  007F3D  70                 	db	112	;'p'
   324  007F3E  74                 	db	116	;'t'
   325  007F3F  69                 	db	105	;'i'
   326  007F40  6F                 	db	111	;'o'
   327  007F41  6E                 	db	110	;'n'
   328  007F42  20                 	db	32
   329  007F43  52                 	db	82	;'R'
   330  007F44  42                 	db	66	;'B'
   331  007F45  31                 	db	49	;'1'
   332  007F46  00                 	db	0
   333  007F47                     STR_21:
   334  007F47  49                 	db	73	;'I'
   335  007F48  6E                 	db	110	;'n'
   336  007F49  74                 	db	116	;'t'
   337  007F4A  65                 	db	101	;'e'
   338  007F4B  72                 	db	114	;'r'
   339  007F4C  72                 	db	114	;'r'
   340  007F4D  75                 	db	117	;'u'
   341  007F4E  70                 	db	112	;'p'
   342  007F4F  74                 	db	116	;'t'
   343  007F50  69                 	db	105	;'i'
   344  007F51  6F                 	db	111	;'o'
   345  007F52  6E                 	db	110	;'n'
   346  007F53  20                 	db	32
   347  007F54  52                 	db	82	;'R'
   348  007F55  42                 	db	66	;'B'
   349  007F56  32                 	db	50	;'2'
   350  007F57  00                 	db	0
   351  007F58                     STR_11:
   352  007F58  42                 	db	66	;'B'
   353  007F59  54                 	db	84	;'T'
   354  007F5A  20                 	db	32
   355  007F5B  49                 	db	73	;'I'
   356  007F5C  4E                 	db	78	;'N'
   357  007F5D  49                 	db	73	;'I'
   358  007F5E  43                 	db	67	;'C'
   359  007F5F  49                 	db	73	;'I'
   360  007F60  41                 	db	65	;'A'
   361  007F61  4C                 	db	76	;'L'
   362  007F62  49                 	db	73	;'I'
   363  007F63  5A                 	db	90	;'Z'
   364  007F64  41                 	db	65	;'A'
   365  007F65  44                 	db	68	;'D'
   366  007F66  4F                 	db	79	;'O'
   367  007F67  00                 	db	0
   368  007F68                     STR_2:
   369  007F68  41                 	db	65	;'A'
   370  007F69  54                 	db	84	;'T'
   371  007F6A  2B                 	db	43
   372  007F6B  50                 	db	80	;'P'
   373  007F6C  53                 	db	83	;'S'
   374  007F6D  57                 	db	87	;'W'
   375  007F6E  44                 	db	68	;'D'
   376  007F6F  3D                 	db	61	;'='
   377  007F70  30                 	db	48	;'0'
   378  007F71  30                 	db	48	;'0'
   379  007F72  30                 	db	48	;'0'
   380  007F73  30                 	db	48	;'0'
   381  007F74  0D                 	db	13
   382  007F75  0A                 	db	10
   383  007F76  00                 	db	0
   384  007F77  0A                 	db	10
   385  007F78  2B                 	db	43
   386  007F79  42                 	db	66	;'B'
   387  007F7A  54                 	db	84	;'T'
   388  007F7B  53                 	db	83	;'S'
   389  007F7C  54                 	db	84	;'T'
   390  007F7D  41                 	db	65	;'A'
   391  007F7E  54                 	db	84	;'T'
   392  007F7F  45                 	db	69	;'E'
   393  007F80  3A                 	db	58	;':'
   394  007F81  31                 	db	49	;'1'
   395  007F82  0D                 	db	13
   396  007F83  0A                 	db	10
   397  007F84  00                 	db	0
   398  007F85  0A                 	db	10
   399  007F86  2B                 	db	43
   400  007F87  42                 	db	66	;'B'
   401  007F88  54                 	db	84	;'T'
   402  007F89  53                 	db	83	;'S'
   403  007F8A  54                 	db	84	;'T'
   404  007F8B  41                 	db	65	;'A'
   405  007F8C  54                 	db	84	;'T'
   406  007F8D  45                 	db	69	;'E'
   407  007F8E  3A                 	db	58	;':'
   408  007F8F  33                 	db	51	;'3'
   409  007F90  0D                 	db	13
   410  007F91  0A                 	db	10
   411  007F92  00                 	db	0
   412  007F93  0A                 	db	10
   413  007F94  2B                 	db	43
   414  007F95  42                 	db	66	;'B'
   415  007F96  54                 	db	84	;'T'
   416  007F97  53                 	db	83	;'S'
   417  007F98  54                 	db	84	;'T'
   418  007F99  41                 	db	65	;'A'
   419  007F9A  54                 	db	84	;'T'
   420  007F9B  45                 	db	69	;'E'
   421  007F9C  3A                 	db	58	;':'
   422  007F9D  34                 	db	52	;'4'
   423  007F9E  0D                 	db	13
   424  007F9F  0A                 	db	10
   425  007FA0  00                 	db	0
   426  007FA1  0A                 	db	10
   427  007FA2  43                 	db	67	;'C'
   428  007FA3  4F                 	db	79	;'O'
   429  007FA4  4E                 	db	78	;'N'
   430  007FA5  4E                 	db	78	;'N'
   431  007FA6  45                 	db	69	;'E'
   432  007FA7  43                 	db	67	;'C'
   433  007FA8  54                 	db	84	;'T'
   434  007FA9  3A                 	db	58	;':'
   435  007FAA  4F                 	db	79	;'O'
   436  007FAB  4B                 	db	75	;'K'
   437  007FAC  0D                 	db	13
   438  007FAD  0A                 	db	10
   439  007FAE  00                 	db	0
   440  007FAF                     STR_18:
   441  007FAF  49                 	db	73	;'I'
   442  007FB0  6E                 	db	110	;'n'
   443  007FB1  74                 	db	116	;'t'
   444  007FB2  65                 	db	101	;'e'
   445  007FB3  67                 	db	103	;'g'
   446  007FB4  65                 	db	101	;'e'
   447  007FB5  72                 	db	114	;'r'
   448  007FB6  20                 	db	32
   449  007FB7  3D                 	db	61	;'='
   450  007FB8  20                 	db	32
   451  007FB9  25                 	db	37
   452  007FBA  64                 	db	100	;'d'
   453  007FBB  00                 	db	0
   454  007FBC                     STR_1:
   455  007FBC  41                 	db	65	;'A'
   456  007FBD  54                 	db	84	;'T'
   457  007FBE  2B                 	db	43
   458  007FBF  52                 	db	82	;'R'
   459  007FC0  4F                 	db	79	;'O'
   460  007FC1  4C                 	db	76	;'L'
   461  007FC2  45                 	db	69	;'E'
   462  007FC3  3D                 	db	61	;'='
   463  007FC4  30                 	db	48	;'0'
   464  007FC5  0D                 	db	13
   465  007FC6  0A                 	db	10
   466  007FC7  00                 	db	0
   467  007FC8                     STR_24:
   468  007FC8  43                 	db	67	;'C'
   469  007FC9  4D                 	db	77	;'M'
   470  007FCA  44                 	db	68	;'D'
   471  007FCB  20                 	db	32
   472  007FCC  54                 	db	84	;'T'
   473  007FCD  41                 	db	65	;'A'
   474  007FCE  42                 	db	66	;'B'
   475  007FCF  4C                 	db	76	;'L'
   476  007FD0  45                 	db	69	;'E'
   477  007FD1  54                 	db	84	;'T'
   478  007FD2  00                 	db	0
   479  007FD3  46                 	db	70	;'F'
   480  007FD4  6C                 	db	108	;'l'
   481  007FD5  6F                 	db	111	;'o'
   482  007FD6  61                 	db	97	;'a'
   483  007FD7  74                 	db	116	;'t'
   484  007FD8  20                 	db	32
   485  007FD9  3D                 	db	61	;'='
   486  007FDA  20                 	db	32
   487  007FDB  25                 	db	37
   488  007FDC  66                 	db	102	;'f'
   489  007FDD  00                 	db	0
   490  007FDE                     STR_3:
   491  007FDE  41                 	db	65	;'A'
   492  007FDF  54                 	db	84	;'T'
   493  007FE0  2B                 	db	43
   494  007FE1  49                 	db	73	;'I'
   495  007FE2  4E                 	db	78	;'N'
   496  007FE3  51                 	db	81	;'Q'
   497  007FE4  0D                 	db	13
   498  007FE5  0A                 	db	10
   499  007FE6  00                 	db	0
   500  007FE7                     STR_16:
   501  007FE7  44                 	db	68	;'D'
   502  007FE8  65                 	db	101	;'e'
   503  007FE9  66                 	db	102	;'f'
   504  007FEA  61                 	db	97	;'a'
   505  007FEB  75                 	db	117	;'u'
   506  007FEC  6C                 	db	108	;'l'
   507  007FED  74                 	db	116	;'t'
   508  007FEE  00                 	db	0
   509  007FEF                     STR_23:
   510  007FEF  49                 	db	73	;'I'
   511  007FF0  6E                 	db	110	;'n'
   512  007FF1  69                 	db	105	;'i'
   513  007FF2  63                 	db	99	;'c'
   514  007FF3  69                 	db	105	;'i'
   515  007FF4  6F                 	db	111	;'o'
   516  007FF5  00                 	db	0
   517  007FF6                     STR_10:
   518  007FF6  49                 	db	73	;'I'
   519  007FF7  4E                 	db	78	;'N'
   520  007FF8  49                 	db	73	;'I'
   521  007FF9  43                 	db	67	;'C'
   522  007FFA  49                 	db	73	;'I'
   523  007FFB  4F                 	db	79	;'O'
   524  007FFC  00                 	db	0
   525  007FFD                     STR_14:
   526  007FFD  33                 	db	51	;'3'
   527  007FFE  00                 	db	0
   528  007FFF                     __end_of__stringdata:
   529                           	opt stack 0
   530                           
   531                           ; #config settings
   532  007FFF  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	cinit
   535  002F00                     __pcinit:
   536                           	opt stack 0
   537  002F00                     start_initialization:
   538                           	opt stack 0
   539  002F00                     __initialization:
   540                           	opt stack 0
   541                           
   542                           ; Clear objects allocated to BANK1 (110 bytes)
   543  002F00  EE01  F000         	lfsr	0,__pbssBANK1
   544  002F04  0E6E               	movlw	110
   545  002F06                     clear_0:
   546  002F06  6AEE               	clrf	postinc0,c
   547  002F08  06E8               	decf	wreg,f,c
   548  002F0A  E1FD               	bnz	clear_0
   549                           
   550                           ; Clear objects allocated to BANK0 (6 bytes)
   551  002F0C  0100               	movlb	0
   552  002F0E  6BEE               	clrf	(__pbssBANK0+5)& (0+255),b
   553  002F10  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   554  002F12  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   555  002F14  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   556  002F16  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   557  002F18  6BE9               	clrf	__pbssBANK0& (0+255),b
   558                           
   559                           ; Clear objects allocated to COMRAM (28 bytes)
   560  002F1A  EE00  F042         	lfsr	0,__pbssCOMRAM
   561  002F1E  0E1C               	movlw	28
   562  002F20                     clear_1:
   563  002F20  6AEE               	clrf	postinc0,c
   564  002F22  06E8               	decf	wreg,f,c
   565  002F24  E1FD               	bnz	clear_1
   566                           
   567                           ; Initialize objects allocated to BANK1 (18 bytes)
   568                           ; load TBLPTR registers with __pidataBANK1
   569  002F26  0E24               	movlw	low __pidataBANK1
   570  002F28  6EF6               	movwf	tblptrl,c
   571  002F2A  0E35               	movlw	high __pidataBANK1
   572  002F2C  6EF7               	movwf	tblptrh,c
   573  002F2E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   574  002F30  6EF8               	movwf	tblptru,c
   575  002F32  EE01  F06E         	lfsr	0,__pdataBANK1
   576  002F36  EE10 F012          	lfsr	1,18
   577  002F3A                     copy_data0:
   578  002F3A  0009               	tblrd		*+
   579  002F3C  CFF5 FFEE          	movff	tablat,postinc0
   580  002F40  50E5               	movf	postdec1,w,c
   581  002F42  50E1               	movf	fsr1l,w,c
   582  002F44  E1FA               	bnz	copy_data0
   583                           
   584                           ; Initialize objects allocated to COMRAM (2 bytes)
   585                           ; load TBLPTR registers with __pidataCOMRAM
   586  002F46  0E72               	movlw	low __pidataCOMRAM
   587  002F48  6EF6               	movwf	tblptrl,c
   588  002F4A  0E35               	movlw	high __pidataCOMRAM
   589  002F4C  6EF7               	movwf	tblptrh,c
   590  002F4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   591  002F50  6EF8               	movwf	tblptru,c
   592  002F52  0009               	tblrd		*+	;fetch initializer
   593  002F54  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   594  002F58  0009               	tblrd		*+	;fetch initializer
   595  002F5A  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   596  002F5E                     end_of_initialization:
   597                           	opt stack 0
   598  002F5E                     __end_of__initialization:
   599                           	opt stack 0
   600  002F5E  0100               	movlb	0
   601  002F60  EF2F  F013         	goto	_main	;jump to C main() function
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	bssCOMRAM
   612  000042                     __pbssCOMRAM:
   613                           	opt stack 0
   614  000042                     _Med_lsb:
   615                           	opt stack 0
   616  000042                     	ds	2
   617  000044                     _Med_msb:
   618                           	opt stack 0
   619  000044                     	ds	2
   620  000046                     _TamanhoTrama:
   621                           	opt stack 0
   622  000046                     	ds	2
   623  000048                     _i:
   624                           	opt stack 0
   625  000048                     	ds	2
   626  00004A                     _CheckSum:
   627                           	opt stack 0
   628  00004A                     	ds	1
   629  00004B                     _ComanBFlag:
   630                           	opt stack 0
   631  00004B                     	ds	1
   632  00004C                     _ComanTFlag:
   633                           	opt stack 0
   634  00004C                     	ds	1
   635  00004D                     _Comando:
   636                           	opt stack 0
   637  00004D                     	ds	1
   638  00004E                     _ComandoTablet:
   639                           	opt stack 0
   640  00004E                     	ds	1
   641  00004F                     _EntTrama:
   642                           	opt stack 0
   643  00004F                     	ds	1
   644  000050                     _InicioComando:
   645                           	opt stack 0
   646  000050                     	ds	1
   647  000051                     _RXComandoTB:
   648                           	opt stack 0
   649  000051                     	ds	1
   650  000052                     _SBUSART:
   651                           	opt stack 0
   652  000052                     	ds	1
   653  000053                     _Timer1:
   654                           	opt stack 0
   655  000053                     	ds	1
   656  000054                     _USART_Status:
   657                           	opt stack 0
   658  000054                     	ds	1
   659  000055                     _cad:
   660                           	opt stack 0
   661  000055                     	ds	1
   662  000056                     _contador:
   663                           	opt stack 0
   664  000056                     	ds	1
   665  000057                     _contador2:
   666                           	opt stack 0
   667  000057                     	ds	1
   668  000058                     _j:
   669                           	opt stack 0
   670  000058                     	ds	1
   671  000059                     _lenght:
   672                           	opt stack 0
   673  000059                     	ds	1
   674  00005A                     _num_med_hi:
   675                           	opt stack 0
   676  00005A                     	ds	1
   677  00005B                     _num_med_low:
   678                           	opt stack 0
   679  00005B                     	ds	1
   680  00005C                     _num_med_medium:
   681                           	opt stack 0
   682  00005C                     	ds	1
   683  00005D                     _packet:
   684                           	opt stack 0
   685  00005D                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	dataCOMRAM
   696  00005E                     __pdataCOMRAM:
   697                           	opt stack 0
   698  00005E                     _countup:
   699                           	opt stack 0
   700  00005E                     	ds	2
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           postdec1	equ	0xFE5
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	bssBANK0
   711  0000E9                     __pbssBANK0:
   712                           	opt stack 0
   713  0000E9                     _DutyCycle:
   714                           	opt stack 0
   715  0000E9                     	ds	2
   716  0000EB                     _FinComandB:
   717                           	opt stack 0
   718  0000EB                     	ds	1
   719  0000EC                     _FinComandT:
   720                           	opt stack 0
   721  0000EC                     	ds	1
   722  0000ED                     _cleanBfer:
   723                           	opt stack 0
   724  0000ED                     	ds	1
   725  0000EE                     _Timer2Config:
   726                           	opt stack 0
   727  0000EE                     	ds	1
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737                           	psect	bssBANK1
   738  000100                     __pbssBANK1:
   739                           	opt stack 0
   740  000100                     _TramaTablet:
   741                           	opt stack 0
   742  000100                     	ds	20
   743  000114                     _array:
   744                           	opt stack 0
   745  000114                     	ds	20
   746  000128                     _BluetoothDato:
   747                           	opt stack 0
   748  000128                     	ds	50
   749  00015A                     _comando:
   750                           	opt stack 0
   751  00015A                     	ds	20
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           
   761                           	psect	dataBANK1
   762  00016E                     __pdataBANK1:
   763                           	opt stack 0
   764  00016E                     BT_Init@F5675:
   765                           	opt stack 0
   766  00016E                     	ds	18
   767                           tblptru	equ	0xFF8
   768                           tblptrh	equ	0xFF7
   769                           tblptrl	equ	0xFF6
   770                           tablat	equ	0xFF5
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           
   776                           	psect	cstackBANK0
   777  000060                     __pcstackBANK0:
   778                           	opt stack 0
   779  000060                     ??_OpenPWM2:
   780  000060                     ?_getCNY70Value:
   781                           	opt stack 0
   782  000060                     ?___awmod:
   783                           	opt stack 0
   784  000060                     ?___ftpack:
   785                           	opt stack 0
   786  000060                     ?___ftneg:
   787                           	opt stack 0
   788  000060                     ?__tdiv_to_l_:
   789                           	opt stack 0
   790  000060                     ?__div_to_l_:
   791                           	opt stack 0
   792  000060                     ?___lldiv:
   793                           	opt stack 0
   794  000060                     Lcd_Port@a:
   795                           	opt stack 0
   796  000060                     OpenPWM1@period:
   797                           	opt stack 0
   798  000060                     WriteUSART@data:
   799                           	opt stack 0
   800  000060                     clrBufferUSART@i:
   801                           	opt stack 0
   802  000060                     Pause_ms@x:
   803                           	opt stack 0
   804  000060                     SetDCPWM1@dutycycle:
   805                           	opt stack 0
   806  000060                     SetDCPWM2@dutycycle:
   807                           	opt stack 0
   808  000060                     OpenUSART@spbrg:
   809                           	opt stack 0
   810  000060                     ___awmod@dividend:
   811                           	opt stack 0
   812  000060                     __div_to_l_@f1:
   813                           	opt stack 0
   814  000060                     ___ftpack@arg:
   815                           	opt stack 0
   816  000060                     __tdiv_to_l_@f1:
   817                           	opt stack 0
   818  000060                     ___ftge@ff1:
   819                           	opt stack 0
   820  000060                     ___ftneg@f1:
   821                           	opt stack 0
   822  000060                     ___lldiv@dividend:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x0
   826  000060                     	ds	1
   827  000061                     ??_Lcd_Cmd:
   828  000061                     putcTxU1@character:
   829                           	opt stack 0
   830  000061                     Lcd_Write_Char@temp:
   831                           	opt stack 0
   832  000061                     PWM_init1@period:
   833                           	opt stack 0
   834  000061                     OpenPWM2@period:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1
   838  000061                     	ds	1
   839  000062                     ??_OpenUSART:
   840  000062                     ??_SetDCPWM1:
   841  000062                     ??_SetDCPWM2:
   842  000062                     ??_Pause_ms:
   843  000062                     Lcd_Cmd@a:
   844                           	opt stack 0
   845  000062                     Lcd_Write_Char@y:
   846                           	opt stack 0
   847  000062                     OpenPWM2@ccp2mx:
   848                           	opt stack 0
   849  000062                     putSTRINGU1@dato:
   850                           	opt stack 0
   851  000062                     ___awmod@divisor:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x2
   855  000062                     	ds	1
   856  000063                     ??_Lcd_Init:
   857  000063                     Lcd_Set_Cursor@b:
   858                           	opt stack 0
   859  000063                     Lcd_Write_Char@a:
   860                           	opt stack 0
   861  000063                     PWM_init2@period:
   862                           	opt stack 0
   863  000063                     ___ftpack@exp:
   864                           	opt stack 0
   865  000063                     Pause_ms@i:
   866                           	opt stack 0
   867  000063                     __div_to_l_@f2:
   868                           	opt stack 0
   869  000063                     __tdiv_to_l_@f2:
   870                           	opt stack 0
   871  000063                     ___ftge@ff2:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x3
   875  000063                     	ds	1
   876  000064                     Lcd_Set_Cursor@a:
   877                           	opt stack 0
   878  000064                     ___awmod@counter:
   879                           	opt stack 0
   880  000064                     ___ftpack@sign:
   881                           	opt stack 0
   882  000064                     putSTRINGU1@total:
   883                           	opt stack 0
   884  000064                     Lcd_Write_String@a:
   885                           	opt stack 0
   886  000064                     SetDCPWM1@DCycle:
   887                           	opt stack 0
   888  000064                     SetDCPWM2@DCycle:
   889                           	opt stack 0
   890  000064                     ___lldiv@divisor:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x4
   894  000064                     	ds	1
   895  000065                     ??___ftpack:
   896  000065                     Pause_seg@x:
   897                           	opt stack 0
   898  000065                     Lcd_Set_Cursor@z:
   899                           	opt stack 0
   900  000065                     OpenUSART@config:
   901                           	opt stack 0
   902  000065                     ___awmod@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x5
   906  000065                     	ds	1
   907  000066                     ??_putSTRINGU1:
   908  000066                     ??_Lcd_Write_String:
   909  000066                     ??__tdiv_to_l_:
   910  000066                     ??__div_to_l_:
   911  000066                     ??___ftge:
   912  000066                     ?___awdiv:
   913                           	opt stack 0
   914  000066                     Pause_seg@i:
   915                           	opt stack 0
   916  000066                     UART1_Init@bdr:
   917                           	opt stack 0
   918  000066                     Lcd_Set_Cursor@y:
   919                           	opt stack 0
   920  000066                     ___awdiv@dividend:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x6
   924  000066                     	ds	1
   925  000067                     Lcd_Set_Cursor@temp:
   926                           	opt stack 0
   927  000067                     putcBluetoothString@a:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x7
   931  000067                     	ds	1
   932  000068                     ?___lbtoft:
   933                           	opt stack 0
   934  000068                     ?___lltoft:
   935                           	opt stack 0
   936  000068                     putSTRINGU1@last:
   937                           	opt stack 0
   938  000068                     Lcd_Write_String@i:
   939                           	opt stack 0
   940  000068                     ___awdiv@divisor:
   941                           	opt stack 0
   942  000068                     ___lldiv@quotient:
   943                           	opt stack 0
   944  000068                     ___lltoft@c:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x8
   948  000068                     	ds	1
   949  000069                     ??_putcBluetoothString:
   950  000069                     putSTRINGU1@cont:
   951                           	opt stack 0
   952  000069                     __tdiv_to_l_@quot:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x9
   956  000069                     	ds	1
   957  00006A                     ___awdiv@counter:
   958                           	opt stack 0
   959  00006A                     SendBlueToothCommand@command:
   960                           	opt stack 0
   961  00006A                     __div_to_l_@quot:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0xA
   965  00006A                     	ds	1
   966  00006B                     ___awdiv@sign:
   967                           	opt stack 0
   968  00006B                     ___lbtoft@c:
   969                           	opt stack 0
   970  00006B                     putcBluetoothString@i:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0xB
   974  00006B                     	ds	1
   975  00006C                     ??___lltoft:
   976  00006C                     ___lldiv@counter:
   977                           	opt stack 0
   978  00006C                     SendBlueToothCommand@total:
   979                           	opt stack 0
   980  00006C                     ___awdiv@quotient:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0xC
   984  00006C                     	ds	1
   985  00006D                     ?___llmod:
   986                           	opt stack 0
   987  00006D                     __tdiv_to_l_@cntr:
   988                           	opt stack 0
   989  00006D                     ___llmod@dividend:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0xD
   993  00006D                     	ds	1
   994  00006E                     ?___wmul:
   995                           	opt stack 0
   996  00006E                     __div_to_l_@cntr:
   997                           	opt stack 0
   998  00006E                     __tdiv_to_l_@exp1:
   999                           	opt stack 0
  1000  00006E                     ___wmul@multiplier:
  1001                           	opt stack 0
  1002  00006E                     BT_Init@nameBT:
  1003                           	opt stack 0
  1004                           
  1005                           ; 18 bytes @ 0xE
  1006  00006E                     	ds	1
  1007  00006F                     __div_to_l_@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0xF
  1011  00006F                     	ds	1
  1012  000070                     ___lltoft@exp:
  1013                           	opt stack 0
  1014  000070                     ___wmul@multiplicand:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x10
  1018  000070                     	ds	1
  1019  000071                     ___llmod@divisor:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x11
  1023  000071                     	ds	1
  1024  000072                     ___wmul@product:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x12
  1028  000072                     	ds	2
  1029  000074                     ?___ftmul:
  1030                           	opt stack 0
  1031  000074                     ___ftmul@f1:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0x14
  1035  000074                     	ds	1
  1036  000075                     ___llmod@counter:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x15
  1040  000075                     	ds	2
  1041  000077                     ___ftmul@f2:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x17
  1045  000077                     	ds	3
  1046  00007A                     ??___ftmul:
  1047                           
  1048                           ; 0 bytes @ 0x1A
  1049  00007A                     	ds	3
  1050  00007D                     ___ftmul@exp:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x1D
  1054  00007D                     	ds	1
  1055  00007E                     ___ftmul@f3_as_product:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x1E
  1059  00007E                     	ds	2
  1060  000080                     ??_Inicializa_Driveby:
  1061                           
  1062                           ; 0 bytes @ 0x20
  1063  000080                     	ds	1
  1064  000081                     ___ftmul@cntr:
  1065                           	opt stack 0
  1066  000081                     Inicializa_Driveby@i:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x21
  1070  000081                     	ds	1
  1071  000082                     ___ftmul@sign:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x22
  1075  000082                     	ds	1
  1076  000083                     ?_fround:
  1077                           	opt stack 0
  1078  000083                     ?_scale:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x23
  1082  000083                     	ds	3
  1083  000086                     _fround$2981:
  1084                           	opt stack 0
  1085  000086                     _scale$2982:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x26
  1089  000086                     	ds	3
  1090  000089                     scale@scl:
  1091                           	opt stack 0
  1092  000089                     _fround$2980:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x29
  1096  000089                     	ds	1
  1097  00008A                     ?___fttol:
  1098                           	opt stack 0
  1099  00008A                     ___fttol@f1:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x2A
  1103  00008A                     	ds	2
  1104  00008C                     fround@prec:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x2C
  1108  00008C                     	ds	1
  1109  00008D                     ?___ftadd:
  1110                           	opt stack 0
  1111  00008D                     ___ftadd@f1:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x2D
  1115  00008D                     	ds	1
  1116  00008E                     ??___fttol:
  1117                           
  1118                           ; 0 bytes @ 0x2E
  1119  00008E                     	ds	2
  1120  000090                     ___ftadd@f2:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x30
  1124  000090                     	ds	3
  1125  000093                     ??___ftadd:
  1126  000093                     ___fttol@sign1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x33
  1130  000093                     	ds	1
  1131  000094                     ___fttol@lval:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x34
  1135  000094                     	ds	2
  1136  000096                     ___ftadd@sign:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x36
  1140  000096                     	ds	1
  1141  000097                     ___ftadd@exp2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x37
  1145  000097                     	ds	1
  1146  000098                     ___ftadd@exp1:
  1147                           	opt stack 0
  1148  000098                     ___fttol@exp1:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x38
  1152  000098                     	ds	1
  1153  000099                     ??_PWM_DutyCycle1:
  1154  000099                     ??_PWM_DutyCycle2:
  1155  000099                     ?___ftsub:
  1156                           	opt stack 0
  1157  000099                     ___ftsub@f1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x39
  1161  000099                     	ds	3
  1162  00009C                     ___ftsub@f2:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x3C
  1166  00009C                     	ds	1
  1167  00009D                     PWM_DutyCycle1@DutyCycle:
  1168                           	opt stack 0
  1169  00009D                     PWM_DutyCycle2@DutyCycle:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x3D
  1173  00009D                     	ds	2
  1174  00009F                     ?_sprintf:
  1175                           	opt stack 0
  1176  00009F                     PWM_DutyCycle1@percentageDuty:
  1177                           	opt stack 0
  1178  00009F                     PWM_DutyCycle2@percentageDuty:
  1179                           	opt stack 0
  1180  00009F                     sprintf@sp:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x3F
  1184  00009F                     	ds	1
  1185  0000A0                     PWM_DutyCycle1@DC:
  1186                           	opt stack 0
  1187  0000A0                     PWM_DutyCycle2@DC:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x40
  1191  0000A0                     	ds	1
  1192  0000A1                     sprintf@f:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x41
  1196  0000A1                     	ds	5
  1197  0000A6                     ??_sprintf:
  1198                           
  1199                           ; 0 bytes @ 0x46
  1200  0000A6                     	ds	6
  1201  0000AC                     _sprintf$2983:
  1202                           	opt stack 0
  1203                           
  1204                           ; 3 bytes @ 0x4C
  1205  0000AC                     	ds	3
  1206  0000AF                     _sprintf$1953:
  1207                           	opt stack 0
  1208                           
  1209                           ; 4 bytes @ 0x4F
  1210  0000AF                     	ds	4
  1211  0000B3                     sprintf@vd:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x53
  1215  0000B3                     	ds	4
  1216  0000B7                     sprintf@vd_1955:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x57
  1220  0000B7                     	ds	4
  1221  0000BB                     sprintf@ap:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x5B
  1225  0000BB                     	ds	2
  1226  0000BD                     sprintf@flag:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x5D
  1230  0000BD                     	ds	2
  1231  0000BF                     sprintf@integ:
  1232                           	opt stack 0
  1233                           
  1234                           ; 3 bytes @ 0x5F
  1235  0000BF                     	ds	3
  1236  0000C2                     sprintf@prec:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x62
  1240  0000C2                     	ds	2
  1241  0000C4                     sprintf@_val:
  1242                           	opt stack 0
  1243                           
  1244                           ; 5 bytes @ 0x64
  1245  0000C4                     	ds	5
  1246  0000C9                     sprintf@exp:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x69
  1250  0000C9                     	ds	2
  1251  0000CB                     sprintf@fval:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0x6B
  1255  0000CB                     	ds	3
  1256  0000CE                     sprintf@c:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x6E
  1260  0000CE                     	ds	1
  1261  0000CF                     putcBluetoothInt@a:
  1262                           	opt stack 0
  1263  0000CF                     Lcd_Write_Integer@a:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x6F
  1267  0000CF                     	ds	2
  1268  0000D1                     putcBluetoothInt@s:
  1269                           	opt stack 0
  1270  0000D1                     Lcd_Write_Integer@s:
  1271                           	opt stack 0
  1272                           
  1273                           ; 20 bytes @ 0x71
  1274  0000D1                     	ds	20
  1275  0000E5                     putcBluetoothInt@i:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x85
  1279  0000E5                     	ds	2
  1280  0000E7                     Comando_Tablet@sensed:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x87
  1284  0000E7                     	ds	2
  1285  0000E9                     tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           
  1294                           ; 0 bytes @ 0x89
  1295                           
  1296                           	psect	cstackCOMRAM
  1297  000001                     __pcstackCOMRAM:
  1298                           	opt stack 0
  1299  000001                     ?i2___ftpack:
  1300                           	opt stack 0
  1301  000001                     ReadUSART@data:
  1302                           	opt stack 0
  1303  000001                     i2Lcd_Port@a:
  1304                           	opt stack 0
  1305  000001                     i2SetDCPWM1@dutycycle:
  1306                           	opt stack 0
  1307  000001                     i2SetDCPWM2@dutycycle:
  1308                           	opt stack 0
  1309  000001                     i2___ftpack@arg:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x0
  1313  000001                     	ds	1
  1314  000002                     ??i2_Lcd_Cmd:
  1315  000002                     i2Lcd_Write_Char@temp:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x1
  1319  000002                     	ds	1
  1320  000003                     ??i2_SetDCPWM1:
  1321  000003                     ??i2_SetDCPWM2:
  1322  000003                     i2Lcd_Cmd@a:
  1323                           	opt stack 0
  1324  000003                     i2Lcd_Write_Char@y:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x2
  1328  000003                     	ds	1
  1329  000004                     i2Lcd_Set_Cursor@b:
  1330                           	opt stack 0
  1331  000004                     i2Lcd_Write_Char@a:
  1332                           	opt stack 0
  1333  000004                     i2___ftpack@exp:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x3
  1337  000004                     	ds	1
  1338  000005                     i2Lcd_Set_Cursor@a:
  1339                           	opt stack 0
  1340  000005                     i2___ftpack@sign:
  1341                           	opt stack 0
  1342  000005                     i2Lcd_Write_String@a:
  1343                           	opt stack 0
  1344  000005                     i2SetDCPWM1@DCycle:
  1345                           	opt stack 0
  1346  000005                     i2SetDCPWM2@DCycle:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x4
  1350  000005                     	ds	1
  1351  000006                     ??i2___ftpack:
  1352  000006                     i2Lcd_Set_Cursor@z:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x5
  1356  000006                     	ds	1
  1357  000007                     ??i2_Lcd_Write_String:
  1358  000007                     i2Lcd_Set_Cursor@y:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x6
  1362  000007                     	ds	1
  1363  000008                     i2Lcd_Set_Cursor@temp:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x7
  1367  000008                     	ds	1
  1368  000009                     ?i2___lbtoft:
  1369                           	opt stack 0
  1370  000009                     i2Lcd_Write_String@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x8
  1374  000009                     	ds	3
  1375  00000C                     i2___lbtoft@c:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0xB
  1379  00000C                     	ds	1
  1380  00000D                     ?i2___ftmul:
  1381                           	opt stack 0
  1382  00000D                     i2___ftmul@f1:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0xC
  1386  00000D                     	ds	3
  1387  000010                     i2___ftmul@f2:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0xF
  1391  000010                     	ds	3
  1392  000013                     ??i2___ftmul:
  1393                           
  1394                           ; 0 bytes @ 0x12
  1395  000013                     	ds	3
  1396  000016                     i2___ftmul@exp:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x15
  1400  000016                     	ds	1
  1401  000017                     i2___ftmul@f3_as_product:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x16
  1405  000017                     	ds	3
  1406  00001A                     i2___ftmul@cntr:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x19
  1410  00001A                     	ds	1
  1411  00001B                     i2___ftmul@sign:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x1A
  1415  00001B                     	ds	1
  1416  00001C                     ?i2___fttol:
  1417                           	opt stack 0
  1418  00001C                     i2___fttol@f1:
  1419                           	opt stack 0
  1420                           
  1421                           ; 3 bytes @ 0x1B
  1422  00001C                     	ds	4
  1423  000020                     ??i2___fttol:
  1424                           
  1425                           ; 0 bytes @ 0x1F
  1426  000020                     	ds	5
  1427  000025                     i2___fttol@sign1:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x24
  1431  000025                     	ds	1
  1432  000026                     i2___fttol@lval:
  1433                           	opt stack 0
  1434                           
  1435                           ; 4 bytes @ 0x25
  1436  000026                     	ds	4
  1437  00002A                     i2___fttol@exp1:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x29
  1441  00002A                     	ds	1
  1442  00002B                     ??i2_PWM_DutyCycle1:
  1443  00002B                     ??i2_PWM_DutyCycle2:
  1444                           
  1445                           ; 0 bytes @ 0x2A
  1446  00002B                     	ds	4
  1447  00002F                     i2PWM_DutyCycle1@DutyCycle:
  1448                           	opt stack 0
  1449  00002F                     i2PWM_DutyCycle2@DutyCycle:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2E
  1453  00002F                     	ds	2
  1454  000031                     i2PWM_DutyCycle1@percentageDuty:
  1455                           	opt stack 0
  1456  000031                     i2PWM_DutyCycle2@percentageDuty:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x30
  1460  000031                     	ds	1
  1461  000032                     i2PWM_DutyCycle1@DC:
  1462                           	opt stack 0
  1463  000032                     i2PWM_DutyCycle2@DC:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x31
  1467  000032                     	ds	2
  1468  000034                     ??_TMRO_USART:
  1469                           
  1470                           ; 0 bytes @ 0x33
  1471  000034                     	ds	14
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           
  1481 ;;
  1482 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1483 ;;
  1484 ;; *************** function _main *****************
  1485 ;; Defined at:
  1486 ;;		line 156 in file "robot.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2  417[COMRAM] int 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1503 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1504 ;;Total ram usage:        0 bytes
  1505 ;; Hardware stack levels required when called:   10
  1506 ;; This function calls:
  1507 ;;		_Comando_Tablet
  1508 ;;		_Inicializa_Driveby
  1509 ;;		_Lcd_Clear
  1510 ;;		_Lcd_Init
  1511 ;;		_Lcd_Set_Cursor
  1512 ;;		_Lcd_Write_String
  1513 ;;		_PWM_DutyCycle1
  1514 ;;		_PWM_DutyCycle2
  1515 ;;		_UART1_Init
  1516 ;;		_clrBufferUSART
  1517 ;;		_motor_forward
  1518 ;; This function is called by:
  1519 ;;		Startup code after reset
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text0
  1524  00265E                     __ptext0:
  1525                           	opt stack 0
  1526  00265E                     _main:
  1527                           	opt stack 21
  1528                           
  1529                           ;robot.c: 158: INTCON =0X00;
  1530                           
  1531                           ;incstack = 0
  1532  00265E  0E00               	movlw	0
  1533  002660  6EF2               	movwf	intcon,c	;volatile
  1534                           
  1535                           ;robot.c: 159: TRISD = 0x00;
  1536  002662  0E00               	movlw	0
  1537  002664  6E95               	movwf	3989,c	;volatile
  1538                           
  1539                           ;robot.c: 160: TRISE = 0x00;
  1540  002666  0E00               	movlw	0
  1541  002668  6E96               	movwf	3990,c	;volatile
  1542                           
  1543                           ;robot.c: 161: PORTEbits.RE1=0;
  1544  00266A  9284               	bcf	3972,1,c	;volatile
  1545                           
  1546                           ;robot.c: 162: ADCON1bits.PCFG=0b1111;
  1547  00266C  80C1               	bsf	4033,0,c	;volatile
  1548  00266E  82C1               	bsf	4033,1,c	;volatile
  1549  002670  84C1               	bsf	4033,2,c	;volatile
  1550  002672  86C1               	bsf	4033,3,c	;volatile
  1551                           
  1552                           ;robot.c: 163: Lcd_Init();
  1553  002674  EC9F  F016         	call	_Lcd_Init	;wreg free
  1554                           
  1555                           ;robot.c: 164: Lcd_Clear();
  1556  002678  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  1557                           
  1558                           ;robot.c: 165: Lcd_Set_Cursor(1,1);
  1559  00267C  0E01               	movlw	1
  1560  00267E  0100               	movlb	0	; () banked
  1561  002680  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1562  002682  0E01               	movlw	1
  1563  002684  ECDB  F016         	call	_Lcd_Set_Cursor
  1564                           
  1565                           ;robot.c: 166: Lcd_Write_String("Inicio");
  1566  002688  0E7F               	movlw	high STR_23
  1567  00268A  0100               	movlb	0	; () banked
  1568  00268C  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1569  00268E  0EEF               	movlw	low STR_23
  1570  002690  0100               	movlb	0	; () banked
  1571  002692  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1572  002694  EC94  F014         	call	_Lcd_Write_String	;wreg free
  1573                           
  1574                           ;robot.c: 167: Inicializa_Driveby();
  1575  002698  ECD5  F00E         	call	_Inicializa_Driveby	;wreg free
  1576                           
  1577                           ;robot.c: 168: PORTAbits.RA2 = 1;
  1578  00269C  8480               	bsf	3968,2,c	;volatile
  1579  00269E                     l4868:
  1580                           
  1581                           ;robot.c: 172: {
  1582                           ;robot.c: 175: if (cleanBfer == 1) {
  1583  00269E  0100               	movlb	0	; () banked
  1584  0026A0  05ED               	decf	_cleanBfer& (0+255),w,b
  1585  0026A2  A4D8               	btfss	status,2,c
  1586  0026A4  D005               	goto	l4874
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;robot.c: 176: clrBufferUSART();
  1590  0026A6  ECBC  F018         	call	_clrBufferUSART	;wreg free
  1591                           
  1592                           ;robot.c: 177: cleanBfer = 0;
  1593  0026AA  0E00               	movlw	0
  1594  0026AC  0100               	movlb	0	; () banked
  1595  0026AE  6FED               	movwf	_cleanBfer& (0+255),b
  1596  0026B0                     l4874:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;robot.c: 178: }
  1600                           ;robot.c: 179: if (FinComandT == 1) {
  1601  0026B0  0100               	movlb	0	; () banked
  1602  0026B2  05EC               	decf	_FinComandT& (0+255),w,b
  1603  0026B4  A4D8               	btfss	status,2,c
  1604  0026B6  D01E               	goto	l4894
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;robot.c: 180: Lcd_Clear();
  1608  0026B8  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  1609                           
  1610                           ;robot.c: 181: Lcd_Set_Cursor(2,1);
  1611  0026BC  0E01               	movlw	1
  1612  0026BE  0100               	movlb	0	; () banked
  1613  0026C0  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1614  0026C2  0E02               	movlw	2
  1615  0026C4  ECDB  F016         	call	_Lcd_Set_Cursor
  1616                           
  1617                           ;robot.c: 182: Lcd_Write_String("CMD TABLET");
  1618  0026C8  0E7F               	movlw	high STR_24
  1619  0026CA  0100               	movlb	0	; () banked
  1620  0026CC  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1621  0026CE  0EC8               	movlw	low STR_24
  1622  0026D0  0100               	movlb	0	; () banked
  1623  0026D2  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1624  0026D4  EC94  F014         	call	_Lcd_Write_String	;wreg free
  1625                           
  1626                           ;robot.c: 183: FinComandT = 0;
  1627  0026D8  0E00               	movlw	0
  1628  0026DA  0100               	movlb	0	; () banked
  1629  0026DC  6FEC               	movwf	_FinComandT& (0+255),b
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;robot.c: 184: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1633  0026DE  0E4F               	movlw	79
  1634  0026E0  16AB               	andwf	4011,f,c	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637  0026E2  9AAC               	bcf	4012,5,c	;volatile
  1638                           
  1639                           ; BSR set to: 0
  1640  0026E4  0ECF               	movlw	207
  1641  0026E6  169D               	andwf	3997,f,c	;volatile
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;robot.c: 185: Comando_Tablet();
  1645  0026E8  EC82  F00D         	call	_Comando_Tablet	;wreg free
  1646                           
  1647                           ;robot.c: 186: UART1_Init(51);
  1648  0026EC  0E33               	movlw	51
  1649  0026EE  EC73  F01A         	call	_UART1_Init
  1650                           
  1651                           ;robot.c: 188: }
  1652  0026F2  D00C               	goto	l4904
  1653  0026F4                     l4894:
  1654                           
  1655                           ;robot.c: 189: else if (FinComandB == 1) {
  1656  0026F4  0100               	movlb	0	; () banked
  1657  0026F6  05EB               	decf	_FinComandB& (0+255),w,b
  1658  0026F8  A4D8               	btfss	status,2,c
  1659  0026FA  D008               	goto	l4904
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;robot.c: 194: FinComandB = 0;
  1663  0026FC  0E00               	movlw	0
  1664  0026FE  0100               	movlb	0	; () banked
  1665  002700  6FEB               	movwf	_FinComandB& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;robot.c: 195: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1669  002702  0E4F               	movlw	79
  1670  002704  16AB               	andwf	4011,f,c	;volatile
  1671                           
  1672                           ; BSR set to: 0
  1673  002706  9AAC               	bcf	4012,5,c	;volatile
  1674                           
  1675                           ; BSR set to: 0
  1676  002708  0ECF               	movlw	207
  1677  00270A  169D               	andwf	3997,f,c	;volatile
  1678  00270C                     l4904:
  1679                           
  1680                           ;robot.c: 199: }
  1681                           ;robot.c: 200: PWM_DutyCycle1(100);
  1682  00270C  0E64               	movlw	100
  1683  00270E  EC24  F016         	call	_PWM_DutyCycle1
  1684                           
  1685                           ;robot.c: 201: PWM_DutyCycle2(100);
  1686  002712  0E64               	movlw	100
  1687  002714  ECE6  F015         	call	_PWM_DutyCycle2
  1688                           
  1689                           ;robot.c: 202: motor_forward();
  1690  002718  ECA4  F01A         	call	_motor_forward	;wreg free
  1691  00271C  D7C0               	goto	l4868
  1692  00271E                     __end_of_main:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           intcon	equ	0xFF2
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1l	equ	0xFE1
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _motor_forward *****************
  1706 ;; Defined at:
  1707 ;;		line 185 in file "Funciones_Db.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;		None               void
  1714 ;; Registers used:
  1715 ;;		None
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1721 ;;      Params:         0       0       0       0       0       0       0       0       0
  1722 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1724 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1725 ;;Total ram usage:        0 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    4
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text1
  1736  003548                     __ptext1:
  1737                           	opt stack 0
  1738  003548                     _motor_forward:
  1739                           	opt stack 26
  1740                           
  1741                           ;Funciones_Db.c: 188: PORTBbits.RB6 = 1;
  1742                           
  1743                           ;incstack = 0
  1744  003548  8C81               	bsf	3969,6,c	;volatile
  1745                           
  1746                           ;Funciones_Db.c: 189: PORTCbits.RC0 = 0;
  1747  00354A  9082               	bcf	3970,0,c	;volatile
  1748                           
  1749                           ;Funciones_Db.c: 190: PORTEbits.RE0 = 1;
  1750  00354C  8084               	bsf	3972,0,c	;volatile
  1751                           
  1752                           ;Funciones_Db.c: 192: PORTBbits.RB7=1;
  1753  00354E  8E81               	bsf	3969,7,c	;volatile
  1754                           
  1755                           ;Funciones_Db.c: 193: PORTEbits.RE1= 0;
  1756  003550  9284               	bcf	3972,1,c	;volatile
  1757                           
  1758                           ;Funciones_Db.c: 194: PORTEbits.RE2 = 1;
  1759  003552  8484               	bsf	3972,2,c	;volatile
  1760                           
  1761                           ;Funciones_Db.c: 196: return;
  1762  003554  0012               	return	
  1763  003556                     __end_of_motor_forward:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           intcon	equ	0xFF2
  1770                           postinc0	equ	0xFEE
  1771                           wreg	equ	0xFE8
  1772                           postdec1	equ	0xFE5
  1773                           fsr1l	equ	0xFE1
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _Lcd_Init *****************
  1777 ;; Defined at:
  1778 ;;		line 57 in file "lcd.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1794 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1795 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        1 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    6
  1799 ;; This function calls:
  1800 ;;		_Lcd_Cmd
  1801 ;;		_Lcd_Port
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text2
  1808  002D3E                     __ptext2:
  1809                           	opt stack 0
  1810  002D3E                     _Lcd_Init:
  1811                           	opt stack 24
  1812                           
  1813                           ;lcd.c: 58: Lcd_Port(0x00);
  1814                           
  1815                           ;incstack = 0
  1816  002D3E  0E00               	movlw	0
  1817  002D40  EC8C  F019         	call	_Lcd_Port
  1818                           
  1819                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1820  002D44  0E1A               	movlw	26
  1821  002D46  0100               	movlb	0	; () banked
  1822  002D48  6F63               	movwf	??_Lcd_Init& (0+255),b
  1823  002D4A  0EF8               	movlw	248
  1824  002D4C                     u5267:
  1825  002D4C  2EE8               	decfsz	wreg,f,c
  1826  002D4E  D7FE               	goto	u5267
  1827  002D50  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1828  002D52  D7FC               	goto	u5267
  1829  002D54  D000               	nop2	
  1830                           
  1831                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1832  002D56  0E03               	movlw	3
  1833  002D58  EC15  F01A         	call	_Lcd_Cmd
  1834                           
  1835                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1836  002D5C  0E07               	movlw	7
  1837  002D5E  0100               	movlb	0	; () banked
  1838  002D60  6F63               	movwf	??_Lcd_Init& (0+255),b
  1839  002D62  0E7D               	movlw	125
  1840  002D64                     u5277:
  1841  002D64  2EE8               	decfsz	wreg,f,c
  1842  002D66  D7FE               	goto	u5277
  1843  002D68  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1844  002D6A  D7FC               	goto	u5277
  1845  002D6C  F000               	nop	
  1846                           
  1847                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1848  002D6E  0E03               	movlw	3
  1849  002D70  EC15  F01A         	call	_Lcd_Cmd
  1850                           
  1851                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1852  002D74  0E0F               	movlw	15
  1853  002D76  0100               	movlb	0	; () banked
  1854  002D78  6F63               	movwf	??_Lcd_Init& (0+255),b
  1855  002D7A  0E48               	movlw	72
  1856  002D7C                     u5287:
  1857  002D7C  2EE8               	decfsz	wreg,f,c
  1858  002D7E  D7FE               	goto	u5287
  1859  002D80  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1860  002D82  D7FC               	goto	u5287
  1861                           
  1862                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1863  002D84  0E03               	movlw	3
  1864  002D86  EC15  F01A         	call	_Lcd_Cmd
  1865                           
  1866                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1867  002D8A  0E02               	movlw	2
  1868  002D8C  EC15  F01A         	call	_Lcd_Cmd
  1869                           
  1870                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1871  002D90  0E02               	movlw	2
  1872  002D92  EC15  F01A         	call	_Lcd_Cmd
  1873                           
  1874                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1875  002D96  0E08               	movlw	8
  1876  002D98  EC15  F01A         	call	_Lcd_Cmd
  1877                           
  1878                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1879  002D9C  0E00               	movlw	0
  1880  002D9E  EC15  F01A         	call	_Lcd_Cmd
  1881                           
  1882                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1883  002DA2  0E0C               	movlw	12
  1884  002DA4  EC15  F01A         	call	_Lcd_Cmd
  1885                           
  1886                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1887  002DA8  0E00               	movlw	0
  1888  002DAA  EC15  F01A         	call	_Lcd_Cmd
  1889                           
  1890                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1891  002DAE  0E06               	movlw	6
  1892  002DB0  EC15  F01A         	call	_Lcd_Cmd
  1893  002DB4  0012               	return	
  1894  002DB6                     __end_of_Lcd_Init:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           intcon	equ	0xFF2
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1l	equ	0xFE1
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _Inicializa_Driveby *****************
  1908 ;; Defined at:
  1909 ;;		line 62 in file "Funciones_Db.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  i               2   33[BANK0 ] int 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0
  1924 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1925 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1926 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1927 ;;Total ram usage:        3 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    9
  1930 ;; This function calls:
  1931 ;;		_BT_Init
  1932 ;;		_Lcd_Clear
  1933 ;;		_Lcd_Set_Cursor
  1934 ;;		_Lcd_Write_String
  1935 ;;		_PWM_init1
  1936 ;;		_PWM_init2
  1937 ;;		_Pause_seg
  1938 ;;		_clrBufferUSART
  1939 ;;		_external_interrupt_init
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text3
  1946  001DAA                     __ptext3:
  1947                           	opt stack 0
  1948  001DAA                     _Inicializa_Driveby:
  1949                           	opt stack 21
  1950                           
  1951                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1952                           
  1953                           ;incstack = 0
  1954  001DAA  0E00               	movlw	0
  1955  001DAC  6E95               	movwf	3989,c	;volatile
  1956  001DAE  CF95 FF94          	movff	3989,3988	;volatile
  1957  001DB2  CF94 FF93          	movff	3988,3987	;volatile
  1958  001DB6  CF93 FF92          	movff	3987,3986	;volatile
  1959                           
  1960                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1961  001DBA  0EC0               	movlw	192
  1962  001DBC  6EF2               	movwf	intcon,c	;volatile
  1963                           
  1964                           ;Funciones_Db.c: 67: int i = 0;
  1965  001DBE  0E00               	movlw	0
  1966  001DC0  0100               	movlb	0	; () banked
  1967  001DC2  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  1968  001DC4  0E00               	movlw	0
  1969  001DC6  0100               	movlb	0	; () banked
  1970  001DC8  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1974  001DCA  0E34               	movlw	52
  1975  001DCC  0100               	movlb	0	; () banked
  1976  001DCE  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  1977  001DD0  0EF2               	movlw	242
  1978  001DD2                     u5297:
  1979  001DD2  2EE8               	decfsz	wreg,f,c
  1980  001DD4  D7FE               	goto	u5297
  1981  001DD6  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  1982  001DD8  D7FC               	goto	u5297
  1983                           
  1984                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1985  001DDA  88D3               	bsf	4051,4,c	;volatile
  1986  001DDC  8AD3               	bsf	4051,5,c	;volatile
  1987  001DDE  8CD3               	bsf	4051,6,c	;volatile
  1988                           
  1989                           ;Funciones_Db.c: 74: TRISA = TRISB = TRISC = TRISD = TRISE = 0;
  1990  001DE0  0E00               	movlw	0
  1991  001DE2  6E96               	movwf	3990,c	;volatile
  1992  001DE4  CF96 FF95          	movff	3990,3989	;volatile
  1993  001DE8  CF95 FF94          	movff	3989,3988	;volatile
  1994  001DEC  CF94 FF93          	movff	3988,3987	;volatile
  1995  001DF0  CF93 FF92          	movff	3987,3986	;volatile
  1996                           
  1997                           ;Funciones_Db.c: 75: PORTA = PORTB = PORTC = PORTD = PORTE = 0;
  1998  001DF4  0E00               	movlw	0
  1999  001DF6  6E84               	movwf	3972,c	;volatile
  2000  001DF8  CF84 FF83          	movff	3972,3971	;volatile
  2001  001DFC  CF83 FF82          	movff	3971,3970	;volatile
  2002  001E00  CF82 FF81          	movff	3970,3969	;volatile
  2003  001E04  CF81 FF80          	movff	3969,3968	;volatile
  2004                           
  2005                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  2006  001E08  8E94               	bsf	3988,7,c	;volatile
  2007                           
  2008                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  2009  001E0A  9C94               	bcf	3988,6,c	;volatile
  2010                           
  2011                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  2012  001E0C  0E00               	movlw	0
  2013  001E0E  0100               	movlb	0	; () banked
  2014  001E10  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  2015  001E12  0E01               	movlw	1
  2016  001E14  0100               	movlb	0	; () banked
  2017  001E16  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  2018  001E18                     
  2019                           ; BSR set to: 0
  2020  001E18  0100               	movlb	0	; () banked
  2021  001E1A  5182               	movf	(Inicializa_Driveby@i+1)& (0+255),w,b
  2022  001E1C  0A80               	xorlw	128
  2023  001E1E  0F80               	addlw	-128
  2024  001E20  0E33               	movlw	51
  2025  001E22  B4D8               	btfsc	status,2,c
  2026  001E24  5D81               	subwf	Inicializa_Driveby@i& (0+255),w,b
  2027  001E26  B0D8               	btfsc	status,0,c
  2028  001E28  D00D               	goto	l4548
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  2032                           
  2033                           ; BSR set to: 0
  2034                           
  2035                           ; BSR set to: 0
  2036  001E2A  0E1A               	movlw	26
  2037  001E2C  0100               	movlb	0	; () banked
  2038  001E2E  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  2039  001E30  0EF8               	movlw	248
  2040  001E32                     u5307:
  2041  001E32  2EE8               	decfsz	wreg,f,c
  2042  001E34  D7FE               	goto	u5307
  2043  001E36  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  2044  001E38  D7FC               	goto	u5307
  2045  001E3A  D000               	nop2	
  2046  001E3C  0100               	movlb	0	; () banked
  2047  001E3E  4B81               	infsnz	Inicializa_Driveby@i& (0+255),f,b
  2048  001E40  2B82               	incf	(Inicializa_Driveby@i+1)& (0+255),f,b
  2049  001E42  D7EA               	goto	L1
  2050  001E44                     l4548:
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;Funciones_Db.c: 80: PORTE = 0;
  2054  001E44  0E00               	movlw	0
  2055  001E46  6E84               	movwf	3972,c	;volatile
  2056                           
  2057                           ;Funciones_Db.c: 81: PORTB = 0;
  2058  001E48  0E00               	movlw	0
  2059  001E4A  6E81               	movwf	3969,c	;volatile
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  2063  001E4C  8093               	bsf	3987,0,c	;volatile
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  2067  001E4E  8293               	bsf	3987,1,c	;volatile
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  2071  001E50  8493               	bsf	3987,2,c	;volatile
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  2075  001E52  8693               	bsf	3987,3,c	;volatile
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  2079  001E54  8893               	bsf	3987,4,c	;volatile
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;Funciones_Db.c: 87: external_interrupt_init();
  2083  001E56  EC59  F01A         	call	_external_interrupt_init	;wreg free
  2084                           
  2085                           ;Funciones_Db.c: 88: Lcd_Clear();
  2086  001E5A  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  2087                           
  2088                           ;Funciones_Db.c: 89: Lcd_Set_Cursor(2, 1);
  2089  001E5E  0E01               	movlw	1
  2090  001E60  0100               	movlb	0	; () banked
  2091  001E62  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  2092  001E64  0E02               	movlw	2
  2093  001E66  ECDB  F016         	call	_Lcd_Set_Cursor
  2094                           
  2095                           ;Funciones_Db.c: 90: Lcd_Write_String("INICIO");
  2096  001E6A  0E7F               	movlw	high STR_10
  2097  001E6C  0100               	movlb	0	; () banked
  2098  001E6E  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2099  001E70  0EF6               	movlw	low STR_10
  2100  001E72  0100               	movlb	0	; () banked
  2101  001E74  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  2102  001E76  EC94  F014         	call	_Lcd_Write_String	;wreg free
  2103                           
  2104                           ;Funciones_Db.c: 92: BT_Init();
  2105  001E7A  EC03  F012         	call	_BT_Init	;wreg free
  2106                           
  2107                           ;Funciones_Db.c: 93: Lcd_Clear();
  2108  001E7E  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  2109                           
  2110                           ;Funciones_Db.c: 94: Lcd_Set_Cursor(1, 1);
  2111  001E82  0E01               	movlw	1
  2112  001E84  0100               	movlb	0	; () banked
  2113  001E86  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  2114  001E88  0E01               	movlw	1
  2115  001E8A  ECDB  F016         	call	_Lcd_Set_Cursor
  2116                           
  2117                           ;Funciones_Db.c: 95: Lcd_Write_String("BT INICIALIZADO");
  2118  001E8E  0E7F               	movlw	high STR_11
  2119  001E90  0100               	movlb	0	; () banked
  2120  001E92  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2121  001E94  0E58               	movlw	low STR_11
  2122  001E96  0100               	movlb	0	; () banked
  2123  001E98  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  2124  001E9A  EC94  F014         	call	_Lcd_Write_String	;wreg free
  2125                           
  2126                           ;Funciones_Db.c: 97: Pause_seg(7);
  2127  001E9E  0E07               	movlw	7
  2128  001EA0  ECB2  F017         	call	_Pause_seg
  2129                           
  2130                           ;Funciones_Db.c: 98: cad = 0;
  2131  001EA4  0E00               	movlw	0
  2132  001EA6  6E55               	movwf	_cad,c
  2133                           
  2134                           ;Funciones_Db.c: 99: clrBufferUSART();
  2135  001EA8  ECBC  F018         	call	_clrBufferUSART	;wreg free
  2136                           
  2137                           ;Funciones_Db.c: 102: PWM_init1(0xff);
  2138  001EAC  0EFF               	movlw	255
  2139  001EAE  EC02  F01A         	call	_PWM_init1
  2140                           
  2141                           ;Funciones_Db.c: 103: PWM_init2(0xff);
  2142  001EB2  0EFF               	movlw	255
  2143  001EB4  ECEF  F019         	call	_PWM_init2
  2144                           
  2145                           ;Funciones_Db.c: 104: return;
  2146  001EB8  0012               	return	
  2147  001EBA                     __end_of_Inicializa_Driveby:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           tblptrh	equ	0xFF7
  2151                           tblptrl	equ	0xFF6
  2152                           tablat	equ	0xFF5
  2153                           intcon	equ	0xFF2
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postdec1	equ	0xFE5
  2157                           fsr1l	equ	0xFE1
  2158                           status	equ	0xFD8
  2159                           
  2160 ;; *************** function _external_interrupt_init *****************
  2161 ;; Defined at:
  2162 ;;		line 107 in file "Funciones_Db.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;		None               void
  2169 ;; Registers used:
  2170 ;;		None
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2176 ;;      Params:         0       0       0       0       0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    4
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_Inicializa_Driveby
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text4
  2191  0034B2                     __ptext4:
  2192                           	opt stack 0
  2193  0034B2                     _external_interrupt_init:
  2194                           	opt stack 25
  2195                           
  2196                           ;Funciones_Db.c: 110: TRISBbits.TRISB0 = 1;
  2197                           
  2198                           ;incstack = 0
  2199  0034B2  8093               	bsf	3987,0,c	;volatile
  2200                           
  2201                           ;Funciones_Db.c: 111: INTCONbits.INT0E = 1;
  2202  0034B4  88F2               	bsf	intcon,4,c	;volatile
  2203                           
  2204                           ;Funciones_Db.c: 112: INTCON2bits.INTEDG0 = 0;
  2205  0034B6  9CF1               	bcf	intcon2,6,c	;volatile
  2206                           
  2207                           ;Funciones_Db.c: 113: INTCONbits.INT0F = 0;
  2208  0034B8  92F2               	bcf	intcon,1,c	;volatile
  2209                           
  2210                           ;Funciones_Db.c: 115: TRISBbits.TRISB1 = 1;
  2211  0034BA  8293               	bsf	3987,1,c	;volatile
  2212                           
  2213                           ;Funciones_Db.c: 116: INTCON3bits.INT1E = 1;
  2214  0034BC  86F0               	bsf	intcon3,3,c	;volatile
  2215                           
  2216                           ;Funciones_Db.c: 117: INTCON2bits.INTEDG1 = 0;
  2217  0034BE  9AF1               	bcf	intcon2,5,c	;volatile
  2218                           
  2219                           ;Funciones_Db.c: 118: INTCON3bits.INT1F = 0;
  2220  0034C0  90F0               	bcf	intcon3,0,c	;volatile
  2221                           
  2222                           ;Funciones_Db.c: 120: TRISBbits.TRISB2 = 1;
  2223  0034C2  8493               	bsf	3987,2,c	;volatile
  2224                           
  2225                           ;Funciones_Db.c: 121: INTCON3bits.INT2E = 1;
  2226  0034C4  88F0               	bsf	intcon3,4,c	;volatile
  2227                           
  2228                           ;Funciones_Db.c: 122: INTCON2bits.INTEDG2 = 0;
  2229  0034C6  98F1               	bcf	intcon2,4,c	;volatile
  2230                           
  2231                           ;Funciones_Db.c: 123: INTCON3bits.INT2F = 0;
  2232  0034C8  92F0               	bcf	intcon3,1,c	;volatile
  2233                           
  2234                           ;Funciones_Db.c: 124: return;
  2235  0034CA  0012               	return	
  2236  0034CC                     __end_of_external_interrupt_init:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           intcon	equ	0xFF2
  2243                           intcon2	equ	0xFF1
  2244                           intcon3	equ	0xFF0
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           postdec1	equ	0xFE5
  2248                           fsr1l	equ	0xFE1
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _PWM_init2 *****************
  2252 ;; Defined at:
  2253 ;;		line 42 in file "pwm.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  period          1    wreg     unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  period          1    3[BANK0 ] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;		None               void
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2267 ;;      Params:         0       0       0       0       0       0       0       0       0
  2268 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2270 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2271 ;;Total ram usage:        1 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    5
  2274 ;; This function calls:
  2275 ;;		_OpenPWM2
  2276 ;; This function is called by:
  2277 ;;		_Inicializa_Driveby
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text5
  2282  0033DE                     __ptext5:
  2283                           	opt stack 0
  2284  0033DE                     _PWM_init2:
  2285                           	opt stack 24
  2286                           
  2287                           ;incstack = 0
  2288                           ;PWM_init2@period stored from wreg
  2289  0033DE  0100               	movlb	0	; () banked
  2290  0033E0  6F63               	movwf	PWM_init2@period& (0+255),b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;pwm.c: 43: Timer2Config = 0b11111110;
  2294  0033E2  0EFE               	movlw	254
  2295  0033E4  0100               	movlb	0	; () banked
  2296  0033E6  6FEE               	movwf	_Timer2Config& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  2300  0033E8  0100               	movlb	0	; () banked
  2301  0033EA  51EE               	movf	_Timer2Config& (0+255),w,b
  2302  0033EC  0BFB               	andlw	251
  2303  0033EE  6ECA               	movwf	4042,c	;volatile
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;pwm.c: 47: TMR2 = 0;
  2307  0033F0  0E00               	movlw	0
  2308  0033F2  6ECC               	movwf	4044,c	;volatile
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  2312  0033F4  929E               	bcf	3998,1,c	;volatile
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  2316  0033F6  929D               	bcf	3997,1,c	;volatile
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  2320  0033F8  84CA               	bsf	4042,2,c	;volatile
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;pwm.c: 51: OpenPWM2(period);
  2324  0033FA  0100               	movlb	0	; () banked
  2325  0033FC  5163               	movf	PWM_init2@period& (0+255),w,b
  2326  0033FE  EC9A  F018         	call	_OpenPWM2
  2327                           
  2328                           ;pwm.c: 53: return;
  2329  003402  0012               	return	
  2330  003404                     __end_of_PWM_init2:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           intcon	equ	0xFF2
  2337                           intcon2	equ	0xFF1
  2338                           intcon3	equ	0xFF0
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _OpenPWM2 *****************
  2346 ;; Defined at:
  2347 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  period          1    wreg     unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  period          1    1[BANK0 ] unsigned char 
  2352 ;;  ccp2mx          1    2[BANK0 ] unsigned char 
  2353 ;;  pmmode          1    0        unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0
  2364 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2365 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2366 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2367 ;;Total ram usage:        3 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    4
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_PWM_init2
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text6
  2378  003134                     __ptext6:
  2379                           	opt stack 0
  2380  003134                     _OpenPWM2:
  2381                           	opt stack 24
  2382                           
  2383                           ;incstack = 0
  2384                           ;OpenPWM2@period stored from wreg
  2385  003134  0100               	movlb	0	; () banked
  2386  003136  6F61               	movwf	OpenPWM2@period& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389  003138  0E0C               	movlw	12
  2390  00313A  6EBA               	movwf	4026,c	;volatile
  2391                           
  2392                           ; BSR set to: 0
  2393  00313C  0E05               	movlw	5
  2394  00313E  6EF6               	movwf	tblptrl,c
  2395  003140                     	if	1	;There is more than 1 active tblptr byte
  2396  003140  0E00               	movlw	0
  2397  003142  6EF7               	movwf	tblptrh,c
  2398  003144                     	endif
  2399  003144                     	if	1	;There are 3 active tblptr bytes
  2400  003144  0E30               	movlw	48
  2401  003146  6EF8               	movwf	tblptru,c
  2402  003148                     	endif
  2403  003148  0008               	tblrd		*
  2404  00314A  CFF5 F060          	movff	tablat,??_OpenPWM2
  2405  00314E  0100               	movlb	0	; () banked
  2406  003150  A160               	btfss	??_OpenPWM2& (0+255),0,b
  2407  003152  D003               	goto	l4036
  2408                           
  2409                           ; BSR set to: 0
  2410  003154  0100               	movlb	0	; () banked
  2411  003156  6962               	setf	OpenPWM2@ccp2mx& (0+255),b
  2412  003158  D003               	goto	l611
  2413  00315A                     l4036:
  2414                           
  2415                           ; BSR set to: 0
  2416  00315A  0E00               	movlw	0
  2417  00315C  0100               	movlb	0	; () banked
  2418  00315E  6F62               	movwf	OpenPWM2@ccp2mx& (0+255),b
  2419  003160                     l611:
  2420                           
  2421                           ; BSR set to: 0
  2422  003160  0100               	movlb	0	; () banked
  2423  003162  5162               	movf	OpenPWM2@ccp2mx& (0+255),w,b
  2424  003164  B4D8               	btfsc	status,2,c
  2425  003166  D002               	goto	l612
  2426                           
  2427                           ; BSR set to: 0
  2428  003168  9294               	bcf	3988,1,c	;volatile
  2429  00316A  D001               	goto	l613
  2430  00316C                     l612:
  2431                           
  2432                           ; BSR set to: 0
  2433  00316C  9693               	bcf	3987,3,c	;volatile
  2434  00316E                     l613:
  2435                           
  2436                           ; BSR set to: 0
  2437  00316E  94CA               	bcf	4042,2,c	;volatile
  2438  003170  C061  FFCB         	movff	OpenPWM2@period,4043	;volatile
  2439  003174  84CA               	bsf	4042,2,c	;volatile
  2440                           
  2441                           ; BSR set to: 0
  2442  003176  0012               	return	
  2443  003178                     __end_of_OpenPWM2:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           intcon3	equ	0xFF0
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _PWM_init1 *****************
  2459 ;; Defined at:
  2460 ;;		line 20 in file "pwm.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  period          1    wreg     unsigned char 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  period          1    1[BANK0 ] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;		None               void
  2467 ;; Registers used:
  2468 ;;		wreg, status,2, status,0, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2474 ;;      Params:         0       0       0       0       0       0       0       0       0
  2475 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2477 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2478 ;;Total ram usage:        1 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		_OpenPWM1
  2483 ;; This function is called by:
  2484 ;;		_Inicializa_Driveby
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text7
  2489  003404                     __ptext7:
  2490                           	opt stack 0
  2491  003404                     _PWM_init1:
  2492                           	opt stack 24
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;incstack = 0
  2496                           ;PWM_init1@period stored from wreg
  2497  003404  0100               	movlb	0	; () banked
  2498  003406  6F61               	movwf	PWM_init1@period& (0+255),b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;pwm.c: 21: Timer2Config = 0b11111110;
  2502  003408  0EFE               	movlw	254
  2503  00340A  0100               	movlb	0	; () banked
  2504  00340C  6FEE               	movwf	_Timer2Config& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  2508  00340E  0100               	movlb	0	; () banked
  2509  003410  51EE               	movf	_Timer2Config& (0+255),w,b
  2510  003412  0BFB               	andlw	251
  2511  003414  6ECA               	movwf	4042,c	;volatile
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;pwm.c: 25: TMR2 = 0;
  2515  003416  0E00               	movlw	0
  2516  003418  6ECC               	movwf	4044,c	;volatile
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  2520  00341A  929E               	bcf	3998,1,c	;volatile
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  2524  00341C  929D               	bcf	3997,1,c	;volatile
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  2528  00341E  84CA               	bsf	4042,2,c	;volatile
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;pwm.c: 29: OpenPWM1(period);
  2532  003420  0100               	movlb	0	; () banked
  2533  003422  5161               	movf	PWM_init1@period& (0+255),w,b
  2534  003424  EC7E  F01A         	call	_OpenPWM1
  2535                           
  2536                           ;pwm.c: 31: return;
  2537  003428  0012               	return	
  2538  00342A                     __end_of_PWM_init1:
  2539                           	opt stack 0
  2540                           tblptru	equ	0xFF8
  2541                           tblptrh	equ	0xFF7
  2542                           tblptrl	equ	0xFF6
  2543                           tablat	equ	0xFF5
  2544                           intcon	equ	0xFF2
  2545                           intcon2	equ	0xFF1
  2546                           intcon3	equ	0xFF0
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postdec1	equ	0xFE5
  2550                           fsr1l	equ	0xFE1
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _OpenPWM1 *****************
  2554 ;; Defined at:
  2555 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  period          1    wreg     unsigned char 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  period          1    0[BANK0 ] unsigned char 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;		None               void
  2562 ;; Registers used:
  2563 ;;		wreg, status,2, status,0
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2569 ;;      Params:         0       0       0       0       0       0       0       0       0
  2570 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2572 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2573 ;;Total ram usage:        1 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    4
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_PWM_init1
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text8
  2584  0034FC                     __ptext8:
  2585                           	opt stack 0
  2586  0034FC                     _OpenPWM1:
  2587                           	opt stack 24
  2588                           
  2589                           ;incstack = 0
  2590                           ;OpenPWM1@period stored from wreg
  2591  0034FC  0100               	movlb	0	; () banked
  2592  0034FE  6F60               	movwf	OpenPWM1@period& (0+255),b
  2593                           
  2594                           ; BSR set to: 0
  2595  003500  0E0C               	movlw	12
  2596  003502  12BD               	iorwf	4029,f,c	;volatile
  2597                           
  2598                           ; BSR set to: 0
  2599  003504  9494               	bcf	3988,2,c	;volatile
  2600                           
  2601                           ; BSR set to: 0
  2602  003506  94CA               	bcf	4042,2,c	;volatile
  2603                           
  2604                           ; BSR set to: 0
  2605  003508  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2606                           
  2607                           ; BSR set to: 0
  2608  00350C  84CA               	bsf	4042,2,c	;volatile
  2609                           
  2610                           ; BSR set to: 0
  2611  00350E  0012               	return	
  2612  003510                     __end_of_OpenPWM1:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           intcon3	equ	0xFF0
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _BT_Init *****************
  2628 ;; Defined at:
  2629 ;;		line 16 in file "Bluetooth.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  nameBT         18   14[BANK0 ] unsigned char [18]
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0
  2644 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2646 ;;      Totals:         0      18       0       0       0       0       0       0       0
  2647 ;;Total ram usage:       18 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    8
  2650 ;; This function calls:
  2651 ;;		_Pause_seg
  2652 ;;		_SendBlueToothCommand
  2653 ;;		_UART1_Init
  2654 ;; This function is called by:
  2655 ;;		_Inicializa_Driveby
  2656 ;;		_EstadoBluetooth
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text9
  2661  002406                     __ptext9:
  2662                           	opt stack 0
  2663  002406                     _BT_Init:
  2664                           	opt stack 21
  2665                           
  2666                           ;Bluetooth.c: 18: UART1_Init(51);
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;incstack = 0
  2670  002406  0E33               	movlw	51
  2671  002408  EC73  F01A         	call	_UART1_Init
  2672                           
  2673                           ;Bluetooth.c: 21: Pause_seg(1);
  2674  00240C  0E01               	movlw	1
  2675  00240E  ECB2  F017         	call	_Pause_seg
  2676                           
  2677                           ;Bluetooth.c: 22: char nameBT[18] = {
  2678                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  2679                           ;Bluetooth.c: 24: };
  2680  002412  EE21  F06E         	lfsr	2,BT_Init@F5675
  2681  002416  EE10  F06E         	lfsr	1,BT_Init@nameBT
  2682  00241A  0E12               	movlw	18
  2683  00241C                     u4251:
  2684  00241C  CFDE FFE6          	movff	postinc2,postinc1
  2685  002420  2EE8               	decfsz	wreg,f,c
  2686  002422  D7FC               	goto	u4251
  2687                           
  2688                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  2689  002424  0E7F               	movlw	high STR_1
  2690  002426  0100               	movlb	0	; () banked
  2691  002428  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2692  00242A  0EBC               	movlw	low STR_1
  2693  00242C  0100               	movlb	0	; () banked
  2694  00242E  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2695  002430  0E00               	movlw	0
  2696  002432  0100               	movlb	0	; () banked
  2697  002434  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2698  002436  0E0B               	movlw	11
  2699  002438  0100               	movlb	0	; () banked
  2700  00243A  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2701  00243C  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2702                           
  2703                           ;Bluetooth.c: 29: Pause_seg(1);
  2704  002440  0E01               	movlw	1
  2705  002442  ECB2  F017         	call	_Pause_seg
  2706                           
  2707                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  2708  002446  0100               	movlb	0	; () banked
  2709  002448  0E00               	movlw	high BT_Init@nameBT
  2710  00244A  0100               	movlb	0	; () banked
  2711  00244C  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2712  00244E  0100               	movlb	0	; () banked
  2713  002450  0E6E               	movlw	low BT_Init@nameBT
  2714  002452  0100               	movlb	0	; () banked
  2715  002454  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2716  002456  0E00               	movlw	0
  2717  002458  0100               	movlb	0	; () banked
  2718  00245A  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2719  00245C  0E12               	movlw	18
  2720  00245E  0100               	movlb	0	; () banked
  2721  002460  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2722  002462  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2723                           
  2724                           ;Bluetooth.c: 33: Pause_seg(2);
  2725  002466  0E02               	movlw	2
  2726  002468  ECB2  F017         	call	_Pause_seg
  2727                           
  2728                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  2729  00246C  0E7F               	movlw	high STR_2
  2730  00246E  0100               	movlb	0	; () banked
  2731  002470  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2732  002472  0E68               	movlw	low STR_2
  2733  002474  0100               	movlb	0	; () banked
  2734  002476  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2735  002478  0E00               	movlw	0
  2736  00247A  0100               	movlb	0	; () banked
  2737  00247C  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2738  00247E  0E0E               	movlw	14
  2739  002480  0100               	movlb	0	; () banked
  2740  002482  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2741  002484  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2742                           
  2743                           ;Bluetooth.c: 36: Pause_seg(2);
  2744  002488  0E02               	movlw	2
  2745  00248A  ECB2  F017         	call	_Pause_seg
  2746                           
  2747                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  2748  00248E  0E7F               	movlw	high STR_3
  2749  002490  0100               	movlb	0	; () banked
  2750  002492  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2751  002494  0EDE               	movlw	low STR_3
  2752  002496  0100               	movlb	0	; () banked
  2753  002498  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2754  00249A  0E00               	movlw	0
  2755  00249C  0100               	movlb	0	; () banked
  2756  00249E  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2757  0024A0  0E08               	movlw	8
  2758  0024A2  0100               	movlb	0	; () banked
  2759  0024A4  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2760  0024A6  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2761                           
  2762                           ;Bluetooth.c: 41: Pause_seg(2);
  2763  0024AA  0E02               	movlw	2
  2764  0024AC  ECB2  F017         	call	_Pause_seg
  2765                           
  2766                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  2767  0024B0  0E7F               	movlw	high STR_3
  2768  0024B2  0100               	movlb	0	; () banked
  2769  0024B4  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2770  0024B6  0EDE               	movlw	low STR_3
  2771  0024B8  0100               	movlb	0	; () banked
  2772  0024BA  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2773  0024BC  0E00               	movlw	0
  2774  0024BE  0100               	movlb	0	; () banked
  2775  0024C0  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2776  0024C2  0E08               	movlw	8
  2777  0024C4  0100               	movlb	0	; () banked
  2778  0024C6  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2779  0024C8  EC66  F01A         	call	_SendBlueToothCommand	;wreg free
  2780                           
  2781                           ;Bluetooth.c: 44: Pause_seg(2);
  2782  0024CC  0E02               	movlw	2
  2783  0024CE  ECB2  F017         	call	_Pause_seg
  2784                           
  2785                           ;Bluetooth.c: 45: return;
  2786  0024D2  0012               	return	
  2787  0024D4                     __end_of_BT_Init:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           intcon	equ	0xFF2
  2794                           intcon2	equ	0xFF1
  2795                           intcon3	equ	0xFF0
  2796                           postinc0	equ	0xFEE
  2797                           wreg	equ	0xFE8
  2798                           postinc1	equ	0xFE6
  2799                           postdec1	equ	0xFE5
  2800                           fsr1l	equ	0xFE1
  2801                           postinc2	equ	0xFDE
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _SendBlueToothCommand *****************
  2805 ;; Defined at:
  2806 ;;		line 48 in file "Bluetooth.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  command         2   10[BANK0 ] PTR const unsigned char 
  2809 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2810 ;;		 -> BT_Init@nameBT(18), 
  2811 ;;  total           2   12[BANK0 ] unsigned int 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;		None               void
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2823 ;;      Params:         0       4       0       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2826 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2827 ;;Total ram usage:        4 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    7
  2830 ;; This function calls:
  2831 ;;		_putSTRINGU1
  2832 ;; This function is called by:
  2833 ;;		_BT_Init
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text10
  2838  0034CC                     __ptext10:
  2839                           	opt stack 0
  2840  0034CC                     _SendBlueToothCommand:
  2841                           	opt stack 21
  2842                           
  2843                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  2844                           
  2845                           ;incstack = 0
  2846  0034CC  0100               	movlb	0	; () banked
  2847  0034CE  C06B  F063         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  2848  0034D2  0100               	movlb	0	; () banked
  2849  0034D4  C06A  F062         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  2850  0034D8  C06C  F064         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  2851  0034DC  C06D  F065         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  2852  0034E0  EC8F  F013         	call	_putSTRINGU1	;wreg free
  2853                           
  2854                           ;Bluetooth.c: 50: return;
  2855  0034E4  0012               	return	
  2856  0034E6                     __end_of_SendBlueToothCommand:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           intcon	equ	0xFF2
  2863                           intcon2	equ	0xFF1
  2864                           intcon3	equ	0xFF0
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           postinc1	equ	0xFE6
  2868                           postdec1	equ	0xFE5
  2869                           fsr1l	equ	0xFE1
  2870                           postinc2	equ	0xFDE
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _putSTRINGU1 *****************
  2874 ;; Defined at:
  2875 ;;		line 18 in file "UART1.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  dato            2    2[BANK0 ] PTR const unsigned char 
  2878 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2879 ;;		 -> BT_Init@nameBT(18), 
  2880 ;;  total           2    4[BANK0 ] unsigned int 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  cont            1    9[BANK0 ] unsigned char 
  2883 ;;  last            1    8[BANK0 ] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;		None               void
  2886 ;; Registers used:
  2887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2893 ;;      Params:         0       4       0       0       0       0       0       0       0
  2894 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2895 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2896 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2897 ;;Total ram usage:        8 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    6
  2900 ;; This function calls:
  2901 ;;		_putcTxU1
  2902 ;; This function is called by:
  2903 ;;		_SendBlueToothCommand
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text11
  2908  00271E                     __ptext11:
  2909                           	opt stack 0
  2910  00271E                     _putSTRINGU1:
  2911                           	opt stack 21
  2912                           
  2913                           ;UART1.c: 19: unsigned char cont,last;
  2914                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2915                           
  2916                           ;incstack = 0
  2917  00271E  0E00               	movlw	0
  2918  002720  0100               	movlb	0	; () banked
  2919  002722  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2920  002724  0E00               	movlw	0
  2921  002726  0100               	movlb	0	; () banked
  2922  002728  6F68               	movwf	putSTRINGU1@last& (0+255),b
  2923  00272A  D025               	goto	l3392
  2924  00272C                     l3386:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2928  00272C  0100               	movlb	0	; () banked
  2929  00272E  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2930  002730  0D01               	mullw	1
  2931  002732  0100               	movlb	0	; () banked
  2932  002734  C062  F066         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2933  002738  0100               	movlb	0	; () banked
  2934  00273A  C063  F067         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2935  00273E  50F3               	movf	prodl,w,c
  2936  002740  0100               	movlb	0	; () banked
  2937  002742  2766               	addwf	??_putSTRINGU1& (0+255),f,b
  2938  002744  50F4               	movf	prodh,w,c
  2939  002746  0100               	movlb	0	; () banked
  2940  002748  2367               	addwfc	(??_putSTRINGU1+1)& (0+255),f,b
  2941  00274A  C066  FFF6         	movff	??_putSTRINGU1,tblptrl
  2942  00274E  C067  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2943  002752  6AF8               	clrf	tblptru,c
  2944  002754  0E07               	movlw	(high __ramtop+-1)
  2945  002756  64F7               	cpfsgt	tblptrh,c
  2946  002758  D003               	bra	u3157
  2947  00275A  0008               	tblrd		*
  2948  00275C  50F5               	movf	tablat,w,c
  2949  00275E  D005               	bra	u3150
  2950  002760                     u3157:
  2951  002760  CFF6 FFE9          	movff	tblptrl,fsr0l
  2952  002764  CFF7 FFEA          	movff	tblptrh,fsr0h
  2953  002768  50EF               	movf	indf0,w,c
  2954  00276A                     u3150:
  2955  00276A  0900               	iorlw	0
  2956  00276C  A4D8               	btfss	status,2,c
  2957  00276E  C069  F068         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2958  002772  0100               	movlb	0	; () banked
  2959  002774  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  2960  002776                     l3392:
  2961                           
  2962                           ; BSR set to: 0
  2963  002776  0100               	movlb	0	; () banked
  2964  002778  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2965  00277A  0100               	movlb	0	; () banked
  2966  00277C  6F66               	movwf	??_putSTRINGU1& (0+255),b
  2967  00277E  6B67               	clrf	(??_putSTRINGU1+1)& (0+255),b
  2968  002780  0100               	movlb	0	; () banked
  2969  002782  5164               	movf	putSTRINGU1@total& (0+255),w,b
  2970  002784  0100               	movlb	0	; () banked
  2971  002786  5D66               	subwf	??_putSTRINGU1& (0+255),w,b
  2972  002788  0100               	movlb	0	; () banked
  2973  00278A  5165               	movf	(putSTRINGU1@total+1)& (0+255),w,b
  2974  00278C  0100               	movlb	0	; () banked
  2975  00278E  5967               	subwfb	(??_putSTRINGU1+1)& (0+255),w,b
  2976  002790  A0D8               	btfss	status,0,c
  2977  002792  D7CC               	goto	l3386
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;UART1.c: 23: }
  2981                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2982                           
  2983                           ; BSR set to: 0
  2984  002794  0E00               	movlw	0
  2985  002796  0100               	movlb	0	; () banked
  2986  002798  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2987  00279A  D019               	goto	l3402
  2988  00279C                     l3396:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;UART1.c: 26: putcTxU1(*dato++);
  2992  00279C  0100               	movlb	0	; () banked
  2993  00279E  C062  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2994  0027A2  0100               	movlb	0	; () banked
  2995  0027A4  C063  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2996  0027A8  6AF8               	clrf	tblptru,c
  2997  0027AA  0E07               	movlw	(high __ramtop+-1)
  2998  0027AC  64F7               	cpfsgt	tblptrh,c
  2999  0027AE  D003               	bra	u3187
  3000  0027B0  0008               	tblrd		*
  3001  0027B2  50F5               	movf	tablat,w,c
  3002  0027B4  D005               	bra	u3180
  3003  0027B6                     u3187:
  3004  0027B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3005  0027BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3006  0027BE  50EF               	movf	indf0,w,c
  3007  0027C0                     u3180:
  3008  0027C0  EC9B  F01A         	call	_putcTxU1
  3009  0027C4  0100               	movlb	0	; () banked
  3010  0027C6  4B62               	infsnz	putSTRINGU1@dato& (0+255),f,b
  3011  0027C8  2B63               	incf	(putSTRINGU1@dato+1)& (0+255),f,b
  3012                           
  3013                           ; BSR set to: 0
  3014  0027CA  0100               	movlb	0	; () banked
  3015  0027CC  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  3016  0027CE                     l3402:
  3017                           
  3018                           ; BSR set to: 0
  3019  0027CE  0100               	movlb	0	; () banked
  3020  0027D0  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  3021  0027D2  0100               	movlb	0	; () banked
  3022  0027D4  5D68               	subwf	putSTRINGU1@last& (0+255),w,b
  3023  0027D6  A0D8               	btfss	status,0,c
  3024                           
  3025                           ; BSR set to: 0
  3026                           
  3027                           ; BSR set to: 0
  3028  0027D8  0012               	return	
  3029  0027DA  D7E0               	goto	l3396
  3030  0027DC                     __end_of_putSTRINGU1:
  3031                           	opt stack 0
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           intcon2	equ	0xFF1
  3040                           intcon3	equ	0xFF0
  3041                           indf0	equ	0xFEF
  3042                           postinc0	equ	0xFEE
  3043                           fsr0h	equ	0xFEA
  3044                           fsr0l	equ	0xFE9
  3045                           wreg	equ	0xFE8
  3046                           postinc1	equ	0xFE6
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           postinc2	equ	0xFDE
  3050                           status	equ	0xFD8
  3051                           
  3052 ;; *************** function _putcTxU1 *****************
  3053 ;; Defined at:
  3054 ;;		line 12 in file "UART1.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  character       1    wreg     unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  character       1    1[BANK0 ] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;		None               void
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3068 ;;      Params:         0       0       0       0       0       0       0       0       0
  3069 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3071 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3072 ;;Total ram usage:        1 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    5
  3075 ;; This function calls:
  3076 ;;		_WriteUSART
  3077 ;; This function is called by:
  3078 ;;		_putSTRINGU1
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text12
  3083  003536                     __ptext12:
  3084                           	opt stack 0
  3085  003536                     _putcTxU1:
  3086                           	opt stack 21
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;incstack = 0
  3090                           ;putcTxU1@character stored from wreg
  3091  003536  0100               	movlb	0	; () banked
  3092  003538  6F61               	movwf	putcTxU1@character& (0+255),b
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;UART1.c: 14: WriteUSART(character);
  3096  00353A  0100               	movlb	0	; () banked
  3097  00353C  5161               	movf	putcTxU1@character& (0+255),w,b
  3098  00353E  EC88  F01A         	call	_WriteUSART
  3099  003542                     l247:
  3100  003542  B2AC               	btfsc	4012,1,c	;volatile
  3101  003544  0012               	return	
  3102  003546  D7FD               	goto	l247
  3103  003548                     __end_of_putcTxU1:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           intcon2	equ	0xFF1
  3113                           intcon3	equ	0xFF0
  3114                           indf0	equ	0xFEF
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           postinc1	equ	0xFE6
  3120                           postdec1	equ	0xFE5
  3121                           fsr1l	equ	0xFE1
  3122                           postinc2	equ	0xFDE
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _Pause_seg *****************
  3126 ;; Defined at:
  3127 ;;		line 18 in file "Retardos.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  x               1    wreg     unsigned char 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  x               1    5[BANK0 ] unsigned char 
  3132 ;;  i               1    6[BANK0 ] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;		None               void
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3142 ;;      Params:         0       0       0       0       0       0       0       0       0
  3143 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3145 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3146 ;;Total ram usage:        2 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    5
  3149 ;; This function calls:
  3150 ;;		_Pause_ms
  3151 ;; This function is called by:
  3152 ;;		_BT_Init
  3153 ;;		_Inicializa_Driveby
  3154 ;;		_EstadoBluetooth
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text13
  3159  002F64                     __ptext13:
  3160                           	opt stack 0
  3161  002F64                     _Pause_seg:
  3162                           	opt stack 24
  3163                           
  3164                           ;incstack = 0
  3165                           ;Pause_seg@x stored from wreg
  3166  002F64  0100               	movlb	0	; () banked
  3167  002F66  6F65               	movwf	Pause_seg@x& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;Retardos.c: 19: unsigned char i=0;
  3171  002F68  0E00               	movlw	0
  3172  002F6A  0100               	movlb	0	; () banked
  3173  002F6C  6F66               	movwf	Pause_seg@i& (0+255),b
  3174                           
  3175                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  3176  002F6E  0E00               	movlw	0
  3177  002F70  0100               	movlb	0	; () banked
  3178  002F72  6F66               	movwf	Pause_seg@i& (0+255),b
  3179  002F74  D022               	goto	l3782
  3180  002F76                     l3778:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  3184  002F76  0E00               	movlw	0
  3185  002F78  0100               	movlb	0	; () banked
  3186  002F7A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3187  002F7C  0EFA               	movlw	250
  3188  002F7E  0100               	movlb	0	; () banked
  3189  002F80  6F60               	movwf	Pause_ms@x& (0+255),b
  3190  002F82  EC54  F018         	call	_Pause_ms	;wreg free
  3191  002F86  0E00               	movlw	0
  3192  002F88  0100               	movlb	0	; () banked
  3193  002F8A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3194  002F8C  0EFA               	movlw	250
  3195  002F8E  0100               	movlb	0	; () banked
  3196  002F90  6F60               	movwf	Pause_ms@x& (0+255),b
  3197  002F92  EC54  F018         	call	_Pause_ms	;wreg free
  3198                           
  3199                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  3200  002F96  0E00               	movlw	0
  3201  002F98  0100               	movlb	0	; () banked
  3202  002F9A  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3203  002F9C  0EFA               	movlw	250
  3204  002F9E  0100               	movlb	0	; () banked
  3205  002FA0  6F60               	movwf	Pause_ms@x& (0+255),b
  3206  002FA2  EC54  F018         	call	_Pause_ms	;wreg free
  3207  002FA6  0E00               	movlw	0
  3208  002FA8  0100               	movlb	0	; () banked
  3209  002FAA  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3210  002FAC  0EFA               	movlw	250
  3211  002FAE  0100               	movlb	0	; () banked
  3212  002FB0  6F60               	movwf	Pause_ms@x& (0+255),b
  3213  002FB2  EC54  F018         	call	_Pause_ms	;wreg free
  3214  002FB6  0100               	movlb	0	; () banked
  3215  002FB8  2B66               	incf	Pause_seg@i& (0+255),f,b
  3216  002FBA                     l3782:
  3217                           
  3218                           ; BSR set to: 0
  3219  002FBA  0100               	movlb	0	; () banked
  3220  002FBC  5166               	movf	Pause_seg@i& (0+255),w,b
  3221  002FBE  0100               	movlb	0	; () banked
  3222  002FC0  5D65               	subwf	Pause_seg@x& (0+255),w,b
  3223  002FC2  A0D8               	btfss	status,0,c
  3224                           
  3225                           ; BSR set to: 0
  3226                           
  3227                           ; BSR set to: 0
  3228  002FC4  0012               	return	
  3229  002FC6  D7D7               	goto	l3778
  3230  002FC8                     __end_of_Pause_seg:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           intcon2	equ	0xFF1
  3240                           intcon3	equ	0xFF0
  3241                           indf0	equ	0xFEF
  3242                           postinc0	equ	0xFEE
  3243                           fsr0h	equ	0xFEA
  3244                           fsr0l	equ	0xFE9
  3245                           wreg	equ	0xFE8
  3246                           postinc1	equ	0xFE6
  3247                           postdec1	equ	0xFE5
  3248                           fsr1l	equ	0xFE1
  3249                           postinc2	equ	0xFDE
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _Pause_ms *****************
  3253 ;; Defined at:
  3254 ;;		line 11 in file "Retardos.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  x               2    0[BANK0 ] unsigned int 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  i               2    3[BANK0 ] unsigned int 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;		None               void
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3268 ;;      Params:         0       2       0       0       0       0       0       0       0
  3269 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3270 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3271 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3272 ;;Total ram usage:        5 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    4
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_Pause_seg
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text14
  3283  0030A8                     __ptext14:
  3284                           	opt stack 0
  3285  0030A8                     _Pause_ms:
  3286                           	opt stack 24
  3287                           
  3288                           ;Retardos.c: 12: unsigned int i=0;
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;incstack = 0
  3292  0030A8  0E00               	movlw	0
  3293  0030AA  0100               	movlb	0	; () banked
  3294  0030AC  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3295  0030AE  0E00               	movlw	0
  3296  0030B0  0100               	movlb	0	; () banked
  3297  0030B2  6F63               	movwf	Pause_ms@i& (0+255),b
  3298                           
  3299                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  3300  0030B4  0E00               	movlw	0
  3301  0030B6  0100               	movlb	0	; () banked
  3302  0030B8  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3303  0030BA  0E00               	movlw	0
  3304  0030BC  0100               	movlb	0	; () banked
  3305  0030BE  6F63               	movwf	Pause_ms@i& (0+255),b
  3306  0030C0  D00B               	goto	l226
  3307  0030C2                     l3406:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  3311  0030C2  0E03               	movlw	3
  3312  0030C4  0100               	movlb	0	; () banked
  3313  0030C6  6F62               	movwf	??_Pause_ms& (0+255),b
  3314  0030C8  0E98               	movlw	152
  3315  0030CA                     u5317:
  3316  0030CA  2EE8               	decfsz	wreg,f,c
  3317  0030CC  D7FE               	goto	u5317
  3318  0030CE  2F62               	decfsz	??_Pause_ms& (0+255),f,b
  3319  0030D0  D7FC               	goto	u5317
  3320  0030D2  0100               	movlb	0	; () banked
  3321  0030D4  4B63               	infsnz	Pause_ms@i& (0+255),f,b
  3322  0030D6  2B64               	incf	(Pause_ms@i+1)& (0+255),f,b
  3323  0030D8                     l226:
  3324                           
  3325                           ; BSR set to: 0
  3326  0030D8  0100               	movlb	0	; () banked
  3327  0030DA  5163               	movf	Pause_ms@i& (0+255),w,b
  3328  0030DC  0100               	movlb	0	; () banked
  3329  0030DE  5D60               	subwf	Pause_ms@x& (0+255),w,b
  3330  0030E0  0100               	movlb	0	; () banked
  3331  0030E2  5164               	movf	(Pause_ms@i+1)& (0+255),w,b
  3332  0030E4  0100               	movlb	0	; () banked
  3333  0030E6  5961               	subwfb	(Pause_ms@x+1)& (0+255),w,b
  3334  0030E8  A0D8               	btfss	status,0,c
  3335                           
  3336                           ; BSR set to: 0
  3337                           
  3338                           ; BSR set to: 0
  3339  0030EA  0012               	return	
  3340  0030EC  D7EA               	goto	l3406
  3341  0030EE                     __end_of_Pause_ms:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           intcon2	equ	0xFF1
  3351                           intcon3	equ	0xFF0
  3352                           indf0	equ	0xFEF
  3353                           postinc0	equ	0xFEE
  3354                           fsr0h	equ	0xFEA
  3355                           fsr0l	equ	0xFE9
  3356                           wreg	equ	0xFE8
  3357                           postinc1	equ	0xFE6
  3358                           postdec1	equ	0xFE5
  3359                           fsr1l	equ	0xFE1
  3360                           postinc2	equ	0xFDE
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _Comando_Tablet *****************
  3364 ;; Defined at:
  3365 ;;		line 128 in file "Funciones_Db.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  sensed          2  135[BANK0 ] int 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;		None               void
  3372 ;; Registers used:
  3373 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0
  3380 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3382 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3383 ;;Total ram usage:        2 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    9
  3386 ;; This function calls:
  3387 ;;		_Lcd_Clear
  3388 ;;		_Lcd_Set_Cursor
  3389 ;;		_Lcd_Write_Integer
  3390 ;;		_Lcd_Write_String
  3391 ;;		_PWM_DutyCycle1
  3392 ;;		_PWM_DutyCycle2
  3393 ;;		_clrBufferUSART
  3394 ;;		_getCNY70Value
  3395 ;;		_putcBluetoothInt
  3396 ;;		_putcBluetoothString
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text15
  3403  001B04                     __ptext15:
  3404                           	opt stack 0
  3405  001B04                     _Comando_Tablet:
  3406                           	opt stack 21
  3407                           
  3408                           ;Funciones_Db.c: 130: int sensed=0;
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;incstack = 0
  3412  001B04  0E00               	movlw	0
  3413  001B06  0100               	movlb	0	; () banked
  3414  001B08  6FE8               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  3415  001B0A  0E00               	movlw	0
  3416  001B0C  0100               	movlb	0	; () banked
  3417  001B0E  6FE7               	movwf	Comando_Tablet@sensed& (0+255),b
  3418                           
  3419                           ;Funciones_Db.c: 131: switch (BluetoothDato[1]) {
  3420  001B10  D092               	goto	l4638
  3421  001B12                     l4588:
  3422                           
  3423                           ;Funciones_Db.c: 133: Lcd_Clear();
  3424  001B12  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3425                           
  3426                           ;Funciones_Db.c: 134: Lcd_Set_Cursor(1, 1);
  3427  001B16  0E01               	movlw	1
  3428  001B18  0100               	movlb	0	; () banked
  3429  001B1A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3430  001B1C  0E01               	movlw	1
  3431  001B1E  ECDB  F016         	call	_Lcd_Set_Cursor
  3432                           
  3433                           ;Funciones_Db.c: 135: Lcd_Write_String("1");
  3434  001B22  0E7F               	movlw	high (STR_20+15)
  3435  001B24  0100               	movlb	0	; () banked
  3436  001B26  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3437  001B28  0E45               	movlw	low (STR_20+15)
  3438  001B2A  0100               	movlb	0	; () banked
  3439  001B2C  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3440  001B2E  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3441                           
  3442                           ;Funciones_Db.c: 136: break;
  3443  001B32  D093               	goto	l4640
  3444  001B34                     l4594:
  3445                           
  3446                           ;Funciones_Db.c: 138: Lcd_Clear();
  3447  001B34  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3448                           
  3449                           ;Funciones_Db.c: 139: Lcd_Set_Cursor(1, 1);
  3450  001B38  0E01               	movlw	1
  3451  001B3A  0100               	movlb	0	; () banked
  3452  001B3C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3453  001B3E  0E01               	movlw	1
  3454  001B40  ECDB  F016         	call	_Lcd_Set_Cursor
  3455                           
  3456                           ;Funciones_Db.c: 140: Lcd_Write_String("2");
  3457  001B44  0E7F               	movlw	high (STR_21+15)
  3458  001B46  0100               	movlb	0	; () banked
  3459  001B48  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3460  001B4A  0E56               	movlw	low (STR_21+15)
  3461  001B4C  0100               	movlb	0	; () banked
  3462  001B4E  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3463  001B50  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3464                           
  3465                           ;Funciones_Db.c: 141: break;
  3466  001B54  D082               	goto	l4640
  3467  001B56                     l4600:
  3468                           
  3469                           ;Funciones_Db.c: 144: Lcd_Clear();
  3470  001B56  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3471                           
  3472                           ;Funciones_Db.c: 145: Lcd_Set_Cursor(1, 1);
  3473  001B5A  0E01               	movlw	1
  3474  001B5C  0100               	movlb	0	; () banked
  3475  001B5E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3476  001B60  0E01               	movlw	1
  3477  001B62  ECDB  F016         	call	_Lcd_Set_Cursor
  3478                           
  3479                           ;Funciones_Db.c: 147: Lcd_Write_String("3");
  3480  001B66  0E7F               	movlw	high STR_14
  3481  001B68  0100               	movlb	0	; () banked
  3482  001B6A  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3483  001B6C  0EFD               	movlw	low STR_14
  3484  001B6E  0100               	movlb	0	; () banked
  3485  001B70  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3486  001B72  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3487                           
  3488                           ;Funciones_Db.c: 148: break;
  3489  001B76  D071               	goto	l4640
  3490  001B78                     l206:
  3491                           
  3492                           ; BSR set to: 1
  3493                           ;Funciones_Db.c: 153: PORTAbits.RA1 = ~ PORTAbits.RA1;
  3494  001B78  7280               	btg	3968,1,c	;volatile
  3495                           
  3496                           ; BSR set to: 1
  3497                           ;Funciones_Db.c: 154: sensed = getCNY70Value();
  3498  001B7A  EC6A  F012         	call	_getCNY70Value	;wreg free
  3499  001B7E  0100               	movlb	0	; () banked
  3500  001B80  C060  F0E7         	movff	?_getCNY70Value,Comando_Tablet@sensed
  3501  001B84  0100               	movlb	0	; () banked
  3502  001B86  C061  F0E8         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  3503                           
  3504                           ;Funciones_Db.c: 155: Lcd_Clear();
  3505  001B8A  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3506                           
  3507                           ;Funciones_Db.c: 156: Lcd_Set_Cursor(1,1);
  3508  001B8E  0E01               	movlw	1
  3509  001B90  0100               	movlb	0	; () banked
  3510  001B92  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3511  001B94  0E01               	movlw	1
  3512  001B96  ECDB  F016         	call	_Lcd_Set_Cursor
  3513                           
  3514                           ;Funciones_Db.c: 157: Lcd_Write_Integer(sensed);
  3515  001B9A  C0E7  F0CF         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  3516  001B9E  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  3517  001BA2  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3518                           
  3519                           ;Funciones_Db.c: 158: putcBluetoothInt(sensed);
  3520  001BA6  C0E7  F0CF         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  3521  001BAA  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  3522  001BAE  EC24  F015         	call	_putcBluetoothInt	;wreg free
  3523                           
  3524                           ;Funciones_Db.c: 159: putcBluetoothString("\n");
  3525  001BB2  0E7F               	movlw	high (STR_2+13)
  3526  001BB4  0100               	movlb	0	; () banked
  3527  001BB6  6F68               	movwf	(putcBluetoothString@a+1)& (0+255),b
  3528  001BB8  0E75               	movlw	low (STR_2+13)
  3529  001BBA  0100               	movlb	0	; () banked
  3530  001BBC  6F67               	movwf	putcBluetoothString@a& (0+255),b
  3531  001BBE  ECE0  F014         	call	_putcBluetoothString	;wreg free
  3532                           
  3533                           ;Funciones_Db.c: 160: break;
  3534  001BC2  D04B               	goto	l4640
  3535  001BC4                     l207:
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;Funciones_Db.c: 162: PORTAbits.RA0 = ~ PORTAbits.RA0;
  3539  001BC4  7080               	btg	3968,0,c	;volatile
  3540                           
  3541                           ; BSR set to: 1
  3542                           ;Funciones_Db.c: 163: Lcd_Clear();
  3543  001BC6  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3544                           
  3545                           ;Funciones_Db.c: 164: Lcd_Set_Cursor(1, 1);
  3546  001BCA  0E01               	movlw	1
  3547  001BCC  0100               	movlb	0	; () banked
  3548  001BCE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3549  001BD0  0E01               	movlw	1
  3550  001BD2  ECDB  F016         	call	_Lcd_Set_Cursor
  3551                           
  3552                           ;Funciones_Db.c: 165: Lcd_Write_Integer(BluetoothDato[3]);
  3553  001BD6  0101               	movlb	1	; () banked
  3554  001BD8  0100               	movlb	0	; () banked
  3555  001BDA  C12B  F0CF         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  3556  001BDE  0100               	movlb	0	; () banked
  3557  001BE0  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3558  001BE2  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3559                           
  3560                           ;Funciones_Db.c: 166: Lcd_Set_Cursor(2, 1);
  3561  001BE6  0E01               	movlw	1
  3562  001BE8  0100               	movlb	0	; () banked
  3563  001BEA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3564  001BEC  0E02               	movlw	2
  3565  001BEE  ECDB  F016         	call	_Lcd_Set_Cursor
  3566                           
  3567                           ;Funciones_Db.c: 167: Lcd_Write_Integer(BluetoothDato[4]);
  3568  001BF2  0101               	movlb	1	; () banked
  3569  001BF4  0100               	movlb	0	; () banked
  3570  001BF6  C12C  F0CF         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  3571  001BFA  0100               	movlb	0	; () banked
  3572  001BFC  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3573  001BFE  ECDE  F018         	call	_Lcd_Write_Integer	;wreg free
  3574                           
  3575                           ;Funciones_Db.c: 170: PWM_DutyCycle1(BluetoothDato[3]);
  3576  001C02  0101               	movlb	1	; () banked
  3577  001C04  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  3578  001C06  EC24  F016         	call	_PWM_DutyCycle1
  3579                           
  3580                           ;Funciones_Db.c: 171: PWM_DutyCycle2(BluetoothDato[4]);
  3581  001C0A  0101               	movlb	1	; () banked
  3582  001C0C  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  3583  001C0E  ECE6  F015         	call	_PWM_DutyCycle2
  3584                           
  3585                           ;Funciones_Db.c: 172: break;
  3586  001C12  D023               	goto	l4640
  3587  001C14                     l4630:
  3588                           
  3589                           ;Funciones_Db.c: 174: Lcd_Clear();
  3590  001C14  ECAB  F01A         	call	_Lcd_Clear	;wreg free
  3591                           
  3592                           ;Funciones_Db.c: 175: Lcd_Set_Cursor(1, 1);
  3593  001C18  0E01               	movlw	1
  3594  001C1A  0100               	movlb	0	; () banked
  3595  001C1C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3596  001C1E  0E01               	movlw	1
  3597  001C20  ECDB  F016         	call	_Lcd_Set_Cursor
  3598                           
  3599                           ;Funciones_Db.c: 176: Lcd_Write_String("Default");
  3600  001C24  0E7F               	movlw	high STR_16
  3601  001C26  0100               	movlb	0	; () banked
  3602  001C28  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3603  001C2A  0EE7               	movlw	low STR_16
  3604  001C2C  0100               	movlb	0	; () banked
  3605  001C2E  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3606  001C30  EC94  F014         	call	_Lcd_Write_String	;wreg free
  3607                           
  3608                           ;Funciones_Db.c: 177: break;
  3609  001C34  D012               	goto	l4640
  3610  001C36                     l4638:
  3611  001C36  0101               	movlb	1	; () banked
  3612  001C38  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  3613                           
  3614                           ; Switch size 1, requested type "space"
  3615                           ; Number of cases is 5, Range of values is 1 to 5
  3616                           ; switch strategies available:
  3617                           ; Name         Instructions Cycles
  3618                           ; simple_byte           16     9 (average)
  3619                           ;	Chosen strategy is simple_byte
  3620  001C3A  0A01               	xorlw	1	; case 1
  3621  001C3C  B4D8               	btfsc	status,2,c
  3622  001C3E  D769               	goto	l4588
  3623  001C40  0A03               	xorlw	3	; case 2
  3624  001C42  B4D8               	btfsc	status,2,c
  3625  001C44  D777               	goto	l4594
  3626  001C46  0A01               	xorlw	1	; case 3
  3627  001C48  B4D8               	btfsc	status,2,c
  3628  001C4A  D785               	goto	l4600
  3629  001C4C  0A07               	xorlw	7	; case 4
  3630  001C4E  B4D8               	btfsc	status,2,c
  3631  001C50  D793               	goto	l206
  3632  001C52  0A01               	xorlw	1	; case 5
  3633  001C54  B4D8               	btfsc	status,2,c
  3634  001C56  D7B6               	goto	l207
  3635  001C58  D7DD               	goto	l4630
  3636  001C5A                     l4640:
  3637                           
  3638                           ;Funciones_Db.c: 179: clrBufferUSART();
  3639  001C5A  ECBC  F018         	call	_clrBufferUSART	;wreg free
  3640                           
  3641                           ;Funciones_Db.c: 180: return;
  3642  001C5E  0012               	return	
  3643  001C60                     __end_of_Comando_Tablet:
  3644                           	opt stack 0
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           intcon2	equ	0xFF1
  3653                           intcon3	equ	0xFF0
  3654                           indf0	equ	0xFEF
  3655                           postinc0	equ	0xFEE
  3656                           fsr0h	equ	0xFEA
  3657                           fsr0l	equ	0xFE9
  3658                           wreg	equ	0xFE8
  3659                           postinc1	equ	0xFE6
  3660                           postdec1	equ	0xFE5
  3661                           fsr1l	equ	0xFE1
  3662                           postinc2	equ	0xFDE
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _putcBluetoothString *****************
  3666 ;; Defined at:
  3667 ;;		line 90 in file "Bluetooth.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  a               2    7[BANK0 ] PTR unsigned char 
  3670 ;;		 -> STR_15(2), 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  i               2   11[BANK0 ] int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;		None               void
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3682 ;;      Params:         0       2       0       0       0       0       0       0       0
  3683 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3684 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3685 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3686 ;;Total ram usage:        6 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    6
  3689 ;; This function calls:
  3690 ;;		_UART1_Init
  3691 ;;		_WriteUSART
  3692 ;; This function is called by:
  3693 ;;		_Comando_Tablet
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text16
  3698  0029C0                     __ptext16:
  3699                           	opt stack 0
  3700  0029C0                     _putcBluetoothString:
  3701                           	opt stack 23
  3702                           
  3703                           ;Bluetooth.c: 92: int i;
  3704                           ;Bluetooth.c: 93: UART1_Init(51);
  3705                           
  3706                           ;incstack = 0
  3707  0029C0  0E33               	movlw	51
  3708  0029C2  EC73  F01A         	call	_UART1_Init
  3709                           
  3710                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  3711  0029C6  0E00               	movlw	0
  3712  0029C8  0100               	movlb	0	; () banked
  3713  0029CA  6F6C               	movwf	(putcBluetoothString@i+1)& (0+255),b
  3714  0029CC  0E00               	movlw	0
  3715  0029CE  0100               	movlb	0	; () banked
  3716  0029D0  6F6B               	movwf	putcBluetoothString@i& (0+255),b
  3717  0029D2  D01C               	goto	l4148
  3718  0029D4                     l4144:
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  3722  0029D4  0100               	movlb	0	; () banked
  3723  0029D6  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3724  0029DA  0100               	movlb	0	; () banked
  3725  0029DC  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3726  0029E0  0100               	movlb	0	; () banked
  3727  0029E2  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3728  0029E4  0100               	movlb	0	; () banked
  3729  0029E6  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3730  0029E8  0100               	movlb	0	; () banked
  3731  0029EA  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3732  0029EC  0100               	movlb	0	; () banked
  3733  0029EE  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3734  0029F0  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3735  0029F4  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3736  0029F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3737  0029F8  6AF8               	clrf	tblptru,c
  3738  0029FA                     	endif
  3739  0029FA                     	if	0	;tblptru may be non-zero
  3740  0029FA                     	endif
  3741  0029FA  0008               	tblrd		*
  3742  0029FC  50F5               	movf	tablat,w,c
  3743  0029FE  EC88  F01A         	call	_WriteUSART
  3744  002A02                     l59:
  3745  002A02  A2AC               	btfss	4012,1,c	;volatile
  3746  002A04  D7FE               	goto	l59
  3747  002A06  0100               	movlb	0	; () banked
  3748  002A08  4B6B               	infsnz	putcBluetoothString@i& (0+255),f,b
  3749  002A0A  2B6C               	incf	(putcBluetoothString@i+1)& (0+255),f,b
  3750  002A0C                     l4148:
  3751                           
  3752                           ; BSR set to: 0
  3753  002A0C  0100               	movlb	0	; () banked
  3754  002A0E  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3755  002A12  0100               	movlb	0	; () banked
  3756  002A14  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3757  002A18  0100               	movlb	0	; () banked
  3758  002A1A  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3759  002A1C  0100               	movlb	0	; () banked
  3760  002A1E  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3761  002A20  0100               	movlb	0	; () banked
  3762  002A22  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3763  002A24  0100               	movlb	0	; () banked
  3764  002A26  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3765  002A28  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3766  002A2C  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3767  002A30                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3768  002A30  6AF8               	clrf	tblptru,c
  3769  002A32                     	endif
  3770  002A32                     	if	0	;tblptru may be non-zero
  3771  002A32                     	endif
  3772  002A32  0008               	tblrd		*
  3773  002A34  50F5               	movf	tablat,w,c
  3774  002A36  0900               	iorlw	0
  3775  002A38  A4D8               	btfss	status,2,c
  3776  002A3A  D7CC               	goto	l4144
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;Bluetooth.c: 98: }
  3780                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3781                           
  3782                           ; BSR set to: 0
  3783  002A3C  0E4F               	movlw	79
  3784  002A3E  16AB               	andwf	4011,f,c	;volatile
  3785                           
  3786                           ; BSR set to: 0
  3787  002A40  9AAC               	bcf	4012,5,c	;volatile
  3788  002A42  0ECF               	movlw	207
  3789  002A44  169D               	andwf	3997,f,c	;volatile
  3790                           
  3791                           ; BSR set to: 0
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;Bluetooth.c: 100: return;
  3795  002A46  0012               	return	
  3796  002A48                     __end_of_putcBluetoothString:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           prodh	equ	0xFF4
  3803                           prodl	equ	0xFF3
  3804                           intcon	equ	0xFF2
  3805                           intcon2	equ	0xFF1
  3806                           intcon3	equ	0xFF0
  3807                           indf0	equ	0xFEF
  3808                           postinc0	equ	0xFEE
  3809                           fsr0h	equ	0xFEA
  3810                           fsr0l	equ	0xFE9
  3811                           wreg	equ	0xFE8
  3812                           postinc1	equ	0xFE6
  3813                           postdec1	equ	0xFE5
  3814                           fsr1l	equ	0xFE1
  3815                           postinc2	equ	0xFDE
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _putcBluetoothInt *****************
  3819 ;; Defined at:
  3820 ;;		line 102 in file "Bluetooth.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  a               2  111[BANK0 ] int 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  s              20  113[BANK0 ] unsigned char [20]
  3825 ;;  i               2  133[BANK0 ] int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3835 ;;      Params:         0       2       0       0       0       0       0       0       0
  3836 ;;      Locals:         0      22       0       0       0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3838 ;;      Totals:         0      24       0       0       0       0       0       0       0
  3839 ;;Total ram usage:       24 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    8
  3842 ;; This function calls:
  3843 ;;		_UART1_Init
  3844 ;;		_WriteUSART
  3845 ;;		_sprintf
  3846 ;; This function is called by:
  3847 ;;		_Comando_Tablet
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text17
  3852  002A48                     __ptext17:
  3853                           	opt stack 0
  3854  002A48                     _putcBluetoothInt:
  3855                           	opt stack 21
  3856                           
  3857                           ;Bluetooth.c: 104: int i;
  3858                           ;Bluetooth.c: 105: unsigned char s[20];
  3859                           ;Bluetooth.c: 106: UART1_Init(51);
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;incstack = 0
  3863  002A48  0E33               	movlw	51
  3864  002A4A  EC73  F01A         	call	_UART1_Init
  3865                           
  3866                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  3867  002A4E  0100               	movlb	0	; () banked
  3868  002A50  0E00               	movlw	high putcBluetoothInt@s
  3869  002A52  0100               	movlb	0	; () banked
  3870  002A54  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  3871  002A56  0100               	movlb	0	; () banked
  3872  002A58  0ED1               	movlw	low putcBluetoothInt@s
  3873  002A5A  0100               	movlb	0	; () banked
  3874  002A5C  6F9F               	movwf	sprintf@sp& (0+255),b
  3875  002A5E  0E7F               	movlw	high (STR_18+10)
  3876  002A60  0100               	movlb	0	; () banked
  3877  002A62  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  3878  002A64  0EB9               	movlw	low (STR_18+10)
  3879  002A66  0100               	movlb	0	; () banked
  3880  002A68  6FA1               	movwf	sprintf@f& (0+255),b
  3881  002A6A  C0CF  F0A3         	movff	putcBluetoothInt@a,?_sprintf+4
  3882  002A6E  C0D0  F0A4         	movff	putcBluetoothInt@a+1,?_sprintf+5
  3883  002A72  EC0E  F000         	call	_sprintf	;wreg free
  3884                           
  3885                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  3886  002A76  0E00               	movlw	0
  3887  002A78  0100               	movlb	0	; () banked
  3888  002A7A  6FE6               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  3889  002A7C  0E00               	movlw	0
  3890  002A7E  0100               	movlb	0	; () banked
  3891  002A80  6FE5               	movwf	putcBluetoothInt@i& (0+255),b
  3892  002A82  D012               	goto	l4166
  3893  002A84                     l4162:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  3897  002A84  0100               	movlb	0	; () banked
  3898  002A86  0ED1               	movlw	low putcBluetoothInt@s
  3899  002A88  0100               	movlb	0	; () banked
  3900  002A8A  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3901  002A8C  6ED9               	movwf	fsr2l,c
  3902  002A8E  0100               	movlb	0	; () banked
  3903  002A90  0E00               	movlw	high putcBluetoothInt@s
  3904  002A92  0100               	movlb	0	; () banked
  3905  002A94  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3906  002A96  6EDA               	movwf	fsr2h,c
  3907  002A98  50DF               	movf	indf2,w,c
  3908  002A9A  EC88  F01A         	call	_WriteUSART
  3909  002A9E                     l68:
  3910  002A9E  A2AC               	btfss	4012,1,c	;volatile
  3911  002AA0  D7FE               	goto	l68
  3912  002AA2  0100               	movlb	0	; () banked
  3913  002AA4  4BE5               	infsnz	putcBluetoothInt@i& (0+255),f,b
  3914  002AA6  2BE6               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  3915  002AA8                     l4166:
  3916                           
  3917                           ; BSR set to: 0
  3918  002AA8  0100               	movlb	0	; () banked
  3919  002AAA  0ED1               	movlw	low putcBluetoothInt@s
  3920  002AAC  0100               	movlb	0	; () banked
  3921  002AAE  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3922  002AB0  6ED9               	movwf	fsr2l,c
  3923  002AB2  0100               	movlb	0	; () banked
  3924  002AB4  0E00               	movlw	high putcBluetoothInt@s
  3925  002AB6  0100               	movlb	0	; () banked
  3926  002AB8  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3927  002ABA  6EDA               	movwf	fsr2h,c
  3928  002ABC  50DF               	movf	indf2,w,c
  3929  002ABE  A4D8               	btfss	status,2,c
  3930  002AC0  D7E1               	goto	l4162
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;Bluetooth.c: 112: }
  3934                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3935                           
  3936                           ; BSR set to: 0
  3937  002AC2  0E4F               	movlw	79
  3938  002AC4  16AB               	andwf	4011,f,c	;volatile
  3939                           
  3940                           ; BSR set to: 0
  3941  002AC6  9AAC               	bcf	4012,5,c	;volatile
  3942  002AC8  0ECF               	movlw	207
  3943  002ACA  169D               	andwf	3997,f,c	;volatile
  3944                           
  3945                           ; BSR set to: 0
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;Bluetooth.c: 114: return;
  3949  002ACC  0012               	return	
  3950  002ACE                     __end_of_putcBluetoothInt:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           intcon3	equ	0xFF0
  3961                           indf0	equ	0xFEF
  3962                           postinc0	equ	0xFEE
  3963                           fsr0h	equ	0xFEA
  3964                           fsr0l	equ	0xFE9
  3965                           wreg	equ	0xFE8
  3966                           postinc1	equ	0xFE6
  3967                           postdec1	equ	0xFE5
  3968                           fsr1l	equ	0xFE1
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _WriteUSART *****************
  3976 ;; Defined at:
  3977 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  data            1    wreg     unsigned char 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  data            1    0[BANK0 ] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3991 ;;      Params:         0       0       0       0       0       0       0       0       0
  3992 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3994 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3995 ;;Total ram usage:        1 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    4
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_putcBluetoothString
  4002 ;;		_putcBluetoothInt
  4003 ;;		_putcTxU1
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text18
  4008  003510                     __ptext18:
  4009                           	opt stack 0
  4010  003510                     _WriteUSART:
  4011                           	opt stack 21
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;incstack = 0
  4015                           ;WriteUSART@data stored from wreg
  4016  003510  0100               	movlb	0	; () banked
  4017  003512  6F60               	movwf	WriteUSART@data& (0+255),b
  4018                           
  4019                           ; BSR set to: 0
  4020  003514  ACAC               	btfss	4012,6,c	;volatile
  4021  003516  D003               	goto	l3126
  4022                           
  4023                           ; BSR set to: 0
  4024  003518  90AC               	bcf	4012,0,c	;volatile
  4025  00351A  B254               	btfsc	_USART_Status,1,c
  4026                           
  4027                           ; BSR set to: 0
  4028  00351C  80AC               	bsf	4012,0,c	;volatile
  4029  00351E                     l3126:
  4030                           
  4031                           ; BSR set to: 0
  4032  00351E  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
  4033                           
  4034                           ; BSR set to: 0
  4035  003522  0012               	return	
  4036  003524                     __end_of_WriteUSART:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           intcon2	equ	0xFF1
  4046                           intcon3	equ	0xFF0
  4047                           indf0	equ	0xFEF
  4048                           postinc0	equ	0xFEE
  4049                           fsr0h	equ	0xFEA
  4050                           fsr0l	equ	0xFE9
  4051                           wreg	equ	0xFE8
  4052                           postinc1	equ	0xFE6
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function _UART1_Init *****************
  4062 ;; Defined at:
  4063 ;;		line 5 in file "UART1.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  bdr             1    wreg     unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  bdr             1    6[BANK0 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4077 ;;      Params:         0       0       0       0       0       0       0       0       0
  4078 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4080 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4081 ;;Total ram usage:        1 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    5
  4084 ;; This function calls:
  4085 ;;		_OpenUSART
  4086 ;; This function is called by:
  4087 ;;		_BT_Init
  4088 ;;		_putcBluetoothString
  4089 ;;		_putcBluetoothInt
  4090 ;;		_main
  4091 ;;		_EstadoBluetooth
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           	psect	text19
  4096  0034E6                     __ptext19:
  4097                           	opt stack 0
  4098  0034E6                     _UART1_Init:
  4099                           	opt stack 25
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;incstack = 0
  4103                           ;UART1_Init@bdr stored from wreg
  4104  0034E6  0100               	movlb	0	; () banked
  4105  0034E8  6F66               	movwf	UART1_Init@bdr& (0+255),b
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  4109  0034EA  0100               	movlb	0	; () banked
  4110  0034EC  C066  F060         	movff	UART1_Init@bdr,OpenUSART@spbrg
  4111  0034F0  0100               	movlb	0	; () banked
  4112  0034F2  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
  4113  0034F4  0E7C               	movlw	124
  4114  0034F6  EC67  F015         	call	_OpenUSART
  4115  0034FA  0012               	return	
  4116  0034FC                     __end_of_UART1_Init:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           intcon2	equ	0xFF1
  4126                           intcon3	equ	0xFF0
  4127                           indf0	equ	0xFEF
  4128                           postinc0	equ	0xFEE
  4129                           fsr0h	equ	0xFEA
  4130                           fsr0l	equ	0xFE9
  4131                           wreg	equ	0xFE8
  4132                           postinc1	equ	0xFE6
  4133                           postdec1	equ	0xFE5
  4134                           fsr1l	equ	0xFE1
  4135                           indf2	equ	0xFDF
  4136                           postinc2	equ	0xFDE
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _OpenUSART *****************
  4142 ;; Defined at:
  4143 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  config          1    wreg     unsigned char 
  4146 ;;  spbrg           2    0[BANK0 ] unsigned int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  config          1    5[BANK0 ] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, status,2
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4158 ;;      Params:         0       2       0       0       0       0       0       0       0
  4159 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4160 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4161 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4162 ;;Total ram usage:        6 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    4
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_UART1_Init
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text20
  4173  002ACE                     __ptext20:
  4174                           	opt stack 0
  4175  002ACE                     _OpenUSART:
  4176                           	opt stack 25
  4177                           
  4178                           ;incstack = 0
  4179                           ;OpenUSART@config stored from wreg
  4180  002ACE  0100               	movlb	0	; () banked
  4181  002AD0  6F65               	movwf	OpenUSART@config& (0+255),b
  4182                           
  4183                           ; BSR set to: 0
  4184  002AD2  0E00               	movlw	0
  4185  002AD4  6EAC               	movwf	4012,c	;volatile
  4186  002AD6  0E00               	movlw	0
  4187  002AD8  6EAB               	movwf	4011,c	;volatile
  4188                           
  4189                           ; BSR set to: 0
  4190  002ADA  0100               	movlb	0	; () banked
  4191  002ADC  B165               	btfsc	OpenUSART@config& (0+255),0,b
  4192                           
  4193                           ; BSR set to: 0
  4194  002ADE  88AC               	bsf	4012,4,c	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197                           
  4198                           ; BSR set to: 0
  4199  002AE0  0100               	movlb	0	; () banked
  4200  002AE2  A365               	btfss	OpenUSART@config& (0+255),1,b
  4201  002AE4  D002               	goto	l3420
  4202                           
  4203                           ; BSR set to: 0
  4204  002AE6  8CAC               	bsf	4012,6,c	;volatile
  4205  002AE8  8CAB               	bsf	4011,6,c	;volatile
  4206  002AEA                     l3420:
  4207                           
  4208                           ; BSR set to: 0
  4209  002AEA  0100               	movlb	0	; () banked
  4210  002AEC  B565               	btfsc	OpenUSART@config& (0+255),2,b
  4211                           
  4212                           ; BSR set to: 0
  4213  002AEE  8EAC               	bsf	4012,7,c	;volatile
  4214                           
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218  002AF0  0100               	movlb	0	; () banked
  4219  002AF2  A765               	btfss	OpenUSART@config& (0+255),3,b
  4220  002AF4  D002               	goto	l645
  4221                           
  4222                           ; BSR set to: 0
  4223  002AF6  88AB               	bsf	4011,4,c	;volatile
  4224  002AF8  D001               	goto	l3428
  4225  002AFA                     l645:
  4226                           
  4227                           ; BSR set to: 0
  4228  002AFA  8AAB               	bsf	4011,5,c	;volatile
  4229  002AFC                     l3428:
  4230                           
  4231                           ; BSR set to: 0
  4232  002AFC  0100               	movlb	0	; () banked
  4233  002AFE  B965               	btfsc	OpenUSART@config& (0+255),4,b
  4234                           
  4235                           ; BSR set to: 0
  4236  002B00  84AC               	bsf	4012,2,c	;volatile
  4237                           
  4238                           ; BSR set to: 0
  4239  002B02  989E               	bcf	3998,4,c	;volatile
  4240                           
  4241                           ; BSR set to: 0
  4242  002B04  0100               	movlb	0	; () banked
  4243  002B06  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  4244                           
  4245                           ; BSR set to: 0
  4246  002B08  86AB               	bsf	4011,3,c	;volatile
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251  002B0A  0100               	movlb	0	; () banked
  4252  002B0C  AD65               	btfss	OpenUSART@config& (0+255),6,b
  4253  002B0E  D002               	goto	l649
  4254                           
  4255                           ; BSR set to: 0
  4256  002B10  8A9D               	bsf	3997,5,c	;volatile
  4257  002B12  D001               	goto	l650
  4258  002B14                     l649:
  4259                           
  4260                           ; BSR set to: 0
  4261  002B14  9A9D               	bcf	3997,5,c	;volatile
  4262  002B16                     l650:
  4263                           
  4264                           ; BSR set to: 0
  4265  002B16  9A9E               	bcf	3998,5,c	;volatile
  4266                           
  4267                           ; BSR set to: 0
  4268  002B18  0100               	movlb	0	; () banked
  4269  002B1A  AF65               	btfss	OpenUSART@config& (0+255),7,b
  4270  002B1C  D002               	goto	l651
  4271                           
  4272                           ; BSR set to: 0
  4273  002B1E  889D               	bsf	3997,4,c	;volatile
  4274  002B20  D001               	goto	l652
  4275  002B22                     l651:
  4276                           
  4277                           ; BSR set to: 0
  4278  002B22  989D               	bcf	3997,4,c	;volatile
  4279  002B24                     l652:
  4280                           
  4281                           ; BSR set to: 0
  4282  002B24  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4283                           
  4284                           ; BSR set to: 0
  4285  002B28  0100               	movlb	0	; () banked
  4286  002B2A  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  4287  002B2E  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  4288  002B32  0100               	movlb	0	; () banked
  4289  002B34  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  4290  002B36  0100               	movlb	0	; () banked
  4291  002B38  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  4292  002B3A  6EB0               	movwf	4016,c	;volatile
  4293                           
  4294                           ; BSR set to: 0
  4295  002B3C  8AAC               	bsf	4012,5,c	;volatile
  4296                           
  4297                           ; BSR set to: 0
  4298  002B3E  8EAB               	bsf	4011,7,c	;volatile
  4299                           
  4300                           ; BSR set to: 0
  4301  002B40  9C94               	bcf	3988,6,c	;volatile
  4302                           
  4303                           ; BSR set to: 0
  4304  002B42  8E94               	bsf	3988,7,c	;volatile
  4305                           
  4306                           ; BSR set to: 0
  4307  002B44  B8AC               	btfsc	4012,4,c	;volatile
  4308                           
  4309                           ; BSR set to: 0
  4310  002B46  BEAC               	btfsc	4012,7,c	;volatile
  4311  002B48  D001               	goto	l654
  4312                           
  4313                           ; BSR set to: 0
  4314  002B4A  8C94               	bsf	3988,6,c	;volatile
  4315  002B4C                     l654:
  4316                           
  4317                           ; BSR set to: 0
  4318  002B4C  0012               	return	
  4319  002B4E                     __end_of_OpenUSART:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           intcon2	equ	0xFF1
  4329                           intcon3	equ	0xFF0
  4330                           indf0	equ	0xFEF
  4331                           postinc0	equ	0xFEE
  4332                           fsr0h	equ	0xFEA
  4333                           fsr0l	equ	0xFE9
  4334                           wreg	equ	0xFE8
  4335                           postinc1	equ	0xFE6
  4336                           postdec1	equ	0xFE5
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           fsr2h	equ	0xFDA
  4341                           fsr2l	equ	0xFD9
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function _getCNY70Value *****************
  4345 ;; Defined at:
  4346 ;;		line 3 in file "cny70.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  2    0[BANK0 ] int 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4360 ;;      Params:         0       2       0       0       0       0       0       0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4363 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4364 ;;Total ram usage:        2 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    4
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_Comando_Tablet
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text21
  4375  0024D4                     __ptext21:
  4376                           	opt stack 0
  4377  0024D4                     _getCNY70Value:
  4378                           	opt stack 25
  4379                           
  4380                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;incstack = 0
  4384  0024D4  B081               	btfsc	3969,0,c	;volatile
  4385  0024D6  A281               	btfss	3969,1,c	;volatile
  4386  0024D8  D005               	goto	l468
  4387  0024DA  A481               	btfss	3969,2,c	;volatile
  4388  0024DC  A681               	btfss	3969,3,c	;volatile
  4389  0024DE  D002               	goto	l468
  4390  0024E0  B881               	btfsc	3969,4,c	;volatile
  4391  0024E2  D054               	goto	l4350
  4392  0024E4                     l468:
  4393                           
  4394                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4395  0024E4  B081               	btfsc	3969,0,c	;volatile
  4396  0024E6  B281               	btfsc	3969,1,c	;volatile
  4397  0024E8  D005               	goto	l471
  4398  0024EA  B481               	btfsc	3969,2,c	;volatile
  4399  0024EC  A681               	btfss	3969,3,c	;volatile
  4400  0024EE  D002               	goto	l471
  4401  0024F0  B881               	btfsc	3969,4,c	;volatile
  4402  0024F2  D03A               	goto	u4730
  4403  0024F4                     l471:
  4404                           
  4405                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4406  0024F4  A081               	btfss	3969,0,c	;volatile
  4407  0024F6  A281               	btfss	3969,1,c	;volatile
  4408  0024F8  D00A               	goto	l473
  4409  0024FA  B481               	btfsc	3969,2,c	;volatile
  4410  0024FC  A681               	btfss	3969,3,c	;volatile
  4411  0024FE  D007               	goto	l473
  4412  002500  A881               	btfss	3969,4,c	;volatile
  4413  002502  D005               	goto	l473
  4414  002504                     
  4415                           ;cny70.c: 10: return -2;
  4416  002504  0EFF               	movlw	255
  4417  002506  0100               	movlb	0	; () banked
  4418  002508  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4419  00250A  0EFE               	movlw	254
  4420  00250C  D043               	goto	L5
  4421  00250E                     l473:
  4422                           
  4423                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4424  00250E  B081               	btfsc	3969,0,c	;volatile
  4425  002510  A281               	btfss	3969,1,c	;volatile
  4426  002512  D005               	goto	l475
  4427  002514  B481               	btfsc	3969,2,c	;volatile
  4428  002516  B681               	btfsc	3969,3,c	;volatile
  4429  002518  D002               	goto	l475
  4430  00251A  B881               	btfsc	3969,4,c	;volatile
  4431  00251C  D032               	goto	u4780
  4432  00251E                     l475:
  4433                           
  4434                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  4435  00251E  B081               	btfsc	3969,0,c	;volatile
  4436  002520  A281               	btfss	3969,1,c	;volatile
  4437  002522  D005               	goto	l477
  4438  002524  B481               	btfsc	3969,2,c	;volatile
  4439  002526  A681               	btfss	3969,3,c	;volatile
  4440  002528  D002               	goto	l477
  4441  00252A  A881               	btfss	3969,4,c	;volatile
  4442  00252C  D008               	goto	u4630
  4443  00252E                     l477:
  4444                           
  4445                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  4446  00252E  B081               	btfsc	3969,0,c	;volatile
  4447  002530  A281               	btfss	3969,1,c	;volatile
  4448  002532  D00A               	goto	l479
  4449  002534  B481               	btfsc	3969,2,c	;volatile
  4450  002536  B681               	btfsc	3969,3,c	;volatile
  4451  002538  D007               	goto	l479
  4452  00253A  B881               	btfsc	3969,4,c	;volatile
  4453  00253C  D005               	goto	l479
  4454  00253E                     u4630:
  4455                           
  4456                           ;cny70.c: 16: return 2;
  4457  00253E  0E00               	movlw	0
  4458  002540  0100               	movlb	0	; () banked
  4459  002542  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4460  002544  0E02               	movlw	2
  4461  002546  D026               	goto	L5
  4462  002548                     l479:
  4463                           
  4464                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4465  002548  A081               	btfss	3969,0,c	;volatile
  4466  00254A  B281               	btfsc	3969,1,c	;volatile
  4467  00254C  D005               	goto	l481
  4468  00254E  B481               	btfsc	3969,2,c	;volatile
  4469  002550  A681               	btfss	3969,3,c	;volatile
  4470  002552  D002               	goto	l481
  4471  002554  B881               	btfsc	3969,4,c	;volatile
  4472  002556  D7D6               	goto	L6
  4473  002558                     l481:
  4474                           
  4475                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4476  002558  B081               	btfsc	3969,0,c	;volatile
  4477  00255A  B281               	btfsc	3969,1,c	;volatile
  4478  00255C  D00A               	goto	l483
  4479  00255E  A481               	btfss	3969,2,c	;volatile
  4480  002560  A681               	btfss	3969,3,c	;volatile
  4481  002562  D007               	goto	l483
  4482  002564  A881               	btfss	3969,4,c	;volatile
  4483  002566  D005               	goto	l483
  4484  002568                     u4730:
  4485                           
  4486                           ;cny70.c: 20: return -1;
  4487  002568  0100               	movlb	0	; () banked
  4488  00256A  6960               	setf	?_getCNY70Value& (0+255),b
  4489  00256C  0100               	movlb	0	; () banked
  4490  00256E  6961               	setf	(?_getCNY70Value+1)& (0+255),b
  4491  002570  D013               	goto	l469
  4492  002572                     l483:
  4493                           
  4494                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4495  002572  B081               	btfsc	3969,0,c	;volatile
  4496  002574  A281               	btfss	3969,1,c	;volatile
  4497  002576  D00A               	goto	l4350
  4498  002578  A481               	btfss	3969,2,c	;volatile
  4499  00257A  B681               	btfsc	3969,3,c	;volatile
  4500  00257C  D007               	goto	l4350
  4501  00257E  A881               	btfss	3969,4,c	;volatile
  4502  002580  D005               	goto	l4350
  4503  002582                     u4780:
  4504                           
  4505                           ;cny70.c: 22: return 1;
  4506  002582  0E00               	movlw	0
  4507  002584  0100               	movlb	0	; () banked
  4508  002586  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4509  002588  0E01               	movlw	1
  4510  00258A  D004               	goto	L5
  4511  00258C                     l4350:
  4512                           
  4513                           ;cny70.c: 23: else
  4514                           ;cny70.c: 24: return 0;
  4515  00258C  0E00               	movlw	0
  4516  00258E  0100               	movlb	0	; () banked
  4517  002590  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4518  002592  0E00               	movlw	0
  4519  002594                     L5:
  4520  002594  0100               	movlb	0	; () banked
  4521  002596  6F60               	movwf	?_getCNY70Value& (0+255),b
  4522  002598                     l469:
  4523                           
  4524                           ; BSR set to: 0
  4525  002598  0012               	return	
  4526  00259A                     __end_of_getCNY70Value:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon2	equ	0xFF1
  4536                           intcon3	equ	0xFF0
  4537                           indf0	equ	0xFEF
  4538                           postinc0	equ	0xFEE
  4539                           fsr0h	equ	0xFEA
  4540                           fsr0l	equ	0xFE9
  4541                           wreg	equ	0xFE8
  4542                           postinc1	equ	0xFE6
  4543                           postdec1	equ	0xFE5
  4544                           fsr1l	equ	0xFE1
  4545                           indf2	equ	0xFDF
  4546                           postinc2	equ	0xFDE
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _clrBufferUSART *****************
  4552 ;; Defined at:
  4553 ;;		line 68 in file "Bluetooth.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;		None
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  i               2    0[BANK0 ] int 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0
  4568 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4570 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4571 ;;Total ram usage:        2 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    4
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_Inicializa_Driveby
  4578 ;;		_Comando_Tablet
  4579 ;;		_main
  4580 ;;		_CheckTX
  4581 ;;		_EstadoBluetooth
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text22
  4586  003178                     __ptext22:
  4587                           	opt stack 0
  4588  003178                     _clrBufferUSART:
  4589                           	opt stack 26
  4590                           
  4591                           ;Bluetooth.c: 69: int i;
  4592                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;incstack = 0
  4596  003178  0E00               	movlw	0
  4597  00317A  0100               	movlb	0	; () banked
  4598  00317C  6F61               	movwf	(clrBufferUSART@i+1)& (0+255),b
  4599  00317E  0E00               	movlw	0
  4600  003180  0100               	movlb	0	; () banked
  4601  003182  6F60               	movwf	clrBufferUSART@i& (0+255),b
  4602  003184                     
  4603                           ; BSR set to: 0
  4604  003184  0100               	movlb	0	; () banked
  4605  003186  5161               	movf	(clrBufferUSART@i+1)& (0+255),w,b
  4606  003188  0A80               	xorlw	128
  4607  00318A  0F80               	addlw	-128
  4608  00318C  0E14               	movlw	20
  4609  00318E  B4D8               	btfsc	status,2,c
  4610  003190  5D60               	subwf	clrBufferUSART@i& (0+255),w,b
  4611  003192  B0D8               	btfsc	status,0,c
  4612  003194  D012               	goto	l54
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  4616                           
  4617                           ; BSR set to: 0
  4618                           
  4619                           ; BSR set to: 0
  4620  003196  0101               	movlb	1	; () banked
  4621  003198  0E28               	movlw	low _BluetoothDato
  4622  00319A  0100               	movlb	0	; () banked
  4623  00319C  2560               	addwf	clrBufferUSART@i& (0+255),w,b
  4624  00319E  6ED9               	movwf	fsr2l,c
  4625  0031A0  0101               	movlb	1	; () banked
  4626  0031A2  0E01               	movlw	high _BluetoothDato
  4627  0031A4  0100               	movlb	0	; () banked
  4628  0031A6  2161               	addwfc	(clrBufferUSART@i+1)& (0+255),w,b
  4629  0031A8  6EDA               	movwf	fsr2h,c
  4630  0031AA  0E00               	movlw	0
  4631  0031AC  6EDF               	movwf	indf2,c
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;Bluetooth.c: 72: cad = 0;
  4635  0031AE  0E00               	movlw	0
  4636  0031B0  6E55               	movwf	_cad,c
  4637                           
  4638                           ; BSR set to: 0
  4639  0031B2  0100               	movlb	0	; () banked
  4640  0031B4  4B60               	infsnz	clrBufferUSART@i& (0+255),f,b
  4641  0031B6  2B61               	incf	(clrBufferUSART@i+1)& (0+255),f,b
  4642  0031B8  D7E5               	goto	L7
  4643  0031BA                     l54:
  4644                           
  4645                           ; BSR set to: 0
  4646  0031BA  0012               	return	
  4647  0031BC                     __end_of_clrBufferUSART:
  4648                           	opt stack 0
  4649                           tblptru	equ	0xFF8
  4650                           tblptrh	equ	0xFF7
  4651                           tblptrl	equ	0xFF6
  4652                           tablat	equ	0xFF5
  4653                           prodh	equ	0xFF4
  4654                           prodl	equ	0xFF3
  4655                           intcon	equ	0xFF2
  4656                           intcon2	equ	0xFF1
  4657                           intcon3	equ	0xFF0
  4658                           indf0	equ	0xFEF
  4659                           postinc0	equ	0xFEE
  4660                           fsr0h	equ	0xFEA
  4661                           fsr0l	equ	0xFE9
  4662                           wreg	equ	0xFE8
  4663                           postinc1	equ	0xFE6
  4664                           postdec1	equ	0xFE5
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _PWM_DutyCycle2 *****************
  4673 ;; Defined at:
  4674 ;;		line 55 in file "pwm.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  percentageDu    1    wreg     unsigned char 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4679 ;;  DC              2   64[BANK0 ] unsigned int 
  4680 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;		None               void
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4690 ;;      Params:         0       0       0       0       0       0       0       0       0
  4691 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4692 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4693 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4694 ;;Total ram usage:        9 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    6
  4697 ;; This function calls:
  4698 ;;		_SetDCPWM2
  4699 ;;		___ftmul
  4700 ;;		___fttol
  4701 ;;		___lbtoft
  4702 ;; This function is called by:
  4703 ;;		_Comando_Tablet
  4704 ;;		_main
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text23
  4709  002BCC                     __ptext23:
  4710                           	opt stack 0
  4711  002BCC                     _PWM_DutyCycle2:
  4712                           	opt stack 24
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;incstack = 0
  4716                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  4717  002BCC  0100               	movlb	0	; () banked
  4718  002BCE  6F9F               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  4722  002BD0  0E00               	movlw	0
  4723  002BD2  0100               	movlb	0	; () banked
  4724  002BD4  6FA1               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  4725  002BD6  0E00               	movlw	0
  4726  002BD8  0100               	movlb	0	; () banked
  4727  002BDA  6FA0               	movwf	PWM_DutyCycle2@DC& (0+255),b
  4728  002BDC  0E00               	movlw	0
  4729  002BDE  0100               	movlb	0	; () banked
  4730  002BE0  6F9E               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  4731  002BE2  0E00               	movlw	0
  4732  002BE4  0100               	movlb	0	; () banked
  4733  002BE6  6F9D               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  4737  002BE8  0EAE               	movlw	174
  4738  002BEA  0100               	movlb	0	; () banked
  4739  002BEC  6F77               	movwf	___ftmul@f2& (0+255),b
  4740  002BEE  0E23               	movlw	35
  4741  002BF0  0100               	movlb	0	; () banked
  4742  002BF2  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4743  002BF4  0E41               	movlw	65
  4744  002BF6  0100               	movlb	0	; () banked
  4745  002BF8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4746  002BFA  0100               	movlb	0	; () banked
  4747  002BFC  519F               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  4748  002BFE  ECA7  F019         	call	___lbtoft
  4749  002C02  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4750  002C06  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4751  002C0A  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4752  002C0E  ECD0  F00C         	call	___ftmul	;wreg free
  4753  002C12  C074  F08A         	movff	?___ftmul,___fttol@f1
  4754  002C16  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4755  002C1A  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4756  002C1E  EC30  F00E         	call	___fttol	;wreg free
  4757  002C22  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle2
  4758  002C26  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  4759  002C2A  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  4760  002C2E  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  4761  002C32  C099  F0A0         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  4762  002C36  C09A  F0A1         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  4763                           
  4764                           ;pwm.c: 60: SetDCPWM2(DC);
  4765  002C3A  C0A0  F060         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  4766  002C3E  C0A1  F061         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  4767  002C42  EC0C  F018         	call	_SetDCPWM2	;wreg free
  4768                           
  4769                           ;pwm.c: 61: return;
  4770  002C46  0012               	return	
  4771  002C48                     __end_of_PWM_DutyCycle2:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           intcon3	equ	0xFF0
  4782                           indf0	equ	0xFEF
  4783                           postinc0	equ	0xFEE
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           postinc1	equ	0xFE6
  4788                           postdec1	equ	0xFE5
  4789                           fsr1l	equ	0xFE1
  4790                           indf2	equ	0xFDF
  4791                           postinc2	equ	0xFDE
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function _SetDCPWM2 *****************
  4797 ;; Defined at:
  4798 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  4803 ;; Return value:  Size  Location     Type
  4804 ;;		None               void
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4812 ;;      Params:         0       2       0       0       0       0       0       0       0
  4813 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4814 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4815 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        6 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    4
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_PWM_DutyCycle2
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text24
  4827  003018                     __ptext24:
  4828                           	opt stack 0
  4829  003018                     _SetDCPWM2:
  4830                           	opt stack 25
  4831                           
  4832                           ;incstack = 0
  4833  003018  0100               	movlb	0	; () banked
  4834  00301A  C060  F062         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4835  00301E  0100               	movlb	0	; () banked
  4836  003020  C061  F063         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4837  003024  0E06               	movlw	6
  4838  003026                     u4135:
  4839  003026  90D8               	bcf	status,0,c
  4840  003028  0100               	movlb	0	; () banked
  4841  00302A  3762               	rlcf	??_SetDCPWM2& (0+255),f,b
  4842  00302C  3763               	rlcf	(??_SetDCPWM2+1)& (0+255),f,b
  4843  00302E  2EE8               	decfsz	wreg,f,c
  4844  003030  D7FA               	goto	u4135
  4845  003032  C062  F064         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4846  003036  C063  F065         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4847                           
  4848                           ; BSR set to: 0
  4849  00303A  C065  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4850  00303E  C064  F062         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4851  003042  0100               	movlb	0	; () banked
  4852  003044  90D8               	bcf	status,0,c
  4853  003046  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4854  003048  0100               	movlb	0	; () banked
  4855  00304A  90D8               	bcf	status,0,c
  4856  00304C  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4857  00304E  0E30               	movlw	48
  4858  003050  0100               	movlb	0	; () banked
  4859  003052  1762               	andwf	??_SetDCPWM2& (0+255),f,b
  4860  003054  50BA               	movf	4026,w,c	;volatile
  4861  003056  0BCF               	andlw	207
  4862  003058  0100               	movlb	0	; () banked
  4863  00305A  1162               	iorwf	??_SetDCPWM2& (0+255),w,b
  4864  00305C  6EBA               	movwf	4026,c	;volatile
  4865                           
  4866                           ; BSR set to: 0
  4867  00305E  0012               	return	
  4868  003060                     __end_of_SetDCPWM2:
  4869                           	opt stack 0
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           intcon	equ	0xFF2
  4877                           intcon2	equ	0xFF1
  4878                           intcon3	equ	0xFF0
  4879                           indf0	equ	0xFEF
  4880                           postinc0	equ	0xFEE
  4881                           fsr0h	equ	0xFEA
  4882                           fsr0l	equ	0xFE9
  4883                           wreg	equ	0xFE8
  4884                           postinc1	equ	0xFE6
  4885                           postdec1	equ	0xFE5
  4886                           fsr1l	equ	0xFE1
  4887                           indf2	equ	0xFDF
  4888                           postinc2	equ	0xFDE
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _PWM_DutyCycle1 *****************
  4894 ;; Defined at:
  4895 ;;		line 33 in file "pwm.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  percentageDu    1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4900 ;;  DC              2   64[BANK0 ] unsigned int 
  4901 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0
  4912 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4913 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4914 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4915 ;;Total ram usage:        9 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    6
  4918 ;; This function calls:
  4919 ;;		_SetDCPWM1
  4920 ;;		___ftmul
  4921 ;;		___fttol
  4922 ;;		___lbtoft
  4923 ;; This function is called by:
  4924 ;;		_Comando_Tablet
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text25
  4930  002C48                     __ptext25:
  4931                           	opt stack 0
  4932  002C48                     _PWM_DutyCycle1:
  4933                           	opt stack 24
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;incstack = 0
  4937                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4938  002C48  0100               	movlb	0	; () banked
  4939  002C4A  6F9F               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4943  002C4C  0E00               	movlw	0
  4944  002C4E  0100               	movlb	0	; () banked
  4945  002C50  6FA1               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4946  002C52  0E00               	movlw	0
  4947  002C54  0100               	movlb	0	; () banked
  4948  002C56  6FA0               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4949  002C58  0E00               	movlw	0
  4950  002C5A  0100               	movlb	0	; () banked
  4951  002C5C  6F9E               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4952  002C5E  0E00               	movlw	0
  4953  002C60  0100               	movlb	0	; () banked
  4954  002C62  6F9D               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4958  002C64  0EAE               	movlw	174
  4959  002C66  0100               	movlb	0	; () banked
  4960  002C68  6F77               	movwf	___ftmul@f2& (0+255),b
  4961  002C6A  0E23               	movlw	35
  4962  002C6C  0100               	movlb	0	; () banked
  4963  002C6E  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4964  002C70  0E41               	movlw	65
  4965  002C72  0100               	movlb	0	; () banked
  4966  002C74  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4967  002C76  0100               	movlb	0	; () banked
  4968  002C78  519F               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4969  002C7A  ECA7  F019         	call	___lbtoft
  4970  002C7E  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4971  002C82  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4972  002C86  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4973  002C8A  ECD0  F00C         	call	___ftmul	;wreg free
  4974  002C8E  C074  F08A         	movff	?___ftmul,___fttol@f1
  4975  002C92  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4976  002C96  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4977  002C9A  EC30  F00E         	call	___fttol	;wreg free
  4978  002C9E  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle1
  4979  002CA2  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4980  002CA6  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4981  002CAA  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4982  002CAE  C099  F0A0         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4983  002CB2  C09A  F0A1         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4984                           
  4985                           ;pwm.c: 38: SetDCPWM1(DC);
  4986  002CB6  C0A0  F060         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4987  002CBA  C0A1  F061         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4988  002CBE  EC30  F018         	call	_SetDCPWM1	;wreg free
  4989                           
  4990                           ;pwm.c: 39: return;
  4991  002CC2  0012               	return	
  4992  002CC4                     __end_of_PWM_DutyCycle1:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           intcon2	equ	0xFF1
  5002                           intcon3	equ	0xFF0
  5003                           indf0	equ	0xFEF
  5004                           postinc0	equ	0xFEE
  5005                           fsr0h	equ	0xFEA
  5006                           fsr0l	equ	0xFE9
  5007                           wreg	equ	0xFE8
  5008                           postinc1	equ	0xFE6
  5009                           postdec1	equ	0xFE5
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           postinc2	equ	0xFDE
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function ___lbtoft *****************
  5018 ;; Defined at:
  5019 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  c               1    wreg     unsigned char 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  c               1   11[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  3    8[BANK0 ] float 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5033 ;;      Params:         0       3       0       0       0       0       0       0       0
  5034 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5036 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5037 ;;Total ram usage:        4 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    5
  5040 ;; This function calls:
  5041 ;;		___ftpack
  5042 ;; This function is called by:
  5043 ;;		_PWM_DutyCycle1
  5044 ;;		_PWM_DutyCycle2
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text26
  5049  00334E                     __ptext26:
  5050                           	opt stack 0
  5051  00334E                     ___lbtoft:
  5052                           	opt stack 24
  5053                           
  5054                           ;incstack = 0
  5055                           ;___lbtoft@c stored from wreg
  5056  00334E  0100               	movlb	0	; () banked
  5057  003350  6F6B               	movwf	___lbtoft@c& (0+255),b
  5058                           
  5059                           ; BSR set to: 0
  5060  003352  0100               	movlb	0	; () banked
  5061  003354  516B               	movf	___lbtoft@c& (0+255),w,b
  5062  003356  0100               	movlb	0	; () banked
  5063  003358  6F60               	movwf	___ftpack@arg& (0+255),b
  5064  00335A  0100               	movlb	0	; () banked
  5065  00335C  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  5066  00335E  0100               	movlb	0	; () banked
  5067  003360  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  5068  003362  0E8E               	movlw	142
  5069  003364  0100               	movlb	0	; () banked
  5070  003366  6F63               	movwf	___ftpack@exp& (0+255),b
  5071  003368  0E00               	movlw	0
  5072  00336A  0100               	movlb	0	; () banked
  5073  00336C  6F64               	movwf	___ftpack@sign& (0+255),b
  5074  00336E  EC5D  F00F         	call	___ftpack	;wreg free
  5075  003372  C060  F068         	movff	?___ftpack,?___lbtoft
  5076  003376  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  5077  00337A  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  5078  00337E  0012               	return	
  5079  003380                     __end_of___lbtoft:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           intcon2	equ	0xFF1
  5089                           intcon3	equ	0xFF0
  5090                           indf0	equ	0xFEF
  5091                           postinc0	equ	0xFEE
  5092                           fsr0h	equ	0xFEA
  5093                           fsr0l	equ	0xFE9
  5094                           wreg	equ	0xFE8
  5095                           postinc1	equ	0xFE6
  5096                           postdec1	equ	0xFE5
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _SetDCPWM1 *****************
  5105 ;; Defined at:
  5106 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5120 ;;      Params:         0       2       0       0       0       0       0       0       0
  5121 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5122 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5123 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5124 ;;Total ram usage:        6 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    4
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_PWM_DutyCycle1
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text27
  5135  003060                     __ptext27:
  5136                           	opt stack 0
  5137  003060                     _SetDCPWM1:
  5138                           	opt stack 25
  5139                           
  5140                           ;incstack = 0
  5141  003060  0100               	movlb	0	; () banked
  5142  003062  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  5143  003066  0100               	movlb	0	; () banked
  5144  003068  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  5145  00306C  0E06               	movlw	6
  5146  00306E                     u4105:
  5147  00306E  90D8               	bcf	status,0,c
  5148  003070  0100               	movlb	0	; () banked
  5149  003072  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  5150  003074  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  5151  003076  2EE8               	decfsz	wreg,f,c
  5152  003078  D7FA               	goto	u4105
  5153  00307A  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  5154  00307E  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  5155                           
  5156                           ; BSR set to: 0
  5157  003082  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  5158  003086  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  5159  00308A  0100               	movlb	0	; () banked
  5160  00308C  90D8               	bcf	status,0,c
  5161  00308E  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5162  003090  0100               	movlb	0	; () banked
  5163  003092  90D8               	bcf	status,0,c
  5164  003094  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5165  003096  0E30               	movlw	48
  5166  003098  0100               	movlb	0	; () banked
  5167  00309A  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  5168  00309C  50BD               	movf	4029,w,c	;volatile
  5169  00309E  0BCF               	andlw	207
  5170  0030A0  0100               	movlb	0	; () banked
  5171  0030A2  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  5172  0030A4  6EBD               	movwf	4029,c	;volatile
  5173                           
  5174                           ; BSR set to: 0
  5175  0030A6  0012               	return	
  5176  0030A8                     __end_of_SetDCPWM1:
  5177                           	opt stack 0
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           intcon2	equ	0xFF1
  5186                           intcon3	equ	0xFF0
  5187                           indf0	equ	0xFEF
  5188                           postinc0	equ	0xFEE
  5189                           fsr0h	equ	0xFEA
  5190                           fsr0l	equ	0xFE9
  5191                           wreg	equ	0xFE8
  5192                           postinc1	equ	0xFE6
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           fsr2h	equ	0xFDA
  5198                           fsr2l	equ	0xFD9
  5199                           status	equ	0xFD8
  5200                           
  5201 ;; *************** function _Lcd_Write_Integer *****************
  5202 ;; Defined at:
  5203 ;;		line 113 in file "lcd.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  a               2  111[BANK0 ] int 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  s              20  113[BANK0 ] unsigned char [20]
  5208 ;; Return value:  Size  Location     Type
  5209 ;;		None               void
  5210 ;; Registers used:
  5211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5217 ;;      Params:         0       2       0       0       0       0       0       0       0
  5218 ;;      Locals:         0      20       0       0       0       0       0       0       0
  5219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5220 ;;      Totals:         0      22       0       0       0       0       0       0       0
  5221 ;;Total ram usage:       22 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    8
  5224 ;; This function calls:
  5225 ;;		_Lcd_Write_String
  5226 ;;		_sprintf
  5227 ;; This function is called by:
  5228 ;;		_Comando_Tablet
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text28
  5233  0031BC                     __ptext28:
  5234                           	opt stack 0
  5235  0031BC                     _Lcd_Write_Integer:
  5236                           	opt stack 21
  5237                           
  5238                           ;lcd.c: 114: unsigned char s[20];
  5239                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;incstack = 0
  5243  0031BC  0100               	movlb	0	; () banked
  5244  0031BE  0E00               	movlw	high Lcd_Write_Integer@s
  5245  0031C0  0100               	movlb	0	; () banked
  5246  0031C2  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  5247  0031C4  0100               	movlb	0	; () banked
  5248  0031C6  0ED1               	movlw	low Lcd_Write_Integer@s
  5249  0031C8  0100               	movlb	0	; () banked
  5250  0031CA  6F9F               	movwf	sprintf@sp& (0+255),b
  5251  0031CC  0E7F               	movlw	high STR_18
  5252  0031CE  0100               	movlb	0	; () banked
  5253  0031D0  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  5254  0031D2  0EAF               	movlw	low STR_18
  5255  0031D4  0100               	movlb	0	; () banked
  5256  0031D6  6FA1               	movwf	sprintf@f& (0+255),b
  5257  0031D8  C0CF  F0A3         	movff	Lcd_Write_Integer@a,?_sprintf+4
  5258  0031DC  C0D0  F0A4         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  5259  0031E0  EC0E  F000         	call	_sprintf	;wreg free
  5260                           
  5261                           ;lcd.c: 117: Lcd_Write_String(s);
  5262  0031E4  0100               	movlb	0	; () banked
  5263  0031E6  0E00               	movlw	high Lcd_Write_Integer@s
  5264  0031E8  0100               	movlb	0	; () banked
  5265  0031EA  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  5266  0031EC  0100               	movlb	0	; () banked
  5267  0031EE  0ED1               	movlw	low Lcd_Write_Integer@s
  5268  0031F0  0100               	movlb	0	; () banked
  5269  0031F2  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  5270  0031F4  EC94  F014         	call	_Lcd_Write_String	;wreg free
  5271  0031F8  0012               	return	
  5272  0031FA                     __end_of_Lcd_Write_Integer:
  5273                           	opt stack 0
  5274                           tblptru	equ	0xFF8
  5275                           tblptrh	equ	0xFF7
  5276                           tblptrl	equ	0xFF6
  5277                           tablat	equ	0xFF5
  5278                           prodh	equ	0xFF4
  5279                           prodl	equ	0xFF3
  5280                           intcon	equ	0xFF2
  5281                           intcon2	equ	0xFF1
  5282                           intcon3	equ	0xFF0
  5283                           indf0	equ	0xFEF
  5284                           postinc0	equ	0xFEE
  5285                           fsr0h	equ	0xFEA
  5286                           fsr0l	equ	0xFE9
  5287                           wreg	equ	0xFE8
  5288                           postinc1	equ	0xFE6
  5289                           postdec1	equ	0xFE5
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _sprintf *****************
  5298 ;; Defined at:
  5299 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  5302 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  5303 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  5304 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  vd              4   83[BANK0 ] unsigned long 
  5307 ;;  vd              4   87[BANK0 ] unsigned long 
  5308 ;;  _val            5  100[BANK0 ] struct .
  5309 ;;  fval            3  107[BANK0 ] struct .
  5310 ;;  integ           3   95[BANK0 ] struct .
  5311 ;;  ival            3    0        struct .
  5312 ;;  exp             2  105[BANK0 ] int 
  5313 ;;  prec            2   98[BANK0 ] int 
  5314 ;;  flag            2   93[BANK0 ] unsigned short 
  5315 ;;  ap              2   91[BANK0 ] PTR void [1]
  5316 ;;		 -> ?_sprintf(2), 
  5317 ;;  width           2    0        int 
  5318 ;;  c               1  110[BANK0 ] char 
  5319 ;;  d               1    0        unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  2   63[BANK0 ] int 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5329 ;;      Params:         0       7       0       0       0       0       0       0       0
  5330 ;;      Locals:         0      35       0       0       0       0       0       0       0
  5331 ;;      Temps:          0       6       0       0       0       0       0       0       0
  5332 ;;      Totals:         0      48       0       0       0       0       0       0       0
  5333 ;;Total ram usage:       48 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    7
  5336 ;; This function calls:
  5337 ;;		___awdiv
  5338 ;;		___ftadd
  5339 ;;		___ftge
  5340 ;;		___ftmul
  5341 ;;		___ftneg
  5342 ;;		___ftsub
  5343 ;;		___fttol
  5344 ;;		___lldiv
  5345 ;;		___llmod
  5346 ;;		___lltoft
  5347 ;;		___wmul
  5348 ;;		__div_to_l_
  5349 ;;		__tdiv_to_l_
  5350 ;;		_fround
  5351 ;;		_scale
  5352 ;; This function is called by:
  5353 ;;		_putcBluetoothInt
  5354 ;;		_Lcd_Write_Integer
  5355 ;;		_Lcd_Write_Float
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text29
  5360  00001C                     __ptext29:
  5361                           	opt stack 0
  5362  00001C                     _sprintf:
  5363                           	opt stack 21
  5364                           
  5365                           ;doprnt.c: 494: va_list ap;
  5366                           ;doprnt.c: 499: signed char c;
  5367                           ;doprnt.c: 501: int width;
  5368                           ;doprnt.c: 504: int prec;
  5369                           ;doprnt.c: 508: unsigned short flag;
  5370                           ;doprnt.c: 515: char d;
  5371                           ;doprnt.c: 516: double fval, integ;
  5372                           ;doprnt.c: 517: int exp;
  5373                           ;doprnt.c: 518: double ival;
  5374                           ;doprnt.c: 519: union {
  5375                           ;doprnt.c: 520: unsigned long _val;
  5376                           ;doprnt.c: 521: struct {
  5377                           ;doprnt.c: 522: const char * _cp;
  5378                           ;doprnt.c: 523: unsigned _len;
  5379                           ;doprnt.c: 524: } _str;
  5380                           ;doprnt.c: 525: } _val;
  5381                           ;doprnt.c: 542: *ap = __va_start();
  5382                           
  5383                           ;incstack = 0
  5384  00001C  0100               	movlb	0	; () banked
  5385  00001E  0E00               	movlw	high (?_sprintf+4)
  5386  000020  0100               	movlb	0	; () banked
  5387  000022  6FBC               	movwf	(sprintf@ap+1)& (0+255),b
  5388  000024  0100               	movlb	0	; () banked
  5389  000026  0EA3               	movlw	low (?_sprintf+4)
  5390  000028  0100               	movlb	0	; () banked
  5391  00002A  6FBB               	movwf	sprintf@ap& (0+255),b
  5392                           
  5393                           ;doprnt.c: 545: while(c = *f++) {
  5394  00002C  EFB4  F004         	goto	l3992
  5395  000030                     l3790:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;doprnt.c: 547: if(c != '%')
  5399  000030  0100               	movlb	0	; () banked
  5400  000032  51CE               	movf	sprintf@c& (0+255),w,b
  5401  000034  0A25               	xorlw	37
  5402  000036  B4D8               	btfsc	status,2,c
  5403  000038  D00C               	goto	l3796
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;doprnt.c: 549: {
  5407                           ;doprnt.c: 550: ((*sp++ = (c)));
  5408  00003A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5409  00003E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5410  000042  0100               	movlb	0	; () banked
  5411  000044  C0CE  FFDF         	movff	sprintf@c,indf2
  5412                           
  5413                           ; BSR set to: 0
  5414  000048  0100               	movlb	0	; () banked
  5415  00004A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  5416  00004C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  5417                           
  5418                           ;doprnt.c: 551: continue;
  5419  00004E  EFB4  F004         	goto	l3992
  5420  000052                     l3796:
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;doprnt.c: 552: }
  5424                           ;doprnt.c: 557: flag = 0;
  5425  000052  0E00               	movlw	0
  5426  000054  0100               	movlb	0	; () banked
  5427  000056  6FBE               	movwf	(sprintf@flag+1)& (0+255),b
  5428  000058  0E00               	movlw	0
  5429  00005A  0100               	movlb	0	; () banked
  5430  00005C  6FBD               	movwf	sprintf@flag& (0+255),b
  5431                           
  5432                           ;doprnt.c: 644: switch(c = *f++) {
  5433  00005E  D003               	goto	l3802
  5434  000060                     l3798:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;doprnt.c: 672: flag |= 0x400;
  5438  000060  0100               	movlb	0	; () banked
  5439  000062  85BE               	bsf	(sprintf@flag+1)& (0+255),2,b
  5440                           
  5441                           ;doprnt.c: 673: break;
  5442  000064  D01E               	goto	l3804
  5443  000066                     l3802:
  5444                           
  5445                           ; BSR set to: 0
  5446  000066  0100               	movlb	0	; () banked
  5447  000068  C0A1  FFF6         	movff	sprintf@f,tblptrl
  5448  00006C  0100               	movlb	0	; () banked
  5449  00006E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  5450  000072  0100               	movlb	0	; () banked
  5451  000074  4BA1               	infsnz	sprintf@f& (0+255),f,b
  5452  000076  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  5453  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5454  000078  6AF8               	clrf	tblptru,c
  5455  00007A                     	endif
  5456  00007A                     	if	0	;tblptru may be non-zero
  5457  00007A                     	endif
  5458  00007A  0008               	tblrd		*
  5459  00007C  0100               	movlb	0	; () banked
  5460  00007E  CFF5 F0CE          	movff	tablat,sprintf@c
  5461  000082  0100               	movlb	0	; () banked
  5462  000084  51CE               	movf	sprintf@c& (0+255),w,b
  5463                           
  5464                           ; Switch size 1, requested type "space"
  5465                           ; Number of cases is 4, Range of values is 0 to 105
  5466                           ; switch strategies available:
  5467                           ; Name         Instructions Cycles
  5468                           ; simple_byte           13     7 (average)
  5469                           ;	Chosen strategy is simple_byte
  5470  000086  0A00               	xorlw	0	; case 0
  5471  000088  B4D8               	btfsc	status,2,c
  5472  00008A  EFC6  F004         	goto	l3994
  5473  00008E  0A64               	xorlw	100	; case 100
  5474  000090  B4D8               	btfsc	status,2,c
  5475  000092  D007               	goto	l3804
  5476  000094  0A02               	xorlw	2	; case 102
  5477  000096  B4D8               	btfsc	status,2,c
  5478  000098  D7E3               	goto	l3798
  5479  00009A  0A0F               	xorlw	15	; case 105
  5480  00009C  A4D8               	btfss	status,2,c
  5481  00009E  EFB4  F004         	goto	l3992
  5482  0000A2                     l3804:
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 834: if(flag & (0x700)) {
  5486  0000A2  0E07               	movlw	7
  5487  0000A4  0100               	movlb	0	; () banked
  5488  0000A6  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5489  0000A8  B4D8               	btfsc	status,2,c
  5490  0000AA  D36D               	goto	l3952
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 838: prec = 6;
  5494  0000AC  0E00               	movlw	0
  5495  0000AE  0100               	movlb	0	; () banked
  5496  0000B0  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  5497  0000B2  0E06               	movlw	6
  5498  0000B4  0100               	movlb	0	; () banked
  5499  0000B6  6FC2               	movwf	sprintf@prec& (0+255),b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5503  0000B8  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  5504  0000BC  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  5505  0000C0  0100               	movlb	0	; () banked
  5506  0000C2  CFDE F0CB          	movff	postinc2,sprintf@fval
  5507  0000C6  0100               	movlb	0	; () banked
  5508  0000C8  CFDE F0CC          	movff	postinc2,sprintf@fval+1
  5509  0000CC  0100               	movlb	0	; () banked
  5510  0000CE  CFDD F0CD          	movff	postdec2,sprintf@fval+2
  5511                           
  5512                           ; BSR set to: 0
  5513  0000D2  0E03               	movlw	3
  5514  0000D4  0100               	movlb	0	; () banked
  5515  0000D6  27BB               	addwf	sprintf@ap& (0+255),f,b
  5516  0000D8  0E00               	movlw	0
  5517  0000DA  0100               	movlb	0	; () banked
  5518  0000DC  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;doprnt.c: 840: if(fval < 0.0) {
  5522  0000DE  0100               	movlb	0	; () banked
  5523  0000E0  51CD               	movf	(sprintf@fval+2)& (0+255),w,b
  5524  0000E2  0A80               	xorlw	128
  5525  0000E4  0F80               	addlw	128
  5526  0000E6  E107               	bnz	u3785
  5527  0000E8  0E00               	movlw	0
  5528  0000EA  0100               	movlb	0	; () banked
  5529  0000EC  5DCC               	subwf	(sprintf@fval+1)& (0+255),w,b
  5530  0000EE  E103               	bnz	u3785
  5531  0000F0  0E00               	movlw	0
  5532  0000F2  0100               	movlb	0	; () banked
  5533  0000F4  5DCB               	subwf	sprintf@fval& (0+255),w,b
  5534  0000F6                     u3785:
  5535  0000F6  B0D8               	btfsc	status,0,c
  5536  0000F8  D011               	goto	l3818
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;doprnt.c: 841: fval = -fval;
  5540  0000FA  C0CB  F060         	movff	sprintf@fval,___ftneg@f1
  5541  0000FE  C0CC  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  5542  000102  C0CD  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  5543  000106  ECC0  F019         	call	___ftneg	;wreg free
  5544  00010A  C060  F0CB         	movff	?___ftneg,sprintf@fval
  5545  00010E  C061  F0CC         	movff	?___ftneg+1,sprintf@fval+1
  5546  000112  C062  F0CD         	movff	?___ftneg+2,sprintf@fval+2
  5547                           
  5548                           ;doprnt.c: 842: flag |= 0x03;
  5549  000116  0E03               	movlw	3
  5550  000118  0100               	movlb	0	; () banked
  5551  00011A  13BD               	iorwf	sprintf@flag& (0+255),f,b
  5552  00011C                     l3818:
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;doprnt.c: 843: }
  5556                           ;doprnt.c: 844: exp = 0;
  5557  00011C  0E00               	movlw	0
  5558  00011E  0100               	movlb	0	; () banked
  5559  000120  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5560  000122  0E00               	movlw	0
  5561  000124  0100               	movlb	0	; () banked
  5562  000126  6FC9               	movwf	sprintf@exp& (0+255),b
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;doprnt.c: 845: if( fval!=0) {
  5566  000128  0E7F               	movlw	127
  5567  00012A  0100               	movlb	0	; () banked
  5568  00012C  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5569  00012E  0100               	movlb	0	; () banked
  5570  000130  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5571  000132  0100               	movlb	0	; () banked
  5572  000134  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5573  000136  B4D8               	btfsc	status,2,c
  5574  000138  D0AA               	goto	l3846
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5578  00013A  0E82               	movlw	130
  5579  00013C  0100               	movlb	0	; () banked
  5580  00013E  6FA6               	movwf	??_sprintf& (0+255),b
  5581  000140  0EFF               	movlw	255
  5582  000142  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5583  000144  0100               	movlb	0	; () banked
  5584  000146  C0CB  F0A8         	movff	sprintf@fval,??_sprintf+2
  5585  00014A  0100               	movlb	0	; () banked
  5586  00014C  C0CC  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  5587  000150  0100               	movlb	0	; () banked
  5588  000152  C0CD  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  5589  000156  0100               	movlb	0	; () banked
  5590  000158  C0CE  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  5591  00015C  0E10               	movlw	16
  5592  00015E  D006               	goto	u3800
  5593  000160                     u3805:
  5594  000160  0100               	movlb	0	; () banked
  5595  000162  90D8               	bcf	status,0,c
  5596  000164  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  5597  000166  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  5598  000168  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  5599  00016A  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  5600  00016C                     u3800:
  5601  00016C  2EE8               	decfsz	wreg,f,c
  5602  00016E  D7F8               	goto	u3805
  5603  000170  0100               	movlb	0	; () banked
  5604  000172  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  5605  000174  0100               	movlb	0	; () banked
  5606  000176  25A6               	addwf	??_sprintf& (0+255),w,b
  5607  000178  0100               	movlb	0	; () banked
  5608  00017A  6FC9               	movwf	sprintf@exp& (0+255),b
  5609  00017C  0E00               	movlw	0
  5610  00017E  0100               	movlb	0	; () banked
  5611  000180  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  5612  000182  0100               	movlb	0	; () banked
  5613  000184  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;doprnt.c: 847: exp--;
  5617  000186  0100               	movlb	0	; () banked
  5618  000188  07C9               	decf	sprintf@exp& (0+255),f,b
  5619  00018A  A0D8               	btfss	status,0,c
  5620  00018C  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;doprnt.c: 848: exp *= 3;
  5624  00018E  C0C9  F06E         	movff	sprintf@exp,___wmul@multiplier
  5625  000192  C0CA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  5626  000196  0E00               	movlw	0
  5627  000198  0100               	movlb	0	; () banked
  5628  00019A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5629  00019C  0E03               	movlw	3
  5630  00019E  0100               	movlb	0	; () banked
  5631  0001A0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5632  0001A2  EC71  F019         	call	___wmul	;wreg free
  5633  0001A6  0100               	movlb	0	; () banked
  5634  0001A8  C06E  F0C9         	movff	?___wmul,sprintf@exp
  5635  0001AC  0100               	movlb	0	; () banked
  5636  0001AE  C06F  F0CA         	movff	?___wmul+1,sprintf@exp+1
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;doprnt.c: 849: exp /= 10;
  5640  0001B2  C0C9  F066         	movff	sprintf@exp,___awdiv@dividend
  5641  0001B6  C0CA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  5642  0001BA  0E00               	movlw	0
  5643  0001BC  0100               	movlb	0	; () banked
  5644  0001BE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5645  0001C0  0E0A               	movlw	10
  5646  0001C2  0100               	movlb	0	; () banked
  5647  0001C4  6F68               	movwf	___awdiv@divisor& (0+255),b
  5648  0001C6  EC54  F010         	call	___awdiv	;wreg free
  5649  0001CA  0100               	movlb	0	; () banked
  5650  0001CC  C066  F0C9         	movff	?___awdiv,sprintf@exp
  5651  0001D0  0100               	movlb	0	; () banked
  5652  0001D2  C067  F0CA         	movff	?___awdiv+1,sprintf@exp+1
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;doprnt.c: 850: if(exp < 0)
  5656  0001D6  0100               	movlb	0	; () banked
  5657  0001D8  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5658  0001DA  0A80               	xorlw	128
  5659  0001DC  6EF3               	movwf	prodl,c
  5660  0001DE  0E80               	movlw	128
  5661  0001E0  5CF3               	subwf	prodl,w,c
  5662  0001E2  0E00               	movlw	0
  5663  0001E4  B4D8               	btfsc	status,2,c
  5664  0001E6  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5665  0001E8  B0D8               	btfsc	status,0,c
  5666  0001EA  D004               	goto	l3834
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;doprnt.c: 851: exp--;
  5670  0001EC  0100               	movlb	0	; () banked
  5671  0001EE  07C9               	decf	sprintf@exp& (0+255),f,b
  5672  0001F0  A0D8               	btfss	status,0,c
  5673  0001F2  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5674  0001F4                     l3834:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;doprnt.c: 855: integ = scale(-exp);
  5678  0001F4  0100               	movlb	0	; () banked
  5679  0001F6  51C9               	movf	sprintf@exp& (0+255),w,b
  5680  0001F8  0800               	sublw	0
  5681  0001FA  ECCD  F004         	call	_scale
  5682  0001FE  C083  F0BF         	movff	?_scale,sprintf@integ
  5683  000202  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5684  000206  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5685                           
  5686                           ;doprnt.c: 856: integ *= fval;
  5687  00020A  C0BF  F074         	movff	sprintf@integ,___ftmul@f1
  5688  00020E  C0C0  F075         	movff	sprintf@integ+1,___ftmul@f1+1
  5689  000212  C0C1  F076         	movff	sprintf@integ+2,___ftmul@f1+2
  5690  000216  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  5691  00021A  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  5692  00021E  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  5693  000222  ECD0  F00C         	call	___ftmul	;wreg free
  5694  000226  C074  F0BF         	movff	?___ftmul,sprintf@integ
  5695  00022A  C075  F0C0         	movff	?___ftmul+1,sprintf@integ+1
  5696  00022E  C076  F0C1         	movff	?___ftmul+2,sprintf@integ+2
  5697                           
  5698                           ;doprnt.c: 857: if(integ < 1.0)
  5699  000232  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5700  000236  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5701  00023A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5702  00023E  0E00               	movlw	0
  5703  000240  0100               	movlb	0	; () banked
  5704  000242  6F63               	movwf	___ftge@ff2& (0+255),b
  5705  000244  0E80               	movlw	128
  5706  000246  0100               	movlb	0	; () banked
  5707  000248  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5708  00024A  0E3F               	movlw	63
  5709  00024C  0100               	movlb	0	; () banked
  5710  00024E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5711  000250  EC2F  F011         	call	___ftge	;wreg free
  5712  000254  B0D8               	btfsc	status,0,c
  5713  000256  D005               	goto	l3842
  5714                           
  5715                           ;doprnt.c: 858: exp--;
  5716  000258  0100               	movlb	0	; () banked
  5717  00025A  07C9               	decf	sprintf@exp& (0+255),f,b
  5718  00025C  A0D8               	btfss	status,0,c
  5719  00025E  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5720  000260  D016               	goto	l3846
  5721  000262                     l3842:
  5722                           
  5723                           ;doprnt.c: 859: else if(integ >= 10.0)
  5724  000262  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5725  000266  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5726  00026A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5727  00026E  0E00               	movlw	0
  5728  000270  0100               	movlb	0	; () banked
  5729  000272  6F63               	movwf	___ftge@ff2& (0+255),b
  5730  000274  0E20               	movlw	32
  5731  000276  0100               	movlb	0	; () banked
  5732  000278  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5733  00027A  0E41               	movlw	65
  5734  00027C  0100               	movlb	0	; () banked
  5735  00027E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5736  000280  EC2F  F011         	call	___ftge	;wreg free
  5737  000284  A0D8               	btfss	status,0,c
  5738  000286  D003               	goto	l3846
  5739                           
  5740                           ;doprnt.c: 860: exp++;
  5741  000288  0100               	movlb	0	; () banked
  5742  00028A  4BC9               	infsnz	sprintf@exp& (0+255),f,b
  5743  00028C  2BCA               	incf	(sprintf@exp+1)& (0+255),f,b
  5744  00028E                     l3846:
  5745                           
  5746                           ;doprnt.c: 861: }
  5747                           ;doprnt.c: 1121: if(prec <= 12)
  5748  00028E  0100               	movlb	0	; () banked
  5749  000290  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  5750  000292  0A80               	xorlw	128
  5751  000294  6EF3               	movwf	prodl,c
  5752  000296  0E80               	movlw	128
  5753  000298  5CF3               	subwf	prodl,w,c
  5754  00029A  0E0D               	movlw	13
  5755  00029C  B4D8               	btfsc	status,2,c
  5756  00029E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  5757  0002A0  B0D8               	btfsc	status,0,c
  5758  0002A2  D018               	goto	l3850
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;doprnt.c: 1122: fval += fround(prec);
  5762  0002A4  C0CB  F08D         	movff	sprintf@fval,___ftadd@f1
  5763  0002A8  C0CC  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  5764  0002AC  C0CD  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  5765  0002B0  0100               	movlb	0	; () banked
  5766  0002B2  51C2               	movf	sprintf@prec& (0+255),w,b
  5767  0002B4  EC8B  F007         	call	_fround
  5768  0002B8  C083  F090         	movff	?_fround,___ftadd@f2
  5769  0002BC  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  5770  0002C0  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  5771  0002C4  EC15  F009         	call	___ftadd	;wreg free
  5772  0002C8  C08D  F0CB         	movff	?___ftadd,sprintf@fval
  5773  0002CC  C08E  F0CC         	movff	?___ftadd+1,sprintf@fval+1
  5774  0002D0  C08F  F0CD         	movff	?___ftadd+2,sprintf@fval+2
  5775  0002D4                     l3850:
  5776                           
  5777                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5778  0002D4  0100               	movlb	0	; () banked
  5779  0002D6  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5780  0002D8  0A80               	xorlw	128
  5781  0002DA  6EF3               	movwf	prodl,c
  5782  0002DC  0E80               	movlw	128
  5783  0002DE  5CF3               	subwf	prodl,w,c
  5784  0002E0  0E0A               	movlw	10
  5785  0002E2  B4D8               	btfsc	status,2,c
  5786  0002E4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5787  0002E6  B0D8               	btfsc	status,0,c
  5788  0002E8  D029               	goto	l3858
  5789                           
  5790                           ; BSR set to: 0
  5791  0002EA  0E7F               	movlw	127
  5792  0002EC  0100               	movlb	0	; () banked
  5793  0002EE  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5794  0002F0  0100               	movlb	0	; () banked
  5795  0002F2  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5796  0002F4  0100               	movlb	0	; () banked
  5797  0002F6  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5798  0002F8  B4D8               	btfsc	status,2,c
  5799  0002FA  D06F               	goto	l3874
  5800                           
  5801                           ; BSR set to: 0
  5802  0002FC  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5803  000300  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5804  000304  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5805  000308  EC30  F00E         	call	___fttol	;wreg free
  5806  00030C  C08A  F0A6         	movff	?___fttol,??_sprintf
  5807  000310  C08B  F0A7         	movff	?___fttol+1,??_sprintf+1
  5808  000314  C08C  F0A8         	movff	?___fttol+2,??_sprintf+2
  5809  000318  C08D  F0A9         	movff	?___fttol+3,??_sprintf+3
  5810  00031C  0100               	movlb	0	; () banked
  5811  00031E  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  5812  000320  11A6               	iorwf	??_sprintf& (0+255),w,b
  5813  000322  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5814  000324  11A8               	iorwf	(??_sprintf+2)& (0+255),w,b
  5815  000326  A4D8               	btfss	status,2,c
  5816  000328  D058               	goto	l3874
  5817                           
  5818                           ; BSR set to: 0
  5819  00032A  0100               	movlb	0	; () banked
  5820  00032C  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5821  00032E  0A80               	xorlw	128
  5822  000330  0F80               	addlw	-128
  5823  000332  0E02               	movlw	2
  5824  000334  B4D8               	btfsc	status,2,c
  5825  000336  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5826  000338  A0D8               	btfss	status,0,c
  5827  00033A  D04F               	goto	l3874
  5828  00033C                     l3858:
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;doprnt.c: 1129: if(integ < 4.294967296){
  5832  00033C  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5833  000340  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5834  000344  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5835  000348  0E70               	movlw	112
  5836  00034A  0100               	movlb	0	; () banked
  5837  00034C  6F63               	movwf	___ftge@ff2& (0+255),b
  5838  00034E  0E89               	movlw	137
  5839  000350  0100               	movlb	0	; () banked
  5840  000352  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5841  000354  0E40               	movlw	64
  5842  000356  0100               	movlb	0	; () banked
  5843  000358  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5844  00035A  EC2F  F011         	call	___ftge	;wreg free
  5845  00035E  B0D8               	btfsc	status,0,c
  5846  000360  D003               	goto	l3862
  5847                           
  5848                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5849  000362  0100               	movlb	0	; () banked
  5850  000364  0EF7               	movlw	247
  5851  000366  D002               	goto	L8
  5852  000368                     l3862:
  5853                           
  5854                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5855  000368  0100               	movlb	0	; () banked
  5856  00036A  0EF8               	movlw	248
  5857  00036C                     L8:
  5858  00036C  0100               	movlb	0	; () banked
  5859  00036E  27C9               	addwf	sprintf@exp& (0+255),f,b
  5860  000370  0EFF               	movlw	255
  5861  000372  0100               	movlb	0	; () banked
  5862  000374  23CA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;doprnt.c: 1133: }
  5866                           ;doprnt.c: 1134: integ = scale(exp);
  5867                           
  5868                           ; BSR set to: 0
  5869  000376  0100               	movlb	0	; () banked
  5870  000378  51C9               	movf	sprintf@exp& (0+255),w,b
  5871  00037A  ECCD  F004         	call	_scale
  5872  00037E  C083  F0BF         	movff	?_scale,sprintf@integ
  5873  000382  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5874  000386  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5875                           
  5876                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5877  00038A  C0CB  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  5878  00038E  C0CC  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5879  000392  C0CD  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5880  000396  C0BF  F063         	movff	sprintf@integ,__tdiv_to_l_@f2
  5881  00039A  C0C0  F064         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5882  00039E  C0C1  F065         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5883  0003A2  EC44  F00B         	call	__tdiv_to_l_	;wreg free
  5884  0003A6  C060  F0AF         	movff	?__tdiv_to_l_,_sprintf$1953
  5885  0003AA  C061  F0B0         	movff	?__tdiv_to_l_+1,_sprintf$1953+1
  5886  0003AE  C062  F0B1         	movff	?__tdiv_to_l_+2,_sprintf$1953+2
  5887  0003B2  C063  F0B2         	movff	?__tdiv_to_l_+3,_sprintf$1953+3
  5888  0003B6  C0AF  F0C4         	movff	_sprintf$1953,sprintf@_val
  5889  0003BA  C0B0  F0C5         	movff	_sprintf$1953+1,sprintf@_val+1
  5890  0003BE  C0B1  F0C6         	movff	_sprintf$1953+2,sprintf@_val+2
  5891  0003C2  C0B2  F0C7         	movff	_sprintf$1953+3,sprintf@_val+3
  5892                           
  5893                           ;doprnt.c: 1138: fval = 0.0;
  5894  0003C6  0E00               	movlw	0
  5895  0003C8  0100               	movlb	0	; () banked
  5896  0003CA  6FCB               	movwf	sprintf@fval& (0+255),b
  5897  0003CC  0E00               	movlw	0
  5898  0003CE  0100               	movlb	0	; () banked
  5899  0003D0  6FCC               	movwf	(sprintf@fval+1)& (0+255),b
  5900  0003D2  0E00               	movlw	0
  5901  0003D4  0100               	movlb	0	; () banked
  5902  0003D6  6FCD               	movwf	(sprintf@fval+2)& (0+255),b
  5903                           
  5904                           ;doprnt.c: 1139: } else {
  5905  0003D8  D034               	goto	l3878
  5906  0003DA                     l3874:
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5910  0003DA  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5911  0003DE  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5912  0003E2  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5913  0003E6  EC30  F00E         	call	___fttol	;wreg free
  5914  0003EA  C08A  F0C4         	movff	?___fttol,sprintf@_val
  5915  0003EE  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  5916  0003F2  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  5917  0003F6  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  5918                           
  5919                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5920  0003FA  C0CB  F099         	movff	sprintf@fval,___ftsub@f1
  5921  0003FE  C0CC  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  5922  000402  C0CD  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  5923  000406  C0C4  F068         	movff	sprintf@_val,___lltoft@c
  5924  00040A  C0C5  F069         	movff	sprintf@_val+1,___lltoft@c+1
  5925  00040E  C0C6  F06A         	movff	sprintf@_val+2,___lltoft@c+2
  5926  000412  C0C7  F06B         	movff	sprintf@_val+3,___lltoft@c+3
  5927  000416  ECA7  F015         	call	___lltoft	;wreg free
  5928  00041A  C068  F09C         	movff	?___lltoft,___ftsub@f2
  5929  00041E  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  5930  000422  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  5931  000426  ECFD  F018         	call	___ftsub	;wreg free
  5932  00042A  C099  F0CB         	movff	?___ftsub,sprintf@fval
  5933  00042E  C09A  F0CC         	movff	?___ftsub+1,sprintf@fval+1
  5934  000432  C09B  F0CD         	movff	?___ftsub+2,sprintf@fval+2
  5935                           
  5936                           ;doprnt.c: 1142: exp = 0;
  5937  000436  0E00               	movlw	0
  5938  000438  0100               	movlb	0	; () banked
  5939  00043A  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5940  00043C  0E00               	movlw	0
  5941  00043E  0100               	movlb	0	; () banked
  5942  000440  6FC9               	movwf	sprintf@exp& (0+255),b
  5943  000442                     l3878:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 1143: }
  5947                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5948  000442  0E01               	movlw	1
  5949  000444  0100               	movlb	0	; () banked
  5950  000446  6FCE               	movwf	sprintf@c& (0+255),b
  5951  000448                     
  5952                           ; BSR set to: 0
  5953  000448  0100               	movlb	0	; () banked
  5954  00044A  51CE               	movf	sprintf@c& (0+255),w,b
  5955  00044C  0A0A               	xorlw	10
  5956  00044E  B4D8               	btfsc	status,2,c
  5957  000450  D021               	goto	l3892
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5961                           
  5962                           ; BSR set to: 0
  5963                           
  5964                           ; BSR set to: 0
  5965  000452  0100               	movlb	0	; () banked
  5966  000454  51CE               	movf	sprintf@c& (0+255),w,b
  5967  000456  0D04               	mullw	4
  5968  000458  0E9D               	movlw	low _dpowers
  5969  00045A  24F3               	addwf	prodl,w,c
  5970  00045C  6EF6               	movwf	tblptrl,c
  5971  00045E  0E7E               	movlw	high _dpowers
  5972  000460  20F4               	addwfc	prodh,w,c
  5973  000462  6EF7               	movwf	tblptrh,c
  5974  000464                     	if	1	;There are 3 active tblptr bytes
  5975  000464  6AF8               	clrf	tblptru,c
  5976  000466  0E00               	movlw	low (__mediumconst shr (0+16))
  5977  000468  22F8               	addwfc	tblptru,f,c
  5978  00046A                     	endif
  5979  00046A  0009               	tblrd		*+
  5980  00046C  50F5               	movf	tablat,w,c
  5981  00046E  0100               	movlb	0	; () banked
  5982  000470  5DC4               	subwf	sprintf@_val& (0+255),w,b
  5983  000472  0009               	tblrd		*+
  5984  000474  50F5               	movf	tablat,w,c
  5985  000476  0100               	movlb	0	; () banked
  5986  000478  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5987  00047A  0009               	tblrd		*+
  5988  00047C  50F5               	movf	tablat,w,c
  5989  00047E  0100               	movlb	0	; () banked
  5990  000480  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5991  000482  0009               	tblrd		*+
  5992  000484  50F5               	movf	tablat,w,c
  5993  000486  0100               	movlb	0	; () banked
  5994  000488  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5995  00048A  A0D8               	btfss	status,0,c
  5996  00048C  D003               	goto	l3892
  5997                           
  5998                           ; BSR set to: 0
  5999                           
  6000                           ; BSR set to: 0
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;doprnt.c: 1147: break;
  6004  00048E  0100               	movlb	0	; () banked
  6005  000490  2BCE               	incf	sprintf@c& (0+255),f,b
  6006  000492  D7DA               	goto	L9
  6007  000494                     l3892:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;doprnt.c: 1184: {
  6011                           ;doprnt.c: 1197: if(flag & 0x03)
  6012  000494  0E03               	movlw	3
  6013  000496  0100               	movlb	0	; () banked
  6014  000498  15BD               	andwf	sprintf@flag& (0+255),w,b
  6015  00049A  0100               	movlb	0	; () banked
  6016  00049C  6FA6               	movwf	??_sprintf& (0+255),b
  6017  00049E  0E00               	movlw	0
  6018  0004A0  0100               	movlb	0	; () banked
  6019  0004A2  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6020  0004A4  0100               	movlb	0	; () banked
  6021  0004A6  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  6022  0004A8  0100               	movlb	0	; () banked
  6023  0004AA  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  6024  0004AC  11A6               	iorwf	??_sprintf& (0+255),w,b
  6025  0004AE  B4D8               	btfsc	status,2,c
  6026  0004B0  D05D               	goto	l3906
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  6030  0004B2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6031  0004B6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6032  0004BA  0E2D               	movlw	45
  6033  0004BC  D053               	goto	L10
  6034  0004BE                     l3898:
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;doprnt.c: 1209: {
  6038                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  6039  0004BE  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6040  0004C2  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6041  0004C6  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6042  0004CA  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6043  0004CE  0100               	movlb	0	; () banked
  6044  0004D0  51CE               	movf	sprintf@c& (0+255),w,b
  6045  0004D2  0D04               	mullw	4
  6046  0004D4  0E9D               	movlw	low _dpowers
  6047  0004D6  24F3               	addwf	prodl,w,c
  6048  0004D8  6EF6               	movwf	tblptrl,c
  6049  0004DA  0E7E               	movlw	high _dpowers
  6050  0004DC  20F4               	addwfc	prodh,w,c
  6051  0004DE  6EF7               	movwf	tblptrh,c
  6052  0004E0                     	if	1	;There are 3 active tblptr bytes
  6053  0004E0  6AF8               	clrf	tblptru,c
  6054  0004E2  0E00               	movlw	low (__mediumconst shr (0+16))
  6055  0004E4  22F8               	addwfc	tblptru,f,c
  6056  0004E6                     	endif
  6057  0004E6  0009               	tblrd		*+
  6058  0004E8  0100               	movlb	0	; () banked
  6059  0004EA  CFF5 F064          	movff	tablat,___lldiv@divisor
  6060  0004EE  0009               	tblrd		*+
  6061  0004F0  0100               	movlb	0	; () banked
  6062  0004F2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6063  0004F6  0009               	tblrd		*+
  6064  0004F8  0100               	movlb	0	; () banked
  6065  0004FA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6066  0004FE  000A               	tblrd		*-
  6067  000500  0100               	movlb	0	; () banked
  6068  000502  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6069  000506  ECC5  F010         	call	___lldiv	;wreg free
  6070  00050A  C060  F0B3         	movff	?___lldiv,sprintf@vd
  6071  00050E  C061  F0B4         	movff	?___lldiv+1,sprintf@vd+1
  6072  000512  C062  F0B5         	movff	?___lldiv+2,sprintf@vd+2
  6073  000516  C063  F0B6         	movff	?___lldiv+3,sprintf@vd+3
  6074                           
  6075                           ;doprnt.c: 1211: vd %= 10;
  6076  00051A  C0B3  F06D         	movff	sprintf@vd,___llmod@dividend
  6077  00051E  C0B4  F06E         	movff	sprintf@vd+1,___llmod@dividend+1
  6078  000522  C0B5  F06F         	movff	sprintf@vd+2,___llmod@dividend+2
  6079  000526  C0B6  F070         	movff	sprintf@vd+3,___llmod@dividend+3
  6080  00052A  0E0A               	movlw	10
  6081  00052C  0100               	movlb	0	; () banked
  6082  00052E  6F71               	movwf	___llmod@divisor& (0+255),b
  6083  000530  0E00               	movlw	0
  6084  000532  0100               	movlb	0	; () banked
  6085  000534  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6086  000536  0E00               	movlw	0
  6087  000538  0100               	movlb	0	; () banked
  6088  00053A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6089  00053C  0E00               	movlw	0
  6090  00053E  0100               	movlb	0	; () banked
  6091  000540  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6092  000542  EC42  F014         	call	___llmod	;wreg free
  6093  000546  C06D  F0B3         	movff	?___llmod,sprintf@vd
  6094  00054A  C06E  F0B4         	movff	?___llmod+1,sprintf@vd+1
  6095  00054E  C06F  F0B5         	movff	?___llmod+2,sprintf@vd+2
  6096  000552  C070  F0B6         	movff	?___llmod+3,sprintf@vd+3
  6097                           
  6098                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  6099  000556  0100               	movlb	0	; () banked
  6100  000558  51B3               	movf	sprintf@vd& (0+255),w,b
  6101  00055A  0F30               	addlw	48
  6102  00055C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6103  000560  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6104  000564                     L10:
  6105  000564  6EDF               	movwf	indf2,c
  6106                           
  6107                           ; BSR set to: 0
  6108  000566  0100               	movlb	0	; () banked
  6109  000568  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6110  00056A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6111  00056C                     l3906:
  6112                           
  6113                           ; BSR set to: 0
  6114  00056C  0100               	movlb	0	; () banked
  6115  00056E  07CE               	decf	sprintf@c& (0+255),f,b
  6116  000570  0100               	movlb	0	; () banked
  6117  000572  29CE               	incf	sprintf@c& (0+255),w,b
  6118  000574  B4D8               	btfsc	status,2,c
  6119  000576  D00E               	goto	l3914
  6120  000578  D7A2               	goto	l3898
  6121  00057A                     l3908:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  6125  00057A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6126  00057E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6127  000582  0E30               	movlw	48
  6128  000584  6EDF               	movwf	indf2,c
  6129                           
  6130                           ; BSR set to: 0
  6131  000586  0100               	movlb	0	; () banked
  6132  000588  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6133  00058A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;doprnt.c: 1218: exp--;
  6137  00058C  0100               	movlb	0	; () banked
  6138  00058E  07C9               	decf	sprintf@exp& (0+255),f,b
  6139  000590  A0D8               	btfss	status,0,c
  6140  000592  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  6141  000594                     l3914:
  6142                           
  6143                           ; BSR set to: 0
  6144  000594  0100               	movlb	0	; () banked
  6145  000596  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  6146  000598  0A80               	xorlw	128
  6147  00059A  6EF3               	movwf	prodl,c
  6148  00059C  0E80               	movlw	128
  6149  00059E  5CF3               	subwf	prodl,w,c
  6150  0005A0  0E01               	movlw	1
  6151  0005A2  B4D8               	btfsc	status,2,c
  6152  0005A4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  6153  0005A6  B0D8               	btfsc	status,0,c
  6154  0005A8  D7E8               	goto	l3908
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;doprnt.c: 1219: }
  6158                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6159                           
  6160                           ; BSR set to: 0
  6161  0005AA  0100               	movlb	0	; () banked
  6162  0005AC  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6163  0005AE  0A80               	xorlw	128
  6164  0005B0  0F80               	addlw	-128
  6165  0005B2  0E09               	movlw	9
  6166  0005B4  B4D8               	btfsc	status,2,c
  6167  0005B6  5DC2               	subwf	sprintf@prec& (0+255),w,b
  6168  0005B8  A0D8               	btfss	status,0,c
  6169  0005BA  D004               	goto	l558
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6173  0005BC  0E08               	movlw	8
  6174  0005BE  0100               	movlb	0	; () banked
  6175  0005C0  6FCE               	movwf	sprintf@c& (0+255),b
  6176  0005C2  D002               	goto	l3920
  6177  0005C4                     l558:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;doprnt.c: 1222: else
  6181                           ;doprnt.c: 1223: c = prec;
  6182  0005C4  C0C2  F0CE         	movff	sprintf@prec,sprintf@c
  6183  0005C8                     l3920:
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;doprnt.c: 1224: prec -= c;
  6187  0005C8  0100               	movlb	0	; () banked
  6188  0005CA  51CE               	movf	sprintf@c& (0+255),w,b
  6189  0005CC  0100               	movlb	0	; () banked
  6190  0005CE  5FC2               	subwf	sprintf@prec& (0+255),f,b
  6191  0005D0  0E00               	movlw	0
  6192  0005D2  0100               	movlb	0	; () banked
  6193  0005D4  BFCE               	btfsc	sprintf@c& (0+255),7,b
  6194  0005D6  0EFF               	movlw	255
  6195  0005D8  0100               	movlb	0	; () banked
  6196  0005DA  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;doprnt.c: 1228: if(c)
  6200  0005DC  0100               	movlb	0	; () banked
  6201  0005DE  51CE               	movf	sprintf@c& (0+255),w,b
  6202  0005E0  B4D8               	btfsc	status,2,c
  6203  0005E2  D009               	goto	l3928
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  6207  0005E4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6208  0005E8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6209  0005EC  0E2E               	movlw	46
  6210  0005EE  6EDF               	movwf	indf2,c
  6211                           
  6212                           ; BSR set to: 0
  6213  0005F0  0100               	movlb	0	; () banked
  6214  0005F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6215  0005F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6216  0005F6                     l3928:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6220  0005F6  0100               	movlb	0	; () banked
  6221  0005F8  51CE               	movf	sprintf@c& (0+255),w,b
  6222  0005FA  ECCD  F004         	call	_scale
  6223  0005FE  C083  F0AC         	movff	?_scale,_sprintf$2983
  6224  000602  C084  F0AD         	movff	?_scale+1,_sprintf$2983+1
  6225  000606  C085  F0AE         	movff	?_scale+2,_sprintf$2983+2
  6226                           
  6227                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6228  00060A  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  6229  00060E  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  6230  000612  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  6231  000616  C0AC  F074         	movff	_sprintf$2983,___ftmul@f1
  6232  00061A  C0AD  F075         	movff	_sprintf$2983+1,___ftmul@f1+1
  6233  00061E  C0AE  F076         	movff	_sprintf$2983+2,___ftmul@f1+2
  6234  000622  ECD0  F00C         	call	___ftmul	;wreg free
  6235  000626  C074  F08A         	movff	?___ftmul,___fttol@f1
  6236  00062A  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  6237  00062E  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  6238  000632  EC30  F00E         	call	___fttol	;wreg free
  6239  000636  C08A  F0C4         	movff	?___fttol,sprintf@_val
  6240  00063A  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  6241  00063E  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  6242  000642  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  6243                           
  6244                           ;doprnt.c: 1237: while(c--) {
  6245  000646  D085               	goto	l3942
  6246  000648                     l3932:
  6247                           
  6248                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  6249  000648  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6250  00064C  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6251  000650  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6252  000654  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6253  000658  0100               	movlb	0	; () banked
  6254  00065A  51CE               	movf	sprintf@c& (0+255),w,b
  6255  00065C  0D04               	mullw	4
  6256  00065E  0E9D               	movlw	low _dpowers
  6257  000660  24F3               	addwf	prodl,w,c
  6258  000662  6EF6               	movwf	tblptrl,c
  6259  000664  0E7E               	movlw	high _dpowers
  6260  000666  20F4               	addwfc	prodh,w,c
  6261  000668  6EF7               	movwf	tblptrh,c
  6262  00066A                     	if	1	;There are 3 active tblptr bytes
  6263  00066A  6AF8               	clrf	tblptru,c
  6264  00066C  0E00               	movlw	low (__mediumconst shr (0+16))
  6265  00066E  22F8               	addwfc	tblptru,f,c
  6266  000670                     	endif
  6267  000670  0009               	tblrd		*+
  6268  000672  0100               	movlb	0	; () banked
  6269  000674  CFF5 F064          	movff	tablat,___lldiv@divisor
  6270  000678  0009               	tblrd		*+
  6271  00067A  0100               	movlb	0	; () banked
  6272  00067C  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6273  000680  0009               	tblrd		*+
  6274  000682  0100               	movlb	0	; () banked
  6275  000684  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6276  000688  000A               	tblrd		*-
  6277  00068A  0100               	movlb	0	; () banked
  6278  00068C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6279  000690  ECC5  F010         	call	___lldiv	;wreg free
  6280  000694  C060  F0B7         	movff	?___lldiv,sprintf@vd_1955
  6281  000698  C061  F0B8         	movff	?___lldiv+1,sprintf@vd_1955+1
  6282  00069C  C062  F0B9         	movff	?___lldiv+2,sprintf@vd_1955+2
  6283  0006A0  C063  F0BA         	movff	?___lldiv+3,sprintf@vd_1955+3
  6284                           
  6285                           ;doprnt.c: 1239: vd %= 10;
  6286  0006A4  C0B7  F06D         	movff	sprintf@vd_1955,___llmod@dividend
  6287  0006A8  C0B8  F06E         	movff	sprintf@vd_1955+1,___llmod@dividend+1
  6288  0006AC  C0B9  F06F         	movff	sprintf@vd_1955+2,___llmod@dividend+2
  6289  0006B0  C0BA  F070         	movff	sprintf@vd_1955+3,___llmod@dividend+3
  6290  0006B4  0E0A               	movlw	10
  6291  0006B6  0100               	movlb	0	; () banked
  6292  0006B8  6F71               	movwf	___llmod@divisor& (0+255),b
  6293  0006BA  0E00               	movlw	0
  6294  0006BC  0100               	movlb	0	; () banked
  6295  0006BE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6296  0006C0  0E00               	movlw	0
  6297  0006C2  0100               	movlb	0	; () banked
  6298  0006C4  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6299  0006C6  0E00               	movlw	0
  6300  0006C8  0100               	movlb	0	; () banked
  6301  0006CA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6302  0006CC  EC42  F014         	call	___llmod	;wreg free
  6303  0006D0  C06D  F0B7         	movff	?___llmod,sprintf@vd_1955
  6304  0006D4  C06E  F0B8         	movff	?___llmod+1,sprintf@vd_1955+1
  6305  0006D8  C06F  F0B9         	movff	?___llmod+2,sprintf@vd_1955+2
  6306  0006DC  C070  F0BA         	movff	?___llmod+3,sprintf@vd_1955+3
  6307                           
  6308                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  6309  0006E0  0100               	movlb	0	; () banked
  6310  0006E2  51B7               	movf	sprintf@vd_1955& (0+255),w,b
  6311  0006E4  0F30               	addlw	48
  6312  0006E6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6313  0006EA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6314  0006EE  6EDF               	movwf	indf2,c
  6315                           
  6316                           ; BSR set to: 0
  6317  0006F0  0100               	movlb	0	; () banked
  6318  0006F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6319  0006F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  6323  0006F6  C0C4  F06D         	movff	sprintf@_val,___llmod@dividend
  6324  0006FA  C0C5  F06E         	movff	sprintf@_val+1,___llmod@dividend+1
  6325  0006FE  C0C6  F06F         	movff	sprintf@_val+2,___llmod@dividend+2
  6326  000702  C0C7  F070         	movff	sprintf@_val+3,___llmod@dividend+3
  6327  000706  0100               	movlb	0	; () banked
  6328  000708  51CE               	movf	sprintf@c& (0+255),w,b
  6329  00070A  0D04               	mullw	4
  6330  00070C  0E9D               	movlw	low _dpowers
  6331  00070E  24F3               	addwf	prodl,w,c
  6332  000710  6EF6               	movwf	tblptrl,c
  6333  000712  0E7E               	movlw	high _dpowers
  6334  000714  20F4               	addwfc	prodh,w,c
  6335  000716  6EF7               	movwf	tblptrh,c
  6336  000718                     	if	1	;There are 3 active tblptr bytes
  6337  000718  6AF8               	clrf	tblptru,c
  6338  00071A  0E00               	movlw	low (__mediumconst shr (0+16))
  6339  00071C  22F8               	addwfc	tblptru,f,c
  6340  00071E                     	endif
  6341  00071E  0009               	tblrd		*+
  6342  000720  0100               	movlb	0	; () banked
  6343  000722  CFF5 F071          	movff	tablat,___llmod@divisor
  6344  000726  0009               	tblrd		*+
  6345  000728  0100               	movlb	0	; () banked
  6346  00072A  CFF5 F072          	movff	tablat,___llmod@divisor+1
  6347  00072E  0009               	tblrd		*+
  6348  000730  0100               	movlb	0	; () banked
  6349  000732  CFF5 F073          	movff	tablat,___llmod@divisor+2
  6350  000736  000A               	tblrd		*-
  6351  000738  0100               	movlb	0	; () banked
  6352  00073A  CFF5 F074          	movff	tablat,___llmod@divisor+3
  6353  00073E  EC42  F014         	call	___llmod	;wreg free
  6354  000742  C06D  F0C4         	movff	?___llmod,sprintf@_val
  6355  000746  C06E  F0C5         	movff	?___llmod+1,sprintf@_val+1
  6356  00074A  C06F  F0C6         	movff	?___llmod+2,sprintf@_val+2
  6357  00074E  C070  F0C7         	movff	?___llmod+3,sprintf@_val+3
  6358  000752                     l3942:
  6359  000752  0100               	movlb	0	; () banked
  6360  000754  07CE               	decf	sprintf@c& (0+255),f,b
  6361  000756  0100               	movlb	0	; () banked
  6362  000758  29CE               	incf	sprintf@c& (0+255),w,b
  6363  00075A  B4D8               	btfsc	status,2,c
  6364  00075C  D00E               	goto	l3950
  6365  00075E  D774               	goto	l3932
  6366  000760                     l3944:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  6370  000760  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6371  000764  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6372  000768  0E30               	movlw	48
  6373  00076A  6EDF               	movwf	indf2,c
  6374                           
  6375                           ; BSR set to: 0
  6376  00076C  0100               	movlb	0	; () banked
  6377  00076E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6378  000770  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;doprnt.c: 1246: prec--;
  6382  000772  0100               	movlb	0	; () banked
  6383  000774  07C2               	decf	sprintf@prec& (0+255),f,b
  6384  000776  A0D8               	btfss	status,0,c
  6385  000778  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6386  00077A                     l3950:
  6387                           
  6388                           ; BSR set to: 0
  6389  00077A  0100               	movlb	0	; () banked
  6390  00077C  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6391  00077E  11C2               	iorwf	sprintf@prec& (0+255),w,b
  6392  000780  B4D8               	btfsc	status,2,c
  6393  000782  D0F2               	goto	l3992
  6394  000784  D7ED               	goto	l3944
  6395  000786                     l3952:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;doprnt.c: 1255: }
  6399                           ;doprnt.c: 1262: {
  6400                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6401  000786  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  6402  00078A  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  6403  00078E  0100               	movlb	0	; () banked
  6404  000790  CFDE F0C4          	movff	postinc2,sprintf@_val
  6405  000794  0100               	movlb	0	; () banked
  6406  000796  CFDD F0C5          	movff	postdec2,sprintf@_val+1
  6407  00079A  0100               	movlb	0	; () banked
  6408  00079C  0E00               	movlw	0
  6409  00079E  0100               	movlb	0	; () banked
  6410  0007A0  BFC5               	btfsc	(sprintf@_val+1)& (0+255),7,b
  6411  0007A2  0EFF               	movlw	-1
  6412  0007A4  0100               	movlb	0	; () banked
  6413  0007A6  6FC6               	movwf	(sprintf@_val+2)& (0+255),b
  6414  0007A8  0100               	movlb	0	; () banked
  6415  0007AA  6FC7               	movwf	(sprintf@_val+3)& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418  0007AC  0E02               	movlw	2
  6419  0007AE  0100               	movlb	0	; () banked
  6420  0007B0  27BB               	addwf	sprintf@ap& (0+255),f,b
  6421  0007B2  0E00               	movlw	0
  6422  0007B4  0100               	movlb	0	; () banked
  6423  0007B6  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  6427  0007B8  0100               	movlb	0	; () banked
  6428  0007BA  51C7               	movf	(sprintf@_val+3)& (0+255),w,b
  6429  0007BC  0A80               	xorlw	128
  6430  0007BE  0F80               	addlw	128
  6431  0007C0  E10B               	bnz	u4005
  6432  0007C2  0E00               	movlw	0
  6433  0007C4  0100               	movlb	0	; () banked
  6434  0007C6  5DC6               	subwf	(sprintf@_val+2)& (0+255),w,b
  6435  0007C8  E107               	bnz	u4005
  6436  0007CA  0E00               	movlw	0
  6437  0007CC  0100               	movlb	0	; () banked
  6438  0007CE  5DC5               	subwf	(sprintf@_val+1)& (0+255),w,b
  6439  0007D0  E103               	bnz	u4005
  6440  0007D2  0E00               	movlw	0
  6441  0007D4  0100               	movlb	0	; () banked
  6442  0007D6  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6443  0007D8                     u4005:
  6444  0007D8  B0D8               	btfsc	status,0,c
  6445  0007DA  D012               	goto	l3962
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;doprnt.c: 1271: flag |= 0x03;
  6449  0007DC  0E03               	movlw	3
  6450  0007DE  0100               	movlb	0	; () banked
  6451  0007E0  13BD               	iorwf	sprintf@flag& (0+255),f,b
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;doprnt.c: 1272: _val._val = -_val._val;
  6455  0007E2  0100               	movlb	0	; () banked
  6456  0007E4  1FC7               	comf	(sprintf@_val+3)& (0+255),f,b
  6457  0007E6  0100               	movlb	0	; () banked
  6458  0007E8  1FC6               	comf	(sprintf@_val+2)& (0+255),f,b
  6459  0007EA  0100               	movlb	0	; () banked
  6460  0007EC  1FC5               	comf	(sprintf@_val+1)& (0+255),f,b
  6461  0007EE  0100               	movlb	0	; () banked
  6462  0007F0  6DC4               	negf	sprintf@_val& (0+255),b
  6463  0007F2  0E00               	movlw	0
  6464  0007F4  0100               	movlb	0	; () banked
  6465  0007F6  23C5               	addwfc	(sprintf@_val+1)& (0+255),f,b
  6466  0007F8  0100               	movlb	0	; () banked
  6467  0007FA  23C6               	addwfc	(sprintf@_val+2)& (0+255),f,b
  6468  0007FC  0100               	movlb	0	; () banked
  6469  0007FE  23C7               	addwfc	(sprintf@_val+3)& (0+255),f,b
  6470  000800                     l3962:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;doprnt.c: 1273: }
  6474                           ;doprnt.c: 1275: }
  6475                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6476  000800  0E01               	movlw	1
  6477  000802  0100               	movlb	0	; () banked
  6478  000804  6FCE               	movwf	sprintf@c& (0+255),b
  6479  000806                     
  6480                           ; BSR set to: 0
  6481  000806  0100               	movlb	0	; () banked
  6482  000808  51CE               	movf	sprintf@c& (0+255),w,b
  6483  00080A  0A0A               	xorlw	10
  6484  00080C  B4D8               	btfsc	status,2,c
  6485  00080E  D021               	goto	l3976
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  6489                           
  6490                           ; BSR set to: 0
  6491                           
  6492                           ; BSR set to: 0
  6493  000810  0100               	movlb	0	; () banked
  6494  000812  51CE               	movf	sprintf@c& (0+255),w,b
  6495  000814  0D04               	mullw	4
  6496  000816  0E9D               	movlw	low _dpowers
  6497  000818  24F3               	addwf	prodl,w,c
  6498  00081A  6EF6               	movwf	tblptrl,c
  6499  00081C  0E7E               	movlw	high _dpowers
  6500  00081E  20F4               	addwfc	prodh,w,c
  6501  000820  6EF7               	movwf	tblptrh,c
  6502  000822                     	if	1	;There are 3 active tblptr bytes
  6503  000822  6AF8               	clrf	tblptru,c
  6504  000824  0E00               	movlw	low (__mediumconst shr (0+16))
  6505  000826  22F8               	addwfc	tblptru,f,c
  6506  000828                     	endif
  6507  000828  0009               	tblrd		*+
  6508  00082A  50F5               	movf	tablat,w,c
  6509  00082C  0100               	movlb	0	; () banked
  6510  00082E  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6511  000830  0009               	tblrd		*+
  6512  000832  50F5               	movf	tablat,w,c
  6513  000834  0100               	movlb	0	; () banked
  6514  000836  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6515  000838  0009               	tblrd		*+
  6516  00083A  50F5               	movf	tablat,w,c
  6517  00083C  0100               	movlb	0	; () banked
  6518  00083E  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6519  000840  0009               	tblrd		*+
  6520  000842  50F5               	movf	tablat,w,c
  6521  000844  0100               	movlb	0	; () banked
  6522  000846  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6523  000848  A0D8               	btfss	status,0,c
  6524  00084A  D003               	goto	l3976
  6525                           
  6526                           ; BSR set to: 0
  6527                           
  6528                           ; BSR set to: 0
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;doprnt.c: 1316: break;
  6532  00084C  0100               	movlb	0	; () banked
  6533  00084E  2BCE               	incf	sprintf@c& (0+255),f,b
  6534  000850  D7DA               	goto	L11
  6535  000852                     l3976:
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;doprnt.c: 1431: {
  6539                           ;doprnt.c: 1447: if(flag & 0x03)
  6540  000852  0E03               	movlw	3
  6541  000854  0100               	movlb	0	; () banked
  6542  000856  15BD               	andwf	sprintf@flag& (0+255),w,b
  6543  000858  0100               	movlb	0	; () banked
  6544  00085A  6FA6               	movwf	??_sprintf& (0+255),b
  6545  00085C  0E00               	movlw	0
  6546  00085E  0100               	movlb	0	; () banked
  6547  000860  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6548  000862  0100               	movlb	0	; () banked
  6549  000864  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  6550  000866  0100               	movlb	0	; () banked
  6551  000868  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  6552  00086A  11A6               	iorwf	??_sprintf& (0+255),w,b
  6553  00086C  B4D8               	btfsc	status,2,c
  6554  00086E  D009               	goto	l3982
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6558  000870  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6559  000874  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6560  000878  0E2D               	movlw	45
  6561  00087A  6EDF               	movwf	indf2,c
  6562                           
  6563                           ; BSR set to: 0
  6564  00087C  0100               	movlb	0	; () banked
  6565  00087E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6566  000880  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6567  000882                     l3982:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;doprnt.c: 1478: }
  6571                           ;doprnt.c: 1481: prec = c;
  6572  000882  0100               	movlb	0	; () banked
  6573  000884  51CE               	movf	sprintf@c& (0+255),w,b
  6574  000886  0100               	movlb	0	; () banked
  6575  000888  6FC2               	movwf	sprintf@prec& (0+255),b
  6576  00088A  0100               	movlb	0	; () banked
  6577  00088C  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  6578  00088E  0100               	movlb	0	; () banked
  6579  000890  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  6580  000892  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6581                           
  6582                           ;doprnt.c: 1483: while(prec--) {
  6583  000894  D05F               	goto	l3990
  6584  000896                     l3984:
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;doprnt.c: 1487: {
  6588                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6589  000896  0100               	movlb	0	; () banked
  6590  000898  C0C2  F0A6         	movff	sprintf@prec,??_sprintf
  6591  00089C  0100               	movlb	0	; () banked
  6592  00089E  C0C3  F0A7         	movff	sprintf@prec+1,??_sprintf+1
  6593  0008A2  0100               	movlb	0	; () banked
  6594  0008A4  90D8               	bcf	status,0,c
  6595  0008A6  37A6               	rlcf	??_sprintf& (0+255),f,b
  6596  0008A8  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6597  0008AA  0100               	movlb	0	; () banked
  6598  0008AC  90D8               	bcf	status,0,c
  6599  0008AE  37A6               	rlcf	??_sprintf& (0+255),f,b
  6600  0008B0  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6601  0008B2  0E9D               	movlw	low _dpowers
  6602  0008B4  0100               	movlb	0	; () banked
  6603  0008B6  25A6               	addwf	??_sprintf& (0+255),w,b
  6604  0008B8  6EF6               	movwf	tblptrl,c
  6605  0008BA  0E7E               	movlw	high _dpowers
  6606  0008BC  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  6607  0008BE  6EF7               	movwf	tblptrh,c
  6608  0008C0                     	if	1	;There are 3 active tblptr bytes
  6609  0008C0  6AF8               	clrf	tblptru,c
  6610  0008C2  0E00               	movlw	low (__mediumconst shr (0+16))
  6611  0008C4  22F8               	addwfc	tblptru,f,c
  6612  0008C6                     	endif
  6613  0008C6  0009               	tblrd		*+
  6614  0008C8  0100               	movlb	0	; () banked
  6615  0008CA  CFF5 F064          	movff	tablat,___lldiv@divisor
  6616  0008CE  0009               	tblrd		*+
  6617  0008D0  0100               	movlb	0	; () banked
  6618  0008D2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6619  0008D6  0009               	tblrd		*+
  6620  0008D8  0100               	movlb	0	; () banked
  6621  0008DA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6622  0008DE  000A               	tblrd		*-
  6623  0008E0  0100               	movlb	0	; () banked
  6624  0008E2  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6625  0008E6  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6626  0008EA  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6627  0008EE  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6628  0008F2  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6629  0008F6  ECC5  F010         	call	___lldiv	;wreg free
  6630  0008FA  C060  F06D         	movff	?___lldiv,___llmod@dividend
  6631  0008FE  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  6632  000902  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  6633  000906  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  6634  00090A  0E0A               	movlw	10
  6635  00090C  0100               	movlb	0	; () banked
  6636  00090E  6F71               	movwf	___llmod@divisor& (0+255),b
  6637  000910  0E00               	movlw	0
  6638  000912  0100               	movlb	0	; () banked
  6639  000914  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6640  000916  0E00               	movlw	0
  6641  000918  0100               	movlb	0	; () banked
  6642  00091A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6643  00091C  0E00               	movlw	0
  6644  00091E  0100               	movlb	0	; () banked
  6645  000920  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6646  000922  EC42  F014         	call	___llmod	;wreg free
  6647  000926  C06D  F0A8         	movff	?___llmod,??_sprintf+2
  6648  00092A  C06E  F0A9         	movff	?___llmod+1,??_sprintf+3
  6649  00092E  C06F  F0AA         	movff	?___llmod+2,??_sprintf+4
  6650  000932  C070  F0AB         	movff	?___llmod+3,??_sprintf+5
  6651  000936  0100               	movlb	0	; () banked
  6652  000938  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  6653  00093A  0F30               	addlw	48
  6654  00093C  0100               	movlb	0	; () banked
  6655  00093E  6FCE               	movwf	sprintf@c& (0+255),b
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;doprnt.c: 1532: }
  6659                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6660  000940  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6661  000944  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6662  000948  0100               	movlb	0	; () banked
  6663  00094A  C0CE  FFDF         	movff	sprintf@c,indf2
  6664                           
  6665                           ; BSR set to: 0
  6666  00094E  0100               	movlb	0	; () banked
  6667  000950  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6668  000952  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6669  000954                     l3990:
  6670                           
  6671                           ; BSR set to: 0
  6672  000954  0100               	movlb	0	; () banked
  6673  000956  07C2               	decf	sprintf@prec& (0+255),f,b
  6674  000958  A0D8               	btfss	status,0,c
  6675  00095A  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6676  00095C  0100               	movlb	0	; () banked
  6677  00095E  29C2               	incf	sprintf@prec& (0+255),w,b
  6678  000960  B4D8               	btfsc	status,2,c
  6679  000962  29C3               	incf	(sprintf@prec+1)& (0+255),w,b
  6680  000964  A4D8               	btfss	status,2,c
  6681  000966  D797               	goto	l3984
  6682  000968                     l3992:
  6683                           
  6684                           ; BSR set to: 0
  6685  000968  0100               	movlb	0	; () banked
  6686  00096A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  6687  00096E  0100               	movlb	0	; () banked
  6688  000970  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  6689  000974  0100               	movlb	0	; () banked
  6690  000976  4BA1               	infsnz	sprintf@f& (0+255),f,b
  6691  000978  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  6692  00097A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6693  00097A  6AF8               	clrf	tblptru,c
  6694  00097C                     	endif
  6695  00097C                     	if	0	;tblptru may be non-zero
  6696  00097C                     	endif
  6697  00097C  0008               	tblrd		*
  6698  00097E  0100               	movlb	0	; () banked
  6699  000980  CFF5 F0CE          	movff	tablat,sprintf@c
  6700  000984  0100               	movlb	0	; () banked
  6701  000986  67CE               	tstfsz	sprintf@c& (0+255),b
  6702  000988  EF18  F000         	goto	l3790
  6703  00098C                     l3994:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;doprnt.c: 1547: *sp = 0;
  6707  00098C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6708  000990  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6709  000994  0E00               	movlw	0
  6710  000996  6EDF               	movwf	indf2,c
  6711                           
  6712                           ; BSR set to: 0
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;doprnt.c: 1549: return 0;
  6716                           ;	Return value of _sprintf is never used
  6717  000998  0012               	return	
  6718  00099A                     __end_of_sprintf:
  6719                           	opt stack 0
  6720                           tblptru	equ	0xFF8
  6721                           tblptrh	equ	0xFF7
  6722                           tblptrl	equ	0xFF6
  6723                           tablat	equ	0xFF5
  6724                           prodh	equ	0xFF4
  6725                           prodl	equ	0xFF3
  6726                           intcon	equ	0xFF2
  6727                           intcon2	equ	0xFF1
  6728                           intcon3	equ	0xFF0
  6729                           indf0	equ	0xFEF
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           postinc1	equ	0xFE6
  6735                           postdec1	equ	0xFE5
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _scale *****************
  6745 ;; Defined at:
  6746 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  scl             1    wreg     char 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  scl             1   41[BANK0 ] char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  3   35[BANK0 ] char 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6760 ;;      Params:         0       3       0       0       0       0       0       0       0
  6761 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6763 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6764 ;;Total ram usage:        7 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    6
  6767 ;; This function calls:
  6768 ;;		___awdiv
  6769 ;;		___awmod
  6770 ;;		___ftmul
  6771 ;;		___wmul
  6772 ;; This function is called by:
  6773 ;;		_sprintf
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text30
  6778  00099A                     __ptext30:
  6779                           	opt stack 0
  6780  00099A                     _scale:
  6781                           	opt stack 21
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;incstack = 0
  6785                           ;scale@scl stored from wreg
  6786  00099A  0100               	movlb	0	; () banked
  6787  00099C  6F89               	movwf	scale@scl& (0+255),b
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;doprnt.c: 428: if(scl < 0) {
  6791  00099E  0100               	movlb	0	; () banked
  6792  0009A0  AF89               	btfss	scale@scl& (0+255),7,b
  6793  0009A2  D152               	goto	l3522
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;doprnt.c: 429: scl = -scl;
  6797  0009A4  0100               	movlb	0	; () banked
  6798  0009A6  6D89               	negf	scale@scl& (0+255),b
  6799                           
  6800                           ;doprnt.c: 430: if(scl>=110)
  6801  0009A8  0100               	movlb	0	; () banked
  6802  0009AA  5189               	movf	scale@scl& (0+255),w,b
  6803  0009AC  0A80               	xorlw	128
  6804  0009AE  0F12               	addlw	-238
  6805  0009B0  A0D8               	btfss	status,0,c
  6806  0009B2  D0C9               	goto	l3512
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6810  0009B4  0E00               	movlw	0
  6811  0009B6  0100               	movlb	0	; () banked
  6812  0009B8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6813  0009BA  0E03               	movlw	3
  6814  0009BC  0100               	movlb	0	; () banked
  6815  0009BE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6816  0009C0  0E00               	movlw	0
  6817  0009C2  0100               	movlb	0	; () banked
  6818  0009C4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6819  0009C6  0E0A               	movlw	10
  6820  0009C8  0100               	movlb	0	; () banked
  6821  0009CA  6F68               	movwf	___awdiv@divisor& (0+255),b
  6822  0009CC  0E00               	movlw	0
  6823  0009CE  0100               	movlb	0	; () banked
  6824  0009D0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6825  0009D2  0E64               	movlw	100
  6826  0009D4  0100               	movlb	0	; () banked
  6827  0009D6  6F62               	movwf	___awmod@divisor& (0+255),b
  6828  0009D8  0100               	movlb	0	; () banked
  6829  0009DA  5189               	movf	scale@scl& (0+255),w,b
  6830  0009DC  0100               	movlb	0	; () banked
  6831  0009DE  6F60               	movwf	___awmod@dividend& (0+255),b
  6832  0009E0  0100               	movlb	0	; () banked
  6833  0009E2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6834  0009E4  0100               	movlb	0	; () banked
  6835  0009E6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6836  0009E8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6837  0009EA  ECCD  F012         	call	___awmod	;wreg free
  6838  0009EE  0100               	movlb	0	; () banked
  6839  0009F0  C060  F066         	movff	?___awmod,___awdiv@dividend
  6840  0009F4  0100               	movlb	0	; () banked
  6841  0009F6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  6842  0009FA  EC54  F010         	call	___awdiv	;wreg free
  6843  0009FE  0E09               	movlw	9
  6844  000A00  0100               	movlb	0	; () banked
  6845  000A02  2566               	addwf	?___awdiv& (0+255),w,b
  6846  000A04  0100               	movlb	0	; () banked
  6847  000A06  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6848  000A08  0E00               	movlw	0
  6849  000A0A  0100               	movlb	0	; () banked
  6850  000A0C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6851  000A0E  0100               	movlb	0	; () banked
  6852  000A10  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6853  000A12  EC71  F019         	call	___wmul	;wreg free
  6854  000A16  0EC5               	movlw	low __npowers_
  6855  000A18  0100               	movlb	0	; () banked
  6856  000A1A  256E               	addwf	?___wmul& (0+255),w,b
  6857  000A1C  6EF6               	movwf	tblptrl,c
  6858  000A1E  0E7E               	movlw	high __npowers_
  6859  000A20  0100               	movlb	0	; () banked
  6860  000A22  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6861  000A24  6EF7               	movwf	tblptrh,c
  6862  000A26                     	if	1	;There are 3 active tblptr bytes
  6863  000A26  6AF8               	clrf	tblptru,c
  6864  000A28  0E00               	movlw	low (__mediumconst shr (0+16))
  6865  000A2A  22F8               	addwfc	tblptru,f,c
  6866  000A2C                     	endif
  6867  000A2C  0009               	tblrd		*+
  6868  000A2E  0100               	movlb	0	; () banked
  6869  000A30  CFF5 F077          	movff	tablat,___ftmul@f2
  6870  000A34  0009               	tblrd		*+
  6871  000A36  0100               	movlb	0	; () banked
  6872  000A38  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6873  000A3C  000A               	tblrd		*-
  6874  000A3E  0100               	movlb	0	; () banked
  6875  000A40  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6876  000A44  0E00               	movlw	0
  6877  000A46  0100               	movlb	0	; () banked
  6878  000A48  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6879  000A4A  0E64               	movlw	100
  6880  000A4C  0100               	movlb	0	; () banked
  6881  000A4E  6F68               	movwf	___awdiv@divisor& (0+255),b
  6882  000A50  0100               	movlb	0	; () banked
  6883  000A52  5189               	movf	scale@scl& (0+255),w,b
  6884  000A54  0100               	movlb	0	; () banked
  6885  000A56  6F66               	movwf	___awdiv@dividend& (0+255),b
  6886  000A58  0100               	movlb	0	; () banked
  6887  000A5A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  6888  000A5C  0100               	movlb	0	; () banked
  6889  000A5E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  6890  000A60  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6891  000A62  EC54  F010         	call	___awdiv	;wreg free
  6892  000A66  0E12               	movlw	18
  6893  000A68  0100               	movlb	0	; () banked
  6894  000A6A  2566               	addwf	?___awdiv& (0+255),w,b
  6895  000A6C  0100               	movlb	0	; () banked
  6896  000A6E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6897  000A70  0E00               	movlw	0
  6898  000A72  0100               	movlb	0	; () banked
  6899  000A74  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6900  000A76  0100               	movlb	0	; () banked
  6901  000A78  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6902  000A7A  0E00               	movlw	0
  6903  000A7C  0100               	movlb	0	; () banked
  6904  000A7E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6905  000A80  0E03               	movlw	3
  6906  000A82  0100               	movlb	0	; () banked
  6907  000A84  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6908  000A86  EC71  F019         	call	___wmul	;wreg free
  6909  000A8A  0EC5               	movlw	low __npowers_
  6910  000A8C  0100               	movlb	0	; () banked
  6911  000A8E  256E               	addwf	?___wmul& (0+255),w,b
  6912  000A90  6EF6               	movwf	tblptrl,c
  6913  000A92  0E7E               	movlw	high __npowers_
  6914  000A94  0100               	movlb	0	; () banked
  6915  000A96  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6916  000A98  6EF7               	movwf	tblptrh,c
  6917  000A9A                     	if	1	;There are 3 active tblptr bytes
  6918  000A9A  6AF8               	clrf	tblptru,c
  6919  000A9C  0E00               	movlw	low (__mediumconst shr (0+16))
  6920  000A9E  22F8               	addwfc	tblptru,f,c
  6921  000AA0                     	endif
  6922  000AA0  0009               	tblrd		*+
  6923  000AA2  0100               	movlb	0	; () banked
  6924  000AA4  CFF5 F074          	movff	tablat,___ftmul@f1
  6925  000AA8  0009               	tblrd		*+
  6926  000AAA  0100               	movlb	0	; () banked
  6927  000AAC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  6928  000AB0  000A               	tblrd		*-
  6929  000AB2  0100               	movlb	0	; () banked
  6930  000AB4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  6931  000AB8  ECD0  F00C         	call	___ftmul	;wreg free
  6932  000ABC  C074  F086         	movff	?___ftmul,_scale$2982
  6933  000AC0  C075  F087         	movff	?___ftmul+1,_scale$2982+1
  6934  000AC4  C076  F088         	movff	?___ftmul+2,_scale$2982+2
  6935                           
  6936                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6937  000AC8  C086  F074         	movff	_scale$2982,___ftmul@f1
  6938  000ACC  C087  F075         	movff	_scale$2982+1,___ftmul@f1+1
  6939  000AD0  C088  F076         	movff	_scale$2982+2,___ftmul@f1+2
  6940  000AD4  0E00               	movlw	0
  6941  000AD6  0100               	movlb	0	; () banked
  6942  000AD8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6943  000ADA  0E03               	movlw	3
  6944  000ADC  0100               	movlb	0	; () banked
  6945  000ADE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6946  000AE0  0E00               	movlw	0
  6947  000AE2  0100               	movlb	0	; () banked
  6948  000AE4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6949  000AE6  0E0A               	movlw	10
  6950  000AE8  0100               	movlb	0	; () banked
  6951  000AEA  6F62               	movwf	___awmod@divisor& (0+255),b
  6952  000AEC  0100               	movlb	0	; () banked
  6953  000AEE  5189               	movf	scale@scl& (0+255),w,b
  6954  000AF0  0100               	movlb	0	; () banked
  6955  000AF2  6F60               	movwf	___awmod@dividend& (0+255),b
  6956  000AF4  0100               	movlb	0	; () banked
  6957  000AF6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6958  000AF8  0100               	movlb	0	; () banked
  6959  000AFA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6960  000AFC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6961  000AFE  ECCD  F012         	call	___awmod	;wreg free
  6962  000B02  0100               	movlb	0	; () banked
  6963  000B04  C060  F06E         	movff	?___awmod,___wmul@multiplier
  6964  000B08  0100               	movlb	0	; () banked
  6965  000B0A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  6966  000B0E  EC71  F019         	call	___wmul	;wreg free
  6967  000B12  0EC5               	movlw	low __npowers_
  6968  000B14  0100               	movlb	0	; () banked
  6969  000B16  256E               	addwf	?___wmul& (0+255),w,b
  6970  000B18  6EF6               	movwf	tblptrl,c
  6971  000B1A  0E7E               	movlw	high __npowers_
  6972  000B1C  0100               	movlb	0	; () banked
  6973  000B1E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6974  000B20  6EF7               	movwf	tblptrh,c
  6975  000B22                     	if	1	;There are 3 active tblptr bytes
  6976  000B22  6AF8               	clrf	tblptru,c
  6977  000B24  0E00               	movlw	low (__mediumconst shr (0+16))
  6978  000B26  22F8               	addwfc	tblptru,f,c
  6979  000B28                     	endif
  6980  000B28  0009               	tblrd		*+
  6981  000B2A  0100               	movlb	0	; () banked
  6982  000B2C  CFF5 F077          	movff	tablat,___ftmul@f2
  6983  000B30  0009               	tblrd		*+
  6984  000B32  0100               	movlb	0	; () banked
  6985  000B34  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6986  000B38  000A               	tblrd		*-
  6987  000B3A  0100               	movlb	0	; () banked
  6988  000B3C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6989  000B40  ECD0  F00C         	call	___ftmul	;wreg free
  6990  000B44  D1C8               	goto	L15
  6991  000B46                     l3512:
  6992                           
  6993                           ;doprnt.c: 432: else if(scl > 10)
  6994  000B46  0100               	movlb	0	; () banked
  6995  000B48  5189               	movf	scale@scl& (0+255),w,b
  6996  000B4A  0A80               	xorlw	128
  6997  000B4C  0F75               	addlw	-139
  6998  000B4E  A0D8               	btfss	status,0,c
  6999  000B50  D073               	goto	l3518
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7003  000B52  0E00               	movlw	0
  7004  000B54  0100               	movlb	0	; () banked
  7005  000B56  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7006  000B58  0E0A               	movlw	10
  7007  000B5A  0100               	movlb	0	; () banked
  7008  000B5C  6F68               	movwf	___awdiv@divisor& (0+255),b
  7009  000B5E  0100               	movlb	0	; () banked
  7010  000B60  5189               	movf	scale@scl& (0+255),w,b
  7011  000B62  0100               	movlb	0	; () banked
  7012  000B64  6F66               	movwf	___awdiv@dividend& (0+255),b
  7013  000B66  0100               	movlb	0	; () banked
  7014  000B68  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7015  000B6A  0100               	movlb	0	; () banked
  7016  000B6C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7017  000B6E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7018  000B70  EC54  F010         	call	___awdiv	;wreg free
  7019  000B74  0E09               	movlw	9
  7020  000B76  0100               	movlb	0	; () banked
  7021  000B78  2566               	addwf	?___awdiv& (0+255),w,b
  7022  000B7A  0100               	movlb	0	; () banked
  7023  000B7C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7024  000B7E  0E00               	movlw	0
  7025  000B80  0100               	movlb	0	; () banked
  7026  000B82  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7027  000B84  0100               	movlb	0	; () banked
  7028  000B86  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7029  000B88  0E00               	movlw	0
  7030  000B8A  0100               	movlb	0	; () banked
  7031  000B8C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7032  000B8E  0E03               	movlw	3
  7033  000B90  0100               	movlb	0	; () banked
  7034  000B92  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7035  000B94  EC71  F019         	call	___wmul	;wreg free
  7036  000B98  0EC5               	movlw	low __npowers_
  7037  000B9A  0100               	movlb	0	; () banked
  7038  000B9C  256E               	addwf	?___wmul& (0+255),w,b
  7039  000B9E  6EF6               	movwf	tblptrl,c
  7040  000BA0  0E7E               	movlw	high __npowers_
  7041  000BA2  0100               	movlb	0	; () banked
  7042  000BA4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7043  000BA6  6EF7               	movwf	tblptrh,c
  7044  000BA8                     	if	1	;There are 3 active tblptr bytes
  7045  000BA8  6AF8               	clrf	tblptru,c
  7046  000BAA  0E00               	movlw	low (__mediumconst shr (0+16))
  7047  000BAC  22F8               	addwfc	tblptru,f,c
  7048  000BAE                     	endif
  7049  000BAE  0009               	tblrd		*+
  7050  000BB0  0100               	movlb	0	; () banked
  7051  000BB2  CFF5 F074          	movff	tablat,___ftmul@f1
  7052  000BB6  0009               	tblrd		*+
  7053  000BB8  0100               	movlb	0	; () banked
  7054  000BBA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7055  000BBE  000A               	tblrd		*-
  7056  000BC0  0100               	movlb	0	; () banked
  7057  000BC2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7058  000BC6  0E00               	movlw	0
  7059  000BC8  0100               	movlb	0	; () banked
  7060  000BCA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7061  000BCC  0E03               	movlw	3
  7062  000BCE  0100               	movlb	0	; () banked
  7063  000BD0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7064  000BD2  0E00               	movlw	0
  7065  000BD4  0100               	movlb	0	; () banked
  7066  000BD6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7067  000BD8  0E0A               	movlw	10
  7068  000BDA  0100               	movlb	0	; () banked
  7069  000BDC  6F62               	movwf	___awmod@divisor& (0+255),b
  7070  000BDE  0100               	movlb	0	; () banked
  7071  000BE0  5189               	movf	scale@scl& (0+255),w,b
  7072  000BE2  0100               	movlb	0	; () banked
  7073  000BE4  6F60               	movwf	___awmod@dividend& (0+255),b
  7074  000BE6  0100               	movlb	0	; () banked
  7075  000BE8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7076  000BEA  0100               	movlb	0	; () banked
  7077  000BEC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7078  000BEE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7079  000BF0  ECCD  F012         	call	___awmod	;wreg free
  7080  000BF4  0100               	movlb	0	; () banked
  7081  000BF6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7082  000BFA  0100               	movlb	0	; () banked
  7083  000BFC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7084  000C00  EC71  F019         	call	___wmul	;wreg free
  7085  000C04  0EC5               	movlw	low __npowers_
  7086  000C06  0100               	movlb	0	; () banked
  7087  000C08  256E               	addwf	?___wmul& (0+255),w,b
  7088  000C0A  6EF6               	movwf	tblptrl,c
  7089  000C0C  0E7E               	movlw	high __npowers_
  7090  000C0E  0100               	movlb	0	; () banked
  7091  000C10  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7092  000C12  6EF7               	movwf	tblptrh,c
  7093  000C14                     	if	1	;There are 3 active tblptr bytes
  7094  000C14  6AF8               	clrf	tblptru,c
  7095  000C16  0E00               	movlw	low (__mediumconst shr (0+16))
  7096  000C18  22F8               	addwfc	tblptru,f,c
  7097  000C1A                     	endif
  7098  000C1A  0009               	tblrd		*+
  7099  000C1C  0100               	movlb	0	; () banked
  7100  000C1E  CFF5 F077          	movff	tablat,___ftmul@f2
  7101  000C22  0009               	tblrd		*+
  7102  000C24  0100               	movlb	0	; () banked
  7103  000C26  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7104  000C2A  000A               	tblrd		*-
  7105  000C2C  0100               	movlb	0	; () banked
  7106  000C2E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7107  000C32  ECD0  F00C         	call	___ftmul	;wreg free
  7108  000C36  D14F               	goto	L15
  7109  000C38                     l3518:
  7110                           
  7111                           ;doprnt.c: 434: return _npowers_[scl];
  7112  000C38  0100               	movlb	0	; () banked
  7113  000C3A  5189               	movf	scale@scl& (0+255),w,b
  7114  000C3C  0D03               	mullw	3
  7115  000C3E  0EC5               	movlw	low __npowers_
  7116  000C40  24F3               	addwf	prodl,w,c
  7117  000C42  6EF6               	movwf	tblptrl,c
  7118  000C44  0E7E               	movlw	high __npowers_
  7119  000C46  D155               	goto	L14
  7120  000C48                     l3522:
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;doprnt.c: 435: }
  7124                           ;doprnt.c: 436: if(scl>=110)
  7125  000C48  0100               	movlb	0	; () banked
  7126  000C4A  5189               	movf	scale@scl& (0+255),w,b
  7127  000C4C  0A80               	xorlw	128
  7128  000C4E  0F12               	addlw	-238
  7129  000C50  A0D8               	btfss	status,0,c
  7130  000C52  D0C9               	goto	l3530
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7134  000C54  0E00               	movlw	0
  7135  000C56  0100               	movlb	0	; () banked
  7136  000C58  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7137  000C5A  0E03               	movlw	3
  7138  000C5C  0100               	movlb	0	; () banked
  7139  000C5E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7140  000C60  0E00               	movlw	0
  7141  000C62  0100               	movlb	0	; () banked
  7142  000C64  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7143  000C66  0E0A               	movlw	10
  7144  000C68  0100               	movlb	0	; () banked
  7145  000C6A  6F68               	movwf	___awdiv@divisor& (0+255),b
  7146  000C6C  0E00               	movlw	0
  7147  000C6E  0100               	movlb	0	; () banked
  7148  000C70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7149  000C72  0E64               	movlw	100
  7150  000C74  0100               	movlb	0	; () banked
  7151  000C76  6F62               	movwf	___awmod@divisor& (0+255),b
  7152  000C78  0100               	movlb	0	; () banked
  7153  000C7A  5189               	movf	scale@scl& (0+255),w,b
  7154  000C7C  0100               	movlb	0	; () banked
  7155  000C7E  6F60               	movwf	___awmod@dividend& (0+255),b
  7156  000C80  0100               	movlb	0	; () banked
  7157  000C82  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7158  000C84  0100               	movlb	0	; () banked
  7159  000C86  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7160  000C88  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7161  000C8A  ECCD  F012         	call	___awmod	;wreg free
  7162  000C8E  0100               	movlb	0	; () banked
  7163  000C90  C060  F066         	movff	?___awmod,___awdiv@dividend
  7164  000C94  0100               	movlb	0	; () banked
  7165  000C96  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7166  000C9A  EC54  F010         	call	___awdiv	;wreg free
  7167  000C9E  0E09               	movlw	9
  7168  000CA0  0100               	movlb	0	; () banked
  7169  000CA2  2566               	addwf	?___awdiv& (0+255),w,b
  7170  000CA4  0100               	movlb	0	; () banked
  7171  000CA6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7172  000CA8  0E00               	movlw	0
  7173  000CAA  0100               	movlb	0	; () banked
  7174  000CAC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7175  000CAE  0100               	movlb	0	; () banked
  7176  000CB0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7177  000CB2  EC71  F019         	call	___wmul	;wreg free
  7178  000CB6  0EEC               	movlw	low __powers_
  7179  000CB8  0100               	movlb	0	; () banked
  7180  000CBA  256E               	addwf	?___wmul& (0+255),w,b
  7181  000CBC  6EF6               	movwf	tblptrl,c
  7182  000CBE  0E7E               	movlw	high __powers_
  7183  000CC0  0100               	movlb	0	; () banked
  7184  000CC2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7185  000CC4  6EF7               	movwf	tblptrh,c
  7186  000CC6                     	if	1	;There are 3 active tblptr bytes
  7187  000CC6  6AF8               	clrf	tblptru,c
  7188  000CC8  0E00               	movlw	low (__mediumconst shr (0+16))
  7189  000CCA  22F8               	addwfc	tblptru,f,c
  7190  000CCC                     	endif
  7191  000CCC  0009               	tblrd		*+
  7192  000CCE  0100               	movlb	0	; () banked
  7193  000CD0  CFF5 F077          	movff	tablat,___ftmul@f2
  7194  000CD4  0009               	tblrd		*+
  7195  000CD6  0100               	movlb	0	; () banked
  7196  000CD8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7197  000CDC  000A               	tblrd		*-
  7198  000CDE  0100               	movlb	0	; () banked
  7199  000CE0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7200  000CE4  0E00               	movlw	0
  7201  000CE6  0100               	movlb	0	; () banked
  7202  000CE8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7203  000CEA  0E64               	movlw	100
  7204  000CEC  0100               	movlb	0	; () banked
  7205  000CEE  6F68               	movwf	___awdiv@divisor& (0+255),b
  7206  000CF0  0100               	movlb	0	; () banked
  7207  000CF2  5189               	movf	scale@scl& (0+255),w,b
  7208  000CF4  0100               	movlb	0	; () banked
  7209  000CF6  6F66               	movwf	___awdiv@dividend& (0+255),b
  7210  000CF8  0100               	movlb	0	; () banked
  7211  000CFA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7212  000CFC  0100               	movlb	0	; () banked
  7213  000CFE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7214  000D00  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7215  000D02  EC54  F010         	call	___awdiv	;wreg free
  7216  000D06  0E12               	movlw	18
  7217  000D08  0100               	movlb	0	; () banked
  7218  000D0A  2566               	addwf	?___awdiv& (0+255),w,b
  7219  000D0C  0100               	movlb	0	; () banked
  7220  000D0E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7221  000D10  0E00               	movlw	0
  7222  000D12  0100               	movlb	0	; () banked
  7223  000D14  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7224  000D16  0100               	movlb	0	; () banked
  7225  000D18  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7226  000D1A  0E00               	movlw	0
  7227  000D1C  0100               	movlb	0	; () banked
  7228  000D1E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7229  000D20  0E03               	movlw	3
  7230  000D22  0100               	movlb	0	; () banked
  7231  000D24  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7232  000D26  EC71  F019         	call	___wmul	;wreg free
  7233  000D2A  0EEC               	movlw	low __powers_
  7234  000D2C  0100               	movlb	0	; () banked
  7235  000D2E  256E               	addwf	?___wmul& (0+255),w,b
  7236  000D30  6EF6               	movwf	tblptrl,c
  7237  000D32  0E7E               	movlw	high __powers_
  7238  000D34  0100               	movlb	0	; () banked
  7239  000D36  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7240  000D38  6EF7               	movwf	tblptrh,c
  7241  000D3A                     	if	1	;There are 3 active tblptr bytes
  7242  000D3A  6AF8               	clrf	tblptru,c
  7243  000D3C  0E00               	movlw	low (__mediumconst shr (0+16))
  7244  000D3E  22F8               	addwfc	tblptru,f,c
  7245  000D40                     	endif
  7246  000D40  0009               	tblrd		*+
  7247  000D42  0100               	movlb	0	; () banked
  7248  000D44  CFF5 F074          	movff	tablat,___ftmul@f1
  7249  000D48  0009               	tblrd		*+
  7250  000D4A  0100               	movlb	0	; () banked
  7251  000D4C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7252  000D50  000A               	tblrd		*-
  7253  000D52  0100               	movlb	0	; () banked
  7254  000D54  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7255  000D58  ECD0  F00C         	call	___ftmul	;wreg free
  7256  000D5C  C074  F086         	movff	?___ftmul,_scale$2982
  7257  000D60  C075  F087         	movff	?___ftmul+1,_scale$2982+1
  7258  000D64  C076  F088         	movff	?___ftmul+2,_scale$2982+2
  7259                           
  7260                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7261  000D68  C086  F074         	movff	_scale$2982,___ftmul@f1
  7262  000D6C  C087  F075         	movff	_scale$2982+1,___ftmul@f1+1
  7263  000D70  C088  F076         	movff	_scale$2982+2,___ftmul@f1+2
  7264  000D74  0E00               	movlw	0
  7265  000D76  0100               	movlb	0	; () banked
  7266  000D78  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7267  000D7A  0E03               	movlw	3
  7268  000D7C  0100               	movlb	0	; () banked
  7269  000D7E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7270  000D80  0E00               	movlw	0
  7271  000D82  0100               	movlb	0	; () banked
  7272  000D84  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7273  000D86  0E0A               	movlw	10
  7274  000D88  0100               	movlb	0	; () banked
  7275  000D8A  6F62               	movwf	___awmod@divisor& (0+255),b
  7276  000D8C  0100               	movlb	0	; () banked
  7277  000D8E  5189               	movf	scale@scl& (0+255),w,b
  7278  000D90  0100               	movlb	0	; () banked
  7279  000D92  6F60               	movwf	___awmod@dividend& (0+255),b
  7280  000D94  0100               	movlb	0	; () banked
  7281  000D96  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7282  000D98  0100               	movlb	0	; () banked
  7283  000D9A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7284  000D9C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7285  000D9E  ECCD  F012         	call	___awmod	;wreg free
  7286  000DA2  0100               	movlb	0	; () banked
  7287  000DA4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7288  000DA8  0100               	movlb	0	; () banked
  7289  000DAA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7290  000DAE  EC71  F019         	call	___wmul	;wreg free
  7291  000DB2  0EEC               	movlw	low __powers_
  7292  000DB4  0100               	movlb	0	; () banked
  7293  000DB6  256E               	addwf	?___wmul& (0+255),w,b
  7294  000DB8  6EF6               	movwf	tblptrl,c
  7295  000DBA  0E7E               	movlw	high __powers_
  7296  000DBC  0100               	movlb	0	; () banked
  7297  000DBE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7298  000DC0  6EF7               	movwf	tblptrh,c
  7299  000DC2                     	if	1	;There are 3 active tblptr bytes
  7300  000DC2  6AF8               	clrf	tblptru,c
  7301  000DC4  0E00               	movlw	low (__mediumconst shr (0+16))
  7302  000DC6  22F8               	addwfc	tblptru,f,c
  7303  000DC8                     	endif
  7304  000DC8  0009               	tblrd		*+
  7305  000DCA  0100               	movlb	0	; () banked
  7306  000DCC  CFF5 F077          	movff	tablat,___ftmul@f2
  7307  000DD0  0009               	tblrd		*+
  7308  000DD2  0100               	movlb	0	; () banked
  7309  000DD4  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7310  000DD8  000A               	tblrd		*-
  7311  000DDA  0100               	movlb	0	; () banked
  7312  000DDC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7313  000DE0  ECD0  F00C         	call	___ftmul	;wreg free
  7314  000DE4  D078               	goto	L15
  7315  000DE6                     l3530:
  7316                           
  7317                           ;doprnt.c: 438: else if(scl > 10)
  7318  000DE6  0100               	movlb	0	; () banked
  7319  000DE8  5189               	movf	scale@scl& (0+255),w,b
  7320  000DEA  0A80               	xorlw	128
  7321  000DEC  0F75               	addlw	-139
  7322  000DEE  A0D8               	btfss	status,0,c
  7323  000DF0  D079               	goto	l3536
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7327  000DF2  0E00               	movlw	0
  7328  000DF4  0100               	movlb	0	; () banked
  7329  000DF6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7330  000DF8  0E0A               	movlw	10
  7331  000DFA  0100               	movlb	0	; () banked
  7332  000DFC  6F68               	movwf	___awdiv@divisor& (0+255),b
  7333  000DFE  0100               	movlb	0	; () banked
  7334  000E00  5189               	movf	scale@scl& (0+255),w,b
  7335  000E02  0100               	movlb	0	; () banked
  7336  000E04  6F66               	movwf	___awdiv@dividend& (0+255),b
  7337  000E06  0100               	movlb	0	; () banked
  7338  000E08  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7339  000E0A  0100               	movlb	0	; () banked
  7340  000E0C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7341  000E0E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7342  000E10  EC54  F010         	call	___awdiv	;wreg free
  7343  000E14  0E09               	movlw	9
  7344  000E16  0100               	movlb	0	; () banked
  7345  000E18  2566               	addwf	?___awdiv& (0+255),w,b
  7346  000E1A  0100               	movlb	0	; () banked
  7347  000E1C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7348  000E1E  0E00               	movlw	0
  7349  000E20  0100               	movlb	0	; () banked
  7350  000E22  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7351  000E24  0100               	movlb	0	; () banked
  7352  000E26  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7353  000E28  0E00               	movlw	0
  7354  000E2A  0100               	movlb	0	; () banked
  7355  000E2C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7356  000E2E  0E03               	movlw	3
  7357  000E30  0100               	movlb	0	; () banked
  7358  000E32  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7359  000E34  EC71  F019         	call	___wmul	;wreg free
  7360  000E38  0EEC               	movlw	low __powers_
  7361  000E3A  0100               	movlb	0	; () banked
  7362  000E3C  256E               	addwf	?___wmul& (0+255),w,b
  7363  000E3E  6EF6               	movwf	tblptrl,c
  7364  000E40  0E7E               	movlw	high __powers_
  7365  000E42  0100               	movlb	0	; () banked
  7366  000E44  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7367  000E46  6EF7               	movwf	tblptrh,c
  7368  000E48                     	if	1	;There are 3 active tblptr bytes
  7369  000E48  6AF8               	clrf	tblptru,c
  7370  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
  7371  000E4C  22F8               	addwfc	tblptru,f,c
  7372  000E4E                     	endif
  7373  000E4E  0009               	tblrd		*+
  7374  000E50  0100               	movlb	0	; () banked
  7375  000E52  CFF5 F074          	movff	tablat,___ftmul@f1
  7376  000E56  0009               	tblrd		*+
  7377  000E58  0100               	movlb	0	; () banked
  7378  000E5A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7379  000E5E  000A               	tblrd		*-
  7380  000E60  0100               	movlb	0	; () banked
  7381  000E62  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7382  000E66  0E00               	movlw	0
  7383  000E68  0100               	movlb	0	; () banked
  7384  000E6A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7385  000E6C  0E03               	movlw	3
  7386  000E6E  0100               	movlb	0	; () banked
  7387  000E70  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7388  000E72  0E00               	movlw	0
  7389  000E74  0100               	movlb	0	; () banked
  7390  000E76  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7391  000E78  0E0A               	movlw	10
  7392  000E7A  0100               	movlb	0	; () banked
  7393  000E7C  6F62               	movwf	___awmod@divisor& (0+255),b
  7394  000E7E  0100               	movlb	0	; () banked
  7395  000E80  5189               	movf	scale@scl& (0+255),w,b
  7396  000E82  0100               	movlb	0	; () banked
  7397  000E84  6F60               	movwf	___awmod@dividend& (0+255),b
  7398  000E86  0100               	movlb	0	; () banked
  7399  000E88  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7400  000E8A  0100               	movlb	0	; () banked
  7401  000E8C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7402  000E8E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7403  000E90  ECCD  F012         	call	___awmod	;wreg free
  7404  000E94  0100               	movlb	0	; () banked
  7405  000E96  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7406  000E9A  0100               	movlb	0	; () banked
  7407  000E9C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7408  000EA0  EC71  F019         	call	___wmul	;wreg free
  7409  000EA4  0EEC               	movlw	low __powers_
  7410  000EA6  0100               	movlb	0	; () banked
  7411  000EA8  256E               	addwf	?___wmul& (0+255),w,b
  7412  000EAA  6EF6               	movwf	tblptrl,c
  7413  000EAC  0E7E               	movlw	high __powers_
  7414  000EAE  0100               	movlb	0	; () banked
  7415  000EB0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7416  000EB2  6EF7               	movwf	tblptrh,c
  7417  000EB4                     	if	1	;There are 3 active tblptr bytes
  7418  000EB4  6AF8               	clrf	tblptru,c
  7419  000EB6  0E00               	movlw	low (__mediumconst shr (0+16))
  7420  000EB8  22F8               	addwfc	tblptru,f,c
  7421  000EBA                     	endif
  7422  000EBA  0009               	tblrd		*+
  7423  000EBC  0100               	movlb	0	; () banked
  7424  000EBE  CFF5 F077          	movff	tablat,___ftmul@f2
  7425  000EC2  0009               	tblrd		*+
  7426  000EC4  0100               	movlb	0	; () banked
  7427  000EC6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7428  000ECA  000A               	tblrd		*-
  7429  000ECC  0100               	movlb	0	; () banked
  7430  000ECE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7431  000ED2  ECD0  F00C         	call	___ftmul	;wreg free
  7432  000ED6                     L15:
  7433  000ED6  C074  F083         	movff	?___ftmul,?_scale
  7434  000EDA  C075  F084         	movff	?___ftmul+1,?_scale+1
  7435  000EDE  C076  F085         	movff	?___ftmul+2,?_scale+2
  7436  000EE2  D018               	goto	l511
  7437  000EE4                     l3536:
  7438                           
  7439                           ;doprnt.c: 440: return _powers_[scl];
  7440  000EE4  0100               	movlb	0	; () banked
  7441  000EE6  5189               	movf	scale@scl& (0+255),w,b
  7442  000EE8  0D03               	mullw	3
  7443  000EEA  0EEC               	movlw	low __powers_
  7444  000EEC  24F3               	addwf	prodl,w,c
  7445  000EEE  6EF6               	movwf	tblptrl,c
  7446  000EF0  0E7E               	movlw	high __powers_
  7447  000EF2                     L14:
  7448  000EF2  20F4               	addwfc	prodh,w,c
  7449  000EF4  6EF7               	movwf	tblptrh,c
  7450  000EF6                     	if	1	;There are 3 active tblptr bytes
  7451  000EF6  6AF8               	clrf	tblptru,c
  7452  000EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  7453  000EFA  22F8               	addwfc	tblptru,f,c
  7454  000EFC                     	endif
  7455  000EFC  0009               	tblrd		*+
  7456  000EFE  0100               	movlb	0	; () banked
  7457  000F00  CFF5 F083          	movff	tablat,?_scale
  7458  000F04  0009               	tblrd		*+
  7459  000F06  0100               	movlb	0	; () banked
  7460  000F08  CFF5 F084          	movff	tablat,?_scale+1
  7461  000F0C  000A               	tblrd		*-
  7462  000F0E  0100               	movlb	0	; () banked
  7463  000F10  CFF5 F085          	movff	tablat,?_scale+2
  7464  000F14                     l511:
  7465  000F14  0012               	return	
  7466  000F16                     __end_of_scale:
  7467                           	opt stack 0
  7468                           tblptru	equ	0xFF8
  7469                           tblptrh	equ	0xFF7
  7470                           tblptrl	equ	0xFF6
  7471                           tablat	equ	0xFF5
  7472                           prodh	equ	0xFF4
  7473                           prodl	equ	0xFF3
  7474                           intcon	equ	0xFF2
  7475                           intcon2	equ	0xFF1
  7476                           intcon3	equ	0xFF0
  7477                           indf0	equ	0xFEF
  7478                           postinc0	equ	0xFEE
  7479                           fsr0h	equ	0xFEA
  7480                           fsr0l	equ	0xFE9
  7481                           wreg	equ	0xFE8
  7482                           postinc1	equ	0xFE6
  7483                           postdec1	equ	0xFE5
  7484                           fsr1l	equ	0xFE1
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function _fround *****************
  7493 ;; Defined at:
  7494 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  prec            1    wreg     unsigned char 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  prec            1   44[BANK0 ] unsigned char 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  3   35[BANK0 ] unsigned char 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7508 ;;      Params:         0       3       0       0       0       0       0       0       0
  7509 ;;      Locals:         0       7       0       0       0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7511 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7512 ;;Total ram usage:       10 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    6
  7515 ;; This function calls:
  7516 ;;		___awdiv
  7517 ;;		___awmod
  7518 ;;		___ftmul
  7519 ;;		___wmul
  7520 ;; This function is called by:
  7521 ;;		_sprintf
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text31
  7526  000F16                     __ptext31:
  7527                           	opt stack 0
  7528  000F16                     _fround:
  7529                           	opt stack 21
  7530                           
  7531                           ;incstack = 0
  7532                           ;fround@prec stored from wreg
  7533  000F16  0100               	movlb	0	; () banked
  7534  000F18  6F8C               	movwf	fround@prec& (0+255),b
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;doprnt.c: 413: if(prec>=110)
  7538  000F1A  0E6D               	movlw	109
  7539  000F1C  0100               	movlb	0	; () banked
  7540  000F1E  658C               	cpfsgt	fround@prec& (0+255),b
  7541  000F20  D0D4               	goto	l3490
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7545  000F22  0E00               	movlw	0
  7546  000F24  0100               	movlb	0	; () banked
  7547  000F26  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7548  000F28  0E03               	movlw	3
  7549  000F2A  0100               	movlb	0	; () banked
  7550  000F2C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7551  000F2E  0E00               	movlw	0
  7552  000F30  0100               	movlb	0	; () banked
  7553  000F32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7554  000F34  0E0A               	movlw	10
  7555  000F36  0100               	movlb	0	; () banked
  7556  000F38  6F68               	movwf	___awdiv@divisor& (0+255),b
  7557  000F3A  0E00               	movlw	0
  7558  000F3C  0100               	movlb	0	; () banked
  7559  000F3E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7560  000F40  0E64               	movlw	100
  7561  000F42  0100               	movlb	0	; () banked
  7562  000F44  6F62               	movwf	___awmod@divisor& (0+255),b
  7563  000F46  0100               	movlb	0	; () banked
  7564  000F48  C08C  F060         	movff	fround@prec,___awmod@dividend
  7565  000F4C  0100               	movlb	0	; () banked
  7566  000F4E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7567  000F50  ECCD  F012         	call	___awmod	;wreg free
  7568  000F54  0100               	movlb	0	; () banked
  7569  000F56  C060  F066         	movff	?___awmod,___awdiv@dividend
  7570  000F5A  0100               	movlb	0	; () banked
  7571  000F5C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7572  000F60  EC54  F010         	call	___awdiv	;wreg free
  7573  000F64  0E09               	movlw	9
  7574  000F66  0100               	movlb	0	; () banked
  7575  000F68  2566               	addwf	?___awdiv& (0+255),w,b
  7576  000F6A  0100               	movlb	0	; () banked
  7577  000F6C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7578  000F6E  0E00               	movlw	0
  7579  000F70  0100               	movlb	0	; () banked
  7580  000F72  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7581  000F74  0100               	movlb	0	; () banked
  7582  000F76  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7583  000F78  EC71  F019         	call	___wmul	;wreg free
  7584  000F7C  0EC5               	movlw	low __npowers_
  7585  000F7E  0100               	movlb	0	; () banked
  7586  000F80  256E               	addwf	?___wmul& (0+255),w,b
  7587  000F82  6EF6               	movwf	tblptrl,c
  7588  000F84  0E7E               	movlw	high __npowers_
  7589  000F86  0100               	movlb	0	; () banked
  7590  000F88  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7591  000F8A  6EF7               	movwf	tblptrh,c
  7592  000F8C                     	if	1	;There are 3 active tblptr bytes
  7593  000F8C  6AF8               	clrf	tblptru,c
  7594  000F8E  0E00               	movlw	low (__mediumconst shr (0+16))
  7595  000F90  22F8               	addwfc	tblptru,f,c
  7596  000F92                     	endif
  7597  000F92  0009               	tblrd		*+
  7598  000F94  0100               	movlb	0	; () banked
  7599  000F96  CFF5 F077          	movff	tablat,___ftmul@f2
  7600  000F9A  0009               	tblrd		*+
  7601  000F9C  0100               	movlb	0	; () banked
  7602  000F9E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7603  000FA2  000A               	tblrd		*-
  7604  000FA4  0100               	movlb	0	; () banked
  7605  000FA6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7606  000FAA  0E00               	movlw	0
  7607  000FAC  0100               	movlb	0	; () banked
  7608  000FAE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7609  000FB0  0E64               	movlw	100
  7610  000FB2  0100               	movlb	0	; () banked
  7611  000FB4  6F68               	movwf	___awdiv@divisor& (0+255),b
  7612  000FB6  0100               	movlb	0	; () banked
  7613  000FB8  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7614  000FBC  0100               	movlb	0	; () banked
  7615  000FBE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7616  000FC0  EC54  F010         	call	___awdiv	;wreg free
  7617  000FC4  0E12               	movlw	18
  7618  000FC6  0100               	movlb	0	; () banked
  7619  000FC8  2566               	addwf	?___awdiv& (0+255),w,b
  7620  000FCA  0100               	movlb	0	; () banked
  7621  000FCC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7622  000FCE  0E00               	movlw	0
  7623  000FD0  0100               	movlb	0	; () banked
  7624  000FD2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7625  000FD4  0100               	movlb	0	; () banked
  7626  000FD6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7627  000FD8  0E00               	movlw	0
  7628  000FDA  0100               	movlb	0	; () banked
  7629  000FDC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7630  000FDE  0E03               	movlw	3
  7631  000FE0  0100               	movlb	0	; () banked
  7632  000FE2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7633  000FE4  EC71  F019         	call	___wmul	;wreg free
  7634  000FE8  0EC5               	movlw	low __npowers_
  7635  000FEA  0100               	movlb	0	; () banked
  7636  000FEC  256E               	addwf	?___wmul& (0+255),w,b
  7637  000FEE  6EF6               	movwf	tblptrl,c
  7638  000FF0  0E7E               	movlw	high __npowers_
  7639  000FF2  0100               	movlb	0	; () banked
  7640  000FF4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7641  000FF6  6EF7               	movwf	tblptrh,c
  7642  000FF8                     	if	1	;There are 3 active tblptr bytes
  7643  000FF8  6AF8               	clrf	tblptru,c
  7644  000FFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7645  000FFC  22F8               	addwfc	tblptru,f,c
  7646  000FFE                     	endif
  7647  000FFE  0009               	tblrd		*+
  7648  001000  0100               	movlb	0	; () banked
  7649  001002  CFF5 F074          	movff	tablat,___ftmul@f1
  7650  001006  0009               	tblrd		*+
  7651  001008  0100               	movlb	0	; () banked
  7652  00100A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7653  00100E  000A               	tblrd		*-
  7654  001010  0100               	movlb	0	; () banked
  7655  001012  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7656  001016  ECD0  F00C         	call	___ftmul	;wreg free
  7657  00101A  C074  F089         	movff	?___ftmul,_fround$2980
  7658  00101E  C075  F08A         	movff	?___ftmul+1,_fround$2980+1
  7659  001022  C076  F08B         	movff	?___ftmul+2,_fround$2980+2
  7660                           
  7661                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7662  001026  0E00               	movlw	0
  7663  001028  0100               	movlb	0	; () banked
  7664  00102A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7665  00102C  0E03               	movlw	3
  7666  00102E  0100               	movlb	0	; () banked
  7667  001030  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7668  001032  0E00               	movlw	0
  7669  001034  0100               	movlb	0	; () banked
  7670  001036  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7671  001038  0E0A               	movlw	10
  7672  00103A  0100               	movlb	0	; () banked
  7673  00103C  6F62               	movwf	___awmod@divisor& (0+255),b
  7674  00103E  0100               	movlb	0	; () banked
  7675  001040  C08C  F060         	movff	fround@prec,___awmod@dividend
  7676  001044  0100               	movlb	0	; () banked
  7677  001046  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7678  001048  ECCD  F012         	call	___awmod	;wreg free
  7679  00104C  0100               	movlb	0	; () banked
  7680  00104E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7681  001052  0100               	movlb	0	; () banked
  7682  001054  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7683  001058  EC71  F019         	call	___wmul	;wreg free
  7684  00105C  0EC5               	movlw	low __npowers_
  7685  00105E  0100               	movlb	0	; () banked
  7686  001060  256E               	addwf	?___wmul& (0+255),w,b
  7687  001062  6EF6               	movwf	tblptrl,c
  7688  001064  0E7E               	movlw	high __npowers_
  7689  001066  0100               	movlb	0	; () banked
  7690  001068  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7691  00106A  6EF7               	movwf	tblptrh,c
  7692  00106C                     	if	1	;There are 3 active tblptr bytes
  7693  00106C  6AF8               	clrf	tblptru,c
  7694  00106E  0E00               	movlw	low (__mediumconst shr (0+16))
  7695  001070  22F8               	addwfc	tblptru,f,c
  7696  001072                     	endif
  7697  001072  0009               	tblrd		*+
  7698  001074  0100               	movlb	0	; () banked
  7699  001076  CFF5 F077          	movff	tablat,___ftmul@f2
  7700  00107A  0009               	tblrd		*+
  7701  00107C  0100               	movlb	0	; () banked
  7702  00107E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7703  001082  000A               	tblrd		*-
  7704  001084  0100               	movlb	0	; () banked
  7705  001086  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7706  00108A  C089  F074         	movff	_fround$2980,___ftmul@f1
  7707  00108E  C08A  F075         	movff	_fround$2980+1,___ftmul@f1+1
  7708  001092  C08B  F076         	movff	_fround$2980+2,___ftmul@f1+2
  7709  001096  ECD0  F00C         	call	___ftmul	;wreg free
  7710  00109A  C074  F086         	movff	?___ftmul,_fround$2981
  7711  00109E  C075  F087         	movff	?___ftmul+1,_fround$2981+1
  7712  0010A2  C076  F088         	movff	?___ftmul+2,_fround$2981+2
  7713                           
  7714                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7715  0010A6  C086  F074         	movff	_fround$2981,___ftmul@f1
  7716  0010AA  C087  F075         	movff	_fround$2981+1,___ftmul@f1+1
  7717  0010AE  C088  F076         	movff	_fround$2981+2,___ftmul@f1+2
  7718  0010B2  0E00               	movlw	0
  7719  0010B4  0100               	movlb	0	; () banked
  7720  0010B6  6F77               	movwf	___ftmul@f2& (0+255),b
  7721  0010B8  0E00               	movlw	0
  7722  0010BA  0100               	movlb	0	; () banked
  7723  0010BC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7724  0010BE  0E3F               	movlw	63
  7725  0010C0  0100               	movlb	0	; () banked
  7726  0010C2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7727  0010C4  ECD0  F00C         	call	___ftmul	;wreg free
  7728  0010C8  D0A9               	goto	L17
  7729  0010CA                     l3490:
  7730                           
  7731                           ;doprnt.c: 415: else if(prec > 10)
  7732  0010CA  0E0A               	movlw	10
  7733  0010CC  0100               	movlb	0	; () banked
  7734  0010CE  658C               	cpfsgt	fround@prec& (0+255),b
  7735  0010D0  D082               	goto	l3498
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7739  0010D2  0E00               	movlw	0
  7740  0010D4  0100               	movlb	0	; () banked
  7741  0010D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7742  0010D8  0E03               	movlw	3
  7743  0010DA  0100               	movlb	0	; () banked
  7744  0010DC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7745  0010DE  0E00               	movlw	0
  7746  0010E0  0100               	movlb	0	; () banked
  7747  0010E2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7748  0010E4  0E0A               	movlw	10
  7749  0010E6  0100               	movlb	0	; () banked
  7750  0010E8  6F62               	movwf	___awmod@divisor& (0+255),b
  7751  0010EA  0100               	movlb	0	; () banked
  7752  0010EC  C08C  F060         	movff	fround@prec,___awmod@dividend
  7753  0010F0  0100               	movlb	0	; () banked
  7754  0010F2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7755  0010F4  ECCD  F012         	call	___awmod	;wreg free
  7756  0010F8  0100               	movlb	0	; () banked
  7757  0010FA  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7758  0010FE  0100               	movlb	0	; () banked
  7759  001100  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7760  001104  EC71  F019         	call	___wmul	;wreg free
  7761  001108  0EC5               	movlw	low __npowers_
  7762  00110A  0100               	movlb	0	; () banked
  7763  00110C  256E               	addwf	?___wmul& (0+255),w,b
  7764  00110E  6EF6               	movwf	tblptrl,c
  7765  001110  0E7E               	movlw	high __npowers_
  7766  001112  0100               	movlb	0	; () banked
  7767  001114  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7768  001116  6EF7               	movwf	tblptrh,c
  7769  001118                     	if	1	;There are 3 active tblptr bytes
  7770  001118  6AF8               	clrf	tblptru,c
  7771  00111A  0E00               	movlw	low (__mediumconst shr (0+16))
  7772  00111C  22F8               	addwfc	tblptru,f,c
  7773  00111E                     	endif
  7774  00111E  0009               	tblrd		*+
  7775  001120  0100               	movlb	0	; () banked
  7776  001122  CFF5 F077          	movff	tablat,___ftmul@f2
  7777  001126  0009               	tblrd		*+
  7778  001128  0100               	movlb	0	; () banked
  7779  00112A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7780  00112E  000A               	tblrd		*-
  7781  001130  0100               	movlb	0	; () banked
  7782  001132  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7783  001136  0E00               	movlw	0
  7784  001138  0100               	movlb	0	; () banked
  7785  00113A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7786  00113C  0E0A               	movlw	10
  7787  00113E  0100               	movlb	0	; () banked
  7788  001140  6F68               	movwf	___awdiv@divisor& (0+255),b
  7789  001142  0100               	movlb	0	; () banked
  7790  001144  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7791  001148  0100               	movlb	0	; () banked
  7792  00114A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7793  00114C  EC54  F010         	call	___awdiv	;wreg free
  7794  001150  0E09               	movlw	9
  7795  001152  0100               	movlb	0	; () banked
  7796  001154  2566               	addwf	?___awdiv& (0+255),w,b
  7797  001156  0100               	movlb	0	; () banked
  7798  001158  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7799  00115A  0E00               	movlw	0
  7800  00115C  0100               	movlb	0	; () banked
  7801  00115E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7802  001160  0100               	movlb	0	; () banked
  7803  001162  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7804  001164  0E00               	movlw	0
  7805  001166  0100               	movlb	0	; () banked
  7806  001168  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7807  00116A  0E03               	movlw	3
  7808  00116C  0100               	movlb	0	; () banked
  7809  00116E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7810  001170  EC71  F019         	call	___wmul	;wreg free
  7811  001174  0EC5               	movlw	low __npowers_
  7812  001176  0100               	movlb	0	; () banked
  7813  001178  256E               	addwf	?___wmul& (0+255),w,b
  7814  00117A  6EF6               	movwf	tblptrl,c
  7815  00117C  0E7E               	movlw	high __npowers_
  7816  00117E  0100               	movlb	0	; () banked
  7817  001180  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7818  001182  6EF7               	movwf	tblptrh,c
  7819  001184                     	if	1	;There are 3 active tblptr bytes
  7820  001184  6AF8               	clrf	tblptru,c
  7821  001186  0E00               	movlw	low (__mediumconst shr (0+16))
  7822  001188  22F8               	addwfc	tblptru,f,c
  7823  00118A                     	endif
  7824  00118A  0009               	tblrd		*+
  7825  00118C  0100               	movlb	0	; () banked
  7826  00118E  CFF5 F074          	movff	tablat,___ftmul@f1
  7827  001192  0009               	tblrd		*+
  7828  001194  0100               	movlb	0	; () banked
  7829  001196  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7830  00119A  000A               	tblrd		*-
  7831  00119C  0100               	movlb	0	; () banked
  7832  00119E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7833  0011A2  ECD0  F00C         	call	___ftmul	;wreg free
  7834  0011A6  C074  F089         	movff	?___ftmul,_fround$2980
  7835  0011AA  C075  F08A         	movff	?___ftmul+1,_fround$2980+1
  7836  0011AE  C076  F08B         	movff	?___ftmul+2,_fround$2980+2
  7837                           
  7838                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7839  0011B2  C089  F074         	movff	_fround$2980,___ftmul@f1
  7840  0011B6  C08A  F075         	movff	_fround$2980+1,___ftmul@f1+1
  7841  0011BA  C08B  F076         	movff	_fround$2980+2,___ftmul@f1+2
  7842  0011BE  0E00               	movlw	0
  7843  0011C0  0100               	movlb	0	; () banked
  7844  0011C2  6F77               	movwf	___ftmul@f2& (0+255),b
  7845  0011C4  0E00               	movlw	0
  7846  0011C6  0100               	movlb	0	; () banked
  7847  0011C8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7848  0011CA  0E3F               	movlw	63
  7849  0011CC  0100               	movlb	0	; () banked
  7850  0011CE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7851  0011D0  ECD0  F00C         	call	___ftmul	;wreg free
  7852  0011D4  D023               	goto	L17
  7853  0011D6                     l3498:
  7854                           
  7855                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7856  0011D6  0100               	movlb	0	; () banked
  7857  0011D8  518C               	movf	fround@prec& (0+255),w,b
  7858  0011DA  0D03               	mullw	3
  7859  0011DC  0EC5               	movlw	low __npowers_
  7860  0011DE  24F3               	addwf	prodl,w,c
  7861  0011E0  6EF6               	movwf	tblptrl,c
  7862  0011E2  0E7E               	movlw	high __npowers_
  7863  0011E4  20F4               	addwfc	prodh,w,c
  7864  0011E6  6EF7               	movwf	tblptrh,c
  7865  0011E8                     	if	1	;There are 3 active tblptr bytes
  7866  0011E8  6AF8               	clrf	tblptru,c
  7867  0011EA  0E00               	movlw	low (__mediumconst shr (0+16))
  7868  0011EC  22F8               	addwfc	tblptru,f,c
  7869  0011EE                     	endif
  7870  0011EE  0009               	tblrd		*+
  7871  0011F0  0100               	movlb	0	; () banked
  7872  0011F2  CFF5 F074          	movff	tablat,___ftmul@f1
  7873  0011F6  0009               	tblrd		*+
  7874  0011F8  0100               	movlb	0	; () banked
  7875  0011FA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7876  0011FE  000A               	tblrd		*-
  7877  001200  0100               	movlb	0	; () banked
  7878  001202  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7879  001206  0E00               	movlw	0
  7880  001208  0100               	movlb	0	; () banked
  7881  00120A  6F77               	movwf	___ftmul@f2& (0+255),b
  7882  00120C  0E00               	movlw	0
  7883  00120E  0100               	movlb	0	; () banked
  7884  001210  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7885  001212  0E3F               	movlw	63
  7886  001214  0100               	movlb	0	; () banked
  7887  001216  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7888  001218  ECD0  F00C         	call	___ftmul	;wreg free
  7889  00121C                     L17:
  7890  00121C  C074  F083         	movff	?___ftmul,?_fround
  7891  001220  C075  F084         	movff	?___ftmul+1,?_fround+1
  7892  001224  C076  F085         	movff	?___ftmul+2,?_fround+2
  7893  001228  0012               	return	
  7894  00122A                     __end_of_fround:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           intcon	equ	0xFF2
  7903                           intcon2	equ	0xFF1
  7904                           intcon3	equ	0xFF0
  7905                           indf0	equ	0xFEF
  7906                           postinc0	equ	0xFEE
  7907                           fsr0h	equ	0xFEA
  7908                           fsr0l	equ	0xFE9
  7909                           wreg	equ	0xFE8
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function ___wmul *****************
  7921 ;; Defined at:
  7922 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7925 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  product         2   18[BANK0 ] unsigned int 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  2   14[BANK0 ] unsigned int 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, prodl, prodh
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7937 ;;      Params:         0       4       0       0       0       0       0       0       0
  7938 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7940 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7941 ;;Total ram usage:        6 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    4
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_fround
  7948 ;;		_scale
  7949 ;;		_sprintf
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text32
  7954  0032E2                     __ptext32:
  7955                           	opt stack 0
  7956  0032E2                     ___wmul:
  7957                           	opt stack 22
  7958                           
  7959                           ;incstack = 0
  7960  0032E2  0100               	movlb	0	; () banked
  7961  0032E4  516E               	movf	___wmul@multiplier& (0+255),w,b
  7962  0032E6  0100               	movlb	0	; () banked
  7963  0032E8  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7964  0032EA  CFF3 F072          	movff	prodl,___wmul@product
  7965  0032EE  CFF4 F073          	movff	prodh,___wmul@product+1
  7966  0032F2  0100               	movlb	0	; () banked
  7967  0032F4  516E               	movf	___wmul@multiplier& (0+255),w,b
  7968  0032F6  0100               	movlb	0	; () banked
  7969  0032F8  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7970  0032FA  50F3               	movf	prodl,w,c
  7971  0032FC  0100               	movlb	0	; () banked
  7972  0032FE  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7973  003300  0100               	movlb	0	; () banked
  7974  003302  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7975  003304  0100               	movlb	0	; () banked
  7976  003306  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7977  003308  50F3               	movf	prodl,w,c
  7978  00330A  0100               	movlb	0	; () banked
  7979  00330C  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7980                           
  7981                           ; BSR set to: 0
  7982  00330E  C072  F06E         	movff	___wmul@product,?___wmul
  7983  003312  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  7984                           
  7985                           ; BSR set to: 0
  7986                           
  7987                           ; BSR set to: 0
  7988  003316  0012               	return	
  7989  003318                     __end_of___wmul:
  7990                           	opt stack 0
  7991                           tblptru	equ	0xFF8
  7992                           tblptrh	equ	0xFF7
  7993                           tblptrl	equ	0xFF6
  7994                           tablat	equ	0xFF5
  7995                           prodh	equ	0xFF4
  7996                           prodl	equ	0xFF3
  7997                           intcon	equ	0xFF2
  7998                           intcon2	equ	0xFF1
  7999                           intcon3	equ	0xFF0
  8000                           indf0	equ	0xFEF
  8001                           postinc0	equ	0xFEE
  8002                           fsr0h	equ	0xFEA
  8003                           fsr0l	equ	0xFE9
  8004                           wreg	equ	0xFE8
  8005                           postinc1	equ	0xFE6
  8006                           postdec1	equ	0xFE5
  8007                           fsr1l	equ	0xFE1
  8008                           indf2	equ	0xFDF
  8009                           postinc2	equ	0xFDE
  8010                           postdec2	equ	0xFDD
  8011                           fsr2h	equ	0xFDA
  8012                           fsr2l	equ	0xFD9
  8013                           status	equ	0xFD8
  8014                           
  8015 ;; *************** function ___ftmul *****************
  8016 ;; Defined at:
  8017 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;  f1              3   20[BANK0 ] float 
  8020 ;;  f2              3   23[BANK0 ] float 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  8023 ;;  sign            1   34[BANK0 ] unsigned char 
  8024 ;;  cntr            1   33[BANK0 ] unsigned char 
  8025 ;;  exp             1   29[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  3   20[BANK0 ] float 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8035 ;;      Params:         0       6       0       0       0       0       0       0       0
  8036 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8037 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8038 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8039 ;;Total ram usage:       15 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    5
  8042 ;; This function calls:
  8043 ;;		___ftpack
  8044 ;; This function is called by:
  8045 ;;		_PWM_DutyCycle1
  8046 ;;		_PWM_DutyCycle2
  8047 ;;		_fround
  8048 ;;		_scale
  8049 ;;		_sprintf
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text33
  8054  0019A0                     __ptext33:
  8055                           	opt stack 0
  8056  0019A0                     ___ftmul:
  8057                           	opt stack 24
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;incstack = 0
  8061  0019A0  0100               	movlb	0	; () banked
  8062  0019A2  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  8063  0019A6  0100               	movlb	0	; () banked
  8064  0019A8  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8065  0019AA  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8066  0019AC  0100               	movlb	0	; () banked
  8067  0019AE  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8068  0019B0  0100               	movlb	0	; () banked
  8069  0019B2  377A               	rlcf	??___ftmul& (0+255),f,b
  8070  0019B4  E301               	bnc	u2971
  8071  0019B6  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8072  0019B8                     u2971:
  8073  0019B8  0100               	movlb	0	; () banked
  8074  0019BA  517A               	movf	??___ftmul& (0+255),w,b
  8075  0019BC  0100               	movlb	0	; () banked
  8076  0019BE  6F7D               	movwf	___ftmul@exp& (0+255),b
  8077  0019C0  0100               	movlb	0	; () banked
  8078  0019C2  677D               	tstfsz	___ftmul@exp& (0+255),b
  8079  0019C4  D001               	goto	l3262
  8080  0019C6  D013               	goto	u3000
  8081  0019C8                     l3262:
  8082                           
  8083                           ; BSR set to: 0
  8084  0019C8  0100               	movlb	0	; () banked
  8085  0019CA  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  8086  0019CE  0100               	movlb	0	; () banked
  8087  0019D0  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  8088  0019D2  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  8089  0019D4  0100               	movlb	0	; () banked
  8090  0019D6  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8091  0019D8  0100               	movlb	0	; () banked
  8092  0019DA  377A               	rlcf	??___ftmul& (0+255),f,b
  8093  0019DC  E301               	bnc	u2991
  8094  0019DE  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  8095  0019E0                     u2991:
  8096  0019E0  0100               	movlb	0	; () banked
  8097  0019E2  517A               	movf	??___ftmul& (0+255),w,b
  8098  0019E4  0100               	movlb	0	; () banked
  8099  0019E6  6F82               	movwf	___ftmul@sign& (0+255),b
  8100  0019E8  0100               	movlb	0	; () banked
  8101  0019EA  6782               	tstfsz	___ftmul@sign& (0+255),b
  8102  0019EC  D00A               	goto	l3268
  8103  0019EE                     u3000:
  8104                           
  8105                           ; BSR set to: 0
  8106  0019EE  0E00               	movlw	0
  8107  0019F0  0100               	movlb	0	; () banked
  8108  0019F2  6F74               	movwf	?___ftmul& (0+255),b
  8109  0019F4  0E00               	movlw	0
  8110  0019F6  0100               	movlb	0	; () banked
  8111  0019F8  6F75               	movwf	(?___ftmul+1)& (0+255),b
  8112  0019FA  0E00               	movlw	0
  8113  0019FC  0100               	movlb	0	; () banked
  8114  0019FE  6F76               	movwf	(?___ftmul+2)& (0+255),b
  8115  001A00  D080               	goto	l1105
  8116  001A02                     l3268:
  8117                           
  8118                           ; BSR set to: 0
  8119  001A02  0100               	movlb	0	; () banked
  8120  001A04  5182               	movf	___ftmul@sign& (0+255),w,b
  8121  001A06  0F7B               	addlw	123
  8122  001A08  0100               	movlb	0	; () banked
  8123  001A0A  277D               	addwf	___ftmul@exp& (0+255),f,b
  8124                           
  8125                           ; BSR set to: 0
  8126  001A0C  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  8127  001A10  0100               	movlb	0	; () banked
  8128  001A12  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8129  001A14  0100               	movlb	0	; () banked
  8130  001A16  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  8131  001A18  0E80               	movlw	128
  8132  001A1A  0100               	movlb	0	; () banked
  8133  001A1C  1782               	andwf	___ftmul@sign& (0+255),f,b
  8134                           
  8135                           ; BSR set to: 0
  8136  001A1E  0100               	movlb	0	; () banked
  8137  001A20  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8138                           
  8139                           ; BSR set to: 0
  8140  001A22  0100               	movlb	0	; () banked
  8141  001A24  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8142                           
  8143                           ; BSR set to: 0
  8144  001A26  0EFF               	movlw	255
  8145  001A28  0100               	movlb	0	; () banked
  8146  001A2A  1777               	andwf	___ftmul@f2& (0+255),f,b
  8147  001A2C  0EFF               	movlw	255
  8148  001A2E  0100               	movlb	0	; () banked
  8149  001A30  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8150  001A32  0E00               	movlw	0
  8151  001A34  0100               	movlb	0	; () banked
  8152  001A36  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8153                           
  8154                           ; BSR set to: 0
  8155  001A38  0E00               	movlw	0
  8156  001A3A  0100               	movlb	0	; () banked
  8157  001A3C  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  8158  001A3E  0E00               	movlw	0
  8159  001A40  0100               	movlb	0	; () banked
  8160  001A42  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8161  001A44  0E00               	movlw	0
  8162  001A46  0100               	movlb	0	; () banked
  8163  001A48  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166  001A4A  0E07               	movlw	7
  8167  001A4C  0100               	movlb	0	; () banked
  8168  001A4E  6F81               	movwf	___ftmul@cntr& (0+255),b
  8169  001A50                     l3282:
  8170                           
  8171                           ; BSR set to: 0
  8172  001A50  0100               	movlb	0	; () banked
  8173  001A52  A174               	btfss	___ftmul@f1& (0+255),0,b
  8174  001A54  D00C               	goto	l3286
  8175                           
  8176                           ; BSR set to: 0
  8177  001A56  0100               	movlb	0	; () banked
  8178  001A58  5177               	movf	___ftmul@f2& (0+255),w,b
  8179  001A5A  0100               	movlb	0	; () banked
  8180  001A5C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8181  001A5E  0100               	movlb	0	; () banked
  8182  001A60  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8183  001A62  0100               	movlb	0	; () banked
  8184  001A64  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8185  001A66  0100               	movlb	0	; () banked
  8186  001A68  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8187  001A6A  0100               	movlb	0	; () banked
  8188  001A6C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8189  001A6E                     l3286:
  8190                           
  8191                           ; BSR set to: 0
  8192  001A6E  0100               	movlb	0	; () banked
  8193  001A70  90D8               	bcf	status,0,c
  8194  001A72  0100               	movlb	0	; () banked
  8195  001A74  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8196  001A76  0100               	movlb	0	; () banked
  8197  001A78  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8198  001A7A  0100               	movlb	0	; () banked
  8199  001A7C  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8200  001A7E  0100               	movlb	0	; () banked
  8201  001A80  90D8               	bcf	status,0,c
  8202  001A82  0100               	movlb	0	; () banked
  8203  001A84  3777               	rlcf	___ftmul@f2& (0+255),f,b
  8204  001A86  0100               	movlb	0	; () banked
  8205  001A88  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8206  001A8A  0100               	movlb	0	; () banked
  8207  001A8C  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8208                           
  8209                           ; BSR set to: 0
  8210  001A8E  0100               	movlb	0	; () banked
  8211  001A90  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8212  001A92  D7DE               	goto	l3282
  8213                           
  8214                           ; BSR set to: 0
  8215                           
  8216                           ; BSR set to: 0
  8217  001A94  0E09               	movlw	9
  8218  001A96  0100               	movlb	0	; () banked
  8219  001A98  6F81               	movwf	___ftmul@cntr& (0+255),b
  8220  001A9A                     l3292:
  8221                           
  8222                           ; BSR set to: 0
  8223  001A9A  0100               	movlb	0	; () banked
  8224  001A9C  A174               	btfss	___ftmul@f1& (0+255),0,b
  8225  001A9E  D00C               	goto	l3296
  8226                           
  8227                           ; BSR set to: 0
  8228  001AA0  0100               	movlb	0	; () banked
  8229  001AA2  5177               	movf	___ftmul@f2& (0+255),w,b
  8230  001AA4  0100               	movlb	0	; () banked
  8231  001AA6  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8232  001AA8  0100               	movlb	0	; () banked
  8233  001AAA  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8234  001AAC  0100               	movlb	0	; () banked
  8235  001AAE  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8236  001AB0  0100               	movlb	0	; () banked
  8237  001AB2  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8238  001AB4  0100               	movlb	0	; () banked
  8239  001AB6  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8240  001AB8                     l3296:
  8241                           
  8242                           ; BSR set to: 0
  8243  001AB8  0100               	movlb	0	; () banked
  8244  001ABA  90D8               	bcf	status,0,c
  8245  001ABC  0100               	movlb	0	; () banked
  8246  001ABE  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8247  001AC0  0100               	movlb	0	; () banked
  8248  001AC2  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8249  001AC4  0100               	movlb	0	; () banked
  8250  001AC6  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8251  001AC8  0100               	movlb	0	; () banked
  8252  001ACA  90D8               	bcf	status,0,c
  8253  001ACC  0100               	movlb	0	; () banked
  8254  001ACE  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8255  001AD0  0100               	movlb	0	; () banked
  8256  001AD2  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8257  001AD4  0100               	movlb	0	; () banked
  8258  001AD6  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8259                           
  8260                           ; BSR set to: 0
  8261  001AD8  0100               	movlb	0	; () banked
  8262  001ADA  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8263  001ADC  D7DE               	goto	l3292
  8264                           
  8265                           ; BSR set to: 0
  8266                           
  8267                           ; BSR set to: 0
  8268  001ADE  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8269  001AE2  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8270  001AE6  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8271  001AEA  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8272  001AEE  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8273  001AF2  EC5D  F00F         	call	___ftpack	;wreg free
  8274  001AF6  C060  F074         	movff	?___ftpack,?___ftmul
  8275  001AFA  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8276  001AFE  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8277  001B02                     l1105:
  8278  001B02  0012               	return	
  8279  001B04                     __end_of___ftmul:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           intcon2	equ	0xFF1
  8289                           intcon3	equ	0xFF0
  8290                           indf0	equ	0xFEF
  8291                           postinc0	equ	0xFEE
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           postinc1	equ	0xFE6
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function ___awmod *****************
  8306 ;; Defined at:
  8307 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  dividend        2    0[BANK0 ] int 
  8310 ;;  divisor         2    2[BANK0 ] int 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  sign            1    5[BANK0 ] unsigned char 
  8313 ;;  counter         1    4[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  2    0[BANK0 ] int 
  8316 ;; Registers used:
  8317 ;;		wreg, status,2, status,0, prodl
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8323 ;;      Params:         0       4       0       0       0       0       0       0       0
  8324 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8326 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8327 ;;Total ram usage:        6 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    4
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_fround
  8334 ;;		_scale
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text34
  8339  00259A                     __ptext34:
  8340                           	opt stack 0
  8341  00259A                     ___awmod:
  8342                           	opt stack 22
  8343                           
  8344                           ;incstack = 0
  8345  00259A  0E00               	movlw	0
  8346  00259C  0100               	movlb	0	; () banked
  8347  00259E  6F65               	movwf	___awmod@sign& (0+255),b
  8348                           
  8349                           ; BSR set to: 0
  8350  0025A0  0100               	movlb	0	; () banked
  8351  0025A2  5161               	movf	(___awmod@dividend+1)& (0+255),w,b
  8352  0025A4  0A80               	xorlw	128
  8353  0025A6  6EF3               	movwf	prodl,c
  8354  0025A8  0E80               	movlw	128
  8355  0025AA  5CF3               	subwf	prodl,w,c
  8356  0025AC  0E00               	movlw	0
  8357  0025AE  B4D8               	btfsc	status,2,c
  8358  0025B0  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8359  0025B2  B0D8               	btfsc	status,0,c
  8360  0025B4  D009               	goto	l3356
  8361                           
  8362                           ; BSR set to: 0
  8363  0025B6  0100               	movlb	0	; () banked
  8364  0025B8  6D60               	negf	___awmod@dividend& (0+255),b
  8365  0025BA  0100               	movlb	0	; () banked
  8366  0025BC  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8367  0025BE  B0D8               	btfsc	status,0,c
  8368  0025C0  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8369                           
  8370                           ; BSR set to: 0
  8371  0025C2  0E01               	movlw	1
  8372  0025C4  0100               	movlb	0	; () banked
  8373  0025C6  6F65               	movwf	___awmod@sign& (0+255),b
  8374  0025C8                     l3356:
  8375                           
  8376                           ; BSR set to: 0
  8377  0025C8  0100               	movlb	0	; () banked
  8378  0025CA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8379  0025CC  0A80               	xorlw	128
  8380  0025CE  6EF3               	movwf	prodl,c
  8381  0025D0  0E80               	movlw	128
  8382  0025D2  5CF3               	subwf	prodl,w,c
  8383  0025D4  0E00               	movlw	0
  8384  0025D6  B4D8               	btfsc	status,2,c
  8385  0025D8  5D62               	subwf	___awmod@divisor& (0+255),w,b
  8386  0025DA  B0D8               	btfsc	status,0,c
  8387  0025DC  D006               	goto	l3360
  8388                           
  8389                           ; BSR set to: 0
  8390  0025DE  0100               	movlb	0	; () banked
  8391  0025E0  6D62               	negf	___awmod@divisor& (0+255),b
  8392  0025E2  0100               	movlb	0	; () banked
  8393  0025E4  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  8394  0025E6  B0D8               	btfsc	status,0,c
  8395  0025E8  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  8396  0025EA                     l3360:
  8397                           
  8398                           ; BSR set to: 0
  8399  0025EA  0100               	movlb	0	; () banked
  8400  0025EC  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8401  0025EE  1162               	iorwf	___awmod@divisor& (0+255),w,b
  8402  0025F0  B4D8               	btfsc	status,2,c
  8403  0025F2  D026               	goto	l3376
  8404                           
  8405                           ; BSR set to: 0
  8406  0025F4  0E01               	movlw	1
  8407  0025F6  0100               	movlb	0	; () banked
  8408  0025F8  6F64               	movwf	___awmod@counter& (0+255),b
  8409  0025FA  D006               	goto	l3366
  8410  0025FC                     l3364:
  8411                           
  8412                           ; BSR set to: 0
  8413  0025FC  0100               	movlb	0	; () banked
  8414  0025FE  90D8               	bcf	status,0,c
  8415  002600  3762               	rlcf	___awmod@divisor& (0+255),f,b
  8416  002602  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8417  002604  0100               	movlb	0	; () banked
  8418  002606  2B64               	incf	___awmod@counter& (0+255),f,b
  8419  002608                     l3366:
  8420                           
  8421                           ; BSR set to: 0
  8422  002608  0100               	movlb	0	; () banked
  8423  00260A  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8424  00260C  D7F7               	goto	l3364
  8425  00260E                     l3368:
  8426                           
  8427                           ; BSR set to: 0
  8428  00260E  0100               	movlb	0	; () banked
  8429  002610  5162               	movf	___awmod@divisor& (0+255),w,b
  8430  002612  0100               	movlb	0	; () banked
  8431  002614  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8432  002616  0100               	movlb	0	; () banked
  8433  002618  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8434  00261A  0100               	movlb	0	; () banked
  8435  00261C  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8436  00261E  A0D8               	btfss	status,0,c
  8437  002620  D008               	goto	l3372
  8438                           
  8439                           ; BSR set to: 0
  8440  002622  0100               	movlb	0	; () banked
  8441  002624  5162               	movf	___awmod@divisor& (0+255),w,b
  8442  002626  0100               	movlb	0	; () banked
  8443  002628  5F60               	subwf	___awmod@dividend& (0+255),f,b
  8444  00262A  0100               	movlb	0	; () banked
  8445  00262C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8446  00262E  0100               	movlb	0	; () banked
  8447  002630  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8448  002632                     l3372:
  8449                           
  8450                           ; BSR set to: 0
  8451  002632  0100               	movlb	0	; () banked
  8452  002634  90D8               	bcf	status,0,c
  8453  002636  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8454  002638  3362               	rrcf	___awmod@divisor& (0+255),f,b
  8455                           
  8456                           ; BSR set to: 0
  8457  00263A  0100               	movlb	0	; () banked
  8458  00263C  2F64               	decfsz	___awmod@counter& (0+255),f,b
  8459  00263E  D7E7               	goto	l3368
  8460  002640                     l3376:
  8461                           
  8462                           ; BSR set to: 0
  8463  002640  0100               	movlb	0	; () banked
  8464  002642  5165               	movf	___awmod@sign& (0+255),w,b
  8465  002644  B4D8               	btfsc	status,2,c
  8466  002646  D006               	goto	l3380
  8467                           
  8468                           ; BSR set to: 0
  8469  002648  0100               	movlb	0	; () banked
  8470  00264A  6D60               	negf	___awmod@dividend& (0+255),b
  8471  00264C  0100               	movlb	0	; () banked
  8472  00264E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8473  002650  B0D8               	btfsc	status,0,c
  8474  002652  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8475  002654                     l3380:
  8476                           
  8477                           ; BSR set to: 0
  8478  002654  C060  F060         	movff	___awmod@dividend,?___awmod
  8479  002658  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  8480                           
  8481                           ; BSR set to: 0
  8482                           
  8483                           ; BSR set to: 0
  8484  00265C  0012               	return	
  8485  00265E                     __end_of___awmod:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           intcon3	equ	0xFF0
  8496                           indf0	equ	0xFEF
  8497                           postinc0	equ	0xFEE
  8498                           fsr0h	equ	0xFEA
  8499                           fsr0l	equ	0xFE9
  8500                           wreg	equ	0xFE8
  8501                           postinc1	equ	0xFE6
  8502                           postdec1	equ	0xFE5
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function ___awdiv *****************
  8512 ;; Defined at:
  8513 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  dividend        2    6[BANK0 ] int 
  8516 ;;  divisor         2    8[BANK0 ] int 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;  quotient        2   12[BANK0 ] int 
  8519 ;;  sign            1   11[BANK0 ] unsigned char 
  8520 ;;  counter         1   10[BANK0 ] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  2    6[BANK0 ] int 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, prodl
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8530 ;;      Params:         0       4       0       0       0       0       0       0       0
  8531 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8533 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8534 ;;Total ram usage:        8 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_fround
  8541 ;;		_scale
  8542 ;;		_sprintf
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text35
  8547  0020A8                     __ptext35:
  8548                           	opt stack 0
  8549  0020A8                     ___awdiv:
  8550                           	opt stack 22
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;incstack = 0
  8554  0020A8  0E00               	movlw	0
  8555  0020AA  0100               	movlb	0	; () banked
  8556  0020AC  6F6B               	movwf	___awdiv@sign& (0+255),b
  8557                           
  8558                           ; BSR set to: 0
  8559  0020AE  0100               	movlb	0	; () banked
  8560  0020B0  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8561  0020B2  0A80               	xorlw	128
  8562  0020B4  6EF3               	movwf	prodl,c
  8563  0020B6  0E80               	movlw	128
  8564  0020B8  5CF3               	subwf	prodl,w,c
  8565  0020BA  0E00               	movlw	0
  8566  0020BC  B4D8               	btfsc	status,2,c
  8567  0020BE  5D68               	subwf	___awdiv@divisor& (0+255),w,b
  8568  0020C0  B0D8               	btfsc	status,0,c
  8569  0020C2  D009               	goto	l3312
  8570                           
  8571                           ; BSR set to: 0
  8572  0020C4  0100               	movlb	0	; () banked
  8573  0020C6  6D68               	negf	___awdiv@divisor& (0+255),b
  8574  0020C8  0100               	movlb	0	; () banked
  8575  0020CA  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8576  0020CC  B0D8               	btfsc	status,0,c
  8577  0020CE  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8578                           
  8579                           ; BSR set to: 0
  8580  0020D0  0E01               	movlw	1
  8581  0020D2  0100               	movlb	0	; () banked
  8582  0020D4  6F6B               	movwf	___awdiv@sign& (0+255),b
  8583  0020D6                     l3312:
  8584                           
  8585                           ; BSR set to: 0
  8586  0020D6  0100               	movlb	0	; () banked
  8587  0020D8  5167               	movf	(___awdiv@dividend+1)& (0+255),w,b
  8588  0020DA  0A80               	xorlw	128
  8589  0020DC  6EF3               	movwf	prodl,c
  8590  0020DE  0E80               	movlw	128
  8591  0020E0  5CF3               	subwf	prodl,w,c
  8592  0020E2  0E00               	movlw	0
  8593  0020E4  B4D8               	btfsc	status,2,c
  8594  0020E6  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8595  0020E8  B0D8               	btfsc	status,0,c
  8596  0020EA  D009               	goto	l3318
  8597                           
  8598                           ; BSR set to: 0
  8599  0020EC  0100               	movlb	0	; () banked
  8600  0020EE  6D66               	negf	___awdiv@dividend& (0+255),b
  8601  0020F0  0100               	movlb	0	; () banked
  8602  0020F2  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8603  0020F4  B0D8               	btfsc	status,0,c
  8604  0020F6  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8605                           
  8606                           ; BSR set to: 0
  8607  0020F8  0E01               	movlw	1
  8608  0020FA  0100               	movlb	0	; () banked
  8609  0020FC  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  8610  0020FE                     l3318:
  8611                           
  8612                           ; BSR set to: 0
  8613  0020FE  0E00               	movlw	0
  8614  002100  0100               	movlb	0	; () banked
  8615  002102  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8616  002104  0E00               	movlw	0
  8617  002106  0100               	movlb	0	; () banked
  8618  002108  6F6C               	movwf	___awdiv@quotient& (0+255),b
  8619                           
  8620                           ; BSR set to: 0
  8621  00210A  0100               	movlb	0	; () banked
  8622  00210C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8623  00210E  1168               	iorwf	___awdiv@divisor& (0+255),w,b
  8624  002110  B4D8               	btfsc	status,2,c
  8625  002112  D02C               	goto	l3340
  8626                           
  8627                           ; BSR set to: 0
  8628  002114  0E01               	movlw	1
  8629  002116  0100               	movlb	0	; () banked
  8630  002118  6F6A               	movwf	___awdiv@counter& (0+255),b
  8631  00211A  D006               	goto	l3326
  8632  00211C                     l3324:
  8633                           
  8634                           ; BSR set to: 0
  8635  00211C  0100               	movlb	0	; () banked
  8636  00211E  90D8               	bcf	status,0,c
  8637  002120  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  8638  002122  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8639  002124  0100               	movlb	0	; () banked
  8640  002126  2B6A               	incf	___awdiv@counter& (0+255),f,b
  8641  002128                     l3326:
  8642                           
  8643                           ; BSR set to: 0
  8644  002128  0100               	movlb	0	; () banked
  8645  00212A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8646  00212C  D7F7               	goto	l3324
  8647  00212E                     l3328:
  8648                           
  8649                           ; BSR set to: 0
  8650  00212E  0100               	movlb	0	; () banked
  8651  002130  90D8               	bcf	status,0,c
  8652  002132  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  8653  002134  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656  002136  0100               	movlb	0	; () banked
  8657  002138  5168               	movf	___awdiv@divisor& (0+255),w,b
  8658  00213A  0100               	movlb	0	; () banked
  8659  00213C  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8660  00213E  0100               	movlb	0	; () banked
  8661  002140  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8662  002142  0100               	movlb	0	; () banked
  8663  002144  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8664  002146  A0D8               	btfss	status,0,c
  8665  002148  D00A               	goto	l3336
  8666                           
  8667                           ; BSR set to: 0
  8668  00214A  0100               	movlb	0	; () banked
  8669  00214C  5168               	movf	___awdiv@divisor& (0+255),w,b
  8670  00214E  0100               	movlb	0	; () banked
  8671  002150  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  8672  002152  0100               	movlb	0	; () banked
  8673  002154  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8674  002156  0100               	movlb	0	; () banked
  8675  002158  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8676                           
  8677                           ; BSR set to: 0
  8678  00215A  0100               	movlb	0	; () banked
  8679  00215C  816C               	bsf	___awdiv@quotient& (0+255),0,b
  8680  00215E                     l3336:
  8681                           
  8682                           ; BSR set to: 0
  8683  00215E  0100               	movlb	0	; () banked
  8684  002160  90D8               	bcf	status,0,c
  8685  002162  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8686  002164  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  8687                           
  8688                           ; BSR set to: 0
  8689  002166  0100               	movlb	0	; () banked
  8690  002168  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  8691  00216A  D7E1               	goto	l3328
  8692  00216C                     l3340:
  8693                           
  8694                           ; BSR set to: 0
  8695  00216C  0100               	movlb	0	; () banked
  8696  00216E  516B               	movf	___awdiv@sign& (0+255),w,b
  8697  002170  B4D8               	btfsc	status,2,c
  8698  002172  D006               	goto	l3344
  8699                           
  8700                           ; BSR set to: 0
  8701  002174  0100               	movlb	0	; () banked
  8702  002176  6D6C               	negf	___awdiv@quotient& (0+255),b
  8703  002178  0100               	movlb	0	; () banked
  8704  00217A  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8705  00217C  B0D8               	btfsc	status,0,c
  8706  00217E  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8707  002180                     l3344:
  8708                           
  8709                           ; BSR set to: 0
  8710  002180  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  8711  002184  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  8712                           
  8713                           ; BSR set to: 0
  8714                           
  8715                           ; BSR set to: 0
  8716  002188  0012               	return	
  8717  00218A                     __end_of___awdiv:
  8718                           	opt stack 0
  8719                           tblptru	equ	0xFF8
  8720                           tblptrh	equ	0xFF7
  8721                           tblptrl	equ	0xFF6
  8722                           tablat	equ	0xFF5
  8723                           prodh	equ	0xFF4
  8724                           prodl	equ	0xFF3
  8725                           intcon	equ	0xFF2
  8726                           intcon2	equ	0xFF1
  8727                           intcon3	equ	0xFF0
  8728                           indf0	equ	0xFEF
  8729                           postinc0	equ	0xFEE
  8730                           fsr0h	equ	0xFEA
  8731                           fsr0l	equ	0xFE9
  8732                           wreg	equ	0xFE8
  8733                           postinc1	equ	0xFE6
  8734                           postdec1	equ	0xFE5
  8735                           fsr1l	equ	0xFE1
  8736                           indf2	equ	0xFDF
  8737                           postinc2	equ	0xFDE
  8738                           postdec2	equ	0xFDD
  8739                           fsr2h	equ	0xFDA
  8740                           fsr2l	equ	0xFD9
  8741                           status	equ	0xFD8
  8742                           
  8743 ;; *************** function __tdiv_to_l_ *****************
  8744 ;; Defined at:
  8745 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;  f1              3    0[BANK0 ] float 
  8748 ;;  f2              3    3[BANK0 ] float 
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;  quot            4    9[BANK0 ] unsigned long 
  8751 ;;  exp1            1   14[BANK0 ] unsigned char 
  8752 ;;  cntr            1   13[BANK0 ] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  4    0[BANK0 ] unsigned long 
  8755 ;; Registers used:
  8756 ;;		wreg, status,2, status,0
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8762 ;;      Params:         0       6       0       0       0       0       0       0       0
  8763 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8764 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8765 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8766 ;;Total ram usage:       15 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    4
  8769 ;; This function calls:
  8770 ;;		Nothing
  8771 ;; This function is called by:
  8772 ;;		_sprintf
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text36
  8777  001688                     __ptext36:
  8778                           	opt stack 0
  8779  001688                     __tdiv_to_l_:
  8780                           	opt stack 23
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;incstack = 0
  8784  001688  0100               	movlb	0	; () banked
  8785  00168A  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8786  00168E  0100               	movlb	0	; () banked
  8787  001690  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8788  001692  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8789  001694  0100               	movlb	0	; () banked
  8790  001696  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8791  001698  0100               	movlb	0	; () banked
  8792  00169A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8793  00169C  E301               	bnc	u3381
  8794  00169E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8795  0016A0                     u3381:
  8796  0016A0  0100               	movlb	0	; () banked
  8797  0016A2  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8798  0016A4  0100               	movlb	0	; () banked
  8799  0016A6  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8800  0016A8  0100               	movlb	0	; () banked
  8801  0016AA  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  8802  0016AC  D001               	goto	l3546
  8803  0016AE  D092               	goto	u3450
  8804  0016B0                     l3546:
  8805                           
  8806                           ; BSR set to: 0
  8807  0016B0  0100               	movlb	0	; () banked
  8808  0016B2  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8809  0016B6  0100               	movlb	0	; () banked
  8810  0016B8  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8811  0016BA  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8812  0016BC  0100               	movlb	0	; () banked
  8813  0016BE  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8814  0016C0  0100               	movlb	0	; () banked
  8815  0016C2  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8816  0016C4  E301               	bnc	u3401
  8817  0016C6  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8818  0016C8                     u3401:
  8819  0016C8  0100               	movlb	0	; () banked
  8820  0016CA  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8821  0016CC  0100               	movlb	0	; () banked
  8822  0016CE  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8823  0016D0  0100               	movlb	0	; () banked
  8824  0016D2  676D               	tstfsz	__tdiv_to_l_@cntr& (0+255),b
  8825  0016D4  D001               	goto	l3552
  8826  0016D6  D07E               	goto	u3450
  8827  0016D8                     l3552:
  8828                           
  8829                           ; BSR set to: 0
  8830  0016D8  0100               	movlb	0	; () banked
  8831  0016DA  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8832                           
  8833                           ; BSR set to: 0
  8834  0016DC  0EFF               	movlw	255
  8835  0016DE  0100               	movlb	0	; () banked
  8836  0016E0  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8837  0016E2  0EFF               	movlw	255
  8838  0016E4  0100               	movlb	0	; () banked
  8839  0016E6  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8840  0016E8  0E00               	movlw	0
  8841  0016EA  0100               	movlb	0	; () banked
  8842  0016EC  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8843  0016EE  0100               	movlb	0	; () banked
  8844  0016F0  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8845                           
  8846                           ; BSR set to: 0
  8847  0016F2  0EFF               	movlw	255
  8848  0016F4  0100               	movlb	0	; () banked
  8849  0016F6  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8850  0016F8  0EFF               	movlw	255
  8851  0016FA  0100               	movlb	0	; () banked
  8852  0016FC  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8853  0016FE  0E00               	movlw	0
  8854  001700  0100               	movlb	0	; () banked
  8855  001702  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8856                           
  8857                           ; BSR set to: 0
  8858  001704  0E00               	movlw	0
  8859  001706  0100               	movlb	0	; () banked
  8860  001708  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  8861  00170A  0E00               	movlw	0
  8862  00170C  0100               	movlb	0	; () banked
  8863  00170E  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8864  001710  0E00               	movlw	0
  8865  001712  0100               	movlb	0	; () banked
  8866  001714  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8867  001716  0E00               	movlw	0
  8868  001718  0100               	movlb	0	; () banked
  8869  00171A  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8870                           
  8871                           ; BSR set to: 0
  8872  00171C  0E7F               	movlw	127
  8873  00171E  0100               	movlb	0	; () banked
  8874  001720  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8875                           
  8876                           ; BSR set to: 0
  8877  001722  0100               	movlb	0	; () banked
  8878  001724  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8879  001726  0F98               	addlw	152
  8880  001728  0100               	movlb	0	; () banked
  8881  00172A  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8882                           
  8883                           ; BSR set to: 0
  8884  00172C  0E18               	movlw	24
  8885  00172E  0100               	movlb	0	; () banked
  8886  001730  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8887  001732                     l1083:
  8888                           
  8889                           ; BSR set to: 0
  8890  001732  0100               	movlb	0	; () banked
  8891  001734  90D8               	bcf	status,0,c
  8892  001736  0100               	movlb	0	; () banked
  8893  001738  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8894  00173A  0100               	movlb	0	; () banked
  8895  00173C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8896  00173E  0100               	movlb	0	; () banked
  8897  001740  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8898  001742  0100               	movlb	0	; () banked
  8899  001744  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8900                           
  8901                           ; BSR set to: 0
  8902  001746  0100               	movlb	0	; () banked
  8903  001748  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8904  00174A  0100               	movlb	0	; () banked
  8905  00174C  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8906  00174E  0100               	movlb	0	; () banked
  8907  001750  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8908  001752  0100               	movlb	0	; () banked
  8909  001754  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8910  001756  0100               	movlb	0	; () banked
  8911  001758  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8912  00175A  0100               	movlb	0	; () banked
  8913  00175C  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8914  00175E  A0D8               	btfss	status,0,c
  8915  001760  D00E               	goto	l1084
  8916                           
  8917                           ; BSR set to: 0
  8918  001762  0100               	movlb	0	; () banked
  8919  001764  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8920  001766  0100               	movlb	0	; () banked
  8921  001768  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8922  00176A  0100               	movlb	0	; () banked
  8923  00176C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8924  00176E  0100               	movlb	0	; () banked
  8925  001770  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8926  001772  0100               	movlb	0	; () banked
  8927  001774  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8928  001776  0100               	movlb	0	; () banked
  8929  001778  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8930                           
  8931                           ; BSR set to: 0
  8932  00177A  0100               	movlb	0	; () banked
  8933  00177C  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8934  00177E                     l1084:
  8935                           
  8936                           ; BSR set to: 0
  8937  00177E  0100               	movlb	0	; () banked
  8938  001780  90D8               	bcf	status,0,c
  8939  001782  0100               	movlb	0	; () banked
  8940  001784  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8941  001786  0100               	movlb	0	; () banked
  8942  001788  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8943  00178A  0100               	movlb	0	; () banked
  8944  00178C  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8945                           
  8946                           ; BSR set to: 0
  8947  00178E  0100               	movlb	0	; () banked
  8948  001790  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8949  001792  D7CF               	goto	l1083
  8950                           
  8951                           ; BSR set to: 0
  8952  001794  0100               	movlb	0	; () banked
  8953  001796  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8954  001798  D019               	goto	l3584
  8955                           
  8956                           ; BSR set to: 0
  8957  00179A  0100               	movlb	0	; () banked
  8958  00179C  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8959  00179E  0A80               	xorlw	128
  8960  0017A0  0100               	movlb	0	; () banked
  8961  0017A2  6F66               	movwf	??__tdiv_to_l_& (0+255),b
  8962  0017A4  0EE9               	movlw	233
  8963  0017A6  0A80               	xorlw	128
  8964  0017A8  0100               	movlb	0	; () banked
  8965  0017AA  5D66               	subwf	??__tdiv_to_l_& (0+255),w,b
  8966  0017AC  A0D8               	btfss	status,0,c
  8967  0017AE  D012               	goto	u3450
  8968  0017B0                     l3580:
  8969                           
  8970                           ; BSR set to: 0
  8971  0017B0  0100               	movlb	0	; () banked
  8972  0017B2  90D8               	bcf	status,0,c
  8973  0017B4  0100               	movlb	0	; () banked
  8974  0017B6  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8975  0017B8  0100               	movlb	0	; () banked
  8976  0017BA  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8977  0017BC  0100               	movlb	0	; () banked
  8978  0017BE  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8979  0017C0  0100               	movlb	0	; () banked
  8980  0017C2  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8981                           
  8982                           ; BSR set to: 0
  8983  0017C4  0100               	movlb	0	; () banked
  8984  0017C6  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8985  0017C8  D7F3               	goto	l3580
  8986  0017CA  D020               	goto	l1090
  8987  0017CC                     l3584:
  8988                           
  8989                           ; BSR set to: 0
  8990  0017CC  0E17               	movlw	23
  8991  0017CE  0100               	movlb	0	; () banked
  8992  0017D0  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8993  0017D2  D019               	goto	l3592
  8994  0017D4                     u3450:
  8995                           
  8996                           ; BSR set to: 0
  8997  0017D4  0E00               	movlw	0
  8998  0017D6  0100               	movlb	0	; () banked
  8999  0017D8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  9000  0017DA  0E00               	movlw	0
  9001  0017DC  0100               	movlb	0	; () banked
  9002  0017DE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  9003  0017E0  0E00               	movlw	0
  9004  0017E2  0100               	movlb	0	; () banked
  9005  0017E4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  9006  0017E6  0E00               	movlw	0
  9007  0017E8  0100               	movlb	0	; () banked
  9008  0017EA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  9009  0017EC  D017               	goto	l1081
  9010  0017EE                     l3590:
  9011                           
  9012                           ; BSR set to: 0
  9013  0017EE  0100               	movlb	0	; () banked
  9014  0017F0  90D8               	bcf	status,0,c
  9015  0017F2  0100               	movlb	0	; () banked
  9016  0017F4  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  9017  0017F6  0100               	movlb	0	; () banked
  9018  0017F8  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  9019  0017FA  0100               	movlb	0	; () banked
  9020  0017FC  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  9021  0017FE  0100               	movlb	0	; () banked
  9022  001800  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  9023  001802  0100               	movlb	0	; () banked
  9024  001804  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  9025  001806                     l3592:
  9026                           
  9027                           ; BSR set to: 0
  9028  001806  0100               	movlb	0	; () banked
  9029  001808  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  9030  00180A  D7F1               	goto	l3590
  9031  00180C                     l1090:
  9032                           
  9033                           ; BSR set to: 0
  9034  00180C  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9035  001810  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9036  001814  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9037  001818  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9038  00181C                     l1081:
  9039                           
  9040                           ; BSR set to: 0
  9041  00181C  0012               	return	
  9042  00181E                     __end_of__tdiv_to_l_:
  9043                           	opt stack 0
  9044                           tblptru	equ	0xFF8
  9045                           tblptrh	equ	0xFF7
  9046                           tblptrl	equ	0xFF6
  9047                           tablat	equ	0xFF5
  9048                           prodh	equ	0xFF4
  9049                           prodl	equ	0xFF3
  9050                           intcon	equ	0xFF2
  9051                           intcon2	equ	0xFF1
  9052                           intcon3	equ	0xFF0
  9053                           indf0	equ	0xFEF
  9054                           postinc0	equ	0xFEE
  9055                           fsr0h	equ	0xFEA
  9056                           fsr0l	equ	0xFE9
  9057                           wreg	equ	0xFE8
  9058                           postinc1	equ	0xFE6
  9059                           postdec1	equ	0xFE5
  9060                           fsr1l	equ	0xFE1
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function __div_to_l_ *****************
  9069 ;; Defined at:
  9070 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  f1              3    0[BANK0 ] unsigned long 
  9073 ;;  f2              3    3[BANK0 ] unsigned long 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  quot            4   10[BANK0 ] unsigned long 
  9076 ;;  exp1            1   15[BANK0 ] unsigned char 
  9077 ;;  cntr            1   14[BANK0 ] unsigned char 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  4    0[BANK0 ] unsigned long 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9087 ;;      Params:         0       6       0       0       0       0       0       0       0
  9088 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9089 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9090 ;;      Totals:         0      16       0       0       0       0       0       0       0
  9091 ;;Total ram usage:       16 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; Hardware stack levels required when called:    4
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_sprintf
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           	psect	text37
  9102  0014AA                     __ptext37:
  9103                           	opt stack 0
  9104  0014AA                     __div_to_l_:
  9105                           	opt stack 23
  9106                           
  9107                           ; BSR set to: 0
  9108                           ;incstack = 0
  9109  0014AA  0100               	movlb	0	; () banked
  9110  0014AC  C060  F066         	movff	__div_to_l_@f1,??__div_to_l_
  9111  0014B0  0100               	movlb	0	; () banked
  9112  0014B2  C061  F067         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  9113  0014B6  0100               	movlb	0	; () banked
  9114  0014B8  C062  F068         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  9115  0014BC  0100               	movlb	0	; () banked
  9116  0014BE  C063  F069         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  9117  0014C2  0E18               	movlw	24
  9118  0014C4  D006               	goto	u3470
  9119  0014C6                     u3475:
  9120  0014C6  0100               	movlb	0	; () banked
  9121  0014C8  90D8               	bcf	status,0,c
  9122  0014CA  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  9123  0014CC  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  9124  0014CE  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  9125  0014D0  3366               	rrcf	??__div_to_l_& (0+255),f,b
  9126  0014D2                     u3470:
  9127  0014D2  2EE8               	decfsz	wreg,f,c
  9128  0014D4  D7F8               	goto	u3475
  9129  0014D6  0100               	movlb	0	; () banked
  9130  0014D8  5166               	movf	??__div_to_l_& (0+255),w,b
  9131  0014DA  0100               	movlb	0	; () banked
  9132  0014DC  6F6F               	movwf	__div_to_l_@exp1& (0+255),b
  9133  0014DE  0100               	movlb	0	; () banked
  9134  0014E0  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9135  0014E2  D001               	goto	l3600
  9136  0014E4  D0AC               	goto	u3540
  9137  0014E6                     l3600:
  9138                           
  9139                           ; BSR set to: 0
  9140  0014E6  0100               	movlb	0	; () banked
  9141  0014E8  C063  F066         	movff	__div_to_l_@f2,??__div_to_l_
  9142  0014EC  0100               	movlb	0	; () banked
  9143  0014EE  C064  F067         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  9144  0014F2  0100               	movlb	0	; () banked
  9145  0014F4  C065  F068         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  9146  0014F8  0100               	movlb	0	; () banked
  9147  0014FA  C066  F069         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  9148  0014FE  0E18               	movlw	24
  9149  001500  D006               	goto	u3490
  9150  001502                     u3495:
  9151  001502  0100               	movlb	0	; () banked
  9152  001504  90D8               	bcf	status,0,c
  9153  001506  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  9154  001508  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  9155  00150A  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  9156  00150C  3366               	rrcf	??__div_to_l_& (0+255),f,b
  9157  00150E                     u3490:
  9158  00150E  2EE8               	decfsz	wreg,f,c
  9159  001510  D7F8               	goto	u3495
  9160  001512  0100               	movlb	0	; () banked
  9161  001514  5166               	movf	??__div_to_l_& (0+255),w,b
  9162  001516  0100               	movlb	0	; () banked
  9163  001518  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9164  00151A  0100               	movlb	0	; () banked
  9165  00151C  676E               	tstfsz	__div_to_l_@cntr& (0+255),b
  9166  00151E  D001               	goto	l3606
  9167  001520  D08E               	goto	u3540
  9168  001522                     l3606:
  9169                           
  9170                           ; BSR set to: 0
  9171  001522  0100               	movlb	0	; () banked
  9172  001524  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9173                           
  9174                           ; BSR set to: 0
  9175  001526  0EFF               	movlw	255
  9176  001528  0100               	movlb	0	; () banked
  9177  00152A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  9178  00152C  0EFF               	movlw	255
  9179  00152E  0100               	movlb	0	; () banked
  9180  001530  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9181  001532  0EFF               	movlw	255
  9182  001534  0100               	movlb	0	; () banked
  9183  001536  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9184  001538  0E00               	movlw	0
  9185  00153A  0100               	movlb	0	; () banked
  9186  00153C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9187                           
  9188                           ; BSR set to: 0
  9189  00153E  0100               	movlb	0	; () banked
  9190  001540  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9191  001542  0EFF               	movlw	255
  9192  001544  0100               	movlb	0	; () banked
  9193  001546  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  9194  001548  0EFF               	movlw	255
  9195  00154A  0100               	movlb	0	; () banked
  9196  00154C  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9197  00154E  0EFF               	movlw	255
  9198  001550  0100               	movlb	0	; () banked
  9199  001552  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9200  001554  0E00               	movlw	0
  9201  001556  0100               	movlb	0	; () banked
  9202  001558  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9203                           
  9204                           ; BSR set to: 0
  9205  00155A  0E00               	movlw	0
  9206  00155C  0100               	movlb	0	; () banked
  9207  00155E  6F6A               	movwf	__div_to_l_@quot& (0+255),b
  9208  001560  0E00               	movlw	0
  9209  001562  0100               	movlb	0	; () banked
  9210  001564  6F6B               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9211  001566  0E00               	movlw	0
  9212  001568  0100               	movlb	0	; () banked
  9213  00156A  6F6C               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9214  00156C  0E00               	movlw	0
  9215  00156E  0100               	movlb	0	; () banked
  9216  001570  6F6D               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9217                           
  9218                           ; BSR set to: 0
  9219  001572  0E7F               	movlw	127
  9220  001574  0100               	movlb	0	; () banked
  9221  001576  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9222                           
  9223                           ; BSR set to: 0
  9224  001578  0100               	movlb	0	; () banked
  9225  00157A  516E               	movf	__div_to_l_@cntr& (0+255),w,b
  9226  00157C  0FA0               	addlw	160
  9227  00157E  0100               	movlb	0	; () banked
  9228  001580  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9229                           
  9230                           ; BSR set to: 0
  9231  001582  0E20               	movlw	32
  9232  001584  0100               	movlb	0	; () banked
  9233  001586  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9234  001588                     l3620:
  9235                           
  9236                           ; BSR set to: 0
  9237  001588  0100               	movlb	0	; () banked
  9238  00158A  90D8               	bcf	status,0,c
  9239  00158C  0100               	movlb	0	; () banked
  9240  00158E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9241  001590  0100               	movlb	0	; () banked
  9242  001592  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9243  001594  0100               	movlb	0	; () banked
  9244  001596  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9245  001598  0100               	movlb	0	; () banked
  9246  00159A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9247                           
  9248                           ; BSR set to: 0
  9249  00159C  0100               	movlb	0	; () banked
  9250  00159E  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9251  0015A0  0100               	movlb	0	; () banked
  9252  0015A2  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  9253  0015A4  0100               	movlb	0	; () banked
  9254  0015A6  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9255  0015A8  0100               	movlb	0	; () banked
  9256  0015AA  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9257  0015AC  0100               	movlb	0	; () banked
  9258  0015AE  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9259  0015B0  0100               	movlb	0	; () banked
  9260  0015B2  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9261  0015B4  0100               	movlb	0	; () banked
  9262  0015B6  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9263  0015B8  0100               	movlb	0	; () banked
  9264  0015BA  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9265  0015BC  A0D8               	btfss	status,0,c
  9266  0015BE  D012               	goto	l3628
  9267                           
  9268                           ; BSR set to: 0
  9269  0015C0  0100               	movlb	0	; () banked
  9270  0015C2  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9271  0015C4  0100               	movlb	0	; () banked
  9272  0015C6  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  9273  0015C8  0100               	movlb	0	; () banked
  9274  0015CA  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9275  0015CC  0100               	movlb	0	; () banked
  9276  0015CE  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9277  0015D0  0100               	movlb	0	; () banked
  9278  0015D2  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9279  0015D4  0100               	movlb	0	; () banked
  9280  0015D6  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9281  0015D8  0100               	movlb	0	; () banked
  9282  0015DA  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9283  0015DC  0100               	movlb	0	; () banked
  9284  0015DE  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9285                           
  9286                           ; BSR set to: 0
  9287  0015E0  0100               	movlb	0	; () banked
  9288  0015E2  816A               	bsf	__div_to_l_@quot& (0+255),0,b
  9289  0015E4                     l3628:
  9290                           
  9291                           ; BSR set to: 0
  9292  0015E4  0100               	movlb	0	; () banked
  9293  0015E6  90D8               	bcf	status,0,c
  9294  0015E8  0100               	movlb	0	; () banked
  9295  0015EA  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  9296  0015EC  0100               	movlb	0	; () banked
  9297  0015EE  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9298  0015F0  0100               	movlb	0	; () banked
  9299  0015F2  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9300  0015F4  0100               	movlb	0	; () banked
  9301  0015F6  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9302                           
  9303                           ; BSR set to: 0
  9304  0015F8  0100               	movlb	0	; () banked
  9305  0015FA  2F6E               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9306  0015FC  D7C5               	goto	l3620
  9307                           
  9308                           ; BSR set to: 0
  9309  0015FE  0100               	movlb	0	; () banked
  9310  001600  AF6F               	btfss	__div_to_l_@exp1& (0+255),7,b
  9311  001602  D019               	goto	l3642
  9312                           
  9313                           ; BSR set to: 0
  9314  001604  0100               	movlb	0	; () banked
  9315  001606  516F               	movf	__div_to_l_@exp1& (0+255),w,b
  9316  001608  0A80               	xorlw	128
  9317  00160A  0100               	movlb	0	; () banked
  9318  00160C  6F66               	movwf	??__div_to_l_& (0+255),b
  9319  00160E  0EE1               	movlw	225
  9320  001610  0A80               	xorlw	128
  9321  001612  0100               	movlb	0	; () banked
  9322  001614  5D66               	subwf	??__div_to_l_& (0+255),w,b
  9323  001616  A0D8               	btfss	status,0,c
  9324  001618  D012               	goto	u3540
  9325  00161A                     l3638:
  9326                           
  9327                           ; BSR set to: 0
  9328  00161A  0100               	movlb	0	; () banked
  9329  00161C  90D8               	bcf	status,0,c
  9330  00161E  0100               	movlb	0	; () banked
  9331  001620  336D               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9332  001622  0100               	movlb	0	; () banked
  9333  001624  336C               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9334  001626  0100               	movlb	0	; () banked
  9335  001628  336B               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9336  00162A  0100               	movlb	0	; () banked
  9337  00162C  336A               	rrcf	__div_to_l_@quot& (0+255),f,b
  9338                           
  9339                           ; BSR set to: 0
  9340  00162E  0100               	movlb	0	; () banked
  9341  001630  3F6F               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9342  001632  D7F3               	goto	l3638
  9343  001634  D020               	goto	l972
  9344  001636                     l3642:
  9345                           
  9346                           ; BSR set to: 0
  9347  001636  0E1F               	movlw	31
  9348  001638  0100               	movlb	0	; () banked
  9349  00163A  656F               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9350  00163C  D019               	goto	l3650
  9351  00163E                     u3540:
  9352                           
  9353                           ; BSR set to: 0
  9354  00163E  0E00               	movlw	0
  9355  001640  0100               	movlb	0	; () banked
  9356  001642  6F60               	movwf	?__div_to_l_& (0+255),b
  9357  001644  0E00               	movlw	0
  9358  001646  0100               	movlb	0	; () banked
  9359  001648  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9360  00164A  0E00               	movlw	0
  9361  00164C  0100               	movlb	0	; () banked
  9362  00164E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9363  001650  0E00               	movlw	0
  9364  001652  0100               	movlb	0	; () banked
  9365  001654  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9366  001656  D017               	goto	l963
  9367  001658                     l3648:
  9368                           
  9369                           ; BSR set to: 0
  9370  001658  0100               	movlb	0	; () banked
  9371  00165A  90D8               	bcf	status,0,c
  9372  00165C  0100               	movlb	0	; () banked
  9373  00165E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9374  001660  0100               	movlb	0	; () banked
  9375  001662  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9376  001664  0100               	movlb	0	; () banked
  9377  001666  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9378  001668  0100               	movlb	0	; () banked
  9379  00166A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9380  00166C  0100               	movlb	0	; () banked
  9381  00166E  076F               	decf	__div_to_l_@exp1& (0+255),f,b
  9382  001670                     l3650:
  9383                           
  9384                           ; BSR set to: 0
  9385  001670  0100               	movlb	0	; () banked
  9386  001672  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9387  001674  D7F1               	goto	l3648
  9388  001676                     l972:
  9389                           
  9390                           ; BSR set to: 0
  9391  001676  C06A  F060         	movff	__div_to_l_@quot,?__div_to_l_
  9392  00167A  C06B  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9393  00167E  C06C  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9394  001682  C06D  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9395  001686                     l963:
  9396                           
  9397                           ; BSR set to: 0
  9398  001686  0012               	return	
  9399  001688                     __end_of__div_to_l_:
  9400                           	opt stack 0
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           intcon2	equ	0xFF1
  9409                           intcon3	equ	0xFF0
  9410                           indf0	equ	0xFEF
  9411                           postinc0	equ	0xFEE
  9412                           fsr0h	equ	0xFEA
  9413                           fsr0l	equ	0xFE9
  9414                           wreg	equ	0xFE8
  9415                           postinc1	equ	0xFE6
  9416                           postdec1	equ	0xFE5
  9417                           fsr1l	equ	0xFE1
  9418                           indf2	equ	0xFDF
  9419                           postinc2	equ	0xFDE
  9420                           postdec2	equ	0xFDD
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function ___lltoft *****************
  9426 ;; Defined at:
  9427 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;  c               4    8[BANK0 ] unsigned long 
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  exp             1   16[BANK0 ] unsigned char 
  9432 ;; Return value:  Size  Location     Type
  9433 ;;                  3    8[BANK0 ] float 
  9434 ;; Registers used:
  9435 ;;		wreg, status,2, status,0, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9441 ;;      Params:         0       4       0       0       0       0       0       0       0
  9442 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9443 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9444 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9445 ;;Total ram usage:        9 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    5
  9448 ;; This function calls:
  9449 ;;		___ftpack
  9450 ;; This function is called by:
  9451 ;;		_sprintf
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text38
  9456  002B4E                     __ptext38:
  9457                           	opt stack 0
  9458  002B4E                     ___lltoft:
  9459                           	opt stack 22
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;incstack = 0
  9463  002B4E  0E8E               	movlw	142
  9464  002B50  0100               	movlb	0	; () banked
  9465  002B52  6F70               	movwf	___lltoft@exp& (0+255),b
  9466  002B54  D00C               	goto	l3768
  9467  002B56                     l3766:
  9468                           
  9469                           ; BSR set to: 0
  9470  002B56  0100               	movlb	0	; () banked
  9471  002B58  90D8               	bcf	status,0,c
  9472  002B5A  0100               	movlb	0	; () banked
  9473  002B5C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9474  002B5E  0100               	movlb	0	; () banked
  9475  002B60  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9476  002B62  0100               	movlb	0	; () banked
  9477  002B64  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9478  002B66  0100               	movlb	0	; () banked
  9479  002B68  3368               	rrcf	___lltoft@c& (0+255),f,b
  9480  002B6A  0100               	movlb	0	; () banked
  9481  002B6C  2B70               	incf	___lltoft@exp& (0+255),f,b
  9482  002B6E                     l3768:
  9483                           
  9484                           ; BSR set to: 0
  9485  002B6E  0E00               	movlw	0
  9486  002B70  0100               	movlb	0	; () banked
  9487  002B72  1568               	andwf	___lltoft@c& (0+255),w,b
  9488  002B74  0100               	movlb	0	; () banked
  9489  002B76  6F6C               	movwf	??___lltoft& (0+255),b
  9490  002B78  0E00               	movlw	0
  9491  002B7A  0100               	movlb	0	; () banked
  9492  002B7C  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  9493  002B7E  0100               	movlb	0	; () banked
  9494  002B80  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  9495  002B82  0E00               	movlw	0
  9496  002B84  0100               	movlb	0	; () banked
  9497  002B86  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9498  002B88  0100               	movlb	0	; () banked
  9499  002B8A  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  9500  002B8C  0EFF               	movlw	255
  9501  002B8E  0100               	movlb	0	; () banked
  9502  002B90  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9503  002B92  0100               	movlb	0	; () banked
  9504  002B94  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  9505  002B96  0100               	movlb	0	; () banked
  9506  002B98  516F               	movf	(??___lltoft+3)& (0+255),w,b
  9507  002B9A  116C               	iorwf	??___lltoft& (0+255),w,b
  9508  002B9C  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9509  002B9E  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9510  002BA0  A4D8               	btfss	status,2,c
  9511  002BA2  D7D9               	goto	l3766
  9512                           
  9513                           ; BSR set to: 0
  9514                           
  9515                           ; BSR set to: 0
  9516  002BA4  C068  F060         	movff	___lltoft@c,___ftpack@arg
  9517  002BA8  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  9518  002BAC  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  9519  002BB0  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  9520  002BB4  0E00               	movlw	0
  9521  002BB6  0100               	movlb	0	; () banked
  9522  002BB8  6F64               	movwf	___ftpack@sign& (0+255),b
  9523  002BBA  EC5D  F00F         	call	___ftpack	;wreg free
  9524  002BBE  C060  F068         	movff	?___ftpack,?___lltoft
  9525  002BC2  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  9526  002BC6  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  9527  002BCA  0012               	return	
  9528  002BCC                     __end_of___lltoft:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           prodh	equ	0xFF4
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           intcon3	equ	0xFF0
  9539                           indf0	equ	0xFEF
  9540                           postinc0	equ	0xFEE
  9541                           fsr0h	equ	0xFEA
  9542                           fsr0l	equ	0xFE9
  9543                           wreg	equ	0xFE8
  9544                           postinc1	equ	0xFE6
  9545                           postdec1	equ	0xFE5
  9546                           fsr1l	equ	0xFE1
  9547                           indf2	equ	0xFDF
  9548                           postinc2	equ	0xFDE
  9549                           postdec2	equ	0xFDD
  9550                           fsr2h	equ	0xFDA
  9551                           fsr2l	equ	0xFD9
  9552                           status	equ	0xFD8
  9553                           
  9554 ;; *************** function ___llmod *****************
  9555 ;; Defined at:
  9556 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  dividend        4   13[BANK0 ] unsigned long 
  9559 ;;  divisor         4   17[BANK0 ] unsigned long 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  counter         1   21[BANK0 ] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  4   13[BANK0 ] unsigned long 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9571 ;;      Params:         0       8       0       0       0       0       0       0       0
  9572 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9574 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9575 ;;Total ram usage:        9 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    4
  9578 ;; This function calls:
  9579 ;;		Nothing
  9580 ;; This function is called by:
  9581 ;;		_sprintf
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           	psect	text39
  9586  002884                     __ptext39:
  9587                           	opt stack 0
  9588  002884                     ___llmod:
  9589                           	opt stack 23
  9590                           
  9591                           ;incstack = 0
  9592  002884  0100               	movlb	0	; () banked
  9593  002886  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9594  002888  1171               	iorwf	___llmod@divisor& (0+255),w,b
  9595  00288A  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9596  00288C  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9597  00288E  B4D8               	btfsc	status,2,c
  9598  002890  D042               	goto	l1174
  9599                           
  9600                           ; BSR set to: 0
  9601  002892  0E01               	movlw	1
  9602  002894  0100               	movlb	0	; () banked
  9603  002896  6F75               	movwf	___llmod@counter& (0+255),b
  9604  002898  D00C               	goto	l3754
  9605  00289A                     l3752:
  9606                           
  9607                           ; BSR set to: 0
  9608  00289A  0100               	movlb	0	; () banked
  9609  00289C  90D8               	bcf	status,0,c
  9610  00289E  0100               	movlb	0	; () banked
  9611  0028A0  3771               	rlcf	___llmod@divisor& (0+255),f,b
  9612  0028A2  0100               	movlb	0	; () banked
  9613  0028A4  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9614  0028A6  0100               	movlb	0	; () banked
  9615  0028A8  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9616  0028AA  0100               	movlb	0	; () banked
  9617  0028AC  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9618  0028AE  0100               	movlb	0	; () banked
  9619  0028B0  2B75               	incf	___llmod@counter& (0+255),f,b
  9620  0028B2                     l3754:
  9621                           
  9622                           ; BSR set to: 0
  9623  0028B2  0100               	movlb	0	; () banked
  9624  0028B4  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9625  0028B6  D7F1               	goto	l3752
  9626  0028B8                     l3756:
  9627                           
  9628                           ; BSR set to: 0
  9629  0028B8  0100               	movlb	0	; () banked
  9630  0028BA  5171               	movf	___llmod@divisor& (0+255),w,b
  9631  0028BC  0100               	movlb	0	; () banked
  9632  0028BE  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  9633  0028C0  0100               	movlb	0	; () banked
  9634  0028C2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9635  0028C4  0100               	movlb	0	; () banked
  9636  0028C6  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9637  0028C8  0100               	movlb	0	; () banked
  9638  0028CA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9639  0028CC  0100               	movlb	0	; () banked
  9640  0028CE  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9641  0028D0  0100               	movlb	0	; () banked
  9642  0028D2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9643  0028D4  0100               	movlb	0	; () banked
  9644  0028D6  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9645  0028D8  A0D8               	btfss	status,0,c
  9646  0028DA  D010               	goto	l3760
  9647                           
  9648                           ; BSR set to: 0
  9649  0028DC  0100               	movlb	0	; () banked
  9650  0028DE  5171               	movf	___llmod@divisor& (0+255),w,b
  9651  0028E0  0100               	movlb	0	; () banked
  9652  0028E2  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  9653  0028E4  0100               	movlb	0	; () banked
  9654  0028E6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9655  0028E8  0100               	movlb	0	; () banked
  9656  0028EA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9657  0028EC  0100               	movlb	0	; () banked
  9658  0028EE  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9659  0028F0  0100               	movlb	0	; () banked
  9660  0028F2  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9661  0028F4  0100               	movlb	0	; () banked
  9662  0028F6  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9663  0028F8  0100               	movlb	0	; () banked
  9664  0028FA  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9665  0028FC                     l3760:
  9666                           
  9667                           ; BSR set to: 0
  9668  0028FC  0100               	movlb	0	; () banked
  9669  0028FE  90D8               	bcf	status,0,c
  9670  002900  0100               	movlb	0	; () banked
  9671  002902  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9672  002904  0100               	movlb	0	; () banked
  9673  002906  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9674  002908  0100               	movlb	0	; () banked
  9675  00290A  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9676  00290C  0100               	movlb	0	; () banked
  9677  00290E  3371               	rrcf	___llmod@divisor& (0+255),f,b
  9678                           
  9679                           ; BSR set to: 0
  9680  002910  0100               	movlb	0	; () banked
  9681  002912  2F75               	decfsz	___llmod@counter& (0+255),f,b
  9682  002914  D7D1               	goto	l3756
  9683  002916                     l1174:
  9684                           
  9685                           ; BSR set to: 0
  9686  002916  C06D  F06D         	movff	___llmod@dividend,?___llmod
  9687  00291A  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  9688  00291E  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  9689  002922  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  9690                           
  9691                           ; BSR set to: 0
  9692  002926  0012               	return	
  9693  002928                     __end_of___llmod:
  9694                           	opt stack 0
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           intcon2	equ	0xFF1
  9703                           intcon3	equ	0xFF0
  9704                           indf0	equ	0xFEF
  9705                           postinc0	equ	0xFEE
  9706                           fsr0h	equ	0xFEA
  9707                           fsr0l	equ	0xFE9
  9708                           wreg	equ	0xFE8
  9709                           postinc1	equ	0xFE6
  9710                           postdec1	equ	0xFE5
  9711                           fsr1l	equ	0xFE1
  9712                           indf2	equ	0xFDF
  9713                           postinc2	equ	0xFDE
  9714                           postdec2	equ	0xFDD
  9715                           fsr2h	equ	0xFDA
  9716                           fsr2l	equ	0xFD9
  9717                           status	equ	0xFD8
  9718                           
  9719 ;; *************** function ___lldiv *****************
  9720 ;; Defined at:
  9721 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;  dividend        4    0[BANK0 ] unsigned long 
  9724 ;;  divisor         4    4[BANK0 ] unsigned long 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  quotient        4    8[BANK0 ] unsigned long 
  9727 ;;  counter         1   12[BANK0 ] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  4    0[BANK0 ] unsigned long 
  9730 ;; Registers used:
  9731 ;;		wreg, status,2, status,0
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9737 ;;      Params:         0       8       0       0       0       0       0       0       0
  9738 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9740 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9741 ;;Total ram usage:       13 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    4
  9744 ;; This function calls:
  9745 ;;		Nothing
  9746 ;; This function is called by:
  9747 ;;		_sprintf
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           	psect	text40
  9752  00218A                     __ptext40:
  9753                           	opt stack 0
  9754  00218A                     ___lldiv:
  9755                           	opt stack 23
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;incstack = 0
  9759  00218A  0E00               	movlw	0
  9760  00218C  0100               	movlb	0	; () banked
  9761  00218E  6F68               	movwf	___lldiv@quotient& (0+255),b
  9762  002190  0E00               	movlw	0
  9763  002192  0100               	movlb	0	; () banked
  9764  002194  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  9765  002196  0E00               	movlw	0
  9766  002198  0100               	movlb	0	; () banked
  9767  00219A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9768  00219C  0E00               	movlw	0
  9769  00219E  0100               	movlb	0	; () banked
  9770  0021A0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9771                           
  9772                           ; BSR set to: 0
  9773  0021A2  0100               	movlb	0	; () banked
  9774  0021A4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9775  0021A6  1164               	iorwf	___lldiv@divisor& (0+255),w,b
  9776  0021A8  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9777  0021AA  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9778  0021AC  B4D8               	btfsc	status,2,c
  9779  0021AE  D04E               	goto	l1164
  9780                           
  9781                           ; BSR set to: 0
  9782  0021B0  0E01               	movlw	1
  9783  0021B2  0100               	movlb	0	; () banked
  9784  0021B4  6F6C               	movwf	___lldiv@counter& (0+255),b
  9785  0021B6  D00C               	goto	l3734
  9786  0021B8                     l3732:
  9787                           
  9788                           ; BSR set to: 0
  9789  0021B8  0100               	movlb	0	; () banked
  9790  0021BA  90D8               	bcf	status,0,c
  9791  0021BC  0100               	movlb	0	; () banked
  9792  0021BE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  9793  0021C0  0100               	movlb	0	; () banked
  9794  0021C2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9795  0021C4  0100               	movlb	0	; () banked
  9796  0021C6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9797  0021C8  0100               	movlb	0	; () banked
  9798  0021CA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9799  0021CC  0100               	movlb	0	; () banked
  9800  0021CE  2B6C               	incf	___lldiv@counter& (0+255),f,b
  9801  0021D0                     l3734:
  9802                           
  9803                           ; BSR set to: 0
  9804  0021D0  0100               	movlb	0	; () banked
  9805  0021D2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9806  0021D4  D7F1               	goto	l3732
  9807  0021D6                     l3736:
  9808                           
  9809                           ; BSR set to: 0
  9810  0021D6  0100               	movlb	0	; () banked
  9811  0021D8  90D8               	bcf	status,0,c
  9812  0021DA  0100               	movlb	0	; () banked
  9813  0021DC  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  9814  0021DE  0100               	movlb	0	; () banked
  9815  0021E0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9816  0021E2  0100               	movlb	0	; () banked
  9817  0021E4  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9818  0021E6  0100               	movlb	0	; () banked
  9819  0021E8  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9820                           
  9821                           ; BSR set to: 0
  9822  0021EA  0100               	movlb	0	; () banked
  9823  0021EC  5164               	movf	___lldiv@divisor& (0+255),w,b
  9824  0021EE  0100               	movlb	0	; () banked
  9825  0021F0  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  9826  0021F2  0100               	movlb	0	; () banked
  9827  0021F4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9828  0021F6  0100               	movlb	0	; () banked
  9829  0021F8  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9830  0021FA  0100               	movlb	0	; () banked
  9831  0021FC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9832  0021FE  0100               	movlb	0	; () banked
  9833  002200  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9834  002202  0100               	movlb	0	; () banked
  9835  002204  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9836  002206  0100               	movlb	0	; () banked
  9837  002208  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9838  00220A  A0D8               	btfss	status,0,c
  9839  00220C  D012               	goto	l3744
  9840                           
  9841                           ; BSR set to: 0
  9842  00220E  0100               	movlb	0	; () banked
  9843  002210  5164               	movf	___lldiv@divisor& (0+255),w,b
  9844  002212  0100               	movlb	0	; () banked
  9845  002214  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  9846  002216  0100               	movlb	0	; () banked
  9847  002218  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9848  00221A  0100               	movlb	0	; () banked
  9849  00221C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9850  00221E  0100               	movlb	0	; () banked
  9851  002220  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9852  002222  0100               	movlb	0	; () banked
  9853  002224  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9854  002226  0100               	movlb	0	; () banked
  9855  002228  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9856  00222A  0100               	movlb	0	; () banked
  9857  00222C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9858                           
  9859                           ; BSR set to: 0
  9860  00222E  0100               	movlb	0	; () banked
  9861  002230  8168               	bsf	___lldiv@quotient& (0+255),0,b
  9862  002232                     l3744:
  9863                           
  9864                           ; BSR set to: 0
  9865  002232  0100               	movlb	0	; () banked
  9866  002234  90D8               	bcf	status,0,c
  9867  002236  0100               	movlb	0	; () banked
  9868  002238  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9869  00223A  0100               	movlb	0	; () banked
  9870  00223C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9871  00223E  0100               	movlb	0	; () banked
  9872  002240  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9873  002242  0100               	movlb	0	; () banked
  9874  002244  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  9875                           
  9876                           ; BSR set to: 0
  9877  002246  0100               	movlb	0	; () banked
  9878  002248  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  9879  00224A  D7C5               	goto	l3736
  9880  00224C                     l1164:
  9881                           
  9882                           ; BSR set to: 0
  9883  00224C  C068  F060         	movff	___lldiv@quotient,?___lldiv
  9884  002250  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  9885  002254  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  9886  002258  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  9887                           
  9888                           ; BSR set to: 0
  9889  00225C  0012               	return	
  9890  00225E                     __end_of___lldiv:
  9891                           	opt stack 0
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon2	equ	0xFF1
  9900                           intcon3	equ	0xFF0
  9901                           indf0	equ	0xFEF
  9902                           postinc0	equ	0xFEE
  9903                           fsr0h	equ	0xFEA
  9904                           fsr0l	equ	0xFE9
  9905                           wreg	equ	0xFE8
  9906                           postinc1	equ	0xFE6
  9907                           postdec1	equ	0xFE5
  9908                           fsr1l	equ	0xFE1
  9909                           indf2	equ	0xFDF
  9910                           postinc2	equ	0xFDE
  9911                           postdec2	equ	0xFDD
  9912                           fsr2h	equ	0xFDA
  9913                           fsr2l	equ	0xFD9
  9914                           status	equ	0xFD8
  9915                           
  9916 ;; *************** function ___fttol *****************
  9917 ;; Defined at:
  9918 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  f1              3   42[BANK0 ] float 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  lval            4   52[BANK0 ] unsigned long 
  9923 ;;  exp1            1   56[BANK0 ] unsigned char 
  9924 ;;  sign1           1   51[BANK0 ] unsigned char 
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  4   42[BANK0 ] long 
  9927 ;; Registers used:
  9928 ;;		wreg, status,2, status,0
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9934 ;;      Params:         0       4       0       0       0       0       0       0       0
  9935 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9936 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9937 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9938 ;;Total ram usage:       15 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    4
  9941 ;; This function calls:
  9942 ;;		Nothing
  9943 ;; This function is called by:
  9944 ;;		_PWM_DutyCycle1
  9945 ;;		_PWM_DutyCycle2
  9946 ;;		_sprintf
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text41
  9951  001C60                     __ptext41:
  9952                           	opt stack 0
  9953  001C60                     ___fttol:
  9954                           	opt stack 25
  9955                           
  9956                           ; BSR set to: 0
  9957                           ;incstack = 0
  9958  001C60  0100               	movlb	0	; () banked
  9959  001C62  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  9960  001C66  0100               	movlb	0	; () banked
  9961  001C68  6B8F               	clrf	(??___fttol+1)& (0+255),b
  9962  001C6A  6B90               	clrf	(??___fttol+2)& (0+255),b
  9963  001C6C  0100               	movlb	0	; () banked
  9964  001C6E  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9965  001C70  0100               	movlb	0	; () banked
  9966  001C72  378E               	rlcf	??___fttol& (0+255),f,b
  9967  001C74  E301               	bnc	u3601
  9968  001C76  818F               	bsf	(??___fttol+1)& (0+255),0,b
  9969  001C78                     u3601:
  9970  001C78  0100               	movlb	0	; () banked
  9971  001C7A  518E               	movf	??___fttol& (0+255),w,b
  9972  001C7C  0100               	movlb	0	; () banked
  9973  001C7E  6F98               	movwf	___fttol@exp1& (0+255),b
  9974  001C80  0100               	movlb	0	; () banked
  9975  001C82  6798               	tstfsz	___fttol@exp1& (0+255),b
  9976  001C84  D001               	goto	l3686
  9977  001C86  D059               	goto	u3650
  9978  001C88                     l3686:
  9979                           
  9980                           ; BSR set to: 0
  9981  001C88  0E17               	movlw	23
  9982  001C8A  0100               	movlb	0	; () banked
  9983  001C8C  6F8E               	movwf	??___fttol& (0+255),b
  9984  001C8E  0100               	movlb	0	; () banked
  9985  001C90  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  9986  001C94  0100               	movlb	0	; () banked
  9987  001C96  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  9988  001C9A  0100               	movlb	0	; () banked
  9989  001C9C  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  9990  001CA0  0100               	movlb	0	; () banked
  9991  001CA2  298E               	incf	??___fttol& (0+255),w,b
  9992  001CA4  0100               	movlb	0	; () banked
  9993  001CA6  6F92               	movwf	(??___fttol+4)& (0+255),b
  9994  001CA8  D005               	goto	u3620
  9995  001CAA                     u3625:
  9996  001CAA  0100               	movlb	0	; () banked
  9997  001CAC  90D8               	bcf	status,0,c
  9998  001CAE  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  9999  001CB0  3390               	rrcf	(??___fttol+2)& (0+255),f,b
 10000  001CB2  338F               	rrcf	(??___fttol+1)& (0+255),f,b
 10001  001CB4                     u3620:
 10002  001CB4  0100               	movlb	0	; () banked
 10003  001CB6  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
 10004  001CB8  D7F8               	goto	u3625
 10005  001CBA  0100               	movlb	0	; () banked
 10006  001CBC  518F               	movf	(??___fttol+1)& (0+255),w,b
 10007  001CBE  0100               	movlb	0	; () banked
 10008  001CC0  6F93               	movwf	___fttol@sign1& (0+255),b
 10009                           
 10010                           ; BSR set to: 0
 10011  001CC2  0100               	movlb	0	; () banked
 10012  001CC4  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
 10013                           
 10014                           ; BSR set to: 0
 10015  001CC6  0EFF               	movlw	255
 10016  001CC8  0100               	movlb	0	; () banked
 10017  001CCA  178A               	andwf	___fttol@f1& (0+255),f,b
 10018  001CCC  0EFF               	movlw	255
 10019  001CCE  0100               	movlb	0	; () banked
 10020  001CD0  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
 10021  001CD2  0E00               	movlw	0
 10022  001CD4  0100               	movlb	0	; () banked
 10023  001CD6  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
 10024                           
 10025                           ; BSR set to: 0
 10026  001CD8  0100               	movlb	0	; () banked
 10027  001CDA  518A               	movf	___fttol@f1& (0+255),w,b
 10028  001CDC  0100               	movlb	0	; () banked
 10029  001CDE  6F94               	movwf	___fttol@lval& (0+255),b
 10030  001CE0  0100               	movlb	0	; () banked
 10031  001CE2  518B               	movf	(___fttol@f1+1)& (0+255),w,b
 10032  001CE4  0100               	movlb	0	; () banked
 10033  001CE6  6F95               	movwf	(___fttol@lval+1)& (0+255),b
 10034  001CE8  0100               	movlb	0	; () banked
 10035  001CEA  518C               	movf	(___fttol@f1+2)& (0+255),w,b
 10036  001CEC  0100               	movlb	0	; () banked
 10037  001CEE  6F96               	movwf	(___fttol@lval+2)& (0+255),b
 10038  001CF0  0100               	movlb	0	; () banked
 10039  001CF2  6B97               	clrf	(___fttol@lval+3)& (0+255),b
 10040                           
 10041                           ; BSR set to: 0
 10042  001CF4  0E8E               	movlw	142
 10043  001CF6  0100               	movlb	0	; () banked
 10044  001CF8  5F98               	subwf	___fttol@exp1& (0+255),f,b
 10045                           
 10046                           ; BSR set to: 0
 10047  001CFA  0100               	movlb	0	; () banked
 10048  001CFC  AF98               	btfss	___fttol@exp1& (0+255),7,b
 10049  001CFE  D019               	goto	l3708
 10050                           
 10051                           ; BSR set to: 0
 10052  001D00  0100               	movlb	0	; () banked
 10053  001D02  5198               	movf	___fttol@exp1& (0+255),w,b
 10054  001D04  0A80               	xorlw	128
 10055  001D06  0100               	movlb	0	; () banked
 10056  001D08  6F8E               	movwf	??___fttol& (0+255),b
 10057  001D0A  0EF1               	movlw	241
 10058  001D0C  0A80               	xorlw	128
 10059  001D0E  0100               	movlb	0	; () banked
 10060  001D10  5D8E               	subwf	??___fttol& (0+255),w,b
 10061  001D12  A0D8               	btfss	status,0,c
 10062  001D14  D012               	goto	u3650
 10063  001D16                     l3704:
 10064                           
 10065                           ; BSR set to: 0
 10066  001D16  0100               	movlb	0	; () banked
 10067  001D18  90D8               	bcf	status,0,c
 10068  001D1A  0100               	movlb	0	; () banked
 10069  001D1C  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
 10070  001D1E  0100               	movlb	0	; () banked
 10071  001D20  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
 10072  001D22  0100               	movlb	0	; () banked
 10073  001D24  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
 10074  001D26  0100               	movlb	0	; () banked
 10075  001D28  3394               	rrcf	___fttol@lval& (0+255),f,b
 10076                           
 10077                           ; BSR set to: 0
 10078  001D2A  0100               	movlb	0	; () banked
 10079  001D2C  3F98               	incfsz	___fttol@exp1& (0+255),f,b
 10080  001D2E  D7F3               	goto	l3704
 10081  001D30  D020               	goto	l3718
 10082  001D32                     l3708:
 10083                           
 10084                           ; BSR set to: 0
 10085  001D32  0E17               	movlw	23
 10086  001D34  0100               	movlb	0	; () banked
 10087  001D36  6598               	cpfsgt	___fttol@exp1& (0+255),b
 10088  001D38  D019               	goto	l3716
 10089  001D3A                     u3650:
 10090                           
 10091                           ; BSR set to: 0
 10092  001D3A  0E00               	movlw	0
 10093  001D3C  0100               	movlb	0	; () banked
 10094  001D3E  6F8A               	movwf	?___fttol& (0+255),b
 10095  001D40  0E00               	movlw	0
 10096  001D42  0100               	movlb	0	; () banked
 10097  001D44  6F8B               	movwf	(?___fttol+1)& (0+255),b
 10098  001D46  0E00               	movlw	0
 10099  001D48  0100               	movlb	0	; () banked
 10100  001D4A  6F8C               	movwf	(?___fttol+2)& (0+255),b
 10101  001D4C  0E00               	movlw	0
 10102  001D4E  0100               	movlb	0	; () banked
 10103  001D50  6F8D               	movwf	(?___fttol+3)& (0+255),b
 10104  001D52  D02A               	goto	l1125
 10105  001D54                     l3714:
 10106                           
 10107                           ; BSR set to: 0
 10108  001D54  0100               	movlb	0	; () banked
 10109  001D56  90D8               	bcf	status,0,c
 10110  001D58  0100               	movlb	0	; () banked
 10111  001D5A  3794               	rlcf	___fttol@lval& (0+255),f,b
 10112  001D5C  0100               	movlb	0	; () banked
 10113  001D5E  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
 10114  001D60  0100               	movlb	0	; () banked
 10115  001D62  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
 10116  001D64  0100               	movlb	0	; () banked
 10117  001D66  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
 10118  001D68  0100               	movlb	0	; () banked
 10119  001D6A  0798               	decf	___fttol@exp1& (0+255),f,b
 10120  001D6C                     l3716:
 10121                           
 10122                           ; BSR set to: 0
 10123  001D6C  0100               	movlb	0	; () banked
 10124  001D6E  6798               	tstfsz	___fttol@exp1& (0+255),b
 10125  001D70  D7F1               	goto	l3714
 10126  001D72                     l3718:
 10127                           
 10128                           ; BSR set to: 0
 10129  001D72  0100               	movlb	0	; () banked
 10130  001D74  5193               	movf	___fttol@sign1& (0+255),w,b
 10131  001D76  B4D8               	btfsc	status,2,c
 10132  001D78  D00F               	goto	l3722
 10133                           
 10134                           ; BSR set to: 0
 10135  001D7A  0100               	movlb	0	; () banked
 10136  001D7C  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 10137  001D7E  0100               	movlb	0	; () banked
 10138  001D80  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 10139  001D82  0100               	movlb	0	; () banked
 10140  001D84  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 10141  001D86  0100               	movlb	0	; () banked
 10142  001D88  6D94               	negf	___fttol@lval& (0+255),b
 10143  001D8A  0E00               	movlw	0
 10144  001D8C  0100               	movlb	0	; () banked
 10145  001D8E  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10146  001D90  0100               	movlb	0	; () banked
 10147  001D92  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10148  001D94  0100               	movlb	0	; () banked
 10149  001D96  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10150  001D98                     l3722:
 10151                           
 10152                           ; BSR set to: 0
 10153  001D98  C094  F08A         	movff	___fttol@lval,?___fttol
 10154  001D9C  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 10155  001DA0  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 10156  001DA4  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 10157  001DA8                     l1125:
 10158                           
 10159                           ; BSR set to: 0
 10160  001DA8  0012               	return	
 10161  001DAA                     __end_of___fttol:
 10162                           	opt stack 0
 10163                           tblptru	equ	0xFF8
 10164                           tblptrh	equ	0xFF7
 10165                           tblptrl	equ	0xFF6
 10166                           tablat	equ	0xFF5
 10167                           prodh	equ	0xFF4
 10168                           prodl	equ	0xFF3
 10169                           intcon	equ	0xFF2
 10170                           intcon2	equ	0xFF1
 10171                           intcon3	equ	0xFF0
 10172                           indf0	equ	0xFEF
 10173                           postinc0	equ	0xFEE
 10174                           fsr0h	equ	0xFEA
 10175                           fsr0l	equ	0xFE9
 10176                           wreg	equ	0xFE8
 10177                           postinc1	equ	0xFE6
 10178                           postdec1	equ	0xFE5
 10179                           fsr1l	equ	0xFE1
 10180                           indf2	equ	0xFDF
 10181                           postinc2	equ	0xFDE
 10182                           postdec2	equ	0xFDD
 10183                           fsr2h	equ	0xFDA
 10184                           fsr2l	equ	0xFD9
 10185                           status	equ	0xFD8
 10186                           
 10187 ;; *************** function ___ftsub *****************
 10188 ;; Defined at:
 10189 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;  f1              3   57[BANK0 ] float 
 10192 ;;  f2              3   60[BANK0 ] float 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  3   57[BANK0 ] float 
 10197 ;; Registers used:
 10198 ;;		wreg, status,2, status,0, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10204 ;;      Params:         0       6       0       0       0       0       0       0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10207 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10208 ;;Total ram usage:        6 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    6
 10211 ;; This function calls:
 10212 ;;		___ftadd
 10213 ;; This function is called by:
 10214 ;;		_sprintf
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text42
 10219  0031FA                     __ptext42:
 10220                           	opt stack 0
 10221  0031FA                     ___ftsub:
 10222                           	opt stack 21
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;incstack = 0
 10226  0031FA  0E00               	movlw	0
 10227  0031FC  0100               	movlb	0	; () banked
 10228  0031FE  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 10229  003200  0E00               	movlw	0
 10230  003202  0100               	movlb	0	; () banked
 10231  003204  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10232  003206  0E80               	movlw	128
 10233  003208  0100               	movlb	0	; () banked
 10234  00320A  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10235                           
 10236                           ; BSR set to: 0
 10237  00320C  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 10238  003210  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 10239  003214  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 10240  003218  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 10241  00321C  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 10242  003220  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 10243  003224  EC15  F009         	call	___ftadd	;wreg free
 10244  003228  C08D  F099         	movff	?___ftadd,?___ftsub
 10245  00322C  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 10246  003230  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 10247  003234  0012               	return	
 10248  003236                     __end_of___ftsub:
 10249                           	opt stack 0
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           prodh	equ	0xFF4
 10255                           prodl	equ	0xFF3
 10256                           intcon	equ	0xFF2
 10257                           intcon2	equ	0xFF1
 10258                           intcon3	equ	0xFF0
 10259                           indf0	equ	0xFEF
 10260                           postinc0	equ	0xFEE
 10261                           fsr0h	equ	0xFEA
 10262                           fsr0l	equ	0xFE9
 10263                           wreg	equ	0xFE8
 10264                           postinc1	equ	0xFE6
 10265                           postdec1	equ	0xFE5
 10266                           fsr1l	equ	0xFE1
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           postdec2	equ	0xFDD
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8
 10273                           
 10274 ;; *************** function ___ftadd *****************
 10275 ;; Defined at:
 10276 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10277 ;; Parameters:    Size  Location     Type
 10278 ;;  f1              3   45[BANK0 ] float 
 10279 ;;  f2              3   48[BANK0 ] float 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  exp1            1   56[BANK0 ] unsigned char 
 10282 ;;  exp2            1   55[BANK0 ] unsigned char 
 10283 ;;  sign            1   54[BANK0 ] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  3   45[BANK0 ] float 
 10286 ;; Registers used:
 10287 ;;		wreg, status,2, status,0, cstack
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10293 ;;      Params:         0       6       0       0       0       0       0       0       0
 10294 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10295 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10296 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10297 ;;Total ram usage:       12 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    5
 10300 ;; This function calls:
 10301 ;;		___ftpack
 10302 ;; This function is called by:
 10303 ;;		_sprintf
 10304 ;;		___ftsub
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text43
 10309  00122A                     __ptext43:
 10310                           	opt stack 0
 10311  00122A                     ___ftadd:
 10312                           	opt stack 21
 10313                           
 10314                           ;incstack = 0
 10315  00122A  0100               	movlb	0	; () banked
 10316  00122C  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 10317  001230  0100               	movlb	0	; () banked
 10318  001232  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10319  001234  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10320  001236  0100               	movlb	0	; () banked
 10321  001238  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10322  00123A  0100               	movlb	0	; () banked
 10323  00123C  3793               	rlcf	??___ftadd& (0+255),f,b
 10324  00123E  E301               	bnc	u2761
 10325  001240  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10326  001242                     u2761:
 10327  001242  0100               	movlb	0	; () banked
 10328  001244  5193               	movf	??___ftadd& (0+255),w,b
 10329  001246  0100               	movlb	0	; () banked
 10330  001248  6F98               	movwf	___ftadd@exp1& (0+255),b
 10331  00124A  0100               	movlb	0	; () banked
 10332  00124C  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 10333  001250  0100               	movlb	0	; () banked
 10334  001252  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10335  001254  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10336  001256  0100               	movlb	0	; () banked
 10337  001258  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10338  00125A  0100               	movlb	0	; () banked
 10339  00125C  3793               	rlcf	??___ftadd& (0+255),f,b
 10340  00125E  E301               	bnc	u2771
 10341  001260  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10342  001262                     u2771:
 10343  001262  0100               	movlb	0	; () banked
 10344  001264  5193               	movf	??___ftadd& (0+255),w,b
 10345  001266  0100               	movlb	0	; () banked
 10346  001268  6F97               	movwf	___ftadd@exp2& (0+255),b
 10347                           
 10348                           ; BSR set to: 0
 10349  00126A  0100               	movlb	0	; () banked
 10350  00126C  5198               	movf	___ftadd@exp1& (0+255),w,b
 10351  00126E  B4D8               	btfsc	status,2,c
 10352  001270  D012               	goto	l1041
 10353                           
 10354                           ; BSR set to: 0
 10355  001272  0100               	movlb	0	; () banked
 10356  001274  5197               	movf	___ftadd@exp2& (0+255),w,b
 10357  001276  0100               	movlb	0	; () banked
 10358  001278  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10359  00127A  B0D8               	btfsc	status,0,c
 10360  00127C  D013               	goto	l3194
 10361                           
 10362                           ; BSR set to: 0
 10363  00127E  0100               	movlb	0	; () banked
 10364  001280  5198               	movf	___ftadd@exp1& (0+255),w,b
 10365  001282  0800               	sublw	0
 10366  001284  0100               	movlb	0	; () banked
 10367  001286  2597               	addwf	___ftadd@exp2& (0+255),w,b
 10368  001288  0100               	movlb	0	; () banked
 10369  00128A  6F93               	movwf	??___ftadd& (0+255),b
 10370  00128C  0E19               	movlw	25
 10371  00128E  0100               	movlb	0	; () banked
 10372  001290  5D93               	subwf	??___ftadd& (0+255),w,b
 10373  001292  A0D8               	btfss	status,0,c
 10374  001294  D007               	goto	l3194
 10375  001296                     l1041:
 10376                           
 10377                           ; BSR set to: 0
 10378  001296  C090  F08D         	movff	___ftadd@f2,?___ftadd
 10379  00129A  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 10380  00129E  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 10381  0012A2  D102               	goto	l1042
 10382  0012A4                     l3194:
 10383                           
 10384                           ; BSR set to: 0
 10385  0012A4  0100               	movlb	0	; () banked
 10386  0012A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10387  0012A8  B4D8               	btfsc	status,2,c
 10388  0012AA  D012               	goto	l1045
 10389                           
 10390                           ; BSR set to: 0
 10391  0012AC  0100               	movlb	0	; () banked
 10392  0012AE  5198               	movf	___ftadd@exp1& (0+255),w,b
 10393  0012B0  0100               	movlb	0	; () banked
 10394  0012B2  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10395  0012B4  B0D8               	btfsc	status,0,c
 10396  0012B6  D013               	goto	l3200
 10397                           
 10398                           ; BSR set to: 0
 10399  0012B8  0100               	movlb	0	; () banked
 10400  0012BA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10401  0012BC  0800               	sublw	0
 10402  0012BE  0100               	movlb	0	; () banked
 10403  0012C0  2598               	addwf	___ftadd@exp1& (0+255),w,b
 10404  0012C2  0100               	movlb	0	; () banked
 10405  0012C4  6F93               	movwf	??___ftadd& (0+255),b
 10406  0012C6  0E19               	movlw	25
 10407  0012C8  0100               	movlb	0	; () banked
 10408  0012CA  5D93               	subwf	??___ftadd& (0+255),w,b
 10409  0012CC  A0D8               	btfss	status,0,c
 10410  0012CE  D007               	goto	l3200
 10411  0012D0                     l1045:
 10412                           
 10413                           ; BSR set to: 0
 10414  0012D0  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 10415  0012D4  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 10416  0012D8  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 10417  0012DC  D0E5               	goto	l1042
 10418  0012DE                     l3200:
 10419                           
 10420                           ; BSR set to: 0
 10421  0012DE  0E06               	movlw	6
 10422  0012E0  0100               	movlb	0	; () banked
 10423  0012E2  6F96               	movwf	___ftadd@sign& (0+255),b
 10424                           
 10425                           ; BSR set to: 0
 10426  0012E4  0100               	movlb	0	; () banked
 10427  0012E6  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10428  0012E8  D002               	goto	l3206
 10429                           
 10430                           ; BSR set to: 0
 10431  0012EA  0100               	movlb	0	; () banked
 10432  0012EC  8F96               	bsf	___ftadd@sign& (0+255),7,b
 10433  0012EE                     l3206:
 10434                           
 10435                           ; BSR set to: 0
 10436  0012EE  0100               	movlb	0	; () banked
 10437  0012F0  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10438  0012F2  D002               	goto	l1047
 10439                           
 10440                           ; BSR set to: 0
 10441  0012F4  0100               	movlb	0	; () banked
 10442  0012F6  8D96               	bsf	___ftadd@sign& (0+255),6,b
 10443  0012F8                     l1047:
 10444                           
 10445                           ; BSR set to: 0
 10446  0012F8  0100               	movlb	0	; () banked
 10447  0012FA  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10448                           
 10449                           ; BSR set to: 0
 10450  0012FC  0EFF               	movlw	255
 10451  0012FE  0100               	movlb	0	; () banked
 10452  001300  178D               	andwf	___ftadd@f1& (0+255),f,b
 10453  001302  0EFF               	movlw	255
 10454  001304  0100               	movlb	0	; () banked
 10455  001306  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10456  001308  0E00               	movlw	0
 10457  00130A  0100               	movlb	0	; () banked
 10458  00130C  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10459  00130E  0100               	movlb	0	; () banked
 10460  001310  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10461                           
 10462                           ; BSR set to: 0
 10463  001312  0EFF               	movlw	255
 10464  001314  0100               	movlb	0	; () banked
 10465  001316  1790               	andwf	___ftadd@f2& (0+255),f,b
 10466  001318  0EFF               	movlw	255
 10467  00131A  0100               	movlb	0	; () banked
 10468  00131C  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10469  00131E  0E00               	movlw	0
 10470  001320  0100               	movlb	0	; () banked
 10471  001322  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10472                           
 10473                           ; BSR set to: 0
 10474  001324  0100               	movlb	0	; () banked
 10475  001326  5197               	movf	___ftadd@exp2& (0+255),w,b
 10476  001328  0100               	movlb	0	; () banked
 10477  00132A  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10478  00132C  B0D8               	btfsc	status,0,c
 10479  00132E  D02A               	goto	l3226
 10480  001330                     l3216:
 10481                           
 10482                           ; BSR set to: 0
 10483  001330  0100               	movlb	0	; () banked
 10484  001332  90D8               	bcf	status,0,c
 10485  001334  0100               	movlb	0	; () banked
 10486  001336  3790               	rlcf	___ftadd@f2& (0+255),f,b
 10487  001338  0100               	movlb	0	; () banked
 10488  00133A  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10489  00133C  0100               	movlb	0	; () banked
 10490  00133E  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10491  001340  0100               	movlb	0	; () banked
 10492  001342  0797               	decf	___ftadd@exp2& (0+255),f,b
 10493                           
 10494                           ; BSR set to: 0
 10495  001344  0100               	movlb	0	; () banked
 10496  001346  5197               	movf	___ftadd@exp2& (0+255),w,b
 10497  001348  0100               	movlb	0	; () banked
 10498  00134A  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10499  00134C  B4D8               	btfsc	status,2,c
 10500  00134E  D014               	goto	l3224
 10501                           
 10502                           ; BSR set to: 0
 10503  001350  0100               	movlb	0	; () banked
 10504  001352  0796               	decf	___ftadd@sign& (0+255),f,b
 10505  001354  C096  F093         	movff	___ftadd@sign,??___ftadd
 10506  001358  0E07               	movlw	7
 10507  00135A  0100               	movlb	0	; () banked
 10508  00135C  1793               	andwf	??___ftadd& (0+255),f,b
 10509  00135E  B4D8               	btfsc	status,2,c
 10510  001360  D00B               	goto	l3224
 10511  001362  D7E6               	goto	l3216
 10512  001364                     l3222:
 10513                           
 10514                           ; BSR set to: 0
 10515  001364  0100               	movlb	0	; () banked
 10516  001366  90D8               	bcf	status,0,c
 10517  001368  0100               	movlb	0	; () banked
 10518  00136A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10519  00136C  0100               	movlb	0	; () banked
 10520  00136E  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10521  001370  0100               	movlb	0	; () banked
 10522  001372  338D               	rrcf	___ftadd@f1& (0+255),f,b
 10523  001374  0100               	movlb	0	; () banked
 10524  001376  2B98               	incf	___ftadd@exp1& (0+255),f,b
 10525  001378                     l3224:
 10526                           
 10527                           ; BSR set to: 0
 10528  001378  0100               	movlb	0	; () banked
 10529  00137A  5197               	movf	___ftadd@exp2& (0+255),w,b
 10530  00137C  0100               	movlb	0	; () banked
 10531  00137E  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10532  001380  D7F1               	goto	l3222
 10533  001382  D02F               	goto	l1056
 10534  001384                     l3226:
 10535                           
 10536                           ; BSR set to: 0
 10537  001384  0100               	movlb	0	; () banked
 10538  001386  5198               	movf	___ftadd@exp1& (0+255),w,b
 10539  001388  0100               	movlb	0	; () banked
 10540  00138A  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10541  00138C  B0D8               	btfsc	status,0,c
 10542  00138E  D029               	goto	l1056
 10543  001390                     l3228:
 10544                           
 10545                           ; BSR set to: 0
 10546  001390  0100               	movlb	0	; () banked
 10547  001392  90D8               	bcf	status,0,c
 10548  001394  0100               	movlb	0	; () banked
 10549  001396  378D               	rlcf	___ftadd@f1& (0+255),f,b
 10550  001398  0100               	movlb	0	; () banked
 10551  00139A  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10552  00139C  0100               	movlb	0	; () banked
 10553  00139E  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10554  0013A0  0100               	movlb	0	; () banked
 10555  0013A2  0798               	decf	___ftadd@exp1& (0+255),f,b
 10556                           
 10557                           ; BSR set to: 0
 10558  0013A4  0100               	movlb	0	; () banked
 10559  0013A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10560  0013A8  0100               	movlb	0	; () banked
 10561  0013AA  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10562  0013AC  B4D8               	btfsc	status,2,c
 10563  0013AE  D014               	goto	l3236
 10564                           
 10565                           ; BSR set to: 0
 10566  0013B0  0100               	movlb	0	; () banked
 10567  0013B2  0796               	decf	___ftadd@sign& (0+255),f,b
 10568  0013B4  C096  F093         	movff	___ftadd@sign,??___ftadd
 10569  0013B8  0E07               	movlw	7
 10570  0013BA  0100               	movlb	0	; () banked
 10571  0013BC  1793               	andwf	??___ftadd& (0+255),f,b
 10572  0013BE  B4D8               	btfsc	status,2,c
 10573  0013C0  D00B               	goto	l3236
 10574  0013C2  D7E6               	goto	l3228
 10575  0013C4                     l3234:
 10576                           
 10577                           ; BSR set to: 0
 10578  0013C4  0100               	movlb	0	; () banked
 10579  0013C6  90D8               	bcf	status,0,c
 10580  0013C8  0100               	movlb	0	; () banked
 10581  0013CA  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10582  0013CC  0100               	movlb	0	; () banked
 10583  0013CE  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10584  0013D0  0100               	movlb	0	; () banked
 10585  0013D2  3390               	rrcf	___ftadd@f2& (0+255),f,b
 10586  0013D4  0100               	movlb	0	; () banked
 10587  0013D6  2B97               	incf	___ftadd@exp2& (0+255),f,b
 10588  0013D8                     l3236:
 10589                           
 10590                           ; BSR set to: 0
 10591  0013D8  0100               	movlb	0	; () banked
 10592  0013DA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10593  0013DC  0100               	movlb	0	; () banked
 10594  0013DE  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10595  0013E0  D7F1               	goto	l3234
 10596  0013E2                     l1056:
 10597                           
 10598                           ; BSR set to: 0
 10599  0013E2  0100               	movlb	0	; () banked
 10600  0013E4  AF96               	btfss	___ftadd@sign& (0+255),7,b
 10601  0013E6  D012               	goto	l1065
 10602                           
 10603                           ; BSR set to: 0
 10604  0013E8  0EFF               	movlw	255
 10605  0013EA  0100               	movlb	0	; () banked
 10606  0013EC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 10607  0013EE  0EFF               	movlw	255
 10608  0013F0  0100               	movlb	0	; () banked
 10609  0013F2  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10610  0013F4  0EFF               	movlw	255
 10611  0013F6  0100               	movlb	0	; () banked
 10612  0013F8  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10613  0013FA  0E01               	movlw	1
 10614  0013FC  0100               	movlb	0	; () banked
 10615  0013FE  278D               	addwf	___ftadd@f1& (0+255),f,b
 10616  001400  0E00               	movlw	0
 10617  001402  0100               	movlb	0	; () banked
 10618  001404  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10619  001406  0E00               	movlw	0
 10620  001408  0100               	movlb	0	; () banked
 10621  00140A  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10622  00140C                     l1065:
 10623                           
 10624                           ; BSR set to: 0
 10625  00140C  0100               	movlb	0	; () banked
 10626  00140E  AD96               	btfss	___ftadd@sign& (0+255),6,b
 10627  001410  D012               	goto	l3242
 10628                           
 10629                           ; BSR set to: 0
 10630  001412  0EFF               	movlw	255
 10631  001414  0100               	movlb	0	; () banked
 10632  001416  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10633  001418  0EFF               	movlw	255
 10634  00141A  0100               	movlb	0	; () banked
 10635  00141C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10636  00141E  0EFF               	movlw	255
 10637  001420  0100               	movlb	0	; () banked
 10638  001422  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10639  001424  0E01               	movlw	1
 10640  001426  0100               	movlb	0	; () banked
 10641  001428  2790               	addwf	___ftadd@f2& (0+255),f,b
 10642  00142A  0E00               	movlw	0
 10643  00142C  0100               	movlb	0	; () banked
 10644  00142E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10645  001430  0E00               	movlw	0
 10646  001432  0100               	movlb	0	; () banked
 10647  001434  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10648  001436                     l3242:
 10649                           
 10650                           ; BSR set to: 0
 10651  001436  0E00               	movlw	0
 10652  001438  0100               	movlb	0	; () banked
 10653  00143A  6F96               	movwf	___ftadd@sign& (0+255),b
 10654                           
 10655                           ; BSR set to: 0
 10656  00143C  0100               	movlb	0	; () banked
 10657  00143E  518D               	movf	___ftadd@f1& (0+255),w,b
 10658  001440  0100               	movlb	0	; () banked
 10659  001442  2790               	addwf	___ftadd@f2& (0+255),f,b
 10660  001444  0100               	movlb	0	; () banked
 10661  001446  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 10662  001448  0100               	movlb	0	; () banked
 10663  00144A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10664  00144C  0100               	movlb	0	; () banked
 10665  00144E  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 10666  001450  0100               	movlb	0	; () banked
 10667  001452  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10668                           
 10669                           ; BSR set to: 0
 10670  001454  0100               	movlb	0	; () banked
 10671  001456  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10672  001458  D015               	goto	l3252
 10673                           
 10674                           ; BSR set to: 0
 10675  00145A  0EFF               	movlw	255
 10676  00145C  0100               	movlb	0	; () banked
 10677  00145E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10678  001460  0EFF               	movlw	255
 10679  001462  0100               	movlb	0	; () banked
 10680  001464  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10681  001466  0EFF               	movlw	255
 10682  001468  0100               	movlb	0	; () banked
 10683  00146A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10684  00146C  0E01               	movlw	1
 10685  00146E  0100               	movlb	0	; () banked
 10686  001470  2790               	addwf	___ftadd@f2& (0+255),f,b
 10687  001472  0E00               	movlw	0
 10688  001474  0100               	movlb	0	; () banked
 10689  001476  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10690  001478  0E00               	movlw	0
 10691  00147A  0100               	movlb	0	; () banked
 10692  00147C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10693                           
 10694                           ; BSR set to: 0
 10695  00147E  0E01               	movlw	1
 10696  001480  0100               	movlb	0	; () banked
 10697  001482  6F96               	movwf	___ftadd@sign& (0+255),b
 10698  001484                     l3252:
 10699                           
 10700                           ; BSR set to: 0
 10701  001484  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 10702  001488  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10703  00148C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10704  001490  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 10705  001494  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 10706  001498  EC5D  F00F         	call	___ftpack	;wreg free
 10707  00149C  C060  F08D         	movff	?___ftpack,?___ftadd
 10708  0014A0  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 10709  0014A4  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 10710  0014A8                     l1042:
 10711  0014A8  0012               	return	
 10712  0014AA                     __end_of___ftadd:
 10713                           	opt stack 0
 10714                           tblptru	equ	0xFF8
 10715                           tblptrh	equ	0xFF7
 10716                           tblptrl	equ	0xFF6
 10717                           tablat	equ	0xFF5
 10718                           prodh	equ	0xFF4
 10719                           prodl	equ	0xFF3
 10720                           intcon	equ	0xFF2
 10721                           intcon2	equ	0xFF1
 10722                           intcon3	equ	0xFF0
 10723                           indf0	equ	0xFEF
 10724                           postinc0	equ	0xFEE
 10725                           fsr0h	equ	0xFEA
 10726                           fsr0l	equ	0xFE9
 10727                           wreg	equ	0xFE8
 10728                           postinc1	equ	0xFE6
 10729                           postdec1	equ	0xFE5
 10730                           fsr1l	equ	0xFE1
 10731                           indf2	equ	0xFDF
 10732                           postinc2	equ	0xFDE
 10733                           postdec2	equ	0xFDD
 10734                           fsr2h	equ	0xFDA
 10735                           fsr2l	equ	0xFD9
 10736                           status	equ	0xFD8
 10737                           
 10738 ;; *************** function ___ftpack *****************
 10739 ;; Defined at:
 10740 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;  arg             3    0[BANK0 ] unsigned um
 10743 ;;  exp             1    3[BANK0 ] unsigned char 
 10744 ;;  sign            1    4[BANK0 ] unsigned char 
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;		None
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  3    0[BANK0 ] float 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10756 ;;      Params:         0       5       0       0       0       0       0       0       0
 10757 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10758 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10759 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10760 ;;Total ram usage:        8 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    4
 10763 ;; This function calls:
 10764 ;;		Nothing
 10765 ;; This function is called by:
 10766 ;;		___ftadd
 10767 ;;		___ftmul
 10768 ;;		___lbtoft
 10769 ;;		___lltoft
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           	psect	text44
 10774  001EBA                     __ptext44:
 10775                           	opt stack 0
 10776  001EBA                     ___ftpack:
 10777                           	opt stack 24
 10778                           
 10779                           ;incstack = 0
 10780  001EBA  0100               	movlb	0	; () banked
 10781  001EBC  5163               	movf	___ftpack@exp& (0+255),w,b
 10782  001EBE  B4D8               	btfsc	status,2,c
 10783  001EC0  D008               	goto	l3132
 10784                           
 10785                           ; BSR set to: 0
 10786  001EC2  0100               	movlb	0	; () banked
 10787  001EC4  5160               	movf	___ftpack@arg& (0+255),w,b
 10788  001EC6  0100               	movlb	0	; () banked
 10789  001EC8  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10790  001ECA  0100               	movlb	0	; () banked
 10791  001ECC  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10792  001ECE  A4D8               	btfss	status,2,c
 10793  001ED0  D014               	goto	l3138
 10794  001ED2                     l3132:
 10795                           
 10796                           ; BSR set to: 0
 10797  001ED2  0E00               	movlw	0
 10798  001ED4  0100               	movlb	0	; () banked
 10799  001ED6  6F60               	movwf	?___ftpack& (0+255),b
 10800  001ED8  0E00               	movlw	0
 10801  001EDA  0100               	movlb	0	; () banked
 10802  001EDC  6F61               	movwf	(?___ftpack+1)& (0+255),b
 10803  001EDE  0E00               	movlw	0
 10804  001EE0  0100               	movlb	0	; () banked
 10805  001EE2  6F62               	movwf	(?___ftpack+2)& (0+255),b
 10806  001EE4  D06E               	goto	l1004
 10807  001EE6                     l3136:
 10808                           
 10809                           ; BSR set to: 0
 10810  001EE6  0100               	movlb	0	; () banked
 10811  001EE8  2B63               	incf	___ftpack@exp& (0+255),f,b
 10812  001EEA  0100               	movlb	0	; () banked
 10813  001EEC  90D8               	bcf	status,0,c
 10814  001EEE  0100               	movlb	0	; () banked
 10815  001EF0  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10816  001EF2  0100               	movlb	0	; () banked
 10817  001EF4  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10818  001EF6  0100               	movlb	0	; () banked
 10819  001EF8  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10820  001EFA                     l3138:
 10821                           
 10822                           ; BSR set to: 0
 10823  001EFA  0E00               	movlw	0
 10824  001EFC  0100               	movlb	0	; () banked
 10825  001EFE  1560               	andwf	___ftpack@arg& (0+255),w,b
 10826  001F00  0100               	movlb	0	; () banked
 10827  001F02  6F65               	movwf	??___ftpack& (0+255),b
 10828  001F04  0E00               	movlw	0
 10829  001F06  0100               	movlb	0	; () banked
 10830  001F08  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10831  001F0A  0100               	movlb	0	; () banked
 10832  001F0C  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10833  001F0E  0EFE               	movlw	254
 10834  001F10  0100               	movlb	0	; () banked
 10835  001F12  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10836  001F14  0100               	movlb	0	; () banked
 10837  001F16  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10838  001F18  0100               	movlb	0	; () banked
 10839  001F1A  5165               	movf	??___ftpack& (0+255),w,b
 10840  001F1C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10841  001F1E  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10842  001F20  B4D8               	btfsc	status,2,c
 10843  001F22  D014               	goto	l3144
 10844  001F24  D7E0               	goto	l3136
 10845  001F26                     l3140:
 10846                           
 10847                           ; BSR set to: 0
 10848  001F26  0100               	movlb	0	; () banked
 10849  001F28  2B63               	incf	___ftpack@exp& (0+255),f,b
 10850                           
 10851                           ; BSR set to: 0
 10852  001F2A  0E01               	movlw	1
 10853  001F2C  0100               	movlb	0	; () banked
 10854  001F2E  2760               	addwf	___ftpack@arg& (0+255),f,b
 10855  001F30  0E00               	movlw	0
 10856  001F32  0100               	movlb	0	; () banked
 10857  001F34  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10858  001F36  0E00               	movlw	0
 10859  001F38  0100               	movlb	0	; () banked
 10860  001F3A  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10861  001F3C  0100               	movlb	0	; () banked
 10862  001F3E  90D8               	bcf	status,0,c
 10863  001F40  0100               	movlb	0	; () banked
 10864  001F42  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10865  001F44  0100               	movlb	0	; () banked
 10866  001F46  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10867  001F48  0100               	movlb	0	; () banked
 10868  001F4A  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10869  001F4C                     l3144:
 10870                           
 10871                           ; BSR set to: 0
 10872  001F4C  0E00               	movlw	0
 10873  001F4E  0100               	movlb	0	; () banked
 10874  001F50  1560               	andwf	___ftpack@arg& (0+255),w,b
 10875  001F52  0100               	movlb	0	; () banked
 10876  001F54  6F65               	movwf	??___ftpack& (0+255),b
 10877  001F56  0E00               	movlw	0
 10878  001F58  0100               	movlb	0	; () banked
 10879  001F5A  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10880  001F5C  0100               	movlb	0	; () banked
 10881  001F5E  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10882  001F60  0EFF               	movlw	255
 10883  001F62  0100               	movlb	0	; () banked
 10884  001F64  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10885  001F66  0100               	movlb	0	; () banked
 10886  001F68  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10887  001F6A  0100               	movlb	0	; () banked
 10888  001F6C  5165               	movf	??___ftpack& (0+255),w,b
 10889  001F6E  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10890  001F70  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10891  001F72  B4D8               	btfsc	status,2,c
 10892  001F74  D00B               	goto	l3148
 10893  001F76  D7D7               	goto	l3140
 10894  001F78                     l3146:
 10895                           
 10896                           ; BSR set to: 0
 10897  001F78  0100               	movlb	0	; () banked
 10898  001F7A  0763               	decf	___ftpack@exp& (0+255),f,b
 10899  001F7C  0100               	movlb	0	; () banked
 10900  001F7E  90D8               	bcf	status,0,c
 10901  001F80  0100               	movlb	0	; () banked
 10902  001F82  3760               	rlcf	___ftpack@arg& (0+255),f,b
 10903  001F84  0100               	movlb	0	; () banked
 10904  001F86  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10905  001F88  0100               	movlb	0	; () banked
 10906  001F8A  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10907  001F8C                     l3148:
 10908                           
 10909                           ; BSR set to: 0
 10910  001F8C  0100               	movlb	0	; () banked
 10911  001F8E  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
 10912  001F90  D7F3               	goto	l3146
 10913                           
 10914                           ; BSR set to: 0
 10915  001F92  0100               	movlb	0	; () banked
 10916  001F94  B163               	btfsc	___ftpack@exp& (0+255),0,b
 10917  001F96  D002               	goto	l3152
 10918                           
 10919                           ; BSR set to: 0
 10920  001F98  0100               	movlb	0	; () banked
 10921  001F9A  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10922  001F9C                     l3152:
 10923                           
 10924                           ; BSR set to: 0
 10925  001F9C  0100               	movlb	0	; () banked
 10926  001F9E  90D8               	bcf	status,0,c
 10927  001FA0  3363               	rrcf	___ftpack@exp& (0+255),f,b
 10928  001FA2  0100               	movlb	0	; () banked
 10929  001FA4  5163               	movf	___ftpack@exp& (0+255),w,b
 10930  001FA6  0100               	movlb	0	; () banked
 10931  001FA8  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10932                           
 10933                           ; BSR set to: 0
 10934  001FAA  0100               	movlb	0	; () banked
 10935  001FAC  5164               	movf	___ftpack@sign& (0+255),w,b
 10936  001FAE  B4D8               	btfsc	status,2,c
 10937  001FB0  D002               	goto	l3158
 10938                           
 10939                           ; BSR set to: 0
 10940  001FB2  0100               	movlb	0	; () banked
 10941  001FB4  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10942  001FB6                     l3158:
 10943                           
 10944                           ; BSR set to: 0
 10945  001FB6  C060  F060         	movff	___ftpack@arg,?___ftpack
 10946  001FBA  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 10947  001FBE  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 10948  001FC2                     l1004:
 10949                           
 10950                           ; BSR set to: 0
 10951  001FC2  0012               	return	
 10952  001FC4                     __end_of___ftpack:
 10953                           	opt stack 0
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           intcon2	equ	0xFF1
 10962                           intcon3	equ	0xFF0
 10963                           indf0	equ	0xFEF
 10964                           postinc0	equ	0xFEE
 10965                           fsr0h	equ	0xFEA
 10966                           fsr0l	equ	0xFE9
 10967                           wreg	equ	0xFE8
 10968                           postinc1	equ	0xFE6
 10969                           postdec1	equ	0xFE5
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function ___ftneg *****************
 10979 ;; Defined at:
 10980 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  f1              3    0[BANK0 ] float 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;		None
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  3    0[BANK0 ] float 
 10987 ;; Registers used:
 10988 ;;		wreg, status,2, status,0
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10994 ;;      Params:         0       3       0       0       0       0       0       0       0
 10995 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10997 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10998 ;;Total ram usage:        3 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; Hardware stack levels required when called:    4
 11001 ;; This function calls:
 11002 ;;		Nothing
 11003 ;; This function is called by:
 11004 ;;		_sprintf
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text45
 11009  003380                     __ptext45:
 11010                           	opt stack 0
 11011  003380                     ___ftneg:
 11012                           	opt stack 23
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;incstack = 0
 11016  003380  0E7F               	movlw	127
 11017  003382  0100               	movlb	0	; () banked
 11018  003384  1562               	andwf	(___ftneg@f1+2)& (0+255),w,b
 11019  003386  0100               	movlb	0	; () banked
 11020  003388  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11021  00338A  0100               	movlb	0	; () banked
 11022  00338C  1160               	iorwf	___ftneg@f1& (0+255),w,b
 11023  00338E  B4D8               	btfsc	status,2,c
 11024  003390  D009               	goto	l1115
 11025                           
 11026                           ; BSR set to: 0
 11027  003392  0E00               	movlw	0
 11028  003394  0100               	movlb	0	; () banked
 11029  003396  1B60               	xorwf	___ftneg@f1& (0+255),f,b
 11030  003398  0E00               	movlw	0
 11031  00339A  0100               	movlb	0	; () banked
 11032  00339C  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11033  00339E  0E80               	movlw	128
 11034  0033A0  0100               	movlb	0	; () banked
 11035  0033A2  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11036  0033A4                     l1115:
 11037                           
 11038                           ; BSR set to: 0
 11039  0033A4  C060  F060         	movff	___ftneg@f1,?___ftneg
 11040  0033A8  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 11041  0033AC  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 11042                           
 11043                           ; BSR set to: 0
 11044  0033B0  0012               	return	
 11045  0033B2                     __end_of___ftneg:
 11046                           	opt stack 0
 11047                           tblptru	equ	0xFF8
 11048                           tblptrh	equ	0xFF7
 11049                           tblptrl	equ	0xFF6
 11050                           tablat	equ	0xFF5
 11051                           prodh	equ	0xFF4
 11052                           prodl	equ	0xFF3
 11053                           intcon	equ	0xFF2
 11054                           intcon2	equ	0xFF1
 11055                           intcon3	equ	0xFF0
 11056                           indf0	equ	0xFEF
 11057                           postinc0	equ	0xFEE
 11058                           fsr0h	equ	0xFEA
 11059                           fsr0l	equ	0xFE9
 11060                           wreg	equ	0xFE8
 11061                           postinc1	equ	0xFE6
 11062                           postdec1	equ	0xFE5
 11063                           fsr1l	equ	0xFE1
 11064                           indf2	equ	0xFDF
 11065                           postinc2	equ	0xFDE
 11066                           postdec2	equ	0xFDD
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function ___ftge *****************
 11072 ;; Defined at:
 11073 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;  ff1             3    0[BANK0 ] float 
 11076 ;;  ff2             3    3[BANK0 ] float 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;		None               void
 11081 ;; Registers used:
 11082 ;;		wreg, status,2, status,0
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11088 ;;      Params:         0       6       0       0       0       0       0       0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11090 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11091 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11092 ;;Total ram usage:        9 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    4
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_sprintf
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text46
 11103  00225E                     __ptext46:
 11104                           	opt stack 0
 11105  00225E                     ___ftge:
 11106                           	opt stack 23
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;incstack = 0
 11110  00225E  0100               	movlb	0	; () banked
 11111  002260  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11112  002262  D020               	goto	l3662
 11113                           
 11114                           ; BSR set to: 0
 11115  002264  0100               	movlb	0	; () banked
 11116  002266  C060  F066         	movff	___ftge@ff1,??___ftge
 11117  00226A  0100               	movlb	0	; () banked
 11118  00226C  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
 11119  002270  0100               	movlb	0	; () banked
 11120  002272  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
 11121  002276  0100               	movlb	0	; () banked
 11122  002278  1F66               	comf	??___ftge& (0+255),f,b
 11123  00227A  1F67               	comf	(??___ftge+1)& (0+255),f,b
 11124  00227C  1F68               	comf	(??___ftge+2)& (0+255),f,b
 11125  00227E  2B66               	incf	??___ftge& (0+255),f,b
 11126  002280  0E00               	movlw	0
 11127  002282  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 11128  002284  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 11129  002286  0E00               	movlw	0
 11130  002288  0100               	movlb	0	; () banked
 11131  00228A  2566               	addwf	??___ftge& (0+255),w,b
 11132  00228C  0100               	movlb	0	; () banked
 11133  00228E  6F60               	movwf	___ftge@ff1& (0+255),b
 11134  002290  0E00               	movlw	0
 11135  002292  0100               	movlb	0	; () banked
 11136  002294  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11137  002296  0100               	movlb	0	; () banked
 11138  002298  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
 11139  00229A  0E80               	movlw	128
 11140  00229C  0100               	movlb	0	; () banked
 11141  00229E  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11142  0022A0  0100               	movlb	0	; () banked
 11143  0022A2  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
 11144  0022A4                     l3662:
 11145                           
 11146                           ; BSR set to: 0
 11147  0022A4  0100               	movlb	0	; () banked
 11148  0022A6  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11149  0022A8  D020               	goto	l3666
 11150                           
 11151                           ; BSR set to: 0
 11152  0022AA  0100               	movlb	0	; () banked
 11153  0022AC  C063  F066         	movff	___ftge@ff2,??___ftge
 11154  0022B0  0100               	movlb	0	; () banked
 11155  0022B2  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
 11156  0022B6  0100               	movlb	0	; () banked
 11157  0022B8  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
 11158  0022BC  0100               	movlb	0	; () banked
 11159  0022BE  1F66               	comf	??___ftge& (0+255),f,b
 11160  0022C0  1F67               	comf	(??___ftge+1)& (0+255),f,b
 11161  0022C2  1F68               	comf	(??___ftge+2)& (0+255),f,b
 11162  0022C4  2B66               	incf	??___ftge& (0+255),f,b
 11163  0022C6  0E00               	movlw	0
 11164  0022C8  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 11165  0022CA  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 11166  0022CC  0E00               	movlw	0
 11167  0022CE  0100               	movlb	0	; () banked
 11168  0022D0  2566               	addwf	??___ftge& (0+255),w,b
 11169  0022D2  0100               	movlb	0	; () banked
 11170  0022D4  6F63               	movwf	___ftge@ff2& (0+255),b
 11171  0022D6  0E00               	movlw	0
 11172  0022D8  0100               	movlb	0	; () banked
 11173  0022DA  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11174  0022DC  0100               	movlb	0	; () banked
 11175  0022DE  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
 11176  0022E0  0E80               	movlw	128
 11177  0022E2  0100               	movlb	0	; () banked
 11178  0022E4  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11179  0022E6  0100               	movlb	0	; () banked
 11180  0022E8  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
 11181  0022EA                     l3666:
 11182                           
 11183                           ; BSR set to: 0
 11184  0022EA  0E00               	movlw	0
 11185  0022EC  0100               	movlb	0	; () banked
 11186  0022EE  1B60               	xorwf	___ftge@ff1& (0+255),f,b
 11187  0022F0  0E00               	movlw	0
 11188  0022F2  0100               	movlb	0	; () banked
 11189  0022F4  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11190  0022F6  0E80               	movlw	128
 11191  0022F8  0100               	movlb	0	; () banked
 11192  0022FA  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11193                           
 11194                           ; BSR set to: 0
 11195  0022FC  0E00               	movlw	0
 11196  0022FE  0100               	movlb	0	; () banked
 11197  002300  1B63               	xorwf	___ftge@ff2& (0+255),f,b
 11198  002302  0E00               	movlw	0
 11199  002304  0100               	movlb	0	; () banked
 11200  002306  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11201  002308  0E80               	movlw	128
 11202  00230A  0100               	movlb	0	; () banked
 11203  00230C  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11204  00230E  0100               	movlb	0	; () banked
 11205  002310  5163               	movf	___ftge@ff2& (0+255),w,b
 11206  002312  0100               	movlb	0	; () banked
 11207  002314  5D60               	subwf	___ftge@ff1& (0+255),w,b
 11208  002316  0100               	movlb	0	; () banked
 11209  002318  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
 11210  00231A  0100               	movlb	0	; () banked
 11211  00231C  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11212  00231E  0100               	movlb	0	; () banked
 11213  002320  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
 11214  002322  0100               	movlb	0	; () banked
 11215  002324  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11216  002326  B0D8               	btfsc	status,0,c
 11217  002328  D002               	goto	l3672
 11218                           
 11219                           ; BSR set to: 0
 11220  00232A  90D8               	bcf	status,0,c
 11221  00232C  D001               	goto	l1099
 11222  00232E                     l3672:
 11223                           
 11224                           ; BSR set to: 0
 11225  00232E  80D8               	bsf	status,0,c
 11226  002330                     l1099:
 11227                           
 11228                           ; BSR set to: 0
 11229  002330  0012               	return	
 11230  002332                     __end_of___ftge:
 11231                           	opt stack 0
 11232                           tblptru	equ	0xFF8
 11233                           tblptrh	equ	0xFF7
 11234                           tblptrl	equ	0xFF6
 11235                           tablat	equ	0xFF5
 11236                           prodh	equ	0xFF4
 11237                           prodl	equ	0xFF3
 11238                           intcon	equ	0xFF2
 11239                           intcon2	equ	0xFF1
 11240                           intcon3	equ	0xFF0
 11241                           indf0	equ	0xFEF
 11242                           postinc0	equ	0xFEE
 11243                           fsr0h	equ	0xFEA
 11244                           fsr0l	equ	0xFE9
 11245                           wreg	equ	0xFE8
 11246                           postinc1	equ	0xFE6
 11247                           postdec1	equ	0xFE5
 11248                           fsr1l	equ	0xFE1
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           fsr2h	equ	0xFDA
 11253                           fsr2l	equ	0xFD9
 11254                           status	equ	0xFD8
 11255                           
 11256 ;; *************** function _Lcd_Write_String *****************
 11257 ;; Defined at:
 11258 ;;		line 90 in file "lcd.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  a               2    4[BANK0 ] PTR unsigned char 
 11261 ;;		 -> STR_24(11), STR_23(7), STR_22(18), STR_21(17), 
 11262 ;;		 -> STR_20(17), STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
 11263 ;;		 -> STR_16(8), STR_14(2), STR_13(2), STR_12(2), 
 11264 ;;		 -> STR_11(16), STR_10(7), 
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  i               2    8[BANK0 ] int 
 11267 ;; Return value:  Size  Location     Type
 11268 ;;		None               void
 11269 ;; Registers used:
 11270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11276 ;;      Params:         0       2       0       0       0       0       0       0       0
 11277 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11278 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11279 ;;      Totals:         0       6       0       0       0       0       0       0       0
 11280 ;;Total ram usage:        6 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    6
 11283 ;; This function calls:
 11284 ;;		_Lcd_Write_Char
 11285 ;; This function is called by:
 11286 ;;		_Inicializa_Driveby
 11287 ;;		_Comando_Tablet
 11288 ;;		_Lcd_Write_Integer
 11289 ;;		_main
 11290 ;;		_Lcd_Write_Float
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           	psect	text47
 11295  002928                     __ptext47:
 11296                           	opt stack 0
 11297  002928                     _Lcd_Write_String:
 11298                           	opt stack 24
 11299                           
 11300                           ;lcd.c: 91: int i;
 11301                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;incstack = 0
 11305  002928  0E00               	movlw	0
 11306  00292A  0100               	movlb	0	; () banked
 11307  00292C  6F69               	movwf	(Lcd_Write_String@i+1)& (0+255),b
 11308  00292E  0E00               	movlw	0
 11309  002930  0100               	movlb	0	; () banked
 11310  002932  6F68               	movwf	Lcd_Write_String@i& (0+255),b
 11311  002934  D023               	goto	l4004
 11312  002936                     l4000:
 11313                           
 11314                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 11315  002936  0100               	movlb	0	; () banked
 11316  002938  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11317  00293C  0100               	movlb	0	; () banked
 11318  00293E  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11319  002942  0100               	movlb	0	; () banked
 11320  002944  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11321  002946  0100               	movlb	0	; () banked
 11322  002948  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11323  00294A  0100               	movlb	0	; () banked
 11324  00294C  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11325  00294E  0100               	movlb	0	; () banked
 11326  002950  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11327  002952  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11328  002956  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11329  00295A  6AF8               	clrf	tblptru,c
 11330  00295C  0E07               	movlw	(high __ramtop+-1)
 11331  00295E  64F7               	cpfsgt	tblptrh,c
 11332  002960  D003               	bra	u4077
 11333  002962  0008               	tblrd		*
 11334  002964  50F5               	movf	tablat,w,c
 11335  002966  D005               	bra	u4070
 11336  002968                     u4077:
 11337  002968  CFF6 FFE9          	movff	tblptrl,fsr0l
 11338  00296C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11339  002970  50EF               	movf	indf0,w,c
 11340  002972                     u4070:
 11341  002972  EC77  F018         	call	_Lcd_Write_Char
 11342  002976  0100               	movlb	0	; () banked
 11343  002978  4B68               	infsnz	Lcd_Write_String@i& (0+255),f,b
 11344  00297A  2B69               	incf	(Lcd_Write_String@i+1)& (0+255),f,b
 11345  00297C                     l4004:
 11346                           
 11347                           ; BSR set to: 0
 11348  00297C  0100               	movlb	0	; () banked
 11349  00297E  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11350  002982  0100               	movlb	0	; () banked
 11351  002984  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11352  002988  0100               	movlb	0	; () banked
 11353  00298A  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11354  00298C  0100               	movlb	0	; () banked
 11355  00298E  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11356  002990  0100               	movlb	0	; () banked
 11357  002992  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11358  002994  0100               	movlb	0	; () banked
 11359  002996  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11360  002998  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11361  00299C  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11362  0029A0  6AF8               	clrf	tblptru,c
 11363  0029A2  0E07               	movlw	(high __ramtop+-1)
 11364  0029A4  64F7               	cpfsgt	tblptrh,c
 11365  0029A6  D003               	bra	u4087
 11366  0029A8  0008               	tblrd		*
 11367  0029AA  50F5               	movf	tablat,w,c
 11368  0029AC  D005               	bra	u4080
 11369  0029AE                     u4087:
 11370  0029AE  CFF6 FFE9          	movff	tblptrl,fsr0l
 11371  0029B2  CFF7 FFEA          	movff	tblptrh,fsr0h
 11372  0029B6  50EF               	movf	indf0,w,c
 11373  0029B8                     u4080:
 11374  0029B8  0900               	iorlw	0
 11375  0029BA  B4D8               	btfsc	status,2,c
 11376  0029BC  0012               	return	
 11377  0029BE  D7BB               	goto	l4000
 11378  0029C0                     __end_of_Lcd_Write_String:
 11379                           	opt stack 0
 11380                           tblptru	equ	0xFF8
 11381                           tblptrh	equ	0xFF7
 11382                           tblptrl	equ	0xFF6
 11383                           tablat	equ	0xFF5
 11384                           prodh	equ	0xFF4
 11385                           prodl	equ	0xFF3
 11386                           intcon	equ	0xFF2
 11387                           intcon2	equ	0xFF1
 11388                           intcon3	equ	0xFF0
 11389                           indf0	equ	0xFEF
 11390                           postinc0	equ	0xFEE
 11391                           fsr0h	equ	0xFEA
 11392                           fsr0l	equ	0xFE9
 11393                           wreg	equ	0xFE8
 11394                           postinc1	equ	0xFE6
 11395                           postdec1	equ	0xFE5
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           fsr2h	equ	0xFDA
 11401                           fsr2l	equ	0xFD9
 11402                           status	equ	0xFD8
 11403                           
 11404 ;; *************** function _Lcd_Write_Char *****************
 11405 ;; Defined at:
 11406 ;;		line 75 in file "lcd.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;  a               1    wreg     unsigned char 
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;  a               1    3[BANK0 ] unsigned char 
 11411 ;;  y               1    2[BANK0 ] unsigned char 
 11412 ;;  temp            1    1[BANK0 ] unsigned char 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;		None               void
 11415 ;; Registers used:
 11416 ;;		wreg, status,2, status,0, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0
 11423 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11425 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11426 ;;Total ram usage:        3 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    5
 11429 ;; This function calls:
 11430 ;;		_Lcd_Port
 11431 ;; This function is called by:
 11432 ;;		_Lcd_Write_String
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text48
 11437  0030EE                     __ptext48:
 11438                           	opt stack 0
 11439  0030EE                     _Lcd_Write_Char:
 11440                           	opt stack 24
 11441                           
 11442                           ;incstack = 0
 11443                           ;Lcd_Write_Char@a stored from wreg
 11444  0030EE  0100               	movlb	0	; () banked
 11445  0030F0  6F63               	movwf	Lcd_Write_Char@a& (0+255),b
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;lcd.c: 76: char temp, y;
 11449                           ;lcd.c: 77: temp = a & 0x0F;
 11450  0030F2  0100               	movlb	0	; () banked
 11451  0030F4  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11452  0030F6  0B0F               	andlw	15
 11453  0030F8  0100               	movlb	0	; () banked
 11454  0030FA  6F61               	movwf	Lcd_Write_Char@temp& (0+255),b
 11455                           
 11456                           ;lcd.c: 78: y = a & 0xF0;
 11457  0030FC  0100               	movlb	0	; () banked
 11458  0030FE  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11459  003100  0BF0               	andlw	240
 11460  003102  0100               	movlb	0	; () banked
 11461  003104  6F62               	movwf	Lcd_Write_Char@y& (0+255),b
 11462                           
 11463                           ; BSR set to: 0
 11464                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 11465  003106  8084               	bsf	3972,0,c	;volatile
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;lcd.c: 80: Lcd_Port(y >> 4);
 11469  003108  0100               	movlb	0	; () banked
 11470  00310A  3962               	swapf	Lcd_Write_Char@y& (0+255),w,b
 11471  00310C  0B0F               	andlw	15
 11472  00310E  EC8C  F019         	call	_Lcd_Port
 11473                           
 11474                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 11475  003112  8484               	bsf	3972,2,c	;volatile
 11476                           
 11477                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11478  003114  0E0D               	movlw	13
 11479  003116                     u5327:
 11480  003116  2EE8               	decfsz	wreg,f,c
 11481  003118  D7FE               	goto	u5327
 11482  00311A  F000               	nop	
 11483                           
 11484                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 11485  00311C  9484               	bcf	3972,2,c	;volatile
 11486                           
 11487                           ;lcd.c: 84: Lcd_Port(temp);
 11488  00311E  0100               	movlb	0	; () banked
 11489  003120  5161               	movf	Lcd_Write_Char@temp& (0+255),w,b
 11490  003122  EC8C  F019         	call	_Lcd_Port
 11491                           
 11492                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 11493  003126  8484               	bsf	3972,2,c	;volatile
 11494                           
 11495                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11496  003128  0E0D               	movlw	13
 11497  00312A                     u5337:
 11498  00312A  2EE8               	decfsz	wreg,f,c
 11499  00312C  D7FE               	goto	u5337
 11500  00312E  F000               	nop	
 11501                           
 11502                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 11503  003130  9484               	bcf	3972,2,c	;volatile
 11504  003132  0012               	return	
 11505  003134                     __end_of_Lcd_Write_Char:
 11506                           	opt stack 0
 11507                           tblptru	equ	0xFF8
 11508                           tblptrh	equ	0xFF7
 11509                           tblptrl	equ	0xFF6
 11510                           tablat	equ	0xFF5
 11511                           prodh	equ	0xFF4
 11512                           prodl	equ	0xFF3
 11513                           intcon	equ	0xFF2
 11514                           intcon2	equ	0xFF1
 11515                           intcon3	equ	0xFF0
 11516                           indf0	equ	0xFEF
 11517                           postinc0	equ	0xFEE
 11518                           fsr0h	equ	0xFEA
 11519                           fsr0l	equ	0xFE9
 11520                           wreg	equ	0xFE8
 11521                           postinc1	equ	0xFE6
 11522                           postdec1	equ	0xFE5
 11523                           fsr1l	equ	0xFE1
 11524                           indf2	equ	0xFDF
 11525                           postinc2	equ	0xFDE
 11526                           postdec2	equ	0xFDD
 11527                           fsr2h	equ	0xFDA
 11528                           fsr2l	equ	0xFD9
 11529                           status	equ	0xFD8
 11530                           
 11531 ;; *************** function _Lcd_Set_Cursor *****************
 11532 ;; Defined at:
 11533 ;;		line 40 in file "lcd.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  a               1    wreg     unsigned char 
 11536 ;;  b               1    3[BANK0 ] unsigned char 
 11537 ;; Auto vars:     Size  Location     Type
 11538 ;;  a               1    4[BANK0 ] unsigned char 
 11539 ;;  temp            1    7[BANK0 ] unsigned char 
 11540 ;;  y               1    6[BANK0 ] unsigned char 
 11541 ;;  z               1    5[BANK0 ] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;		None               void
 11544 ;; Registers used:
 11545 ;;		wreg, status,2, status,0, cstack
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11551 ;;      Params:         0       1       0       0       0       0       0       0       0
 11552 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11554 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11555 ;;Total ram usage:        5 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    6
 11558 ;; This function calls:
 11559 ;;		_Lcd_Cmd
 11560 ;; This function is called by:
 11561 ;;		_Inicializa_Driveby
 11562 ;;		_Comando_Tablet
 11563 ;;		_main
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text49
 11568  002DB6                     __ptext49:
 11569                           	opt stack 0
 11570  002DB6                     _Lcd_Set_Cursor:
 11571                           	opt stack 24
 11572                           
 11573                           ;incstack = 0
 11574                           ;Lcd_Set_Cursor@a stored from wreg
 11575  002DB6  0100               	movlb	0	; () banked
 11576  002DB8  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;lcd.c: 41: char temp, z, y;
 11580                           ;lcd.c: 42: if (a == 1) {
 11581  002DBA  0100               	movlb	0	; () banked
 11582  002DBC  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 11583  002DBE  A4D8               	btfss	status,2,c
 11584  002DC0  D018               	goto	l4186
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;lcd.c: 43: temp = 0x80 + b - 1;
 11588  002DC2  0100               	movlb	0	; () banked
 11589  002DC4  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11590  002DC6  0F7F               	addlw	127
 11591  002DC8  0100               	movlb	0	; () banked
 11592  002DCA  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11593                           
 11594                           ;lcd.c: 44: z = temp >> 4;
 11595  002DCC  0100               	movlb	0	; () banked
 11596  002DCE  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11597  002DD0  0B0F               	andlw	15
 11598  002DD2  0100               	movlb	0	; () banked
 11599  002DD4  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11600                           
 11601                           ;lcd.c: 45: y = temp & 0x0F;
 11602  002DD6  0100               	movlb	0	; () banked
 11603  002DD8  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11604  002DDA  0B0F               	andlw	15
 11605  002DDC  0100               	movlb	0	; () banked
 11606  002DDE  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;lcd.c: 46: Lcd_Cmd(z);
 11610  002DE0  0100               	movlb	0	; () banked
 11611  002DE2  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11612  002DE4  EC15  F01A         	call	_Lcd_Cmd
 11613                           
 11614                           ;lcd.c: 47: Lcd_Cmd(y);
 11615  002DE8  0100               	movlb	0	; () banked
 11616  002DEA  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11617  002DEC  EC15  F01A         	call	_Lcd_Cmd
 11618                           
 11619                           ;lcd.c: 48: } else if (a == 2) {
 11620  002DF0  D01C               	goto	l291
 11621  002DF2                     l4186:
 11622  002DF2  0100               	movlb	0	; () banked
 11623  002DF4  5164               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 11624  002DF6  0A02               	xorlw	2
 11625  002DF8  A4D8               	btfss	status,2,c
 11626  002DFA  D017               	goto	l291
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 11630  002DFC  0100               	movlb	0	; () banked
 11631  002DFE  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11632  002E00  0FBF               	addlw	191
 11633  002E02  0100               	movlb	0	; () banked
 11634  002E04  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11635                           
 11636                           ;lcd.c: 50: z = temp >> 4;
 11637  002E06  0100               	movlb	0	; () banked
 11638  002E08  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11639  002E0A  0B0F               	andlw	15
 11640  002E0C  0100               	movlb	0	; () banked
 11641  002E0E  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11642                           
 11643                           ;lcd.c: 51: y = temp & 0x0F;
 11644  002E10  0100               	movlb	0	; () banked
 11645  002E12  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11646  002E14  0B0F               	andlw	15
 11647  002E16  0100               	movlb	0	; () banked
 11648  002E18  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;lcd.c: 52: Lcd_Cmd(z);
 11652  002E1A  0100               	movlb	0	; () banked
 11653  002E1C  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11654  002E1E  EC15  F01A         	call	_Lcd_Cmd
 11655                           
 11656                           ;lcd.c: 53: Lcd_Cmd(y);
 11657  002E22  0100               	movlb	0	; () banked
 11658  002E24  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11659  002E26  EC15  F01A         	call	_Lcd_Cmd
 11660  002E2A                     l291:
 11661  002E2A  0012               	return	
 11662  002E2C                     __end_of_Lcd_Set_Cursor:
 11663                           	opt stack 0
 11664                           tblptru	equ	0xFF8
 11665                           tblptrh	equ	0xFF7
 11666                           tblptrl	equ	0xFF6
 11667                           tablat	equ	0xFF5
 11668                           prodh	equ	0xFF4
 11669                           prodl	equ	0xFF3
 11670                           intcon	equ	0xFF2
 11671                           intcon2	equ	0xFF1
 11672                           intcon3	equ	0xFF0
 11673                           indf0	equ	0xFEF
 11674                           postinc0	equ	0xFEE
 11675                           fsr0h	equ	0xFEA
 11676                           fsr0l	equ	0xFE9
 11677                           wreg	equ	0xFE8
 11678                           postinc1	equ	0xFE6
 11679                           postdec1	equ	0xFE5
 11680                           fsr1l	equ	0xFE1
 11681                           indf2	equ	0xFDF
 11682                           postinc2	equ	0xFDE
 11683                           postdec2	equ	0xFDD
 11684                           fsr2h	equ	0xFDA
 11685                           fsr2l	equ	0xFD9
 11686                           status	equ	0xFD8
 11687                           
 11688 ;; *************** function _Lcd_Clear *****************
 11689 ;; Defined at:
 11690 ;;		line 35 in file "lcd.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;		None
 11693 ;; Auto vars:     Size  Location     Type
 11694 ;;		None
 11695 ;; Return value:  Size  Location     Type
 11696 ;;		None               void
 11697 ;; Registers used:
 11698 ;;		wreg, status,2, cstack
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11704 ;;      Params:         0       0       0       0       0       0       0       0       0
 11705 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11707 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11708 ;;Total ram usage:        0 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    6
 11711 ;; This function calls:
 11712 ;;		_Lcd_Cmd
 11713 ;; This function is called by:
 11714 ;;		_Inicializa_Driveby
 11715 ;;		_Comando_Tablet
 11716 ;;		_main
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text50
 11721  003556                     __ptext50:
 11722                           	opt stack 0
 11723  003556                     _Lcd_Clear:
 11724                           	opt stack 24
 11725                           
 11726                           ;lcd.c: 36: Lcd_Cmd(0);
 11727                           
 11728                           ;incstack = 0
 11729  003556  0E00               	movlw	0
 11730  003558  EC15  F01A         	call	_Lcd_Cmd
 11731                           
 11732                           ;lcd.c: 37: Lcd_Cmd(1);
 11733  00355C  0E01               	movlw	1
 11734  00355E  EC15  F01A         	call	_Lcd_Cmd
 11735  003562  0012               	return	
 11736  003564                     __end_of_Lcd_Clear:
 11737                           	opt stack 0
 11738                           tblptru	equ	0xFF8
 11739                           tblptrh	equ	0xFF7
 11740                           tblptrl	equ	0xFF6
 11741                           tablat	equ	0xFF5
 11742                           prodh	equ	0xFF4
 11743                           prodl	equ	0xFF3
 11744                           intcon	equ	0xFF2
 11745                           intcon2	equ	0xFF1
 11746                           intcon3	equ	0xFF0
 11747                           indf0	equ	0xFEF
 11748                           postinc0	equ	0xFEE
 11749                           fsr0h	equ	0xFEA
 11750                           fsr0l	equ	0xFE9
 11751                           wreg	equ	0xFE8
 11752                           postinc1	equ	0xFE6
 11753                           postdec1	equ	0xFE5
 11754                           fsr1l	equ	0xFE1
 11755                           indf2	equ	0xFDF
 11756                           postinc2	equ	0xFDE
 11757                           postdec2	equ	0xFDD
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           
 11762 ;; *************** function _Lcd_Cmd *****************
 11763 ;; Defined at:
 11764 ;;		line 27 in file "lcd.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  a               1    wreg     unsigned char 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;  a               1    2[BANK0 ] unsigned char 
 11769 ;; Return value:  Size  Location     Type
 11770 ;;		None               void
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, cstack
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0
 11779 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11780 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11781 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11782 ;;Total ram usage:        2 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; Hardware stack levels required when called:    5
 11785 ;; This function calls:
 11786 ;;		_Lcd_Port
 11787 ;; This function is called by:
 11788 ;;		_Lcd_Clear
 11789 ;;		_Lcd_Set_Cursor
 11790 ;;		_Lcd_Init
 11791 ;;		_Lcd_Shift_Right
 11792 ;;		_Lcd_Shift_Left
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           	psect	text51
 11797  00342A                     __ptext51:
 11798                           	opt stack 0
 11799  00342A                     _Lcd_Cmd:
 11800                           	opt stack 24
 11801                           
 11802                           ;incstack = 0
 11803                           ;Lcd_Cmd@a stored from wreg
 11804  00342A  0100               	movlb	0	; () banked
 11805  00342C  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 11809  00342E  9084               	bcf	3972,0,c	;volatile
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;lcd.c: 29: Lcd_Port(a);
 11813  003430  0100               	movlb	0	; () banked
 11814  003432  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 11815  003434  EC8C  F019         	call	_Lcd_Port
 11816                           
 11817                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 11818  003438  8484               	bsf	3972,2,c	;volatile
 11819                           
 11820                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 11821  00343A  0E06               	movlw	6
 11822  00343C  0100               	movlb	0	; () banked
 11823  00343E  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 11824  003440  0E30               	movlw	48
 11825  003442                     u5347:
 11826  003442  2EE8               	decfsz	wreg,f,c
 11827  003444  D7FE               	goto	u5347
 11828  003446  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 11829  003448  D7FC               	goto	u5347
 11830  00344A  D000               	nop2	
 11831                           
 11832                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 11833  00344C  9484               	bcf	3972,2,c	;volatile
 11834  00344E  0012               	return	
 11835  003450                     __end_of_Lcd_Cmd:
 11836                           	opt stack 0
 11837                           tblptru	equ	0xFF8
 11838                           tblptrh	equ	0xFF7
 11839                           tblptrl	equ	0xFF6
 11840                           tablat	equ	0xFF5
 11841                           prodh	equ	0xFF4
 11842                           prodl	equ	0xFF3
 11843                           intcon	equ	0xFF2
 11844                           intcon2	equ	0xFF1
 11845                           intcon3	equ	0xFF0
 11846                           indf0	equ	0xFEF
 11847                           postinc0	equ	0xFEE
 11848                           fsr0h	equ	0xFEA
 11849                           fsr0l	equ	0xFE9
 11850                           wreg	equ	0xFE8
 11851                           postinc1	equ	0xFE6
 11852                           postdec1	equ	0xFE5
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           fsr2h	equ	0xFDA
 11858                           fsr2l	equ	0xFD9
 11859                           status	equ	0xFD8
 11860                           
 11861 ;; *************** function _Lcd_Port *****************
 11862 ;; Defined at:
 11863 ;;		line 6 in file "lcd.c"
 11864 ;; Parameters:    Size  Location     Type
 11865 ;;  a               1    wreg     unsigned char 
 11866 ;; Auto vars:     Size  Location     Type
 11867 ;;  a               1    0[BANK0 ] unsigned char 
 11868 ;; Return value:  Size  Location     Type
 11869 ;;		None               void
 11870 ;; Registers used:
 11871 ;;		wreg
 11872 ;; Tracked objects:
 11873 ;;		On entry : 0/0
 11874 ;;		On exit  : 0/0
 11875 ;;		Unchanged: 0/0
 11876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11877 ;;      Params:         0       0       0       0       0       0       0       0       0
 11878 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11879 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11880 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11881 ;;Total ram usage:        1 bytes
 11882 ;; Hardware stack levels used:    1
 11883 ;; Hardware stack levels required when called:    4
 11884 ;; This function calls:
 11885 ;;		Nothing
 11886 ;; This function is called by:
 11887 ;;		_Lcd_Cmd
 11888 ;;		_Lcd_Init
 11889 ;;		_Lcd_Write_Char
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           	psect	text52
 11894  003318                     __ptext52:
 11895                           	opt stack 0
 11896  003318                     _Lcd_Port:
 11897                           	opt stack 24
 11898                           
 11899                           ;incstack = 0
 11900                           ;Lcd_Port@a stored from wreg
 11901  003318  0100               	movlb	0	; () banked
 11902  00331A  6F60               	movwf	Lcd_Port@a& (0+255),b
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;lcd.c: 7: if (a & 1)
 11906  00331C  0100               	movlb	0	; () banked
 11907  00331E  A160               	btfss	Lcd_Port@a& (0+255),0,b
 11908  003320  D002               	goto	l271
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 11912  003322  8883               	bsf	3971,4,c	;volatile
 11913  003324  D001               	goto	l3168
 11914  003326                     l271:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;lcd.c: 9: else
 11918                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 11919  003326  9883               	bcf	3971,4,c	;volatile
 11920  003328                     l3168:
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;lcd.c: 12: if (a & 2)
 11924  003328  0100               	movlb	0	; () banked
 11925  00332A  A360               	btfss	Lcd_Port@a& (0+255),1,b
 11926  00332C  D002               	goto	l273
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 11930  00332E  8A83               	bsf	3971,5,c	;volatile
 11931  003330  D001               	goto	l3172
 11932  003332                     l273:
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;lcd.c: 14: else
 11936                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 11937  003332  9A83               	bcf	3971,5,c	;volatile
 11938  003334                     l3172:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;lcd.c: 17: if (a & 4)
 11942  003334  0100               	movlb	0	; () banked
 11943  003336  A560               	btfss	Lcd_Port@a& (0+255),2,b
 11944  003338  D002               	goto	l275
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 11948  00333A  8C83               	bsf	3971,6,c	;volatile
 11949  00333C  D001               	goto	l3176
 11950  00333E                     l275:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;lcd.c: 19: else
 11954                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 11955  00333E  9C83               	bcf	3971,6,c	;volatile
 11956  003340                     l3176:
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;lcd.c: 22: if (a & 8)
 11960  003340  0100               	movlb	0	; () banked
 11961  003342  A760               	btfss	Lcd_Port@a& (0+255),3,b
 11962  003344  D002               	goto	l277
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 11966  003346  8E83               	bsf	3971,7,c	;volatile
 11967  003348  D001               	goto	l279
 11968  00334A                     l277:
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;lcd.c: 24: else
 11972                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 11973  00334A  9E83               	bcf	3971,7,c	;volatile
 11974  00334C                     l279:
 11975                           
 11976                           ; BSR set to: 0
 11977  00334C  0012               	return	
 11978  00334E                     __end_of_Lcd_Port:
 11979                           	opt stack 0
 11980                           tblptru	equ	0xFF8
 11981                           tblptrh	equ	0xFF7
 11982                           tblptrl	equ	0xFF6
 11983                           tablat	equ	0xFF5
 11984                           prodh	equ	0xFF4
 11985                           prodl	equ	0xFF3
 11986                           intcon	equ	0xFF2
 11987                           intcon2	equ	0xFF1
 11988                           intcon3	equ	0xFF0
 11989                           indf0	equ	0xFEF
 11990                           postinc0	equ	0xFEE
 11991                           fsr0h	equ	0xFEA
 11992                           fsr0l	equ	0xFE9
 11993                           wreg	equ	0xFE8
 11994                           postinc1	equ	0xFE6
 11995                           postdec1	equ	0xFE5
 11996                           fsr1l	equ	0xFE1
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           postdec2	equ	0xFDD
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           
 12004 ;; *************** function _TMRO_USART *****************
 12005 ;; Defined at:
 12006 ;;		line 84 in file "robot.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;		None
 12009 ;; Auto vars:     Size  Location     Type
 12010 ;;		None
 12011 ;; Return value:  Size  Location     Type
 12012 ;;		None               void
 12013 ;; Registers used:
 12014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12020 ;;      Params:         0       0       0       0       0       0       0       0       0
 12021 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12022 ;;      Temps:         14       0       0       0       0       0       0       0       0
 12023 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12024 ;;Total ram usage:       14 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; Hardware stack levels required when called:    3
 12027 ;; This function calls:
 12028 ;;		_ReadUSART
 12029 ;;		i2_Lcd_Clear
 12030 ;;		i2_Lcd_Set_Cursor
 12031 ;;		i2_Lcd_Write_String
 12032 ;;		i2_PWM_DutyCycle1
 12033 ;;		i2_PWM_DutyCycle2
 12034 ;; This function is called by:
 12035 ;;		Interrupt level 2
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	intcode
 12040  000008                     __pintcode:
 12041                           	opt stack 0
 12042  000008                     _TMRO_USART:
 12043                           	opt stack 21
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;incstack = 0
 12047  000008  CFFA F034          	movff	pclath,??_TMRO_USART
 12048  00000C  CFFB F035          	movff	pclatu,??_TMRO_USART+1
 12049  000010  CFE9 F036          	movff	fsr0l,??_TMRO_USART+2
 12050  000014  ED0F  F00C         	call	int_func,f	;refresh shadow registers
 12051                           pclatu	equ	0xFFB
 12052                           pclath	equ	0xFFA
 12053                           tblptru	equ	0xFF8
 12054                           tblptrh	equ	0xFF7
 12055                           tblptrl	equ	0xFF6
 12056                           tablat	equ	0xFF5
 12057                           prodh	equ	0xFF4
 12058                           prodl	equ	0xFF3
 12059                           intcon	equ	0xFF2
 12060                           intcon2	equ	0xFF1
 12061                           intcon3	equ	0xFF0
 12062                           indf0	equ	0xFEF
 12063                           postinc0	equ	0xFEE
 12064                           fsr0h	equ	0xFEA
 12065                           fsr0l	equ	0xFE9
 12066                           wreg	equ	0xFE8
 12067                           postinc1	equ	0xFE6
 12068                           postdec1	equ	0xFE5
 12069                           fsr1l	equ	0xFE1
 12070                           indf2	equ	0xFDF
 12071                           postinc2	equ	0xFDE
 12072                           postdec2	equ	0xFDD
 12073                           fsr2h	equ	0xFDA
 12074                           fsr2l	equ	0xFD9
 12075                           status	equ	0xFD8
 12076                           
 12077                           	psect	intcode_body
 12078  00181E                     __pintcode_body:
 12079                           	opt stack 21
 12080  00181E                     int_func:
 12081                           	opt stack 21
 12082  00181E  0006               	pop		; remove dummy address from shadow register refresh
 12083  001820  CFEA F037          	movff	fsr0h,??_TMRO_USART+3
 12084  001824  CFE1 F038          	movff	fsr1l,??_TMRO_USART+4
 12085  001828  CFE2 F039          	movff	fsr1h,??_TMRO_USART+5
 12086  00182C  CFD9 F03A          	movff	fsr2l,??_TMRO_USART+6
 12087  001830  CFDA F03B          	movff	fsr2h,??_TMRO_USART+7
 12088  001834  CFF3 F03C          	movff	prodl,??_TMRO_USART+8
 12089  001838  CFF4 F03D          	movff	prodh,??_TMRO_USART+9
 12090  00183C  CFF6 F03E          	movff	tblptrl,??_TMRO_USART+10
 12091  001840  CFF7 F03F          	movff	tblptrh,??_TMRO_USART+11
 12092  001844  CFF8 F040          	movff	tblptru,??_TMRO_USART+12
 12093  001848  CFF5 F041          	movff	tablat,??_TMRO_USART+13
 12094                           
 12095                           ;robot.c: 89: if (PIR1bits.RCIF) {
 12096  00184C  AA9E               	btfss	3998,5,c	;volatile
 12097  00184E  D034               	goto	i2l400
 12098                           
 12099                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 12100  001850  5055               	movf	_cad,w,c
 12101  001852  0D01               	mullw	1
 12102  001854  0101               	movlb	1	; () banked
 12103  001856  0E28               	movlw	low _BluetoothDato
 12104  001858  24F3               	addwf	prodl,w,c
 12105  00185A  6ED9               	movwf	fsr2l,c
 12106  00185C  0101               	movlb	1	; () banked
 12107  00185E  0E01               	movlw	high _BluetoothDato
 12108  001860  20F4               	addwfc	prodh,w,c
 12109  001862  6EDA               	movwf	fsr2h,c
 12110  001864  EC4A  F01A         	call	_ReadUSART	;wreg free
 12111  001868  6EDF               	movwf	indf2,c
 12112                           
 12113                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 12114  00186A  5055               	movf	_cad,w,c
 12115  00186C  0D01               	mullw	1
 12116  00186E  0101               	movlb	1	; () banked
 12117  001870  0E28               	movlw	low _BluetoothDato
 12118  001872  24F3               	addwf	prodl,w,c
 12119  001874  6ED9               	movwf	fsr2l,c
 12120  001876  0101               	movlb	1	; () banked
 12121  001878  0E01               	movlw	high _BluetoothDato
 12122  00187A  20F4               	addwfc	prodh,w,c
 12123  00187C  6EDA               	movwf	fsr2h,c
 12124  00187E  0E23               	movlw	35
 12125  001880  62DF               	cpfseq	indf2,c
 12126  001882  D015               	goto	i2l4796
 12127                           
 12128                           ; BSR set to: 1
 12129                           ;robot.c: 93: if (ComanTFlag == 0) {
 12130  001884  664C               	tstfsz	_ComanTFlag,c
 12131  001886  D008               	goto	i2l4792
 12132                           
 12133                           ; BSR set to: 1
 12134                           ;robot.c: 94: EntTrama = 1;
 12135  001888  0E01               	movlw	1
 12136  00188A  6E4F               	movwf	_EntTrama,c
 12137                           
 12138                           ;robot.c: 95: FinComandT = 0;
 12139  00188C  0E00               	movlw	0
 12140  00188E  0100               	movlb	0	; () banked
 12141  001890  6FEC               	movwf	_FinComandT& (0+255),b
 12142                           
 12143                           ;robot.c: 96: ComanTFlag = 1;
 12144  001892  0E01               	movlw	1
 12145  001894  6E4C               	movwf	_ComanTFlag,c
 12146  001896  D00E               	goto	i2u518_40
 12147  001898                     i2l4792:
 12148                           
 12149                           ;robot.c: 99: else if (ComanTFlag == 1) {
 12150  001898  044C               	decf	_ComanTFlag,w,c
 12151  00189A  A4D8               	btfss	status,2,c
 12152  00189C  D05F               	goto	i2l4838
 12153                           
 12154                           ;robot.c: 100: ComanTFlag = 0;
 12155  00189E  0E00               	movlw	0
 12156  0018A0  6E4C               	movwf	_ComanTFlag,c
 12157                           
 12158                           ;robot.c: 101: FinComandT = 1;
 12159  0018A2  0E01               	movlw	1
 12160  0018A4  0100               	movlb	0	; () banked
 12161  0018A6  6FEC               	movwf	_FinComandT& (0+255),b
 12162                           
 12163                           ;robot.c: 102: EntTrama = 0;
 12164  0018A8  0E00               	movlw	0
 12165  0018AA  6E4F               	movwf	_EntTrama,c
 12166  0018AC  D057               	goto	i2l4838
 12167  0018AE                     i2l4796:
 12168                           
 12169                           ;robot.c: 106: else if (EntTrama == 1)
 12170  0018AE  044F               	decf	_EntTrama,w,c
 12171  0018B0  A4D8               	btfss	status,2,c
 12172  0018B2  D054               	goto	i2l4838
 12173  0018B4                     i2u518_40:
 12174                           
 12175                           ;robot.c: 107: cad++;
 12176  0018B4  2A55               	incf	_cad,f,c
 12177  0018B6  D052               	goto	i2l4838
 12178  0018B8                     i2l400:
 12179                           
 12180                           ;robot.c: 111: else if(INTCONbits.INT0F == 1){
 12181  0018B8  A2F2               	btfss	intcon,1,c	;volatile
 12182  0018BA  D014               	goto	i2l408
 12183                           
 12184                           ;robot.c: 112: Lcd_Clear();
 12185  0018BC  ECB2  F01A         	call	i2_Lcd_Clear	;wreg free
 12186                           
 12187                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 12188  0018C0  0E01               	movlw	1
 12189  0018C2  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12190  0018C4  0E01               	movlw	1
 12191  0018C6  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12192                           
 12193                           ;robot.c: 114: Lcd_Write_String("Interruption RB0");
 12194  0018CA  0E7F               	movlw	high STR_19
 12195  0018CC  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12196  0018CE  0E25               	movlw	low STR_19
 12197  0018D0  6E05               	movwf	i2Lcd_Write_String@a,c
 12198  0018D2  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12199                           
 12200                           ;robot.c: 117: PWM_DutyCycle1(100);
 12201  0018D6  0E64               	movlw	100
 12202  0018D8  EC4B  F017         	call	i2_PWM_DutyCycle1
 12203                           
 12204                           ;robot.c: 118: PWM_DutyCycle2(0);
 12205  0018DC  0E00               	movlw	0
 12206  0018DE  EC16  F017         	call	i2_PWM_DutyCycle2
 12207                           
 12208                           ;robot.c: 119: }
 12209  0018E2  D03C               	goto	i2l4838
 12210  0018E4                     i2l408:
 12211                           
 12212                           ;robot.c: 121: else if(INTCON3bits.INT1F == 1){
 12213  0018E4  A0F0               	btfss	intcon3,0,c	;volatile
 12214  0018E6  D014               	goto	i2l410
 12215                           
 12216                           ;robot.c: 122: Lcd_Clear();
 12217  0018E8  ECB2  F01A         	call	i2_Lcd_Clear	;wreg free
 12218                           
 12219                           ;robot.c: 123: Lcd_Set_Cursor(1,1);
 12220  0018EC  0E01               	movlw	1
 12221  0018EE  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12222  0018F0  0E01               	movlw	1
 12223  0018F2  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12224                           
 12225                           ;robot.c: 124: Lcd_Write_String("Interruption RB1");
 12226  0018F6  0E7F               	movlw	high STR_20
 12227  0018F8  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12228  0018FA  0E36               	movlw	low STR_20
 12229  0018FC  6E05               	movwf	i2Lcd_Write_String@a,c
 12230  0018FE  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12231                           
 12232                           ;robot.c: 127: PWM_DutyCycle1(0);
 12233  001902  0E00               	movlw	0
 12234  001904  EC4B  F017         	call	i2_PWM_DutyCycle1
 12235                           
 12236                           ;robot.c: 128: PWM_DutyCycle2(100);
 12237  001908  0E64               	movlw	100
 12238  00190A  EC16  F017         	call	i2_PWM_DutyCycle2
 12239                           
 12240                           ;robot.c: 129: }
 12241  00190E  D026               	goto	i2l4838
 12242  001910                     i2l410:
 12243                           
 12244                           ;robot.c: 130: else if(INTCON3bits.INT2F == 1){
 12245  001910  A2F0               	btfss	intcon3,1,c	;volatile
 12246  001912  D014               	goto	i2l412
 12247                           
 12248                           ;robot.c: 131: Lcd_Clear();
 12249  001914  ECB2  F01A         	call	i2_Lcd_Clear	;wreg free
 12250                           
 12251                           ;robot.c: 132: Lcd_Set_Cursor(1,1);
 12252  001918  0E01               	movlw	1
 12253  00191A  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12254  00191C  0E01               	movlw	1
 12255  00191E  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12256                           
 12257                           ;robot.c: 133: Lcd_Write_String("Interruption RB2");
 12258  001922  0E7F               	movlw	high STR_21
 12259  001924  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12260  001926  0E47               	movlw	low STR_21
 12261  001928  6E05               	movwf	i2Lcd_Write_String@a,c
 12262  00192A  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12263                           
 12264                           ;robot.c: 136: PWM_DutyCycle1(100);
 12265  00192E  0E64               	movlw	100
 12266  001930  EC4B  F017         	call	i2_PWM_DutyCycle1
 12267                           
 12268                           ;robot.c: 137: PWM_DutyCycle2(100);
 12269  001934  0E64               	movlw	100
 12270  001936  EC16  F017         	call	i2_PWM_DutyCycle2
 12271                           
 12272                           ;robot.c: 138: }
 12273  00193A  D010               	goto	i2l4838
 12274  00193C                     i2l412:
 12275                           
 12276                           ;robot.c: 139: else if(PIR1bits.TMR2IF){
 12277  00193C  A29E               	btfss	3998,1,c	;volatile
 12278  00193E  D00E               	goto	i2l4838
 12279                           
 12280                           ;robot.c: 140: Lcd_Clear();
 12281  001940  ECB2  F01A         	call	i2_Lcd_Clear	;wreg free
 12282                           
 12283                           ;robot.c: 141: Lcd_Set_Cursor(1,1);
 12284  001944  0E01               	movlw	1
 12285  001946  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12286  001948  0E01               	movlw	1
 12287  00194A  ECE4  F017         	call	i2_Lcd_Set_Cursor
 12288                           
 12289                           ;robot.c: 142: Lcd_Write_String("Interruption TMR2");
 12290  00194E  0E7F               	movlw	high STR_22
 12291  001950  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12292  001952  0E13               	movlw	low STR_22
 12293  001954  6E05               	movwf	i2Lcd_Write_String@a,c
 12294  001956  EC62  F016         	call	i2_Lcd_Write_String	;wreg free
 12295                           
 12296                           ;robot.c: 143: PIE1bits.TMR2IE = 0;
 12297  00195A  929D               	bcf	3997,1,c	;volatile
 12298  00195C                     i2l4838:
 12299                           
 12300                           ;robot.c: 144: }
 12301                           ;robot.c: 145: INTCON3bits.INT2F = 0;
 12302  00195C  92F0               	bcf	intcon3,1,c	;volatile
 12303                           
 12304                           ;robot.c: 146: INTCON3bits.INT1F = 0;
 12305  00195E  90F0               	bcf	intcon3,0,c	;volatile
 12306                           
 12307                           ;robot.c: 147: INTCONbits.INT0F = 0;
 12308  001960  92F2               	bcf	intcon,1,c	;volatile
 12309                           
 12310                           ;robot.c: 148: PIR1bits.TMR2IF=0;
 12311  001962  929E               	bcf	3998,1,c	;volatile
 12312                           
 12313                           ;robot.c: 149: PIR1bits.RCIF=0;
 12314  001964  9A9E               	bcf	3998,5,c	;volatile
 12315                           
 12316                           ;robot.c: 151: return;
 12317  001966  C041  FFF5         	movff	??_TMRO_USART+13,tablat
 12318  00196A  C040  FFF8         	movff	??_TMRO_USART+12,tblptru
 12319  00196E  C03F  FFF7         	movff	??_TMRO_USART+11,tblptrh
 12320  001972  C03E  FFF6         	movff	??_TMRO_USART+10,tblptrl
 12321  001976  C03D  FFF4         	movff	??_TMRO_USART+9,prodh
 12322  00197A  C03C  FFF3         	movff	??_TMRO_USART+8,prodl
 12323  00197E  C03B  FFDA         	movff	??_TMRO_USART+7,fsr2h
 12324  001982  C03A  FFD9         	movff	??_TMRO_USART+6,fsr2l
 12325  001986  C039  FFE2         	movff	??_TMRO_USART+5,fsr1h
 12326  00198A  C038  FFE1         	movff	??_TMRO_USART+4,fsr1l
 12327  00198E  C037  FFEA         	movff	??_TMRO_USART+3,fsr0h
 12328  001992  C036  FFE9         	movff	??_TMRO_USART+2,fsr0l
 12329  001996  C035  FFFB         	movff	??_TMRO_USART+1,pclatu
 12330  00199A  C034  FFFA         	movff	??_TMRO_USART,pclath
 12331  00199E  0011               	retfie		f
 12332  0019A0                     __end_of_TMRO_USART:
 12333                           	opt stack 0
 12334                           pclatu	equ	0xFFB
 12335                           pclath	equ	0xFFA
 12336                           tblptru	equ	0xFF8
 12337                           tblptrh	equ	0xFF7
 12338                           tblptrl	equ	0xFF6
 12339                           tablat	equ	0xFF5
 12340                           prodh	equ	0xFF4
 12341                           prodl	equ	0xFF3
 12342                           intcon	equ	0xFF2
 12343                           intcon2	equ	0xFF1
 12344                           intcon3	equ	0xFF0
 12345                           indf0	equ	0xFEF
 12346                           postinc0	equ	0xFEE
 12347                           fsr0h	equ	0xFEA
 12348                           fsr0l	equ	0xFE9
 12349                           wreg	equ	0xFE8
 12350                           postinc1	equ	0xFE6
 12351                           postdec1	equ	0xFE5
 12352                           fsr1h	equ	0xFE2
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function i2_PWM_DutyCycle2 *****************
 12362 ;; Defined at:
 12363 ;;		line 55 in file "pwm.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;  percentageDu    1    wreg     unsigned char 
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12368 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12369 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12370 ;; Return value:  Size  Location     Type
 12371 ;;		None               void
 12372 ;; Registers used:
 12373 ;;		wreg, status,2, status,0, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 0/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12379 ;;      Params:         0       0       0       0       0       0       0       0       0
 12380 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12381 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12382 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12383 ;;Total ram usage:        9 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    2
 12386 ;; This function calls:
 12387 ;;		i2_SetDCPWM2
 12388 ;;		i2___ftmul
 12389 ;;		i2___fttol
 12390 ;;		i2___lbtoft
 12391 ;; This function is called by:
 12392 ;;		_TMRO_USART
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text54
 12397  002E2C                     __ptext54:
 12398                           	opt stack 0
 12399  002E2C                     i2_PWM_DutyCycle2:
 12400                           	opt stack 21
 12401                           
 12402                           ;incstack = 0
 12403                           ;i2PWM_DutyCycle2@percentageDuty stored from wreg
 12404  002E2C  6E31               	movwf	i2PWM_DutyCycle2@percentageDuty,c
 12405                           
 12406                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
 12407  002E2E  0E00               	movlw	0
 12408  002E30  6E33               	movwf	i2PWM_DutyCycle2@DC+1,c
 12409  002E32  0E00               	movlw	0
 12410  002E34  6E32               	movwf	i2PWM_DutyCycle2@DC,c
 12411  002E36  0E00               	movlw	0
 12412  002E38  6E30               	movwf	i2PWM_DutyCycle2@DutyCycle+1,c
 12413  002E3A  0E00               	movlw	0
 12414  002E3C  6E2F               	movwf	i2PWM_DutyCycle2@DutyCycle,c
 12415                           
 12416                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
 12417  002E3E  0EAE               	movlw	174
 12418  002E40  6E10               	movwf	i2___ftmul@f2,c
 12419  002E42  0E23               	movlw	35
 12420  002E44  6E11               	movwf	i2___ftmul@f2+1,c
 12421  002E46  0E41               	movlw	65
 12422  002E48  6E12               	movwf	i2___ftmul@f2+2,c
 12423  002E4A  5031               	movf	i2PWM_DutyCycle2@percentageDuty,w,c
 12424  002E4C  EC28  F01A         	call	i2___lbtoft
 12425  002E50  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12426  002E54  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12427  002E58  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12428  002E5C  ECE2  F00F         	call	i2___ftmul	;wreg free
 12429  002E60  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12430  002E64  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12431  002E68  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12432  002E6C  EC99  F011         	call	i2___fttol	;wreg free
 12433  002E70  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle2
 12434  002E74  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle2+1
 12435  002E78  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle2+2
 12436  002E7C  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle2+3
 12437  002E80  C02B  F032         	movff	??i2_PWM_DutyCycle2,i2PWM_DutyCycle2@DC
 12438  002E84  C02C  F033         	movff	??i2_PWM_DutyCycle2+1,i2PWM_DutyCycle2@DC+1
 12439                           
 12440                           ;pwm.c: 60: SetDCPWM2(DC);
 12441  002E88  C032  F001         	movff	i2PWM_DutyCycle2@DC,i2SetDCPWM2@dutycycle
 12442  002E8C  C033  F002         	movff	i2PWM_DutyCycle2@DC+1,i2SetDCPWM2@dutycycle+1
 12443  002E90  EC1B  F019         	call	i2_SetDCPWM2	;wreg free
 12444                           
 12445                           ;pwm.c: 61: return;
 12446  002E94  0012               	return	
 12447  002E96                     __end_ofi2_PWM_DutyCycle2:
 12448                           	opt stack 0
 12449                           pclatu	equ	0xFFB
 12450                           pclath	equ	0xFFA
 12451                           tblptru	equ	0xFF8
 12452                           tblptrh	equ	0xFF7
 12453                           tblptrl	equ	0xFF6
 12454                           tablat	equ	0xFF5
 12455                           prodh	equ	0xFF4
 12456                           prodl	equ	0xFF3
 12457                           intcon	equ	0xFF2
 12458                           intcon2	equ	0xFF1
 12459                           intcon3	equ	0xFF0
 12460                           indf0	equ	0xFEF
 12461                           postinc0	equ	0xFEE
 12462                           fsr0h	equ	0xFEA
 12463                           fsr0l	equ	0xFE9
 12464                           wreg	equ	0xFE8
 12465                           postinc1	equ	0xFE6
 12466                           postdec1	equ	0xFE5
 12467                           fsr1h	equ	0xFE2
 12468                           fsr1l	equ	0xFE1
 12469                           indf2	equ	0xFDF
 12470                           postinc2	equ	0xFDE
 12471                           postdec2	equ	0xFDD
 12472                           fsr2h	equ	0xFDA
 12473                           fsr2l	equ	0xFD9
 12474                           status	equ	0xFD8
 12475                           
 12476 ;; *************** function i2_SetDCPWM2 *****************
 12477 ;; Defined at:
 12478 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;  dutycycle       2    0[COMRAM] unsigned int 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;  SetDCPWM2       2    4[COMRAM] struct PWMDC
 12483 ;; Return value:  Size  Location     Type
 12484 ;;		None               void
 12485 ;; Registers used:
 12486 ;;		wreg, status,2, status,0
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12492 ;;      Params:         2       0       0       0       0       0       0       0       0
 12493 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12494 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12495 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12496 ;;Total ram usage:        6 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		i2_PWM_DutyCycle2
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           	psect	text55
 12506  003236                     __ptext55:
 12507                           	opt stack 0
 12508  003236                     i2_SetDCPWM2:
 12509                           	opt stack 22
 12510                           
 12511                           ;incstack = 0
 12512  003236  C001  F003         	movff	i2SetDCPWM2@dutycycle,??i2_SetDCPWM2
 12513  00323A  C002  F004         	movff	i2SetDCPWM2@dutycycle+1,??i2_SetDCPWM2+1
 12514  00323E  0E06               	movlw	6
 12515  003240                     i2u480_45:
 12516  003240  90D8               	bcf	status,0,c
 12517  003242  3603               	rlcf	??i2_SetDCPWM2,f,c
 12518  003244  3604               	rlcf	??i2_SetDCPWM2+1,f,c
 12519  003246  2EE8               	decfsz	wreg,f,c
 12520  003248  D7FB               	goto	i2u480_45
 12521  00324A  C003  F005         	movff	??i2_SetDCPWM2,i2SetDCPWM2@DCycle
 12522  00324E  C004  F006         	movff	??i2_SetDCPWM2+1,i2SetDCPWM2@DCycle+1
 12523  003252  C006  FFBB         	movff	i2SetDCPWM2@DCycle+1,4027	;volatile
 12524  003256  C005  F003         	movff	i2SetDCPWM2@DCycle,??i2_SetDCPWM2
 12525  00325A  90D8               	bcf	status,0,c
 12526  00325C  3203               	rrcf	??i2_SetDCPWM2,f,c
 12527  00325E  90D8               	bcf	status,0,c
 12528  003260  3203               	rrcf	??i2_SetDCPWM2,f,c
 12529  003262  0E30               	movlw	48
 12530  003264  1603               	andwf	??i2_SetDCPWM2,f,c
 12531  003266  50BA               	movf	4026,w,c	;volatile
 12532  003268  0BCF               	andlw	207
 12533  00326A  1003               	iorwf	??i2_SetDCPWM2,w,c
 12534  00326C  6EBA               	movwf	4026,c	;volatile
 12535  00326E  0012               	return	
 12536  003270                     __end_ofi2_SetDCPWM2:
 12537                           	opt stack 0
 12538                           pclatu	equ	0xFFB
 12539                           pclath	equ	0xFFA
 12540                           tblptru	equ	0xFF8
 12541                           tblptrh	equ	0xFF7
 12542                           tblptrl	equ	0xFF6
 12543                           tablat	equ	0xFF5
 12544                           prodh	equ	0xFF4
 12545                           prodl	equ	0xFF3
 12546                           intcon	equ	0xFF2
 12547                           intcon2	equ	0xFF1
 12548                           intcon3	equ	0xFF0
 12549                           indf0	equ	0xFEF
 12550                           postinc0	equ	0xFEE
 12551                           fsr0h	equ	0xFEA
 12552                           fsr0l	equ	0xFE9
 12553                           wreg	equ	0xFE8
 12554                           postinc1	equ	0xFE6
 12555                           postdec1	equ	0xFE5
 12556                           fsr1h	equ	0xFE2
 12557                           fsr1l	equ	0xFE1
 12558                           indf2	equ	0xFDF
 12559                           postinc2	equ	0xFDE
 12560                           postdec2	equ	0xFDD
 12561                           fsr2h	equ	0xFDA
 12562                           fsr2l	equ	0xFD9
 12563                           status	equ	0xFD8
 12564                           
 12565 ;; *************** function i2_PWM_DutyCycle1 *****************
 12566 ;; Defined at:
 12567 ;;		line 33 in file "pwm.c"
 12568 ;; Parameters:    Size  Location     Type
 12569 ;;  percentageDu    1    wreg     unsigned char 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12572 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12573 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12574 ;; Return value:  Size  Location     Type
 12575 ;;		None               void
 12576 ;; Registers used:
 12577 ;;		wreg, status,2, status,0, cstack
 12578 ;; Tracked objects:
 12579 ;;		On entry : 0/0
 12580 ;;		On exit  : 0/0
 12581 ;;		Unchanged: 0/0
 12582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12583 ;;      Params:         0       0       0       0       0       0       0       0       0
 12584 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12585 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12586 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12587 ;;Total ram usage:        9 bytes
 12588 ;; Hardware stack levels used:    1
 12589 ;; Hardware stack levels required when called:    2
 12590 ;; This function calls:
 12591 ;;		i2_SetDCPWM1
 12592 ;;		i2___ftmul
 12593 ;;		i2___fttol
 12594 ;;		i2___lbtoft
 12595 ;; This function is called by:
 12596 ;;		_TMRO_USART
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text56
 12601  002E96                     __ptext56:
 12602                           	opt stack 0
 12603  002E96                     i2_PWM_DutyCycle1:
 12604                           	opt stack 21
 12605                           
 12606                           ;incstack = 0
 12607                           ;i2PWM_DutyCycle1@percentageDuty stored from wreg
 12608  002E96  6E31               	movwf	i2PWM_DutyCycle1@percentageDuty,c
 12609                           
 12610                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
 12611  002E98  0E00               	movlw	0
 12612  002E9A  6E33               	movwf	i2PWM_DutyCycle1@DC+1,c
 12613  002E9C  0E00               	movlw	0
 12614  002E9E  6E32               	movwf	i2PWM_DutyCycle1@DC,c
 12615  002EA0  0E00               	movlw	0
 12616  002EA2  6E30               	movwf	i2PWM_DutyCycle1@DutyCycle+1,c
 12617  002EA4  0E00               	movlw	0
 12618  002EA6  6E2F               	movwf	i2PWM_DutyCycle1@DutyCycle,c
 12619                           
 12620                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
 12621  002EA8  0EAE               	movlw	174
 12622  002EAA  6E10               	movwf	i2___ftmul@f2,c
 12623  002EAC  0E23               	movlw	35
 12624  002EAE  6E11               	movwf	i2___ftmul@f2+1,c
 12625  002EB0  0E41               	movlw	65
 12626  002EB2  6E12               	movwf	i2___ftmul@f2+2,c
 12627  002EB4  5031               	movf	i2PWM_DutyCycle1@percentageDuty,w,c
 12628  002EB6  EC28  F01A         	call	i2___lbtoft
 12629  002EBA  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12630  002EBE  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12631  002EC2  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12632  002EC6  ECE2  F00F         	call	i2___ftmul	;wreg free
 12633  002ECA  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12634  002ECE  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12635  002ED2  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12636  002ED6  EC99  F011         	call	i2___fttol	;wreg free
 12637  002EDA  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle1
 12638  002EDE  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle1+1
 12639  002EE2  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle1+2
 12640  002EE6  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle1+3
 12641  002EEA  C02B  F032         	movff	??i2_PWM_DutyCycle1,i2PWM_DutyCycle1@DC
 12642  002EEE  C02C  F033         	movff	??i2_PWM_DutyCycle1+1,i2PWM_DutyCycle1@DC+1
 12643                           
 12644                           ;pwm.c: 38: SetDCPWM1(DC);
 12645  002EF2  C032  F001         	movff	i2PWM_DutyCycle1@DC,i2SetDCPWM1@dutycycle
 12646  002EF6  C033  F002         	movff	i2PWM_DutyCycle1@DC+1,i2SetDCPWM1@dutycycle+1
 12647  002EFA  EC38  F019         	call	i2_SetDCPWM1	;wreg free
 12648                           
 12649                           ;pwm.c: 39: return;
 12650  002EFE  0012               	return	
 12651  002F00                     __end_ofi2_PWM_DutyCycle1:
 12652                           	opt stack 0
 12653                           pclatu	equ	0xFFB
 12654                           pclath	equ	0xFFA
 12655                           tblptru	equ	0xFF8
 12656                           tblptrh	equ	0xFF7
 12657                           tblptrl	equ	0xFF6
 12658                           tablat	equ	0xFF5
 12659                           prodh	equ	0xFF4
 12660                           prodl	equ	0xFF3
 12661                           intcon	equ	0xFF2
 12662                           intcon2	equ	0xFF1
 12663                           intcon3	equ	0xFF0
 12664                           indf0	equ	0xFEF
 12665                           postinc0	equ	0xFEE
 12666                           fsr0h	equ	0xFEA
 12667                           fsr0l	equ	0xFE9
 12668                           wreg	equ	0xFE8
 12669                           postinc1	equ	0xFE6
 12670                           postdec1	equ	0xFE5
 12671                           fsr1h	equ	0xFE2
 12672                           fsr1l	equ	0xFE1
 12673                           indf2	equ	0xFDF
 12674                           postinc2	equ	0xFDE
 12675                           postdec2	equ	0xFDD
 12676                           fsr2h	equ	0xFDA
 12677                           fsr2l	equ	0xFD9
 12678                           status	equ	0xFD8
 12679                           
 12680 ;; *************** function i2___lbtoft *****************
 12681 ;; Defined at:
 12682 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  c               1    wreg     unsigned char 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  c               1   11[COMRAM] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  3    8[COMRAM] float 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0, cstack
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12696 ;;      Params:         3       0       0       0       0       0       0       0       0
 12697 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12699 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12700 ;;Total ram usage:        4 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    1
 12703 ;; This function calls:
 12704 ;;		i2___ftpack
 12705 ;; This function is called by:
 12706 ;;		i2_PWM_DutyCycle1
 12707 ;;		i2_PWM_DutyCycle2
 12708 ;; This function uses a non-reentrant model
 12709 ;;
 12710                           
 12711                           	psect	text57
 12712  003450                     __ptext57:
 12713                           	opt stack 0
 12714  003450                     i2___lbtoft:
 12715                           	opt stack 21
 12716                           
 12717                           ;incstack = 0
 12718                           ;i2___lbtoft@c stored from wreg
 12719  003450  6E0C               	movwf	i2___lbtoft@c,c
 12720  003452  500C               	movf	i2___lbtoft@c,w,c
 12721  003454  6E01               	movwf	i2___ftpack@arg,c
 12722  003456  6A02               	clrf	i2___ftpack@arg+1,c
 12723  003458  6A03               	clrf	i2___ftpack@arg+2,c
 12724  00345A  0E8E               	movlw	142
 12725  00345C  6E04               	movwf	i2___ftpack@exp,c
 12726  00345E  0E00               	movlw	0
 12727  003460  6E05               	movwf	i2___ftpack@sign,c
 12728  003462  ECEE  F013         	call	i2___ftpack	;wreg free
 12729  003466  C001  F009         	movff	?i2___ftpack,?i2___lbtoft
 12730  00346A  C002  F00A         	movff	?i2___ftpack+1,?i2___lbtoft+1
 12731  00346E  C003  F00B         	movff	?i2___ftpack+2,?i2___lbtoft+2
 12732  003472  0012               	return	
 12733  003474                     __end_ofi2___lbtoft:
 12734                           	opt stack 0
 12735                           pclatu	equ	0xFFB
 12736                           pclath	equ	0xFFA
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           intcon2	equ	0xFF1
 12745                           intcon3	equ	0xFF0
 12746                           indf0	equ	0xFEF
 12747                           postinc0	equ	0xFEE
 12748                           fsr0h	equ	0xFEA
 12749                           fsr0l	equ	0xFE9
 12750                           wreg	equ	0xFE8
 12751                           postinc1	equ	0xFE6
 12752                           postdec1	equ	0xFE5
 12753                           fsr1h	equ	0xFE2
 12754                           fsr1l	equ	0xFE1
 12755                           indf2	equ	0xFDF
 12756                           postinc2	equ	0xFDE
 12757                           postdec2	equ	0xFDD
 12758                           fsr2h	equ	0xFDA
 12759                           fsr2l	equ	0xFD9
 12760                           status	equ	0xFD8
 12761                           
 12762 ;; *************** function i2___fttol *****************
 12763 ;; Defined at:
 12764 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;  f1              3   27[COMRAM] float 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  __fttol         4   37[COMRAM] unsigned long 
 12769 ;;  __fttol         1   41[COMRAM] unsigned char 
 12770 ;;  __fttol         1   36[COMRAM] unsigned char 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  4   27[COMRAM] long 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12780 ;;      Params:         4       0       0       0       0       0       0       0       0
 12781 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12782 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12783 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12784 ;;Total ram usage:       15 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; This function calls:
 12787 ;;		Nothing
 12788 ;; This function is called by:
 12789 ;;		i2_PWM_DutyCycle1
 12790 ;;		i2_PWM_DutyCycle2
 12791 ;; This function uses a non-reentrant model
 12792 ;;
 12793                           
 12794                           	psect	text58
 12795  002332                     __ptext58:
 12796                           	opt stack 0
 12797  002332                     i2___fttol:
 12798                           	opt stack 22
 12799                           
 12800                           ;incstack = 0
 12801  002332  C01E  F020         	movff	i2___fttol@f1+2,??i2___fttol
 12802  002336  6A21               	clrf	(??i2___fttol+1)& (0+255),c
 12803  002338  6A22               	clrf	(??i2___fttol+2)& (0+255),c
 12804  00233A  341D               	rlcf	i2___fttol@f1+1,w,c
 12805  00233C  3620               	rlcf	??i2___fttol& (0+255),f,c
 12806  00233E  E301               	bnc	u487_41
 12807  002340  8021               	bsf	(??i2___fttol+1)& (0+255),0,c
 12808  002342                     u487_41:
 12809  002342  5020               	movf	??i2___fttol,w,c
 12810  002344  6E2A               	movwf	i2___fttol@exp1,c
 12811  002346  662A               	tstfsz	i2___fttol@exp1& (0+255),c
 12812  002348  D001               	goto	i2l4466
 12813  00234A  D038               	goto	i2u492_40
 12814  00234C                     i2l4466:
 12815  00234C  0E17               	movlw	23
 12816  00234E  6E20               	movwf	??i2___fttol& (0+255),c
 12817  002350  C01C  F021         	movff	i2___fttol@f1,??i2___fttol+1
 12818  002354  C01D  F022         	movff	i2___fttol@f1+1,??i2___fttol+2
 12819  002358  C01E  F023         	movff	i2___fttol@f1+2,??i2___fttol+3
 12820  00235C  2820               	incf	??i2___fttol,w,c
 12821  00235E  6E24               	movwf	(??i2___fttol+4)& (0+255),c
 12822  002360  D004               	goto	i2u489_40
 12823  002362                     i2u489_45:
 12824  002362  90D8               	bcf	status,0,c
 12825  002364  3223               	rrcf	??i2___fttol+3,f,c
 12826  002366  3222               	rrcf	??i2___fttol+2,f,c
 12827  002368  3221               	rrcf	??i2___fttol+1,f,c
 12828  00236A                     i2u489_40:
 12829  00236A  2E24               	decfsz	(??i2___fttol+4)& (0+255),f,c
 12830  00236C  D7FA               	goto	i2u489_45
 12831  00236E  5021               	movf	??i2___fttol+1,w,c
 12832  002370  6E25               	movwf	i2___fttol@sign1,c
 12833  002372  8E1D               	bsf	i2___fttol@f1+1,7,c
 12834  002374  0EFF               	movlw	255
 12835  002376  161C               	andwf	i2___fttol@f1,f,c
 12836  002378  0EFF               	movlw	255
 12837  00237A  161D               	andwf	i2___fttol@f1+1,f,c
 12838  00237C  0E00               	movlw	0
 12839  00237E  161E               	andwf	i2___fttol@f1+2,f,c
 12840  002380  501C               	movf	i2___fttol@f1,w,c
 12841  002382  6E26               	movwf	i2___fttol@lval,c
 12842  002384  501D               	movf	i2___fttol@f1+1,w,c
 12843  002386  6E27               	movwf	i2___fttol@lval+1,c
 12844  002388  501E               	movf	i2___fttol@f1+2,w,c
 12845  00238A  6E28               	movwf	i2___fttol@lval+2,c
 12846  00238C  6A29               	clrf	i2___fttol@lval+3,c
 12847  00238E  0E8E               	movlw	142
 12848  002390  5E2A               	subwf	i2___fttol@exp1,f,c
 12849  002392  AE2A               	btfss	i2___fttol@exp1,7,c
 12850  002394  D010               	goto	i2l4488
 12851  002396  502A               	movf	i2___fttol@exp1,w,c
 12852  002398  0A80               	xorlw	128
 12853  00239A  6E20               	movwf	??i2___fttol& (0+255),c
 12854  00239C  0EF1               	movlw	241
 12855  00239E  0A80               	xorlw	128
 12856  0023A0  5C20               	subwf	??i2___fttol,w,c
 12857  0023A2  A0D8               	btfss	status,0,c
 12858  0023A4  D00B               	goto	i2u492_40
 12859  0023A6                     i2l4484:
 12860  0023A6  90D8               	bcf	status,0,c
 12861  0023A8  3229               	rrcf	i2___fttol@lval+3,f,c
 12862  0023AA  3228               	rrcf	i2___fttol@lval+2,f,c
 12863  0023AC  3227               	rrcf	i2___fttol@lval+1,f,c
 12864  0023AE  3226               	rrcf	i2___fttol@lval,f,c
 12865  0023B0  3E2A               	incfsz	i2___fttol@exp1,f,c
 12866  0023B2  D7F9               	goto	i2l4484
 12867  0023B4  D014               	goto	i2l4498
 12868  0023B6                     i2l4488:
 12869  0023B6  0E17               	movlw	23
 12870  0023B8  642A               	cpfsgt	i2___fttol@exp1,c
 12871  0023BA  D00F               	goto	i2l4496
 12872  0023BC                     i2u492_40:
 12873  0023BC  0E00               	movlw	0
 12874  0023BE  6E1C               	movwf	?i2___fttol,c
 12875  0023C0  0E00               	movlw	0
 12876  0023C2  6E1D               	movwf	?i2___fttol+1,c
 12877  0023C4  0E00               	movlw	0
 12878  0023C6  6E1E               	movwf	?i2___fttol+2,c
 12879  0023C8  0E00               	movlw	0
 12880  0023CA  6E1F               	movwf	?i2___fttol+3,c
 12881  0023CC  D01B               	goto	i2l1125
 12882  0023CE                     i2l4494:
 12883  0023CE  90D8               	bcf	status,0,c
 12884  0023D0  3626               	rlcf	i2___fttol@lval,f,c
 12885  0023D2  3627               	rlcf	i2___fttol@lval+1,f,c
 12886  0023D4  3628               	rlcf	i2___fttol@lval+2,f,c
 12887  0023D6  3629               	rlcf	i2___fttol@lval+3,f,c
 12888  0023D8  062A               	decf	i2___fttol@exp1,f,c
 12889  0023DA                     i2l4496:
 12890  0023DA  662A               	tstfsz	i2___fttol@exp1,c
 12891  0023DC  D7F8               	goto	i2l4494
 12892  0023DE                     i2l4498:
 12893  0023DE  5025               	movf	i2___fttol@sign1,w,c
 12894  0023E0  B4D8               	btfsc	status,2,c
 12895  0023E2  D008               	goto	i2l4502
 12896  0023E4  1E29               	comf	i2___fttol@lval+3,f,c
 12897  0023E6  1E28               	comf	i2___fttol@lval+2,f,c
 12898  0023E8  1E27               	comf	i2___fttol@lval+1,f,c
 12899  0023EA  6C26               	negf	i2___fttol@lval,c
 12900  0023EC  0E00               	movlw	0
 12901  0023EE  2227               	addwfc	i2___fttol@lval+1,f,c
 12902  0023F0  2228               	addwfc	i2___fttol@lval+2,f,c
 12903  0023F2  2229               	addwfc	i2___fttol@lval+3,f,c
 12904  0023F4                     i2l4502:
 12905  0023F4  C026  F01C         	movff	i2___fttol@lval,?i2___fttol
 12906  0023F8  C027  F01D         	movff	i2___fttol@lval+1,?i2___fttol+1
 12907  0023FC  C028  F01E         	movff	i2___fttol@lval+2,?i2___fttol+2
 12908  002400  C029  F01F         	movff	i2___fttol@lval+3,?i2___fttol+3
 12909  002404                     i2l1125:
 12910  002404  0012               	return	
 12911  002406                     __end_ofi2___fttol:
 12912                           	opt stack 0
 12913                           pclatu	equ	0xFFB
 12914                           pclath	equ	0xFFA
 12915                           tblptru	equ	0xFF8
 12916                           tblptrh	equ	0xFF7
 12917                           tblptrl	equ	0xFF6
 12918                           tablat	equ	0xFF5
 12919                           prodh	equ	0xFF4
 12920                           prodl	equ	0xFF3
 12921                           intcon	equ	0xFF2
 12922                           intcon2	equ	0xFF1
 12923                           intcon3	equ	0xFF0
 12924                           indf0	equ	0xFEF
 12925                           postinc0	equ	0xFEE
 12926                           fsr0h	equ	0xFEA
 12927                           fsr0l	equ	0xFE9
 12928                           wreg	equ	0xFE8
 12929                           postinc1	equ	0xFE6
 12930                           postdec1	equ	0xFE5
 12931                           fsr1h	equ	0xFE2
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function i2___ftmul *****************
 12941 ;; Defined at:
 12942 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  f1              3   12[COMRAM] float 
 12945 ;;  f2              3   15[COMRAM] float 
 12946 ;; Auto vars:     Size  Location     Type
 12947 ;;  __ftmul         3   22[COMRAM] unsigned um
 12948 ;;  __ftmul         1   26[COMRAM] unsigned char 
 12949 ;;  __ftmul         1   25[COMRAM] unsigned char 
 12950 ;;  __ftmul         1   21[COMRAM] unsigned char 
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  3   12[COMRAM] float 
 12953 ;; Registers used:
 12954 ;;		wreg, status,2, status,0, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12960 ;;      Params:         6       0       0       0       0       0       0       0       0
 12961 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12962 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12963 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12964 ;;Total ram usage:       15 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    1
 12967 ;; This function calls:
 12968 ;;		i2___ftpack
 12969 ;; This function is called by:
 12970 ;;		i2_PWM_DutyCycle1
 12971 ;;		i2_PWM_DutyCycle2
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text59
 12976  001FC4                     __ptext59:
 12977                           	opt stack 0
 12978  001FC4                     i2___ftmul:
 12979                           	opt stack 21
 12980                           
 12981                           ;incstack = 0
 12982  001FC4  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
 12983  001FC8  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12984  001FCA  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12985  001FCC  340E               	rlcf	i2___ftmul@f1+1,w,c
 12986  001FCE  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12987  001FD0  E301               	bnc	u481_41
 12988  001FD2  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12989  001FD4                     u481_41:
 12990  001FD4  5013               	movf	??i2___ftmul,w,c
 12991  001FD6  6E16               	movwf	i2___ftmul@exp,c
 12992  001FD8  6616               	tstfsz	i2___ftmul@exp& (0+255),c
 12993  001FDA  D001               	goto	i2l4418
 12994  001FDC  D00C               	goto	i2u484_40
 12995  001FDE                     i2l4418:
 12996  001FDE  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
 12997  001FE2  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12998  001FE4  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12999  001FE6  3411               	rlcf	i2___ftmul@f2+1,w,c
 13000  001FE8  3613               	rlcf	??i2___ftmul& (0+255),f,c
 13001  001FEA  E301               	bnc	u483_41
 13002  001FEC  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 13003  001FEE                     u483_41:
 13004  001FEE  5013               	movf	??i2___ftmul,w,c
 13005  001FF0  6E1B               	movwf	i2___ftmul@sign,c
 13006  001FF2  661B               	tstfsz	i2___ftmul@sign& (0+255),c
 13007  001FF4  D007               	goto	i2l4424
 13008  001FF6                     i2u484_40:
 13009  001FF6  0E00               	movlw	0
 13010  001FF8  6E0D               	movwf	?i2___ftmul,c
 13011  001FFA  0E00               	movlw	0
 13012  001FFC  6E0E               	movwf	?i2___ftmul+1,c
 13013  001FFE  0E00               	movlw	0
 13014  002000  6E0F               	movwf	?i2___ftmul+2,c
 13015  002002  D051               	goto	i2l1105
 13016  002004                     i2l4424:
 13017  002004  501B               	movf	i2___ftmul@sign,w,c
 13018  002006  0F7B               	addlw	123
 13019  002008  2616               	addwf	i2___ftmul@exp,f,c
 13020  00200A  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 13021  00200E  5012               	movf	i2___ftmul@f2+2,w,c
 13022  002010  1A1B               	xorwf	i2___ftmul@sign,f,c
 13023  002012  0E80               	movlw	128
 13024  002014  161B               	andwf	i2___ftmul@sign,f,c
 13025  002016  8E0E               	bsf	i2___ftmul@f1+1,7,c
 13026  002018  8E11               	bsf	i2___ftmul@f2+1,7,c
 13027  00201A  0EFF               	movlw	255
 13028  00201C  1610               	andwf	i2___ftmul@f2,f,c
 13029  00201E  0EFF               	movlw	255
 13030  002020  1611               	andwf	i2___ftmul@f2+1,f,c
 13031  002022  0E00               	movlw	0
 13032  002024  1612               	andwf	i2___ftmul@f2+2,f,c
 13033  002026  0E00               	movlw	0
 13034  002028  6E17               	movwf	i2___ftmul@f3_as_product,c
 13035  00202A  0E00               	movlw	0
 13036  00202C  6E18               	movwf	i2___ftmul@f3_as_product+1,c
 13037  00202E  0E00               	movlw	0
 13038  002030  6E19               	movwf	i2___ftmul@f3_as_product+2,c
 13039  002032  0E07               	movlw	7
 13040  002034  6E1A               	movwf	i2___ftmul@cntr,c
 13041  002036                     i2l4438:
 13042  002036  A00D               	btfss	i2___ftmul@f1,0,c
 13043  002038  D006               	goto	i2l4442
 13044  00203A  5010               	movf	i2___ftmul@f2,w,c
 13045  00203C  2617               	addwf	i2___ftmul@f3_as_product,f,c
 13046  00203E  5011               	movf	i2___ftmul@f2+1,w,c
 13047  002040  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13048  002042  5012               	movf	i2___ftmul@f2+2,w,c
 13049  002044  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13050  002046                     i2l4442:
 13051  002046  90D8               	bcf	status,0,c
 13052  002048  320F               	rrcf	i2___ftmul@f1+2,f,c
 13053  00204A  320E               	rrcf	i2___ftmul@f1+1,f,c
 13054  00204C  320D               	rrcf	i2___ftmul@f1,f,c
 13055  00204E  90D8               	bcf	status,0,c
 13056  002050  3610               	rlcf	i2___ftmul@f2,f,c
 13057  002052  3611               	rlcf	i2___ftmul@f2+1,f,c
 13058  002054  3612               	rlcf	i2___ftmul@f2+2,f,c
 13059  002056  2E1A               	decfsz	i2___ftmul@cntr,f,c
 13060  002058  D7EE               	goto	i2l4438
 13061  00205A  0E09               	movlw	9
 13062  00205C  6E1A               	movwf	i2___ftmul@cntr,c
 13063  00205E                     i2l4448:
 13064  00205E  A00D               	btfss	i2___ftmul@f1,0,c
 13065  002060  D006               	goto	i2l4452
 13066  002062  5010               	movf	i2___ftmul@f2,w,c
 13067  002064  2617               	addwf	i2___ftmul@f3_as_product,f,c
 13068  002066  5011               	movf	i2___ftmul@f2+1,w,c
 13069  002068  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13070  00206A  5012               	movf	i2___ftmul@f2+2,w,c
 13071  00206C  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13072  00206E                     i2l4452:
 13073  00206E  90D8               	bcf	status,0,c
 13074  002070  320F               	rrcf	i2___ftmul@f1+2,f,c
 13075  002072  320E               	rrcf	i2___ftmul@f1+1,f,c
 13076  002074  320D               	rrcf	i2___ftmul@f1,f,c
 13077  002076  90D8               	bcf	status,0,c
 13078  002078  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
 13079  00207A  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
 13080  00207C  3217               	rrcf	i2___ftmul@f3_as_product,f,c
 13081  00207E  2E1A               	decfsz	i2___ftmul@cntr,f,c
 13082  002080  D7EE               	goto	i2l4448
 13083  002082  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 13084  002086  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 13085  00208A  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 13086  00208E  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 13087  002092  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 13088  002096  ECEE  F013         	call	i2___ftpack	;wreg free
 13089  00209A  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
 13090  00209E  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
 13091  0020A2  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
 13092  0020A6                     i2l1105:
 13093  0020A6  0012               	return	
 13094  0020A8                     __end_ofi2___ftmul:
 13095                           	opt stack 0
 13096                           pclatu	equ	0xFFB
 13097                           pclath	equ	0xFFA
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           intcon2	equ	0xFF1
 13106                           intcon3	equ	0xFF0
 13107                           indf0	equ	0xFEF
 13108                           postinc0	equ	0xFEE
 13109                           fsr0h	equ	0xFEA
 13110                           fsr0l	equ	0xFE9
 13111                           wreg	equ	0xFE8
 13112                           postinc1	equ	0xFE6
 13113                           postdec1	equ	0xFE5
 13114                           fsr1h	equ	0xFE2
 13115                           fsr1l	equ	0xFE1
 13116                           indf2	equ	0xFDF
 13117                           postinc2	equ	0xFDE
 13118                           postdec2	equ	0xFDD
 13119                           fsr2h	equ	0xFDA
 13120                           fsr2l	equ	0xFD9
 13121                           status	equ	0xFD8
 13122                           
 13123 ;; *************** function i2___ftpack *****************
 13124 ;; Defined at:
 13125 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;  arg             3    0[COMRAM] unsigned um
 13128 ;;  exp             1    3[COMRAM] unsigned char 
 13129 ;;  sign            1    4[COMRAM] unsigned char 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;		None
 13132 ;; Return value:  Size  Location     Type
 13133 ;;                  3    0[COMRAM] float 
 13134 ;; Registers used:
 13135 ;;		wreg, status,2, status,0
 13136 ;; Tracked objects:
 13137 ;;		On entry : 0/0
 13138 ;;		On exit  : 0/0
 13139 ;;		Unchanged: 0/0
 13140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13141 ;;      Params:         5       0       0       0       0       0       0       0       0
 13142 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13143 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13144 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13145 ;;Total ram usage:        8 bytes
 13146 ;; Hardware stack levels used:    1
 13147 ;; This function calls:
 13148 ;;		Nothing
 13149 ;; This function is called by:
 13150 ;;		i2___ftmul
 13151 ;;		i2___lbtoft
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155                           	psect	text60
 13156  0027DC                     __ptext60:
 13157                           	opt stack 0
 13158  0027DC                     i2___ftpack:
 13159                           	opt stack 21
 13160                           
 13161                           ;incstack = 0
 13162  0027DC  5004               	movf	i2___ftpack@exp,w,c
 13163  0027DE  B4D8               	btfsc	status,2,c
 13164  0027E0  D005               	goto	i2l4068
 13165  0027E2  5001               	movf	i2___ftpack@arg,w,c
 13166  0027E4  1002               	iorwf	i2___ftpack@arg+1,w,c
 13167  0027E6  1003               	iorwf	i2___ftpack@arg+2,w,c
 13168  0027E8  A4D8               	btfss	status,2,c
 13169  0027EA  D00C               	goto	i2l4074
 13170  0027EC                     i2l4068:
 13171  0027EC  0E00               	movlw	0
 13172  0027EE  6E01               	movwf	?i2___ftpack,c
 13173  0027F0  0E00               	movlw	0
 13174  0027F2  6E02               	movwf	?i2___ftpack+1,c
 13175  0027F4  0E00               	movlw	0
 13176  0027F6  6E03               	movwf	?i2___ftpack+2,c
 13177  0027F8  D044               	goto	i2l1004
 13178  0027FA                     i2l4072:
 13179  0027FA  2A04               	incf	i2___ftpack@exp,f,c
 13180  0027FC  90D8               	bcf	status,0,c
 13181  0027FE  3203               	rrcf	i2___ftpack@arg+2,f,c
 13182  002800  3202               	rrcf	i2___ftpack@arg+1,f,c
 13183  002802  3201               	rrcf	i2___ftpack@arg,f,c
 13184  002804                     i2l4074:
 13185  002804  0E00               	movlw	0
 13186  002806  1401               	andwf	i2___ftpack@arg,w,c
 13187  002808  6E06               	movwf	??i2___ftpack& (0+255),c
 13188  00280A  0E00               	movlw	0
 13189  00280C  1402               	andwf	i2___ftpack@arg+1,w,c
 13190  00280E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13191  002810  0EFE               	movlw	254
 13192  002812  1403               	andwf	i2___ftpack@arg+2,w,c
 13193  002814  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13194  002816  5006               	movf	??i2___ftpack,w,c
 13195  002818  1007               	iorwf	??i2___ftpack+1,w,c
 13196  00281A  1008               	iorwf	??i2___ftpack+2,w,c
 13197  00281C  B4D8               	btfsc	status,2,c
 13198  00281E  D00C               	goto	i2l4080
 13199  002820  D7EC               	goto	i2l4072
 13200  002822                     i2l4076:
 13201  002822  2A04               	incf	i2___ftpack@exp,f,c
 13202  002824  0E01               	movlw	1
 13203  002826  2601               	addwf	i2___ftpack@arg,f,c
 13204  002828  0E00               	movlw	0
 13205  00282A  2202               	addwfc	i2___ftpack@arg+1,f,c
 13206  00282C  0E00               	movlw	0
 13207  00282E  2203               	addwfc	i2___ftpack@arg+2,f,c
 13208  002830  90D8               	bcf	status,0,c
 13209  002832  3203               	rrcf	i2___ftpack@arg+2,f,c
 13210  002834  3202               	rrcf	i2___ftpack@arg+1,f,c
 13211  002836  3201               	rrcf	i2___ftpack@arg,f,c
 13212  002838                     i2l4080:
 13213  002838  0E00               	movlw	0
 13214  00283A  1401               	andwf	i2___ftpack@arg,w,c
 13215  00283C  6E06               	movwf	??i2___ftpack& (0+255),c
 13216  00283E  0E00               	movlw	0
 13217  002840  1402               	andwf	i2___ftpack@arg+1,w,c
 13218  002842  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13219  002844  0EFF               	movlw	255
 13220  002846  1403               	andwf	i2___ftpack@arg+2,w,c
 13221  002848  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13222  00284A  5006               	movf	??i2___ftpack,w,c
 13223  00284C  1007               	iorwf	??i2___ftpack+1,w,c
 13224  00284E  1008               	iorwf	??i2___ftpack+2,w,c
 13225  002850  B4D8               	btfsc	status,2,c
 13226  002852  D006               	goto	i2l4084
 13227  002854  D7E6               	goto	i2l4076
 13228  002856                     i2l4082:
 13229  002856  0604               	decf	i2___ftpack@exp,f,c
 13230  002858  90D8               	bcf	status,0,c
 13231  00285A  3601               	rlcf	i2___ftpack@arg,f,c
 13232  00285C  3602               	rlcf	i2___ftpack@arg+1,f,c
 13233  00285E  3603               	rlcf	i2___ftpack@arg+2,f,c
 13234  002860                     i2l4084:
 13235  002860  AE02               	btfss	i2___ftpack@arg+1,7,c
 13236  002862  D7F9               	goto	i2l4082
 13237  002864  A004               	btfss	i2___ftpack@exp,0,c
 13238  002866  9E02               	bcf	i2___ftpack@arg+1,7,c
 13239  002868  90D8               	bcf	status,0,c
 13240  00286A  3204               	rrcf	i2___ftpack@exp,f,c
 13241  00286C  5004               	movf	i2___ftpack@exp,w,c
 13242  00286E  1203               	iorwf	i2___ftpack@arg+2,f,c
 13243  002870  5005               	movf	i2___ftpack@sign,w,c
 13244  002872  A4D8               	btfss	status,2,c
 13245  002874  8E03               	bsf	i2___ftpack@arg+2,7,c
 13246  002876  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13247  00287A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13248  00287E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13249  002882                     i2l1004:
 13250  002882  0012               	return	
 13251  002884                     __end_ofi2___ftpack:
 13252                           	opt stack 0
 13253                           pclatu	equ	0xFFB
 13254                           pclath	equ	0xFFA
 13255                           tblptru	equ	0xFF8
 13256                           tblptrh	equ	0xFF7
 13257                           tblptrl	equ	0xFF6
 13258                           tablat	equ	0xFF5
 13259                           prodh	equ	0xFF4
 13260                           prodl	equ	0xFF3
 13261                           intcon	equ	0xFF2
 13262                           intcon2	equ	0xFF1
 13263                           intcon3	equ	0xFF0
 13264                           indf0	equ	0xFEF
 13265                           postinc0	equ	0xFEE
 13266                           fsr0h	equ	0xFEA
 13267                           fsr0l	equ	0xFE9
 13268                           wreg	equ	0xFE8
 13269                           postinc1	equ	0xFE6
 13270                           postdec1	equ	0xFE5
 13271                           fsr1h	equ	0xFE2
 13272                           fsr1l	equ	0xFE1
 13273                           indf2	equ	0xFDF
 13274                           postinc2	equ	0xFDE
 13275                           postdec2	equ	0xFDD
 13276                           fsr2h	equ	0xFDA
 13277                           fsr2l	equ	0xFD9
 13278                           status	equ	0xFD8
 13279                           
 13280 ;; *************** function i2_SetDCPWM1 *****************
 13281 ;; Defined at:
 13282 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
 13283 ;; Parameters:    Size  Location     Type
 13284 ;;  dutycycle       2    0[COMRAM] unsigned int 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  SetDCPWM1       2    4[COMRAM] struct PWMDC
 13287 ;; Return value:  Size  Location     Type
 13288 ;;		None               void
 13289 ;; Registers used:
 13290 ;;		wreg, status,2, status,0
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13296 ;;      Params:         2       0       0       0       0       0       0       0       0
 13297 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13298 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13299 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13300 ;;Total ram usage:        6 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; This function calls:
 13303 ;;		Nothing
 13304 ;; This function is called by:
 13305 ;;		i2_PWM_DutyCycle1
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text61
 13310  003270                     __ptext61:
 13311                           	opt stack 0
 13312  003270                     i2_SetDCPWM1:
 13313                           	opt stack 22
 13314                           
 13315                           ;incstack = 0
 13316  003270  C001  F003         	movff	i2SetDCPWM1@dutycycle,??i2_SetDCPWM1
 13317  003274  C002  F004         	movff	i2SetDCPWM1@dutycycle+1,??i2_SetDCPWM1+1
 13318  003278  0E06               	movlw	6
 13319  00327A                     i2u479_45:
 13320  00327A  90D8               	bcf	status,0,c
 13321  00327C  3603               	rlcf	??i2_SetDCPWM1,f,c
 13322  00327E  3604               	rlcf	??i2_SetDCPWM1+1,f,c
 13323  003280  2EE8               	decfsz	wreg,f,c
 13324  003282  D7FB               	goto	i2u479_45
 13325  003284  C003  F005         	movff	??i2_SetDCPWM1,i2SetDCPWM1@DCycle
 13326  003288  C004  F006         	movff	??i2_SetDCPWM1+1,i2SetDCPWM1@DCycle+1
 13327  00328C  C006  FFBE         	movff	i2SetDCPWM1@DCycle+1,4030	;volatile
 13328  003290  C005  F003         	movff	i2SetDCPWM1@DCycle,??i2_SetDCPWM1
 13329  003294  90D8               	bcf	status,0,c
 13330  003296  3203               	rrcf	??i2_SetDCPWM1,f,c
 13331  003298  90D8               	bcf	status,0,c
 13332  00329A  3203               	rrcf	??i2_SetDCPWM1,f,c
 13333  00329C  0E30               	movlw	48
 13334  00329E  1603               	andwf	??i2_SetDCPWM1,f,c
 13335  0032A0  50BD               	movf	4029,w,c	;volatile
 13336  0032A2  0BCF               	andlw	207
 13337  0032A4  1003               	iorwf	??i2_SetDCPWM1,w,c
 13338  0032A6  6EBD               	movwf	4029,c	;volatile
 13339  0032A8  0012               	return	
 13340  0032AA                     __end_ofi2_SetDCPWM1:
 13341                           	opt stack 0
 13342                           pclatu	equ	0xFFB
 13343                           pclath	equ	0xFFA
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           intcon2	equ	0xFF1
 13352                           intcon3	equ	0xFF0
 13353                           indf0	equ	0xFEF
 13354                           postinc0	equ	0xFEE
 13355                           fsr0h	equ	0xFEA
 13356                           fsr0l	equ	0xFE9
 13357                           wreg	equ	0xFE8
 13358                           postinc1	equ	0xFE6
 13359                           postdec1	equ	0xFE5
 13360                           fsr1h	equ	0xFE2
 13361                           fsr1l	equ	0xFE1
 13362                           indf2	equ	0xFDF
 13363                           postinc2	equ	0xFDE
 13364                           postdec2	equ	0xFDD
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function i2_Lcd_Write_String *****************
 13370 ;; Defined at:
 13371 ;;		line 90 in file "lcd.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  a               2    4[COMRAM] PTR unsigned char 
 13374 ;;		 -> STR_24(11), STR_23(7), STR_22(18), STR_21(17), 
 13375 ;;		 -> STR_20(17), STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
 13376 ;;		 -> STR_16(8), STR_14(2), STR_13(2), STR_12(2), 
 13377 ;;		 -> STR_11(16), STR_10(7), 
 13378 ;; Auto vars:     Size  Location     Type
 13379 ;;  Lcd_Write_St    2    8[COMRAM] int 
 13380 ;; Return value:  Size  Location     Type
 13381 ;;		None               void
 13382 ;; Registers used:
 13383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13384 ;; Tracked objects:
 13385 ;;		On entry : 0/0
 13386 ;;		On exit  : 0/0
 13387 ;;		Unchanged: 0/0
 13388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13389 ;;      Params:         2       0       0       0       0       0       0       0       0
 13390 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13391 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13392 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13393 ;;Total ram usage:        6 bytes
 13394 ;; Hardware stack levels used:    1
 13395 ;; Hardware stack levels required when called:    2
 13396 ;; This function calls:
 13397 ;;		i2_Lcd_Write_Char
 13398 ;; This function is called by:
 13399 ;;		_TMRO_USART
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403                           	psect	text62
 13404  002CC4                     __ptext62:
 13405                           	opt stack 0
 13406  002CC4                     i2_Lcd_Write_String:
 13407                           	opt stack 21
 13408                           
 13409                           ;lcd.c: 91: int i;
 13410                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 13411                           
 13412                           ;incstack = 0
 13413  002CC4  0E00               	movlw	0
 13414  002CC6  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 13415  002CC8  0E00               	movlw	0
 13416  002CCA  6E09               	movwf	i2Lcd_Write_String@i,c
 13417  002CCC  D01C               	goto	i2l4714
 13418  002CCE                     i2l4710:
 13419                           
 13420                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 13421  002CCE  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13422  002CD2  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13423  002CD6  5009               	movf	i2Lcd_Write_String@i,w,c
 13424  002CD8  2607               	addwf	??i2_Lcd_Write_String,f,c
 13425  002CDA  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13426  002CDC  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13427  002CDE  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13428  002CE2  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13429  002CE6  6AF8               	clrf	tblptru,c
 13430  002CE8  0E07               	movlw	(high __ramtop+-1)
 13431  002CEA  64F7               	cpfsgt	tblptrh,c
 13432  002CEC  D003               	bra	i2u506_47
 13433  002CEE  0008               	tblrd		*
 13434  002CF0  50F5               	movf	tablat,w,c
 13435  002CF2  D005               	bra	i2u506_40
 13436  002CF4                     i2u506_47:
 13437  002CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
 13438  002CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
 13439  002CFC  50EF               	movf	indf0,w,c
 13440  002CFE                     i2u506_40:
 13441  002CFE  EC55  F019         	call	i2_Lcd_Write_Char
 13442  002D02  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 13443  002D04  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 13444  002D06                     i2l4714:
 13445  002D06  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13446  002D0A  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13447  002D0E  5009               	movf	i2Lcd_Write_String@i,w,c
 13448  002D10  2607               	addwf	??i2_Lcd_Write_String,f,c
 13449  002D12  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13450  002D14  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13451  002D16  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13452  002D1A  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13453  002D1E  6AF8               	clrf	tblptru,c
 13454  002D20  0E07               	movlw	(high __ramtop+-1)
 13455  002D22  64F7               	cpfsgt	tblptrh,c
 13456  002D24  D003               	bra	i2u507_47
 13457  002D26  0008               	tblrd		*
 13458  002D28  50F5               	movf	tablat,w,c
 13459  002D2A  D005               	bra	i2u507_40
 13460  002D2C                     i2u507_47:
 13461  002D2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 13462  002D30  CFF7 FFEA          	movff	tblptrh,fsr0h
 13463  002D34  50EF               	movf	indf0,w,c
 13464  002D36                     i2u507_40:
 13465  002D36  0900               	iorlw	0
 13466  002D38  B4D8               	btfsc	status,2,c
 13467  002D3A  0012               	return	
 13468  002D3C  D7C8               	goto	i2l4710
 13469  002D3E                     __end_ofi2_Lcd_Write_String:
 13470                           	opt stack 0
 13471                           pclatu	equ	0xFFB
 13472                           pclath	equ	0xFFA
 13473                           tblptru	equ	0xFF8
 13474                           tblptrh	equ	0xFF7
 13475                           tblptrl	equ	0xFF6
 13476                           tablat	equ	0xFF5
 13477                           prodh	equ	0xFF4
 13478                           prodl	equ	0xFF3
 13479                           intcon	equ	0xFF2
 13480                           intcon2	equ	0xFF1
 13481                           intcon3	equ	0xFF0
 13482                           indf0	equ	0xFEF
 13483                           postinc0	equ	0xFEE
 13484                           fsr0h	equ	0xFEA
 13485                           fsr0l	equ	0xFE9
 13486                           wreg	equ	0xFE8
 13487                           postinc1	equ	0xFE6
 13488                           postdec1	equ	0xFE5
 13489                           fsr1h	equ	0xFE2
 13490                           fsr1l	equ	0xFE1
 13491                           indf2	equ	0xFDF
 13492                           postinc2	equ	0xFDE
 13493                           postdec2	equ	0xFDD
 13494                           fsr2h	equ	0xFDA
 13495                           fsr2l	equ	0xFD9
 13496                           status	equ	0xFD8
 13497                           
 13498 ;; *************** function i2_Lcd_Write_Char *****************
 13499 ;; Defined at:
 13500 ;;		line 75 in file "lcd.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  a               1    wreg     unsigned char 
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  a               1    3[COMRAM] unsigned char 
 13505 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 13506 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 13507 ;; Return value:  Size  Location     Type
 13508 ;;		None               void
 13509 ;; Registers used:
 13510 ;;		wreg, status,2, status,0, cstack
 13511 ;; Tracked objects:
 13512 ;;		On entry : 0/0
 13513 ;;		On exit  : 0/0
 13514 ;;		Unchanged: 0/0
 13515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13516 ;;      Params:         0       0       0       0       0       0       0       0       0
 13517 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13518 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13519 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13520 ;;Total ram usage:        3 bytes
 13521 ;; Hardware stack levels used:    1
 13522 ;; Hardware stack levels required when called:    1
 13523 ;; This function calls:
 13524 ;;		i2_Lcd_Port
 13525 ;; This function is called by:
 13526 ;;		i2_Lcd_Write_String
 13527 ;; This function uses a non-reentrant model
 13528 ;;
 13529                           
 13530                           	psect	text63
 13531  0032AA                     __ptext63:
 13532                           	opt stack 0
 13533  0032AA                     i2_Lcd_Write_Char:
 13534                           	opt stack 21
 13535                           
 13536                           ;incstack = 0
 13537                           ;i2Lcd_Write_Char@a stored from wreg
 13538  0032AA  6E04               	movwf	i2Lcd_Write_Char@a,c
 13539                           
 13540                           ;lcd.c: 76: char temp, y;
 13541                           ;lcd.c: 77: temp = a & 0x0F;
 13542  0032AC  5004               	movf	i2Lcd_Write_Char@a,w,c
 13543  0032AE  0B0F               	andlw	15
 13544  0032B0  6E02               	movwf	i2Lcd_Write_Char@temp,c
 13545                           
 13546                           ;lcd.c: 78: y = a & 0xF0;
 13547  0032B2  5004               	movf	i2Lcd_Write_Char@a,w,c
 13548  0032B4  0BF0               	andlw	240
 13549  0032B6  6E03               	movwf	i2Lcd_Write_Char@y,c
 13550                           
 13551                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 13552  0032B8  8084               	bsf	3972,0,c	;volatile
 13553                           
 13554                           ;lcd.c: 80: Lcd_Port(y >> 4);
 13555  0032BA  3803               	swapf	i2Lcd_Write_Char@y,w,c
 13556  0032BC  0B0F               	andlw	15
 13557  0032BE  ECD9  F019         	call	i2_Lcd_Port
 13558                           
 13559                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 13560  0032C2  8484               	bsf	3972,2,c	;volatile
 13561                           
 13562                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13563  0032C4  0E0D               	movlw	13
 13564  0032C6                     i2u535_47:
 13565  0032C6  2EE8               	decfsz	wreg,f,c
 13566  0032C8  D7FE               	goto	i2u535_47
 13567  0032CA  F000               	nop	
 13568                           
 13569                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 13570  0032CC  9484               	bcf	3972,2,c	;volatile
 13571                           
 13572                           ;lcd.c: 84: Lcd_Port(temp);
 13573  0032CE  5002               	movf	i2Lcd_Write_Char@temp,w,c
 13574  0032D0  ECD9  F019         	call	i2_Lcd_Port
 13575                           
 13576                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 13577  0032D4  8484               	bsf	3972,2,c	;volatile
 13578                           
 13579                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13580  0032D6  0E0D               	movlw	13
 13581  0032D8                     i2u536_47:
 13582  0032D8  2EE8               	decfsz	wreg,f,c
 13583  0032DA  D7FE               	goto	i2u536_47
 13584  0032DC  F000               	nop	
 13585                           
 13586                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 13587  0032DE  9484               	bcf	3972,2,c	;volatile
 13588  0032E0  0012               	return	
 13589  0032E2                     __end_ofi2_Lcd_Write_Char:
 13590                           	opt stack 0
 13591                           pclatu	equ	0xFFB
 13592                           pclath	equ	0xFFA
 13593                           tblptru	equ	0xFF8
 13594                           tblptrh	equ	0xFF7
 13595                           tblptrl	equ	0xFF6
 13596                           tablat	equ	0xFF5
 13597                           prodh	equ	0xFF4
 13598                           prodl	equ	0xFF3
 13599                           intcon	equ	0xFF2
 13600                           intcon2	equ	0xFF1
 13601                           intcon3	equ	0xFF0
 13602                           indf0	equ	0xFEF
 13603                           postinc0	equ	0xFEE
 13604                           fsr0h	equ	0xFEA
 13605                           fsr0l	equ	0xFE9
 13606                           wreg	equ	0xFE8
 13607                           postinc1	equ	0xFE6
 13608                           postdec1	equ	0xFE5
 13609                           fsr1h	equ	0xFE2
 13610                           fsr1l	equ	0xFE1
 13611                           indf2	equ	0xFDF
 13612                           postinc2	equ	0xFDE
 13613                           postdec2	equ	0xFDD
 13614                           fsr2h	equ	0xFDA
 13615                           fsr2l	equ	0xFD9
 13616                           status	equ	0xFD8
 13617                           
 13618 ;; *************** function i2_Lcd_Set_Cursor *****************
 13619 ;; Defined at:
 13620 ;;		line 40 in file "lcd.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;  a               1    wreg     unsigned char 
 13623 ;;  b               1    3[COMRAM] unsigned char 
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;  a               1    4[COMRAM] unsigned char 
 13626 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 13627 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 13628 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 13629 ;; Return value:  Size  Location     Type
 13630 ;;		None               void
 13631 ;; Registers used:
 13632 ;;		wreg, status,2, status,0, cstack
 13633 ;; Tracked objects:
 13634 ;;		On entry : 0/0
 13635 ;;		On exit  : 0/0
 13636 ;;		Unchanged: 0/0
 13637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13638 ;;      Params:         1       0       0       0       0       0       0       0       0
 13639 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13640 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13641 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13642 ;;Total ram usage:        5 bytes
 13643 ;; Hardware stack levels used:    1
 13644 ;; Hardware stack levels required when called:    2
 13645 ;; This function calls:
 13646 ;;		i2_Lcd_Cmd
 13647 ;; This function is called by:
 13648 ;;		_TMRO_USART
 13649 ;; This function uses a non-reentrant model
 13650 ;;
 13651                           
 13652                           	psect	text64
 13653  002FC8                     __ptext64:
 13654                           	opt stack 0
 13655  002FC8                     i2_Lcd_Set_Cursor:
 13656                           	opt stack 21
 13657                           
 13658                           ;incstack = 0
 13659                           ;i2Lcd_Set_Cursor@a stored from wreg
 13660  002FC8  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 13661                           
 13662                           ;lcd.c: 41: char temp, z, y;
 13663                           ;lcd.c: 42: if (a == 1) {
 13664  002FCA  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 13665  002FCC  A4D8               	btfss	status,2,c
 13666  002FCE  D010               	goto	i2l4700
 13667                           
 13668                           ;lcd.c: 43: temp = 0x80 + b - 1;
 13669  002FD0  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13670  002FD2  0F7F               	addlw	127
 13671  002FD4  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13672                           
 13673                           ;lcd.c: 44: z = temp >> 4;
 13674  002FD6  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13675  002FD8  0B0F               	andlw	15
 13676  002FDA  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13677                           
 13678                           ;lcd.c: 45: y = temp & 0x0F;
 13679  002FDC  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13680  002FDE  0B0F               	andlw	15
 13681  002FE0  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13682                           
 13683                           ;lcd.c: 46: Lcd_Cmd(z);
 13684  002FE2  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13685  002FE4  EC3A  F01A         	call	i2_Lcd_Cmd
 13686                           
 13687                           ;lcd.c: 47: Lcd_Cmd(y);
 13688  002FE8  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13689  002FEA  EC3A  F01A         	call	i2_Lcd_Cmd
 13690                           
 13691                           ;lcd.c: 48: } else if (a == 2) {
 13692  002FEE  D013               	goto	i2l291
 13693  002FF0                     i2l4700:
 13694  002FF0  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 13695  002FF2  0A02               	xorlw	2
 13696  002FF4  A4D8               	btfss	status,2,c
 13697  002FF6  D00F               	goto	i2l291
 13698                           
 13699                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 13700  002FF8  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13701  002FFA  0FBF               	addlw	191
 13702  002FFC  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13703                           
 13704                           ;lcd.c: 50: z = temp >> 4;
 13705  002FFE  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13706  003000  0B0F               	andlw	15
 13707  003002  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13708                           
 13709                           ;lcd.c: 51: y = temp & 0x0F;
 13710  003004  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13711  003006  0B0F               	andlw	15
 13712  003008  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13713                           
 13714                           ;lcd.c: 52: Lcd_Cmd(z);
 13715  00300A  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13716  00300C  EC3A  F01A         	call	i2_Lcd_Cmd
 13717                           
 13718                           ;lcd.c: 53: Lcd_Cmd(y);
 13719  003010  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13720  003012  EC3A  F01A         	call	i2_Lcd_Cmd
 13721  003016                     i2l291:
 13722  003016  0012               	return	
 13723  003018                     __end_ofi2_Lcd_Set_Cursor:
 13724                           	opt stack 0
 13725                           pclatu	equ	0xFFB
 13726                           pclath	equ	0xFFA
 13727                           tblptru	equ	0xFF8
 13728                           tblptrh	equ	0xFF7
 13729                           tblptrl	equ	0xFF6
 13730                           tablat	equ	0xFF5
 13731                           prodh	equ	0xFF4
 13732                           prodl	equ	0xFF3
 13733                           intcon	equ	0xFF2
 13734                           intcon2	equ	0xFF1
 13735                           intcon3	equ	0xFF0
 13736                           indf0	equ	0xFEF
 13737                           postinc0	equ	0xFEE
 13738                           fsr0h	equ	0xFEA
 13739                           fsr0l	equ	0xFE9
 13740                           wreg	equ	0xFE8
 13741                           postinc1	equ	0xFE6
 13742                           postdec1	equ	0xFE5
 13743                           fsr1h	equ	0xFE2
 13744                           fsr1l	equ	0xFE1
 13745                           indf2	equ	0xFDF
 13746                           postinc2	equ	0xFDE
 13747                           postdec2	equ	0xFDD
 13748                           fsr2h	equ	0xFDA
 13749                           fsr2l	equ	0xFD9
 13750                           status	equ	0xFD8
 13751                           
 13752 ;; *************** function i2_Lcd_Clear *****************
 13753 ;; Defined at:
 13754 ;;		line 35 in file "lcd.c"
 13755 ;; Parameters:    Size  Location     Type
 13756 ;;		None
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;		None
 13759 ;; Return value:  Size  Location     Type
 13760 ;;		None               void
 13761 ;; Registers used:
 13762 ;;		wreg, status,2, cstack
 13763 ;; Tracked objects:
 13764 ;;		On entry : 0/0
 13765 ;;		On exit  : 0/0
 13766 ;;		Unchanged: 0/0
 13767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13768 ;;      Params:         0       0       0       0       0       0       0       0       0
 13769 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13770 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13771 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13772 ;;Total ram usage:        0 bytes
 13773 ;; Hardware stack levels used:    1
 13774 ;; Hardware stack levels required when called:    2
 13775 ;; This function calls:
 13776 ;;		i2_Lcd_Cmd
 13777 ;; This function is called by:
 13778 ;;		_TMRO_USART
 13779 ;; This function uses a non-reentrant model
 13780 ;;
 13781                           
 13782                           	psect	text65
 13783  003564                     __ptext65:
 13784                           	opt stack 0
 13785  003564                     i2_Lcd_Clear:
 13786                           	opt stack 21
 13787                           
 13788                           ;lcd.c: 36: Lcd_Cmd(0);
 13789                           
 13790                           ;incstack = 0
 13791  003564  0E00               	movlw	0
 13792  003566  EC3A  F01A         	call	i2_Lcd_Cmd
 13793                           
 13794                           ;lcd.c: 37: Lcd_Cmd(1);
 13795  00356A  0E01               	movlw	1
 13796  00356C  EC3A  F01A         	call	i2_Lcd_Cmd
 13797  003570  0012               	return	
 13798  003572                     __end_ofi2_Lcd_Clear:
 13799                           	opt stack 0
 13800                           pclatu	equ	0xFFB
 13801                           pclath	equ	0xFFA
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           intcon	equ	0xFF2
 13809                           intcon2	equ	0xFF1
 13810                           intcon3	equ	0xFF0
 13811                           indf0	equ	0xFEF
 13812                           postinc0	equ	0xFEE
 13813                           fsr0h	equ	0xFEA
 13814                           fsr0l	equ	0xFE9
 13815                           wreg	equ	0xFE8
 13816                           postinc1	equ	0xFE6
 13817                           postdec1	equ	0xFE5
 13818                           fsr1h	equ	0xFE2
 13819                           fsr1l	equ	0xFE1
 13820                           indf2	equ	0xFDF
 13821                           postinc2	equ	0xFDE
 13822                           postdec2	equ	0xFDD
 13823                           fsr2h	equ	0xFDA
 13824                           fsr2l	equ	0xFD9
 13825                           status	equ	0xFD8
 13826                           
 13827 ;; *************** function i2_Lcd_Cmd *****************
 13828 ;; Defined at:
 13829 ;;		line 27 in file "lcd.c"
 13830 ;; Parameters:    Size  Location     Type
 13831 ;;  a               1    wreg     unsigned char 
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  a               1    2[COMRAM] unsigned char 
 13834 ;; Return value:  Size  Location     Type
 13835 ;;		None               void
 13836 ;; Registers used:
 13837 ;;		wreg, status,2, cstack
 13838 ;; Tracked objects:
 13839 ;;		On entry : 0/0
 13840 ;;		On exit  : 0/0
 13841 ;;		Unchanged: 0/0
 13842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13843 ;;      Params:         0       0       0       0       0       0       0       0       0
 13844 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13845 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13846 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13847 ;;Total ram usage:        2 bytes
 13848 ;; Hardware stack levels used:    1
 13849 ;; Hardware stack levels required when called:    1
 13850 ;; This function calls:
 13851 ;;		i2_Lcd_Port
 13852 ;; This function is called by:
 13853 ;;		i2_Lcd_Clear
 13854 ;;		i2_Lcd_Set_Cursor
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           	psect	text66
 13859  003474                     __ptext66:
 13860                           	opt stack 0
 13861  003474                     i2_Lcd_Cmd:
 13862                           	opt stack 21
 13863                           
 13864                           ;incstack = 0
 13865                           ;i2Lcd_Cmd@a stored from wreg
 13866  003474  6E03               	movwf	i2Lcd_Cmd@a,c
 13867                           
 13868                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 13869  003476  9084               	bcf	3972,0,c	;volatile
 13870                           
 13871                           ;lcd.c: 29: Lcd_Port(a);
 13872  003478  5003               	movf	i2Lcd_Cmd@a,w,c
 13873  00347A  ECD9  F019         	call	i2_Lcd_Port
 13874                           
 13875                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 13876  00347E  8484               	bsf	3972,2,c	;volatile
 13877                           
 13878                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 13879  003480  0E06               	movlw	6
 13880  003482  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 13881  003484  0E30               	movlw	48
 13882  003486                     i2u537_47:
 13883  003486  2EE8               	decfsz	wreg,f,c
 13884  003488  D7FE               	goto	i2u537_47
 13885  00348A  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 13886  00348C  D7FC               	goto	i2u537_47
 13887  00348E  D000               	nop2	
 13888                           
 13889                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 13890  003490  9484               	bcf	3972,2,c	;volatile
 13891  003492  0012               	return	
 13892  003494                     __end_ofi2_Lcd_Cmd:
 13893                           	opt stack 0
 13894                           pclatu	equ	0xFFB
 13895                           pclath	equ	0xFFA
 13896                           tblptru	equ	0xFF8
 13897                           tblptrh	equ	0xFF7
 13898                           tblptrl	equ	0xFF6
 13899                           tablat	equ	0xFF5
 13900                           prodh	equ	0xFF4
 13901                           prodl	equ	0xFF3
 13902                           intcon	equ	0xFF2
 13903                           intcon2	equ	0xFF1
 13904                           intcon3	equ	0xFF0
 13905                           indf0	equ	0xFEF
 13906                           postinc0	equ	0xFEE
 13907                           fsr0h	equ	0xFEA
 13908                           fsr0l	equ	0xFE9
 13909                           wreg	equ	0xFE8
 13910                           postinc1	equ	0xFE6
 13911                           postdec1	equ	0xFE5
 13912                           fsr1h	equ	0xFE2
 13913                           fsr1l	equ	0xFE1
 13914                           indf2	equ	0xFDF
 13915                           postinc2	equ	0xFDE
 13916                           postdec2	equ	0xFDD
 13917                           fsr2h	equ	0xFDA
 13918                           fsr2l	equ	0xFD9
 13919                           status	equ	0xFD8
 13920                           
 13921 ;; *************** function i2_Lcd_Port *****************
 13922 ;; Defined at:
 13923 ;;		line 6 in file "lcd.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;  a               1    wreg     unsigned char 
 13926 ;; Auto vars:     Size  Location     Type
 13927 ;;  a               1    0[COMRAM] unsigned char 
 13928 ;; Return value:  Size  Location     Type
 13929 ;;		None               void
 13930 ;; Registers used:
 13931 ;;		wreg
 13932 ;; Tracked objects:
 13933 ;;		On entry : 0/0
 13934 ;;		On exit  : 0/0
 13935 ;;		Unchanged: 0/0
 13936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13937 ;;      Params:         0       0       0       0       0       0       0       0       0
 13938 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13939 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13940 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13941 ;;Total ram usage:        1 bytes
 13942 ;; Hardware stack levels used:    1
 13943 ;; This function calls:
 13944 ;;		Nothing
 13945 ;; This function is called by:
 13946 ;;		i2_Lcd_Cmd
 13947 ;;		i2_Lcd_Write_Char
 13948 ;; This function uses a non-reentrant model
 13949 ;;
 13950                           
 13951                           	psect	text67
 13952  0033B2                     __ptext67:
 13953                           	opt stack 0
 13954  0033B2                     i2_Lcd_Port:
 13955                           	opt stack 21
 13956                           
 13957                           ;incstack = 0
 13958                           ;i2Lcd_Port@a stored from wreg
 13959  0033B2  6E01               	movwf	i2Lcd_Port@a,c
 13960                           
 13961                           ;lcd.c: 7: if (a & 1)
 13962  0033B4  A001               	btfss	i2Lcd_Port@a,0,c
 13963  0033B6  D002               	goto	i2l271
 13964                           
 13965                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 13966  0033B8  8883               	bsf	3971,4,c	;volatile
 13967  0033BA  D001               	goto	i2l4052
 13968  0033BC                     i2l271:
 13969                           
 13970                           ;lcd.c: 9: else
 13971                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 13972  0033BC  9883               	bcf	3971,4,c	;volatile
 13973  0033BE                     i2l4052:
 13974                           
 13975                           ;lcd.c: 12: if (a & 2)
 13976  0033BE  A201               	btfss	i2Lcd_Port@a,1,c
 13977  0033C0  D002               	goto	i2l273
 13978                           
 13979                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 13980  0033C2  8A83               	bsf	3971,5,c	;volatile
 13981  0033C4  D001               	goto	i2l4056
 13982  0033C6                     i2l273:
 13983                           
 13984                           ;lcd.c: 14: else
 13985                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 13986  0033C6  9A83               	bcf	3971,5,c	;volatile
 13987  0033C8                     i2l4056:
 13988                           
 13989                           ;lcd.c: 17: if (a & 4)
 13990  0033C8  A401               	btfss	i2Lcd_Port@a,2,c
 13991  0033CA  D002               	goto	i2l275
 13992                           
 13993                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 13994  0033CC  8C83               	bsf	3971,6,c	;volatile
 13995  0033CE  D001               	goto	i2l4060
 13996  0033D0                     i2l275:
 13997                           
 13998                           ;lcd.c: 19: else
 13999                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 14000  0033D0  9C83               	bcf	3971,6,c	;volatile
 14001  0033D2                     i2l4060:
 14002                           
 14003                           ;lcd.c: 22: if (a & 8)
 14004  0033D2  A601               	btfss	i2Lcd_Port@a,3,c
 14005  0033D4  D002               	goto	i2l277
 14006                           
 14007                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 14008  0033D6  8E83               	bsf	3971,7,c	;volatile
 14009  0033D8  D001               	goto	i2l279
 14010  0033DA                     i2l277:
 14011                           
 14012                           ;lcd.c: 24: else
 14013                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 14014  0033DA  9E83               	bcf	3971,7,c	;volatile
 14015  0033DC                     i2l279:
 14016  0033DC  0012               	return	
 14017  0033DE                     __end_ofi2_Lcd_Port:
 14018                           	opt stack 0
 14019                           pclatu	equ	0xFFB
 14020                           pclath	equ	0xFFA
 14021                           tblptru	equ	0xFF8
 14022                           tblptrh	equ	0xFF7
 14023                           tblptrl	equ	0xFF6
 14024                           tablat	equ	0xFF5
 14025                           prodh	equ	0xFF4
 14026                           prodl	equ	0xFF3
 14027                           intcon	equ	0xFF2
 14028                           intcon2	equ	0xFF1
 14029                           intcon3	equ	0xFF0
 14030                           indf0	equ	0xFEF
 14031                           postinc0	equ	0xFEE
 14032                           fsr0h	equ	0xFEA
 14033                           fsr0l	equ	0xFE9
 14034                           wreg	equ	0xFE8
 14035                           postinc1	equ	0xFE6
 14036                           postdec1	equ	0xFE5
 14037                           fsr1h	equ	0xFE2
 14038                           fsr1l	equ	0xFE1
 14039                           indf2	equ	0xFDF
 14040                           postinc2	equ	0xFDE
 14041                           postdec2	equ	0xFDD
 14042                           fsr2h	equ	0xFDA
 14043                           fsr2l	equ	0xFD9
 14044                           status	equ	0xFD8
 14045                           
 14046 ;; *************** function _ReadUSART *****************
 14047 ;; Defined at:
 14048 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;		None
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  data            1    0[COMRAM] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  1    wreg      unsigned char 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14062 ;;      Params:         0       0       0       0       0       0       0       0       0
 14063 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14065 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14066 ;;Total ram usage:        1 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; This function calls:
 14069 ;;		Nothing
 14070 ;; This function is called by:
 14071 ;;		_TMRO_USART
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text68
 14076  003494                     __ptext68:
 14077                           	opt stack 0
 14078  003494                     _ReadUSART:
 14079                           	opt stack 23
 14080                           
 14081                           ;incstack = 0
 14082  003494  0EF2               	movlw	242
 14083  003496  1654               	andwf	_USART_Status,f,c
 14084  003498  ACAB               	btfss	4011,6,c	;volatile
 14085  00349A  D003               	goto	i2l663
 14086  00349C  9054               	bcf	_USART_Status,0,c
 14087  00349E  B0AB               	btfsc	4011,0,c	;volatile
 14088  0034A0  8054               	bsf	_USART_Status,0,c
 14089  0034A2                     i2l663:
 14090  0034A2  B4AB               	btfsc	4011,2,c	;volatile
 14091  0034A4  8454               	bsf	_USART_Status,2,c
 14092  0034A6  B2AB               	btfsc	4011,1,c	;volatile
 14093  0034A8  8654               	bsf	_USART_Status,3,c
 14094  0034AA  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 14095  0034AE  5001               	movf	ReadUSART@data,w,c
 14096  0034B0  0012               	return	
 14097  0034B2                     __end_of_ReadUSART:
 14098                           	opt stack 0
 14099                           pclatu	equ	0xFFB
 14100                           pclath	equ	0xFFA
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           intcon2	equ	0xFF1
 14109                           intcon3	equ	0xFF0
 14110                           indf0	equ	0xFEF
 14111                           postinc0	equ	0xFEE
 14112                           fsr0h	equ	0xFEA
 14113                           fsr0l	equ	0xFE9
 14114                           wreg	equ	0xFE8
 14115                           postinc1	equ	0xFE6
 14116                           postdec1	equ	0xFE5
 14117                           fsr1h	equ	0xFE2
 14118                           fsr1l	equ	0xFE1
 14119                           indf2	equ	0xFDF
 14120                           postinc2	equ	0xFDE
 14121                           postdec2	equ	0xFDD
 14122                           fsr2h	equ	0xFDA
 14123                           fsr2l	equ	0xFD9
 14124                           status	equ	0xFD8
 14125                           pclatu	equ	0xFFB
 14126                           pclath	equ	0xFFA
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           intcon2	equ	0xFF1
 14135                           intcon3	equ	0xFF0
 14136                           indf0	equ	0xFEF
 14137                           postinc0	equ	0xFEE
 14138                           fsr0h	equ	0xFEA
 14139                           fsr0l	equ	0xFE9
 14140                           wreg	equ	0xFE8
 14141                           postinc1	equ	0xFE6
 14142                           postdec1	equ	0xFE5
 14143                           fsr1h	equ	0xFE2
 14144                           fsr1l	equ	0xFE1
 14145                           indf2	equ	0xFDF
 14146                           postinc2	equ	0xFDE
 14147                           postdec2	equ	0xFDD
 14148                           fsr2h	equ	0xFDA
 14149                           fsr2l	equ	0xFD9
 14150                           status	equ	0xFD8
 14151                           
 14152                           	psect	rparam
 14153  0000                     pclatu	equ	0xFFB
 14154                           pclath	equ	0xFFA
 14155                           tblptru	equ	0xFF8
 14156                           tblptrh	equ	0xFF7
 14157                           tblptrl	equ	0xFF6
 14158                           tablat	equ	0xFF5
 14159                           prodh	equ	0xFF4
 14160                           prodl	equ	0xFF3
 14161                           intcon	equ	0xFF2
 14162                           intcon2	equ	0xFF1
 14163                           intcon3	equ	0xFF0
 14164                           indf0	equ	0xFEF
 14165                           postinc0	equ	0xFEE
 14166                           fsr0h	equ	0xFEA
 14167                           fsr0l	equ	0xFE9
 14168                           wreg	equ	0xFE8
 14169                           postinc1	equ	0xFE6
 14170                           postdec1	equ	0xFE5
 14171                           fsr1h	equ	0xFE2
 14172                           fsr1l	equ	0xFE1
 14173                           indf2	equ	0xFDF
 14174                           postinc2	equ	0xFDE
 14175                           postdec2	equ	0xFDD
 14176                           fsr2h	equ	0xFDA
 14177                           fsr2l	equ	0xFD9
 14178                           status	equ	0xFD8


Data Sizes:
    Strings     236
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      95
    BANK0           160    137     143
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1940$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_24(CODE[11]), STR_23(CODE[7]), STR_22(CODE[18]), STR_21(CODE[17]), 
		 -> STR_20(CODE[17]), STR_19(CODE[17]), Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), 
		 -> STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK1[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_PWM_DutyCycle1
    _TMRO_USART->i2_PWM_DutyCycle2
    i2_PWM_DutyCycle2->i2___fttol
    i2_PWM_DutyCycle1->i2___fttol
    i2___lbtoft->i2___ftpack
    i2___fttol->i2___ftmul
    i2___ftmul->i2___lbtoft
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Comando_Tablet
    _Lcd_Init->_Lcd_Cmd
    _Inicializa_Driveby->_BT_Init
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothString->_UART1_Init
    _putcBluetoothInt->_sprintf
    _UART1_Init->_OpenUSART
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    ___lbtoft->___ftpack
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  128507
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                         _UART1_Init
                     _clrBufferUSART
                      _motor_forward
 ---------------------------------------------------------------------------------
 (1) _motor_forward                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    4703
                                             32 BANK0      3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _PWM_init1
                          _PWM_init2
                          _Pause_seg
                     _clrBufferUSART
            _external_interrupt_init
 ---------------------------------------------------------------------------------
 (2) _external_interrupt_init                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                              3 BANK0      1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                              1 BANK0      1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    1720
                                             14 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1039
                                             10 BANK0      4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     355
                                              2 BANK0      8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      44
                                              1 BANK0      1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     350
                                              5 BANK0      2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     303
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  106134
                                            135 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     482
                                              7 BANK0      6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   43823
                                            111 BANK0     24    22      2
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     306
                                              6 BANK0      1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM2                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2070
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   44617
                                            111 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   43275
                                             63 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10248
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10050
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2207
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4524
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     574
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2181
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     572
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3521
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3246
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1060
                                              4 BANK0      6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1236
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    4241
                                             51 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
                   i2_PWM_DutyCycle1
                   i2_PWM_DutyCycle2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle2                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM2
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM2                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle1                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM1
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2___lbtoft                                           4     1      3     387
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     304
                                             27 COMRAM    15    11      4
                          i2___ftmul (ARG)
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     795
                                             12 COMRAM    15     9      6
                         i2___ftpack
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     365
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM1                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     372
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     484
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
     _external_interrupt_init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _PWM_DutyCycle1
     _SetDCPWM1
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _PWM_DutyCycle2
     _SetDCPWM2
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _UART1_Init
     _OpenUSART
   _clrBufferUSART
   _motor_forward

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port
   i2_PWM_DutyCycle1
     i2_SetDCPWM1
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack
   i2_PWM_DutyCycle2
     i2_SetDCPWM2
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     89      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16E      20        0.0%
DATA                 0      0     16E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 18 17:06:18 2017

                 ??_motor_forward 0060                                 _i 0048  
                               _j 0058           __size_of_PWM_DutyCycle1 007C  
         __size_of_PWM_DutyCycle2 007C                                l54 31BA  
                              l59 2A02                                l68 2A9E  
                   _InicioComando 0050                      ___awdiv@sign 006B  
             ___wmul@multiplicand 0070                       __CFG_BORV$3 000000  
                      i2___ftpack 27DC                        i2___lbtoft 3450  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0098                      ___ftadd@exp2 0097  
                    ___ftadd@sign 0096         __size_ofi2_Lcd_Write_Char 0038  
                             l206 1B78                               l207 1BC4  
                             l226 30D8                               l271 3326  
                             l511 0F14                               l247 3542  
                             l273 3332                               l275 333E  
                             l291 2E2A                               l611 3160  
                             l612 316C                               l277 334A  
                             l613 316E                               l279 334C  
                             l471 24F4                               l481 2558  
                             l473 250E                               l650 2B16  
                             l483 2572                               l475 251E  
                             l651 2B22                               l468 24E4  
                             l652 2B24                               l477 252E  
                             l469 2598                               l645 2AFA  
                             l558 05C4                               l654 2B4C  
                             l479 2548                               l649 2B14  
                             l963 1686                               l972 1676  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                      __CFG_BOR$OFF 000000  
                             _cad 0055                      ___awmod@sign 0065  
                             prod 000FF3                               wreg 000FE8  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                            l1004 1FC2                              l1041 1296  
                            l1105 1B02                              l1042 14A8  
                            l1115 33A4                              l1045 12D0  
                            l1125 1DA8                              l1047 12F8  
                            l1056 13E2                              l1065 140C  
                            l1081 181C                              l1090 180C  
                            l1083 1732                              l1164 224C  
                            l1084 177E                              l1174 2916  
                            l4000 2936                              l3200 12DE  
                            l1099 2330                              l4004 297C  
                            l3140 1F26                              l3132 1ED2  
                            l3222 1364                              l3206 12EE  
                            l3126 351E                              l3152 1F9C  
                            l3144 1F4C                              l3136 1EE6  
                            l3224 1378                              l3216 1330  
                            l3312 20D6                              l3146 1F78  
                            l3138 1EFA                              l3242 1436  
                            l3234 13C4                              l3226 1384  
                            l3402 27CE                              l3172 3334  
                            l3148 1F8C                              l3252 1484  
                            l3236 13D8                              l3228 1390  
                            l3324 211C                              l3340 216C  
                            l3420 2AEA                              l4036 315A  
                            l3158 1FB6                              l3326 2128  
                            l3318 20FE                              l3262 19C8  
                            l3406 30C2                              l3176 3340  
                            l3168 3328                              l3600 14E6  
                            l3344 2180                              l3336 215E  
                            l3328 212E                              l3360 25EA  
                            l3512 0B46                              l4144 29D4  
                            l3194 12A4                              l3282 1A50  
                            l3530 0DE6                              l3522 0C48  
                            l4162 2A84                              l3620 1588  
                            l3380 2654                              l3372 2632  
                            l3364 25FC                              l3356 25C8  
                            l3292 1A9A                              l3268 1A02  
                            l3428 2AFC                              l4148 2A0C  
                            l3606 1522                              l3366 2608  
                            l3286 1A6E                              l3518 0C38  
                            l4350 258C                              l4166 2AA8  
                            l3704 1D16                              l3552 16D8  
                            l3368 260E                              l3376 2640  
                            l3296 1AB8                              l3536 0EE4  
                            l4600 1B56                              l3392 2776  
                            l4186 2DF2                              l3722 1D98  
                            l3714 1D54                              l3650 1670  
                            l3642 1636                              l3546 16B0  
                            l3490 10CA                              l3802 0066  
                            l3386 272C                              l3716 1D6C  
                            l3708 1D32                              l3732 21B8  
                            l3628 15E4                              l3580 17B0  
                            l3804 00A2                              l3396 279C  
                            l3662 22A4                              l3718 1D72  
                            l3734 21D0                              l3638 161A  
                            l3590 17EE                              l4630 1C14  
                            l3672 232E                              l3744 2232  
                            l3736 21D6                              l3760 28FC  
                            l3752 289A                              l3648 1658  
                            l3592 1806                              l3584 17CC  
                            l3920 05C8                              l4640 1C5A  
                            l3666 22EA                              l3754 28B2  
                            l3498 11D6                              l3914 0594  
                            l3906 056C                              l3850 02D4  
                            l3842 0262                              l3834 01F4  
                            l3818 011C                              l3756 28B8  
                            l3932 0648                              l3908 057A  
                            l4548 1E44                              l3686 1C88  
                            l3766 2B56                              l3950 077A  
                            l3942 0752                              l3862 0368  
                            l3846 028E                              l3790 0030  
                            l4638 1C36                              l3782 2FBA  
                            l3768 2B6E                              l3944 0760  
                            l3928 05F6                              l3952 0786  
                            l4904 270C                              l3962 0800  
                            l3874 03DA                              l3858 033C  
                            l4594 1B34                              l3778 2F76  
                            l3892 0494                              l3796 0052  
                            l4588 1B12                              l3990 0954  
                            l3982 0882                              l3878 0442  
                            l3798 0060                              l3984 0896  
                            l3976 0852                              l3992 0968  
                            l3898 04BE                              l3994 098C  
                            l4874 26B0                              l4868 269E  
                            l4894 26F4                              STR_1 7FBC  
                            STR_2 7F68                              STR_3 7FDE  
                            STR_4 7FDE                              STR_5 7FB9  
                            STR_6 7F77                              STR_7 7F85  
                            STR_8 7FA1                              STR_9 7F93  
                i2_PWM_DutyCycle1 2E96                  i2_PWM_DutyCycle2 2E2C  
                 __end_of_BT_Init 24D4                              u3000 19EE  
                            u4005 07D8                              u3150 276A  
                            u3401 16C8                              u4105 306E  
                            u3180 27C0                              u3157 2760  
                            u4070 2972                              u4135 3026  
                            _PIE1 000F9D                              u4080 29B8  
                            u3601 1C78                              u3450 17D4  
                            u3187 27B6                              u4251 241C  
                            u3620 1CB4                              u3540 163E  
                            u4077 2968                              u3381 16A0  
                            u3470 14D2                              u4087 29AE  
                            u3800 016C                              u2761 1242  
                            u3625 1CAA                              u3650 1D3A  
                            u3490 150E                              u2771 1262  
                            u3475 14C6                              u5307 1E32  
                            u3805 0160                              u5317 30CA  
                            u4630 253E                              u5327 3116  
                            u3495 1502                              u5337 312A  
                            u4730 2568                              u5347 3442  
                            u2971 19B8                              u5267 2D4C  
                            u5277 2D64                              u2991 19E0  
                            u5287 2D7C                              u3785 00F6  
                            u5297 1DD2                              u4780 2582  
                            _TMR2 000FCC                 ?_Lcd_Write_String 0064  
                            _main 265E                      ___ftpack@arg 0060  
                    ___ftpack@exp 0063                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                ??_Lcd_Write_String 0066  
                   __CFG_IESO$OFF 000000                        _FinComandB 00EB  
                      _FinComandT 00EC                   __end_of_Lcd_Cmd 3450  
                    _sprintf$1953 00AF                      _sprintf$2983 00AC  
                    i2___lbtoft@c 000C                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0081                      i2___ftmul@f1 000D  
                    i2___ftmul@f2 0010                      ___ftmul@sign 0082  
                    i2___fttol@f1 001C                       ?_UART1_Init 0001  
                    ___fttol@exp1 0098                      ___fttol@lval 0094  
                      _ComanBFlag 004B           __size_of_clrBufferUSART 0044  
                   __CFG_PLLDIV$1 000000                        _ComanTFlag 004C  
               _Lcd_Write_Integer 31BC                    __CFG_CCP2MX$ON 000000  
                           ?_main 0001                   __end_of___awdiv 218A  
                 __end_of___ftadd 14AA                             STR_10 7FF6  
                           STR_11 7F58                             STR_12 7F45  
                           STR_20 7F36                             STR_13 7F56  
                           STR_21 7F47                             STR_14 7FFD  
                           STR_22 7F13                             STR_15 7F75  
                           STR_23 7FEF                             STR_16 7FE7  
                           STR_24 7FC8                             STR_17 7FD3  
                           STR_18 7FAF                             STR_19 7F25  
                 __end_of___awmod 265E                   __end_of___ftneg 33B2  
                 __end_of___lldiv 225E                   __end_of___ftmul 1B04  
                 ___awdiv@divisor 0068                   __end_of___llmod 2928  
                 __end_of___ftsub 3236                   __end_of___fttol 1DAA  
                           _T2CON 000FCA                       _RXComandoTB 0051  
                  __CFG_DEBUG$OFF 000000                ?_Lcd_Write_Integer 00CF  
                           i2l400 18B8                             i2l410 1910  
                           i2l412 193C                             i2l271 33BC  
                           i2l408 18E4                             i2l273 33C6  
                           i2l275 33D0                             i2l291 3016  
                           i2l277 33DA                             i2l279 33DC  
                           i2l663 34A2                   ___awdiv@counter 006A  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                   __CFG_USBDIV$2 000000           __size_of_Lcd_Set_Cursor 0076  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000           PWM_DutyCycle1@DutyCycle 009D  
                   __CFG_WRT3$OFF 000000                      ___lltoft@exp 0070  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
              __size_ofi2_Lcd_Cmd 0020                    __CFG_EBTRB$OFF 000000  
                     ?i2_Lcd_Port 0001                   __end_of_dpowers 7EC5  
                           _array 0114               ??_Lcd_Write_Integer 00D1  
                           _scale 099A                     ___ftpack@sign 0064  
                           tablat 000FF5           PWM_DutyCycle2@DutyCycle 009D  
                           status 000FD8                   __end_of_sprintf 099A  
                  __CFG_ICPRT$OFF 000000                        Pause_seg@i 0066  
                      Pause_seg@x 0065                __size_ofi2___ftmul 00E4  
              __size_ofi2___fttol 00D4                  i2_Lcd_Set_Cursor 2FC8  
                     ?_TMRO_USART 0001                  __end_of_Lcd_Init 2DB6  
                  WriteUSART@data 0060                  __end_of_Lcd_Port 334E  
              __size_of_PWM_init1 0026                __size_of_PWM_init2 0026  
                 __initialization 2F00                      __end_of_main 271E  
                   i2___ftmul@exp 0016         __end_of_Lcd_Write_Integer 31FA  
     __size_of_Inicializa_Driveby 0110                       ?i2___ftpack 0001  
                     ?i2___lbtoft 0009                 ?_putcBluetoothInt 00CF  
                __end_of_OpenPWM1 3510                  __end_of_OpenPWM2 3178  
                          ??_main 00E9                     ___fttol@sign1 0093  
                __end_of_Pause_ms 30EE                __size_of_Lcd_Clear 000E  
                   __activetblptr 000003                ??_putcBluetoothInt 00D1  
            __size_of__tdiv_to_l_ 0196                i2PWM_DutyCycle1@DC 0032  
              i2PWM_DutyCycle2@DC 0032                         ??_BT_Init 006E  
                ___llmod@dividend 006D                            ?_scale 0083  
                          _CCPR1L 000FBE                            _CCPR2L 000FBB  
                ___awdiv@dividend 0066                   putSTRINGU1@dato 0062  
                 putSTRINGU1@cont 0069                  __end_of___ftpack 1FC4  
                __end_of___lbtoft 3380                   putSTRINGU1@last 0068  
                 clrBufferUSART@i 0060               __size_of_UART1_Init 0016  
                __end_of___lltoft 2BCC                            i2l1004 2882  
                          i2l1105 20A6                            i2l1125 2404  
                          i2l4060 33D2                            i2l4052 33BE  
                          i2l4056 33C8                            i2l4080 2838  
                          i2l4072 27FA                            i2l4082 2856  
                          i2l4074 2804                            i2l4084 2860  
                          i2l4076 2822                            i2l4068 27EC  
                          i2l4502 23F4                            i2l4424 2004  
                          i2l4442 2046                            i2l4418 1FDE  
                          i2l4700 2FF0                            i2l4452 206E  
                          i2l4710 2CCE                            i2l4438 2036  
                          i2l4448 205E                            i2l4714 2D06  
                          i2l4466 234C                            i2l4484 23A6  
                          i2l4494 23CE                            i2l4496 23DA  
                          i2l4488 23B6                            _INTCON 000FF2  
                          i2l4498 23DE                            i2l4838 195C  
                          i2l4792 1898                            i2l4796 18AE  
              __size_of_ReadUSART 001E              i2SetDCPWM1@dutycycle 0001  
                          u481_41 1FD4                            u483_41 1FEE  
             _putcBluetoothString 29C0                            u487_41 2342  
                       ??_Lcd_Cmd 0061                            _SPBRGH 000FB0  
              __size_of_SetDCPWM1 0048                __size_of_SetDCPWM2 0048  
         __size_of_Lcd_Write_Char 0046                    __CFG_XINST$OFF 000000  
            i2SetDCPWM2@dutycycle 0001                  __end_of__powers_ 7F13  
                          _Timer1 0053                __size_of_OpenUSART 0080  
   __size_of_SendBlueToothCommand 001A                      ?i2_Lcd_Clear 0001  
                          ___ftge 225E                __size_of_Pause_seg 0064  
               __end_ofi2_Lcd_Cmd 3494                            ___wmul 32E2  
                    ?_putSTRINGU1 0062                         ??___awdiv 006A  
                       ??___ftadd 0093                    _PWM_DutyCycle1 2C48  
                  _PWM_DutyCycle2 2BCC                    __CFG_STVREN$ON 000000  
                       ??___awmod 0064                         ??___ftneg 0063  
                       ??___lldiv 0068                         ??___ftmul 007A  
                       ??___llmod 0075                         ??___ftsub 009F  
                       ??___fttol 008E               __size_ofi2_Lcd_Port 002C  
             i2Lcd_Write_String@a 0005               i2Lcd_Write_String@i 0009  
        ?_external_interrupt_init 0001                            _packet 005D  
                          _lenght 0059                            _fround 0F16  
                          clear_0 2F06                            clear_1 2F20  
                ___awdiv@quotient 006C              ?_putcBluetoothString 0067  
                 ___awmod@divisor 0062                    sprintf@vd_1955 00B7  
                 ___awmod@counter 0064                  i2_Lcd_Write_Char 32AA  
           ___ftmul@f3_as_product 007E                      __pdataCOMRAM 005E  
               __end_ofi2___ftmul 20A8                 __end_ofi2___fttol 2406  
                    __mediumconst 7E9C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
             __size_of_TMRO_USART 1998                      ?i2_SetDCPWM1 0001  
                    ?i2_SetDCPWM2 0001                 __end_of_PWM_init1 342A  
               __end_of_PWM_init2 3404                  __end_of_putcTxU1 3548  
                       ??_sprintf 00A6           __size_of_Comando_Tablet 015C  
               i2SetDCPWM1@DCycle 0005                   Lcd_Set_Cursor@a 0064  
                 Lcd_Set_Cursor@b 0063                   Lcd_Set_Cursor@y 0066  
                 Lcd_Set_Cursor@z 0065                 i2SetDCPWM2@DCycle 0005  
                      __accesstop 0060           __end_of__initialization 2F5E  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 008D  
                      ___ftadd@f2 0090               __size_ofi2___ftpack 00A8  
             __size_ofi2___lbtoft 0024                        ___ftge@ff1 0060  
                      ___ftge@ff2 0063      PWM_DutyCycle2@percentageDuty 009F  
               __end_of_Lcd_Clear 3564                        ___ftneg@f1 0060  
                  i2___ftpack@arg 0001                    i2___ftpack@exp 0004  
                      ___lbtoft@c 006B            __end_of_PWM_DutyCycle1 2CC4  
          __end_of_PWM_DutyCycle2 2C48                        ___ftmul@f1 0074  
                      ___ftmul@f2 0077                        ___ftsub@f1 0099  
                      ___ftsub@f2 009C                        ___fttol@f1 008A  
                      _WriteUSART 3510                    __pcstackCOMRAM 0001  
                    __pidataBANK1 3524        __size_of_Lcd_Write_Integer 003E  
                      ___lltoft@c 0068                    _clrBufferUSART 3178  
                  i2___ftmul@cntr 001A                     __end_of_scale 0F16  
                  i2___ftmul@sign 001B          __end_ofi2_PWM_DutyCycle1 2F00  
        __end_ofi2_PWM_DutyCycle2 2E96             ??_putcBluetoothString 0069  
     __size_ofi2_Lcd_Write_String 007A                 __end_of_ReadUSART 34B2  
                  i2___fttol@exp1 002A                    i2___fttol@lval 0026  
               __end_of_SetDCPWM1 30A8                 __end_of_SetDCPWM2 3060  
               i2Lcd_Write_Char@a 0004                 i2Lcd_Write_Char@y 0003  
                  _Lcd_Set_Cursor 2DB6                        __div_to_l_ 14AA  
                       ?_Lcd_Init 0001                     ReadUSART@data 0001  
            putcBluetoothString@a 0067              putcBluetoothString@i 006B  
                       ?_Lcd_Port 0001                 __end_of_OpenUSART 2B4E  
                   UART1_Init@bdr 0066                   __div_to_l_@exp1 006F  
                 __div_to_l_@cntr 006E                      sprintf@integ 00BF  
               __end_of_Pause_seg 2FC8                           ??_scale 0086  
                 __div_to_l_@quot 006A              i2Lcd_Write_Char@temp 0002  
                      __pbssBANK0 00E9                        __pbssBANK1 0100  
                       ?_OpenPWM1 0001                         ?_OpenPWM2 0001  
                   __div_to_l_@f1 0060                     __div_to_l_@f2 0063  
                       ?_Pause_ms 0060            __end_of_clrBufferUSART 31BC  
                 ?_PWM_DutyCycle1 0001                   ?_PWM_DutyCycle2 0001  
                         ?___ftge 0060                      ??_UART1_Init 0066  
                         ?___wmul 006E               Inicializa_Driveby@i 0081  
          __size_of_getCNY70Value 00C6                           _CCP1CON 000FBD  
                         _CCP2CON 000FBA             __end_of_motor_forward 3556  
            i2Lcd_Set_Cursor@temp 0008       SendBlueToothCommand@command 006A  
                         ?_fround 0083         __size_of_Lcd_Write_String 0098  
                       ?___ftpack 0060                         ?___lbtoft 0068  
          __end_of_Lcd_Set_Cursor 2E2C                         ?___lltoft 0068  
                putSTRINGU1@total 0064          __end_ofi2_Lcd_Set_Cursor 3018  
                         _BT_Init 2406                           _SBUSART 0052  
                      ??_Lcd_Init 0063                      ??i2_Lcd_Port 0001  
                      ??_Lcd_Port 0060                __end_of_UART1_Init 34FC  
                 __CFG_VREGEN$OFF 000000                    _Lcd_Write_Char 30EE  
                         _Lcd_Cmd 342A                           _Comando 004D  
                         _Med_lsb 0042                           _Med_msb 0044  
                      ??_OpenPWM1 0060                        ??_OpenPWM2 0060  
                      ??_Pause_ms 0062                      ??_TMRO_USART 0034  
               __end_of__npowers_ 7EEC                           __Hparam 0000  
                      _scale$2982 0086                           __Lparam 0000  
                 ?_clrBufferUSART 0001                       ?_WriteUSART 0001  
                 __size_of___ftge 00D4                           ___awdiv 20A8  
                         ___ftadd 122A                           ___awmod 259A  
                       ?_putcTxU1 0001                           ___ftneg 3380  
                         ___lldiv 218A                   __size_of___wmul 0036  
                         ___ftmul 19A0                           ___llmod 2884  
                         ___ftsub 31FA                           ___fttol 1C60  
              __end_ofi2_Lcd_Port 33DE              __size_ofi2_Lcd_Clear 000E  
                         __pcinit 2F00                      ??i2___ftpack 0006  
                    ??i2___lbtoft 000C                        ??___ftpack 0065  
                      ??___lbtoft 006B              __size_of_putSTRINGU1 00BE  
                 __size_of_fround 0314                      BT_Init@F5675 016E  
         i2___ftmul@f3_as_product 0017                           __ramtop 0800  
                 ?_Lcd_Set_Cursor 0063                        ??___lltoft 006C  
                         __ptext0 265E                           __ptext1 3548  
                         __ptext2 2D3E                           __ptext3 1DAA  
                         __ptext4 34B2                           __ptext5 33DE  
                         __ptext6 3134                           __ptext7 3404  
                         __ptext8 34FC                           __ptext9 2406  
  i2PWM_DutyCycle1@percentageDuty 0031                           _comando 015A  
                     ?__div_to_l_ 0060                           _countup 005E  
                         _dpowers 7E9D                         _T2CONbits 000FCA  
                ___awmod@dividend 0060                __end_of_TMRO_USART 19A0  
                  _Comando_Tablet 1B04                           _sprintf 001C  
                   _getCNY70Value 24D4            __end_of_Lcd_Write_Char 3134  
                  __pintcode_body 181E              __size_ofi2_SetDCPWM1 003A  
            __size_ofi2_SetDCPWM2 003A              end_of_initialization 2F5E  
                     _TramaTablet 0100         __size_of_putcBluetoothInt 0086  
                         int_func 181E          __end_ofi2_Lcd_Write_Char 32E2  
              __end_ofi2___ftpack 2884                __end_ofi2___lbtoft 3474  
                 ___lldiv@divisor 0064         i2PWM_DutyCycle1@DutyCycle 002F  
                 ___lldiv@counter 006C                         _RCSTAbits 000FAB  
      __end_of_Inicializa_Driveby 1EBA                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                       Lcd_Port@a 0060                        ??_putcTxU1 0061  
                      _num_med_hi 005A                    __tdiv_to_l_@f1 0060  
                  __tdiv_to_l_@f2 0063         i2PWM_DutyCycle2@DutyCycle 002F  
                   ??__tdiv_to_l_ 0066                         i2_Lcd_Cmd 3474  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _PORTEbits 000F84            __end_of_Comando_Tablet 1C60  
    __end_of_SendBlueToothCommand 34E6                         _TRISBbits 000F93  
                       _TRISCbits 000F94                    ?_getCNY70Value 0060  
             __size_of_WriteUSART 0014  __size_of_external_interrupt_init 001A  
                       i2___ftmul 1FC4                         i2___fttol 2332  
                 ?_Lcd_Write_Char 0001                 Lcd_Write_String@a 0064  
               Lcd_Write_String@i 0068                         _PWM_init1 3404  
                       _PWM_init2 33DE                         _TXSTAbits 000FAC  
                 i2___ftpack@sign 0005               __size_of__div_to_l_ 01DE  
                     ___ftmul@exp 007D                         _Lcd_Clear 3556  
                  __end_of___ftge 2332                    __end_of___wmul 3318  
                _Lcd_Write_String 2928                 ?i2_PWM_DutyCycle1 0001  
               ?i2_PWM_DutyCycle2 0001                     __pidataCOMRAM 3572  
                      ?i2_Lcd_Cmd 0001                    __end_of_fround 122A  
              ??i2_PWM_DutyCycle1 002B                ??i2_PWM_DutyCycle2 002B  
             start_initialization 2F00                         Pause_ms@i 0063  
                       Pause_ms@x 0060                   ?_Comando_Tablet 0001  
                       _ReadUSART 3494                         _SetDCPWM1 3060  
                       _SetDCPWM2 3018                   SetDCPWM1@DCycle 0064  
             __end_of__tdiv_to_l_ 181E                   SetDCPWM2@DCycle 0064  
                 i2___fttol@sign1 0025                         _DutyCycle 00E9  
                      ?i2___ftmul 000D                        ?i2___fttol 001C  
               __size_of_Lcd_Init 0078                 __size_of_Lcd_Port 0036  
                      ?_PWM_init1 0001                        ?_PWM_init2 0001  
            Comando_Tablet@sensed 00E7                         _OpenUSART 2ACE  
                ??_PWM_DutyCycle1 0099                  ??_PWM_DutyCycle2 0099  
                       _Pause_seg 2F64                   ___llmod@divisor 0071  
                 ___llmod@counter 0075       __end_of_putcBluetoothString 2A48  
               __size_of_OpenPWM1 0014                 __size_of_OpenPWM2 0044  
               __size_of_Pause_ms 0046                        ?_Lcd_Clear 0001  
                        ??___ftge 0066        __end_ofi2_Lcd_Write_String 2D3E  
                        ??___wmul 0072                       __pdataBANK1 016E  
                __CFG_LPT1OSC$OFF 000000                   Lcd_Write_Char@a 0063  
                 Lcd_Write_Char@y 0062                          ??_fround 0086  
                  _num_med_medium 005C                        fround@prec 008C  
               __size_of___ftpack 010A                 __size_of___lbtoft 0032  
               __size_of___lltoft 007E                       __pbssCOMRAM 0042  
                 ??_getCNY70Value 0062                        ?_ReadUSART 0001  
                        ?_BT_Init 0001                     __pcstackBANK0 0060  
               ?i2_Lcd_Set_Cursor 0004                        ?_SetDCPWM1 0060  
                      ?_SetDCPWM2 0060               __end_of__stringdata 7FFF  
              ??i2_Lcd_Set_Cursor 0005                  _putcBluetoothInt 2A48  
                      ?_OpenUSART 0060                          ?_Lcd_Cmd 0001  
                     sprintf@_val 00C4                       sprintf@flag 00BD  
                ??_clrBufferUSART 0060                        ?_Pause_seg 0001  
                     sprintf@fval 00CB                       sprintf@prec 00C2  
                       _cleanBfer 00ED                      ??_WriteUSART 0060  
                ??_Lcd_Set_Cursor 0064              _SendBlueToothCommand 34CC  
                       __pintcode 0008                     __pmediumconst 7E9C  
                        ?___awdiv 0066                          ?___ftadd 008D  
                        ?___awmod 0060                          ?___ftneg 0060  
                        ?___lldiv 0060                          ?___ftmul 0074  
                        ?___llmod 006D                          ?___ftsub 0099  
                       __npowers_ 7EC5                          ?___fttol 008A  
               putcTxU1@character 0061                       ??i2_Lcd_Cmd 0002  
               __size_of_putcTxU1 0012                       __tdiv_to_l_ 1688  
                       _contador2 0057                      ??__div_to_l_ 0066  
       SendBlueToothCommand@total 006C           _external_interrupt_init 34B2  
                    _TamanhoTrama 0046                          ?_sprintf 009F  
                     ??i2___ftmul 0013                    __size_of_scale 057C  
                     ??i2___fttol 0020                __end_of_WriteUSART 3524  
                     ??_PWM_init1 0061                       ??_PWM_init2 0063  
    PWM_DutyCycle1@percentageDuty 009F            __size_of_motor_forward 000E  
                   _ComandoTablet 004E                    ___wmul@product 0072  
               ?i2_Lcd_Write_Char 0001                          _PIE1bits 000F9D  
                        Lcd_Cmd@a 0062                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 1688                          i2u506_40 2CFE  
                        i2u506_47 2CF4                          i2u507_40 2D36  
                        i2u507_47 2D2C                          i2u518_40 18B4  
              ??i2_Lcd_Write_Char 0002                          i2u535_47 32C6  
                        i2u480_45 3240                          i2u536_47 32D8  
                        i2u537_47 3486                          i2u484_40 1FF6  
                        i2u492_40 23BC             ?_SendBlueToothCommand 006A  
                        i2u479_45 327A                          i2u489_40 236A  
                        i2u489_45 2362                     ??i2_Lcd_Clear 0004  
                     ??_Lcd_Clear 0063                  __CFG_WDTPS$32768 000000  
                   ??_putSTRINGU1 0066                        _ADCON1bits 000FC1  
                     __stringdata 7F13                 ___wmul@multiplier 006E  
                        _CheckSum 004A                  ??_Lcd_Write_Char 0061  
                     ??_ReadUSART 0001                _Inicializa_Driveby 1DAA  
                   ??i2_SetDCPWM1 0003                     ??i2_SetDCPWM2 0003  
                     ??_SetDCPWM1 0062                       ??_SetDCPWM2 0062  
                __size_of_BT_Init 00CE                          _Lcd_Init 2D3E  
                        _Lcd_Port 3318                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 2F3A  
                        _EntTrama 004F               ?_Inicializa_Driveby 0001  
                   _BluetoothDato 0128          __end_of_Lcd_Write_String 29C0  
                     ??_OpenUSART 0062                SetDCPWM1@dutycycle 0060  
                     ??_Pause_seg 0065                   OpenUSART@config 0065  
                __size_of_Lcd_Cmd 0026                      _Timer2Config 00EE  
                        _OpenPWM1 34FC                          _OpenPWM2 3134  
                        _Pause_ms 30A8                          __Hrparam 0000  
                        __Lrparam 0000                SetDCPWM2@dutycycle 0060  
                __size_of___awdiv 00E2                  __size_of___ftadd 0280  
                __size_of___awmod 00C4              ??_Inicializa_Driveby 0080  
                PWM_DutyCycle1@DC 00A0                  PWM_DutyCycle2@DC 00A0  
                __size_of___ftneg 0032                  __size_of___lldiv 00D4  
                __size_of___ftmul 0164                  __size_of___llmod 00A4  
                __size_of___ftsub 003C                  __size_of___fttol 014A  
                ??_Comando_Tablet 00E7                     _motor_forward 3548  
                        ___ftpack 1EBA                          ___lbtoft 334E  
                     _fround$2980 0089                       _fround$2981 0086  
                        ___lltoft 2B4E               __end_ofi2_Lcd_Clear 3572  
                  OpenPWM2@ccp2mx 0062             __CFG_FOSC$INTOSCIO_EC 000000  
             __end_of_putSTRINGU1 27DC         ??_external_interrupt_init 0060  
                      sprintf@exp 00C9                    OpenPWM1@period 0060  
                  OpenPWM2@period 0061                          __ptext10 34CC  
                        __ptext11 271E                          __ptext20 2ACE  
                        __ptext12 3536                          __ptext21 24D4  
                        __ptext13 2F64                          __ptext30 099A  
                        __ptext22 3178                          __ptext14 30A8  
                        __ptext31 0F16                          __ptext23 2BCC  
                        __ptext15 1B04                          __ptext40 218A  
                        __ptext32 32E2                          __ptext24 3018  
                        __ptext16 29C0                          __ptext41 1C60  
                        __ptext33 19A0                          __ptext25 2C48  
                        __ptext17 2A48                          __ptext50 3556  
                        __ptext42 31FA                          __ptext34 259A  
                        __ptext26 334E                          __ptext18 3510  
                        __ptext51 342A                          __ptext43 122A  
                        __ptext35 20A8                          __ptext27 3060  
                        __ptext19 34E6                          __ptext60 27DC  
                        __ptext52 3318                          __ptext44 1EBA  
                        __ptext36 1688                          __ptext28 31BC  
                        __ptext61 3270                          __ptext45 3380  
                        __ptext37 14AA                          __ptext29 001C  
                        __ptext62 2CC4                          __ptext54 2E2C  
                        __ptext46 225E                          __ptext38 2B4E  
                        __ptext63 32AA                          __ptext55 3236  
                        __ptext47 2928                          __ptext39 2884  
                        __ptext64 2FC8                          __ptext56 2E96  
                        __ptext48 30EE                          __ptext65 3564  
                        __ptext57 3450                          __ptext49 2DB6  
                        __ptext66 3474                          __ptext58 2332  
                        __ptext67 33B2                          __ptext59 1FC4  
                        __ptext68 3494                          __powers_ 7EEC  
                 PWM_init1@period 0061                   PWM_init2@period 0063  
                        _contador 0056         __size_ofi2_PWM_DutyCycle1 006A  
       __size_ofi2_PWM_DutyCycle2 006A                  __size_of_sprintf 097E  
             __end_ofi2_SetDCPWM1 32AA               __end_ofi2_SetDCPWM2 3270  
                   __size_of_main 00C0            ??_SendBlueToothCommand 006E  
                        _putcTxU1 3536                       i2Lcd_Port@a 0001  
                   BT_Init@nameBT 006E                    ?_motor_forward 0001  
        __end_of_putcBluetoothInt 2ACE             __CFG_CPUDIV$OSC1_PLL2 000000  
                      _INTCONbits 000FF2                i2_Lcd_Write_String 2CC4  
                  OpenUSART@spbrg 0060                          scale@scl 0089  
               putcBluetoothInt@a 00CF                 putcBluetoothInt@i 00E5  
               putcBluetoothInt@s 00D1                Lcd_Write_Char@temp 0061  
                        intlevel2 0000                         sprintf@ap 00BB  
                __tdiv_to_l_@exp1 006E                         sprintf@vd 00B3  
                       sprintf@sp 009F                  __tdiv_to_l_@cntr 006D  
             ?i2_Lcd_Write_String 0005                  __tdiv_to_l_@quot 0069  
               i2Lcd_Set_Cursor@a 0005                 i2Lcd_Set_Cursor@b 0004  
               i2Lcd_Set_Cursor@y 0007                 i2Lcd_Set_Cursor@z 0006  
                ___lldiv@dividend 0060   __end_of_external_interrupt_init 34CC  
       __size_ofi2_Lcd_Set_Cursor 0050                        _OSCCONbits 000FD3  
                      i2Lcd_Cmd@a 0003                       i2_Lcd_Clear 3564  
                      _UART1_Init 34E6                       _putSTRINGU1 271E  
            ??i2_Lcd_Write_String 0007                Lcd_Set_Cursor@temp 0067  
    __size_of_putcBluetoothString 0088                      ?__tdiv_to_l_ 0060  
                     _num_med_low 005B                          sprintf@c 00CE  
                        sprintf@f 00A1                  ___lldiv@quotient 0068  
  i2PWM_DutyCycle2@percentageDuty 0031                       i2_SetDCPWM1 3270  
                     i2_SetDCPWM2 3236                Lcd_Write_Integer@a 00CF  
              Lcd_Write_Integer@s 00D1             __end_of_getCNY70Value 259A  
                      i2_Lcd_Port 33B2                      _USART_Status 0054  
                      _TMRO_USART 0008  
