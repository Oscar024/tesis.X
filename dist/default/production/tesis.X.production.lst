

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jun 26 16:48:54 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           	psect	idataBANK0
    78  002886                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for BT_Init@F5671
    82  002886  41                 	db	65
    83  002887  54                 	db	84
    84  002888  2B                 	db	43
    85  002889  4E                 	db	78
    86  00288A  41                 	db	65
    87  00288B  4D                 	db	77
    88  00288C  45                 	db	69
    89  00288D  3D                 	db	61
    90  00288E  72                 	db	114
    91  00288F  6F                 	db	111
    92  002890  62                 	db	98
    93  002891  6F                 	db	111
    94  002892  74                 	db	116
    95  002893  0D                 	db	13
    96  002894  0A                 	db	10
    97  002895  00                 	db	0
    98  002896  00                 	db	0
    99  002897  00                 	db	0
   100                           
   101                           ;initializer for _countup
   102  002898  0001               	dw	1
   103                           
   104                           	psect	mediumconst
   105  007ECA                     __pmediumconst:
   106                           	opt stack 0
   107  007ECA  00                 	db	0
   108  007ECB                     _dpowers:
   109                           	opt stack 0
   110  007ECB  0001               	dw	1
   111  007ECD  0000               	dw	0
   112  007ECF  000A               	dw	10
   113  007ED1  0000               	dw	0
   114  007ED3  0064               	dw	100
   115  007ED5  0000               	dw	0
   116  007ED7  03E8               	dw	1000
   117  007ED9  0000               	dw	0
   118  007EDB  2710               	dw	10000
   119  007EDD  0000               	dw	0
   120  007EDF  86A0               	dw	34464
   121  007EE1  0001               	dw	1
   122  007EE3  4240               	dw	16960
   123  007EE5  000F               	dw	15
   124  007EE7  9680               	dw	38528
   125  007EE9  0098               	dw	152
   126  007EEB  E100               	dw	57600
   127  007EED  05F5               	dw	1525
   128  007EEF  CA00               	dw	51712
   129  007EF1  3B9A               	dw	15258
   130  007EF3                     __end_of_dpowers:
   131                           	opt stack 0
   132  007EF3                     __npowers_:
   133                           	opt stack 0
   134  007EF3  00                 	db	0
   135  007EF4  80                 	db	128
   136  007EF5  3F                 	db	63
   137  007EF6  CD                 	db	205
   138  007EF7  CC                 	db	204
   139  007EF8  3D                 	db	61
   140  007EF9  D7                 	db	215
   141  007EFA  23                 	db	35
   142  007EFB  3C                 	db	60
   143  007EFC  12                 	db	18
   144  007EFD  83                 	db	131
   145  007EFE  3A                 	db	58
   146  007EFF  B7                 	db	183
   147  007F00  D1                 	db	209
   148  007F01  38                 	db	56
   149  007F02  C6                 	db	198
   150  007F03  27                 	db	39
   151  007F04  37                 	db	55
   152  007F05  38                 	db	56
   153  007F06  86                 	db	134
   154  007F07  35                 	db	53
   155  007F08  C0                 	db	192
   156  007F09  D6                 	db	214
   157  007F0A  33                 	db	51
   158  007F0B  CC                 	db	204
   159  007F0C  2B                 	db	43
   160  007F0D  32                 	db	50
   161  007F0E  70                 	db	112
   162  007F0F  89                 	db	137
   163  007F10  30                 	db	48
   164  007F11  E7                 	db	231
   165  007F12  DB                 	db	219
   166  007F13  2E                 	db	46
   167  007F14  E5                 	db	229
   168  007F15  3C                 	db	60
   169  007F16  1E                 	db	30
   170  007F17  42                 	db	66
   171  007F18  A2                 	db	162
   172  007F19  0D                 	db	13
   173  007F1A                     __end_of__npowers_:
   174                           	opt stack 0
   175  007F1A                     __powers_:
   176                           	opt stack 0
   177  007F1A  00                 	db	0
   178  007F1B  80                 	db	128
   179  007F1C  3F                 	db	63
   180  007F1D  00                 	db	0
   181  007F1E  20                 	db	32
   182  007F1F  41                 	db	65
   183  007F20  00                 	db	0
   184  007F21  C8                 	db	200
   185  007F22  42                 	db	66
   186  007F23  00                 	db	0
   187  007F24  7A                 	db	122
   188  007F25  44                 	db	68
   189  007F26  40                 	db	64
   190  007F27  1C                 	db	28
   191  007F28  46                 	db	70
   192  007F29  50                 	db	80
   193  007F2A  C3                 	db	195
   194  007F2B  47                 	db	71
   195  007F2C  24                 	db	36
   196  007F2D  74                 	db	116
   197  007F2E  49                 	db	73
   198  007F2F  97                 	db	151
   199  007F30  18                 	db	24
   200  007F31  4B                 	db	75
   201  007F32  BC                 	db	188
   202  007F33  BE                 	db	190
   203  007F34  4C                 	db	76
   204  007F35  6B                 	db	107
   205  007F36  6E                 	db	110
   206  007F37  4E                 	db	78
   207  007F38  03                 	db	3
   208  007F39  15                 	db	21
   209  007F3A  50                 	db	80
   210  007F3B  79                 	db	121
   211  007F3C  AD                 	db	173
   212  007F3D  60                 	db	96
   213  007F3E  F3                 	db	243
   214  007F3F  49                 	db	73
   215  007F40  71                 	db	113
   216  007F41                     __end_of__powers_:
   217                           	opt stack 0
   218  0000                     _ADCON1bits	set	4033
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCP2CON	set	4026
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CCPR2L	set	4027
   223  0000                     _INTCON	set	4082
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _PIE1	set	3997
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PORTA	set	3968
   229  0000                     _PORTAbits	set	3968
   230  0000                     _PORTB	set	3969
   231  0000                     _PORTDbits	set	3971
   232  0000                     _PORTE	set	3972
   233  0000                     _PORTEbits	set	3972
   234  0000                     _PR2	set	4043
   235  0000                     _RCREG	set	4014
   236  0000                     _RCSTA	set	4011
   237  0000                     _RCSTAbits	set	4011
   238  0000                     _SPBRG	set	4015
   239  0000                     _SPBRGH	set	4016
   240  0000                     _T2CON	set	4042
   241  0000                     _T2CONbits	set	4042
   242  0000                     _TMR2	set	4044
   243  0000                     _TRISA	set	3986
   244  0000                     _TRISB	set	3987
   245  0000                     _TRISBbits	set	3987
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISCbits	set	3988
   248  0000                     _TRISD	set	3989
   249  0000                     _TRISE	set	3990
   250  0000                     _TXREG	set	4013
   251  0000                     _TXSTA	set	4012
   252  0000                     _TXSTAbits	set	4012
   253  007F41                     __stringdata:
   254                           	opt stack 0
   255  007F41                     STR_20:
   256  007F41  49                 	db	73	;'I'
   257  007F42  6E                 	db	110	;'n'
   258  007F43  74                 	db	116	;'t'
   259  007F44  65                 	db	101	;'e'
   260  007F45  72                 	db	114	;'r'
   261  007F46  72                 	db	114	;'r'
   262  007F47  75                 	db	117	;'u'
   263  007F48  70                 	db	112	;'p'
   264  007F49  74                 	db	116	;'t'
   265  007F4A  69                 	db	105	;'i'
   266  007F4B  6F                 	db	111	;'o'
   267  007F4C  6E                 	db	110	;'n'
   268  007F4D  20                 	db	32
   269  007F4E  54                 	db	84	;'T'
   270  007F4F  4D                 	db	77	;'M'
   271  007F50  52                 	db	82	;'R'
   272  007F51  32                 	db	50	;'2'
   273  007F52  00                 	db	0
   274  007F53                     STR_11:
   275  007F53  42                 	db	66	;'B'
   276  007F54  54                 	db	84	;'T'
   277  007F55  20                 	db	32
   278  007F56  49                 	db	73	;'I'
   279  007F57  4E                 	db	78	;'N'
   280  007F58  49                 	db	73	;'I'
   281  007F59  43                 	db	67	;'C'
   282  007F5A  49                 	db	73	;'I'
   283  007F5B  41                 	db	65	;'A'
   284  007F5C  4C                 	db	76	;'L'
   285  007F5D  49                 	db	73	;'I'
   286  007F5E  5A                 	db	90	;'Z'
   287  007F5F  41                 	db	65	;'A'
   288  007F60  44                 	db	68	;'D'
   289  007F61  4F                 	db	79	;'O'
   290  007F62  00                 	db	0
   291  007F63                     STR_2:
   292  007F63  41                 	db	65	;'A'
   293  007F64  54                 	db	84	;'T'
   294  007F65  2B                 	db	43
   295  007F66  50                 	db	80	;'P'
   296  007F67  53                 	db	83	;'S'
   297  007F68  57                 	db	87	;'W'
   298  007F69  44                 	db	68	;'D'
   299  007F6A  3D                 	db	61	;'='
   300  007F6B  30                 	db	48	;'0'
   301  007F6C  30                 	db	48	;'0'
   302  007F6D  30                 	db	48	;'0'
   303  007F6E  30                 	db	48	;'0'
   304  007F6F  0D                 	db	13
   305  007F70  0A                 	db	10
   306  007F71  00                 	db	0
   307  007F72  0A                 	db	10
   308  007F73  2B                 	db	43
   309  007F74  42                 	db	66	;'B'
   310  007F75  54                 	db	84	;'T'
   311  007F76  53                 	db	83	;'S'
   312  007F77  54                 	db	84	;'T'
   313  007F78  41                 	db	65	;'A'
   314  007F79  54                 	db	84	;'T'
   315  007F7A  45                 	db	69	;'E'
   316  007F7B  3A                 	db	58	;':'
   317  007F7C  31                 	db	49	;'1'
   318  007F7D  0D                 	db	13
   319  007F7E  0A                 	db	10
   320  007F7F  00                 	db	0
   321  007F80  0A                 	db	10
   322  007F81  2B                 	db	43
   323  007F82  42                 	db	66	;'B'
   324  007F83  54                 	db	84	;'T'
   325  007F84  53                 	db	83	;'S'
   326  007F85  54                 	db	84	;'T'
   327  007F86  41                 	db	65	;'A'
   328  007F87  54                 	db	84	;'T'
   329  007F88  45                 	db	69	;'E'
   330  007F89  3A                 	db	58	;':'
   331  007F8A  33                 	db	51	;'3'
   332  007F8B  0D                 	db	13
   333  007F8C  0A                 	db	10
   334  007F8D  00                 	db	0
   335  007F8E  0A                 	db	10
   336  007F8F  2B                 	db	43
   337  007F90  42                 	db	66	;'B'
   338  007F91  54                 	db	84	;'T'
   339  007F92  53                 	db	83	;'S'
   340  007F93  54                 	db	84	;'T'
   341  007F94  41                 	db	65	;'A'
   342  007F95  54                 	db	84	;'T'
   343  007F96  45                 	db	69	;'E'
   344  007F97  3A                 	db	58	;':'
   345  007F98  34                 	db	52	;'4'
   346  007F99  0D                 	db	13
   347  007F9A  0A                 	db	10
   348  007F9B  00                 	db	0
   349  007F9C  0A                 	db	10
   350  007F9D  43                 	db	67	;'C'
   351  007F9E  4F                 	db	79	;'O'
   352  007F9F  4E                 	db	78	;'N'
   353  007FA0  4E                 	db	78	;'N'
   354  007FA1  45                 	db	69	;'E'
   355  007FA2  43                 	db	67	;'C'
   356  007FA3  54                 	db	84	;'T'
   357  007FA4  3A                 	db	58	;':'
   358  007FA5  4F                 	db	79	;'O'
   359  007FA6  4B                 	db	75	;'K'
   360  007FA7  0D                 	db	13
   361  007FA8  0A                 	db	10
   362  007FA9  00                 	db	0
   363  007FAA                     STR_19:
   364  007FAA  49                 	db	73	;'I'
   365  007FAB  6E                 	db	110	;'n'
   366  007FAC  74                 	db	116	;'t'
   367  007FAD  65                 	db	101	;'e'
   368  007FAE  67                 	db	103	;'g'
   369  007FAF  65                 	db	101	;'e'
   370  007FB0  72                 	db	114	;'r'
   371  007FB1  20                 	db	32
   372  007FB2  3D                 	db	61	;'='
   373  007FB3  20                 	db	32
   374  007FB4  25                 	db	37
   375  007FB5  64                 	db	100	;'d'
   376  007FB6  00                 	db	0
   377  007FB7                     STR_1:
   378  007FB7  41                 	db	65	;'A'
   379  007FB8  54                 	db	84	;'T'
   380  007FB9  2B                 	db	43
   381  007FBA  52                 	db	82	;'R'
   382  007FBB  4F                 	db	79	;'O'
   383  007FBC  4C                 	db	76	;'L'
   384  007FBD  45                 	db	69	;'E'
   385  007FBE  3D                 	db	61	;'='
   386  007FBF  30                 	db	48	;'0'
   387  007FC0  0D                 	db	13
   388  007FC1  0A                 	db	10
   389  007FC2  00                 	db	0
   390  007FC3                     STR_22:
   391  007FC3  43                 	db	67	;'C'
   392  007FC4  4D                 	db	77	;'M'
   393  007FC5  44                 	db	68	;'D'
   394  007FC6  20                 	db	32
   395  007FC7  54                 	db	84	;'T'
   396  007FC8  41                 	db	65	;'A'
   397  007FC9  42                 	db	66	;'B'
   398  007FCA  4C                 	db	76	;'L'
   399  007FCB  45                 	db	69	;'E'
   400  007FCC  54                 	db	84	;'T'
   401  007FCD  00                 	db	0
   402  007FCE  46                 	db	70	;'F'
   403  007FCF  6C                 	db	108	;'l'
   404  007FD0  6F                 	db	111	;'o'
   405  007FD1  61                 	db	97	;'a'
   406  007FD2  74                 	db	116	;'t'
   407  007FD3  20                 	db	32
   408  007FD4  3D                 	db	61	;'='
   409  007FD5  20                 	db	32
   410  007FD6  25                 	db	37
   411  007FD7  66                 	db	102	;'f'
   412  007FD8  00                 	db	0
   413  007FD9                     STR_3:
   414  007FD9  41                 	db	65	;'A'
   415  007FDA  54                 	db	84	;'T'
   416  007FDB  2B                 	db	43
   417  007FDC  49                 	db	73	;'I'
   418  007FDD  4E                 	db	78	;'N'
   419  007FDE  51                 	db	81	;'Q'
   420  007FDF  0D                 	db	13
   421  007FE0  0A                 	db	10
   422  007FE1  00                 	db	0
   423  007FE2                     STR_17:
   424  007FE2  44                 	db	68	;'D'
   425  007FE3  65                 	db	101	;'e'
   426  007FE4  66                 	db	102	;'f'
   427  007FE5  61                 	db	97	;'a'
   428  007FE6  75                 	db	117	;'u'
   429  007FE7  6C                 	db	108	;'l'
   430  007FE8  74                 	db	116	;'t'
   431  007FE9  00                 	db	0
   432  007FEA                     STR_21:
   433  007FEA  49                 	db	73	;'I'
   434  007FEB  6E                 	db	110	;'n'
   435  007FEC  69                 	db	105	;'i'
   436  007FED  63                 	db	99	;'c'
   437  007FEE  69                 	db	105	;'i'
   438  007FEF  6F                 	db	111	;'o'
   439  007FF0  00                 	db	0
   440  007FF1                     STR_10:
   441  007FF1  49                 	db	73	;'I'
   442  007FF2  4E                 	db	78	;'N'
   443  007FF3  49                 	db	73	;'I'
   444  007FF4  43                 	db	67	;'C'
   445  007FF5  49                 	db	73	;'I'
   446  007FF6  4F                 	db	79	;'O'
   447  007FF7  00                 	db	0
   448  007FF8                     STR_12:
   449  007FF8  31                 	db	49	;'1'
   450  007FF9  00                 	db	0
   451  007FFA                     STR_14:
   452  007FFA  33                 	db	51	;'3'
   453  007FFB  00                 	db	0
   454  007FFC                     STR_15:
   455  007FFC  34                 	db	52	;'4'
   456  007FFD  00                 	db	0
   457  007FFE                     __end_of__stringdata:
   458                           	opt stack 0
   459                           
   460                           ; #config settings
   461  007FFE  00                 	db	0	; dummy byte at the end
   462  0000                     
   463                           	psect	cinit
   464  00247E                     __pcinit:
   465                           	opt stack 0
   466  00247E                     start_initialization:
   467                           	opt stack 0
   468  00247E                     __initialization:
   469                           	opt stack 0
   470                           
   471                           ; Clear objects allocated to BANK1 (90 bytes)
   472  00247E  EE01  F000         	lfsr	0,__pbssBANK1
   473  002482  0E5A               	movlw	90
   474  002484                     clear_0:
   475  002484  6AEE               	clrf	postinc0,c
   476  002486  06E8               	decf	wreg,f,c
   477  002488  E1FD               	bnz	clear_0
   478                           
   479                           ; Clear objects allocated to BANK0 (32 bytes)
   480  00248A  EE00  F0BA         	lfsr	0,__pbssBANK0
   481  00248E  0E20               	movlw	32
   482  002490                     clear_1:
   483  002490  6AEE               	clrf	postinc0,c
   484  002492  06E8               	decf	wreg,f,c
   485  002494  E1FD               	bnz	clear_1
   486                           
   487                           ; Clear objects allocated to COMRAM (24 bytes)
   488  002496  EE00  F030         	lfsr	0,__pbssCOMRAM
   489  00249A  0E18               	movlw	24
   490  00249C                     clear_2:
   491  00249C  6AEE               	clrf	postinc0,c
   492  00249E  06E8               	decf	wreg,f,c
   493  0024A0  E1FD               	bnz	clear_2
   494                           
   495                           ; Initialize objects allocated to BANK0 (20 bytes)
   496                           ; load TBLPTR registers with __pidataBANK0
   497  0024A2  0E86               	movlw	low __pidataBANK0
   498  0024A4  6EF6               	movwf	tblptrl,c
   499  0024A6  0E28               	movlw	high __pidataBANK0
   500  0024A8  6EF7               	movwf	tblptrh,c
   501  0024AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   502  0024AC  6EF8               	movwf	tblptru,c
   503  0024AE  EE00  F0DA         	lfsr	0,__pdataBANK0
   504  0024B2  EE10 F014          	lfsr	1,20
   505  0024B6                     copy_data0:
   506  0024B6  0009               	tblrd		*+
   507  0024B8  CFF5 FFEE          	movff	tablat,postinc0
   508  0024BC  50E5               	movf	postdec1,w,c
   509  0024BE  50E1               	movf	fsr1l,w,c
   510  0024C0  E1FA               	bnz	copy_data0
   511  0024C2                     end_of_initialization:
   512                           	opt stack 0
   513  0024C2                     __end_of__initialization:
   514                           	opt stack 0
   515  0024C2  0100               	movlb	0
   516  0024C4  EF4D  F00E         	goto	_main	;jump to C main() function
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	bssCOMRAM
   527  000030                     __pbssCOMRAM:
   528                           	opt stack 0
   529  000030                     _CheckSum:
   530                           	opt stack 0
   531  000030                     	ds	1
   532  000031                     _ComanBFlag:
   533                           	opt stack 0
   534  000031                     	ds	1
   535  000032                     _ComanTFlag:
   536                           	opt stack 0
   537  000032                     	ds	1
   538  000033                     _Comando:
   539                           	opt stack 0
   540  000033                     	ds	1
   541  000034                     _ComandoTablet:
   542                           	opt stack 0
   543  000034                     	ds	1
   544  000035                     _EntTrama:
   545                           	opt stack 0
   546  000035                     	ds	1
   547  000036                     _FinComandB:
   548                           	opt stack 0
   549  000036                     	ds	1
   550  000037                     _FinComandT:
   551                           	opt stack 0
   552  000037                     	ds	1
   553  000038                     _InicioComando:
   554                           	opt stack 0
   555  000038                     	ds	1
   556  000039                     _RXComandoTB:
   557                           	opt stack 0
   558  000039                     	ds	1
   559  00003A                     _SBUSART:
   560                           	opt stack 0
   561  00003A                     	ds	1
   562  00003B                     _Timer1:
   563                           	opt stack 0
   564  00003B                     	ds	1
   565  00003C                     _USART_Status:
   566                           	opt stack 0
   567  00003C                     	ds	1
   568  00003D                     _cad:
   569                           	opt stack 0
   570  00003D                     	ds	1
   571  00003E                     _cleanBfer:
   572                           	opt stack 0
   573  00003E                     	ds	1
   574  00003F                     _contador:
   575                           	opt stack 0
   576  00003F                     	ds	1
   577  000040                     _contador2:
   578                           	opt stack 0
   579  000040                     	ds	1
   580  000041                     _j:
   581                           	opt stack 0
   582  000041                     	ds	1
   583  000042                     _lenght:
   584                           	opt stack 0
   585  000042                     	ds	1
   586  000043                     _num_med_hi:
   587                           	opt stack 0
   588  000043                     	ds	1
   589  000044                     _num_med_low:
   590                           	opt stack 0
   591  000044                     	ds	1
   592  000045                     _num_med_medium:
   593                           	opt stack 0
   594  000045                     	ds	1
   595  000046                     _packet:
   596                           	opt stack 0
   597  000046                     	ds	1
   598  000047                     _Timer2Config:
   599                           	opt stack 0
   600  000047                     	ds	1
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           postdec1	equ	0xFE5
   608                           fsr1l	equ	0xFE1
   609                           
   610                           	psect	bssBANK0
   611  0000BA                     __pbssBANK0:
   612                           	opt stack 0
   613  0000BA                     _DutyCycle:
   614                           	opt stack 0
   615  0000BA                     	ds	2
   616  0000BC                     _Med_lsb:
   617                           	opt stack 0
   618  0000BC                     	ds	2
   619  0000BE                     _Med_msb:
   620                           	opt stack 0
   621  0000BE                     	ds	2
   622  0000C0                     _TamanhoTrama:
   623                           	opt stack 0
   624  0000C0                     	ds	2
   625  0000C2                     _contadorbt:
   626                           	opt stack 0
   627  0000C2                     	ds	2
   628  0000C4                     _i:
   629                           	opt stack 0
   630  0000C4                     	ds	2
   631  0000C6                     _comando:
   632                           	opt stack 0
   633  0000C6                     	ds	20
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           	psect	dataBANK0
   644  0000DA                     __pdataBANK0:
   645                           	opt stack 0
   646  0000DA                     BT_Init@F5671:
   647                           	opt stack 0
   648  0000DA                     	ds	18
   649  0000EC                     _countup:
   650                           	opt stack 0
   651  0000EC                     	ds	2
   652                           tblptru	equ	0xFF8
   653                           tblptrh	equ	0xFF7
   654                           tblptrl	equ	0xFF6
   655                           tablat	equ	0xFF5
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postdec1	equ	0xFE5
   659                           fsr1l	equ	0xFE1
   660                           
   661                           	psect	bssBANK1
   662  000100                     __pbssBANK1:
   663                           	opt stack 0
   664  000100                     _TramaTablet:
   665                           	opt stack 0
   666  000100                     	ds	20
   667  000114                     _array:
   668                           	opt stack 0
   669  000114                     	ds	20
   670  000128                     _BluetoothDato:
   671                           	opt stack 0
   672  000128                     	ds	50
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682                           	psect	cstackBANK1
   683  00015A                     __pcstackBANK1:
   684                           	opt stack 0
   685  00015A                     putcBluetoothInt@s:
   686                           	opt stack 0
   687  00015A                     Lcd_Write_Integer@s:
   688                           	opt stack 0
   689                           
   690                           ; 20 bytes @ 0x0
   691  00015A                     	ds	20
   692  00016E                     putcBluetoothInt@i:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x14
   696  00016E                     	ds	2
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	cstackBANK0
   707  000060                     __pcstackBANK0:
   708                           	opt stack 0
   709  000060                     ?___ftmul:
   710                           	opt stack 0
   711  000060                     ___ftmul@f1:
   712                           	opt stack 0
   713  000060                     BT_Init@nameBT:
   714                           	opt stack 0
   715                           
   716                           ; 18 bytes @ 0x0
   717  000060                     	ds	3
   718  000063                     ___ftmul@f2:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x3
   722  000063                     	ds	3
   723  000066                     ___ftmul@exp:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x6
   727  000066                     	ds	1
   728  000067                     ___ftmul@f3_as_product:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x7
   732  000067                     	ds	3
   733  00006A                     ___ftmul@cntr:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0xA
   737  00006A                     	ds	1
   738  00006B                     ___ftmul@sign:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0xB
   742  00006B                     	ds	1
   743  00006C                     ?_fround:
   744                           	opt stack 0
   745  00006C                     ?_scale:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0xC
   749  00006C                     	ds	3
   750  00006F                     _fround$2375:
   751                           	opt stack 0
   752  00006F                     _scale$2376:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0xF
   756  00006F                     	ds	3
   757  000072                     scale@scl:
   758                           	opt stack 0
   759  000072                     _fround$2374:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x12
   763  000072                     	ds	1
   764  000073                     ?___fttol:
   765                           	opt stack 0
   766  000073                     ___fttol@f1:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0x13
   770  000073                     	ds	2
   771  000075                     fround@prec:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x15
   775  000075                     	ds	1
   776  000076                     ?___ftadd:
   777                           	opt stack 0
   778  000076                     ___ftadd@f1:
   779                           	opt stack 0
   780                           
   781                           ; 3 bytes @ 0x16
   782  000076                     	ds	1
   783  000077                     ??___fttol:
   784                           
   785                           ; 0 bytes @ 0x17
   786  000077                     	ds	2
   787  000079                     ___ftadd@f2:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x19
   791  000079                     	ds	3
   792  00007C                     ??___ftadd:
   793  00007C                     ___fttol@sign1:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x1C
   797  00007C                     	ds	1
   798  00007D                     ___fttol@lval:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x1D
   802  00007D                     	ds	2
   803  00007F                     ___ftadd@sign:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1F
   807  00007F                     	ds	1
   808  000080                     ___ftadd@exp2:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x20
   812  000080                     	ds	1
   813  000081                     ___ftadd@exp1:
   814                           	opt stack 0
   815  000081                     ___fttol@exp1:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x21
   819  000081                     	ds	1
   820  000082                     ??_PWM_DutyCycle1:
   821  000082                     ??_PWM_DutyCycle2:
   822  000082                     ?___ftsub:
   823                           	opt stack 0
   824  000082                     ___ftsub@f1:
   825                           	opt stack 0
   826                           
   827                           ; 3 bytes @ 0x22
   828  000082                     	ds	3
   829  000085                     ___ftsub@f2:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x25
   833  000085                     	ds	1
   834  000086                     PWM_DutyCycle1@DutyCycle:
   835                           	opt stack 0
   836  000086                     PWM_DutyCycle2@DutyCycle:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x26
   840  000086                     	ds	2
   841  000088                     ?_sprintf:
   842                           	opt stack 0
   843  000088                     PWM_DutyCycle1@percentageDuty:
   844                           	opt stack 0
   845  000088                     PWM_DutyCycle2@percentageDuty:
   846                           	opt stack 0
   847  000088                     sprintf@sp:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x28
   851  000088                     	ds	1
   852  000089                     PWM_DutyCycle1@DC:
   853                           	opt stack 0
   854  000089                     PWM_DutyCycle2@DC:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x29
   858  000089                     	ds	1
   859  00008A                     sprintf@f:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x2A
   863  00008A                     	ds	5
   864  00008F                     ??_sprintf:
   865                           
   866                           ; 0 bytes @ 0x2F
   867  00008F                     	ds	6
   868  000095                     _sprintf$2377:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x35
   872  000095                     	ds	3
   873  000098                     _sprintf$1323:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0x38
   877  000098                     	ds	4
   878  00009C                     sprintf@vd:
   879                           	opt stack 0
   880                           
   881                           ; 4 bytes @ 0x3C
   882  00009C                     	ds	4
   883  0000A0                     sprintf@vd_1325:
   884                           	opt stack 0
   885                           
   886                           ; 4 bytes @ 0x40
   887  0000A0                     	ds	4
   888  0000A4                     sprintf@ap:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x44
   892  0000A4                     	ds	2
   893  0000A6                     sprintf@flag:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x46
   897  0000A6                     	ds	2
   898  0000A8                     sprintf@integ:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x48
   902  0000A8                     	ds	3
   903  0000AB                     sprintf@prec:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x4B
   907  0000AB                     	ds	2
   908  0000AD                     sprintf@_val:
   909                           	opt stack 0
   910                           
   911                           ; 5 bytes @ 0x4D
   912  0000AD                     	ds	5
   913  0000B2                     sprintf@exp:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x52
   917  0000B2                     	ds	2
   918  0000B4                     sprintf@fval:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x54
   922  0000B4                     	ds	3
   923  0000B7                     sprintf@c:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x57
   927  0000B7                     	ds	1
   928  0000B8                     putcBluetoothInt@a:
   929                           	opt stack 0
   930  0000B8                     Lcd_Write_Integer@a:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x58
   934  0000B8                     	ds	2
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	cstackCOMRAM
   945  000001                     __pcstackCOMRAM:
   946                           	opt stack 0
   947  000001                     ReadUSART@data:
   948                           	opt stack 0
   949  000001                     i2Lcd_Port@a:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x0
   953  000001                     	ds	1
   954  000002                     ??i2_Lcd_Cmd:
   955  000002                     i2Lcd_Write_Char@temp:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x1
   959  000002                     	ds	1
   960  000003                     i2Lcd_Cmd@a:
   961                           	opt stack 0
   962  000003                     i2Lcd_Write_Char@y:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x2
   966  000003                     	ds	1
   967  000004                     i2Lcd_Set_Cursor@b:
   968                           	opt stack 0
   969  000004                     i2Lcd_Write_Char@a:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x3
   973  000004                     	ds	1
   974  000005                     i2Lcd_Set_Cursor@a:
   975                           	opt stack 0
   976  000005                     i2Lcd_Write_String@a:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x4
   980  000005                     	ds	1
   981  000006                     i2Lcd_Set_Cursor@z:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x5
   985  000006                     	ds	1
   986  000007                     ??i2_Lcd_Write_String:
   987  000007                     i2Lcd_Set_Cursor@y:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x6
   991  000007                     	ds	1
   992  000008                     i2Lcd_Set_Cursor@temp:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x7
   996  000008                     	ds	1
   997  000009                     i2Lcd_Write_String@i:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x8
  1001  000009                     	ds	2
  1002  00000B                     ??_TMRO_USART:
  1003                           
  1004                           ; 0 bytes @ 0xA
  1005  00000B                     	ds	14
  1006  000019                     ??_OpenPWM2:
  1007  000019                     ?___awmod:
  1008                           	opt stack 0
  1009  000019                     ?___ftpack:
  1010                           	opt stack 0
  1011  000019                     ?___ftneg:
  1012                           	opt stack 0
  1013  000019                     ?__tdiv_to_l_:
  1014                           	opt stack 0
  1015  000019                     ?__div_to_l_:
  1016                           	opt stack 0
  1017  000019                     ?___lldiv:
  1018                           	opt stack 0
  1019  000019                     Lcd_Port@a:
  1020                           	opt stack 0
  1021  000019                     OpenPWM1@period:
  1022                           	opt stack 0
  1023  000019                     WriteUSART@data:
  1024                           	opt stack 0
  1025  000019                     clrBufferUSART@i:
  1026                           	opt stack 0
  1027  000019                     Pause_ms@x:
  1028                           	opt stack 0
  1029  000019                     SetDCPWM1@dutycycle:
  1030                           	opt stack 0
  1031  000019                     SetDCPWM2@dutycycle:
  1032                           	opt stack 0
  1033  000019                     OpenUSART@spbrg:
  1034                           	opt stack 0
  1035  000019                     ___awmod@dividend:
  1036                           	opt stack 0
  1037  000019                     __div_to_l_@f1:
  1038                           	opt stack 0
  1039  000019                     ___ftpack@arg:
  1040                           	opt stack 0
  1041  000019                     __tdiv_to_l_@f1:
  1042                           	opt stack 0
  1043  000019                     ___ftge@ff1:
  1044                           	opt stack 0
  1045  000019                     ___ftneg@f1:
  1046                           	opt stack 0
  1047  000019                     ___lldiv@dividend:
  1048                           	opt stack 0
  1049                           
  1050                           ; 4 bytes @ 0x18
  1051  000019                     	ds	1
  1052  00001A                     ??_Lcd_Cmd:
  1053  00001A                     putcTxU1@character:
  1054                           	opt stack 0
  1055  00001A                     Lcd_Write_Char@temp:
  1056                           	opt stack 0
  1057  00001A                     PWM_init1@period:
  1058                           	opt stack 0
  1059  00001A                     OpenPWM2@period:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x19
  1063  00001A                     	ds	1
  1064  00001B                     ??_OpenUSART:
  1065  00001B                     ??_SetDCPWM1:
  1066  00001B                     ??_SetDCPWM2:
  1067  00001B                     ??_Pause_ms:
  1068  00001B                     Lcd_Cmd@a:
  1069                           	opt stack 0
  1070  00001B                     Lcd_Write_Char@y:
  1071                           	opt stack 0
  1072  00001B                     OpenPWM2@ccp2mx:
  1073                           	opt stack 0
  1074  00001B                     putSTRINGU1@dato:
  1075                           	opt stack 0
  1076  00001B                     ___awmod@divisor:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x1A
  1080  00001B                     	ds	1
  1081  00001C                     ??_Lcd_Init:
  1082  00001C                     Lcd_Set_Cursor@b:
  1083                           	opt stack 0
  1084  00001C                     Lcd_Write_Char@a:
  1085                           	opt stack 0
  1086  00001C                     PWM_init2@period:
  1087                           	opt stack 0
  1088  00001C                     ___ftpack@exp:
  1089                           	opt stack 0
  1090  00001C                     Pause_ms@i:
  1091                           	opt stack 0
  1092  00001C                     __div_to_l_@f2:
  1093                           	opt stack 0
  1094  00001C                     __tdiv_to_l_@f2:
  1095                           	opt stack 0
  1096  00001C                     ___ftge@ff2:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x1B
  1100  00001C                     	ds	1
  1101  00001D                     Lcd_Set_Cursor@a:
  1102                           	opt stack 0
  1103  00001D                     ___awmod@counter:
  1104                           	opt stack 0
  1105  00001D                     ___ftpack@sign:
  1106                           	opt stack 0
  1107  00001D                     putSTRINGU1@total:
  1108                           	opt stack 0
  1109  00001D                     Lcd_Write_String@a:
  1110                           	opt stack 0
  1111  00001D                     SetDCPWM1@DCycle:
  1112                           	opt stack 0
  1113  00001D                     SetDCPWM2@DCycle:
  1114                           	opt stack 0
  1115  00001D                     ___lldiv@divisor:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x1C
  1119  00001D                     	ds	1
  1120  00001E                     ??___ftpack:
  1121  00001E                     Pause_seg@x:
  1122                           	opt stack 0
  1123  00001E                     Lcd_Set_Cursor@z:
  1124                           	opt stack 0
  1125  00001E                     OpenUSART@config:
  1126                           	opt stack 0
  1127  00001E                     ___awmod@sign:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x1D
  1131  00001E                     	ds	1
  1132  00001F                     ??_putSTRINGU1:
  1133  00001F                     ??_Lcd_Write_String:
  1134  00001F                     ??__tdiv_to_l_:
  1135  00001F                     ??__div_to_l_:
  1136  00001F                     ??___ftge:
  1137  00001F                     ?___awdiv:
  1138                           	opt stack 0
  1139  00001F                     Pause_seg@i:
  1140                           	opt stack 0
  1141  00001F                     UART1_Init@bdr:
  1142                           	opt stack 0
  1143  00001F                     Lcd_Set_Cursor@y:
  1144                           	opt stack 0
  1145  00001F                     ___awdiv@dividend:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x1E
  1149  00001F                     	ds	1
  1150  000020                     Lcd_Set_Cursor@temp:
  1151                           	opt stack 0
  1152  000020                     putcBluetoothString@a:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x1F
  1156  000020                     	ds	1
  1157  000021                     ?___lbtoft:
  1158                           	opt stack 0
  1159  000021                     ?___lltoft:
  1160                           	opt stack 0
  1161  000021                     putSTRINGU1@last:
  1162                           	opt stack 0
  1163  000021                     Lcd_Write_String@i:
  1164                           	opt stack 0
  1165  000021                     ___awdiv@divisor:
  1166                           	opt stack 0
  1167  000021                     ___lldiv@quotient:
  1168                           	opt stack 0
  1169  000021                     ___lltoft@c:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x20
  1173  000021                     	ds	1
  1174  000022                     ??_putcBluetoothString:
  1175  000022                     putSTRINGU1@cont:
  1176                           	opt stack 0
  1177  000022                     __tdiv_to_l_@quot:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x21
  1181  000022                     	ds	1
  1182  000023                     ___awdiv@counter:
  1183                           	opt stack 0
  1184  000023                     SendBlueToothCommand@command:
  1185                           	opt stack 0
  1186  000023                     __div_to_l_@quot:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x22
  1190  000023                     	ds	1
  1191  000024                     ___awdiv@sign:
  1192                           	opt stack 0
  1193  000024                     ___lbtoft@c:
  1194                           	opt stack 0
  1195  000024                     putcBluetoothString@i:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x23
  1199  000024                     	ds	1
  1200  000025                     ??___lltoft:
  1201  000025                     ___lldiv@counter:
  1202                           	opt stack 0
  1203  000025                     SendBlueToothCommand@total:
  1204                           	opt stack 0
  1205  000025                     ___awdiv@quotient:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x24
  1209  000025                     	ds	1
  1210  000026                     ?___llmod:
  1211                           	opt stack 0
  1212  000026                     __tdiv_to_l_@cntr:
  1213                           	opt stack 0
  1214  000026                     ___llmod@dividend:
  1215                           	opt stack 0
  1216                           
  1217                           ; 4 bytes @ 0x25
  1218  000026                     	ds	1
  1219  000027                     ??_Inicializa_Driveby:
  1220  000027                     ?___wmul:
  1221                           	opt stack 0
  1222  000027                     __div_to_l_@cntr:
  1223                           	opt stack 0
  1224  000027                     __tdiv_to_l_@exp1:
  1225                           	opt stack 0
  1226  000027                     ___wmul@multiplier:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x26
  1230  000027                     	ds	1
  1231  000028                     __div_to_l_@exp1:
  1232                           	opt stack 0
  1233  000028                     Inicializa_Driveby@i:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x27
  1237  000028                     	ds	1
  1238  000029                     ___lltoft@exp:
  1239                           	opt stack 0
  1240  000029                     ___wmul@multiplicand:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x28
  1244  000029                     	ds	1
  1245  00002A                     ___llmod@divisor:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x29
  1249  00002A                     	ds	1
  1250  00002B                     ___wmul@product:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x2A
  1254  00002B                     	ds	2
  1255  00002D                     ??___ftmul:
  1256                           
  1257                           ; 0 bytes @ 0x2C
  1258  00002D                     	ds	1
  1259  00002E                     ___llmod@counter:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x2D
  1263  00002E                     	ds	2
  1264  000030                     tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1l	equ	0xFE1
  1272                           
  1273                           ; 0 bytes @ 0x2F
  1274 ;;
  1275 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1276 ;;
  1277 ;; *************** function _main *****************
  1278 ;; Defined at:
  1279 ;;		line 121 in file "robot.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2  381[COMRAM] int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels required when called:   10
  1299 ;; This function calls:
  1300 ;;		_Comando_Tablet
  1301 ;;		_Inicializa_Driveby
  1302 ;;		_Lcd_Clear
  1303 ;;		_Lcd_Init
  1304 ;;		_Lcd_Set_Cursor
  1305 ;;		_Lcd_Write_String
  1306 ;;		_UART1_Init
  1307 ;;		_clrBufferUSART
  1308 ;; This function is called by:
  1309 ;;		Startup code after reset
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text0
  1314  001C9A                     __ptext0:
  1315                           	opt stack 0
  1316  001C9A                     _main:
  1317                           	opt stack 21
  1318                           
  1319                           ;robot.c: 123: INTCON =0X00;
  1320                           
  1321                           ;incstack = 0
  1322  001C9A  0E00               	movlw	0
  1323  001C9C  6EF2               	movwf	intcon,c	;volatile
  1324                           
  1325                           ;robot.c: 124: TRISD = 0x00;
  1326  001C9E  0E00               	movlw	0
  1327  001CA0  6E95               	movwf	3989,c	;volatile
  1328                           
  1329                           ;robot.c: 125: TRISE = 0x00;
  1330  001CA2  0E00               	movlw	0
  1331  001CA4  6E96               	movwf	3990,c	;volatile
  1332                           
  1333                           ;robot.c: 126: PORTEbits.RE1=0;
  1334  001CA6  9284               	bcf	3972,1,c	;volatile
  1335                           
  1336                           ;robot.c: 127: ADCON1bits.PCFG=0b1111;
  1337  001CA8  80C1               	bsf	4033,0,c	;volatile
  1338  001CAA  82C1               	bsf	4033,1,c	;volatile
  1339  001CAC  84C1               	bsf	4033,2,c	;volatile
  1340  001CAE  86C1               	bsf	4033,3,c	;volatile
  1341                           
  1342                           ;robot.c: 128: Lcd_Init();
  1343  001CB0  ECEC  F010         	call	_Lcd_Init	;wreg free
  1344                           
  1345                           ;robot.c: 129: Lcd_Clear();
  1346  001CB4  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1347                           
  1348                           ;robot.c: 130: Lcd_Set_Cursor(1,1);
  1349  001CB8  0E01               	movlw	1
  1350  001CBA  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1351  001CBC  0E01               	movlw	1
  1352  001CBE  ECEF  F011         	call	_Lcd_Set_Cursor
  1353                           
  1354                           ;robot.c: 131: Lcd_Write_String("Inicio");
  1355  001CC2  0E7F               	movlw	high STR_21
  1356  001CC4  6E1E               	movwf	Lcd_Write_String@a+1,c
  1357  001CC6  0EEA               	movlw	low STR_21
  1358  001CC8  6E1D               	movwf	Lcd_Write_String@a,c
  1359  001CCA  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1360                           
  1361                           ;robot.c: 132: Inicializa_Driveby();
  1362  001CCE  ECF7  F00C         	call	_Inicializa_Driveby	;wreg free
  1363  001CD2                     l5477:
  1364                           
  1365                           ;robot.c: 136: {
  1366                           ;robot.c: 139: if (cleanBfer == 1) {
  1367  001CD2  043E               	decf	_cleanBfer,w,c
  1368  001CD4  A4D8               	btfss	status,2,c
  1369  001CD6  D004               	goto	l5483
  1370                           
  1371                           ;robot.c: 140: clrBufferUSART();
  1372  001CD8  EC1A  F013         	call	_clrBufferUSART	;wreg free
  1373                           
  1374                           ;robot.c: 141: cleanBfer = 0;
  1375  001CDC  0E00               	movlw	0
  1376  001CDE  6E3E               	movwf	_cleanBfer,c
  1377  001CE0                     l5483:
  1378                           
  1379                           ;robot.c: 142: }
  1380                           ;robot.c: 143: if (FinComandT == 1) {
  1381  001CE0  0437               	decf	_FinComandT,w,c
  1382  001CE2  A4D8               	btfss	status,2,c
  1383  001CE4  D01A               	goto	l5503
  1384                           
  1385                           ;robot.c: 144: Lcd_Clear();
  1386  001CE6  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1387                           
  1388                           ;robot.c: 145: Lcd_Set_Cursor(2,1);
  1389  001CEA  0E01               	movlw	1
  1390  001CEC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1391  001CEE  0E02               	movlw	2
  1392  001CF0  ECEF  F011         	call	_Lcd_Set_Cursor
  1393                           
  1394                           ;robot.c: 146: Lcd_Write_String("CMD TABLET");
  1395  001CF4  0E7F               	movlw	high STR_22
  1396  001CF6  6E1E               	movwf	Lcd_Write_String@a+1,c
  1397  001CF8  0EC3               	movlw	low STR_22
  1398  001CFA  6E1D               	movwf	Lcd_Write_String@a,c
  1399  001CFC  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1400                           
  1401                           ;robot.c: 147: FinComandT = 0;
  1402  001D00  0E00               	movlw	0
  1403  001D02  6E37               	movwf	_FinComandT,c
  1404                           
  1405                           ;robot.c: 148: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1406  001D04  0E4F               	movlw	79
  1407  001D06  16AB               	andwf	4011,f,c	;volatile
  1408  001D08  9AAC               	bcf	4012,5,c	;volatile
  1409  001D0A  0ECF               	movlw	207
  1410  001D0C  169D               	andwf	3997,f,c	;volatile
  1411                           
  1412                           ;robot.c: 149: Comando_Tablet();
  1413  001D0E  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1414                           
  1415                           ;robot.c: 150: UART1_Init(51);
  1416  001D12  0E33               	movlw	51
  1417  001D14  EC5F  F014         	call	_UART1_Init
  1418                           
  1419                           ;robot.c: 152: }
  1420  001D18  D7DC               	goto	l5477
  1421  001D1A                     l5503:
  1422                           
  1423                           ;robot.c: 153: else if (FinComandB == 1) {
  1424  001D1A  0436               	decf	_FinComandB,w,c
  1425  001D1C  A4D8               	btfss	status,2,c
  1426  001D1E  D7D9               	goto	l5477
  1427                           
  1428                           ;robot.c: 158: FinComandB = 0;
  1429  001D20  0E00               	movlw	0
  1430  001D22  6E36               	movwf	_FinComandB,c
  1431                           
  1432                           ;robot.c: 159: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1433  001D24  0E4F               	movlw	79
  1434  001D26  16AB               	andwf	4011,f,c	;volatile
  1435  001D28  9AAC               	bcf	4012,5,c	;volatile
  1436  001D2A  0ECF               	movlw	207
  1437  001D2C  169D               	andwf	3997,f,c	;volatile
  1438  001D2E  D7D1               	goto	l5477
  1439  001D30                     __end_of_main:
  1440                           	opt stack 0
  1441                           tblptru	equ	0xFF8
  1442                           tblptrh	equ	0xFF7
  1443                           tblptrl	equ	0xFF6
  1444                           tablat	equ	0xFF5
  1445                           intcon	equ	0xFF2
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function _Lcd_Init *****************
  1453 ;; Defined at:
  1454 ;;		line 57 in file "lcd.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;		None               void
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1468 ;;      Params:         0       0       0       0       0       0       0       0       0
  1469 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1470 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1471 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1472 ;;Total ram usage:        1 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    6
  1475 ;; This function calls:
  1476 ;;		_Lcd_Cmd
  1477 ;;		_Lcd_Port
  1478 ;; This function is called by:
  1479 ;;		_main
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text1
  1484  0021D8                     __ptext1:
  1485                           	opt stack 0
  1486  0021D8                     _Lcd_Init:
  1487                           	opt stack 24
  1488                           
  1489                           ;lcd.c: 58: Lcd_Port(0x00);
  1490                           
  1491                           ;incstack = 0
  1492  0021D8  0E00               	movlw	0
  1493  0021DA  EC87  F013         	call	_Lcd_Port
  1494                           
  1495                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1496  0021DE  0E1A               	movlw	26
  1497  0021E0  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1498  0021E2  0EF8               	movlw	248
  1499  0021E4                     u5687:
  1500  0021E4  2EE8               	decfsz	wreg,f,c
  1501  0021E6  D7FE               	goto	u5687
  1502  0021E8  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1503  0021EA  D7FC               	goto	u5687
  1504  0021EC  D000               	nop2	
  1505                           
  1506                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1507  0021EE  0E03               	movlw	3
  1508  0021F0  ECEB  F013         	call	_Lcd_Cmd
  1509                           
  1510                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1511  0021F4  0E07               	movlw	7
  1512  0021F6  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1513  0021F8  0E7D               	movlw	125
  1514  0021FA                     u5697:
  1515  0021FA  2EE8               	decfsz	wreg,f,c
  1516  0021FC  D7FE               	goto	u5697
  1517  0021FE  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1518  002200  D7FC               	goto	u5697
  1519  002202  F000               	nop	
  1520                           
  1521                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1522  002204  0E03               	movlw	3
  1523  002206  ECEB  F013         	call	_Lcd_Cmd
  1524                           
  1525                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1526  00220A  0E0F               	movlw	15
  1527  00220C  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1528  00220E  0E48               	movlw	72
  1529  002210                     u5707:
  1530  002210  2EE8               	decfsz	wreg,f,c
  1531  002212  D7FE               	goto	u5707
  1532  002214  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1533  002216  D7FC               	goto	u5707
  1534                           
  1535                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1536  002218  0E03               	movlw	3
  1537  00221A  ECEB  F013         	call	_Lcd_Cmd
  1538                           
  1539                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1540  00221E  0E02               	movlw	2
  1541  002220  ECEB  F013         	call	_Lcd_Cmd
  1542                           
  1543                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1544  002224  0E02               	movlw	2
  1545  002226  ECEB  F013         	call	_Lcd_Cmd
  1546                           
  1547                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1548  00222A  0E08               	movlw	8
  1549  00222C  ECEB  F013         	call	_Lcd_Cmd
  1550                           
  1551                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1552  002230  0E00               	movlw	0
  1553  002232  ECEB  F013         	call	_Lcd_Cmd
  1554                           
  1555                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1556  002236  0E0C               	movlw	12
  1557  002238  ECEB  F013         	call	_Lcd_Cmd
  1558                           
  1559                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1560  00223C  0E00               	movlw	0
  1561  00223E  ECEB  F013         	call	_Lcd_Cmd
  1562                           
  1563                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1564  002242  0E06               	movlw	6
  1565  002244  ECEB  F013         	call	_Lcd_Cmd
  1566  002248  0012               	return	
  1567  00224A                     __end_of_Lcd_Init:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           intcon	equ	0xFF2
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _Inicializa_Driveby *****************
  1581 ;; Defined at:
  1582 ;;		line 61 in file "Funciones_Db.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  i               2   39[COMRAM] int 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0
  1597 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1598 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1599 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1600 ;;Total ram usage:        3 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    9
  1603 ;; This function calls:
  1604 ;;		_BT_Init
  1605 ;;		_Lcd_Clear
  1606 ;;		_Lcd_Set_Cursor
  1607 ;;		_Lcd_Write_String
  1608 ;;		_Pause_seg
  1609 ;;		_clrBufferUSART
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text2
  1616  0019EE                     __ptext2:
  1617                           	opt stack 0
  1618  0019EE                     _Inicializa_Driveby:
  1619                           	opt stack 21
  1620                           
  1621                           ;Funciones_Db.c: 62: TRISA = TRISB = TRISC = TRISD = 0;
  1622                           
  1623                           ;incstack = 0
  1624  0019EE  0E00               	movlw	0
  1625  0019F0  6E95               	movwf	3989,c	;volatile
  1626  0019F2  CF95 FF94          	movff	3989,3988	;volatile
  1627  0019F6  CF94 FF93          	movff	3988,3987	;volatile
  1628  0019FA  CF93 FF92          	movff	3987,3986	;volatile
  1629                           
  1630                           ;Funciones_Db.c: 63: INTCON = 0b11000000;
  1631  0019FE  0EC0               	movlw	192
  1632  001A00  6EF2               	movwf	intcon,c	;volatile
  1633                           
  1634                           ;Funciones_Db.c: 66: int i = 0;
  1635  001A02  0E00               	movlw	0
  1636  001A04  6E29               	movwf	Inicializa_Driveby@i+1,c
  1637  001A06  0E00               	movlw	0
  1638  001A08  6E28               	movwf	Inicializa_Driveby@i,c
  1639                           
  1640                           ;Funciones_Db.c: 67: _delay((unsigned long)((40)*(4000000/4000.0)));
  1641  001A0A  0E34               	movlw	52
  1642  001A0C  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1643  001A0E  0EF2               	movlw	242
  1644  001A10                     u5717:
  1645  001A10  2EE8               	decfsz	wreg,f,c
  1646  001A12  D7FE               	goto	u5717
  1647  001A14  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1648  001A16  D7FC               	goto	u5717
  1649                           
  1650                           ;Funciones_Db.c: 68: OSCCONbits.IRCF = 0b111;
  1651  001A18  88D3               	bsf	4051,4,c	;volatile
  1652  001A1A  8AD3               	bsf	4051,5,c	;volatile
  1653  001A1C  8CD3               	bsf	4051,6,c	;volatile
  1654                           
  1655                           ;Funciones_Db.c: 73: TRISA = 0;
  1656  001A1E  0E00               	movlw	0
  1657  001A20  6E92               	movwf	3986,c	;volatile
  1658                           
  1659                           ;Funciones_Db.c: 74: PORTA = 0;
  1660  001A22  0E00               	movlw	0
  1661  001A24  6E80               	movwf	3968,c	;volatile
  1662                           
  1663                           ;Funciones_Db.c: 75: TRISCbits.TRISC7 = 1;
  1664  001A26  8E94               	bsf	3988,7,c	;volatile
  1665                           
  1666                           ;Funciones_Db.c: 76: TRISCbits.TRISC6 = 0;
  1667  001A28  9C94               	bcf	3988,6,c	;volatile
  1668                           
  1669                           ;Funciones_Db.c: 77: for (i = 1; i <= 50; i++)
  1670  001A2A  0E00               	movlw	0
  1671  001A2C  6E29               	movwf	Inicializa_Driveby@i+1,c
  1672  001A2E  0E01               	movlw	1
  1673  001A30  6E28               	movwf	Inicializa_Driveby@i,c
  1674  001A32  5029               	movf	Inicializa_Driveby@i+1,w,c
  1675  001A34  0A80               	xorlw	128
  1676  001A36  0F80               	addlw	-128
  1677  001A38  0E33               	movlw	51
  1678  001A3A  B4D8               	btfsc	status,2,c
  1679  001A3C  5C28               	subwf	Inicializa_Driveby@i,w,c
  1680  001A3E  B0D8               	btfsc	status,0,c
  1681  001A40  D00B               	goto	l5253
  1682                           
  1683                           ;Funciones_Db.c: 78: _delay((unsigned long)((20)*(4000000/4000.0)));
  1684  001A42  0E1A               	movlw	26
  1685  001A44  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1686  001A46  0EF8               	movlw	248
  1687  001A48                     u5727:
  1688  001A48  2EE8               	decfsz	wreg,f,c
  1689  001A4A  D7FE               	goto	u5727
  1690  001A4C  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1691  001A4E  D7FC               	goto	u5727
  1692  001A50  D000               	nop2	
  1693  001A52  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1694  001A54  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1695  001A56  D7ED               	goto	L1
  1696  001A58                     l5253:
  1697                           
  1698                           ;Funciones_Db.c: 79: PORTE = 0;
  1699  001A58  0E00               	movlw	0
  1700  001A5A  6E84               	movwf	3972,c	;volatile
  1701                           
  1702                           ;Funciones_Db.c: 80: PORTB = 0;
  1703  001A5C  0E00               	movlw	0
  1704  001A5E  6E81               	movwf	3969,c	;volatile
  1705                           
  1706                           ;Funciones_Db.c: 81: Lcd_Clear();
  1707  001A60  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1708                           
  1709                           ;Funciones_Db.c: 82: Lcd_Set_Cursor(2, 1);
  1710  001A64  0E01               	movlw	1
  1711  001A66  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1712  001A68  0E02               	movlw	2
  1713  001A6A  ECEF  F011         	call	_Lcd_Set_Cursor
  1714                           
  1715                           ;Funciones_Db.c: 83: Lcd_Write_String("INICIO");
  1716  001A6E  0E7F               	movlw	high STR_10
  1717  001A70  6E1E               	movwf	Lcd_Write_String@a+1,c
  1718  001A72  0EF1               	movlw	low STR_10
  1719  001A74  6E1D               	movwf	Lcd_Write_String@a,c
  1720  001A76  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1721                           
  1722                           ;Funciones_Db.c: 85: BT_Init();
  1723  001A7A  ECA8  F00D         	call	_BT_Init	;wreg free
  1724                           
  1725                           ;Funciones_Db.c: 86: Lcd_Clear();
  1726  001A7E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1727                           
  1728                           ;Funciones_Db.c: 87: Lcd_Set_Cursor(1, 1);
  1729  001A82  0E01               	movlw	1
  1730  001A84  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1731  001A86  0E01               	movlw	1
  1732  001A88  ECEF  F011         	call	_Lcd_Set_Cursor
  1733                           
  1734                           ;Funciones_Db.c: 88: Lcd_Write_String("BT INICIALIZADO");
  1735  001A8C  0E7F               	movlw	high STR_11
  1736  001A8E  6E1E               	movwf	Lcd_Write_String@a+1,c
  1737  001A90  0E53               	movlw	low STR_11
  1738  001A92  6E1D               	movwf	Lcd_Write_String@a,c
  1739  001A94  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1740                           
  1741                           ;Funciones_Db.c: 90: Pause_seg(7);
  1742  001A98  0E07               	movlw	7
  1743  001A9A  EC64  F012         	call	_Pause_seg
  1744                           
  1745                           ;Funciones_Db.c: 91: cad = 0;
  1746  001A9E  0E00               	movlw	0
  1747  001AA0  6E3D               	movwf	_cad,c
  1748                           
  1749                           ;Funciones_Db.c: 92: clrBufferUSART();
  1750  001AA2  EC1A  F013         	call	_clrBufferUSART	;wreg free
  1751                           
  1752                           ;Funciones_Db.c: 93: return;
  1753  001AA6  0012               	return	
  1754  001AA8                     __end_of_Inicializa_Driveby:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           intcon	equ	0xFF2
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _BT_Init *****************
  1768 ;; Defined at:
  1769 ;;		line 16 in file "Bluetooth.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1774 ;; Return value:  Size  Location     Type
  1775 ;;		None               void
  1776 ;; Registers used:
  1777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0
  1784 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1786 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1787 ;;Total ram usage:       18 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    8
  1790 ;; This function calls:
  1791 ;;		_Pause_seg
  1792 ;;		_SendBlueToothCommand
  1793 ;;		_UART1_Init
  1794 ;; This function is called by:
  1795 ;;		_Inicializa_Driveby
  1796 ;;		_EstadoBluetooth
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text3
  1801  001B50                     __ptext3:
  1802                           	opt stack 0
  1803  001B50                     _BT_Init:
  1804                           	opt stack 21
  1805                           
  1806                           ;Bluetooth.c: 18: UART1_Init(51);
  1807                           
  1808                           ;incstack = 0
  1809  001B50  0E33               	movlw	51
  1810  001B52  EC5F  F014         	call	_UART1_Init
  1811                           
  1812                           ;Bluetooth.c: 21: Pause_seg(1);
  1813  001B56  0E01               	movlw	1
  1814  001B58  EC64  F012         	call	_Pause_seg
  1815                           
  1816                           ;Bluetooth.c: 22: char nameBT[18] = {
  1817                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1818                           ;Bluetooth.c: 24: };
  1819  001B5C  EE20  F0DA         	lfsr	2,BT_Init@F5671
  1820  001B60  EE10  F060         	lfsr	1,BT_Init@nameBT
  1821  001B64  0E12               	movlw	18
  1822  001B66                     u5431:
  1823  001B66  CFDE FFE6          	movff	postinc2,postinc1
  1824  001B6A  2EE8               	decfsz	wreg,f,c
  1825  001B6C  D7FC               	goto	u5431
  1826                           
  1827                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1828  001B6E  0E7F               	movlw	high STR_1
  1829  001B70  6E24               	movwf	SendBlueToothCommand@command+1,c
  1830  001B72  0EB7               	movlw	low STR_1
  1831  001B74  6E23               	movwf	SendBlueToothCommand@command,c
  1832  001B76  0E00               	movlw	0
  1833  001B78  6E26               	movwf	SendBlueToothCommand@total+1,c
  1834  001B7A  0E0B               	movlw	11
  1835  001B7C  6E25               	movwf	SendBlueToothCommand@total,c
  1836  001B7E  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1837                           
  1838                           ;Bluetooth.c: 29: Pause_seg(1);
  1839  001B82  0E01               	movlw	1
  1840  001B84  EC64  F012         	call	_Pause_seg
  1841                           
  1842                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1843  001B88  0100               	movlb	0	; () banked
  1844  001B8A  0E00               	movlw	high BT_Init@nameBT
  1845  001B8C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1846  001B8E  0100               	movlb	0	; () banked
  1847  001B90  0E60               	movlw	low BT_Init@nameBT
  1848  001B92  6E23               	movwf	SendBlueToothCommand@command,c
  1849  001B94  0E00               	movlw	0
  1850  001B96  6E26               	movwf	SendBlueToothCommand@total+1,c
  1851  001B98  0E12               	movlw	18
  1852  001B9A  6E25               	movwf	SendBlueToothCommand@total,c
  1853  001B9C  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1854                           
  1855                           ;Bluetooth.c: 33: Pause_seg(2);
  1856  001BA0  0E02               	movlw	2
  1857  001BA2  EC64  F012         	call	_Pause_seg
  1858                           
  1859                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1860  001BA6  0E7F               	movlw	high STR_2
  1861  001BA8  6E24               	movwf	SendBlueToothCommand@command+1,c
  1862  001BAA  0E63               	movlw	low STR_2
  1863  001BAC  6E23               	movwf	SendBlueToothCommand@command,c
  1864  001BAE  0E00               	movlw	0
  1865  001BB0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1866  001BB2  0E0E               	movlw	14
  1867  001BB4  6E25               	movwf	SendBlueToothCommand@total,c
  1868  001BB6  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1869                           
  1870                           ;Bluetooth.c: 36: Pause_seg(2);
  1871  001BBA  0E02               	movlw	2
  1872  001BBC  EC64  F012         	call	_Pause_seg
  1873                           
  1874                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1875  001BC0  0E7F               	movlw	high STR_3
  1876  001BC2  6E24               	movwf	SendBlueToothCommand@command+1,c
  1877  001BC4  0ED9               	movlw	low STR_3
  1878  001BC6  6E23               	movwf	SendBlueToothCommand@command,c
  1879  001BC8  0E00               	movlw	0
  1880  001BCA  6E26               	movwf	SendBlueToothCommand@total+1,c
  1881  001BCC  0E08               	movlw	8
  1882  001BCE  6E25               	movwf	SendBlueToothCommand@total,c
  1883  001BD0  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1884                           
  1885                           ;Bluetooth.c: 41: Pause_seg(2);
  1886  001BD4  0E02               	movlw	2
  1887  001BD6  EC64  F012         	call	_Pause_seg
  1888                           
  1889                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1890  001BDA  0E7F               	movlw	high STR_3
  1891  001BDC  6E24               	movwf	SendBlueToothCommand@command+1,c
  1892  001BDE  0ED9               	movlw	low STR_3
  1893  001BE0  6E23               	movwf	SendBlueToothCommand@command,c
  1894  001BE2  0E00               	movlw	0
  1895  001BE4  6E26               	movwf	SendBlueToothCommand@total+1,c
  1896  001BE6  0E08               	movlw	8
  1897  001BE8  6E25               	movwf	SendBlueToothCommand@total,c
  1898  001BEA  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1899                           
  1900                           ;Bluetooth.c: 44: Pause_seg(2);
  1901  001BEE  0E02               	movlw	2
  1902  001BF0  EC64  F012         	call	_Pause_seg
  1903                           
  1904                           ;Bluetooth.c: 45: return;
  1905  001BF4  0012               	return	
  1906  001BF6                     __end_of_BT_Init:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           intcon	equ	0xFF2
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postinc1	equ	0xFE6
  1916                           postdec1	equ	0xFE5
  1917                           fsr1l	equ	0xFE1
  1918                           postinc2	equ	0xFDE
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _SendBlueToothCommand *****************
  1922 ;; Defined at:
  1923 ;;		line 48 in file "Bluetooth.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1926 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1927 ;;		 -> BT_Init@nameBT(18), 
  1928 ;;  total           2   36[COMRAM] unsigned int 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;		None
  1931 ;; Return value:  Size  Location     Type
  1932 ;;		None               void
  1933 ;; Registers used:
  1934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1940 ;;      Params:         4       0       0       0       0       0       0       0       0
  1941 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1943 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1944 ;;Total ram usage:        4 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    7
  1947 ;; This function calls:
  1948 ;;		_putSTRINGU1
  1949 ;; This function is called by:
  1950 ;;		_BT_Init
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text4
  1955  002870                     __ptext4:
  1956                           	opt stack 0
  1957  002870                     _SendBlueToothCommand:
  1958                           	opt stack 21
  1959                           
  1960                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1961                           
  1962                           ;incstack = 0
  1963  002870  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1964  002874  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1965  002878  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1966  00287C  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1967  002880  EC98  F00E         	call	_putSTRINGU1	;wreg free
  1968                           
  1969                           ;Bluetooth.c: 50: return;
  1970  002884  0012               	return	
  1971  002886                     __end_of_SendBlueToothCommand:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           intcon	equ	0xFF2
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postinc1	equ	0xFE6
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           postinc2	equ	0xFDE
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _putSTRINGU1 *****************
  1987 ;; Defined at:
  1988 ;;		line 18 in file "UART1.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  1991 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1992 ;;		 -> BT_Init@nameBT(18), 
  1993 ;;  total           2   28[COMRAM] unsigned int 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  cont            1   33[COMRAM] unsigned char 
  1996 ;;  last            1   32[COMRAM] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;		None               void
  1999 ;; Registers used:
  2000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2006 ;;      Params:         4       0       0       0       0       0       0       0       0
  2007 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2008 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2009 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2010 ;;Total ram usage:        8 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    6
  2013 ;; This function calls:
  2014 ;;		_putcTxU1
  2015 ;; This function is called by:
  2016 ;;		_SendBlueToothCommand
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text5
  2021  001D30                     __ptext5:
  2022                           	opt stack 0
  2023  001D30                     _putSTRINGU1:
  2024                           	opt stack 21
  2025                           
  2026                           ;UART1.c: 19: unsigned char cont,last;
  2027                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2028                           
  2029                           ;incstack = 0
  2030  001D30  0E00               	movlw	0
  2031  001D32  6E22               	movwf	putSTRINGU1@cont,c
  2032  001D34  0E00               	movlw	0
  2033  001D36  6E21               	movwf	putSTRINGU1@last,c
  2034  001D38  D01F               	goto	l4455
  2035  001D3A                     l4449:
  2036                           
  2037                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2038  001D3A  5022               	movf	putSTRINGU1@cont,w,c
  2039  001D3C  0D01               	mullw	1
  2040  001D3E  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2041  001D42  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2042  001D46  50F3               	movf	prodl,w,c
  2043  001D48  261F               	addwf	??_putSTRINGU1,f,c
  2044  001D4A  50F4               	movf	prodh,w,c
  2045  001D4C  2220               	addwfc	??_putSTRINGU1+1,f,c
  2046  001D4E  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2047  001D52  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2048  001D56  6AF8               	clrf	tblptru,c
  2049  001D58  0E07               	movlw	(high __ramtop+-1)
  2050  001D5A  64F7               	cpfsgt	tblptrh,c
  2051  001D5C  D003               	bra	u4447
  2052  001D5E  0008               	tblrd		*
  2053  001D60  50F5               	movf	tablat,w,c
  2054  001D62  D005               	bra	u4440
  2055  001D64                     u4447:
  2056  001D64  CFF6 FFE9          	movff	tblptrl,fsr0l
  2057  001D68  CFF7 FFEA          	movff	tblptrh,fsr0h
  2058  001D6C  50EF               	movf	indf0,w,c
  2059  001D6E                     u4440:
  2060  001D6E  0900               	iorlw	0
  2061  001D70  A4D8               	btfss	status,2,c
  2062  001D72  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2063  001D76  2A22               	incf	putSTRINGU1@cont,f,c
  2064  001D78                     l4455:
  2065  001D78  5022               	movf	putSTRINGU1@cont,w,c
  2066  001D7A  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2067  001D7C  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2068  001D7E  501D               	movf	putSTRINGU1@total,w,c
  2069  001D80  5C1F               	subwf	??_putSTRINGU1,w,c
  2070  001D82  501E               	movf	putSTRINGU1@total+1,w,c
  2071  001D84  5820               	subwfb	??_putSTRINGU1+1,w,c
  2072  001D86  A0D8               	btfss	status,0,c
  2073  001D88  D7D8               	goto	l4449
  2074                           
  2075                           ;UART1.c: 23: }
  2076                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2077  001D8A  0E00               	movlw	0
  2078  001D8C  6E22               	movwf	putSTRINGU1@cont,c
  2079  001D8E  D015               	goto	l4465
  2080  001D90                     l4459:
  2081                           
  2082                           ;UART1.c: 26: putcTxU1(*dato++);
  2083  001D90  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2084  001D94  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2085  001D98  6AF8               	clrf	tblptru,c
  2086  001D9A  0E07               	movlw	(high __ramtop+-1)
  2087  001D9C  64F7               	cpfsgt	tblptrh,c
  2088  001D9E  D003               	bra	u4477
  2089  001DA0  0008               	tblrd		*
  2090  001DA2  50F5               	movf	tablat,w,c
  2091  001DA4  D005               	bra	u4470
  2092  001DA6                     u4477:
  2093  001DA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2094  001DAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2095  001DAE  50EF               	movf	indf0,w,c
  2096  001DB0                     u4470:
  2097  001DB0  EC67  F014         	call	_putcTxU1
  2098  001DB4  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2099  001DB6  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2100  001DB8  2A22               	incf	putSTRINGU1@cont,f,c
  2101  001DBA                     l4465:
  2102  001DBA  5022               	movf	putSTRINGU1@cont,w,c
  2103  001DBC  5C21               	subwf	putSTRINGU1@last,w,c
  2104  001DBE  A0D8               	btfss	status,0,c
  2105  001DC0  0012               	return	
  2106  001DC2  D7E6               	goto	l4459
  2107  001DC4                     __end_of_putSTRINGU1:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           tblptrh	equ	0xFF7
  2111                           tblptrl	equ	0xFF6
  2112                           tablat	equ	0xFF5
  2113                           prodh	equ	0xFF4
  2114                           prodl	equ	0xFF3
  2115                           intcon	equ	0xFF2
  2116                           indf0	equ	0xFEF
  2117                           postinc0	equ	0xFEE
  2118                           fsr0h	equ	0xFEA
  2119                           fsr0l	equ	0xFE9
  2120                           wreg	equ	0xFE8
  2121                           postinc1	equ	0xFE6
  2122                           postdec1	equ	0xFE5
  2123                           fsr1l	equ	0xFE1
  2124                           postinc2	equ	0xFDE
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _putcTxU1 *****************
  2128 ;; Defined at:
  2129 ;;		line 12 in file "UART1.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  character       1    wreg     unsigned char 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  character       1   25[COMRAM] unsigned char 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;		None               void
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0
  2144 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2146 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        1 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    5
  2150 ;; This function calls:
  2151 ;;		_WriteUSART
  2152 ;; This function is called by:
  2153 ;;		_putSTRINGU1
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text6
  2158  0028CE                     __ptext6:
  2159                           	opt stack 0
  2160  0028CE                     _putcTxU1:
  2161                           	opt stack 21
  2162                           
  2163                           ;incstack = 0
  2164                           ;putcTxU1@character stored from wreg
  2165  0028CE  6E1A               	movwf	putcTxU1@character,c
  2166                           
  2167                           ;UART1.c: 14: WriteUSART(character);
  2168  0028D0  501A               	movf	putcTxU1@character,w,c
  2169  0028D2  EC4D  F014         	call	_WriteUSART
  2170  0028D6                     l229:
  2171  0028D6  B2AC               	btfsc	4012,1,c	;volatile
  2172  0028D8  0012               	return	
  2173  0028DA  D7FD               	goto	l229
  2174  0028DC                     __end_of_putcTxU1:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           indf0	equ	0xFEF
  2184                           postinc0	equ	0xFEE
  2185                           fsr0h	equ	0xFEA
  2186                           fsr0l	equ	0xFE9
  2187                           wreg	equ	0xFE8
  2188                           postinc1	equ	0xFE6
  2189                           postdec1	equ	0xFE5
  2190                           fsr1l	equ	0xFE1
  2191                           postinc2	equ	0xFDE
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _Pause_seg *****************
  2195 ;; Defined at:
  2196 ;;		line 18 in file "Retardos.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  x               1    wreg     unsigned char 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  x               1   29[COMRAM] unsigned char 
  2201 ;;  i               1   30[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;		None               void
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0
  2212 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2214 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2215 ;;Total ram usage:        2 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    5
  2218 ;; This function calls:
  2219 ;;		_Pause_ms
  2220 ;; This function is called by:
  2221 ;;		_BT_Init
  2222 ;;		_Inicializa_Driveby
  2223 ;;		_EstadoBluetooth
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text7
  2228  0024C8                     __ptext7:
  2229                           	opt stack 0
  2230  0024C8                     _Pause_seg:
  2231                           	opt stack 24
  2232                           
  2233                           ;incstack = 0
  2234                           ;Pause_seg@x stored from wreg
  2235  0024C8  6E1E               	movwf	Pause_seg@x,c
  2236                           
  2237                           ;Retardos.c: 19: unsigned char i=0;
  2238  0024CA  0E00               	movlw	0
  2239  0024CC  6E1F               	movwf	Pause_seg@i,c
  2240                           
  2241                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2242  0024CE  0E00               	movlw	0
  2243  0024D0  6E1F               	movwf	Pause_seg@i,c
  2244  0024D2  D019               	goto	l4845
  2245  0024D4                     l4841:
  2246                           
  2247                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2248  0024D4  0E00               	movlw	0
  2249  0024D6  6E1A               	movwf	Pause_ms@x+1,c
  2250  0024D8  0EFA               	movlw	250
  2251  0024DA  6E19               	movwf	Pause_ms@x,c
  2252  0024DC  EC6E  F013         	call	_Pause_ms	;wreg free
  2253  0024E0  0E00               	movlw	0
  2254  0024E2  6E1A               	movwf	Pause_ms@x+1,c
  2255  0024E4  0EFA               	movlw	250
  2256  0024E6  6E19               	movwf	Pause_ms@x,c
  2257  0024E8  EC6E  F013         	call	_Pause_ms	;wreg free
  2258                           
  2259                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2260  0024EC  0E00               	movlw	0
  2261  0024EE  6E1A               	movwf	Pause_ms@x+1,c
  2262  0024F0  0EFA               	movlw	250
  2263  0024F2  6E19               	movwf	Pause_ms@x,c
  2264  0024F4  EC6E  F013         	call	_Pause_ms	;wreg free
  2265  0024F8  0E00               	movlw	0
  2266  0024FA  6E1A               	movwf	Pause_ms@x+1,c
  2267  0024FC  0EFA               	movlw	250
  2268  0024FE  6E19               	movwf	Pause_ms@x,c
  2269  002500  EC6E  F013         	call	_Pause_ms	;wreg free
  2270  002504  2A1F               	incf	Pause_seg@i,f,c
  2271  002506                     l4845:
  2272  002506  501F               	movf	Pause_seg@i,w,c
  2273  002508  5C1E               	subwf	Pause_seg@x,w,c
  2274  00250A  A0D8               	btfss	status,0,c
  2275  00250C  0012               	return	
  2276  00250E  D7E2               	goto	l4841
  2277  002510                     __end_of_Pause_seg:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           intcon	equ	0xFF2
  2286                           indf0	equ	0xFEF
  2287                           postinc0	equ	0xFEE
  2288                           fsr0h	equ	0xFEA
  2289                           fsr0l	equ	0xFE9
  2290                           wreg	equ	0xFE8
  2291                           postinc1	equ	0xFE6
  2292                           postdec1	equ	0xFE5
  2293                           fsr1l	equ	0xFE1
  2294                           postinc2	equ	0xFDE
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _Pause_ms *****************
  2298 ;; Defined at:
  2299 ;;		line 11 in file "Retardos.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  x               2   24[COMRAM] unsigned int 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  i               2   27[COMRAM] unsigned int 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;		None               void
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2313 ;;      Params:         2       0       0       0       0       0       0       0       0
  2314 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2315 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2316 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2317 ;;Total ram usage:        5 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    4
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_Pause_seg
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text8
  2328  0026DC                     __ptext8:
  2329                           	opt stack 0
  2330  0026DC                     _Pause_ms:
  2331                           	opt stack 24
  2332                           
  2333                           ;Retardos.c: 12: unsigned int i=0;
  2334                           
  2335                           ;incstack = 0
  2336  0026DC  0E00               	movlw	0
  2337  0026DE  6E1D               	movwf	Pause_ms@i+1,c
  2338  0026E0  0E00               	movlw	0
  2339  0026E2  6E1C               	movwf	Pause_ms@i,c
  2340                           
  2341                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2342  0026E4  0E00               	movlw	0
  2343  0026E6  6E1D               	movwf	Pause_ms@i+1,c
  2344  0026E8  0E00               	movlw	0
  2345  0026EA  6E1C               	movwf	Pause_ms@i,c
  2346  0026EC  D009               	goto	l208
  2347  0026EE                     l4469:
  2348                           
  2349                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2350  0026EE  0E03               	movlw	3
  2351  0026F0  6E1B               	movwf	??_Pause_ms& (0+255),c
  2352  0026F2  0E98               	movlw	152
  2353  0026F4                     u5737:
  2354  0026F4  2EE8               	decfsz	wreg,f,c
  2355  0026F6  D7FE               	goto	u5737
  2356  0026F8  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2357  0026FA  D7FC               	goto	u5737
  2358  0026FC  4A1C               	infsnz	Pause_ms@i,f,c
  2359  0026FE  2A1D               	incf	Pause_ms@i+1,f,c
  2360  002700                     l208:
  2361  002700  501C               	movf	Pause_ms@i,w,c
  2362  002702  5C19               	subwf	Pause_ms@x,w,c
  2363  002704  501D               	movf	Pause_ms@i+1,w,c
  2364  002706  581A               	subwfb	Pause_ms@x+1,w,c
  2365  002708  A0D8               	btfss	status,0,c
  2366  00270A  0012               	return	
  2367  00270C  D7F0               	goto	l4469
  2368  00270E                     __end_of_Pause_ms:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           prodh	equ	0xFF4
  2375                           prodl	equ	0xFF3
  2376                           intcon	equ	0xFF2
  2377                           indf0	equ	0xFEF
  2378                           postinc0	equ	0xFEE
  2379                           fsr0h	equ	0xFEA
  2380                           fsr0l	equ	0xFE9
  2381                           wreg	equ	0xFE8
  2382                           postinc1	equ	0xFE6
  2383                           postdec1	equ	0xFE5
  2384                           fsr1l	equ	0xFE1
  2385                           postinc2	equ	0xFDE
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _Comando_Tablet *****************
  2389 ;; Defined at:
  2390 ;;		line 98 in file "Funciones_Db.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;		None               void
  2397 ;; Registers used:
  2398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2404 ;;      Params:         0       0       0       0       0       0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2407 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2408 ;;Total ram usage:        0 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    9
  2411 ;; This function calls:
  2412 ;;		_Lcd_Clear
  2413 ;;		_Lcd_Set_Cursor
  2414 ;;		_Lcd_Write_Integer
  2415 ;;		_Lcd_Write_String
  2416 ;;		_PWM_DutyCycle1
  2417 ;;		_PWM_DutyCycle2
  2418 ;;		_PWM_init1
  2419 ;;		_PWM_init2
  2420 ;;		_clrBufferUSART
  2421 ;;		_putcBluetoothInt
  2422 ;;		_putcBluetoothString
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text9
  2429  001580                     __ptext9:
  2430                           	opt stack 0
  2431  001580                     _Comando_Tablet:
  2432                           	opt stack 21
  2433                           
  2434                           ;Funciones_Db.c: 101: switch (BluetoothDato[1]) {
  2435                           
  2436                           ;incstack = 0
  2437  001580  D08C               	goto	l5339
  2438  001582                     l5279:
  2439                           
  2440                           ;Funciones_Db.c: 103: Lcd_Clear();
  2441  001582  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2442                           
  2443                           ;Funciones_Db.c: 104: Lcd_Set_Cursor(1, 1);
  2444  001586  0E01               	movlw	1
  2445  001588  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2446  00158A  0E01               	movlw	1
  2447  00158C  ECEF  F011         	call	_Lcd_Set_Cursor
  2448                           
  2449                           ;Funciones_Db.c: 105: Lcd_Write_String("1");
  2450  001590  0E7F               	movlw	high STR_12
  2451  001592  6E1E               	movwf	Lcd_Write_String@a+1,c
  2452  001594  0EF8               	movlw	low STR_12
  2453  001596  6E1D               	movwf	Lcd_Write_String@a,c
  2454  001598  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2455                           
  2456                           ;Funciones_Db.c: 106: break;
  2457  00159C  D090               	goto	l5341
  2458  00159E                     l5285:
  2459                           
  2460                           ;Funciones_Db.c: 108: Lcd_Clear();
  2461  00159E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2462                           
  2463                           ;Funciones_Db.c: 109: Lcd_Set_Cursor(1, 1);
  2464  0015A2  0E01               	movlw	1
  2465  0015A4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2466  0015A6  0E01               	movlw	1
  2467  0015A8  ECEF  F011         	call	_Lcd_Set_Cursor
  2468                           
  2469                           ;Funciones_Db.c: 110: Lcd_Write_String("2");
  2470  0015AC  0E7F               	movlw	high (STR_20+16)
  2471  0015AE  6E1E               	movwf	Lcd_Write_String@a+1,c
  2472  0015B0  0E51               	movlw	low (STR_20+16)
  2473  0015B2  6E1D               	movwf	Lcd_Write_String@a,c
  2474  0015B4  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2475                           
  2476                           ;Funciones_Db.c: 111: break;
  2477  0015B8  D082               	goto	l5341
  2478  0015BA                     l5291:
  2479                           
  2480                           ;Funciones_Db.c: 114: Lcd_Clear();
  2481  0015BA  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2482                           
  2483                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2484  0015BE  0E01               	movlw	1
  2485  0015C0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2486  0015C2  0E01               	movlw	1
  2487  0015C4  ECEF  F011         	call	_Lcd_Set_Cursor
  2488                           
  2489                           ;Funciones_Db.c: 117: Lcd_Write_String("3");
  2490  0015C8  0E7F               	movlw	high STR_14
  2491  0015CA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2492  0015CC  0EFA               	movlw	low STR_14
  2493  0015CE  6E1D               	movwf	Lcd_Write_String@a,c
  2494  0015D0  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2495                           
  2496                           ;Funciones_Db.c: 118: break;
  2497  0015D4  D074               	goto	l5341
  2498  0015D6                     l5297:
  2499                           
  2500                           ;Funciones_Db.c: 120: Lcd_Clear();
  2501  0015D6  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2502                           
  2503                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2504  0015DA  0E01               	movlw	1
  2505  0015DC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2506  0015DE  0E01               	movlw	1
  2507  0015E0  ECEF  F011         	call	_Lcd_Set_Cursor
  2508                           
  2509                           ;Funciones_Db.c: 122: Lcd_Write_String("4");
  2510  0015E4  0E7F               	movlw	high STR_15
  2511  0015E6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2512  0015E8  0EFC               	movlw	low STR_15
  2513  0015EA  6E1D               	movwf	Lcd_Write_String@a,c
  2514  0015EC  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2515                           
  2516                           ;Funciones_Db.c: 123: putcBluetoothInt(contadorbt);
  2517  0015F0  C0C2  F0B8         	movff	_contadorbt,putcBluetoothInt@a
  2518  0015F4  C0C3  F0B9         	movff	_contadorbt+1,putcBluetoothInt@a+1
  2519  0015F8  EC72  F00F         	call	_putcBluetoothInt	;wreg free
  2520                           
  2521                           ;Funciones_Db.c: 124: putcBluetoothString("\n");
  2522  0015FC  0E7F               	movlw	high (STR_2+13)
  2523  0015FE  6E21               	movwf	putcBluetoothString@a+1,c
  2524  001600  0E70               	movlw	low (STR_2+13)
  2525  001602  6E20               	movwf	putcBluetoothString@a,c
  2526  001604  EC25  F011         	call	_putcBluetoothString	;wreg free
  2527                           
  2528                           ;Funciones_Db.c: 126: contadorbt++;
  2529  001608  0100               	movlb	0	; () banked
  2530  00160A  4BC2               	infsnz	_contadorbt& (0+255),f,b
  2531  00160C  2BC3               	incf	(_contadorbt+1)& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;Funciones_Db.c: 127: if(contadorbt == 10)
  2535  00160E  0100               	movlb	0	; () banked
  2536  001610  51C2               	movf	_contadorbt& (0+255),w,b
  2537  001612  0A0A               	xorlw	10
  2538  001614  11C3               	iorwf	(_contadorbt+1)& (0+255),w,b
  2539  001616  A4D8               	btfss	status,2,c
  2540  001618  D052               	goto	l5341
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;Funciones_Db.c: 128: contadorbt = 0;
  2544  00161A  0E00               	movlw	0
  2545  00161C  0100               	movlb	0	; () banked
  2546  00161E  6FC3               	movwf	(_contadorbt+1)& (0+255),b
  2547  001620  0E00               	movlw	0
  2548  001622  0100               	movlb	0	; () banked
  2549  001624  6FC2               	movwf	_contadorbt& (0+255),b
  2550  001626  D04B               	goto	l5341
  2551  001628                     l5313:
  2552                           
  2553                           ;Funciones_Db.c: 131: Lcd_Clear();
  2554  001628  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2555                           
  2556                           ;Funciones_Db.c: 132: Lcd_Set_Cursor(1, 1);
  2557  00162C  0E01               	movlw	1
  2558  00162E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2559  001630  0E01               	movlw	1
  2560  001632  ECEF  F011         	call	_Lcd_Set_Cursor
  2561                           
  2562                           ;Funciones_Db.c: 133: Lcd_Write_Integer(BluetoothDato[3]);
  2563  001636  0101               	movlb	1	; () banked
  2564  001638  0100               	movlb	0	; () banked
  2565  00163A  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2566  00163E  0100               	movlb	0	; () banked
  2567  001640  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2568  001642  ECFD  F012         	call	_Lcd_Write_Integer	;wreg free
  2569                           
  2570                           ;Funciones_Db.c: 134: Lcd_Set_Cursor(2, 1);
  2571  001646  0E01               	movlw	1
  2572  001648  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2573  00164A  0E02               	movlw	2
  2574  00164C  ECEF  F011         	call	_Lcd_Set_Cursor
  2575                           
  2576                           ;Funciones_Db.c: 135: Lcd_Write_Integer(BluetoothDato[4]);
  2577  001650  0101               	movlb	1	; () banked
  2578  001652  0100               	movlb	0	; () banked
  2579  001654  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2580  001658  0100               	movlb	0	; () banked
  2581  00165A  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2582  00165C  ECFD  F012         	call	_Lcd_Write_Integer	;wreg free
  2583                           
  2584                           ;Funciones_Db.c: 136: PWM_init1(0xff);
  2585  001660  0EFF               	movlw	255
  2586  001662  EC1A  F014         	call	_PWM_init1
  2587                           
  2588                           ;Funciones_Db.c: 137: PWM_init2(0xff);
  2589  001666  0EFF               	movlw	255
  2590  001668  EC0B  F014         	call	_PWM_init2
  2591                           
  2592                           ;Funciones_Db.c: 138: PWM_DutyCycle1(BluetoothDato[3]);
  2593  00166C  0101               	movlb	1	; () banked
  2594  00166E  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2595  001670  EC34  F010         	call	_PWM_DutyCycle1
  2596                           
  2597                           ;Funciones_Db.c: 139: PWM_DutyCycle2(BluetoothDato[4]);
  2598  001674  0101               	movlb	1	; () banked
  2599  001676  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2600  001678  ECF6  F00F         	call	_PWM_DutyCycle2
  2601                           
  2602                           ;Funciones_Db.c: 140: break;
  2603  00167C  D020               	goto	l5341
  2604  00167E                     l5331:
  2605                           
  2606                           ;Funciones_Db.c: 142: Lcd_Clear();
  2607  00167E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2608                           
  2609                           ;Funciones_Db.c: 143: Lcd_Set_Cursor(1, 1);
  2610  001682  0E01               	movlw	1
  2611  001684  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2612  001686  0E01               	movlw	1
  2613  001688  ECEF  F011         	call	_Lcd_Set_Cursor
  2614                           
  2615                           ;Funciones_Db.c: 144: Lcd_Write_String("Default");
  2616  00168C  0E7F               	movlw	high STR_17
  2617  00168E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2618  001690  0EE2               	movlw	low STR_17
  2619  001692  6E1D               	movwf	Lcd_Write_String@a,c
  2620  001694  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2621                           
  2622                           ;Funciones_Db.c: 145: break;
  2623  001698  D012               	goto	l5341
  2624  00169A                     l5339:
  2625  00169A  0101               	movlb	1	; () banked
  2626  00169C  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2627                           
  2628                           ; Switch size 1, requested type "space"
  2629                           ; Number of cases is 5, Range of values is 1 to 5
  2630                           ; switch strategies available:
  2631                           ; Name         Instructions Cycles
  2632                           ; simple_byte           16     9 (average)
  2633                           ;	Chosen strategy is simple_byte
  2634  00169E  0A01               	xorlw	1	; case 1
  2635  0016A0  B4D8               	btfsc	status,2,c
  2636  0016A2  D76F               	goto	l5279
  2637  0016A4  0A03               	xorlw	3	; case 2
  2638  0016A6  B4D8               	btfsc	status,2,c
  2639  0016A8  D77A               	goto	l5285
  2640  0016AA  0A01               	xorlw	1	; case 3
  2641  0016AC  B4D8               	btfsc	status,2,c
  2642  0016AE  D785               	goto	l5291
  2643  0016B0  0A07               	xorlw	7	; case 4
  2644  0016B2  B4D8               	btfsc	status,2,c
  2645  0016B4  D790               	goto	l5297
  2646  0016B6  0A01               	xorlw	1	; case 5
  2647  0016B8  B4D8               	btfsc	status,2,c
  2648  0016BA  D7B6               	goto	l5313
  2649  0016BC  D7E0               	goto	l5331
  2650  0016BE                     l5341:
  2651                           
  2652                           ;Funciones_Db.c: 147: clrBufferUSART();
  2653  0016BE  EC1A  F013         	call	_clrBufferUSART	;wreg free
  2654                           
  2655                           ;Funciones_Db.c: 148: return;
  2656  0016C2  0012               	return	
  2657  0016C4                     __end_of_Comando_Tablet:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           indf0	equ	0xFEF
  2667                           postinc0	equ	0xFEE
  2668                           fsr0h	equ	0xFEA
  2669                           fsr0l	equ	0xFE9
  2670                           wreg	equ	0xFE8
  2671                           postinc1	equ	0xFE6
  2672                           postdec1	equ	0xFE5
  2673                           fsr1l	equ	0xFE1
  2674                           postinc2	equ	0xFDE
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _putcBluetoothString *****************
  2678 ;; Defined at:
  2679 ;;		line 90 in file "Bluetooth.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  a               2   31[COMRAM] PTR unsigned char 
  2682 ;;		 -> STR_16(2), 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  i               2   35[COMRAM] int 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;		None               void
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2694 ;;      Params:         2       0       0       0       0       0       0       0       0
  2695 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2696 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2697 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2698 ;;Total ram usage:        6 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    6
  2701 ;; This function calls:
  2702 ;;		_UART1_Init
  2703 ;;		_WriteUSART
  2704 ;; This function is called by:
  2705 ;;		_Comando_Tablet
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text10
  2710  00224A                     __ptext10:
  2711                           	opt stack 0
  2712  00224A                     _putcBluetoothString:
  2713                           	opt stack 23
  2714                           
  2715                           ;Bluetooth.c: 92: int i;
  2716                           ;Bluetooth.c: 93: UART1_Init(51);
  2717                           
  2718                           ;incstack = 0
  2719  00224A  0E33               	movlw	51
  2720  00224C  EC5F  F014         	call	_UART1_Init
  2721                           
  2722                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2723  002250  0E00               	movlw	0
  2724  002252  6E25               	movwf	putcBluetoothString@i+1,c
  2725  002254  0E00               	movlw	0
  2726  002256  6E24               	movwf	putcBluetoothString@i,c
  2727  002258  D015               	goto	l5135
  2728  00225A                     l5131:
  2729                           
  2730                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2731  00225A  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2732  00225E  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2733  002262  5024               	movf	putcBluetoothString@i,w,c
  2734  002264  2622               	addwf	??_putcBluetoothString,f,c
  2735  002266  5025               	movf	putcBluetoothString@i+1,w,c
  2736  002268  2223               	addwfc	??_putcBluetoothString+1,f,c
  2737  00226A  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2738  00226E  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2739  002272                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2740  002272  6AF8               	clrf	tblptru,c
  2741  002274                     	endif
  2742  002274                     	if	0	;tblptru may be non-zero
  2743  002274                     	endif
  2744  002274  0008               	tblrd		*
  2745  002276  50F5               	movf	tablat,w,c
  2746  002278  EC4D  F014         	call	_WriteUSART
  2747  00227C                     l59:
  2748  00227C  A2AC               	btfss	4012,1,c	;volatile
  2749  00227E  D7FE               	goto	l59
  2750  002280  4A24               	infsnz	putcBluetoothString@i,f,c
  2751  002282  2A25               	incf	putcBluetoothString@i+1,f,c
  2752  002284                     l5135:
  2753  002284  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2754  002288  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2755  00228C  5024               	movf	putcBluetoothString@i,w,c
  2756  00228E  2622               	addwf	??_putcBluetoothString,f,c
  2757  002290  5025               	movf	putcBluetoothString@i+1,w,c
  2758  002292  2223               	addwfc	??_putcBluetoothString+1,f,c
  2759  002294  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2760  002298  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2761  00229C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2762  00229C  6AF8               	clrf	tblptru,c
  2763  00229E                     	endif
  2764  00229E                     	if	0	;tblptru may be non-zero
  2765  00229E                     	endif
  2766  00229E  0008               	tblrd		*
  2767  0022A0  50F5               	movf	tablat,w,c
  2768  0022A2  0900               	iorlw	0
  2769  0022A4  A4D8               	btfss	status,2,c
  2770  0022A6  D7D9               	goto	l5131
  2771                           
  2772                           ;Bluetooth.c: 98: }
  2773                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2774  0022A8  0E4F               	movlw	79
  2775  0022AA  16AB               	andwf	4011,f,c	;volatile
  2776  0022AC  9AAC               	bcf	4012,5,c	;volatile
  2777  0022AE  0ECF               	movlw	207
  2778  0022B0  169D               	andwf	3997,f,c	;volatile
  2779                           
  2780                           ;Bluetooth.c: 100: return;
  2781  0022B2  0012               	return	
  2782  0022B4                     __end_of_putcBluetoothString:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           indf0	equ	0xFEF
  2792                           postinc0	equ	0xFEE
  2793                           fsr0h	equ	0xFEA
  2794                           fsr0l	equ	0xFE9
  2795                           wreg	equ	0xFE8
  2796                           postinc1	equ	0xFE6
  2797                           postdec1	equ	0xFE5
  2798                           fsr1l	equ	0xFE1
  2799                           postinc2	equ	0xFDE
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _putcBluetoothInt *****************
  2803 ;; Defined at:
  2804 ;;		line 102 in file "Bluetooth.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  a               2   88[BANK0 ] int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  s              20    0[BANK1 ] unsigned char [20]
  2809 ;;  i               2   20[BANK1 ] int 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;		None               void
  2812 ;; Registers used:
  2813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2819 ;;      Params:         0       2       0       0       0       0       0       0       0
  2820 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2822 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2823 ;;Total ram usage:       24 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    8
  2826 ;; This function calls:
  2827 ;;		_UART1_Init
  2828 ;;		_WriteUSART
  2829 ;;		_sprintf
  2830 ;; This function is called by:
  2831 ;;		_Comando_Tablet
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text11
  2836  001EE4                     __ptext11:
  2837                           	opt stack 0
  2838  001EE4                     _putcBluetoothInt:
  2839                           	opt stack 21
  2840                           
  2841                           ;Bluetooth.c: 104: int i;
  2842                           ;Bluetooth.c: 105: unsigned char s[20];
  2843                           ;Bluetooth.c: 106: UART1_Init(51);
  2844                           
  2845                           ;incstack = 0
  2846  001EE4  0E33               	movlw	51
  2847  001EE6  EC5F  F014         	call	_UART1_Init
  2848                           
  2849                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2850  001EEA  0101               	movlb	1	; () banked
  2851  001EEC  0E01               	movlw	high putcBluetoothInt@s
  2852  001EEE  0100               	movlb	0	; () banked
  2853  001EF0  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2854  001EF2  0101               	movlb	1	; () banked
  2855  001EF4  0E5A               	movlw	low putcBluetoothInt@s
  2856  001EF6  0100               	movlb	0	; () banked
  2857  001EF8  6F88               	movwf	sprintf@sp& (0+255),b
  2858  001EFA  0E7F               	movlw	high (STR_19+10)
  2859  001EFC  0100               	movlb	0	; () banked
  2860  001EFE  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2861  001F00  0EB4               	movlw	low (STR_19+10)
  2862  001F02  0100               	movlb	0	; () banked
  2863  001F04  6F8A               	movwf	sprintf@f& (0+255),b
  2864  001F06  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2865  001F0A  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2866  001F0E  EC0E  F000         	call	_sprintf	;wreg free
  2867                           
  2868                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2869  001F12  0E00               	movlw	0
  2870  001F14  0101               	movlb	1	; () banked
  2871  001F16  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2872  001F18  0E00               	movlw	0
  2873  001F1A  0101               	movlb	1	; () banked
  2874  001F1C  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2875  001F1E  D012               	goto	l5153
  2876  001F20                     l5149:
  2877                           
  2878                           ; BSR set to: 1
  2879                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2880  001F20  0101               	movlb	1	; () banked
  2881  001F22  0E5A               	movlw	low putcBluetoothInt@s
  2882  001F24  0101               	movlb	1	; () banked
  2883  001F26  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2884  001F28  6ED9               	movwf	fsr2l,c
  2885  001F2A  0101               	movlb	1	; () banked
  2886  001F2C  0E01               	movlw	high putcBluetoothInt@s
  2887  001F2E  0101               	movlb	1	; () banked
  2888  001F30  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2889  001F32  6EDA               	movwf	fsr2h,c
  2890  001F34  50DF               	movf	indf2,w,c
  2891  001F36  EC4D  F014         	call	_WriteUSART
  2892  001F3A                     l68:
  2893  001F3A  A2AC               	btfss	4012,1,c	;volatile
  2894  001F3C  D7FE               	goto	l68
  2895  001F3E  0101               	movlb	1	; () banked
  2896  001F40  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2897  001F42  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2898  001F44                     l5153:
  2899                           
  2900                           ; BSR set to: 1
  2901  001F44  0101               	movlb	1	; () banked
  2902  001F46  0E5A               	movlw	low putcBluetoothInt@s
  2903  001F48  0101               	movlb	1	; () banked
  2904  001F4A  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2905  001F4C  6ED9               	movwf	fsr2l,c
  2906  001F4E  0101               	movlb	1	; () banked
  2907  001F50  0E01               	movlw	high putcBluetoothInt@s
  2908  001F52  0101               	movlb	1	; () banked
  2909  001F54  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2910  001F56  6EDA               	movwf	fsr2h,c
  2911  001F58  50DF               	movf	indf2,w,c
  2912  001F5A  A4D8               	btfss	status,2,c
  2913  001F5C  D7E1               	goto	l5149
  2914                           
  2915                           ; BSR set to: 1
  2916                           ;Bluetooth.c: 112: }
  2917                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2918                           
  2919                           ; BSR set to: 1
  2920  001F5E  0E4F               	movlw	79
  2921  001F60  16AB               	andwf	4011,f,c	;volatile
  2922                           
  2923                           ; BSR set to: 1
  2924  001F62  9AAC               	bcf	4012,5,c	;volatile
  2925  001F64  0ECF               	movlw	207
  2926  001F66  169D               	andwf	3997,f,c	;volatile
  2927                           
  2928                           ; BSR set to: 1
  2929                           
  2930                           ; BSR set to: 1
  2931                           ;Bluetooth.c: 114: return;
  2932  001F68  0012               	return	
  2933  001F6A                     __end_of_putcBluetoothInt:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           prodh	equ	0xFF4
  2940                           prodl	equ	0xFF3
  2941                           intcon	equ	0xFF2
  2942                           indf0	equ	0xFEF
  2943                           postinc0	equ	0xFEE
  2944                           fsr0h	equ	0xFEA
  2945                           fsr0l	equ	0xFE9
  2946                           wreg	equ	0xFE8
  2947                           postinc1	equ	0xFE6
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _WriteUSART *****************
  2957 ;; Defined at:
  2958 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  data            1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  data            1   24[COMRAM] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;		None               void
  2965 ;; Registers used:
  2966 ;;		wreg
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2972 ;;      Params:         0       0       0       0       0       0       0       0       0
  2973 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2975 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2976 ;;Total ram usage:        1 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    4
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_putcBluetoothString
  2983 ;;		_putcBluetoothInt
  2984 ;;		_putcTxU1
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text12
  2989  00289A                     __ptext12:
  2990                           	opt stack 0
  2991  00289A                     _WriteUSART:
  2992                           	opt stack 21
  2993                           
  2994                           ; BSR set to: 1
  2995                           ;incstack = 0
  2996                           ;WriteUSART@data stored from wreg
  2997  00289A  6E19               	movwf	WriteUSART@data,c
  2998  00289C  ACAC               	btfss	4012,6,c	;volatile
  2999  00289E  D003               	goto	l4189
  3000  0028A0  90AC               	bcf	4012,0,c	;volatile
  3001  0028A2  B23C               	btfsc	_USART_Status,1,c
  3002  0028A4  80AC               	bsf	4012,0,c	;volatile
  3003  0028A6                     l4189:
  3004  0028A6  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3005  0028AA  0012               	return	
  3006  0028AC                     __end_of_WriteUSART:
  3007                           	opt stack 0
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           prodh	equ	0xFF4
  3013                           prodl	equ	0xFF3
  3014                           intcon	equ	0xFF2
  3015                           indf0	equ	0xFEF
  3016                           postinc0	equ	0xFEE
  3017                           fsr0h	equ	0xFEA
  3018                           fsr0l	equ	0xFE9
  3019                           wreg	equ	0xFE8
  3020                           postinc1	equ	0xFE6
  3021                           postdec1	equ	0xFE5
  3022                           fsr1l	equ	0xFE1
  3023                           indf2	equ	0xFDF
  3024                           postinc2	equ	0xFDE
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _UART1_Init *****************
  3030 ;; Defined at:
  3031 ;;		line 5 in file "UART1.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  bdr             1    wreg     unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  bdr             1   30[COMRAM] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;		None               void
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3045 ;;      Params:         0       0       0       0       0       0       0       0       0
  3046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3048 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3049 ;;Total ram usage:        1 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    5
  3052 ;; This function calls:
  3053 ;;		_OpenUSART
  3054 ;; This function is called by:
  3055 ;;		_BT_Init
  3056 ;;		_putcBluetoothString
  3057 ;;		_putcBluetoothInt
  3058 ;;		_main
  3059 ;;		_EstadoBluetooth
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text13
  3064  0028BE                     __ptext13:
  3065                           	opt stack 0
  3066  0028BE                     _UART1_Init:
  3067                           	opt stack 25
  3068                           
  3069                           ;incstack = 0
  3070                           ;UART1_Init@bdr stored from wreg
  3071  0028BE  6E1F               	movwf	UART1_Init@bdr,c
  3072                           
  3073                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3074  0028C0  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3075  0028C4  6A1A               	clrf	OpenUSART@spbrg+1,c
  3076  0028C6  0E7C               	movlw	124
  3077  0028C8  EC5A  F011         	call	_OpenUSART
  3078  0028CC  0012               	return	
  3079  0028CE                     __end_of_UART1_Init:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           indf0	equ	0xFEF
  3089                           postinc0	equ	0xFEE
  3090                           fsr0h	equ	0xFEA
  3091                           fsr0l	equ	0xFE9
  3092                           wreg	equ	0xFE8
  3093                           postinc1	equ	0xFE6
  3094                           postdec1	equ	0xFE5
  3095                           fsr1l	equ	0xFE1
  3096                           indf2	equ	0xFDF
  3097                           postinc2	equ	0xFDE
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _OpenUSART *****************
  3103 ;; Defined at:
  3104 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  config          1    wreg     unsigned char 
  3107 ;;  spbrg           2   24[COMRAM] unsigned int 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  config          1   29[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, status,2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3119 ;;      Params:         2       0       0       0       0       0       0       0       0
  3120 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3121 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3122 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3123 ;;Total ram usage:        6 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_UART1_Init
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text14
  3134  0022B4                     __ptext14:
  3135                           	opt stack 0
  3136  0022B4                     _OpenUSART:
  3137                           	opt stack 25
  3138                           
  3139                           ;incstack = 0
  3140                           ;OpenUSART@config stored from wreg
  3141  0022B4  6E1E               	movwf	OpenUSART@config,c
  3142  0022B6  0E00               	movlw	0
  3143  0022B8  6EAC               	movwf	4012,c	;volatile
  3144  0022BA  0E00               	movlw	0
  3145  0022BC  6EAB               	movwf	4011,c	;volatile
  3146  0022BE  B01E               	btfsc	OpenUSART@config,0,c
  3147  0022C0  88AC               	bsf	4012,4,c	;volatile
  3148  0022C2  A21E               	btfss	OpenUSART@config,1,c
  3149  0022C4  D002               	goto	l4483
  3150  0022C6  8CAC               	bsf	4012,6,c	;volatile
  3151  0022C8  8CAB               	bsf	4011,6,c	;volatile
  3152  0022CA                     l4483:
  3153  0022CA  B41E               	btfsc	OpenUSART@config,2,c
  3154  0022CC  8EAC               	bsf	4012,7,c	;volatile
  3155  0022CE  A61E               	btfss	OpenUSART@config,3,c
  3156  0022D0  D002               	goto	l586
  3157  0022D2  88AB               	bsf	4011,4,c	;volatile
  3158  0022D4  D001               	goto	l4491
  3159  0022D6                     l586:
  3160  0022D6  8AAB               	bsf	4011,5,c	;volatile
  3161  0022D8                     l4491:
  3162  0022D8  B81E               	btfsc	OpenUSART@config,4,c
  3163  0022DA  84AC               	bsf	4012,2,c	;volatile
  3164  0022DC  989E               	bcf	3998,4,c	;volatile
  3165  0022DE  BA1E               	btfsc	OpenUSART@config,5,c
  3166  0022E0  86AB               	bsf	4011,3,c	;volatile
  3167  0022E2  AC1E               	btfss	OpenUSART@config,6,c
  3168  0022E4  D002               	goto	l590
  3169  0022E6  8A9D               	bsf	3997,5,c	;volatile
  3170  0022E8  D001               	goto	l591
  3171  0022EA                     l590:
  3172  0022EA  9A9D               	bcf	3997,5,c	;volatile
  3173  0022EC                     l591:
  3174  0022EC  9A9E               	bcf	3998,5,c	;volatile
  3175  0022EE  AE1E               	btfss	OpenUSART@config,7,c
  3176  0022F0  D002               	goto	l592
  3177  0022F2  889D               	bsf	3997,4,c	;volatile
  3178  0022F4  D001               	goto	l593
  3179  0022F6                     l592:
  3180  0022F6  989D               	bcf	3997,4,c	;volatile
  3181  0022F8                     l593:
  3182  0022F8  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3183  0022FC  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3184  002300  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3185  002304  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3186  002306  501C               	movf	??_OpenUSART+1,w,c
  3187  002308  6EB0               	movwf	4016,c	;volatile
  3188  00230A  8AAC               	bsf	4012,5,c	;volatile
  3189  00230C  8EAB               	bsf	4011,7,c	;volatile
  3190  00230E  9C94               	bcf	3988,6,c	;volatile
  3191  002310  8E94               	bsf	3988,7,c	;volatile
  3192  002312  B8AC               	btfsc	4012,4,c	;volatile
  3193  002314  BEAC               	btfsc	4012,7,c	;volatile
  3194  002316  D001               	goto	l595
  3195  002318  8C94               	bsf	3988,6,c	;volatile
  3196  00231A                     l595:
  3197  00231A  0012               	return	
  3198  00231C                     __end_of_OpenUSART:
  3199                           	opt stack 0
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           intcon	equ	0xFF2
  3207                           indf0	equ	0xFEF
  3208                           postinc0	equ	0xFEE
  3209                           fsr0h	equ	0xFEA
  3210                           fsr0l	equ	0xFE9
  3211                           wreg	equ	0xFE8
  3212                           postinc1	equ	0xFE6
  3213                           postdec1	equ	0xFE5
  3214                           fsr1l	equ	0xFE1
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _clrBufferUSART *****************
  3222 ;; Defined at:
  3223 ;;		line 68 in file "Bluetooth.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  i               2   24[COMRAM] int 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;		None               void
  3230 ;; Registers used:
  3231 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0
  3238 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3240 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3241 ;;Total ram usage:        2 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    4
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_Inicializa_Driveby
  3248 ;;		_Comando_Tablet
  3249 ;;		_main
  3250 ;;		_CheckTX
  3251 ;;		_EstadoBluetooth
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text15
  3256  002634                     __ptext15:
  3257                           	opt stack 0
  3258  002634                     _clrBufferUSART:
  3259                           	opt stack 26
  3260                           
  3261                           ;Bluetooth.c: 69: int i;
  3262                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3263                           
  3264                           ;incstack = 0
  3265  002634  0E00               	movlw	0
  3266  002636  6E1A               	movwf	clrBufferUSART@i+1,c
  3267  002638  0E00               	movlw	0
  3268  00263A  6E19               	movwf	clrBufferUSART@i,c
  3269  00263C  501A               	movf	clrBufferUSART@i+1,w,c
  3270  00263E  0A80               	xorlw	128
  3271  002640  0F80               	addlw	-128
  3272  002642  0E14               	movlw	20
  3273  002644  B4D8               	btfsc	status,2,c
  3274  002646  5C19               	subwf	clrBufferUSART@i,w,c
  3275  002648  B0D8               	btfsc	status,0,c
  3276  00264A  D00F               	goto	l54
  3277                           
  3278                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3279  00264C  0101               	movlb	1	; () banked
  3280  00264E  0E28               	movlw	low _BluetoothDato
  3281  002650  2419               	addwf	clrBufferUSART@i,w,c
  3282  002652  6ED9               	movwf	fsr2l,c
  3283  002654  0101               	movlb	1	; () banked
  3284  002656  0E01               	movlw	high _BluetoothDato
  3285  002658  201A               	addwfc	clrBufferUSART@i+1,w,c
  3286  00265A  6EDA               	movwf	fsr2h,c
  3287  00265C  0E00               	movlw	0
  3288  00265E  6EDF               	movwf	indf2,c
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;Bluetooth.c: 72: cad = 0;
  3292  002660  0E00               	movlw	0
  3293  002662  6E3D               	movwf	_cad,c
  3294                           
  3295                           ; BSR set to: 1
  3296  002664  4A19               	infsnz	clrBufferUSART@i,f,c
  3297  002666  2A1A               	incf	clrBufferUSART@i+1,f,c
  3298  002668  D7E9               	goto	L2
  3299  00266A                     l54:
  3300  00266A  0012               	return	
  3301  00266C                     __end_of_clrBufferUSART:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           indf0	equ	0xFEF
  3311                           postinc0	equ	0xFEE
  3312                           fsr0h	equ	0xFEA
  3313                           fsr0l	equ	0xFE9
  3314                           wreg	equ	0xFE8
  3315                           postinc1	equ	0xFE6
  3316                           postdec1	equ	0xFE5
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function _PWM_init2 *****************
  3325 ;; Defined at:
  3326 ;;		line 42 in file "pwm.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  period          1    wreg     unsigned char 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  period          1   27[COMRAM] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;		None               void
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3340 ;;      Params:         0       0       0       0       0       0       0       0       0
  3341 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3342 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3343 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3344 ;;Total ram usage:        1 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    5
  3347 ;; This function calls:
  3348 ;;		_OpenPWM2
  3349 ;; This function is called by:
  3350 ;;		_Comando_Tablet
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text16
  3355  002816                     __ptext16:
  3356                           	opt stack 0
  3357  002816                     _PWM_init2:
  3358                           	opt stack 24
  3359                           
  3360                           ;incstack = 0
  3361                           ;PWM_init2@period stored from wreg
  3362  002816  6E1C               	movwf	PWM_init2@period,c
  3363                           
  3364                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3365  002818  0EFE               	movlw	254
  3366  00281A  6E47               	movwf	_Timer2Config,c
  3367                           
  3368                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3369  00281C  5047               	movf	_Timer2Config,w,c
  3370  00281E  0BFB               	andlw	251
  3371  002820  6ECA               	movwf	4042,c	;volatile
  3372                           
  3373                           ;pwm.c: 47: TMR2 = 0;
  3374  002822  0E00               	movlw	0
  3375  002824  6ECC               	movwf	4044,c	;volatile
  3376                           
  3377                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3378  002826  929E               	bcf	3998,1,c	;volatile
  3379                           
  3380                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3381  002828  929D               	bcf	3997,1,c	;volatile
  3382                           
  3383                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3384  00282A  84CA               	bsf	4042,2,c	;volatile
  3385                           
  3386                           ;pwm.c: 51: OpenPWM2(period);
  3387  00282C  501C               	movf	PWM_init2@period,w,c
  3388  00282E  ECA6  F012         	call	_OpenPWM2
  3389                           
  3390                           ;pwm.c: 53: return;
  3391  002832  0012               	return	
  3392  002834                     __end_of_PWM_init2:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           intcon	equ	0xFF2
  3401                           indf0	equ	0xFEF
  3402                           postinc0	equ	0xFEE
  3403                           fsr0h	equ	0xFEA
  3404                           fsr0l	equ	0xFE9
  3405                           wreg	equ	0xFE8
  3406                           postinc1	equ	0xFE6
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _OpenPWM2 *****************
  3416 ;; Defined at:
  3417 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  period          1    wreg     unsigned char 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  period          1   25[COMRAM] unsigned char 
  3422 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3423 ;;  pmmode          1    0        unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;		None               void
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3433 ;;      Params:         0       0       0       0       0       0       0       0       0
  3434 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3435 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3436 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3437 ;;Total ram usage:        3 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    4
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_PWM_init2
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text17
  3448  00254C                     __ptext17:
  3449                           	opt stack 0
  3450  00254C                     _OpenPWM2:
  3451                           	opt stack 24
  3452                           
  3453                           ;incstack = 0
  3454                           ;OpenPWM2@period stored from wreg
  3455  00254C  6E1A               	movwf	OpenPWM2@period,c
  3456  00254E  0E0C               	movlw	12
  3457  002550  6EBA               	movwf	4026,c	;volatile
  3458  002552  0E05               	movlw	5
  3459  002554  6EF6               	movwf	tblptrl,c
  3460  002556                     	if	1	;There is more than 1 active tblptr byte
  3461  002556  0E00               	movlw	0
  3462  002558  6EF7               	movwf	tblptrh,c
  3463  00255A                     	endif
  3464  00255A                     	if	1	;There are 3 active tblptr bytes
  3465  00255A  0E30               	movlw	48
  3466  00255C  6EF8               	movwf	tblptru,c
  3467  00255E                     	endif
  3468  00255E  0008               	tblrd		*
  3469  002560  CFF5 F019          	movff	tablat,??_OpenPWM2
  3470  002564  A019               	btfss	??_OpenPWM2,0,c
  3471  002566  D002               	goto	l3643
  3472  002568  681B               	setf	OpenPWM2@ccp2mx,c
  3473  00256A  D002               	goto	l552
  3474  00256C                     l3643:
  3475  00256C  0E00               	movlw	0
  3476  00256E  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3477  002570                     l552:
  3478  002570  501B               	movf	OpenPWM2@ccp2mx,w,c
  3479  002572  B4D8               	btfsc	status,2,c
  3480  002574  D002               	goto	l553
  3481  002576  9294               	bcf	3988,1,c	;volatile
  3482  002578  D001               	goto	l554
  3483  00257A                     l553:
  3484  00257A  9693               	bcf	3987,3,c	;volatile
  3485  00257C                     l554:
  3486  00257C  94CA               	bcf	4042,2,c	;volatile
  3487  00257E  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3488  002582  84CA               	bsf	4042,2,c	;volatile
  3489  002584  0012               	return	
  3490  002586                     __end_of_OpenPWM2:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           indf0	equ	0xFEF
  3500                           postinc0	equ	0xFEE
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           postinc1	equ	0xFE6
  3505                           postdec1	equ	0xFE5
  3506                           fsr1l	equ	0xFE1
  3507                           indf2	equ	0xFDF
  3508                           postinc2	equ	0xFDE
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _PWM_init1 *****************
  3514 ;; Defined at:
  3515 ;;		line 20 in file "pwm.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  period          1    wreg     unsigned char 
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  period          1   25[COMRAM] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;		None               void
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3529 ;;      Params:         0       0       0       0       0       0       0       0       0
  3530 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3531 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3532 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3533 ;;Total ram usage:        1 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    5
  3536 ;; This function calls:
  3537 ;;		_OpenPWM1
  3538 ;; This function is called by:
  3539 ;;		_Comando_Tablet
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text18
  3544  002834                     __ptext18:
  3545                           	opt stack 0
  3546  002834                     _PWM_init1:
  3547                           	opt stack 24
  3548                           
  3549                           ;incstack = 0
  3550                           ;PWM_init1@period stored from wreg
  3551  002834  6E1A               	movwf	PWM_init1@period,c
  3552                           
  3553                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3554  002836  0EFE               	movlw	254
  3555  002838  6E47               	movwf	_Timer2Config,c
  3556                           
  3557                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3558  00283A  5047               	movf	_Timer2Config,w,c
  3559  00283C  0BFB               	andlw	251
  3560  00283E  6ECA               	movwf	4042,c	;volatile
  3561                           
  3562                           ;pwm.c: 25: TMR2 = 0;
  3563  002840  0E00               	movlw	0
  3564  002842  6ECC               	movwf	4044,c	;volatile
  3565                           
  3566                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3567  002844  929E               	bcf	3998,1,c	;volatile
  3568                           
  3569                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3570  002846  929D               	bcf	3997,1,c	;volatile
  3571                           
  3572                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3573  002848  84CA               	bsf	4042,2,c	;volatile
  3574                           
  3575                           ;pwm.c: 29: OpenPWM1(period);
  3576  00284A  501A               	movf	PWM_init1@period,w,c
  3577  00284C  EC56  F014         	call	_OpenPWM1
  3578                           
  3579                           ;pwm.c: 31: return;
  3580  002850  0012               	return	
  3581  002852                     __end_of_PWM_init1:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           indf0	equ	0xFEF
  3591                           postinc0	equ	0xFEE
  3592                           fsr0h	equ	0xFEA
  3593                           fsr0l	equ	0xFE9
  3594                           wreg	equ	0xFE8
  3595                           postinc1	equ	0xFE6
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _OpenPWM1 *****************
  3605 ;; Defined at:
  3606 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  period          1    wreg     unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  period          1   24[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0
  3621 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_PWM_init1
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text19
  3635  0028AC                     __ptext19:
  3636                           	opt stack 0
  3637  0028AC                     _OpenPWM1:
  3638                           	opt stack 24
  3639                           
  3640                           ;incstack = 0
  3641                           ;OpenPWM1@period stored from wreg
  3642  0028AC  6E19               	movwf	OpenPWM1@period,c
  3643  0028AE  0E0C               	movlw	12
  3644  0028B0  12BD               	iorwf	4029,f,c	;volatile
  3645  0028B2  9494               	bcf	3988,2,c	;volatile
  3646  0028B4  94CA               	bcf	4042,2,c	;volatile
  3647  0028B6  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3648  0028BA  84CA               	bsf	4042,2,c	;volatile
  3649  0028BC  0012               	return	
  3650  0028BE                     __end_of_OpenPWM1:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           indf0	equ	0xFEF
  3660                           postinc0	equ	0xFEE
  3661                           fsr0h	equ	0xFEA
  3662                           fsr0l	equ	0xFE9
  3663                           wreg	equ	0xFE8
  3664                           postinc1	equ	0xFE6
  3665                           postdec1	equ	0xFE5
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _PWM_DutyCycle2 *****************
  3674 ;; Defined at:
  3675 ;;		line 55 in file "pwm.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  percentageDu    1    wreg     unsigned char 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3680 ;;  DC              2   41[BANK0 ] unsigned int 
  3681 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;		None               void
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, status,0, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0
  3692 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3693 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3694 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3695 ;;Total ram usage:        9 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    6
  3698 ;; This function calls:
  3699 ;;		_SetDCPWM2
  3700 ;;		___ftmul
  3701 ;;		___fttol
  3702 ;;		___lbtoft
  3703 ;; This function is called by:
  3704 ;;		_Comando_Tablet
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text20
  3709  001FEC                     __ptext20:
  3710                           	opt stack 0
  3711  001FEC                     _PWM_DutyCycle2:
  3712                           	opt stack 23
  3713                           
  3714                           ;incstack = 0
  3715                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3716  001FEC  0100               	movlb	0	; () banked
  3717  001FEE  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3721  001FF0  0E00               	movlw	0
  3722  001FF2  0100               	movlb	0	; () banked
  3723  001FF4  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3724  001FF6  0E00               	movlw	0
  3725  001FF8  0100               	movlb	0	; () banked
  3726  001FFA  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3727  001FFC  0E00               	movlw	0
  3728  001FFE  0100               	movlb	0	; () banked
  3729  002000  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3730  002002  0E00               	movlw	0
  3731  002004  0100               	movlb	0	; () banked
  3732  002006  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3736  002008  0EAE               	movlw	174
  3737  00200A  0100               	movlb	0	; () banked
  3738  00200C  6F63               	movwf	___ftmul@f2& (0+255),b
  3739  00200E  0E23               	movlw	35
  3740  002010  0100               	movlb	0	; () banked
  3741  002012  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3742  002014  0E41               	movlw	65
  3743  002016  0100               	movlb	0	; () banked
  3744  002018  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3745  00201A  0100               	movlb	0	; () banked
  3746  00201C  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3747  00201E  ECD9  F013         	call	___lbtoft
  3748  002022  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3749  002026  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3750  00202A  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3751  00202E  EC6F  F009         	call	___ftmul	;wreg free
  3752  002032  C060  F073         	movff	?___ftmul,___fttol@f1
  3753  002036  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3754  00203A  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3755  00203E  EC1B  F00A         	call	___fttol	;wreg free
  3756  002042  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3757  002046  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3758  00204A  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3759  00204E  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3760  002052  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3761  002056  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3762                           
  3763                           ;pwm.c: 60: SetDCPWM2(DC);
  3764  00205A  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3765  00205E  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3766  002062  ECC3  F012         	call	_SetDCPWM2	;wreg free
  3767                           
  3768                           ;pwm.c: 61: return;
  3769  002066  0012               	return	
  3770  002068                     __end_of_PWM_DutyCycle2:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           indf0	equ	0xFEF
  3780                           postinc0	equ	0xFEE
  3781                           fsr0h	equ	0xFEA
  3782                           fsr0l	equ	0xFE9
  3783                           wreg	equ	0xFE8
  3784                           postinc1	equ	0xFE6
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _SetDCPWM2 *****************
  3794 ;; Defined at:
  3795 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3800 ;; Return value:  Size  Location     Type
  3801 ;;		None               void
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3809 ;;      Params:         2       0       0       0       0       0       0       0       0
  3810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3811 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3813 ;;Total ram usage:        6 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    4
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_PWM_DutyCycle2
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text21
  3824  002586                     __ptext21:
  3825                           	opt stack 0
  3826  002586                     _SetDCPWM2:
  3827                           	opt stack 24
  3828                           
  3829                           ;incstack = 0
  3830  002586  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  3831  00258A  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  3832  00258E  0E06               	movlw	6
  3833  002590                     u3485:
  3834  002590  90D8               	bcf	status,0,c
  3835  002592  361B               	rlcf	??_SetDCPWM2,f,c
  3836  002594  361C               	rlcf	??_SetDCPWM2+1,f,c
  3837  002596  2EE8               	decfsz	wreg,f,c
  3838  002598  D7FB               	goto	u3485
  3839  00259A  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  3840  00259E  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  3841  0025A2  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  3842  0025A6  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  3843  0025AA  90D8               	bcf	status,0,c
  3844  0025AC  321B               	rrcf	??_SetDCPWM2,f,c
  3845  0025AE  90D8               	bcf	status,0,c
  3846  0025B0  321B               	rrcf	??_SetDCPWM2,f,c
  3847  0025B2  0E30               	movlw	48
  3848  0025B4  161B               	andwf	??_SetDCPWM2,f,c
  3849  0025B6  50BA               	movf	4026,w,c	;volatile
  3850  0025B8  0BCF               	andlw	207
  3851  0025BA  101B               	iorwf	??_SetDCPWM2,w,c
  3852  0025BC  6EBA               	movwf	4026,c	;volatile
  3853  0025BE  0012               	return	
  3854  0025C0                     __end_of_SetDCPWM2:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           indf0	equ	0xFEF
  3864                           postinc0	equ	0xFEE
  3865                           fsr0h	equ	0xFEA
  3866                           fsr0l	equ	0xFE9
  3867                           wreg	equ	0xFE8
  3868                           postinc1	equ	0xFE6
  3869                           postdec1	equ	0xFE5
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           fsr2h	equ	0xFDA
  3874                           fsr2l	equ	0xFD9
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function _PWM_DutyCycle1 *****************
  3878 ;; Defined at:
  3879 ;;		line 33 in file "pwm.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  percentageDu    1    wreg     unsigned char 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3884 ;;  DC              2   41[BANK0 ] unsigned int 
  3885 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;		None               void
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, status,0, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3895 ;;      Params:         0       0       0       0       0       0       0       0       0
  3896 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3897 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3898 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3899 ;;Total ram usage:        9 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    6
  3902 ;; This function calls:
  3903 ;;		_SetDCPWM1
  3904 ;;		___ftmul
  3905 ;;		___fttol
  3906 ;;		___lbtoft
  3907 ;; This function is called by:
  3908 ;;		_Comando_Tablet
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text22
  3913  002068                     __ptext22:
  3914                           	opt stack 0
  3915  002068                     _PWM_DutyCycle1:
  3916                           	opt stack 23
  3917                           
  3918                           ;incstack = 0
  3919                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  3920  002068  0100               	movlb	0	; () banked
  3921  00206A  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  3925  00206C  0E00               	movlw	0
  3926  00206E  0100               	movlb	0	; () banked
  3927  002070  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  3928  002072  0E00               	movlw	0
  3929  002074  0100               	movlb	0	; () banked
  3930  002076  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  3931  002078  0E00               	movlw	0
  3932  00207A  0100               	movlb	0	; () banked
  3933  00207C  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  3934  00207E  0E00               	movlw	0
  3935  002080  0100               	movlb	0	; () banked
  3936  002082  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  3940  002084  0EAE               	movlw	174
  3941  002086  0100               	movlb	0	; () banked
  3942  002088  6F63               	movwf	___ftmul@f2& (0+255),b
  3943  00208A  0E23               	movlw	35
  3944  00208C  0100               	movlb	0	; () banked
  3945  00208E  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3946  002090  0E41               	movlw	65
  3947  002092  0100               	movlb	0	; () banked
  3948  002094  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3949  002096  0100               	movlb	0	; () banked
  3950  002098  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  3951  00209A  ECD9  F013         	call	___lbtoft
  3952  00209E  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3953  0020A2  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3954  0020A6  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3955  0020AA  EC6F  F009         	call	___ftmul	;wreg free
  3956  0020AE  C060  F073         	movff	?___ftmul,___fttol@f1
  3957  0020B2  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3958  0020B6  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3959  0020BA  EC1B  F00A         	call	___fttol	;wreg free
  3960  0020BE  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  3961  0020C2  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  3962  0020C6  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  3963  0020CA  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  3964  0020CE  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  3965  0020D2  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  3966                           
  3967                           ;pwm.c: 38: SetDCPWM1(DC);
  3968  0020D6  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  3969  0020DA  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  3970  0020DE  ECE0  F012         	call	_SetDCPWM1	;wreg free
  3971                           
  3972                           ;pwm.c: 39: return;
  3973  0020E2  0012               	return	
  3974  0020E4                     __end_of_PWM_DutyCycle1:
  3975                           	opt stack 0
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon	equ	0xFF2
  3983                           indf0	equ	0xFEF
  3984                           postinc0	equ	0xFEE
  3985                           fsr0h	equ	0xFEA
  3986                           fsr0l	equ	0xFE9
  3987                           wreg	equ	0xFE8
  3988                           postinc1	equ	0xFE6
  3989                           postdec1	equ	0xFE5
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function ___lbtoft *****************
  3998 ;; Defined at:
  3999 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  c               1    wreg     unsigned char 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  c               1   35[COMRAM] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  3   32[COMRAM] float 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4013 ;;      Params:         3       0       0       0       0       0       0       0       0
  4014 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4016 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4017 ;;Total ram usage:        4 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    5
  4020 ;; This function calls:
  4021 ;;		___ftpack
  4022 ;; This function is called by:
  4023 ;;		_PWM_DutyCycle1
  4024 ;;		_PWM_DutyCycle2
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text23
  4029  0027B2                     __ptext23:
  4030                           	opt stack 0
  4031  0027B2                     ___lbtoft:
  4032                           	opt stack 23
  4033                           
  4034                           ;incstack = 0
  4035                           ;___lbtoft@c stored from wreg
  4036  0027B2  6E24               	movwf	___lbtoft@c,c
  4037  0027B4  5024               	movf	___lbtoft@c,w,c
  4038  0027B6  6E19               	movwf	___ftpack@arg,c
  4039  0027B8  6A1A               	clrf	___ftpack@arg+1,c
  4040  0027BA  6A1B               	clrf	___ftpack@arg+2,c
  4041  0027BC  0E8E               	movlw	142
  4042  0027BE  6E1C               	movwf	___ftpack@exp,c
  4043  0027C0  0E00               	movlw	0
  4044  0027C2  6E1D               	movwf	___ftpack@sign,c
  4045  0027C4  EC54  F00D         	call	___ftpack	;wreg free
  4046  0027C8  C019  F021         	movff	?___ftpack,?___lbtoft
  4047  0027CC  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4048  0027D0  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4049  0027D4  0012               	return	
  4050  0027D6                     __end_of___lbtoft:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           indf0	equ	0xFEF
  4060                           postinc0	equ	0xFEE
  4061                           fsr0h	equ	0xFEA
  4062                           fsr0l	equ	0xFE9
  4063                           wreg	equ	0xFE8
  4064                           postinc1	equ	0xFE6
  4065                           postdec1	equ	0xFE5
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _SetDCPWM1 *****************
  4074 ;; Defined at:
  4075 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         2       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4091 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4092 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4093 ;;Total ram usage:        6 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    4
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_PWM_DutyCycle1
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text24
  4104  0025C0                     __ptext24:
  4105                           	opt stack 0
  4106  0025C0                     _SetDCPWM1:
  4107                           	opt stack 24
  4108                           
  4109                           ;incstack = 0
  4110  0025C0  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4111  0025C4  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4112  0025C8  0E06               	movlw	6
  4113  0025CA                     u3455:
  4114  0025CA  90D8               	bcf	status,0,c
  4115  0025CC  361B               	rlcf	??_SetDCPWM1,f,c
  4116  0025CE  361C               	rlcf	??_SetDCPWM1+1,f,c
  4117  0025D0  2EE8               	decfsz	wreg,f,c
  4118  0025D2  D7FB               	goto	u3455
  4119  0025D4  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4120  0025D8  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4121  0025DC  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4122  0025E0  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4123  0025E4  90D8               	bcf	status,0,c
  4124  0025E6  321B               	rrcf	??_SetDCPWM1,f,c
  4125  0025E8  90D8               	bcf	status,0,c
  4126  0025EA  321B               	rrcf	??_SetDCPWM1,f,c
  4127  0025EC  0E30               	movlw	48
  4128  0025EE  161B               	andwf	??_SetDCPWM1,f,c
  4129  0025F0  50BD               	movf	4029,w,c	;volatile
  4130  0025F2  0BCF               	andlw	207
  4131  0025F4  101B               	iorwf	??_SetDCPWM1,w,c
  4132  0025F6  6EBD               	movwf	4029,c	;volatile
  4133  0025F8  0012               	return	
  4134  0025FA                     __end_of_SetDCPWM1:
  4135                           	opt stack 0
  4136                           tblptru	equ	0xFF8
  4137                           tblptrh	equ	0xFF7
  4138                           tblptrl	equ	0xFF6
  4139                           tablat	equ	0xFF5
  4140                           prodh	equ	0xFF4
  4141                           prodl	equ	0xFF3
  4142                           intcon	equ	0xFF2
  4143                           indf0	equ	0xFEF
  4144                           postinc0	equ	0xFEE
  4145                           fsr0h	equ	0xFEA
  4146                           fsr0l	equ	0xFE9
  4147                           wreg	equ	0xFE8
  4148                           postinc1	equ	0xFE6
  4149                           postdec1	equ	0xFE5
  4150                           fsr1l	equ	0xFE1
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _Lcd_Write_Integer *****************
  4158 ;; Defined at:
  4159 ;;		line 113 in file "lcd.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  a               2   88[BANK0 ] int 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  s              20    0[BANK1 ] unsigned char [20]
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4173 ;;      Params:         0       2       0       0       0       0       0       0       0
  4174 ;;      Locals:         0       0      20       0       0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4176 ;;      Totals:         0       2      20       0       0       0       0       0       0
  4177 ;;Total ram usage:       22 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    8
  4180 ;; This function calls:
  4181 ;;		_Lcd_Write_String
  4182 ;;		_sprintf
  4183 ;; This function is called by:
  4184 ;;		_Comando_Tablet
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text25
  4189  0025FA                     __ptext25:
  4190                           	opt stack 0
  4191  0025FA                     _Lcd_Write_Integer:
  4192                           	opt stack 21
  4193                           
  4194                           ;lcd.c: 114: unsigned char s[20];
  4195                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4196                           
  4197                           ;incstack = 0
  4198  0025FA  0101               	movlb	1	; () banked
  4199  0025FC  0E01               	movlw	high Lcd_Write_Integer@s
  4200  0025FE  0100               	movlb	0	; () banked
  4201  002600  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4202  002602  0101               	movlb	1	; () banked
  4203  002604  0E5A               	movlw	low Lcd_Write_Integer@s
  4204  002606  0100               	movlb	0	; () banked
  4205  002608  6F88               	movwf	sprintf@sp& (0+255),b
  4206  00260A  0E7F               	movlw	high STR_19
  4207  00260C  0100               	movlb	0	; () banked
  4208  00260E  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4209  002610  0EAA               	movlw	low STR_19
  4210  002612  0100               	movlb	0	; () banked
  4211  002614  6F8A               	movwf	sprintf@f& (0+255),b
  4212  002616  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4213  00261A  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4214  00261E  EC0E  F000         	call	_sprintf	;wreg free
  4215                           
  4216                           ;lcd.c: 117: Lcd_Write_String(s);
  4217  002622  0101               	movlb	1	; () banked
  4218  002624  0E01               	movlw	high Lcd_Write_Integer@s
  4219  002626  6E1E               	movwf	Lcd_Write_String@a+1,c
  4220  002628  0101               	movlb	1	; () banked
  4221  00262A  0E5A               	movlw	low Lcd_Write_Integer@s
  4222  00262C  6E1D               	movwf	Lcd_Write_String@a,c
  4223  00262E  EC72  F010         	call	_Lcd_Write_String	;wreg free
  4224  002632  0012               	return	
  4225  002634                     __end_of_Lcd_Write_Integer:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           indf0	equ	0xFEF
  4235                           postinc0	equ	0xFEE
  4236                           fsr0h	equ	0xFEA
  4237                           fsr0l	equ	0xFE9
  4238                           wreg	equ	0xFE8
  4239                           postinc1	equ	0xFE6
  4240                           postdec1	equ	0xFE5
  4241                           fsr1l	equ	0xFE1
  4242                           indf2	equ	0xFDF
  4243                           postinc2	equ	0xFDE
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _sprintf *****************
  4249 ;; Defined at:
  4250 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4253 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4254 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4255 ;;		 -> STR_19(13), STR_18(11), STR_5(3), 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  vd              4   60[BANK0 ] unsigned long 
  4258 ;;  vd              4   64[BANK0 ] unsigned long 
  4259 ;;  _val            5   77[BANK0 ] struct .
  4260 ;;  fval            3   84[BANK0 ] struct .
  4261 ;;  integ           3   72[BANK0 ] struct .
  4262 ;;  ival            3    0        struct .
  4263 ;;  exp             2   82[BANK0 ] int 
  4264 ;;  prec            2   75[BANK0 ] int 
  4265 ;;  flag            2   70[BANK0 ] unsigned short 
  4266 ;;  ap              2   68[BANK0 ] PTR void [1]
  4267 ;;		 -> ?_sprintf(2), 
  4268 ;;  width           2    0        int 
  4269 ;;  c               1   87[BANK0 ] char 
  4270 ;;  d               1    0        unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  2   40[BANK0 ] int 
  4273 ;; Registers used:
  4274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4280 ;;      Params:         0       7       0       0       0       0       0       0       0
  4281 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4282 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4283 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4284 ;;Total ram usage:       48 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    7
  4287 ;; This function calls:
  4288 ;;		___awdiv
  4289 ;;		___ftadd
  4290 ;;		___ftge
  4291 ;;		___ftmul
  4292 ;;		___ftneg
  4293 ;;		___ftsub
  4294 ;;		___fttol
  4295 ;;		___lldiv
  4296 ;;		___llmod
  4297 ;;		___lltoft
  4298 ;;		___wmul
  4299 ;;		__div_to_l_
  4300 ;;		__tdiv_to_l_
  4301 ;;		_fround
  4302 ;;		_scale
  4303 ;; This function is called by:
  4304 ;;		_putcBluetoothInt
  4305 ;;		_Lcd_Write_Integer
  4306 ;;		_Lcd_Write_Float
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text26
  4311  00001C                     __ptext26:
  4312                           	opt stack 0
  4313  00001C                     _sprintf:
  4314                           	opt stack 21
  4315                           
  4316                           ;doprnt.c: 494: va_list ap;
  4317                           ;doprnt.c: 499: signed char c;
  4318                           ;doprnt.c: 501: int width;
  4319                           ;doprnt.c: 504: int prec;
  4320                           ;doprnt.c: 508: unsigned short flag;
  4321                           ;doprnt.c: 515: char d;
  4322                           ;doprnt.c: 516: double fval, integ;
  4323                           ;doprnt.c: 517: int exp;
  4324                           ;doprnt.c: 518: double ival;
  4325                           ;doprnt.c: 519: union {
  4326                           ;doprnt.c: 520: unsigned long _val;
  4327                           ;doprnt.c: 521: struct {
  4328                           ;doprnt.c: 522: const char * _cp;
  4329                           ;doprnt.c: 523: unsigned _len;
  4330                           ;doprnt.c: 524: } _str;
  4331                           ;doprnt.c: 525: } _val;
  4332                           ;doprnt.c: 542: *ap = __va_start();
  4333                           
  4334                           ;incstack = 0
  4335  00001C  0100               	movlb	0	; () banked
  4336  00001E  0E00               	movlw	high (?_sprintf+4)
  4337  000020  0100               	movlb	0	; () banked
  4338  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4339  000024  0100               	movlb	0	; () banked
  4340  000026  0E8C               	movlw	low (?_sprintf+4)
  4341  000028  0100               	movlb	0	; () banked
  4342  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4343                           
  4344                           ;doprnt.c: 545: while(c = *f++) {
  4345  00002C  EF87  F004         	goto	l5055
  4346  000030                     l4853:
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;doprnt.c: 547: if(c != '%')
  4350  000030  0100               	movlb	0	; () banked
  4351  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4352  000034  0A25               	xorlw	37
  4353  000036  B4D8               	btfsc	status,2,c
  4354  000038  D00C               	goto	l4859
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 549: {
  4358                           ;doprnt.c: 550: ((*sp++ = (c)));
  4359  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4360  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4361  000042  0100               	movlb	0	; () banked
  4362  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4363                           
  4364                           ; BSR set to: 0
  4365  000048  0100               	movlb	0	; () banked
  4366  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4367  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4368                           
  4369                           ;doprnt.c: 551: continue;
  4370  00004E  EF87  F004         	goto	l5055
  4371  000052                     l4859:
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;doprnt.c: 552: }
  4375                           ;doprnt.c: 557: flag = 0;
  4376  000052  0E00               	movlw	0
  4377  000054  0100               	movlb	0	; () banked
  4378  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4379  000058  0E00               	movlw	0
  4380  00005A  0100               	movlb	0	; () banked
  4381  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4382                           
  4383                           ;doprnt.c: 644: switch(c = *f++) {
  4384  00005E  D003               	goto	l4865
  4385  000060                     l4861:
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;doprnt.c: 672: flag |= 0x400;
  4389  000060  0100               	movlb	0	; () banked
  4390  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4391                           
  4392                           ;doprnt.c: 673: break;
  4393  000064  D01E               	goto	l4867
  4394  000066                     l4865:
  4395                           
  4396                           ; BSR set to: 0
  4397  000066  0100               	movlb	0	; () banked
  4398  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4399  00006C  0100               	movlb	0	; () banked
  4400  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4401  000072  0100               	movlb	0	; () banked
  4402  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4403  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4404  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4405  000078  6AF8               	clrf	tblptru,c
  4406  00007A                     	endif
  4407  00007A                     	if	0	;tblptru may be non-zero
  4408  00007A                     	endif
  4409  00007A  0008               	tblrd		*
  4410  00007C  0100               	movlb	0	; () banked
  4411  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4412  000082  0100               	movlb	0	; () banked
  4413  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4414                           
  4415                           ; Switch size 1, requested type "space"
  4416                           ; Number of cases is 4, Range of values is 0 to 105
  4417                           ; switch strategies available:
  4418                           ; Name         Instructions Cycles
  4419                           ; simple_byte           13     7 (average)
  4420                           ;	Chosen strategy is simple_byte
  4421  000086  0A00               	xorlw	0	; case 0
  4422  000088  B4D8               	btfsc	status,2,c
  4423  00008A  EF99  F004         	goto	l5057
  4424  00008E  0A64               	xorlw	100	; case 100
  4425  000090  B4D8               	btfsc	status,2,c
  4426  000092  D007               	goto	l4867
  4427  000094  0A02               	xorlw	2	; case 102
  4428  000096  B4D8               	btfsc	status,2,c
  4429  000098  D7E3               	goto	l4861
  4430  00009A  0A0F               	xorlw	15	; case 105
  4431  00009C  A4D8               	btfss	status,2,c
  4432  00009E  EF87  F004         	goto	l5055
  4433  0000A2                     l4867:
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;doprnt.c: 834: if(flag & (0x700)) {
  4437  0000A2  0E07               	movlw	7
  4438  0000A4  0100               	movlb	0	; () banked
  4439  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4440  0000A8  B4D8               	btfsc	status,2,c
  4441  0000AA  D348               	goto	l5015
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 838: prec = 6;
  4445  0000AC  0E00               	movlw	0
  4446  0000AE  0100               	movlb	0	; () banked
  4447  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4448  0000B2  0E06               	movlw	6
  4449  0000B4  0100               	movlb	0	; () banked
  4450  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4454  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4455  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4456  0000C0  0100               	movlb	0	; () banked
  4457  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4458  0000C6  0100               	movlb	0	; () banked
  4459  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4460  0000CC  0100               	movlb	0	; () banked
  4461  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4462                           
  4463                           ; BSR set to: 0
  4464  0000D2  0E03               	movlw	3
  4465  0000D4  0100               	movlb	0	; () banked
  4466  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4467  0000D8  0E00               	movlw	0
  4468  0000DA  0100               	movlb	0	; () banked
  4469  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;doprnt.c: 840: if(fval < 0.0) {
  4473  0000DE  0100               	movlb	0	; () banked
  4474  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4475  0000E2  0A80               	xorlw	128
  4476  0000E4  0F80               	addlw	128
  4477  0000E6  E107               	bnz	u5075
  4478  0000E8  0E00               	movlw	0
  4479  0000EA  0100               	movlb	0	; () banked
  4480  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4481  0000EE  E103               	bnz	u5075
  4482  0000F0  0E00               	movlw	0
  4483  0000F2  0100               	movlb	0	; () banked
  4484  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4485  0000F6                     u5075:
  4486  0000F6  B0D8               	btfsc	status,0,c
  4487  0000F8  D011               	goto	l4881
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;doprnt.c: 841: fval = -fval;
  4491  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4492  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4493  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4494  000106  ECC6  F013         	call	___ftneg	;wreg free
  4495  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4496  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4497  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4498                           
  4499                           ;doprnt.c: 842: flag |= 0x03;
  4500  000116  0E03               	movlw	3
  4501  000118  0100               	movlb	0	; () banked
  4502  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4503  00011C                     l4881:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;doprnt.c: 843: }
  4507                           ;doprnt.c: 844: exp = 0;
  4508  00011C  0E00               	movlw	0
  4509  00011E  0100               	movlb	0	; () banked
  4510  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4511  000122  0E00               	movlw	0
  4512  000124  0100               	movlb	0	; () banked
  4513  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 845: if( fval!=0) {
  4517  000128  0E7F               	movlw	127
  4518  00012A  0100               	movlb	0	; () banked
  4519  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4520  00012E  0100               	movlb	0	; () banked
  4521  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4522  000132  0100               	movlb	0	; () banked
  4523  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4524  000136  B4D8               	btfsc	status,2,c
  4525  000138  D09C               	goto	l4909
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4529  00013A  0E82               	movlw	130
  4530  00013C  0100               	movlb	0	; () banked
  4531  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4532  000140  0EFF               	movlw	255
  4533  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4534  000144  0100               	movlb	0	; () banked
  4535  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4536  00014A  0100               	movlb	0	; () banked
  4537  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4538  000150  0100               	movlb	0	; () banked
  4539  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4540  000156  0100               	movlb	0	; () banked
  4541  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4542  00015C  0E10               	movlw	16
  4543  00015E  D006               	goto	u5090
  4544  000160                     u5095:
  4545  000160  0100               	movlb	0	; () banked
  4546  000162  90D8               	bcf	status,0,c
  4547  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4548  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4549  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4550  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4551  00016C                     u5090:
  4552  00016C  2EE8               	decfsz	wreg,f,c
  4553  00016E  D7F8               	goto	u5095
  4554  000170  0100               	movlb	0	; () banked
  4555  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4556  000174  0100               	movlb	0	; () banked
  4557  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4558  000178  0100               	movlb	0	; () banked
  4559  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4560  00017C  0E00               	movlw	0
  4561  00017E  0100               	movlb	0	; () banked
  4562  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4563  000182  0100               	movlb	0	; () banked
  4564  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;doprnt.c: 847: exp--;
  4568  000186  0100               	movlb	0	; () banked
  4569  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4570  00018A  A0D8               	btfss	status,0,c
  4571  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 848: exp *= 3;
  4575  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4576  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4577  000196  0E00               	movlw	0
  4578  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4579  00019A  0E03               	movlw	3
  4580  00019C  6E29               	movwf	___wmul@multiplicand,c
  4581  00019E  ECB3  F013         	call	___wmul	;wreg free
  4582  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4583  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4584                           
  4585                           ;doprnt.c: 849: exp /= 10;
  4586  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4587  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4588  0001B2  0E00               	movlw	0
  4589  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4590  0001B6  0E0A               	movlw	10
  4591  0001B8  6E21               	movwf	___awdiv@divisor,c
  4592  0001BA  ECFB  F00D         	call	___awdiv	;wreg free
  4593  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4594  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4595                           
  4596                           ;doprnt.c: 850: if(exp < 0)
  4597  0001C6  0100               	movlb	0	; () banked
  4598  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4599  0001CA  0A80               	xorlw	128
  4600  0001CC  6EF3               	movwf	prodl,c
  4601  0001CE  0E80               	movlw	128
  4602  0001D0  5CF3               	subwf	prodl,w,c
  4603  0001D2  0E00               	movlw	0
  4604  0001D4  B4D8               	btfsc	status,2,c
  4605  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4606  0001D8  B0D8               	btfsc	status,0,c
  4607  0001DA  D004               	goto	l4897
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 851: exp--;
  4611  0001DC  0100               	movlb	0	; () banked
  4612  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4613  0001E0  A0D8               	btfss	status,0,c
  4614  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4615  0001E4                     l4897:
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 855: integ = scale(-exp);
  4619  0001E4  0100               	movlb	0	; () banked
  4620  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4621  0001E8  0800               	sublw	0
  4622  0001EA  ECA0  F004         	call	_scale
  4623  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4624  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4625  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4626                           
  4627                           ;doprnt.c: 856: integ *= fval;
  4628  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4629  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4630  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4631  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4632  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4633  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4634  000212  EC6F  F009         	call	___ftmul	;wreg free
  4635  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4636  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4637  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4638                           
  4639                           ;doprnt.c: 857: if(integ < 1.0)
  4640  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4641  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4642  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4643  00022E  0E00               	movlw	0
  4644  000230  6E1C               	movwf	___ftge@ff2,c
  4645  000232  0E80               	movlw	128
  4646  000234  6E1D               	movwf	___ftge@ff2+1,c
  4647  000236  0E3F               	movlw	63
  4648  000238  6E1E               	movwf	___ftge@ff2+2,c
  4649  00023A  EC2A  F00F         	call	___ftge	;wreg free
  4650  00023E  B0D8               	btfsc	status,0,c
  4651  000240  D005               	goto	l4905
  4652                           
  4653                           ;doprnt.c: 858: exp--;
  4654  000242  0100               	movlb	0	; () banked
  4655  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4656  000246  A0D8               	btfss	status,0,c
  4657  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4658  00024A  D013               	goto	l4909
  4659  00024C                     l4905:
  4660                           
  4661                           ;doprnt.c: 859: else if(integ >= 10.0)
  4662  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4663  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4664  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4665  000258  0E00               	movlw	0
  4666  00025A  6E1C               	movwf	___ftge@ff2,c
  4667  00025C  0E20               	movlw	32
  4668  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4669  000260  0E41               	movlw	65
  4670  000262  6E1E               	movwf	___ftge@ff2+2,c
  4671  000264  EC2A  F00F         	call	___ftge	;wreg free
  4672  000268  A0D8               	btfss	status,0,c
  4673  00026A  D003               	goto	l4909
  4674                           
  4675                           ;doprnt.c: 860: exp++;
  4676  00026C  0100               	movlb	0	; () banked
  4677  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4678  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4679  000272                     l4909:
  4680                           
  4681                           ;doprnt.c: 861: }
  4682                           ;doprnt.c: 1121: if(prec <= 12)
  4683  000272  0100               	movlb	0	; () banked
  4684  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4685  000276  0A80               	xorlw	128
  4686  000278  6EF3               	movwf	prodl,c
  4687  00027A  0E80               	movlw	128
  4688  00027C  5CF3               	subwf	prodl,w,c
  4689  00027E  0E0D               	movlw	13
  4690  000280  B4D8               	btfsc	status,2,c
  4691  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4692  000284  B0D8               	btfsc	status,0,c
  4693  000286  D018               	goto	l4913
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 1122: fval += fround(prec);
  4697  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4698  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4699  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4700  000294  0100               	movlb	0	; () banked
  4701  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4702  000298  ECDC  F006         	call	_fround
  4703  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4704  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4705  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4706  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4707  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4708  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4709  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4710  0002B8                     l4913:
  4711                           
  4712                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4713  0002B8  0100               	movlb	0	; () banked
  4714  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4715  0002BC  0A80               	xorlw	128
  4716  0002BE  6EF3               	movwf	prodl,c
  4717  0002C0  0E80               	movlw	128
  4718  0002C2  5CF3               	subwf	prodl,w,c
  4719  0002C4  0E0A               	movlw	10
  4720  0002C6  B4D8               	btfsc	status,2,c
  4721  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4722  0002CA  B0D8               	btfsc	status,0,c
  4723  0002CC  D029               	goto	l4921
  4724                           
  4725                           ; BSR set to: 0
  4726  0002CE  0E7F               	movlw	127
  4727  0002D0  0100               	movlb	0	; () banked
  4728  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4729  0002D4  0100               	movlb	0	; () banked
  4730  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4731  0002D8  0100               	movlb	0	; () banked
  4732  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4733  0002DC  B4D8               	btfsc	status,2,c
  4734  0002DE  D06C               	goto	l4937
  4735                           
  4736                           ; BSR set to: 0
  4737  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4738  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4739  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4740  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4741  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4742  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4743  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4744  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4745  000300  0100               	movlb	0	; () banked
  4746  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4747  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4748  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4749  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4750  00030A  A4D8               	btfss	status,2,c
  4751  00030C  D055               	goto	l4937
  4752                           
  4753                           ; BSR set to: 0
  4754  00030E  0100               	movlb	0	; () banked
  4755  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4756  000312  0A80               	xorlw	128
  4757  000314  0F80               	addlw	-128
  4758  000316  0E02               	movlw	2
  4759  000318  B4D8               	btfsc	status,2,c
  4760  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4761  00031C  A0D8               	btfss	status,0,c
  4762  00031E  D04C               	goto	l4937
  4763  000320                     l4921:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4767  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4768  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4769  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4770  00032C  0E70               	movlw	112
  4771  00032E  6E1C               	movwf	___ftge@ff2,c
  4772  000330  0E89               	movlw	137
  4773  000332  6E1D               	movwf	___ftge@ff2+1,c
  4774  000334  0E40               	movlw	64
  4775  000336  6E1E               	movwf	___ftge@ff2+2,c
  4776  000338  EC2A  F00F         	call	___ftge	;wreg free
  4777  00033C  B0D8               	btfsc	status,0,c
  4778  00033E  D003               	goto	l4925
  4779                           
  4780                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4781  000340  0100               	movlb	0	; () banked
  4782  000342  0EF7               	movlw	247
  4783  000344  D002               	goto	L3
  4784  000346                     l4925:
  4785                           
  4786                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4787  000346  0100               	movlb	0	; () banked
  4788  000348  0EF8               	movlw	248
  4789  00034A                     L3:
  4790  00034A  0100               	movlb	0	; () banked
  4791  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  4792  00034E  0EFF               	movlw	255
  4793  000350  0100               	movlb	0	; () banked
  4794  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;doprnt.c: 1133: }
  4798                           ;doprnt.c: 1134: integ = scale(exp);
  4799                           
  4800                           ; BSR set to: 0
  4801  000354  0100               	movlb	0	; () banked
  4802  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  4803  000358  ECA0  F004         	call	_scale
  4804  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  4805  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4806  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4807                           
  4808                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4809  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4810  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4811  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4812  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4813  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4814  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4815  000380  ECFD  F00B         	call	__tdiv_to_l_	;wreg free
  4816  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1323
  4817  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1323+1
  4818  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1323+2
  4819  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1323+3
  4820  000394  C098  F0AD         	movff	_sprintf$1323,sprintf@_val
  4821  000398  C099  F0AE         	movff	_sprintf$1323+1,sprintf@_val+1
  4822  00039C  C09A  F0AF         	movff	_sprintf$1323+2,sprintf@_val+2
  4823  0003A0  C09B  F0B0         	movff	_sprintf$1323+3,sprintf@_val+3
  4824                           
  4825                           ;doprnt.c: 1138: fval = 0.0;
  4826  0003A4  0E00               	movlw	0
  4827  0003A6  0100               	movlb	0	; () banked
  4828  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  4829  0003AA  0E00               	movlw	0
  4830  0003AC  0100               	movlb	0	; () banked
  4831  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4832  0003B0  0E00               	movlw	0
  4833  0003B2  0100               	movlb	0	; () banked
  4834  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4835                           
  4836                           ;doprnt.c: 1139: } else {
  4837  0003B6  D034               	goto	l4941
  4838  0003B8                     l4937:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  4842  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4843  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4844  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4845  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  4846  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  4847  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4848  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4849  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4850                           
  4851                           ;doprnt.c: 1141: fval -= (double)_val._val;
  4852  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  4853  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  4854  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  4855  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  4856  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  4857  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  4858  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  4859  0003F4  ECC1  F011         	call	___lltoft	;wreg free
  4860  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  4861  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  4862  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  4863  000404  EC88  F012         	call	___ftsub	;wreg free
  4864  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  4865  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  4866  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  4867                           
  4868                           ;doprnt.c: 1142: exp = 0;
  4869  000414  0E00               	movlw	0
  4870  000416  0100               	movlb	0	; () banked
  4871  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4872  00041A  0E00               	movlw	0
  4873  00041C  0100               	movlb	0	; () banked
  4874  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  4875  000420                     l4941:
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;doprnt.c: 1143: }
  4879                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4880  000420  0E01               	movlw	1
  4881  000422  0100               	movlb	0	; () banked
  4882  000424  6FB7               	movwf	sprintf@c& (0+255),b
  4883  000426                     
  4884                           ; BSR set to: 0
  4885  000426  0100               	movlb	0	; () banked
  4886  000428  51B7               	movf	sprintf@c& (0+255),w,b
  4887  00042A  0A0A               	xorlw	10
  4888  00042C  B4D8               	btfsc	status,2,c
  4889  00042E  D021               	goto	l4955
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  4893                           
  4894                           ; BSR set to: 0
  4895                           
  4896                           ; BSR set to: 0
  4897  000430  0100               	movlb	0	; () banked
  4898  000432  51B7               	movf	sprintf@c& (0+255),w,b
  4899  000434  0D04               	mullw	4
  4900  000436  0ECB               	movlw	low _dpowers
  4901  000438  24F3               	addwf	prodl,w,c
  4902  00043A  6EF6               	movwf	tblptrl,c
  4903  00043C  0E7E               	movlw	high _dpowers
  4904  00043E  20F4               	addwfc	prodh,w,c
  4905  000440  6EF7               	movwf	tblptrh,c
  4906  000442                     	if	1	;There are 3 active tblptr bytes
  4907  000442  6AF8               	clrf	tblptru,c
  4908  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  4909  000446  22F8               	addwfc	tblptru,f,c
  4910  000448                     	endif
  4911  000448  0009               	tblrd		*+
  4912  00044A  50F5               	movf	tablat,w,c
  4913  00044C  0100               	movlb	0	; () banked
  4914  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4915  000450  0009               	tblrd		*+
  4916  000452  50F5               	movf	tablat,w,c
  4917  000454  0100               	movlb	0	; () banked
  4918  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4919  000458  0009               	tblrd		*+
  4920  00045A  50F5               	movf	tablat,w,c
  4921  00045C  0100               	movlb	0	; () banked
  4922  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4923  000460  0009               	tblrd		*+
  4924  000462  50F5               	movf	tablat,w,c
  4925  000464  0100               	movlb	0	; () banked
  4926  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4927  000468  A0D8               	btfss	status,0,c
  4928  00046A  D003               	goto	l4955
  4929                           
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;doprnt.c: 1147: break;
  4936  00046C  0100               	movlb	0	; () banked
  4937  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  4938  000470  D7DA               	goto	L4
  4939  000472                     l4955:
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;doprnt.c: 1184: {
  4943                           ;doprnt.c: 1197: if(flag & 0x03)
  4944  000472  0E03               	movlw	3
  4945  000474  0100               	movlb	0	; () banked
  4946  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  4947  000478  0100               	movlb	0	; () banked
  4948  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  4949  00047C  0E00               	movlw	0
  4950  00047E  0100               	movlb	0	; () banked
  4951  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4952  000482  0100               	movlb	0	; () banked
  4953  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4954  000486  0100               	movlb	0	; () banked
  4955  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4956  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  4957  00048C  B4D8               	btfsc	status,2,c
  4958  00048E  D055               	goto	l4969
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  4962  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  4963  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4964  000498  0E2D               	movlw	45
  4965  00049A  D04B               	goto	L5
  4966  00049C                     l4961:
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;doprnt.c: 1209: {
  4970                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  4971  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4972  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4973  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4974  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4975  0004AC  0100               	movlb	0	; () banked
  4976  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  4977  0004B0  0D04               	mullw	4
  4978  0004B2  0ECB               	movlw	low _dpowers
  4979  0004B4  24F3               	addwf	prodl,w,c
  4980  0004B6  6EF6               	movwf	tblptrl,c
  4981  0004B8  0E7E               	movlw	high _dpowers
  4982  0004BA  20F4               	addwfc	prodh,w,c
  4983  0004BC  6EF7               	movwf	tblptrh,c
  4984  0004BE                     	if	1	;There are 3 active tblptr bytes
  4985  0004BE  6AF8               	clrf	tblptru,c
  4986  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4987  0004C2  22F8               	addwfc	tblptru,f,c
  4988  0004C4                     	endif
  4989  0004C4  0009               	tblrd		*+
  4990  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4991  0004CA  0009               	tblrd		*+
  4992  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4993  0004D0  0009               	tblrd		*+
  4994  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4995  0004D6  000A               	tblrd		*-
  4996  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4997  0004DC  ECB5  F00F         	call	___lldiv	;wreg free
  4998  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  4999  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  5000  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5001  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5002                           
  5003                           ;doprnt.c: 1211: vd %= 10;
  5004  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5005  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5006  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5007  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5008  000500  0E0A               	movlw	10
  5009  000502  6E2A               	movwf	___llmod@divisor,c
  5010  000504  0E00               	movlw	0
  5011  000506  6E2B               	movwf	___llmod@divisor+1,c
  5012  000508  0E00               	movlw	0
  5013  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5014  00050C  0E00               	movlw	0
  5015  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5016  000510  EC8E  F011         	call	___llmod	;wreg free
  5017  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5018  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5019  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5020  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5021                           
  5022                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5023  000524  0100               	movlb	0	; () banked
  5024  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5025  000528  0F30               	addlw	48
  5026  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5027  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5028  000532                     L5:
  5029  000532  6EDF               	movwf	indf2,c
  5030                           
  5031                           ; BSR set to: 0
  5032  000534  0100               	movlb	0	; () banked
  5033  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5034  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5035  00053A                     l4969:
  5036                           
  5037                           ; BSR set to: 0
  5038  00053A  0100               	movlb	0	; () banked
  5039  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5040  00053E  0100               	movlb	0	; () banked
  5041  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5042  000542  B4D8               	btfsc	status,2,c
  5043  000544  D00E               	goto	l4977
  5044  000546  D7AA               	goto	l4961
  5045  000548                     l4971:
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5049  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5050  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5051  000550  0E30               	movlw	48
  5052  000552  6EDF               	movwf	indf2,c
  5053                           
  5054                           ; BSR set to: 0
  5055  000554  0100               	movlb	0	; () banked
  5056  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5057  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 1218: exp--;
  5061  00055A  0100               	movlb	0	; () banked
  5062  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5063  00055E  A0D8               	btfss	status,0,c
  5064  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5065  000562                     l4977:
  5066                           
  5067                           ; BSR set to: 0
  5068  000562  0100               	movlb	0	; () banked
  5069  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5070  000566  0A80               	xorlw	128
  5071  000568  6EF3               	movwf	prodl,c
  5072  00056A  0E80               	movlw	128
  5073  00056C  5CF3               	subwf	prodl,w,c
  5074  00056E  0E01               	movlw	1
  5075  000570  B4D8               	btfsc	status,2,c
  5076  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5077  000574  B0D8               	btfsc	status,0,c
  5078  000576  D7E8               	goto	l4971
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;doprnt.c: 1219: }
  5082                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5083                           
  5084                           ; BSR set to: 0
  5085  000578  0100               	movlb	0	; () banked
  5086  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5087  00057C  0A80               	xorlw	128
  5088  00057E  0F80               	addlw	-128
  5089  000580  0E09               	movlw	9
  5090  000582  B4D8               	btfsc	status,2,c
  5091  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5092  000586  A0D8               	btfss	status,0,c
  5093  000588  D004               	goto	l499
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5097  00058A  0E08               	movlw	8
  5098  00058C  0100               	movlb	0	; () banked
  5099  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5100  000590  D002               	goto	l4983
  5101  000592                     l499:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;doprnt.c: 1222: else
  5105                           ;doprnt.c: 1223: c = prec;
  5106  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5107  000596                     l4983:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;doprnt.c: 1224: prec -= c;
  5111  000596  0100               	movlb	0	; () banked
  5112  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5113  00059A  0100               	movlb	0	; () banked
  5114  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5115  00059E  0E00               	movlw	0
  5116  0005A0  0100               	movlb	0	; () banked
  5117  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5118  0005A4  0EFF               	movlw	255
  5119  0005A6  0100               	movlb	0	; () banked
  5120  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;doprnt.c: 1228: if(c)
  5124  0005AA  0100               	movlb	0	; () banked
  5125  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5126  0005AE  B4D8               	btfsc	status,2,c
  5127  0005B0  D009               	goto	l4991
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5131  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5132  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5133  0005BA  0E2E               	movlw	46
  5134  0005BC  6EDF               	movwf	indf2,c
  5135                           
  5136                           ; BSR set to: 0
  5137  0005BE  0100               	movlb	0	; () banked
  5138  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5139  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5140  0005C4                     l4991:
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5144  0005C4  0100               	movlb	0	; () banked
  5145  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5146  0005C8  ECA0  F004         	call	_scale
  5147  0005CC  C06C  F095         	movff	?_scale,_sprintf$2377
  5148  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2377+1
  5149  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2377+2
  5150                           
  5151                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5152  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5153  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5154  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5155  0005E4  C095  F060         	movff	_sprintf$2377,___ftmul@f1
  5156  0005E8  C096  F061         	movff	_sprintf$2377+1,___ftmul@f1+1
  5157  0005EC  C097  F062         	movff	_sprintf$2377+2,___ftmul@f1+2
  5158  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5159  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5160  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5161  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5162  000600  EC1B  F00A         	call	___fttol	;wreg free
  5163  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5164  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5165  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5166  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5167                           
  5168                           ;doprnt.c: 1237: while(c--) {
  5169  000614  D079               	goto	l5005
  5170  000616                     l4995:
  5171                           
  5172                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5173  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5174  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5175  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5176  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5177  000626  0100               	movlb	0	; () banked
  5178  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5179  00062A  0D04               	mullw	4
  5180  00062C  0ECB               	movlw	low _dpowers
  5181  00062E  24F3               	addwf	prodl,w,c
  5182  000630  6EF6               	movwf	tblptrl,c
  5183  000632  0E7E               	movlw	high _dpowers
  5184  000634  20F4               	addwfc	prodh,w,c
  5185  000636  6EF7               	movwf	tblptrh,c
  5186  000638                     	if	1	;There are 3 active tblptr bytes
  5187  000638  6AF8               	clrf	tblptru,c
  5188  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5189  00063C  22F8               	addwfc	tblptru,f,c
  5190  00063E                     	endif
  5191  00063E  0009               	tblrd		*+
  5192  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5193  000644  0009               	tblrd		*+
  5194  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5195  00064A  0009               	tblrd		*+
  5196  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5197  000650  000A               	tblrd		*-
  5198  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5199  000656  ECB5  F00F         	call	___lldiv	;wreg free
  5200  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1325
  5201  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1325+1
  5202  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1325+2
  5203  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1325+3
  5204                           
  5205                           ;doprnt.c: 1239: vd %= 10;
  5206  00066A  C0A0  F026         	movff	sprintf@vd_1325,___llmod@dividend
  5207  00066E  C0A1  F027         	movff	sprintf@vd_1325+1,___llmod@dividend+1
  5208  000672  C0A2  F028         	movff	sprintf@vd_1325+2,___llmod@dividend+2
  5209  000676  C0A3  F029         	movff	sprintf@vd_1325+3,___llmod@dividend+3
  5210  00067A  0E0A               	movlw	10
  5211  00067C  6E2A               	movwf	___llmod@divisor,c
  5212  00067E  0E00               	movlw	0
  5213  000680  6E2B               	movwf	___llmod@divisor+1,c
  5214  000682  0E00               	movlw	0
  5215  000684  6E2C               	movwf	___llmod@divisor+2,c
  5216  000686  0E00               	movlw	0
  5217  000688  6E2D               	movwf	___llmod@divisor+3,c
  5218  00068A  EC8E  F011         	call	___llmod	;wreg free
  5219  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1325
  5220  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1325+1
  5221  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1325+2
  5222  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1325+3
  5223                           
  5224                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5225  00069E  0100               	movlb	0	; () banked
  5226  0006A0  51A0               	movf	sprintf@vd_1325& (0+255),w,b
  5227  0006A2  0F30               	addlw	48
  5228  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5229  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5230  0006AC  6EDF               	movwf	indf2,c
  5231                           
  5232                           ; BSR set to: 0
  5233  0006AE  0100               	movlb	0	; () banked
  5234  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5235  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5239  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5240  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5241  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5242  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5243  0006C4  0100               	movlb	0	; () banked
  5244  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5245  0006C8  0D04               	mullw	4
  5246  0006CA  0ECB               	movlw	low _dpowers
  5247  0006CC  24F3               	addwf	prodl,w,c
  5248  0006CE  6EF6               	movwf	tblptrl,c
  5249  0006D0  0E7E               	movlw	high _dpowers
  5250  0006D2  20F4               	addwfc	prodh,w,c
  5251  0006D4  6EF7               	movwf	tblptrh,c
  5252  0006D6                     	if	1	;There are 3 active tblptr bytes
  5253  0006D6  6AF8               	clrf	tblptru,c
  5254  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5255  0006DA  22F8               	addwfc	tblptru,f,c
  5256  0006DC                     	endif
  5257  0006DC  0009               	tblrd		*+
  5258  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5259  0006E2  0009               	tblrd		*+
  5260  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5261  0006E8  0009               	tblrd		*+
  5262  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5263  0006EE  000A               	tblrd		*-
  5264  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5265  0006F4  EC8E  F011         	call	___llmod	;wreg free
  5266  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5267  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5268  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5269  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5270  000708                     l5005:
  5271  000708  0100               	movlb	0	; () banked
  5272  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5273  00070C  0100               	movlb	0	; () banked
  5274  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5275  000710  B4D8               	btfsc	status,2,c
  5276  000712  D00E               	goto	l5013
  5277  000714  D780               	goto	l4995
  5278  000716                     l5007:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5282  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5283  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5284  00071E  0E30               	movlw	48
  5285  000720  6EDF               	movwf	indf2,c
  5286                           
  5287                           ; BSR set to: 0
  5288  000722  0100               	movlb	0	; () banked
  5289  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5290  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;doprnt.c: 1246: prec--;
  5294  000728  0100               	movlb	0	; () banked
  5295  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5296  00072C  A0D8               	btfss	status,0,c
  5297  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5298  000730                     l5013:
  5299                           
  5300                           ; BSR set to: 0
  5301  000730  0100               	movlb	0	; () banked
  5302  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5303  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5304  000736  B4D8               	btfsc	status,2,c
  5305  000738  D0EA               	goto	l5055
  5306  00073A  D7ED               	goto	l5007
  5307  00073C                     l5015:
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;doprnt.c: 1255: }
  5311                           ;doprnt.c: 1262: {
  5312                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5313  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5314  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5315  000744  0100               	movlb	0	; () banked
  5316  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5317  00074A  0100               	movlb	0	; () banked
  5318  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5319  000750  0100               	movlb	0	; () banked
  5320  000752  0E00               	movlw	0
  5321  000754  0100               	movlb	0	; () banked
  5322  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5323  000758  0EFF               	movlw	-1
  5324  00075A  0100               	movlb	0	; () banked
  5325  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5326  00075E  0100               	movlb	0	; () banked
  5327  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5328                           
  5329                           ; BSR set to: 0
  5330  000762  0E02               	movlw	2
  5331  000764  0100               	movlb	0	; () banked
  5332  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5333  000768  0E00               	movlw	0
  5334  00076A  0100               	movlb	0	; () banked
  5335  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5339  00076E  0100               	movlb	0	; () banked
  5340  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5341  000772  0A80               	xorlw	128
  5342  000774  0F80               	addlw	128
  5343  000776  E10B               	bnz	u5295
  5344  000778  0E00               	movlw	0
  5345  00077A  0100               	movlb	0	; () banked
  5346  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5347  00077E  E107               	bnz	u5295
  5348  000780  0E00               	movlw	0
  5349  000782  0100               	movlb	0	; () banked
  5350  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5351  000786  E103               	bnz	u5295
  5352  000788  0E00               	movlw	0
  5353  00078A  0100               	movlb	0	; () banked
  5354  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5355  00078E                     u5295:
  5356  00078E  B0D8               	btfsc	status,0,c
  5357  000790  D012               	goto	l5025
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;doprnt.c: 1271: flag |= 0x03;
  5361  000792  0E03               	movlw	3
  5362  000794  0100               	movlb	0	; () banked
  5363  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;doprnt.c: 1272: _val._val = -_val._val;
  5367  000798  0100               	movlb	0	; () banked
  5368  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5369  00079C  0100               	movlb	0	; () banked
  5370  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5371  0007A0  0100               	movlb	0	; () banked
  5372  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5373  0007A4  0100               	movlb	0	; () banked
  5374  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5375  0007A8  0E00               	movlw	0
  5376  0007AA  0100               	movlb	0	; () banked
  5377  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5378  0007AE  0100               	movlb	0	; () banked
  5379  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5380  0007B2  0100               	movlb	0	; () banked
  5381  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5382  0007B6                     l5025:
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1273: }
  5386                           ;doprnt.c: 1275: }
  5387                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5388  0007B6  0E01               	movlw	1
  5389  0007B8  0100               	movlb	0	; () banked
  5390  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5391  0007BC                     
  5392                           ; BSR set to: 0
  5393  0007BC  0100               	movlb	0	; () banked
  5394  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5395  0007C0  0A0A               	xorlw	10
  5396  0007C2  B4D8               	btfsc	status,2,c
  5397  0007C4  D021               	goto	l5039
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5401                           
  5402                           ; BSR set to: 0
  5403                           
  5404                           ; BSR set to: 0
  5405  0007C6  0100               	movlb	0	; () banked
  5406  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5407  0007CA  0D04               	mullw	4
  5408  0007CC  0ECB               	movlw	low _dpowers
  5409  0007CE  24F3               	addwf	prodl,w,c
  5410  0007D0  6EF6               	movwf	tblptrl,c
  5411  0007D2  0E7E               	movlw	high _dpowers
  5412  0007D4  20F4               	addwfc	prodh,w,c
  5413  0007D6  6EF7               	movwf	tblptrh,c
  5414  0007D8                     	if	1	;There are 3 active tblptr bytes
  5415  0007D8  6AF8               	clrf	tblptru,c
  5416  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5417  0007DC  22F8               	addwfc	tblptru,f,c
  5418  0007DE                     	endif
  5419  0007DE  0009               	tblrd		*+
  5420  0007E0  50F5               	movf	tablat,w,c
  5421  0007E2  0100               	movlb	0	; () banked
  5422  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5423  0007E6  0009               	tblrd		*+
  5424  0007E8  50F5               	movf	tablat,w,c
  5425  0007EA  0100               	movlb	0	; () banked
  5426  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5427  0007EE  0009               	tblrd		*+
  5428  0007F0  50F5               	movf	tablat,w,c
  5429  0007F2  0100               	movlb	0	; () banked
  5430  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5431  0007F6  0009               	tblrd		*+
  5432  0007F8  50F5               	movf	tablat,w,c
  5433  0007FA  0100               	movlb	0	; () banked
  5434  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5435  0007FE  A0D8               	btfss	status,0,c
  5436  000800  D003               	goto	l5039
  5437                           
  5438                           ; BSR set to: 0
  5439                           
  5440                           ; BSR set to: 0
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;doprnt.c: 1316: break;
  5444  000802  0100               	movlb	0	; () banked
  5445  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5446  000806  D7DA               	goto	L6
  5447  000808                     l5039:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 1431: {
  5451                           ;doprnt.c: 1447: if(flag & 0x03)
  5452  000808  0E03               	movlw	3
  5453  00080A  0100               	movlb	0	; () banked
  5454  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5455  00080E  0100               	movlb	0	; () banked
  5456  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5457  000812  0E00               	movlw	0
  5458  000814  0100               	movlb	0	; () banked
  5459  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5460  000818  0100               	movlb	0	; () banked
  5461  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5462  00081C  0100               	movlb	0	; () banked
  5463  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5464  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5465  000822  B4D8               	btfsc	status,2,c
  5466  000824  D009               	goto	l5045
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5470  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5471  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5472  00082E  0E2D               	movlw	45
  5473  000830  6EDF               	movwf	indf2,c
  5474                           
  5475                           ; BSR set to: 0
  5476  000832  0100               	movlb	0	; () banked
  5477  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5478  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5479  000838                     l5045:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1478: }
  5483                           ;doprnt.c: 1481: prec = c;
  5484  000838  0100               	movlb	0	; () banked
  5485  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5486  00083C  0100               	movlb	0	; () banked
  5487  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5488  000840  0100               	movlb	0	; () banked
  5489  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5490  000844  0100               	movlb	0	; () banked
  5491  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5492  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5493                           
  5494                           ;doprnt.c: 1483: while(prec--) {
  5495  00084A  D057               	goto	l5053
  5496  00084C                     l5047:
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;doprnt.c: 1487: {
  5500                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5501  00084C  0100               	movlb	0	; () banked
  5502  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5503  000852  0100               	movlb	0	; () banked
  5504  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5505  000858  0100               	movlb	0	; () banked
  5506  00085A  90D8               	bcf	status,0,c
  5507  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5508  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5509  000860  0100               	movlb	0	; () banked
  5510  000862  90D8               	bcf	status,0,c
  5511  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5512  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5513  000868  0ECB               	movlw	low _dpowers
  5514  00086A  0100               	movlb	0	; () banked
  5515  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5516  00086E  6EF6               	movwf	tblptrl,c
  5517  000870  0E7E               	movlw	high _dpowers
  5518  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5519  000874  6EF7               	movwf	tblptrh,c
  5520  000876                     	if	1	;There are 3 active tblptr bytes
  5521  000876  6AF8               	clrf	tblptru,c
  5522  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5523  00087A  22F8               	addwfc	tblptru,f,c
  5524  00087C                     	endif
  5525  00087C  0009               	tblrd		*+
  5526  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5527  000882  0009               	tblrd		*+
  5528  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5529  000888  0009               	tblrd		*+
  5530  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5531  00088E  000A               	tblrd		*-
  5532  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5533  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5534  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5535  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5536  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5537  0008A4  ECB5  F00F         	call	___lldiv	;wreg free
  5538  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5539  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5540  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5541  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5542  0008B8  0E0A               	movlw	10
  5543  0008BA  6E2A               	movwf	___llmod@divisor,c
  5544  0008BC  0E00               	movlw	0
  5545  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5546  0008C0  0E00               	movlw	0
  5547  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5548  0008C4  0E00               	movlw	0
  5549  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5550  0008C8  EC8E  F011         	call	___llmod	;wreg free
  5551  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5552  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5553  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5554  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5555  0008DC  0100               	movlb	0	; () banked
  5556  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5557  0008E0  0F30               	addlw	48
  5558  0008E2  0100               	movlb	0	; () banked
  5559  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;doprnt.c: 1532: }
  5563                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5564  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5565  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5566  0008EE  0100               	movlb	0	; () banked
  5567  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5568                           
  5569                           ; BSR set to: 0
  5570  0008F4  0100               	movlb	0	; () banked
  5571  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5572  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5573  0008FA                     l5053:
  5574                           
  5575                           ; BSR set to: 0
  5576  0008FA  0100               	movlb	0	; () banked
  5577  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5578  0008FE  A0D8               	btfss	status,0,c
  5579  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5580  000902  0100               	movlb	0	; () banked
  5581  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5582  000906  B4D8               	btfsc	status,2,c
  5583  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5584  00090A  A4D8               	btfss	status,2,c
  5585  00090C  D79F               	goto	l5047
  5586  00090E                     l5055:
  5587                           
  5588                           ; BSR set to: 0
  5589  00090E  0100               	movlb	0	; () banked
  5590  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5591  000914  0100               	movlb	0	; () banked
  5592  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5593  00091A  0100               	movlb	0	; () banked
  5594  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5595  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5596  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5597  000920  6AF8               	clrf	tblptru,c
  5598  000922                     	endif
  5599  000922                     	if	0	;tblptru may be non-zero
  5600  000922                     	endif
  5601  000922  0008               	tblrd		*
  5602  000924  0100               	movlb	0	; () banked
  5603  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5604  00092A  0100               	movlb	0	; () banked
  5605  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5606  00092E  EF18  F000         	goto	l4853
  5607  000932                     l5057:
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;doprnt.c: 1547: *sp = 0;
  5611  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5612  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5613  00093A  0E00               	movlw	0
  5614  00093C  6EDF               	movwf	indf2,c
  5615                           
  5616                           ; BSR set to: 0
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;doprnt.c: 1549: return 0;
  5620                           ;	Return value of _sprintf is never used
  5621  00093E  0012               	return	
  5622  000940                     __end_of_sprintf:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           indf0	equ	0xFEF
  5632                           postinc0	equ	0xFEE
  5633                           fsr0h	equ	0xFEA
  5634                           fsr0l	equ	0xFE9
  5635                           wreg	equ	0xFE8
  5636                           postinc1	equ	0xFE6
  5637                           postdec1	equ	0xFE5
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _scale *****************
  5647 ;; Defined at:
  5648 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  scl             1    wreg     char 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  scl             1   18[BANK0 ] char 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  3   12[BANK0 ] char 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5662 ;;      Params:         0       3       0       0       0       0       0       0       0
  5663 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5665 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5666 ;;Total ram usage:        7 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    6
  5669 ;; This function calls:
  5670 ;;		___awdiv
  5671 ;;		___awmod
  5672 ;;		___ftmul
  5673 ;;		___wmul
  5674 ;; This function is called by:
  5675 ;;		_sprintf
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text27
  5680  000940                     __ptext27:
  5681                           	opt stack 0
  5682  000940                     _scale:
  5683                           	opt stack 21
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;incstack = 0
  5687                           ;scale@scl stored from wreg
  5688  000940  0100               	movlb	0	; () banked
  5689  000942  6F72               	movwf	scale@scl& (0+255),b
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;doprnt.c: 428: if(scl < 0) {
  5693  000944  0100               	movlb	0	; () banked
  5694  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5695  000948  D111               	goto	l4585
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;doprnt.c: 429: scl = -scl;
  5699  00094A  0100               	movlb	0	; () banked
  5700  00094C  6D72               	negf	scale@scl& (0+255),b
  5701                           
  5702                           ;doprnt.c: 430: if(scl>=110)
  5703  00094E  0100               	movlb	0	; () banked
  5704  000950  5172               	movf	scale@scl& (0+255),w,b
  5705  000952  0A80               	xorlw	128
  5706  000954  0F12               	addlw	-238
  5707  000956  A0D8               	btfss	status,0,c
  5708  000958  D0A0               	goto	l4575
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5712  00095A  0E00               	movlw	0
  5713  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5714  00095E  0E03               	movlw	3
  5715  000960  6E29               	movwf	___wmul@multiplicand,c
  5716  000962  0E00               	movlw	0
  5717  000964  6E22               	movwf	___awdiv@divisor+1,c
  5718  000966  0E0A               	movlw	10
  5719  000968  6E21               	movwf	___awdiv@divisor,c
  5720  00096A  0E00               	movlw	0
  5721  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5722  00096E  0E64               	movlw	100
  5723  000970  6E1B               	movwf	___awmod@divisor,c
  5724  000972  0100               	movlb	0	; () banked
  5725  000974  5172               	movf	scale@scl& (0+255),w,b
  5726  000976  6E19               	movwf	___awmod@dividend,c
  5727  000978  6A1A               	clrf	___awmod@dividend+1,c
  5728  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5729  00097C  061A               	decf	___awmod@dividend+1,f,c
  5730  00097E  ECE2  F00E         	call	___awmod	;wreg free
  5731  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5732  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5733  00098A  ECFB  F00D         	call	___awdiv	;wreg free
  5734  00098E  0E09               	movlw	9
  5735  000990  241F               	addwf	?___awdiv,w,c
  5736  000992  6E27               	movwf	___wmul@multiplier,c
  5737  000994  0E00               	movlw	0
  5738  000996  2020               	addwfc	?___awdiv+1,w,c
  5739  000998  6E28               	movwf	___wmul@multiplier+1,c
  5740  00099A  ECB3  F013         	call	___wmul	;wreg free
  5741  00099E  0EF3               	movlw	low __npowers_
  5742  0009A0  2427               	addwf	?___wmul,w,c
  5743  0009A2  6EF6               	movwf	tblptrl,c
  5744  0009A4  0E7E               	movlw	high __npowers_
  5745  0009A6  2028               	addwfc	?___wmul+1,w,c
  5746  0009A8  6EF7               	movwf	tblptrh,c
  5747  0009AA                     	if	1	;There are 3 active tblptr bytes
  5748  0009AA  6AF8               	clrf	tblptru,c
  5749  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5750  0009AE  22F8               	addwfc	tblptru,f,c
  5751  0009B0                     	endif
  5752  0009B0  0009               	tblrd		*+
  5753  0009B2  0100               	movlb	0	; () banked
  5754  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5755  0009B8  0009               	tblrd		*+
  5756  0009BA  0100               	movlb	0	; () banked
  5757  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5758  0009C0  000A               	tblrd		*-
  5759  0009C2  0100               	movlb	0	; () banked
  5760  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5761  0009C8  0E00               	movlw	0
  5762  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5763  0009CC  0E64               	movlw	100
  5764  0009CE  6E21               	movwf	___awdiv@divisor,c
  5765  0009D0  0100               	movlb	0	; () banked
  5766  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5767  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5768  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5769  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5770  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5771  0009DC  ECFB  F00D         	call	___awdiv	;wreg free
  5772  0009E0  0E12               	movlw	18
  5773  0009E2  241F               	addwf	?___awdiv,w,c
  5774  0009E4  6E27               	movwf	___wmul@multiplier,c
  5775  0009E6  0E00               	movlw	0
  5776  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5777  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5778  0009EC  0E00               	movlw	0
  5779  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5780  0009F0  0E03               	movlw	3
  5781  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5782  0009F4  ECB3  F013         	call	___wmul	;wreg free
  5783  0009F8  0EF3               	movlw	low __npowers_
  5784  0009FA  2427               	addwf	?___wmul,w,c
  5785  0009FC  6EF6               	movwf	tblptrl,c
  5786  0009FE  0E7E               	movlw	high __npowers_
  5787  000A00  2028               	addwfc	?___wmul+1,w,c
  5788  000A02  6EF7               	movwf	tblptrh,c
  5789  000A04                     	if	1	;There are 3 active tblptr bytes
  5790  000A04  6AF8               	clrf	tblptru,c
  5791  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  5792  000A08  22F8               	addwfc	tblptru,f,c
  5793  000A0A                     	endif
  5794  000A0A  0009               	tblrd		*+
  5795  000A0C  0100               	movlb	0	; () banked
  5796  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  5797  000A12  0009               	tblrd		*+
  5798  000A14  0100               	movlb	0	; () banked
  5799  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5800  000A1A  000A               	tblrd		*-
  5801  000A1C  0100               	movlb	0	; () banked
  5802  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5803  000A22  EC6F  F009         	call	___ftmul	;wreg free
  5804  000A26  C060  F06F         	movff	?___ftmul,_scale$2376
  5805  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2376+1
  5806  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2376+2
  5807                           
  5808                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5809  000A32  C06F  F060         	movff	_scale$2376,___ftmul@f1
  5810  000A36  C070  F061         	movff	_scale$2376+1,___ftmul@f1+1
  5811  000A3A  C071  F062         	movff	_scale$2376+2,___ftmul@f1+2
  5812  000A3E  0E00               	movlw	0
  5813  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  5814  000A42  0E03               	movlw	3
  5815  000A44  6E29               	movwf	___wmul@multiplicand,c
  5816  000A46  0E00               	movlw	0
  5817  000A48  6E1C               	movwf	___awmod@divisor+1,c
  5818  000A4A  0E0A               	movlw	10
  5819  000A4C  6E1B               	movwf	___awmod@divisor,c
  5820  000A4E  0100               	movlb	0	; () banked
  5821  000A50  5172               	movf	scale@scl& (0+255),w,b
  5822  000A52  6E19               	movwf	___awmod@dividend,c
  5823  000A54  6A1A               	clrf	___awmod@dividend+1,c
  5824  000A56  BE19               	btfsc	___awmod@dividend,7,c
  5825  000A58  061A               	decf	___awmod@dividend+1,f,c
  5826  000A5A  ECE2  F00E         	call	___awmod	;wreg free
  5827  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5828  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5829  000A66  ECB3  F013         	call	___wmul	;wreg free
  5830  000A6A  0EF3               	movlw	low __npowers_
  5831  000A6C  2427               	addwf	?___wmul,w,c
  5832  000A6E  6EF6               	movwf	tblptrl,c
  5833  000A70  0E7E               	movlw	high __npowers_
  5834  000A72  2028               	addwfc	?___wmul+1,w,c
  5835  000A74  6EF7               	movwf	tblptrh,c
  5836  000A76                     	if	1	;There are 3 active tblptr bytes
  5837  000A76  6AF8               	clrf	tblptru,c
  5838  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  5839  000A7A  22F8               	addwfc	tblptru,f,c
  5840  000A7C                     	endif
  5841  000A7C  0009               	tblrd		*+
  5842  000A7E  0100               	movlb	0	; () banked
  5843  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  5844  000A84  0009               	tblrd		*+
  5845  000A86  0100               	movlb	0	; () banked
  5846  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5847  000A8C  000A               	tblrd		*-
  5848  000A8E  0100               	movlb	0	; () banked
  5849  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5850  000A94  EC6F  F009         	call	___ftmul	;wreg free
  5851  000A98  D16F               	goto	L10
  5852  000A9A                     l4575:
  5853                           
  5854                           ;doprnt.c: 432: else if(scl > 10)
  5855  000A9A  0100               	movlb	0	; () banked
  5856  000A9C  5172               	movf	scale@scl& (0+255),w,b
  5857  000A9E  0A80               	xorlw	128
  5858  000AA0  0F75               	addlw	-139
  5859  000AA2  A0D8               	btfss	status,0,c
  5860  000AA4  D05B               	goto	l4581
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5864  000AA6  0E00               	movlw	0
  5865  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  5866  000AAA  0E0A               	movlw	10
  5867  000AAC  6E21               	movwf	___awdiv@divisor,c
  5868  000AAE  0100               	movlb	0	; () banked
  5869  000AB0  5172               	movf	scale@scl& (0+255),w,b
  5870  000AB2  6E1F               	movwf	___awdiv@dividend,c
  5871  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  5872  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  5873  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  5874  000ABA  ECFB  F00D         	call	___awdiv	;wreg free
  5875  000ABE  0E09               	movlw	9
  5876  000AC0  241F               	addwf	?___awdiv,w,c
  5877  000AC2  6E27               	movwf	___wmul@multiplier,c
  5878  000AC4  0E00               	movlw	0
  5879  000AC6  2020               	addwfc	?___awdiv+1,w,c
  5880  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  5881  000ACA  0E00               	movlw	0
  5882  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  5883  000ACE  0E03               	movlw	3
  5884  000AD0  6E29               	movwf	___wmul@multiplicand,c
  5885  000AD2  ECB3  F013         	call	___wmul	;wreg free
  5886  000AD6  0EF3               	movlw	low __npowers_
  5887  000AD8  2427               	addwf	?___wmul,w,c
  5888  000ADA  6EF6               	movwf	tblptrl,c
  5889  000ADC  0E7E               	movlw	high __npowers_
  5890  000ADE  2028               	addwfc	?___wmul+1,w,c
  5891  000AE0  6EF7               	movwf	tblptrh,c
  5892  000AE2                     	if	1	;There are 3 active tblptr bytes
  5893  000AE2  6AF8               	clrf	tblptru,c
  5894  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5895  000AE6  22F8               	addwfc	tblptru,f,c
  5896  000AE8                     	endif
  5897  000AE8  0009               	tblrd		*+
  5898  000AEA  0100               	movlb	0	; () banked
  5899  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  5900  000AF0  0009               	tblrd		*+
  5901  000AF2  0100               	movlb	0	; () banked
  5902  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5903  000AF8  000A               	tblrd		*-
  5904  000AFA  0100               	movlb	0	; () banked
  5905  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5906  000B00  0E00               	movlw	0
  5907  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  5908  000B04  0E03               	movlw	3
  5909  000B06  6E29               	movwf	___wmul@multiplicand,c
  5910  000B08  0E00               	movlw	0
  5911  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  5912  000B0C  0E0A               	movlw	10
  5913  000B0E  6E1B               	movwf	___awmod@divisor,c
  5914  000B10  0100               	movlb	0	; () banked
  5915  000B12  5172               	movf	scale@scl& (0+255),w,b
  5916  000B14  6E19               	movwf	___awmod@dividend,c
  5917  000B16  6A1A               	clrf	___awmod@dividend+1,c
  5918  000B18  BE19               	btfsc	___awmod@dividend,7,c
  5919  000B1A  061A               	decf	___awmod@dividend+1,f,c
  5920  000B1C  ECE2  F00E         	call	___awmod	;wreg free
  5921  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  5922  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5923  000B28  ECB3  F013         	call	___wmul	;wreg free
  5924  000B2C  0EF3               	movlw	low __npowers_
  5925  000B2E  2427               	addwf	?___wmul,w,c
  5926  000B30  6EF6               	movwf	tblptrl,c
  5927  000B32  0E7E               	movlw	high __npowers_
  5928  000B34  2028               	addwfc	?___wmul+1,w,c
  5929  000B36  6EF7               	movwf	tblptrh,c
  5930  000B38                     	if	1	;There are 3 active tblptr bytes
  5931  000B38  6AF8               	clrf	tblptru,c
  5932  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  5933  000B3C  22F8               	addwfc	tblptru,f,c
  5934  000B3E                     	endif
  5935  000B3E  0009               	tblrd		*+
  5936  000B40  0100               	movlb	0	; () banked
  5937  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  5938  000B46  0009               	tblrd		*+
  5939  000B48  0100               	movlb	0	; () banked
  5940  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5941  000B4E  000A               	tblrd		*-
  5942  000B50  0100               	movlb	0	; () banked
  5943  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5944  000B56  EC6F  F009         	call	___ftmul	;wreg free
  5945  000B5A  D10E               	goto	L10
  5946  000B5C                     l4581:
  5947                           
  5948                           ;doprnt.c: 434: return _npowers_[scl];
  5949  000B5C  0100               	movlb	0	; () banked
  5950  000B5E  5172               	movf	scale@scl& (0+255),w,b
  5951  000B60  0D03               	mullw	3
  5952  000B62  0EF3               	movlw	low __npowers_
  5953  000B64  24F3               	addwf	prodl,w,c
  5954  000B66  6EF6               	movwf	tblptrl,c
  5955  000B68  0E7E               	movlw	high __npowers_
  5956  000B6A  D114               	goto	L9
  5957  000B6C                     l4585:
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;doprnt.c: 435: }
  5961                           ;doprnt.c: 436: if(scl>=110)
  5962  000B6C  0100               	movlb	0	; () banked
  5963  000B6E  5172               	movf	scale@scl& (0+255),w,b
  5964  000B70  0A80               	xorlw	128
  5965  000B72  0F12               	addlw	-238
  5966  000B74  A0D8               	btfss	status,0,c
  5967  000B76  D0A0               	goto	l4593
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5971  000B78  0E00               	movlw	0
  5972  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  5973  000B7C  0E03               	movlw	3
  5974  000B7E  6E29               	movwf	___wmul@multiplicand,c
  5975  000B80  0E00               	movlw	0
  5976  000B82  6E22               	movwf	___awdiv@divisor+1,c
  5977  000B84  0E0A               	movlw	10
  5978  000B86  6E21               	movwf	___awdiv@divisor,c
  5979  000B88  0E00               	movlw	0
  5980  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  5981  000B8C  0E64               	movlw	100
  5982  000B8E  6E1B               	movwf	___awmod@divisor,c
  5983  000B90  0100               	movlb	0	; () banked
  5984  000B92  5172               	movf	scale@scl& (0+255),w,b
  5985  000B94  6E19               	movwf	___awmod@dividend,c
  5986  000B96  6A1A               	clrf	___awmod@dividend+1,c
  5987  000B98  BE19               	btfsc	___awmod@dividend,7,c
  5988  000B9A  061A               	decf	___awmod@dividend+1,f,c
  5989  000B9C  ECE2  F00E         	call	___awmod	;wreg free
  5990  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5991  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5992  000BA8  ECFB  F00D         	call	___awdiv	;wreg free
  5993  000BAC  0E09               	movlw	9
  5994  000BAE  241F               	addwf	?___awdiv,w,c
  5995  000BB0  6E27               	movwf	___wmul@multiplier,c
  5996  000BB2  0E00               	movlw	0
  5997  000BB4  2020               	addwfc	?___awdiv+1,w,c
  5998  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  5999  000BB8  ECB3  F013         	call	___wmul	;wreg free
  6000  000BBC  0E1A               	movlw	low __powers_
  6001  000BBE  2427               	addwf	?___wmul,w,c
  6002  000BC0  6EF6               	movwf	tblptrl,c
  6003  000BC2  0E7F               	movlw	high __powers_
  6004  000BC4  2028               	addwfc	?___wmul+1,w,c
  6005  000BC6  6EF7               	movwf	tblptrh,c
  6006  000BC8                     	if	1	;There are 3 active tblptr bytes
  6007  000BC8  6AF8               	clrf	tblptru,c
  6008  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6009  000BCC  22F8               	addwfc	tblptru,f,c
  6010  000BCE                     	endif
  6011  000BCE  0009               	tblrd		*+
  6012  000BD0  0100               	movlb	0	; () banked
  6013  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6014  000BD6  0009               	tblrd		*+
  6015  000BD8  0100               	movlb	0	; () banked
  6016  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6017  000BDE  000A               	tblrd		*-
  6018  000BE0  0100               	movlb	0	; () banked
  6019  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6020  000BE6  0E00               	movlw	0
  6021  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6022  000BEA  0E64               	movlw	100
  6023  000BEC  6E21               	movwf	___awdiv@divisor,c
  6024  000BEE  0100               	movlb	0	; () banked
  6025  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6026  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6027  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6028  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6029  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6030  000BFA  ECFB  F00D         	call	___awdiv	;wreg free
  6031  000BFE  0E12               	movlw	18
  6032  000C00  241F               	addwf	?___awdiv,w,c
  6033  000C02  6E27               	movwf	___wmul@multiplier,c
  6034  000C04  0E00               	movlw	0
  6035  000C06  2020               	addwfc	?___awdiv+1,w,c
  6036  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6037  000C0A  0E00               	movlw	0
  6038  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6039  000C0E  0E03               	movlw	3
  6040  000C10  6E29               	movwf	___wmul@multiplicand,c
  6041  000C12  ECB3  F013         	call	___wmul	;wreg free
  6042  000C16  0E1A               	movlw	low __powers_
  6043  000C18  2427               	addwf	?___wmul,w,c
  6044  000C1A  6EF6               	movwf	tblptrl,c
  6045  000C1C  0E7F               	movlw	high __powers_
  6046  000C1E  2028               	addwfc	?___wmul+1,w,c
  6047  000C20  6EF7               	movwf	tblptrh,c
  6048  000C22                     	if	1	;There are 3 active tblptr bytes
  6049  000C22  6AF8               	clrf	tblptru,c
  6050  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6051  000C26  22F8               	addwfc	tblptru,f,c
  6052  000C28                     	endif
  6053  000C28  0009               	tblrd		*+
  6054  000C2A  0100               	movlb	0	; () banked
  6055  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6056  000C30  0009               	tblrd		*+
  6057  000C32  0100               	movlb	0	; () banked
  6058  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6059  000C38  000A               	tblrd		*-
  6060  000C3A  0100               	movlb	0	; () banked
  6061  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6062  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6063  000C44  C060  F06F         	movff	?___ftmul,_scale$2376
  6064  000C48  C061  F070         	movff	?___ftmul+1,_scale$2376+1
  6065  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2376+2
  6066                           
  6067                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6068  000C50  C06F  F060         	movff	_scale$2376,___ftmul@f1
  6069  000C54  C070  F061         	movff	_scale$2376+1,___ftmul@f1+1
  6070  000C58  C071  F062         	movff	_scale$2376+2,___ftmul@f1+2
  6071  000C5C  0E00               	movlw	0
  6072  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6073  000C60  0E03               	movlw	3
  6074  000C62  6E29               	movwf	___wmul@multiplicand,c
  6075  000C64  0E00               	movlw	0
  6076  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6077  000C68  0E0A               	movlw	10
  6078  000C6A  6E1B               	movwf	___awmod@divisor,c
  6079  000C6C  0100               	movlb	0	; () banked
  6080  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6081  000C70  6E19               	movwf	___awmod@dividend,c
  6082  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6083  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6084  000C76  061A               	decf	___awmod@dividend+1,f,c
  6085  000C78  ECE2  F00E         	call	___awmod	;wreg free
  6086  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6087  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6088  000C84  ECB3  F013         	call	___wmul	;wreg free
  6089  000C88  0E1A               	movlw	low __powers_
  6090  000C8A  2427               	addwf	?___wmul,w,c
  6091  000C8C  6EF6               	movwf	tblptrl,c
  6092  000C8E  0E7F               	movlw	high __powers_
  6093  000C90  2028               	addwfc	?___wmul+1,w,c
  6094  000C92  6EF7               	movwf	tblptrh,c
  6095  000C94                     	if	1	;There are 3 active tblptr bytes
  6096  000C94  6AF8               	clrf	tblptru,c
  6097  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6098  000C98  22F8               	addwfc	tblptru,f,c
  6099  000C9A                     	endif
  6100  000C9A  0009               	tblrd		*+
  6101  000C9C  0100               	movlb	0	; () banked
  6102  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6103  000CA2  0009               	tblrd		*+
  6104  000CA4  0100               	movlb	0	; () banked
  6105  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6106  000CAA  000A               	tblrd		*-
  6107  000CAC  0100               	movlb	0	; () banked
  6108  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6109  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6110  000CB6  D060               	goto	L10
  6111  000CB8                     l4593:
  6112                           
  6113                           ;doprnt.c: 438: else if(scl > 10)
  6114  000CB8  0100               	movlb	0	; () banked
  6115  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6116  000CBC  0A80               	xorlw	128
  6117  000CBE  0F75               	addlw	-139
  6118  000CC0  A0D8               	btfss	status,0,c
  6119  000CC2  D061               	goto	l4599
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6123  000CC4  0E00               	movlw	0
  6124  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6125  000CC8  0E0A               	movlw	10
  6126  000CCA  6E21               	movwf	___awdiv@divisor,c
  6127  000CCC  0100               	movlb	0	; () banked
  6128  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6129  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6130  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6131  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6132  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6133  000CD8  ECFB  F00D         	call	___awdiv	;wreg free
  6134  000CDC  0E09               	movlw	9
  6135  000CDE  241F               	addwf	?___awdiv,w,c
  6136  000CE0  6E27               	movwf	___wmul@multiplier,c
  6137  000CE2  0E00               	movlw	0
  6138  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6139  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6140  000CE8  0E00               	movlw	0
  6141  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6142  000CEC  0E03               	movlw	3
  6143  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6144  000CF0  ECB3  F013         	call	___wmul	;wreg free
  6145  000CF4  0E1A               	movlw	low __powers_
  6146  000CF6  2427               	addwf	?___wmul,w,c
  6147  000CF8  6EF6               	movwf	tblptrl,c
  6148  000CFA  0E7F               	movlw	high __powers_
  6149  000CFC  2028               	addwfc	?___wmul+1,w,c
  6150  000CFE  6EF7               	movwf	tblptrh,c
  6151  000D00                     	if	1	;There are 3 active tblptr bytes
  6152  000D00  6AF8               	clrf	tblptru,c
  6153  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6154  000D04  22F8               	addwfc	tblptru,f,c
  6155  000D06                     	endif
  6156  000D06  0009               	tblrd		*+
  6157  000D08  0100               	movlb	0	; () banked
  6158  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6159  000D0E  0009               	tblrd		*+
  6160  000D10  0100               	movlb	0	; () banked
  6161  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6162  000D16  000A               	tblrd		*-
  6163  000D18  0100               	movlb	0	; () banked
  6164  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6165  000D1E  0E00               	movlw	0
  6166  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6167  000D22  0E03               	movlw	3
  6168  000D24  6E29               	movwf	___wmul@multiplicand,c
  6169  000D26  0E00               	movlw	0
  6170  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6171  000D2A  0E0A               	movlw	10
  6172  000D2C  6E1B               	movwf	___awmod@divisor,c
  6173  000D2E  0100               	movlb	0	; () banked
  6174  000D30  5172               	movf	scale@scl& (0+255),w,b
  6175  000D32  6E19               	movwf	___awmod@dividend,c
  6176  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6177  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6178  000D38  061A               	decf	___awmod@dividend+1,f,c
  6179  000D3A  ECE2  F00E         	call	___awmod	;wreg free
  6180  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6181  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6182  000D46  ECB3  F013         	call	___wmul	;wreg free
  6183  000D4A  0E1A               	movlw	low __powers_
  6184  000D4C  2427               	addwf	?___wmul,w,c
  6185  000D4E  6EF6               	movwf	tblptrl,c
  6186  000D50  0E7F               	movlw	high __powers_
  6187  000D52  2028               	addwfc	?___wmul+1,w,c
  6188  000D54  6EF7               	movwf	tblptrh,c
  6189  000D56                     	if	1	;There are 3 active tblptr bytes
  6190  000D56  6AF8               	clrf	tblptru,c
  6191  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6192  000D5A  22F8               	addwfc	tblptru,f,c
  6193  000D5C                     	endif
  6194  000D5C  0009               	tblrd		*+
  6195  000D5E  0100               	movlb	0	; () banked
  6196  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6197  000D64  0009               	tblrd		*+
  6198  000D66  0100               	movlb	0	; () banked
  6199  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6200  000D6C  000A               	tblrd		*-
  6201  000D6E  0100               	movlb	0	; () banked
  6202  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6203  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6204  000D78                     L10:
  6205  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6206  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6207  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6208  000D84  D018               	goto	l452
  6209  000D86                     l4599:
  6210                           
  6211                           ;doprnt.c: 440: return _powers_[scl];
  6212  000D86  0100               	movlb	0	; () banked
  6213  000D88  5172               	movf	scale@scl& (0+255),w,b
  6214  000D8A  0D03               	mullw	3
  6215  000D8C  0E1A               	movlw	low __powers_
  6216  000D8E  24F3               	addwf	prodl,w,c
  6217  000D90  6EF6               	movwf	tblptrl,c
  6218  000D92  0E7F               	movlw	high __powers_
  6219  000D94                     L9:
  6220  000D94  20F4               	addwfc	prodh,w,c
  6221  000D96  6EF7               	movwf	tblptrh,c
  6222  000D98                     	if	1	;There are 3 active tblptr bytes
  6223  000D98  6AF8               	clrf	tblptru,c
  6224  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6225  000D9C  22F8               	addwfc	tblptru,f,c
  6226  000D9E                     	endif
  6227  000D9E  0009               	tblrd		*+
  6228  000DA0  0100               	movlb	0	; () banked
  6229  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6230  000DA6  0009               	tblrd		*+
  6231  000DA8  0100               	movlb	0	; () banked
  6232  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6233  000DAE  000A               	tblrd		*-
  6234  000DB0  0100               	movlb	0	; () banked
  6235  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6236  000DB6                     l452:
  6237  000DB6  0012               	return	
  6238  000DB8                     __end_of_scale:
  6239                           	opt stack 0
  6240                           tblptru	equ	0xFF8
  6241                           tblptrh	equ	0xFF7
  6242                           tblptrl	equ	0xFF6
  6243                           tablat	equ	0xFF5
  6244                           prodh	equ	0xFF4
  6245                           prodl	equ	0xFF3
  6246                           intcon	equ	0xFF2
  6247                           indf0	equ	0xFEF
  6248                           postinc0	equ	0xFEE
  6249                           fsr0h	equ	0xFEA
  6250                           fsr0l	equ	0xFE9
  6251                           wreg	equ	0xFE8
  6252                           postinc1	equ	0xFE6
  6253                           postdec1	equ	0xFE5
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _fround *****************
  6263 ;; Defined at:
  6264 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  prec            1    wreg     unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  prec            1   21[BANK0 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  3   12[BANK0 ] unsigned char 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6278 ;;      Params:         0       3       0       0       0       0       0       0       0
  6279 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6281 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6282 ;;Total ram usage:       10 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    6
  6285 ;; This function calls:
  6286 ;;		___awdiv
  6287 ;;		___awmod
  6288 ;;		___ftmul
  6289 ;;		___wmul
  6290 ;; This function is called by:
  6291 ;;		_sprintf
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text28
  6296  000DB8                     __ptext28:
  6297                           	opt stack 0
  6298  000DB8                     _fround:
  6299                           	opt stack 21
  6300                           
  6301                           ;incstack = 0
  6302                           ;fround@prec stored from wreg
  6303  000DB8  0100               	movlb	0	; () banked
  6304  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 413: if(prec>=110)
  6308  000DBC  0E6D               	movlw	109
  6309  000DBE  0100               	movlb	0	; () banked
  6310  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6311  000DC2  D0B1               	goto	l4553
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6315  000DC4  0E00               	movlw	0
  6316  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6317  000DC8  0E03               	movlw	3
  6318  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6319  000DCC  0E00               	movlw	0
  6320  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6321  000DD0  0E0A               	movlw	10
  6322  000DD2  6E21               	movwf	___awdiv@divisor,c
  6323  000DD4  0E00               	movlw	0
  6324  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6325  000DD8  0E64               	movlw	100
  6326  000DDA  6E1B               	movwf	___awmod@divisor,c
  6327  000DDC  0100               	movlb	0	; () banked
  6328  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6329  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6330  000DE4  ECE2  F00E         	call	___awmod	;wreg free
  6331  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6332  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6333  000DF0  ECFB  F00D         	call	___awdiv	;wreg free
  6334  000DF4  0E09               	movlw	9
  6335  000DF6  241F               	addwf	?___awdiv,w,c
  6336  000DF8  6E27               	movwf	___wmul@multiplier,c
  6337  000DFA  0E00               	movlw	0
  6338  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6339  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6340  000E00  ECB3  F013         	call	___wmul	;wreg free
  6341  000E04  0EF3               	movlw	low __npowers_
  6342  000E06  2427               	addwf	?___wmul,w,c
  6343  000E08  6EF6               	movwf	tblptrl,c
  6344  000E0A  0E7E               	movlw	high __npowers_
  6345  000E0C  2028               	addwfc	?___wmul+1,w,c
  6346  000E0E  6EF7               	movwf	tblptrh,c
  6347  000E10                     	if	1	;There are 3 active tblptr bytes
  6348  000E10  6AF8               	clrf	tblptru,c
  6349  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6350  000E14  22F8               	addwfc	tblptru,f,c
  6351  000E16                     	endif
  6352  000E16  0009               	tblrd		*+
  6353  000E18  0100               	movlb	0	; () banked
  6354  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6355  000E1E  0009               	tblrd		*+
  6356  000E20  0100               	movlb	0	; () banked
  6357  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6358  000E26  000A               	tblrd		*-
  6359  000E28  0100               	movlb	0	; () banked
  6360  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6361  000E2E  0E00               	movlw	0
  6362  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6363  000E32  0E64               	movlw	100
  6364  000E34  6E21               	movwf	___awdiv@divisor,c
  6365  000E36  0100               	movlb	0	; () banked
  6366  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6367  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6368  000E3E  ECFB  F00D         	call	___awdiv	;wreg free
  6369  000E42  0E12               	movlw	18
  6370  000E44  241F               	addwf	?___awdiv,w,c
  6371  000E46  6E27               	movwf	___wmul@multiplier,c
  6372  000E48  0E00               	movlw	0
  6373  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6374  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6375  000E4E  0E00               	movlw	0
  6376  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6377  000E52  0E03               	movlw	3
  6378  000E54  6E29               	movwf	___wmul@multiplicand,c
  6379  000E56  ECB3  F013         	call	___wmul	;wreg free
  6380  000E5A  0EF3               	movlw	low __npowers_
  6381  000E5C  2427               	addwf	?___wmul,w,c
  6382  000E5E  6EF6               	movwf	tblptrl,c
  6383  000E60  0E7E               	movlw	high __npowers_
  6384  000E62  2028               	addwfc	?___wmul+1,w,c
  6385  000E64  6EF7               	movwf	tblptrh,c
  6386  000E66                     	if	1	;There are 3 active tblptr bytes
  6387  000E66  6AF8               	clrf	tblptru,c
  6388  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6389  000E6A  22F8               	addwfc	tblptru,f,c
  6390  000E6C                     	endif
  6391  000E6C  0009               	tblrd		*+
  6392  000E6E  0100               	movlb	0	; () banked
  6393  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6394  000E74  0009               	tblrd		*+
  6395  000E76  0100               	movlb	0	; () banked
  6396  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6397  000E7C  000A               	tblrd		*-
  6398  000E7E  0100               	movlb	0	; () banked
  6399  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6400  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6401  000E88  C060  F072         	movff	?___ftmul,_fround$2374
  6402  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2374+1
  6403  000E90  C062  F074         	movff	?___ftmul+2,_fround$2374+2
  6404                           
  6405                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6406  000E94  0E00               	movlw	0
  6407  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6408  000E98  0E03               	movlw	3
  6409  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6410  000E9C  0E00               	movlw	0
  6411  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6412  000EA0  0E0A               	movlw	10
  6413  000EA2  6E1B               	movwf	___awmod@divisor,c
  6414  000EA4  0100               	movlb	0	; () banked
  6415  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6416  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6417  000EAC  ECE2  F00E         	call	___awmod	;wreg free
  6418  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6419  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6420  000EB8  ECB3  F013         	call	___wmul	;wreg free
  6421  000EBC  0EF3               	movlw	low __npowers_
  6422  000EBE  2427               	addwf	?___wmul,w,c
  6423  000EC0  6EF6               	movwf	tblptrl,c
  6424  000EC2  0E7E               	movlw	high __npowers_
  6425  000EC4  2028               	addwfc	?___wmul+1,w,c
  6426  000EC6  6EF7               	movwf	tblptrh,c
  6427  000EC8                     	if	1	;There are 3 active tblptr bytes
  6428  000EC8  6AF8               	clrf	tblptru,c
  6429  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6430  000ECC  22F8               	addwfc	tblptru,f,c
  6431  000ECE                     	endif
  6432  000ECE  0009               	tblrd		*+
  6433  000ED0  0100               	movlb	0	; () banked
  6434  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6435  000ED6  0009               	tblrd		*+
  6436  000ED8  0100               	movlb	0	; () banked
  6437  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6438  000EDE  000A               	tblrd		*-
  6439  000EE0  0100               	movlb	0	; () banked
  6440  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6441  000EE6  C072  F060         	movff	_fround$2374,___ftmul@f1
  6442  000EEA  C073  F061         	movff	_fround$2374+1,___ftmul@f1+1
  6443  000EEE  C074  F062         	movff	_fround$2374+2,___ftmul@f1+2
  6444  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6445  000EF6  C060  F06F         	movff	?___ftmul,_fround$2375
  6446  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2375+1
  6447  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2375+2
  6448                           
  6449                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6450  000F02  C06F  F060         	movff	_fround$2375,___ftmul@f1
  6451  000F06  C070  F061         	movff	_fround$2375+1,___ftmul@f1+1
  6452  000F0A  C071  F062         	movff	_fround$2375+2,___ftmul@f1+2
  6453  000F0E  0E00               	movlw	0
  6454  000F10  0100               	movlb	0	; () banked
  6455  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6456  000F14  0E00               	movlw	0
  6457  000F16  0100               	movlb	0	; () banked
  6458  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6459  000F1A  0E3F               	movlw	63
  6460  000F1C  0100               	movlb	0	; () banked
  6461  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6462  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6463  000F24  D095               	goto	L12
  6464  000F26                     l4553:
  6465                           
  6466                           ;doprnt.c: 415: else if(prec > 10)
  6467  000F26  0E0A               	movlw	10
  6468  000F28  0100               	movlb	0	; () banked
  6469  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6470  000F2C  D06E               	goto	l4561
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6474  000F2E  0E00               	movlw	0
  6475  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6476  000F32  0E03               	movlw	3
  6477  000F34  6E29               	movwf	___wmul@multiplicand,c
  6478  000F36  0E00               	movlw	0
  6479  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6480  000F3A  0E0A               	movlw	10
  6481  000F3C  6E1B               	movwf	___awmod@divisor,c
  6482  000F3E  0100               	movlb	0	; () banked
  6483  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6484  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6485  000F46  ECE2  F00E         	call	___awmod	;wreg free
  6486  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6487  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6488  000F52  ECB3  F013         	call	___wmul	;wreg free
  6489  000F56  0EF3               	movlw	low __npowers_
  6490  000F58  2427               	addwf	?___wmul,w,c
  6491  000F5A  6EF6               	movwf	tblptrl,c
  6492  000F5C  0E7E               	movlw	high __npowers_
  6493  000F5E  2028               	addwfc	?___wmul+1,w,c
  6494  000F60  6EF7               	movwf	tblptrh,c
  6495  000F62                     	if	1	;There are 3 active tblptr bytes
  6496  000F62  6AF8               	clrf	tblptru,c
  6497  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6498  000F66  22F8               	addwfc	tblptru,f,c
  6499  000F68                     	endif
  6500  000F68  0009               	tblrd		*+
  6501  000F6A  0100               	movlb	0	; () banked
  6502  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6503  000F70  0009               	tblrd		*+
  6504  000F72  0100               	movlb	0	; () banked
  6505  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6506  000F78  000A               	tblrd		*-
  6507  000F7A  0100               	movlb	0	; () banked
  6508  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6509  000F80  0E00               	movlw	0
  6510  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6511  000F84  0E0A               	movlw	10
  6512  000F86  6E21               	movwf	___awdiv@divisor,c
  6513  000F88  0100               	movlb	0	; () banked
  6514  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6515  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6516  000F90  ECFB  F00D         	call	___awdiv	;wreg free
  6517  000F94  0E09               	movlw	9
  6518  000F96  241F               	addwf	?___awdiv,w,c
  6519  000F98  6E27               	movwf	___wmul@multiplier,c
  6520  000F9A  0E00               	movlw	0
  6521  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6522  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6523  000FA0  0E00               	movlw	0
  6524  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6525  000FA4  0E03               	movlw	3
  6526  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6527  000FA8  ECB3  F013         	call	___wmul	;wreg free
  6528  000FAC  0EF3               	movlw	low __npowers_
  6529  000FAE  2427               	addwf	?___wmul,w,c
  6530  000FB0  6EF6               	movwf	tblptrl,c
  6531  000FB2  0E7E               	movlw	high __npowers_
  6532  000FB4  2028               	addwfc	?___wmul+1,w,c
  6533  000FB6  6EF7               	movwf	tblptrh,c
  6534  000FB8                     	if	1	;There are 3 active tblptr bytes
  6535  000FB8  6AF8               	clrf	tblptru,c
  6536  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6537  000FBC  22F8               	addwfc	tblptru,f,c
  6538  000FBE                     	endif
  6539  000FBE  0009               	tblrd		*+
  6540  000FC0  0100               	movlb	0	; () banked
  6541  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6542  000FC6  0009               	tblrd		*+
  6543  000FC8  0100               	movlb	0	; () banked
  6544  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6545  000FCE  000A               	tblrd		*-
  6546  000FD0  0100               	movlb	0	; () banked
  6547  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6548  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6549  000FDA  C060  F072         	movff	?___ftmul,_fround$2374
  6550  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2374+1
  6551  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2374+2
  6552                           
  6553                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6554  000FE6  C072  F060         	movff	_fround$2374,___ftmul@f1
  6555  000FEA  C073  F061         	movff	_fround$2374+1,___ftmul@f1+1
  6556  000FEE  C074  F062         	movff	_fround$2374+2,___ftmul@f1+2
  6557  000FF2  0E00               	movlw	0
  6558  000FF4  0100               	movlb	0	; () banked
  6559  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6560  000FF8  0E00               	movlw	0
  6561  000FFA  0100               	movlb	0	; () banked
  6562  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6563  000FFE  0E3F               	movlw	63
  6564  001000  0100               	movlb	0	; () banked
  6565  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6566  001004  EC6F  F009         	call	___ftmul	;wreg free
  6567  001008  D023               	goto	L12
  6568  00100A                     l4561:
  6569                           
  6570                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6571  00100A  0100               	movlb	0	; () banked
  6572  00100C  5175               	movf	fround@prec& (0+255),w,b
  6573  00100E  0D03               	mullw	3
  6574  001010  0EF3               	movlw	low __npowers_
  6575  001012  24F3               	addwf	prodl,w,c
  6576  001014  6EF6               	movwf	tblptrl,c
  6577  001016  0E7E               	movlw	high __npowers_
  6578  001018  20F4               	addwfc	prodh,w,c
  6579  00101A  6EF7               	movwf	tblptrh,c
  6580  00101C                     	if	1	;There are 3 active tblptr bytes
  6581  00101C  6AF8               	clrf	tblptru,c
  6582  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6583  001020  22F8               	addwfc	tblptru,f,c
  6584  001022                     	endif
  6585  001022  0009               	tblrd		*+
  6586  001024  0100               	movlb	0	; () banked
  6587  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6588  00102A  0009               	tblrd		*+
  6589  00102C  0100               	movlb	0	; () banked
  6590  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6591  001032  000A               	tblrd		*-
  6592  001034  0100               	movlb	0	; () banked
  6593  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6594  00103A  0E00               	movlw	0
  6595  00103C  0100               	movlb	0	; () banked
  6596  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6597  001040  0E00               	movlw	0
  6598  001042  0100               	movlb	0	; () banked
  6599  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6600  001046  0E3F               	movlw	63
  6601  001048  0100               	movlb	0	; () banked
  6602  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6603  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6604  001050                     L12:
  6605  001050  C060  F06C         	movff	?___ftmul,?_fround
  6606  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6607  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6608  00105C  0012               	return	
  6609  00105E                     __end_of_fround:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           intcon	equ	0xFF2
  6618                           indf0	equ	0xFEF
  6619                           postinc0	equ	0xFEE
  6620                           fsr0h	equ	0xFEA
  6621                           fsr0l	equ	0xFE9
  6622                           wreg	equ	0xFE8
  6623                           postinc1	equ	0xFE6
  6624                           postdec1	equ	0xFE5
  6625                           fsr1l	equ	0xFE1
  6626                           indf2	equ	0xFDF
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function ___wmul *****************
  6634 ;; Defined at:
  6635 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;  multiplier      2   38[COMRAM] unsigned int 
  6638 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;  product         2   42[COMRAM] unsigned int 
  6641 ;; Return value:  Size  Location     Type
  6642 ;;                  2   38[COMRAM] unsigned int 
  6643 ;; Registers used:
  6644 ;;		wreg, status,2, status,0, prodl, prodh
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 0/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6650 ;;      Params:         4       0       0       0       0       0       0       0       0
  6651 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6653 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6654 ;;Total ram usage:        6 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    4
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_fround
  6661 ;;		_scale
  6662 ;;		_sprintf
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text29
  6667  002766                     __ptext29:
  6668                           	opt stack 0
  6669  002766                     ___wmul:
  6670                           	opt stack 22
  6671                           
  6672                           ;incstack = 0
  6673  002766  5027               	movf	___wmul@multiplier,w,c
  6674  002768  0229               	mulwf	___wmul@multiplicand,c
  6675  00276A  CFF3 F02B          	movff	prodl,___wmul@product
  6676  00276E  CFF4 F02C          	movff	prodh,___wmul@product+1
  6677  002772  5027               	movf	___wmul@multiplier,w,c
  6678  002774  022A               	mulwf	___wmul@multiplicand+1,c
  6679  002776  50F3               	movf	prodl,w,c
  6680  002778  262C               	addwf	___wmul@product+1,f,c
  6681  00277A  5028               	movf	___wmul@multiplier+1,w,c
  6682  00277C  0229               	mulwf	___wmul@multiplicand,c
  6683  00277E  50F3               	movf	prodl,w,c
  6684  002780  262C               	addwf	___wmul@product+1,f,c
  6685  002782  C02B  F027         	movff	___wmul@product,?___wmul
  6686  002786  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6687  00278A  0012               	return	
  6688  00278C                     __end_of___wmul:
  6689                           	opt stack 0
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           indf0	equ	0xFEF
  6698                           postinc0	equ	0xFEE
  6699                           fsr0h	equ	0xFEA
  6700                           fsr0l	equ	0xFE9
  6701                           wreg	equ	0xFE8
  6702                           postinc1	equ	0xFE6
  6703                           postdec1	equ	0xFE5
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           fsr2h	equ	0xFDA
  6709                           fsr2l	equ	0xFD9
  6710                           status	equ	0xFD8
  6711                           
  6712 ;; *************** function ___ftmul *****************
  6713 ;; Defined at:
  6714 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  f1              3    0[BANK0 ] float 
  6717 ;;  f2              3    3[BANK0 ] float 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6720 ;;  sign            1   11[BANK0 ] unsigned char 
  6721 ;;  cntr            1   10[BANK0 ] unsigned char 
  6722 ;;  exp             1    6[BANK0 ] unsigned char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  3    0[BANK0 ] float 
  6725 ;; Registers used:
  6726 ;;		wreg, status,2, status,0, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6732 ;;      Params:         0       6       0       0       0       0       0       0       0
  6733 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6734 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6735 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6736 ;;Total ram usage:       15 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    5
  6739 ;; This function calls:
  6740 ;;		___ftpack
  6741 ;; This function is called by:
  6742 ;;		_PWM_DutyCycle1
  6743 ;;		_PWM_DutyCycle2
  6744 ;;		_fround
  6745 ;;		_scale
  6746 ;;		_sprintf
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text30
  6751  0012DE                     __ptext30:
  6752                           	opt stack 0
  6753  0012DE                     ___ftmul:
  6754                           	opt stack 21
  6755                           
  6756                           ;incstack = 0
  6757  0012DE  0100               	movlb	0	; () banked
  6758  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6759  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6760  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6761  0012E8  0100               	movlb	0	; () banked
  6762  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6763  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6764  0012EE  E301               	bnc	u4261
  6765  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6766  0012F2                     u4261:
  6767  0012F2  502D               	movf	??___ftmul,w,c
  6768  0012F4  0100               	movlb	0	; () banked
  6769  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6770  0012F8  0100               	movlb	0	; () banked
  6771  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6772  0012FC  D001               	goto	l4325
  6773  0012FE  D010               	goto	u4290
  6774  001300                     l4325:
  6775                           
  6776                           ; BSR set to: 0
  6777  001300  0100               	movlb	0	; () banked
  6778  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6779  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6780  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6781  00130A  0100               	movlb	0	; () banked
  6782  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6783  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6784  001310  E301               	bnc	u4281
  6785  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6786  001314                     u4281:
  6787  001314  502D               	movf	??___ftmul,w,c
  6788  001316  0100               	movlb	0	; () banked
  6789  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6790  00131A  0100               	movlb	0	; () banked
  6791  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  6792  00131E  D00A               	goto	l4331
  6793  001320                     u4290:
  6794                           
  6795                           ; BSR set to: 0
  6796  001320  0E00               	movlw	0
  6797  001322  0100               	movlb	0	; () banked
  6798  001324  6F60               	movwf	?___ftmul& (0+255),b
  6799  001326  0E00               	movlw	0
  6800  001328  0100               	movlb	0	; () banked
  6801  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6802  00132C  0E00               	movlw	0
  6803  00132E  0100               	movlb	0	; () banked
  6804  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6805  001332  D080               	goto	l1046
  6806  001334                     l4331:
  6807                           
  6808                           ; BSR set to: 0
  6809  001334  0100               	movlb	0	; () banked
  6810  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  6811  001338  0F7B               	addlw	123
  6812  00133A  0100               	movlb	0	; () banked
  6813  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  6814                           
  6815                           ; BSR set to: 0
  6816  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6817  001342  0100               	movlb	0	; () banked
  6818  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6819  001346  0100               	movlb	0	; () banked
  6820  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6821  00134A  0E80               	movlw	128
  6822  00134C  0100               	movlb	0	; () banked
  6823  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  6824                           
  6825                           ; BSR set to: 0
  6826  001350  0100               	movlb	0	; () banked
  6827  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6828                           
  6829                           ; BSR set to: 0
  6830  001354  0100               	movlb	0	; () banked
  6831  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6832                           
  6833                           ; BSR set to: 0
  6834  001358  0EFF               	movlw	255
  6835  00135A  0100               	movlb	0	; () banked
  6836  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  6837  00135E  0EFF               	movlw	255
  6838  001360  0100               	movlb	0	; () banked
  6839  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6840  001364  0E00               	movlw	0
  6841  001366  0100               	movlb	0	; () banked
  6842  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6843                           
  6844                           ; BSR set to: 0
  6845  00136A  0E00               	movlw	0
  6846  00136C  0100               	movlb	0	; () banked
  6847  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  6848  001370  0E00               	movlw	0
  6849  001372  0100               	movlb	0	; () banked
  6850  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6851  001376  0E00               	movlw	0
  6852  001378  0100               	movlb	0	; () banked
  6853  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856  00137C  0E07               	movlw	7
  6857  00137E  0100               	movlb	0	; () banked
  6858  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6859  001382                     l4345:
  6860                           
  6861                           ; BSR set to: 0
  6862  001382  0100               	movlb	0	; () banked
  6863  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  6864  001386  D00C               	goto	l4349
  6865                           
  6866                           ; BSR set to: 0
  6867  001388  0100               	movlb	0	; () banked
  6868  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  6869  00138C  0100               	movlb	0	; () banked
  6870  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6871  001390  0100               	movlb	0	; () banked
  6872  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6873  001394  0100               	movlb	0	; () banked
  6874  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6875  001398  0100               	movlb	0	; () banked
  6876  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6877  00139C  0100               	movlb	0	; () banked
  6878  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6879  0013A0                     l4349:
  6880                           
  6881                           ; BSR set to: 0
  6882  0013A0  0100               	movlb	0	; () banked
  6883  0013A2  90D8               	bcf	status,0,c
  6884  0013A4  0100               	movlb	0	; () banked
  6885  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6886  0013A8  0100               	movlb	0	; () banked
  6887  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6888  0013AC  0100               	movlb	0	; () banked
  6889  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6890  0013B0  0100               	movlb	0	; () banked
  6891  0013B2  90D8               	bcf	status,0,c
  6892  0013B4  0100               	movlb	0	; () banked
  6893  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  6894  0013B8  0100               	movlb	0	; () banked
  6895  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6896  0013BC  0100               	movlb	0	; () banked
  6897  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6898                           
  6899                           ; BSR set to: 0
  6900  0013C0  0100               	movlb	0	; () banked
  6901  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6902  0013C4  D7DE               	goto	l4345
  6903                           
  6904                           ; BSR set to: 0
  6905                           
  6906                           ; BSR set to: 0
  6907  0013C6  0E09               	movlw	9
  6908  0013C8  0100               	movlb	0	; () banked
  6909  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6910  0013CC                     l4355:
  6911                           
  6912                           ; BSR set to: 0
  6913  0013CC  0100               	movlb	0	; () banked
  6914  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  6915  0013D0  D00C               	goto	l4359
  6916                           
  6917                           ; BSR set to: 0
  6918  0013D2  0100               	movlb	0	; () banked
  6919  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  6920  0013D6  0100               	movlb	0	; () banked
  6921  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6922  0013DA  0100               	movlb	0	; () banked
  6923  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6924  0013DE  0100               	movlb	0	; () banked
  6925  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6926  0013E2  0100               	movlb	0	; () banked
  6927  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6928  0013E6  0100               	movlb	0	; () banked
  6929  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6930  0013EA                     l4359:
  6931                           
  6932                           ; BSR set to: 0
  6933  0013EA  0100               	movlb	0	; () banked
  6934  0013EC  90D8               	bcf	status,0,c
  6935  0013EE  0100               	movlb	0	; () banked
  6936  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6937  0013F2  0100               	movlb	0	; () banked
  6938  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6939  0013F6  0100               	movlb	0	; () banked
  6940  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6941  0013FA  0100               	movlb	0	; () banked
  6942  0013FC  90D8               	bcf	status,0,c
  6943  0013FE  0100               	movlb	0	; () banked
  6944  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6945  001402  0100               	movlb	0	; () banked
  6946  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6947  001406  0100               	movlb	0	; () banked
  6948  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6949                           
  6950                           ; BSR set to: 0
  6951  00140A  0100               	movlb	0	; () banked
  6952  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6953  00140E  D7DE               	goto	l4355
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6959  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6960  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6961  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  6962  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  6963  001424  EC54  F00D         	call	___ftpack	;wreg free
  6964  001428  C019  F060         	movff	?___ftpack,?___ftmul
  6965  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  6966  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  6967  001434                     l1046:
  6968  001434  0012               	return	
  6969  001436                     __end_of___ftmul:
  6970                           	opt stack 0
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           intcon	equ	0xFF2
  6978                           indf0	equ	0xFEF
  6979                           postinc0	equ	0xFEE
  6980                           fsr0h	equ	0xFEA
  6981                           fsr0l	equ	0xFE9
  6982                           wreg	equ	0xFE8
  6983                           postinc1	equ	0xFE6
  6984                           postdec1	equ	0xFE5
  6985                           fsr1l	equ	0xFE1
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function ___awmod *****************
  6994 ;; Defined at:
  6995 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  dividend        2   24[COMRAM] int 
  6998 ;;  divisor         2   26[COMRAM] int 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  sign            1   29[COMRAM] unsigned char 
  7001 ;;  counter         1   28[COMRAM] unsigned char 
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  2   24[COMRAM] int 
  7004 ;; Registers used:
  7005 ;;		wreg, status,2, status,0, prodl
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7011 ;;      Params:         4       0       0       0       0       0       0       0       0
  7012 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7014 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7015 ;;Total ram usage:        6 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    4
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_fround
  7022 ;;		_scale
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text31
  7027  001DC4                     __ptext31:
  7028                           	opt stack 0
  7029  001DC4                     ___awmod:
  7030                           	opt stack 22
  7031                           
  7032                           ;incstack = 0
  7033  001DC4  0E00               	movlw	0
  7034  001DC6  6E1E               	movwf	___awmod@sign,c
  7035  001DC8  501A               	movf	___awmod@dividend+1,w,c
  7036  001DCA  0A80               	xorlw	128
  7037  001DCC  6EF3               	movwf	prodl,c
  7038  001DCE  0E80               	movlw	128
  7039  001DD0  5CF3               	subwf	prodl,w,c
  7040  001DD2  0E00               	movlw	0
  7041  001DD4  B4D8               	btfsc	status,2,c
  7042  001DD6  5C19               	subwf	___awmod@dividend,w,c
  7043  001DD8  B0D8               	btfsc	status,0,c
  7044  001DDA  D006               	goto	l4419
  7045  001DDC  6C19               	negf	___awmod@dividend,c
  7046  001DDE  1E1A               	comf	___awmod@dividend+1,f,c
  7047  001DE0  B0D8               	btfsc	status,0,c
  7048  001DE2  2A1A               	incf	___awmod@dividend+1,f,c
  7049  001DE4  0E01               	movlw	1
  7050  001DE6  6E1E               	movwf	___awmod@sign,c
  7051  001DE8                     l4419:
  7052  001DE8  501C               	movf	___awmod@divisor+1,w,c
  7053  001DEA  0A80               	xorlw	128
  7054  001DEC  6EF3               	movwf	prodl,c
  7055  001DEE  0E80               	movlw	128
  7056  001DF0  5CF3               	subwf	prodl,w,c
  7057  001DF2  0E00               	movlw	0
  7058  001DF4  B4D8               	btfsc	status,2,c
  7059  001DF6  5C1B               	subwf	___awmod@divisor,w,c
  7060  001DF8  B0D8               	btfsc	status,0,c
  7061  001DFA  D004               	goto	l4423
  7062  001DFC  6C1B               	negf	___awmod@divisor,c
  7063  001DFE  1E1C               	comf	___awmod@divisor+1,f,c
  7064  001E00  B0D8               	btfsc	status,0,c
  7065  001E02  2A1C               	incf	___awmod@divisor+1,f,c
  7066  001E04                     l4423:
  7067  001E04  501C               	movf	___awmod@divisor+1,w,c
  7068  001E06  101B               	iorwf	___awmod@divisor,w,c
  7069  001E08  B4D8               	btfsc	status,2,c
  7070  001E0A  D018               	goto	l4439
  7071  001E0C  0E01               	movlw	1
  7072  001E0E  6E1D               	movwf	___awmod@counter,c
  7073  001E10  D004               	goto	l4429
  7074  001E12                     l4427:
  7075  001E12  90D8               	bcf	status,0,c
  7076  001E14  361B               	rlcf	___awmod@divisor,f,c
  7077  001E16  361C               	rlcf	___awmod@divisor+1,f,c
  7078  001E18  2A1D               	incf	___awmod@counter,f,c
  7079  001E1A                     l4429:
  7080  001E1A  AE1C               	btfss	___awmod@divisor+1,7,c
  7081  001E1C  D7FA               	goto	l4427
  7082  001E1E                     l4431:
  7083  001E1E  501B               	movf	___awmod@divisor,w,c
  7084  001E20  5C19               	subwf	___awmod@dividend,w,c
  7085  001E22  501C               	movf	___awmod@divisor+1,w,c
  7086  001E24  581A               	subwfb	___awmod@dividend+1,w,c
  7087  001E26  A0D8               	btfss	status,0,c
  7088  001E28  D004               	goto	l4435
  7089  001E2A  501B               	movf	___awmod@divisor,w,c
  7090  001E2C  5E19               	subwf	___awmod@dividend,f,c
  7091  001E2E  501C               	movf	___awmod@divisor+1,w,c
  7092  001E30  5A1A               	subwfb	___awmod@dividend+1,f,c
  7093  001E32                     l4435:
  7094  001E32  90D8               	bcf	status,0,c
  7095  001E34  321C               	rrcf	___awmod@divisor+1,f,c
  7096  001E36  321B               	rrcf	___awmod@divisor,f,c
  7097  001E38  2E1D               	decfsz	___awmod@counter,f,c
  7098  001E3A  D7F1               	goto	l4431
  7099  001E3C                     l4439:
  7100  001E3C  501E               	movf	___awmod@sign,w,c
  7101  001E3E  B4D8               	btfsc	status,2,c
  7102  001E40  D004               	goto	l4443
  7103  001E42  6C19               	negf	___awmod@dividend,c
  7104  001E44  1E1A               	comf	___awmod@dividend+1,f,c
  7105  001E46  B0D8               	btfsc	status,0,c
  7106  001E48  2A1A               	incf	___awmod@dividend+1,f,c
  7107  001E4A                     l4443:
  7108  001E4A  C019  F019         	movff	___awmod@dividend,?___awmod
  7109  001E4E  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7110  001E52  0012               	return	
  7111  001E54                     __end_of___awmod:
  7112                           	opt stack 0
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           indf0	equ	0xFEF
  7121                           postinc0	equ	0xFEE
  7122                           fsr0h	equ	0xFEA
  7123                           fsr0l	equ	0xFE9
  7124                           wreg	equ	0xFE8
  7125                           postinc1	equ	0xFE6
  7126                           postdec1	equ	0xFE5
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function ___awdiv *****************
  7136 ;; Defined at:
  7137 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  dividend        2   30[COMRAM] int 
  7140 ;;  divisor         2   32[COMRAM] int 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  quotient        2   36[COMRAM] int 
  7143 ;;  sign            1   35[COMRAM] unsigned char 
  7144 ;;  counter         1   34[COMRAM] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  2   30[COMRAM] int 
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, prodl
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7154 ;;      Params:         4       0       0       0       0       0       0       0       0
  7155 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7157 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7158 ;;Total ram usage:        8 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    4
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_fround
  7165 ;;		_scale
  7166 ;;		_sprintf
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text32
  7171  001BF6                     __ptext32:
  7172                           	opt stack 0
  7173  001BF6                     ___awdiv:
  7174                           	opt stack 22
  7175                           
  7176                           ;incstack = 0
  7177  001BF6  0E00               	movlw	0
  7178  001BF8  6E24               	movwf	___awdiv@sign,c
  7179  001BFA  5022               	movf	___awdiv@divisor+1,w,c
  7180  001BFC  0A80               	xorlw	128
  7181  001BFE  6EF3               	movwf	prodl,c
  7182  001C00  0E80               	movlw	128
  7183  001C02  5CF3               	subwf	prodl,w,c
  7184  001C04  0E00               	movlw	0
  7185  001C06  B4D8               	btfsc	status,2,c
  7186  001C08  5C21               	subwf	___awdiv@divisor,w,c
  7187  001C0A  B0D8               	btfsc	status,0,c
  7188  001C0C  D006               	goto	l4375
  7189  001C0E  6C21               	negf	___awdiv@divisor,c
  7190  001C10  1E22               	comf	___awdiv@divisor+1,f,c
  7191  001C12  B0D8               	btfsc	status,0,c
  7192  001C14  2A22               	incf	___awdiv@divisor+1,f,c
  7193  001C16  0E01               	movlw	1
  7194  001C18  6E24               	movwf	___awdiv@sign,c
  7195  001C1A                     l4375:
  7196  001C1A  5020               	movf	___awdiv@dividend+1,w,c
  7197  001C1C  0A80               	xorlw	128
  7198  001C1E  6EF3               	movwf	prodl,c
  7199  001C20  0E80               	movlw	128
  7200  001C22  5CF3               	subwf	prodl,w,c
  7201  001C24  0E00               	movlw	0
  7202  001C26  B4D8               	btfsc	status,2,c
  7203  001C28  5C1F               	subwf	___awdiv@dividend,w,c
  7204  001C2A  B0D8               	btfsc	status,0,c
  7205  001C2C  D006               	goto	l4381
  7206  001C2E  6C1F               	negf	___awdiv@dividend,c
  7207  001C30  1E20               	comf	___awdiv@dividend+1,f,c
  7208  001C32  B0D8               	btfsc	status,0,c
  7209  001C34  2A20               	incf	___awdiv@dividend+1,f,c
  7210  001C36  0E01               	movlw	1
  7211  001C38  1A24               	xorwf	___awdiv@sign,f,c
  7212  001C3A                     l4381:
  7213  001C3A  0E00               	movlw	0
  7214  001C3C  6E26               	movwf	___awdiv@quotient+1,c
  7215  001C3E  0E00               	movlw	0
  7216  001C40  6E25               	movwf	___awdiv@quotient,c
  7217  001C42  5022               	movf	___awdiv@divisor+1,w,c
  7218  001C44  1021               	iorwf	___awdiv@divisor,w,c
  7219  001C46  B4D8               	btfsc	status,2,c
  7220  001C48  D01C               	goto	l4403
  7221  001C4A  0E01               	movlw	1
  7222  001C4C  6E23               	movwf	___awdiv@counter,c
  7223  001C4E  D004               	goto	l4389
  7224  001C50                     l4387:
  7225  001C50  90D8               	bcf	status,0,c
  7226  001C52  3621               	rlcf	___awdiv@divisor,f,c
  7227  001C54  3622               	rlcf	___awdiv@divisor+1,f,c
  7228  001C56  2A23               	incf	___awdiv@counter,f,c
  7229  001C58                     l4389:
  7230  001C58  AE22               	btfss	___awdiv@divisor+1,7,c
  7231  001C5A  D7FA               	goto	l4387
  7232  001C5C                     l4391:
  7233  001C5C  90D8               	bcf	status,0,c
  7234  001C5E  3625               	rlcf	___awdiv@quotient,f,c
  7235  001C60  3626               	rlcf	___awdiv@quotient+1,f,c
  7236  001C62  5021               	movf	___awdiv@divisor,w,c
  7237  001C64  5C1F               	subwf	___awdiv@dividend,w,c
  7238  001C66  5022               	movf	___awdiv@divisor+1,w,c
  7239  001C68  5820               	subwfb	___awdiv@dividend+1,w,c
  7240  001C6A  A0D8               	btfss	status,0,c
  7241  001C6C  D005               	goto	l4399
  7242  001C6E  5021               	movf	___awdiv@divisor,w,c
  7243  001C70  5E1F               	subwf	___awdiv@dividend,f,c
  7244  001C72  5022               	movf	___awdiv@divisor+1,w,c
  7245  001C74  5A20               	subwfb	___awdiv@dividend+1,f,c
  7246  001C76  8025               	bsf	___awdiv@quotient,0,c
  7247  001C78                     l4399:
  7248  001C78  90D8               	bcf	status,0,c
  7249  001C7A  3222               	rrcf	___awdiv@divisor+1,f,c
  7250  001C7C  3221               	rrcf	___awdiv@divisor,f,c
  7251  001C7E  2E23               	decfsz	___awdiv@counter,f,c
  7252  001C80  D7ED               	goto	l4391
  7253  001C82                     l4403:
  7254  001C82  5024               	movf	___awdiv@sign,w,c
  7255  001C84  B4D8               	btfsc	status,2,c
  7256  001C86  D004               	goto	l4407
  7257  001C88  6C25               	negf	___awdiv@quotient,c
  7258  001C8A  1E26               	comf	___awdiv@quotient+1,f,c
  7259  001C8C  B0D8               	btfsc	status,0,c
  7260  001C8E  2A26               	incf	___awdiv@quotient+1,f,c
  7261  001C90                     l4407:
  7262  001C90  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7263  001C94  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7264  001C98  0012               	return	
  7265  001C9A                     __end_of___awdiv:
  7266                           	opt stack 0
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           intcon	equ	0xFF2
  7274                           indf0	equ	0xFEF
  7275                           postinc0	equ	0xFEE
  7276                           fsr0h	equ	0xFEA
  7277                           fsr0l	equ	0xFE9
  7278                           wreg	equ	0xFE8
  7279                           postinc1	equ	0xFE6
  7280                           postdec1	equ	0xFE5
  7281                           fsr1l	equ	0xFE1
  7282                           indf2	equ	0xFDF
  7283                           postinc2	equ	0xFDE
  7284                           postdec2	equ	0xFDD
  7285                           fsr2h	equ	0xFDA
  7286                           fsr2l	equ	0xFD9
  7287                           status	equ	0xFD8
  7288                           
  7289 ;; *************** function __tdiv_to_l_ *****************
  7290 ;; Defined at:
  7291 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  f1              3   24[COMRAM] float 
  7294 ;;  f2              3   27[COMRAM] float 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  quot            4   33[COMRAM] unsigned long 
  7297 ;;  exp1            1   38[COMRAM] unsigned char 
  7298 ;;  cntr            1   37[COMRAM] unsigned char 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  4   24[COMRAM] unsigned long 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7308 ;;      Params:         6       0       0       0       0       0       0       0       0
  7309 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7310 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7311 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7312 ;;Total ram usage:       15 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_sprintf
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text33
  7323  0017FA                     __ptext33:
  7324                           	opt stack 0
  7325  0017FA                     __tdiv_to_l_:
  7326                           	opt stack 23
  7327                           
  7328                           ;incstack = 0
  7329  0017FA  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7330  0017FE  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7331  001800  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7332  001802  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7333  001804  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7334  001806  E301               	bnc	u4671
  7335  001808  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7336  00180A                     u4671:
  7337  00180A  501F               	movf	??__tdiv_to_l_,w,c
  7338  00180C  6E27               	movwf	__tdiv_to_l_@exp1,c
  7339  00180E  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7340  001810  D001               	goto	l4609
  7341  001812  D059               	goto	u4740
  7342  001814                     l4609:
  7343  001814  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7344  001818  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7345  00181A  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7346  00181C  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7347  00181E  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7348  001820  E301               	bnc	u4691
  7349  001822  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7350  001824                     u4691:
  7351  001824  501F               	movf	??__tdiv_to_l_,w,c
  7352  001826  6E26               	movwf	__tdiv_to_l_@cntr,c
  7353  001828  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7354  00182A  D001               	goto	l4615
  7355  00182C  D04C               	goto	u4740
  7356  00182E                     l4615:
  7357  00182E  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7358  001830  0EFF               	movlw	255
  7359  001832  1619               	andwf	__tdiv_to_l_@f1,f,c
  7360  001834  0EFF               	movlw	255
  7361  001836  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7362  001838  0E00               	movlw	0
  7363  00183A  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7364  00183C  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7365  00183E  0EFF               	movlw	255
  7366  001840  161C               	andwf	__tdiv_to_l_@f2,f,c
  7367  001842  0EFF               	movlw	255
  7368  001844  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7369  001846  0E00               	movlw	0
  7370  001848  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7371  00184A  0E00               	movlw	0
  7372  00184C  6E22               	movwf	__tdiv_to_l_@quot,c
  7373  00184E  0E00               	movlw	0
  7374  001850  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7375  001852  0E00               	movlw	0
  7376  001854  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7377  001856  0E00               	movlw	0
  7378  001858  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7379  00185A  0E7F               	movlw	127
  7380  00185C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7381  00185E  5026               	movf	__tdiv_to_l_@cntr,w,c
  7382  001860  0F98               	addlw	152
  7383  001862  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7384  001864  0E18               	movlw	24
  7385  001866  6E26               	movwf	__tdiv_to_l_@cntr,c
  7386  001868                     l1024:
  7387  001868  90D8               	bcf	status,0,c
  7388  00186A  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7389  00186C  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7390  00186E  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7391  001870  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7392  001872  501C               	movf	__tdiv_to_l_@f2,w,c
  7393  001874  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7394  001876  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7395  001878  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7396  00187A  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7397  00187C  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7398  00187E  A0D8               	btfss	status,0,c
  7399  001880  D007               	goto	l1025
  7400  001882  501C               	movf	__tdiv_to_l_@f2,w,c
  7401  001884  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7402  001886  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7403  001888  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7404  00188A  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7405  00188C  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7406  00188E  8022               	bsf	__tdiv_to_l_@quot,0,c
  7407  001890                     l1025:
  7408  001890  90D8               	bcf	status,0,c
  7409  001892  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7410  001894  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7411  001896  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7412  001898  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7413  00189A  D7E6               	goto	l1024
  7414  00189C  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7415  00189E  D010               	goto	l4647
  7416  0018A0  5027               	movf	__tdiv_to_l_@exp1,w,c
  7417  0018A2  0A80               	xorlw	128
  7418  0018A4  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7419  0018A6  0EE9               	movlw	233
  7420  0018A8  0A80               	xorlw	128
  7421  0018AA  5C1F               	subwf	??__tdiv_to_l_,w,c
  7422  0018AC  A0D8               	btfss	status,0,c
  7423  0018AE  D00B               	goto	u4740
  7424  0018B0                     l4643:
  7425  0018B0  90D8               	bcf	status,0,c
  7426  0018B2  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7427  0018B4  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7428  0018B6  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7429  0018B8  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7430  0018BA  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7431  0018BC  D7F9               	goto	l4643
  7432  0018BE  D014               	goto	l1031
  7433  0018C0                     l4647:
  7434  0018C0  0E17               	movlw	23
  7435  0018C2  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7436  0018C4  D00F               	goto	l4655
  7437  0018C6                     u4740:
  7438  0018C6  0E00               	movlw	0
  7439  0018C8  6E19               	movwf	?__tdiv_to_l_,c
  7440  0018CA  0E00               	movlw	0
  7441  0018CC  6E1A               	movwf	?__tdiv_to_l_+1,c
  7442  0018CE  0E00               	movlw	0
  7443  0018D0  6E1B               	movwf	?__tdiv_to_l_+2,c
  7444  0018D2  0E00               	movlw	0
  7445  0018D4  6E1C               	movwf	?__tdiv_to_l_+3,c
  7446  0018D6  D010               	goto	l1022
  7447  0018D8                     l4653:
  7448  0018D8  90D8               	bcf	status,0,c
  7449  0018DA  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7450  0018DC  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7451  0018DE  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7452  0018E0  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7453  0018E2  0627               	decf	__tdiv_to_l_@exp1,f,c
  7454  0018E4                     l4655:
  7455  0018E4  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7456  0018E6  D7F8               	goto	l4653
  7457  0018E8                     l1031:
  7458  0018E8  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7459  0018EC  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7460  0018F0  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7461  0018F4  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7462  0018F8                     l1022:
  7463  0018F8  0012               	return	
  7464  0018FA                     __end_of__tdiv_to_l_:
  7465                           	opt stack 0
  7466                           tblptru	equ	0xFF8
  7467                           tblptrh	equ	0xFF7
  7468                           tblptrl	equ	0xFF6
  7469                           tablat	equ	0xFF5
  7470                           prodh	equ	0xFF4
  7471                           prodl	equ	0xFF3
  7472                           intcon	equ	0xFF2
  7473                           indf0	equ	0xFEF
  7474                           postinc0	equ	0xFEE
  7475                           fsr0h	equ	0xFEA
  7476                           fsr0l	equ	0xFE9
  7477                           wreg	equ	0xFE8
  7478                           postinc1	equ	0xFE6
  7479                           postdec1	equ	0xFE5
  7480                           fsr1l	equ	0xFE1
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           postdec2	equ	0xFDD
  7484                           fsr2h	equ	0xFDA
  7485                           fsr2l	equ	0xFD9
  7486                           status	equ	0xFD8
  7487                           
  7488 ;; *************** function __div_to_l_ *****************
  7489 ;; Defined at:
  7490 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  f1              3   24[COMRAM] unsigned long 
  7493 ;;  f2              3   27[COMRAM] unsigned long 
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  quot            4   34[COMRAM] unsigned long 
  7496 ;;  exp1            1   39[COMRAM] unsigned char 
  7497 ;;  cntr            1   38[COMRAM] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  4   24[COMRAM] unsigned long 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7507 ;;      Params:         6       0       0       0       0       0       0       0       0
  7508 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7509 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7510 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7511 ;;Total ram usage:       16 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    4
  7514 ;; This function calls:
  7515 ;;		Nothing
  7516 ;; This function is called by:
  7517 ;;		_sprintf
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           	psect	text34
  7522  0016C4                     __ptext34:
  7523                           	opt stack 0
  7524  0016C4                     __div_to_l_:
  7525                           	opt stack 23
  7526                           
  7527                           ;incstack = 0
  7528  0016C4  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7529  0016C8  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7530  0016CC  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7531  0016D0  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7532  0016D4  0E18               	movlw	24
  7533  0016D6  D005               	goto	u4760
  7534  0016D8                     u4765:
  7535  0016D8  90D8               	bcf	status,0,c
  7536  0016DA  3222               	rrcf	??__div_to_l_+3,f,c
  7537  0016DC  3221               	rrcf	??__div_to_l_+2,f,c
  7538  0016DE  3220               	rrcf	??__div_to_l_+1,f,c
  7539  0016E0  321F               	rrcf	??__div_to_l_,f,c
  7540  0016E2                     u4760:
  7541  0016E2  2EE8               	decfsz	wreg,f,c
  7542  0016E4  D7F9               	goto	u4765
  7543  0016E6  501F               	movf	??__div_to_l_,w,c
  7544  0016E8  6E28               	movwf	__div_to_l_@exp1,c
  7545  0016EA  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7546  0016EC  D001               	goto	l4663
  7547  0016EE  D06B               	goto	u4830
  7548  0016F0                     l4663:
  7549  0016F0  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7550  0016F4  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7551  0016F8  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7552  0016FC  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7553  001700  0E18               	movlw	24
  7554  001702  D005               	goto	u4780
  7555  001704                     u4785:
  7556  001704  90D8               	bcf	status,0,c
  7557  001706  3222               	rrcf	??__div_to_l_+3,f,c
  7558  001708  3221               	rrcf	??__div_to_l_+2,f,c
  7559  00170A  3220               	rrcf	??__div_to_l_+1,f,c
  7560  00170C  321F               	rrcf	??__div_to_l_,f,c
  7561  00170E                     u4780:
  7562  00170E  2EE8               	decfsz	wreg,f,c
  7563  001710  D7F9               	goto	u4785
  7564  001712  501F               	movf	??__div_to_l_,w,c
  7565  001714  6E27               	movwf	__div_to_l_@cntr,c
  7566  001716  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7567  001718  D001               	goto	l4669
  7568  00171A  D055               	goto	u4830
  7569  00171C                     l4669:
  7570  00171C  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7571  00171E  0EFF               	movlw	255
  7572  001720  1619               	andwf	__div_to_l_@f1,f,c
  7573  001722  0EFF               	movlw	255
  7574  001724  161A               	andwf	__div_to_l_@f1+1,f,c
  7575  001726  0EFF               	movlw	255
  7576  001728  161B               	andwf	__div_to_l_@f1+2,f,c
  7577  00172A  0E00               	movlw	0
  7578  00172C  161C               	andwf	__div_to_l_@f1+3,f,c
  7579  00172E  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7580  001730  0EFF               	movlw	255
  7581  001732  161C               	andwf	__div_to_l_@f2,f,c
  7582  001734  0EFF               	movlw	255
  7583  001736  161D               	andwf	__div_to_l_@f2+1,f,c
  7584  001738  0EFF               	movlw	255
  7585  00173A  161E               	andwf	__div_to_l_@f2+2,f,c
  7586  00173C  0E00               	movlw	0
  7587  00173E  161F               	andwf	__div_to_l_@f2+3,f,c
  7588  001740  0E00               	movlw	0
  7589  001742  6E23               	movwf	__div_to_l_@quot,c
  7590  001744  0E00               	movlw	0
  7591  001746  6E24               	movwf	__div_to_l_@quot+1,c
  7592  001748  0E00               	movlw	0
  7593  00174A  6E25               	movwf	__div_to_l_@quot+2,c
  7594  00174C  0E00               	movlw	0
  7595  00174E  6E26               	movwf	__div_to_l_@quot+3,c
  7596  001750  0E7F               	movlw	127
  7597  001752  5E28               	subwf	__div_to_l_@exp1,f,c
  7598  001754  5027               	movf	__div_to_l_@cntr,w,c
  7599  001756  0FA0               	addlw	160
  7600  001758  5E28               	subwf	__div_to_l_@exp1,f,c
  7601  00175A  0E20               	movlw	32
  7602  00175C  6E27               	movwf	__div_to_l_@cntr,c
  7603  00175E                     l4683:
  7604  00175E  90D8               	bcf	status,0,c
  7605  001760  3623               	rlcf	__div_to_l_@quot,f,c
  7606  001762  3624               	rlcf	__div_to_l_@quot+1,f,c
  7607  001764  3625               	rlcf	__div_to_l_@quot+2,f,c
  7608  001766  3626               	rlcf	__div_to_l_@quot+3,f,c
  7609  001768  501C               	movf	__div_to_l_@f2,w,c
  7610  00176A  5C19               	subwf	__div_to_l_@f1,w,c
  7611  00176C  501D               	movf	__div_to_l_@f2+1,w,c
  7612  00176E  581A               	subwfb	__div_to_l_@f1+1,w,c
  7613  001770  501E               	movf	__div_to_l_@f2+2,w,c
  7614  001772  581B               	subwfb	__div_to_l_@f1+2,w,c
  7615  001774  501F               	movf	__div_to_l_@f2+3,w,c
  7616  001776  581C               	subwfb	__div_to_l_@f1+3,w,c
  7617  001778  A0D8               	btfss	status,0,c
  7618  00177A  D009               	goto	l4691
  7619  00177C  501C               	movf	__div_to_l_@f2,w,c
  7620  00177E  5E19               	subwf	__div_to_l_@f1,f,c
  7621  001780  501D               	movf	__div_to_l_@f2+1,w,c
  7622  001782  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7623  001784  501E               	movf	__div_to_l_@f2+2,w,c
  7624  001786  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7625  001788  501F               	movf	__div_to_l_@f2+3,w,c
  7626  00178A  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7627  00178C  8023               	bsf	__div_to_l_@quot,0,c
  7628  00178E                     l4691:
  7629  00178E  90D8               	bcf	status,0,c
  7630  001790  3619               	rlcf	__div_to_l_@f1,f,c
  7631  001792  361A               	rlcf	__div_to_l_@f1+1,f,c
  7632  001794  361B               	rlcf	__div_to_l_@f1+2,f,c
  7633  001796  361C               	rlcf	__div_to_l_@f1+3,f,c
  7634  001798  2E27               	decfsz	__div_to_l_@cntr,f,c
  7635  00179A  D7E1               	goto	l4683
  7636  00179C  AE28               	btfss	__div_to_l_@exp1,7,c
  7637  00179E  D010               	goto	l4705
  7638  0017A0  5028               	movf	__div_to_l_@exp1,w,c
  7639  0017A2  0A80               	xorlw	128
  7640  0017A4  6E1F               	movwf	??__div_to_l_& (0+255),c
  7641  0017A6  0EE1               	movlw	225
  7642  0017A8  0A80               	xorlw	128
  7643  0017AA  5C1F               	subwf	??__div_to_l_,w,c
  7644  0017AC  A0D8               	btfss	status,0,c
  7645  0017AE  D00B               	goto	u4830
  7646  0017B0                     l4701:
  7647  0017B0  90D8               	bcf	status,0,c
  7648  0017B2  3226               	rrcf	__div_to_l_@quot+3,f,c
  7649  0017B4  3225               	rrcf	__div_to_l_@quot+2,f,c
  7650  0017B6  3224               	rrcf	__div_to_l_@quot+1,f,c
  7651  0017B8  3223               	rrcf	__div_to_l_@quot,f,c
  7652  0017BA  3E28               	incfsz	__div_to_l_@exp1,f,c
  7653  0017BC  D7F9               	goto	l4701
  7654  0017BE  D014               	goto	l913
  7655  0017C0                     l4705:
  7656  0017C0  0E1F               	movlw	31
  7657  0017C2  6428               	cpfsgt	__div_to_l_@exp1,c
  7658  0017C4  D00F               	goto	l4713
  7659  0017C6                     u4830:
  7660  0017C6  0E00               	movlw	0
  7661  0017C8  6E19               	movwf	?__div_to_l_,c
  7662  0017CA  0E00               	movlw	0
  7663  0017CC  6E1A               	movwf	?__div_to_l_+1,c
  7664  0017CE  0E00               	movlw	0
  7665  0017D0  6E1B               	movwf	?__div_to_l_+2,c
  7666  0017D2  0E00               	movlw	0
  7667  0017D4  6E1C               	movwf	?__div_to_l_+3,c
  7668  0017D6  D010               	goto	l904
  7669  0017D8                     l4711:
  7670  0017D8  90D8               	bcf	status,0,c
  7671  0017DA  3623               	rlcf	__div_to_l_@quot,f,c
  7672  0017DC  3624               	rlcf	__div_to_l_@quot+1,f,c
  7673  0017DE  3625               	rlcf	__div_to_l_@quot+2,f,c
  7674  0017E0  3626               	rlcf	__div_to_l_@quot+3,f,c
  7675  0017E2  0628               	decf	__div_to_l_@exp1,f,c
  7676  0017E4                     l4713:
  7677  0017E4  6628               	tstfsz	__div_to_l_@exp1,c
  7678  0017E6  D7F8               	goto	l4711
  7679  0017E8                     l913:
  7680  0017E8  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7681  0017EC  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7682  0017F0  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7683  0017F4  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7684  0017F8                     l904:
  7685  0017F8  0012               	return	
  7686  0017FA                     __end_of__div_to_l_:
  7687                           	opt stack 0
  7688                           tblptru	equ	0xFF8
  7689                           tblptrh	equ	0xFF7
  7690                           tblptrl	equ	0xFF6
  7691                           tablat	equ	0xFF5
  7692                           prodh	equ	0xFF4
  7693                           prodl	equ	0xFF3
  7694                           intcon	equ	0xFF2
  7695                           indf0	equ	0xFEF
  7696                           postinc0	equ	0xFEE
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           postinc1	equ	0xFE6
  7701                           postdec1	equ	0xFE5
  7702                           fsr1l	equ	0xFE1
  7703                           indf2	equ	0xFDF
  7704                           postinc2	equ	0xFDE
  7705                           postdec2	equ	0xFDD
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function ___lltoft *****************
  7711 ;; Defined at:
  7712 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;  c               4   32[COMRAM] unsigned long 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  exp             1   40[COMRAM] unsigned char 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  3   32[COMRAM] float 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7726 ;;      Params:         4       0       0       0       0       0       0       0       0
  7727 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7728 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7729 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7730 ;;Total ram usage:        9 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    5
  7733 ;; This function calls:
  7734 ;;		___ftpack
  7735 ;; This function is called by:
  7736 ;;		_sprintf
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text35
  7741  002382                     __ptext35:
  7742                           	opt stack 0
  7743  002382                     ___lltoft:
  7744                           	opt stack 22
  7745                           
  7746                           ;incstack = 0
  7747  002382  0E8E               	movlw	142
  7748  002384  6E29               	movwf	___lltoft@exp,c
  7749  002386  D006               	goto	l4831
  7750  002388                     l4829:
  7751  002388  90D8               	bcf	status,0,c
  7752  00238A  3224               	rrcf	___lltoft@c+3,f,c
  7753  00238C  3223               	rrcf	___lltoft@c+2,f,c
  7754  00238E  3222               	rrcf	___lltoft@c+1,f,c
  7755  002390  3221               	rrcf	___lltoft@c,f,c
  7756  002392  2A29               	incf	___lltoft@exp,f,c
  7757  002394                     l4831:
  7758  002394  0E00               	movlw	0
  7759  002396  1421               	andwf	___lltoft@c,w,c
  7760  002398  6E25               	movwf	??___lltoft& (0+255),c
  7761  00239A  0E00               	movlw	0
  7762  00239C  1422               	andwf	___lltoft@c+1,w,c
  7763  00239E  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7764  0023A0  0E00               	movlw	0
  7765  0023A2  1423               	andwf	___lltoft@c+2,w,c
  7766  0023A4  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7767  0023A6  0EFF               	movlw	255
  7768  0023A8  1424               	andwf	___lltoft@c+3,w,c
  7769  0023AA  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7770  0023AC  5028               	movf	??___lltoft+3,w,c
  7771  0023AE  1025               	iorwf	??___lltoft,w,c
  7772  0023B0  1026               	iorwf	??___lltoft+1,w,c
  7773  0023B2  1027               	iorwf	??___lltoft+2,w,c
  7774  0023B4  A4D8               	btfss	status,2,c
  7775  0023B6  D7E8               	goto	l4829
  7776  0023B8  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7777  0023BC  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7778  0023C0  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7779  0023C4  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7780  0023C8  0E00               	movlw	0
  7781  0023CA  6E1D               	movwf	___ftpack@sign,c
  7782  0023CC  EC54  F00D         	call	___ftpack	;wreg free
  7783  0023D0  C019  F021         	movff	?___ftpack,?___lltoft
  7784  0023D4  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7785  0023D8  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7786  0023DC  0012               	return	
  7787  0023DE                     __end_of___lltoft:
  7788                           	opt stack 0
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           indf0	equ	0xFEF
  7797                           postinc0	equ	0xFEE
  7798                           fsr0h	equ	0xFEA
  7799                           fsr0l	equ	0xFE9
  7800                           wreg	equ	0xFE8
  7801                           postinc1	equ	0xFE6
  7802                           postdec1	equ	0xFE5
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function ___llmod *****************
  7812 ;; Defined at:
  7813 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  dividend        4   37[COMRAM] unsigned long 
  7816 ;;  divisor         4   41[COMRAM] unsigned long 
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  counter         1   45[COMRAM] unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  4   37[COMRAM] unsigned long 
  7821 ;; Registers used:
  7822 ;;		wreg, status,2, status,0
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7828 ;;      Params:         8       0       0       0       0       0       0       0       0
  7829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7831 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7832 ;;Total ram usage:        9 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:    4
  7835 ;; This function calls:
  7836 ;;		Nothing
  7837 ;; This function is called by:
  7838 ;;		_sprintf
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           	psect	text36
  7843  00231C                     __ptext36:
  7844                           	opt stack 0
  7845  00231C                     ___llmod:
  7846                           	opt stack 23
  7847                           
  7848                           ;incstack = 0
  7849  00231C  502D               	movf	___llmod@divisor+3,w,c
  7850  00231E  102A               	iorwf	___llmod@divisor,w,c
  7851  002320  102B               	iorwf	___llmod@divisor+1,w,c
  7852  002322  102C               	iorwf	___llmod@divisor+2,w,c
  7853  002324  B4D8               	btfsc	status,2,c
  7854  002326  D024               	goto	l1115
  7855  002328  0E01               	movlw	1
  7856  00232A  6E2E               	movwf	___llmod@counter,c
  7857  00232C  D006               	goto	l4817
  7858  00232E                     l4815:
  7859  00232E  90D8               	bcf	status,0,c
  7860  002330  362A               	rlcf	___llmod@divisor,f,c
  7861  002332  362B               	rlcf	___llmod@divisor+1,f,c
  7862  002334  362C               	rlcf	___llmod@divisor+2,f,c
  7863  002336  362D               	rlcf	___llmod@divisor+3,f,c
  7864  002338  2A2E               	incf	___llmod@counter,f,c
  7865  00233A                     l4817:
  7866  00233A  AE2D               	btfss	___llmod@divisor+3,7,c
  7867  00233C  D7F8               	goto	l4815
  7868  00233E                     l4819:
  7869  00233E  502A               	movf	___llmod@divisor,w,c
  7870  002340  5C26               	subwf	___llmod@dividend,w,c
  7871  002342  502B               	movf	___llmod@divisor+1,w,c
  7872  002344  5827               	subwfb	___llmod@dividend+1,w,c
  7873  002346  502C               	movf	___llmod@divisor+2,w,c
  7874  002348  5828               	subwfb	___llmod@dividend+2,w,c
  7875  00234A  502D               	movf	___llmod@divisor+3,w,c
  7876  00234C  5829               	subwfb	___llmod@dividend+3,w,c
  7877  00234E  A0D8               	btfss	status,0,c
  7878  002350  D008               	goto	l4823
  7879  002352  502A               	movf	___llmod@divisor,w,c
  7880  002354  5E26               	subwf	___llmod@dividend,f,c
  7881  002356  502B               	movf	___llmod@divisor+1,w,c
  7882  002358  5A27               	subwfb	___llmod@dividend+1,f,c
  7883  00235A  502C               	movf	___llmod@divisor+2,w,c
  7884  00235C  5A28               	subwfb	___llmod@dividend+2,f,c
  7885  00235E  502D               	movf	___llmod@divisor+3,w,c
  7886  002360  5A29               	subwfb	___llmod@dividend+3,f,c
  7887  002362                     l4823:
  7888  002362  90D8               	bcf	status,0,c
  7889  002364  322D               	rrcf	___llmod@divisor+3,f,c
  7890  002366  322C               	rrcf	___llmod@divisor+2,f,c
  7891  002368  322B               	rrcf	___llmod@divisor+1,f,c
  7892  00236A  322A               	rrcf	___llmod@divisor,f,c
  7893  00236C  2E2E               	decfsz	___llmod@counter,f,c
  7894  00236E  D7E7               	goto	l4819
  7895  002370                     l1115:
  7896  002370  C026  F026         	movff	___llmod@dividend,?___llmod
  7897  002374  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7898  002378  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7899  00237C  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7900  002380  0012               	return	
  7901  002382                     __end_of___llmod:
  7902                           	opt stack 0
  7903                           tblptru	equ	0xFF8
  7904                           tblptrh	equ	0xFF7
  7905                           tblptrl	equ	0xFF6
  7906                           tablat	equ	0xFF5
  7907                           prodh	equ	0xFF4
  7908                           prodl	equ	0xFF3
  7909                           intcon	equ	0xFF2
  7910                           indf0	equ	0xFEF
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           postinc1	equ	0xFE6
  7916                           postdec1	equ	0xFE5
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function ___lldiv *****************
  7926 ;; Defined at:
  7927 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  dividend        4   24[COMRAM] unsigned long 
  7930 ;;  divisor         4   28[COMRAM] unsigned long 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  quotient        4   32[COMRAM] unsigned long 
  7933 ;;  counter         1   36[COMRAM] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  4   24[COMRAM] unsigned long 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7943 ;;      Params:         8       0       0       0       0       0       0       0       0
  7944 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7946 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7947 ;;Total ram usage:       13 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    4
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_sprintf
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text37
  7958  001F6A                     __ptext37:
  7959                           	opt stack 0
  7960  001F6A                     ___lldiv:
  7961                           	opt stack 23
  7962                           
  7963                           ;incstack = 0
  7964  001F6A  0E00               	movlw	0
  7965  001F6C  6E21               	movwf	___lldiv@quotient,c
  7966  001F6E  0E00               	movlw	0
  7967  001F70  6E22               	movwf	___lldiv@quotient+1,c
  7968  001F72  0E00               	movlw	0
  7969  001F74  6E23               	movwf	___lldiv@quotient+2,c
  7970  001F76  0E00               	movlw	0
  7971  001F78  6E24               	movwf	___lldiv@quotient+3,c
  7972  001F7A  5020               	movf	___lldiv@divisor+3,w,c
  7973  001F7C  101D               	iorwf	___lldiv@divisor,w,c
  7974  001F7E  101E               	iorwf	___lldiv@divisor+1,w,c
  7975  001F80  101F               	iorwf	___lldiv@divisor+2,w,c
  7976  001F82  B4D8               	btfsc	status,2,c
  7977  001F84  D02A               	goto	l1105
  7978  001F86  0E01               	movlw	1
  7979  001F88  6E25               	movwf	___lldiv@counter,c
  7980  001F8A  D006               	goto	l4797
  7981  001F8C                     l4795:
  7982  001F8C  90D8               	bcf	status,0,c
  7983  001F8E  361D               	rlcf	___lldiv@divisor,f,c
  7984  001F90  361E               	rlcf	___lldiv@divisor+1,f,c
  7985  001F92  361F               	rlcf	___lldiv@divisor+2,f,c
  7986  001F94  3620               	rlcf	___lldiv@divisor+3,f,c
  7987  001F96  2A25               	incf	___lldiv@counter,f,c
  7988  001F98                     l4797:
  7989  001F98  AE20               	btfss	___lldiv@divisor+3,7,c
  7990  001F9A  D7F8               	goto	l4795
  7991  001F9C                     l4799:
  7992  001F9C  90D8               	bcf	status,0,c
  7993  001F9E  3621               	rlcf	___lldiv@quotient,f,c
  7994  001FA0  3622               	rlcf	___lldiv@quotient+1,f,c
  7995  001FA2  3623               	rlcf	___lldiv@quotient+2,f,c
  7996  001FA4  3624               	rlcf	___lldiv@quotient+3,f,c
  7997  001FA6  501D               	movf	___lldiv@divisor,w,c
  7998  001FA8  5C19               	subwf	___lldiv@dividend,w,c
  7999  001FAA  501E               	movf	___lldiv@divisor+1,w,c
  8000  001FAC  581A               	subwfb	___lldiv@dividend+1,w,c
  8001  001FAE  501F               	movf	___lldiv@divisor+2,w,c
  8002  001FB0  581B               	subwfb	___lldiv@dividend+2,w,c
  8003  001FB2  5020               	movf	___lldiv@divisor+3,w,c
  8004  001FB4  581C               	subwfb	___lldiv@dividend+3,w,c
  8005  001FB6  A0D8               	btfss	status,0,c
  8006  001FB8  D009               	goto	l4807
  8007  001FBA  501D               	movf	___lldiv@divisor,w,c
  8008  001FBC  5E19               	subwf	___lldiv@dividend,f,c
  8009  001FBE  501E               	movf	___lldiv@divisor+1,w,c
  8010  001FC0  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8011  001FC2  501F               	movf	___lldiv@divisor+2,w,c
  8012  001FC4  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8013  001FC6  5020               	movf	___lldiv@divisor+3,w,c
  8014  001FC8  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8015  001FCA  8021               	bsf	___lldiv@quotient,0,c
  8016  001FCC                     l4807:
  8017  001FCC  90D8               	bcf	status,0,c
  8018  001FCE  3220               	rrcf	___lldiv@divisor+3,f,c
  8019  001FD0  321F               	rrcf	___lldiv@divisor+2,f,c
  8020  001FD2  321E               	rrcf	___lldiv@divisor+1,f,c
  8021  001FD4  321D               	rrcf	___lldiv@divisor,f,c
  8022  001FD6  2E25               	decfsz	___lldiv@counter,f,c
  8023  001FD8  D7E1               	goto	l4799
  8024  001FDA                     l1105:
  8025  001FDA  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8026  001FDE  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8027  001FE2  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8028  001FE6  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8029  001FEA  0012               	return	
  8030  001FEC                     __end_of___lldiv:
  8031                           	opt stack 0
  8032                           tblptru	equ	0xFF8
  8033                           tblptrh	equ	0xFF7
  8034                           tblptrl	equ	0xFF6
  8035                           tablat	equ	0xFF5
  8036                           prodh	equ	0xFF4
  8037                           prodl	equ	0xFF3
  8038                           intcon	equ	0xFF2
  8039                           indf0	equ	0xFEF
  8040                           postinc0	equ	0xFEE
  8041                           fsr0h	equ	0xFEA
  8042                           fsr0l	equ	0xFE9
  8043                           wreg	equ	0xFE8
  8044                           postinc1	equ	0xFE6
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function ___fttol *****************
  8055 ;; Defined at:
  8056 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  f1              3   19[BANK0 ] float 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  lval            4   29[BANK0 ] unsigned long 
  8061 ;;  exp1            1   33[BANK0 ] unsigned char 
  8062 ;;  sign1           1   28[BANK0 ] unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  4   19[BANK0 ] long 
  8065 ;; Registers used:
  8066 ;;		wreg, status,2, status,0
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8072 ;;      Params:         0       4       0       0       0       0       0       0       0
  8073 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8074 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8075 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8076 ;;Total ram usage:       15 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    4
  8079 ;; This function calls:
  8080 ;;		Nothing
  8081 ;; This function is called by:
  8082 ;;		_PWM_DutyCycle1
  8083 ;;		_PWM_DutyCycle2
  8084 ;;		_sprintf
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	text38
  8089  001436                     __ptext38:
  8090                           	opt stack 0
  8091  001436                     ___fttol:
  8092                           	opt stack 23
  8093                           
  8094                           ;incstack = 0
  8095  001436  0100               	movlb	0	; () banked
  8096  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8097  00143C  0100               	movlb	0	; () banked
  8098  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8099  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8100  001442  0100               	movlb	0	; () banked
  8101  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8102  001446  0100               	movlb	0	; () banked
  8103  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8104  00144A  E301               	bnc	u4891
  8105  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8106  00144E                     u4891:
  8107  00144E  0100               	movlb	0	; () banked
  8108  001450  5177               	movf	??___fttol& (0+255),w,b
  8109  001452  0100               	movlb	0	; () banked
  8110  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8111  001456  0100               	movlb	0	; () banked
  8112  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8113  00145A  D001               	goto	l4749
  8114  00145C  D059               	goto	u4940
  8115  00145E                     l4749:
  8116                           
  8117                           ; BSR set to: 0
  8118  00145E  0E17               	movlw	23
  8119  001460  0100               	movlb	0	; () banked
  8120  001462  6F77               	movwf	??___fttol& (0+255),b
  8121  001464  0100               	movlb	0	; () banked
  8122  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8123  00146A  0100               	movlb	0	; () banked
  8124  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8125  001470  0100               	movlb	0	; () banked
  8126  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8127  001476  0100               	movlb	0	; () banked
  8128  001478  2977               	incf	??___fttol& (0+255),w,b
  8129  00147A  0100               	movlb	0	; () banked
  8130  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8131  00147E  D005               	goto	u4910
  8132  001480                     u4915:
  8133  001480  0100               	movlb	0	; () banked
  8134  001482  90D8               	bcf	status,0,c
  8135  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8136  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8137  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8138  00148A                     u4910:
  8139  00148A  0100               	movlb	0	; () banked
  8140  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8141  00148E  D7F8               	goto	u4915
  8142  001490  0100               	movlb	0	; () banked
  8143  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8144  001494  0100               	movlb	0	; () banked
  8145  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148  001498  0100               	movlb	0	; () banked
  8149  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8150                           
  8151                           ; BSR set to: 0
  8152  00149C  0EFF               	movlw	255
  8153  00149E  0100               	movlb	0	; () banked
  8154  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8155  0014A2  0EFF               	movlw	255
  8156  0014A4  0100               	movlb	0	; () banked
  8157  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8158  0014A8  0E00               	movlw	0
  8159  0014AA  0100               	movlb	0	; () banked
  8160  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8161                           
  8162                           ; BSR set to: 0
  8163  0014AE  0100               	movlb	0	; () banked
  8164  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8165  0014B2  0100               	movlb	0	; () banked
  8166  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8167  0014B6  0100               	movlb	0	; () banked
  8168  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8169  0014BA  0100               	movlb	0	; () banked
  8170  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8171  0014BE  0100               	movlb	0	; () banked
  8172  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8173  0014C2  0100               	movlb	0	; () banked
  8174  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8175  0014C6  0100               	movlb	0	; () banked
  8176  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8177                           
  8178                           ; BSR set to: 0
  8179  0014CA  0E8E               	movlw	142
  8180  0014CC  0100               	movlb	0	; () banked
  8181  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8182                           
  8183                           ; BSR set to: 0
  8184  0014D0  0100               	movlb	0	; () banked
  8185  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8186  0014D4  D019               	goto	l4771
  8187                           
  8188                           ; BSR set to: 0
  8189  0014D6  0100               	movlb	0	; () banked
  8190  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8191  0014DA  0A80               	xorlw	128
  8192  0014DC  0100               	movlb	0	; () banked
  8193  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8194  0014E0  0EF1               	movlw	241
  8195  0014E2  0A80               	xorlw	128
  8196  0014E4  0100               	movlb	0	; () banked
  8197  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8198  0014E8  A0D8               	btfss	status,0,c
  8199  0014EA  D012               	goto	u4940
  8200  0014EC                     l4767:
  8201                           
  8202                           ; BSR set to: 0
  8203  0014EC  0100               	movlb	0	; () banked
  8204  0014EE  90D8               	bcf	status,0,c
  8205  0014F0  0100               	movlb	0	; () banked
  8206  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8207  0014F4  0100               	movlb	0	; () banked
  8208  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8209  0014F8  0100               	movlb	0	; () banked
  8210  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8211  0014FC  0100               	movlb	0	; () banked
  8212  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8213                           
  8214                           ; BSR set to: 0
  8215  001500  0100               	movlb	0	; () banked
  8216  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8217  001504  D7F3               	goto	l4767
  8218  001506  D020               	goto	l4781
  8219  001508                     l4771:
  8220                           
  8221                           ; BSR set to: 0
  8222  001508  0E17               	movlw	23
  8223  00150A  0100               	movlb	0	; () banked
  8224  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8225  00150E  D019               	goto	l4779
  8226  001510                     u4940:
  8227                           
  8228                           ; BSR set to: 0
  8229  001510  0E00               	movlw	0
  8230  001512  0100               	movlb	0	; () banked
  8231  001514  6F73               	movwf	?___fttol& (0+255),b
  8232  001516  0E00               	movlw	0
  8233  001518  0100               	movlb	0	; () banked
  8234  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8235  00151C  0E00               	movlw	0
  8236  00151E  0100               	movlb	0	; () banked
  8237  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8238  001522  0E00               	movlw	0
  8239  001524  0100               	movlb	0	; () banked
  8240  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8241  001528  D02A               	goto	l1066
  8242  00152A                     l4777:
  8243                           
  8244                           ; BSR set to: 0
  8245  00152A  0100               	movlb	0	; () banked
  8246  00152C  90D8               	bcf	status,0,c
  8247  00152E  0100               	movlb	0	; () banked
  8248  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8249  001532  0100               	movlb	0	; () banked
  8250  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8251  001536  0100               	movlb	0	; () banked
  8252  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8253  00153A  0100               	movlb	0	; () banked
  8254  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8255  00153E  0100               	movlb	0	; () banked
  8256  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8257  001542                     l4779:
  8258                           
  8259                           ; BSR set to: 0
  8260  001542  0100               	movlb	0	; () banked
  8261  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8262  001546  D7F1               	goto	l4777
  8263  001548                     l4781:
  8264                           
  8265                           ; BSR set to: 0
  8266  001548  0100               	movlb	0	; () banked
  8267  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8268  00154C  B4D8               	btfsc	status,2,c
  8269  00154E  D00F               	goto	l4785
  8270                           
  8271                           ; BSR set to: 0
  8272  001550  0100               	movlb	0	; () banked
  8273  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8274  001554  0100               	movlb	0	; () banked
  8275  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8276  001558  0100               	movlb	0	; () banked
  8277  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8278  00155C  0100               	movlb	0	; () banked
  8279  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8280  001560  0E00               	movlw	0
  8281  001562  0100               	movlb	0	; () banked
  8282  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8283  001566  0100               	movlb	0	; () banked
  8284  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8285  00156A  0100               	movlb	0	; () banked
  8286  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8287  00156E                     l4785:
  8288                           
  8289                           ; BSR set to: 0
  8290  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8291  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8292  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8293  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8294  00157E                     l1066:
  8295                           
  8296                           ; BSR set to: 0
  8297  00157E  0012               	return	
  8298  001580                     __end_of___fttol:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           indf0	equ	0xFEF
  8308                           postinc0	equ	0xFEE
  8309                           fsr0h	equ	0xFEA
  8310                           fsr0l	equ	0xFE9
  8311                           wreg	equ	0xFE8
  8312                           postinc1	equ	0xFE6
  8313                           postdec1	equ	0xFE5
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function ___ftsub *****************
  8323 ;; Defined at:
  8324 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  f1              3   34[BANK0 ] float 
  8327 ;;  f2              3   37[BANK0 ] float 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  3   34[BANK0 ] float 
  8332 ;; Registers used:
  8333 ;;		wreg, status,2, status,0, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8339 ;;      Params:         0       6       0       0       0       0       0       0       0
  8340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8342 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8343 ;;Total ram usage:        6 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    6
  8346 ;; This function calls:
  8347 ;;		___ftadd
  8348 ;; This function is called by:
  8349 ;;		_sprintf
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           	psect	text39
  8354  002510                     __ptext39:
  8355                           	opt stack 0
  8356  002510                     ___ftsub:
  8357                           	opt stack 21
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;incstack = 0
  8361  002510  0E00               	movlw	0
  8362  002512  0100               	movlb	0	; () banked
  8363  002514  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8364  002516  0E00               	movlw	0
  8365  002518  0100               	movlb	0	; () banked
  8366  00251A  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8367  00251C  0E80               	movlw	128
  8368  00251E  0100               	movlb	0	; () banked
  8369  002520  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8370                           
  8371                           ; BSR set to: 0
  8372  002522  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8373  002526  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8374  00252A  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8375  00252E  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8376  002532  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8377  002536  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8378  00253A  EC2F  F008         	call	___ftadd	;wreg free
  8379  00253E  C076  F082         	movff	?___ftadd,?___ftsub
  8380  002542  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8381  002546  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8382  00254A  0012               	return	
  8383  00254C                     __end_of___ftsub:
  8384                           	opt stack 0
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           indf0	equ	0xFEF
  8393                           postinc0	equ	0xFEE
  8394                           fsr0h	equ	0xFEA
  8395                           fsr0l	equ	0xFE9
  8396                           wreg	equ	0xFE8
  8397                           postinc1	equ	0xFE6
  8398                           postdec1	equ	0xFE5
  8399                           fsr1l	equ	0xFE1
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           postdec2	equ	0xFDD
  8403                           fsr2h	equ	0xFDA
  8404                           fsr2l	equ	0xFD9
  8405                           status	equ	0xFD8
  8406                           
  8407 ;; *************** function ___ftadd *****************
  8408 ;; Defined at:
  8409 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  f1              3   22[BANK0 ] float 
  8412 ;;  f2              3   25[BANK0 ] float 
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  exp1            1   33[BANK0 ] unsigned char 
  8415 ;;  exp2            1   32[BANK0 ] unsigned char 
  8416 ;;  sign            1   31[BANK0 ] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  3   22[BANK0 ] float 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, status,0, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8426 ;;      Params:         0       6       0       0       0       0       0       0       0
  8427 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8428 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8429 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8430 ;;Total ram usage:       12 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    5
  8433 ;; This function calls:
  8434 ;;		___ftpack
  8435 ;; This function is called by:
  8436 ;;		_sprintf
  8437 ;;		___ftsub
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           	psect	text40
  8442  00105E                     __ptext40:
  8443                           	opt stack 0
  8444  00105E                     ___ftadd:
  8445                           	opt stack 21
  8446                           
  8447                           ;incstack = 0
  8448  00105E  0100               	movlb	0	; () banked
  8449  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8450  001064  0100               	movlb	0	; () banked
  8451  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8452  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8453  00106A  0100               	movlb	0	; () banked
  8454  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8455  00106E  0100               	movlb	0	; () banked
  8456  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8457  001072  E301               	bnc	u4051
  8458  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8459  001076                     u4051:
  8460  001076  0100               	movlb	0	; () banked
  8461  001078  517C               	movf	??___ftadd& (0+255),w,b
  8462  00107A  0100               	movlb	0	; () banked
  8463  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8464  00107E  0100               	movlb	0	; () banked
  8465  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8466  001084  0100               	movlb	0	; () banked
  8467  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8468  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8469  00108A  0100               	movlb	0	; () banked
  8470  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8471  00108E  0100               	movlb	0	; () banked
  8472  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8473  001092  E301               	bnc	u4061
  8474  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8475  001096                     u4061:
  8476  001096  0100               	movlb	0	; () banked
  8477  001098  517C               	movf	??___ftadd& (0+255),w,b
  8478  00109A  0100               	movlb	0	; () banked
  8479  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482  00109E  0100               	movlb	0	; () banked
  8483  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8484  0010A2  B4D8               	btfsc	status,2,c
  8485  0010A4  D012               	goto	l982
  8486                           
  8487                           ; BSR set to: 0
  8488  0010A6  0100               	movlb	0	; () banked
  8489  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8490  0010AA  0100               	movlb	0	; () banked
  8491  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8492  0010AE  B0D8               	btfsc	status,0,c
  8493  0010B0  D013               	goto	l4257
  8494                           
  8495                           ; BSR set to: 0
  8496  0010B2  0100               	movlb	0	; () banked
  8497  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8498  0010B6  0800               	sublw	0
  8499  0010B8  0100               	movlb	0	; () banked
  8500  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8501  0010BC  0100               	movlb	0	; () banked
  8502  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8503  0010C0  0E19               	movlw	25
  8504  0010C2  0100               	movlb	0	; () banked
  8505  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8506  0010C6  A0D8               	btfss	status,0,c
  8507  0010C8  D007               	goto	l4257
  8508  0010CA                     l982:
  8509                           
  8510                           ; BSR set to: 0
  8511  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8512  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8513  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8514  0010D6  D102               	goto	l983
  8515  0010D8                     l4257:
  8516                           
  8517                           ; BSR set to: 0
  8518  0010D8  0100               	movlb	0	; () banked
  8519  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8520  0010DC  B4D8               	btfsc	status,2,c
  8521  0010DE  D012               	goto	l986
  8522                           
  8523                           ; BSR set to: 0
  8524  0010E0  0100               	movlb	0	; () banked
  8525  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8526  0010E4  0100               	movlb	0	; () banked
  8527  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8528  0010E8  B0D8               	btfsc	status,0,c
  8529  0010EA  D013               	goto	l4263
  8530                           
  8531                           ; BSR set to: 0
  8532  0010EC  0100               	movlb	0	; () banked
  8533  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8534  0010F0  0800               	sublw	0
  8535  0010F2  0100               	movlb	0	; () banked
  8536  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8537  0010F6  0100               	movlb	0	; () banked
  8538  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8539  0010FA  0E19               	movlw	25
  8540  0010FC  0100               	movlb	0	; () banked
  8541  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8542  001100  A0D8               	btfss	status,0,c
  8543  001102  D007               	goto	l4263
  8544  001104                     l986:
  8545                           
  8546                           ; BSR set to: 0
  8547  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8548  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8549  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8550  001110  D0E5               	goto	l983
  8551  001112                     l4263:
  8552                           
  8553                           ; BSR set to: 0
  8554  001112  0E06               	movlw	6
  8555  001114  0100               	movlb	0	; () banked
  8556  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8557                           
  8558                           ; BSR set to: 0
  8559  001118  0100               	movlb	0	; () banked
  8560  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8561  00111C  D002               	goto	l4269
  8562                           
  8563                           ; BSR set to: 0
  8564  00111E  0100               	movlb	0	; () banked
  8565  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8566  001122                     l4269:
  8567                           
  8568                           ; BSR set to: 0
  8569  001122  0100               	movlb	0	; () banked
  8570  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8571  001126  D002               	goto	l988
  8572                           
  8573                           ; BSR set to: 0
  8574  001128  0100               	movlb	0	; () banked
  8575  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8576  00112C                     l988:
  8577                           
  8578                           ; BSR set to: 0
  8579  00112C  0100               	movlb	0	; () banked
  8580  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8581                           
  8582                           ; BSR set to: 0
  8583  001130  0EFF               	movlw	255
  8584  001132  0100               	movlb	0	; () banked
  8585  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8586  001136  0EFF               	movlw	255
  8587  001138  0100               	movlb	0	; () banked
  8588  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8589  00113C  0E00               	movlw	0
  8590  00113E  0100               	movlb	0	; () banked
  8591  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8592  001142  0100               	movlb	0	; () banked
  8593  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8594                           
  8595                           ; BSR set to: 0
  8596  001146  0EFF               	movlw	255
  8597  001148  0100               	movlb	0	; () banked
  8598  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8599  00114C  0EFF               	movlw	255
  8600  00114E  0100               	movlb	0	; () banked
  8601  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8602  001152  0E00               	movlw	0
  8603  001154  0100               	movlb	0	; () banked
  8604  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8605                           
  8606                           ; BSR set to: 0
  8607  001158  0100               	movlb	0	; () banked
  8608  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8609  00115C  0100               	movlb	0	; () banked
  8610  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8611  001160  B0D8               	btfsc	status,0,c
  8612  001162  D02A               	goto	l4289
  8613  001164                     l4279:
  8614                           
  8615                           ; BSR set to: 0
  8616  001164  0100               	movlb	0	; () banked
  8617  001166  90D8               	bcf	status,0,c
  8618  001168  0100               	movlb	0	; () banked
  8619  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8620  00116C  0100               	movlb	0	; () banked
  8621  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8622  001170  0100               	movlb	0	; () banked
  8623  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8624  001174  0100               	movlb	0	; () banked
  8625  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8626                           
  8627                           ; BSR set to: 0
  8628  001178  0100               	movlb	0	; () banked
  8629  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8630  00117C  0100               	movlb	0	; () banked
  8631  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8632  001180  B4D8               	btfsc	status,2,c
  8633  001182  D014               	goto	l4287
  8634                           
  8635                           ; BSR set to: 0
  8636  001184  0100               	movlb	0	; () banked
  8637  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8638  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8639  00118C  0E07               	movlw	7
  8640  00118E  0100               	movlb	0	; () banked
  8641  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8642  001192  B4D8               	btfsc	status,2,c
  8643  001194  D00B               	goto	l4287
  8644  001196  D7E6               	goto	l4279
  8645  001198                     l4285:
  8646                           
  8647                           ; BSR set to: 0
  8648  001198  0100               	movlb	0	; () banked
  8649  00119A  90D8               	bcf	status,0,c
  8650  00119C  0100               	movlb	0	; () banked
  8651  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8652  0011A0  0100               	movlb	0	; () banked
  8653  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8654  0011A4  0100               	movlb	0	; () banked
  8655  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8656  0011A8  0100               	movlb	0	; () banked
  8657  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8658  0011AC                     l4287:
  8659                           
  8660                           ; BSR set to: 0
  8661  0011AC  0100               	movlb	0	; () banked
  8662  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8663  0011B0  0100               	movlb	0	; () banked
  8664  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8665  0011B4  D7F1               	goto	l4285
  8666  0011B6  D02F               	goto	l997
  8667  0011B8                     l4289:
  8668                           
  8669                           ; BSR set to: 0
  8670  0011B8  0100               	movlb	0	; () banked
  8671  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8672  0011BC  0100               	movlb	0	; () banked
  8673  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8674  0011C0  B0D8               	btfsc	status,0,c
  8675  0011C2  D029               	goto	l997
  8676  0011C4                     l4291:
  8677                           
  8678                           ; BSR set to: 0
  8679  0011C4  0100               	movlb	0	; () banked
  8680  0011C6  90D8               	bcf	status,0,c
  8681  0011C8  0100               	movlb	0	; () banked
  8682  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8683  0011CC  0100               	movlb	0	; () banked
  8684  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8685  0011D0  0100               	movlb	0	; () banked
  8686  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8687  0011D4  0100               	movlb	0	; () banked
  8688  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8689                           
  8690                           ; BSR set to: 0
  8691  0011D8  0100               	movlb	0	; () banked
  8692  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8693  0011DC  0100               	movlb	0	; () banked
  8694  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8695  0011E0  B4D8               	btfsc	status,2,c
  8696  0011E2  D014               	goto	l4299
  8697                           
  8698                           ; BSR set to: 0
  8699  0011E4  0100               	movlb	0	; () banked
  8700  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8701  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8702  0011EC  0E07               	movlw	7
  8703  0011EE  0100               	movlb	0	; () banked
  8704  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8705  0011F2  B4D8               	btfsc	status,2,c
  8706  0011F4  D00B               	goto	l4299
  8707  0011F6  D7E6               	goto	l4291
  8708  0011F8                     l4297:
  8709                           
  8710                           ; BSR set to: 0
  8711  0011F8  0100               	movlb	0	; () banked
  8712  0011FA  90D8               	bcf	status,0,c
  8713  0011FC  0100               	movlb	0	; () banked
  8714  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8715  001200  0100               	movlb	0	; () banked
  8716  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8717  001204  0100               	movlb	0	; () banked
  8718  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8719  001208  0100               	movlb	0	; () banked
  8720  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8721  00120C                     l4299:
  8722                           
  8723                           ; BSR set to: 0
  8724  00120C  0100               	movlb	0	; () banked
  8725  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8726  001210  0100               	movlb	0	; () banked
  8727  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8728  001214  D7F1               	goto	l4297
  8729  001216                     l997:
  8730                           
  8731                           ; BSR set to: 0
  8732  001216  0100               	movlb	0	; () banked
  8733  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8734  00121A  D012               	goto	l1006
  8735                           
  8736                           ; BSR set to: 0
  8737  00121C  0EFF               	movlw	255
  8738  00121E  0100               	movlb	0	; () banked
  8739  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8740  001222  0EFF               	movlw	255
  8741  001224  0100               	movlb	0	; () banked
  8742  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8743  001228  0EFF               	movlw	255
  8744  00122A  0100               	movlb	0	; () banked
  8745  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8746  00122E  0E01               	movlw	1
  8747  001230  0100               	movlb	0	; () banked
  8748  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8749  001234  0E00               	movlw	0
  8750  001236  0100               	movlb	0	; () banked
  8751  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8752  00123A  0E00               	movlw	0
  8753  00123C  0100               	movlb	0	; () banked
  8754  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8755  001240                     l1006:
  8756                           
  8757                           ; BSR set to: 0
  8758  001240  0100               	movlb	0	; () banked
  8759  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8760  001244  D012               	goto	l4305
  8761                           
  8762                           ; BSR set to: 0
  8763  001246  0EFF               	movlw	255
  8764  001248  0100               	movlb	0	; () banked
  8765  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8766  00124C  0EFF               	movlw	255
  8767  00124E  0100               	movlb	0	; () banked
  8768  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8769  001252  0EFF               	movlw	255
  8770  001254  0100               	movlb	0	; () banked
  8771  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8772  001258  0E01               	movlw	1
  8773  00125A  0100               	movlb	0	; () banked
  8774  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8775  00125E  0E00               	movlw	0
  8776  001260  0100               	movlb	0	; () banked
  8777  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8778  001264  0E00               	movlw	0
  8779  001266  0100               	movlb	0	; () banked
  8780  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8781  00126A                     l4305:
  8782                           
  8783                           ; BSR set to: 0
  8784  00126A  0E00               	movlw	0
  8785  00126C  0100               	movlb	0	; () banked
  8786  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8787                           
  8788                           ; BSR set to: 0
  8789  001270  0100               	movlb	0	; () banked
  8790  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8791  001274  0100               	movlb	0	; () banked
  8792  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  8793  001278  0100               	movlb	0	; () banked
  8794  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8795  00127C  0100               	movlb	0	; () banked
  8796  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8797  001280  0100               	movlb	0	; () banked
  8798  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8799  001284  0100               	movlb	0	; () banked
  8800  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8801                           
  8802                           ; BSR set to: 0
  8803  001288  0100               	movlb	0	; () banked
  8804  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8805  00128C  D015               	goto	l4315
  8806                           
  8807                           ; BSR set to: 0
  8808  00128E  0EFF               	movlw	255
  8809  001290  0100               	movlb	0	; () banked
  8810  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8811  001294  0EFF               	movlw	255
  8812  001296  0100               	movlb	0	; () banked
  8813  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8814  00129A  0EFF               	movlw	255
  8815  00129C  0100               	movlb	0	; () banked
  8816  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8817  0012A0  0E01               	movlw	1
  8818  0012A2  0100               	movlb	0	; () banked
  8819  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  8820  0012A6  0E00               	movlw	0
  8821  0012A8  0100               	movlb	0	; () banked
  8822  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8823  0012AC  0E00               	movlw	0
  8824  0012AE  0100               	movlb	0	; () banked
  8825  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8826                           
  8827                           ; BSR set to: 0
  8828  0012B2  0E01               	movlw	1
  8829  0012B4  0100               	movlb	0	; () banked
  8830  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  8831  0012B8                     l4315:
  8832                           
  8833                           ; BSR set to: 0
  8834  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8835  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8836  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8837  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8838  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  8839  0012CC  EC54  F00D         	call	___ftpack	;wreg free
  8840  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  8841  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  8842  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  8843  0012DC                     l983:
  8844  0012DC  0012               	return	
  8845  0012DE                     __end_of___ftadd:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           indf0	equ	0xFEF
  8855                           postinc0	equ	0xFEE
  8856                           fsr0h	equ	0xFEA
  8857                           fsr0l	equ	0xFE9
  8858                           wreg	equ	0xFE8
  8859                           postinc1	equ	0xFE6
  8860                           postdec1	equ	0xFE5
  8861                           fsr1l	equ	0xFE1
  8862                           indf2	equ	0xFDF
  8863                           postinc2	equ	0xFDE
  8864                           postdec2	equ	0xFDD
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function ___ftpack *****************
  8870 ;; Defined at:
  8871 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;  arg             3   24[COMRAM] unsigned um
  8874 ;;  exp             1   27[COMRAM] unsigned char 
  8875 ;;  sign            1   28[COMRAM] unsigned char 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  3   24[COMRAM] float 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8887 ;;      Params:         5       0       0       0       0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8889 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8890 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8891 ;;Total ram usage:        8 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    4
  8894 ;; This function calls:
  8895 ;;		Nothing
  8896 ;; This function is called by:
  8897 ;;		___ftadd
  8898 ;;		___ftmul
  8899 ;;		___lbtoft
  8900 ;;		___lltoft
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text41
  8905  001AA8                     __ptext41:
  8906                           	opt stack 0
  8907  001AA8                     ___ftpack:
  8908                           	opt stack 21
  8909                           
  8910                           ;incstack = 0
  8911  001AA8  501C               	movf	___ftpack@exp,w,c
  8912  001AAA  B4D8               	btfsc	status,2,c
  8913  001AAC  D005               	goto	l4195
  8914  001AAE  5019               	movf	___ftpack@arg,w,c
  8915  001AB0  101A               	iorwf	___ftpack@arg+1,w,c
  8916  001AB2  101B               	iorwf	___ftpack@arg+2,w,c
  8917  001AB4  A4D8               	btfss	status,2,c
  8918  001AB6  D00C               	goto	l4201
  8919  001AB8                     l4195:
  8920  001AB8  0E00               	movlw	0
  8921  001ABA  6E19               	movwf	?___ftpack,c
  8922  001ABC  0E00               	movlw	0
  8923  001ABE  6E1A               	movwf	?___ftpack+1,c
  8924  001AC0  0E00               	movlw	0
  8925  001AC2  6E1B               	movwf	?___ftpack+2,c
  8926  001AC4  D044               	goto	l945
  8927  001AC6                     l4199:
  8928  001AC6  2A1C               	incf	___ftpack@exp,f,c
  8929  001AC8  90D8               	bcf	status,0,c
  8930  001ACA  321B               	rrcf	___ftpack@arg+2,f,c
  8931  001ACC  321A               	rrcf	___ftpack@arg+1,f,c
  8932  001ACE  3219               	rrcf	___ftpack@arg,f,c
  8933  001AD0                     l4201:
  8934  001AD0  0E00               	movlw	0
  8935  001AD2  1419               	andwf	___ftpack@arg,w,c
  8936  001AD4  6E1E               	movwf	??___ftpack& (0+255),c
  8937  001AD6  0E00               	movlw	0
  8938  001AD8  141A               	andwf	___ftpack@arg+1,w,c
  8939  001ADA  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8940  001ADC  0EFE               	movlw	254
  8941  001ADE  141B               	andwf	___ftpack@arg+2,w,c
  8942  001AE0  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8943  001AE2  501E               	movf	??___ftpack,w,c
  8944  001AE4  101F               	iorwf	??___ftpack+1,w,c
  8945  001AE6  1020               	iorwf	??___ftpack+2,w,c
  8946  001AE8  B4D8               	btfsc	status,2,c
  8947  001AEA  D00C               	goto	l4207
  8948  001AEC  D7EC               	goto	l4199
  8949  001AEE                     l4203:
  8950  001AEE  2A1C               	incf	___ftpack@exp,f,c
  8951  001AF0  0E01               	movlw	1
  8952  001AF2  2619               	addwf	___ftpack@arg,f,c
  8953  001AF4  0E00               	movlw	0
  8954  001AF6  221A               	addwfc	___ftpack@arg+1,f,c
  8955  001AF8  0E00               	movlw	0
  8956  001AFA  221B               	addwfc	___ftpack@arg+2,f,c
  8957  001AFC  90D8               	bcf	status,0,c
  8958  001AFE  321B               	rrcf	___ftpack@arg+2,f,c
  8959  001B00  321A               	rrcf	___ftpack@arg+1,f,c
  8960  001B02  3219               	rrcf	___ftpack@arg,f,c
  8961  001B04                     l4207:
  8962  001B04  0E00               	movlw	0
  8963  001B06  1419               	andwf	___ftpack@arg,w,c
  8964  001B08  6E1E               	movwf	??___ftpack& (0+255),c
  8965  001B0A  0E00               	movlw	0
  8966  001B0C  141A               	andwf	___ftpack@arg+1,w,c
  8967  001B0E  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8968  001B10  0EFF               	movlw	255
  8969  001B12  141B               	andwf	___ftpack@arg+2,w,c
  8970  001B14  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8971  001B16  501E               	movf	??___ftpack,w,c
  8972  001B18  101F               	iorwf	??___ftpack+1,w,c
  8973  001B1A  1020               	iorwf	??___ftpack+2,w,c
  8974  001B1C  B4D8               	btfsc	status,2,c
  8975  001B1E  D006               	goto	l4211
  8976  001B20  D7E6               	goto	l4203
  8977  001B22                     l4209:
  8978  001B22  061C               	decf	___ftpack@exp,f,c
  8979  001B24  90D8               	bcf	status,0,c
  8980  001B26  3619               	rlcf	___ftpack@arg,f,c
  8981  001B28  361A               	rlcf	___ftpack@arg+1,f,c
  8982  001B2A  361B               	rlcf	___ftpack@arg+2,f,c
  8983  001B2C                     l4211:
  8984  001B2C  AE1A               	btfss	___ftpack@arg+1,7,c
  8985  001B2E  D7F9               	goto	l4209
  8986  001B30  A01C               	btfss	___ftpack@exp,0,c
  8987  001B32  9E1A               	bcf	___ftpack@arg+1,7,c
  8988  001B34  90D8               	bcf	status,0,c
  8989  001B36  321C               	rrcf	___ftpack@exp,f,c
  8990  001B38  501C               	movf	___ftpack@exp,w,c
  8991  001B3A  121B               	iorwf	___ftpack@arg+2,f,c
  8992  001B3C  501D               	movf	___ftpack@sign,w,c
  8993  001B3E  A4D8               	btfss	status,2,c
  8994  001B40  8E1B               	bsf	___ftpack@arg+2,7,c
  8995  001B42  C019  F019         	movff	___ftpack@arg,?___ftpack
  8996  001B46  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8997  001B4A  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8998  001B4E                     l945:
  8999  001B4E  0012               	return	
  9000  001B50                     __end_of___ftpack:
  9001                           	opt stack 0
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           indf0	equ	0xFEF
  9010                           postinc0	equ	0xFEE
  9011                           fsr0h	equ	0xFEA
  9012                           fsr0l	equ	0xFE9
  9013                           wreg	equ	0xFE8
  9014                           postinc1	equ	0xFE6
  9015                           postdec1	equ	0xFE5
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function ___ftneg *****************
  9025 ;; Defined at:
  9026 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  f1              3   24[COMRAM] float 
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  3   24[COMRAM] float 
  9033 ;; Registers used:
  9034 ;;		wreg, status,2, status,0
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9040 ;;      Params:         3       0       0       0       0       0       0       0       0
  9041 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9042 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9043 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9044 ;;Total ram usage:        3 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    4
  9047 ;; This function calls:
  9048 ;;		Nothing
  9049 ;; This function is called by:
  9050 ;;		_sprintf
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text42
  9055  00278C                     __ptext42:
  9056                           	opt stack 0
  9057  00278C                     ___ftneg:
  9058                           	opt stack 23
  9059                           
  9060                           ;incstack = 0
  9061  00278C  0E7F               	movlw	127
  9062  00278E  141B               	andwf	___ftneg@f1+2,w,c
  9063  002790  101A               	iorwf	___ftneg@f1+1,w,c
  9064  002792  1019               	iorwf	___ftneg@f1,w,c
  9065  002794  B4D8               	btfsc	status,2,c
  9066  002796  D006               	goto	l1056
  9067  002798  0E00               	movlw	0
  9068  00279A  1A19               	xorwf	___ftneg@f1,f,c
  9069  00279C  0E00               	movlw	0
  9070  00279E  1A1A               	xorwf	___ftneg@f1+1,f,c
  9071  0027A0  0E80               	movlw	128
  9072  0027A2  1A1B               	xorwf	___ftneg@f1+2,f,c
  9073  0027A4                     l1056:
  9074  0027A4  C019  F019         	movff	___ftneg@f1,?___ftneg
  9075  0027A8  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9076  0027AC  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9077  0027B0  0012               	return	
  9078  0027B2                     __end_of___ftneg:
  9079                           	opt stack 0
  9080                           tblptru	equ	0xFF8
  9081                           tblptrh	equ	0xFF7
  9082                           tblptrl	equ	0xFF6
  9083                           tablat	equ	0xFF5
  9084                           prodh	equ	0xFF4
  9085                           prodl	equ	0xFF3
  9086                           intcon	equ	0xFF2
  9087                           indf0	equ	0xFEF
  9088                           postinc0	equ	0xFEE
  9089                           fsr0h	equ	0xFEA
  9090                           fsr0l	equ	0xFE9
  9091                           wreg	equ	0xFE8
  9092                           postinc1	equ	0xFE6
  9093                           postdec1	equ	0xFE5
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function ___ftge *****************
  9103 ;; Defined at:
  9104 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  ff1             3   24[COMRAM] float 
  9107 ;;  ff2             3   27[COMRAM] float 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;		None
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, status,2, status,0
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9119 ;;      Params:         6       0       0       0       0       0       0       0       0
  9120 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9121 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9122 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9123 ;;Total ram usage:        9 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    4
  9126 ;; This function calls:
  9127 ;;		Nothing
  9128 ;; This function is called by:
  9129 ;;		_sprintf
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           	psect	text43
  9134  001E54                     __ptext43:
  9135                           	opt stack 0
  9136  001E54                     ___ftge:
  9137                           	opt stack 23
  9138                           
  9139                           ;incstack = 0
  9140  001E54  AE1B               	btfss	___ftge@ff1+2,7,c
  9141  001E56  D016               	goto	l4725
  9142  001E58  C019  F01F         	movff	___ftge@ff1,??___ftge
  9143  001E5C  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9144  001E60  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9145  001E64  1E1F               	comf	??___ftge,f,c
  9146  001E66  1E20               	comf	??___ftge+1,f,c
  9147  001E68  1E21               	comf	??___ftge+2,f,c
  9148  001E6A  2A1F               	incf	??___ftge,f,c
  9149  001E6C  0E00               	movlw	0
  9150  001E6E  2220               	addwfc	??___ftge+1,f,c
  9151  001E70  2221               	addwfc	??___ftge+2,f,c
  9152  001E72  0E00               	movlw	0
  9153  001E74  241F               	addwf	??___ftge,w,c
  9154  001E76  6E19               	movwf	___ftge@ff1,c
  9155  001E78  0E00               	movlw	0
  9156  001E7A  2020               	addwfc	??___ftge+1,w,c
  9157  001E7C  6E1A               	movwf	___ftge@ff1+1,c
  9158  001E7E  0E80               	movlw	128
  9159  001E80  2021               	addwfc	??___ftge+2,w,c
  9160  001E82  6E1B               	movwf	___ftge@ff1+2,c
  9161  001E84                     l4725:
  9162  001E84  AE1E               	btfss	___ftge@ff2+2,7,c
  9163  001E86  D016               	goto	l4729
  9164  001E88  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9165  001E8C  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9166  001E90  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9167  001E94  1E1F               	comf	??___ftge,f,c
  9168  001E96  1E20               	comf	??___ftge+1,f,c
  9169  001E98  1E21               	comf	??___ftge+2,f,c
  9170  001E9A  2A1F               	incf	??___ftge,f,c
  9171  001E9C  0E00               	movlw	0
  9172  001E9E  2220               	addwfc	??___ftge+1,f,c
  9173  001EA0  2221               	addwfc	??___ftge+2,f,c
  9174  001EA2  0E00               	movlw	0
  9175  001EA4  241F               	addwf	??___ftge,w,c
  9176  001EA6  6E1C               	movwf	___ftge@ff2,c
  9177  001EA8  0E00               	movlw	0
  9178  001EAA  2020               	addwfc	??___ftge+1,w,c
  9179  001EAC  6E1D               	movwf	___ftge@ff2+1,c
  9180  001EAE  0E80               	movlw	128
  9181  001EB0  2021               	addwfc	??___ftge+2,w,c
  9182  001EB2  6E1E               	movwf	___ftge@ff2+2,c
  9183  001EB4                     l4729:
  9184  001EB4  0E00               	movlw	0
  9185  001EB6  1A19               	xorwf	___ftge@ff1,f,c
  9186  001EB8  0E00               	movlw	0
  9187  001EBA  1A1A               	xorwf	___ftge@ff1+1,f,c
  9188  001EBC  0E80               	movlw	128
  9189  001EBE  1A1B               	xorwf	___ftge@ff1+2,f,c
  9190  001EC0  0E00               	movlw	0
  9191  001EC2  1A1C               	xorwf	___ftge@ff2,f,c
  9192  001EC4  0E00               	movlw	0
  9193  001EC6  1A1D               	xorwf	___ftge@ff2+1,f,c
  9194  001EC8  0E80               	movlw	128
  9195  001ECA  1A1E               	xorwf	___ftge@ff2+2,f,c
  9196  001ECC  501C               	movf	___ftge@ff2,w,c
  9197  001ECE  5C19               	subwf	___ftge@ff1,w,c
  9198  001ED0  501D               	movf	___ftge@ff2+1,w,c
  9199  001ED2  581A               	subwfb	___ftge@ff1+1,w,c
  9200  001ED4  501E               	movf	___ftge@ff2+2,w,c
  9201  001ED6  581B               	subwfb	___ftge@ff1+2,w,c
  9202  001ED8  B0D8               	btfsc	status,0,c
  9203  001EDA  D002               	goto	l4735
  9204  001EDC  90D8               	bcf	status,0,c
  9205  001EDE  D001               	goto	l1040
  9206  001EE0                     l4735:
  9207  001EE0  80D8               	bsf	status,0,c
  9208  001EE2                     l1040:
  9209  001EE2  0012               	return	
  9210  001EE4                     __end_of___ftge:
  9211                           	opt stack 0
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           indf0	equ	0xFEF
  9220                           postinc0	equ	0xFEE
  9221                           fsr0h	equ	0xFEA
  9222                           fsr0l	equ	0xFE9
  9223                           wreg	equ	0xFE8
  9224                           postinc1	equ	0xFE6
  9225                           postdec1	equ	0xFE5
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           fsr2h	equ	0xFDA
  9231                           fsr2l	equ	0xFD9
  9232                           status	equ	0xFD8
  9233                           
  9234 ;; *************** function _Lcd_Write_String *****************
  9235 ;; Defined at:
  9236 ;;		line 90 in file "lcd.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;  a               2   28[COMRAM] PTR unsigned char 
  9239 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
  9240 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
  9241 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;  i               2   32[COMRAM] int 
  9244 ;; Return value:  Size  Location     Type
  9245 ;;		None               void
  9246 ;; Registers used:
  9247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9253 ;;      Params:         2       0       0       0       0       0       0       0       0
  9254 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9255 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9256 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9257 ;;Total ram usage:        6 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    6
  9260 ;; This function calls:
  9261 ;;		_Lcd_Write_Char
  9262 ;; This function is called by:
  9263 ;;		_Inicializa_Driveby
  9264 ;;		_Comando_Tablet
  9265 ;;		_Lcd_Write_Integer
  9266 ;;		_main
  9267 ;;		_Lcd_Write_Float
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           	psect	text44
  9272  0020E4                     __ptext44:
  9273                           	opt stack 0
  9274  0020E4                     _Lcd_Write_String:
  9275                           	opt stack 24
  9276                           
  9277                           ;lcd.c: 91: int i;
  9278                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9279                           
  9280                           ;incstack = 0
  9281  0020E4  0E00               	movlw	0
  9282  0020E6  6E22               	movwf	Lcd_Write_String@i+1,c
  9283  0020E8  0E00               	movlw	0
  9284  0020EA  6E21               	movwf	Lcd_Write_String@i,c
  9285  0020EC  D01C               	goto	l5067
  9286  0020EE                     l5063:
  9287                           
  9288                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9289  0020EE  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9290  0020F2  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9291  0020F6  5021               	movf	Lcd_Write_String@i,w,c
  9292  0020F8  261F               	addwf	??_Lcd_Write_String,f,c
  9293  0020FA  5022               	movf	Lcd_Write_String@i+1,w,c
  9294  0020FC  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9295  0020FE  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9296  002102  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9297  002106  6AF8               	clrf	tblptru,c
  9298  002108  0E07               	movlw	(high __ramtop+-1)
  9299  00210A  64F7               	cpfsgt	tblptrh,c
  9300  00210C  D003               	bra	u5367
  9301  00210E  0008               	tblrd		*
  9302  002110  50F5               	movf	tablat,w,c
  9303  002112  D005               	bra	u5360
  9304  002114                     u5367:
  9305  002114  CFF6 FFE9          	movff	tblptrl,fsr0l
  9306  002118  CFF7 FFEA          	movff	tblptrh,fsr0h
  9307  00211C  50EF               	movf	indf0,w,c
  9308  00211E                     u5360:
  9309  00211E  EC36  F013         	call	_Lcd_Write_Char
  9310  002122  4A21               	infsnz	Lcd_Write_String@i,f,c
  9311  002124  2A22               	incf	Lcd_Write_String@i+1,f,c
  9312  002126                     l5067:
  9313  002126  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9314  00212A  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9315  00212E  5021               	movf	Lcd_Write_String@i,w,c
  9316  002130  261F               	addwf	??_Lcd_Write_String,f,c
  9317  002132  5022               	movf	Lcd_Write_String@i+1,w,c
  9318  002134  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9319  002136  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9320  00213A  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9321  00213E  6AF8               	clrf	tblptru,c
  9322  002140  0E07               	movlw	(high __ramtop+-1)
  9323  002142  64F7               	cpfsgt	tblptrh,c
  9324  002144  D003               	bra	u5377
  9325  002146  0008               	tblrd		*
  9326  002148  50F5               	movf	tablat,w,c
  9327  00214A  D005               	bra	u5370
  9328  00214C                     u5377:
  9329  00214C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9330  002150  CFF7 FFEA          	movff	tblptrh,fsr0h
  9331  002154  50EF               	movf	indf0,w,c
  9332  002156                     u5370:
  9333  002156  0900               	iorlw	0
  9334  002158  B4D8               	btfsc	status,2,c
  9335  00215A  0012               	return	
  9336  00215C  D7C8               	goto	l5063
  9337  00215E                     __end_of_Lcd_Write_String:
  9338                           	opt stack 0
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           indf0	equ	0xFEF
  9347                           postinc0	equ	0xFEE
  9348                           fsr0h	equ	0xFEA
  9349                           fsr0l	equ	0xFE9
  9350                           wreg	equ	0xFE8
  9351                           postinc1	equ	0xFE6
  9352                           postdec1	equ	0xFE5
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361 ;; *************** function _Lcd_Write_Char *****************
  9362 ;; Defined at:
  9363 ;;		line 75 in file "lcd.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  a               1    wreg     unsigned char 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  a               1   27[COMRAM] unsigned char 
  9368 ;;  y               1   26[COMRAM] unsigned char 
  9369 ;;  temp            1   25[COMRAM] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;		None               void
  9372 ;; Registers used:
  9373 ;;		wreg, status,2, status,0, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0
  9380 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9382 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9383 ;;Total ram usage:        3 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    5
  9386 ;; This function calls:
  9387 ;;		_Lcd_Port
  9388 ;; This function is called by:
  9389 ;;		_Lcd_Write_String
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           	psect	text45
  9394  00266C                     __ptext45:
  9395                           	opt stack 0
  9396  00266C                     _Lcd_Write_Char:
  9397                           	opt stack 24
  9398                           
  9399                           ;incstack = 0
  9400                           ;Lcd_Write_Char@a stored from wreg
  9401  00266C  6E1C               	movwf	Lcd_Write_Char@a,c
  9402                           
  9403                           ;lcd.c: 76: char temp, y;
  9404                           ;lcd.c: 77: temp = a & 0x0F;
  9405  00266E  501C               	movf	Lcd_Write_Char@a,w,c
  9406  002670  0B0F               	andlw	15
  9407  002672  6E1A               	movwf	Lcd_Write_Char@temp,c
  9408                           
  9409                           ;lcd.c: 78: y = a & 0xF0;
  9410  002674  501C               	movf	Lcd_Write_Char@a,w,c
  9411  002676  0BF0               	andlw	240
  9412  002678  6E1B               	movwf	Lcd_Write_Char@y,c
  9413                           
  9414                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9415  00267A  8084               	bsf	3972,0,c	;volatile
  9416                           
  9417                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9418  00267C  381B               	swapf	Lcd_Write_Char@y,w,c
  9419  00267E  0B0F               	andlw	15
  9420  002680  EC87  F013         	call	_Lcd_Port
  9421                           
  9422                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9423  002684  8484               	bsf	3972,2,c	;volatile
  9424                           
  9425                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9426  002686  0E0D               	movlw	13
  9427  002688                     u5747:
  9428  002688  2EE8               	decfsz	wreg,f,c
  9429  00268A  D7FE               	goto	u5747
  9430  00268C  F000               	nop	
  9431                           
  9432                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9433  00268E  9484               	bcf	3972,2,c	;volatile
  9434                           
  9435                           ;lcd.c: 84: Lcd_Port(temp);
  9436  002690  501A               	movf	Lcd_Write_Char@temp,w,c
  9437  002692  EC87  F013         	call	_Lcd_Port
  9438                           
  9439                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9440  002696  8484               	bsf	3972,2,c	;volatile
  9441                           
  9442                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9443  002698  0E0D               	movlw	13
  9444  00269A                     u5757:
  9445  00269A  2EE8               	decfsz	wreg,f,c
  9446  00269C  D7FE               	goto	u5757
  9447  00269E  F000               	nop	
  9448                           
  9449                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9450  0026A0  9484               	bcf	3972,2,c	;volatile
  9451  0026A2  0012               	return	
  9452  0026A4                     __end_of_Lcd_Write_Char:
  9453                           	opt stack 0
  9454                           tblptru	equ	0xFF8
  9455                           tblptrh	equ	0xFF7
  9456                           tblptrl	equ	0xFF6
  9457                           tablat	equ	0xFF5
  9458                           prodh	equ	0xFF4
  9459                           prodl	equ	0xFF3
  9460                           intcon	equ	0xFF2
  9461                           indf0	equ	0xFEF
  9462                           postinc0	equ	0xFEE
  9463                           fsr0h	equ	0xFEA
  9464                           fsr0l	equ	0xFE9
  9465                           wreg	equ	0xFE8
  9466                           postinc1	equ	0xFE6
  9467                           postdec1	equ	0xFE5
  9468                           fsr1l	equ	0xFE1
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           postdec2	equ	0xFDD
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function _Lcd_Set_Cursor *****************
  9477 ;; Defined at:
  9478 ;;		line 40 in file "lcd.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  a               1    wreg     unsigned char 
  9481 ;;  b               1   27[COMRAM] unsigned char 
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;  a               1   28[COMRAM] unsigned char 
  9484 ;;  temp            1   31[COMRAM] unsigned char 
  9485 ;;  y               1   30[COMRAM] unsigned char 
  9486 ;;  z               1   29[COMRAM] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, status,2, status,0, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9496 ;;      Params:         1       0       0       0       0       0       0       0       0
  9497 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9499 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9500 ;;Total ram usage:        5 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    6
  9503 ;; This function calls:
  9504 ;;		_Lcd_Cmd
  9505 ;; This function is called by:
  9506 ;;		_Inicializa_Driveby
  9507 ;;		_Comando_Tablet
  9508 ;;		_main
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text46
  9513  0023DE                     __ptext46:
  9514                           	opt stack 0
  9515  0023DE                     _Lcd_Set_Cursor:
  9516                           	opt stack 24
  9517                           
  9518                           ;incstack = 0
  9519                           ;Lcd_Set_Cursor@a stored from wreg
  9520  0023DE  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9521                           
  9522                           ;lcd.c: 41: char temp, z, y;
  9523                           ;lcd.c: 42: if (a == 1) {
  9524  0023E0  041D               	decf	Lcd_Set_Cursor@a,w,c
  9525  0023E2  A4D8               	btfss	status,2,c
  9526  0023E4  D010               	goto	l5171
  9527                           
  9528                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9529  0023E6  501C               	movf	Lcd_Set_Cursor@b,w,c
  9530  0023E8  0F7F               	addlw	127
  9531  0023EA  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9532                           
  9533                           ;lcd.c: 44: z = temp >> 4;
  9534  0023EC  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9535  0023EE  0B0F               	andlw	15
  9536  0023F0  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9537                           
  9538                           ;lcd.c: 45: y = temp & 0x0F;
  9539  0023F2  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9540  0023F4  0B0F               	andlw	15
  9541  0023F6  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9542                           
  9543                           ;lcd.c: 46: Lcd_Cmd(z);
  9544  0023F8  501E               	movf	Lcd_Set_Cursor@z,w,c
  9545  0023FA  ECEB  F013         	call	_Lcd_Cmd
  9546                           
  9547                           ;lcd.c: 47: Lcd_Cmd(y);
  9548  0023FE  501F               	movf	Lcd_Set_Cursor@y,w,c
  9549  002400  ECEB  F013         	call	_Lcd_Cmd
  9550                           
  9551                           ;lcd.c: 48: } else if (a == 2) {
  9552  002404  D013               	goto	l273
  9553  002406                     l5171:
  9554  002406  501D               	movf	Lcd_Set_Cursor@a,w,c
  9555  002408  0A02               	xorlw	2
  9556  00240A  A4D8               	btfss	status,2,c
  9557  00240C  D00F               	goto	l273
  9558                           
  9559                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9560  00240E  501C               	movf	Lcd_Set_Cursor@b,w,c
  9561  002410  0FBF               	addlw	191
  9562  002412  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9563                           
  9564                           ;lcd.c: 50: z = temp >> 4;
  9565  002414  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9566  002416  0B0F               	andlw	15
  9567  002418  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9568                           
  9569                           ;lcd.c: 51: y = temp & 0x0F;
  9570  00241A  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9571  00241C  0B0F               	andlw	15
  9572  00241E  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9573                           
  9574                           ;lcd.c: 52: Lcd_Cmd(z);
  9575  002420  501E               	movf	Lcd_Set_Cursor@z,w,c
  9576  002422  ECEB  F013         	call	_Lcd_Cmd
  9577                           
  9578                           ;lcd.c: 53: Lcd_Cmd(y);
  9579  002426  501F               	movf	Lcd_Set_Cursor@y,w,c
  9580  002428  ECEB  F013         	call	_Lcd_Cmd
  9581  00242C                     l273:
  9582  00242C  0012               	return	
  9583  00242E                     __end_of_Lcd_Set_Cursor:
  9584                           	opt stack 0
  9585                           tblptru	equ	0xFF8
  9586                           tblptrh	equ	0xFF7
  9587                           tblptrl	equ	0xFF6
  9588                           tablat	equ	0xFF5
  9589                           prodh	equ	0xFF4
  9590                           prodl	equ	0xFF3
  9591                           intcon	equ	0xFF2
  9592                           indf0	equ	0xFEF
  9593                           postinc0	equ	0xFEE
  9594                           fsr0h	equ	0xFEA
  9595                           fsr0l	equ	0xFE9
  9596                           wreg	equ	0xFE8
  9597                           postinc1	equ	0xFE6
  9598                           postdec1	equ	0xFE5
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           postdec2	equ	0xFDD
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _Lcd_Clear *****************
  9608 ;; Defined at:
  9609 ;;		line 35 in file "lcd.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;		None               void
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    6
  9630 ;; This function calls:
  9631 ;;		_Lcd_Cmd
  9632 ;; This function is called by:
  9633 ;;		_Inicializa_Driveby
  9634 ;;		_Comando_Tablet
  9635 ;;		_main
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text47
  9640  0028DC                     __ptext47:
  9641                           	opt stack 0
  9642  0028DC                     _Lcd_Clear:
  9643                           	opt stack 24
  9644                           
  9645                           ;lcd.c: 36: Lcd_Cmd(0);
  9646                           
  9647                           ;incstack = 0
  9648  0028DC  0E00               	movlw	0
  9649  0028DE  ECEB  F013         	call	_Lcd_Cmd
  9650                           
  9651                           ;lcd.c: 37: Lcd_Cmd(1);
  9652  0028E2  0E01               	movlw	1
  9653  0028E4  ECEB  F013         	call	_Lcd_Cmd
  9654  0028E8  0012               	return	
  9655  0028EA                     __end_of_Lcd_Clear:
  9656                           	opt stack 0
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           intcon	equ	0xFF2
  9664                           indf0	equ	0xFEF
  9665                           postinc0	equ	0xFEE
  9666                           fsr0h	equ	0xFEA
  9667                           fsr0l	equ	0xFE9
  9668                           wreg	equ	0xFE8
  9669                           postinc1	equ	0xFE6
  9670                           postdec1	equ	0xFE5
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _Lcd_Cmd *****************
  9680 ;; Defined at:
  9681 ;;		line 27 in file "lcd.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;  a               1    wreg     unsigned char 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  a               1   26[COMRAM] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;		None               void
  9688 ;; Registers used:
  9689 ;;		wreg, status,2, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0
  9696 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9697 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9698 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9699 ;;Total ram usage:        2 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    5
  9702 ;; This function calls:
  9703 ;;		_Lcd_Port
  9704 ;; This function is called by:
  9705 ;;		_Lcd_Clear
  9706 ;;		_Lcd_Set_Cursor
  9707 ;;		_Lcd_Init
  9708 ;;		_Lcd_Shift_Right
  9709 ;;		_Lcd_Shift_Left
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           	psect	text48
  9714  0027D6                     __ptext48:
  9715                           	opt stack 0
  9716  0027D6                     _Lcd_Cmd:
  9717                           	opt stack 24
  9718                           
  9719                           ;incstack = 0
  9720                           ;Lcd_Cmd@a stored from wreg
  9721  0027D6  6E1B               	movwf	Lcd_Cmd@a,c
  9722                           
  9723                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9724  0027D8  9084               	bcf	3972,0,c	;volatile
  9725                           
  9726                           ;lcd.c: 29: Lcd_Port(a);
  9727  0027DA  501B               	movf	Lcd_Cmd@a,w,c
  9728  0027DC  EC87  F013         	call	_Lcd_Port
  9729                           
  9730                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9731  0027E0  8484               	bsf	3972,2,c	;volatile
  9732                           
  9733                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9734  0027E2  0E06               	movlw	6
  9735  0027E4  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9736  0027E6  0E30               	movlw	48
  9737  0027E8                     u5767:
  9738  0027E8  2EE8               	decfsz	wreg,f,c
  9739  0027EA  D7FE               	goto	u5767
  9740  0027EC  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9741  0027EE  D7FC               	goto	u5767
  9742  0027F0  D000               	nop2	
  9743                           
  9744                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9745  0027F2  9484               	bcf	3972,2,c	;volatile
  9746  0027F4  0012               	return	
  9747  0027F6                     __end_of_Lcd_Cmd:
  9748                           	opt stack 0
  9749                           tblptru	equ	0xFF8
  9750                           tblptrh	equ	0xFF7
  9751                           tblptrl	equ	0xFF6
  9752                           tablat	equ	0xFF5
  9753                           prodh	equ	0xFF4
  9754                           prodl	equ	0xFF3
  9755                           intcon	equ	0xFF2
  9756                           indf0	equ	0xFEF
  9757                           postinc0	equ	0xFEE
  9758                           fsr0h	equ	0xFEA
  9759                           fsr0l	equ	0xFE9
  9760                           wreg	equ	0xFE8
  9761                           postinc1	equ	0xFE6
  9762                           postdec1	equ	0xFE5
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           fsr2h	equ	0xFDA
  9768                           fsr2l	equ	0xFD9
  9769                           status	equ	0xFD8
  9770                           
  9771 ;; *************** function _Lcd_Port *****************
  9772 ;; Defined at:
  9773 ;;		line 6 in file "lcd.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  a               1    wreg     unsigned char 
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  a               1   24[COMRAM] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0
  9788 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9790 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9791 ;;Total ram usage:        1 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    4
  9794 ;; This function calls:
  9795 ;;		Nothing
  9796 ;; This function is called by:
  9797 ;;		_Lcd_Cmd
  9798 ;;		_Lcd_Init
  9799 ;;		_Lcd_Write_Char
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text49
  9804  00270E                     __ptext49:
  9805                           	opt stack 0
  9806  00270E                     _Lcd_Port:
  9807                           	opt stack 24
  9808                           
  9809                           ;incstack = 0
  9810                           ;Lcd_Port@a stored from wreg
  9811  00270E  6E19               	movwf	Lcd_Port@a,c
  9812                           
  9813                           ;lcd.c: 7: if (a & 1)
  9814  002710  A019               	btfss	Lcd_Port@a,0,c
  9815  002712  D002               	goto	l253
  9816                           
  9817                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9818  002714  8883               	bsf	3971,4,c	;volatile
  9819  002716  D001               	goto	l4231
  9820  002718                     l253:
  9821                           
  9822                           ;lcd.c: 9: else
  9823                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9824  002718  9883               	bcf	3971,4,c	;volatile
  9825  00271A                     l4231:
  9826                           
  9827                           ;lcd.c: 12: if (a & 2)
  9828  00271A  A219               	btfss	Lcd_Port@a,1,c
  9829  00271C  D002               	goto	l255
  9830                           
  9831                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9832  00271E  8A83               	bsf	3971,5,c	;volatile
  9833  002720  D001               	goto	l4235
  9834  002722                     l255:
  9835                           
  9836                           ;lcd.c: 14: else
  9837                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9838  002722  9A83               	bcf	3971,5,c	;volatile
  9839  002724                     l4235:
  9840                           
  9841                           ;lcd.c: 17: if (a & 4)
  9842  002724  A419               	btfss	Lcd_Port@a,2,c
  9843  002726  D002               	goto	l257
  9844                           
  9845                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9846  002728  8C83               	bsf	3971,6,c	;volatile
  9847  00272A  D001               	goto	l4239
  9848  00272C                     l257:
  9849                           
  9850                           ;lcd.c: 19: else
  9851                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9852  00272C  9C83               	bcf	3971,6,c	;volatile
  9853  00272E                     l4239:
  9854                           
  9855                           ;lcd.c: 22: if (a & 8)
  9856  00272E  A619               	btfss	Lcd_Port@a,3,c
  9857  002730  D002               	goto	l259
  9858                           
  9859                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9860  002732  8E83               	bsf	3971,7,c	;volatile
  9861  002734  D001               	goto	l261
  9862  002736                     l259:
  9863                           
  9864                           ;lcd.c: 24: else
  9865                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9866  002736  9E83               	bcf	3971,7,c	;volatile
  9867  002738                     l261:
  9868  002738  0012               	return	
  9869  00273A                     __end_of_Lcd_Port:
  9870                           	opt stack 0
  9871                           tblptru	equ	0xFF8
  9872                           tblptrh	equ	0xFF7
  9873                           tblptrl	equ	0xFF6
  9874                           tablat	equ	0xFF5
  9875                           prodh	equ	0xFF4
  9876                           prodl	equ	0xFF3
  9877                           intcon	equ	0xFF2
  9878                           indf0	equ	0xFEF
  9879                           postinc0	equ	0xFEE
  9880                           fsr0h	equ	0xFEA
  9881                           fsr0l	equ	0xFE9
  9882                           wreg	equ	0xFE8
  9883                           postinc1	equ	0xFE6
  9884                           postdec1	equ	0xFE5
  9885                           fsr1l	equ	0xFE1
  9886                           indf2	equ	0xFDF
  9887                           postinc2	equ	0xFDE
  9888                           postdec2	equ	0xFDD
  9889                           fsr2h	equ	0xFDA
  9890                           fsr2l	equ	0xFD9
  9891                           status	equ	0xFD8
  9892                           
  9893 ;; *************** function _TMRO_USART *****************
  9894 ;; Defined at:
  9895 ;;		line 83 in file "robot.c"
  9896 ;; Parameters:    Size  Location     Type
  9897 ;;		None
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;		None
  9900 ;; Return value:  Size  Location     Type
  9901 ;;		None               void
  9902 ;; Registers used:
  9903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9909 ;;      Params:         0       0       0       0       0       0       0       0       0
  9910 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9911 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9912 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9913 ;;Total ram usage:       14 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    3
  9916 ;; This function calls:
  9917 ;;		_ReadUSART
  9918 ;;		i2_Lcd_Clear
  9919 ;;		i2_Lcd_Set_Cursor
  9920 ;;		i2_Lcd_Write_String
  9921 ;; This function is called by:
  9922 ;;		Interrupt level 2
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           	psect	intcode
  9927  000008                     __pintcode:
  9928                           	opt stack 0
  9929  000008                     _TMRO_USART:
  9930                           	opt stack 21
  9931                           
  9932                           ;incstack = 0
  9933  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
  9934  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
  9935  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
  9936  000014  ED7D  F00C         	call	int_func,f	;refresh shadow registers
  9937                           pclatu	equ	0xFFB
  9938                           pclath	equ	0xFFA
  9939                           tblptru	equ	0xFF8
  9940                           tblptrh	equ	0xFF7
  9941                           tblptrl	equ	0xFF6
  9942                           tablat	equ	0xFF5
  9943                           prodh	equ	0xFF4
  9944                           prodl	equ	0xFF3
  9945                           intcon	equ	0xFF2
  9946                           indf0	equ	0xFEF
  9947                           postinc0	equ	0xFEE
  9948                           fsr0h	equ	0xFEA
  9949                           fsr0l	equ	0xFE9
  9950                           wreg	equ	0xFE8
  9951                           postinc1	equ	0xFE6
  9952                           postdec1	equ	0xFE5
  9953                           fsr1l	equ	0xFE1
  9954                           indf2	equ	0xFDF
  9955                           postinc2	equ	0xFDE
  9956                           postdec2	equ	0xFDD
  9957                           fsr2h	equ	0xFDA
  9958                           fsr2l	equ	0xFD9
  9959                           status	equ	0xFD8
  9960                           
  9961                           	psect	intcode_body
  9962  0018FA                     __pintcode_body:
  9963                           	opt stack 21
  9964  0018FA                     int_func:
  9965                           	opt stack 21
  9966  0018FA  0006               	pop		; remove dummy address from shadow register refresh
  9967  0018FC  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
  9968  001900  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
  9969  001904  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
  9970  001908  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
  9971  00190C  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
  9972  001910  CFF3 F013          	movff	prodl,??_TMRO_USART+8
  9973  001914  CFF4 F014          	movff	prodh,??_TMRO_USART+9
  9974  001918  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
  9975  00191C  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
  9976  001920  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
  9977  001924  CFF5 F018          	movff	tablat,??_TMRO_USART+13
  9978                           
  9979                           ;robot.c: 88: if (PIR1bits.RCIF) {
  9980  001928  AA9E               	btfss	3998,5,c	;volatile
  9981  00192A  D032               	goto	i2l370
  9982                           
  9983                           ;robot.c: 90: BluetoothDato[cad] = ReadUSART();
  9984  00192C  503D               	movf	_cad,w,c
  9985  00192E  0D01               	mullw	1
  9986  001930  0101               	movlb	1	; () banked
  9987  001932  0E28               	movlw	low _BluetoothDato
  9988  001934  24F3               	addwf	prodl,w,c
  9989  001936  6ED9               	movwf	fsr2l,c
  9990  001938  0101               	movlb	1	; () banked
  9991  00193A  0E01               	movlw	high _BluetoothDato
  9992  00193C  20F4               	addwfc	prodh,w,c
  9993  00193E  6EDA               	movwf	fsr2h,c
  9994  001940  EC29  F014         	call	_ReadUSART	;wreg free
  9995  001944  6EDF               	movwf	indf2,c
  9996                           
  9997                           ;robot.c: 91: if (BluetoothDato[cad] == '#') {
  9998  001946  503D               	movf	_cad,w,c
  9999  001948  0D01               	mullw	1
 10000  00194A  0101               	movlb	1	; () banked
 10001  00194C  0E28               	movlw	low _BluetoothDato
 10002  00194E  24F3               	addwf	prodl,w,c
 10003  001950  6ED9               	movwf	fsr2l,c
 10004  001952  0101               	movlb	1	; () banked
 10005  001954  0E01               	movlw	high _BluetoothDato
 10006  001956  20F4               	addwfc	prodh,w,c
 10007  001958  6EDA               	movwf	fsr2h,c
 10008  00195A  0E23               	movlw	35
 10009  00195C  62DF               	cpfseq	indf2,c
 10010  00195E  D013               	goto	i2l5445
 10011                           
 10012                           ; BSR set to: 1
 10013                           ;robot.c: 92: if (ComanTFlag == 0) {
 10014  001960  6632               	tstfsz	_ComanTFlag,c
 10015  001962  D007               	goto	i2l5441
 10016                           
 10017                           ; BSR set to: 1
 10018                           ;robot.c: 93: EntTrama = 1;
 10019  001964  0E01               	movlw	1
 10020  001966  6E35               	movwf	_EntTrama,c
 10021                           
 10022                           ;robot.c: 94: FinComandT = 0;
 10023  001968  0E00               	movlw	0
 10024  00196A  6E37               	movwf	_FinComandT,c
 10025                           
 10026                           ;robot.c: 95: ComanTFlag = 1;
 10027  00196C  0E01               	movlw	1
 10028  00196E  6E32               	movwf	_ComanTFlag,c
 10029  001970  D00D               	goto	i2u563_40
 10030  001972                     i2l5441:
 10031                           
 10032                           ; BSR set to: 1
 10033                           ;robot.c: 98: else if (ComanTFlag == 1) {
 10034  001972  0432               	decf	_ComanTFlag,w,c
 10035  001974  A4D8               	btfss	status,2,c
 10036  001976  D01C               	goto	i2l5457
 10037                           
 10038                           ; BSR set to: 1
 10039                           ;robot.c: 99: ComanTFlag = 0;
 10040  001978  0E00               	movlw	0
 10041  00197A  6E32               	movwf	_ComanTFlag,c
 10042                           
 10043                           ;robot.c: 100: FinComandT = 1;
 10044  00197C  0E01               	movlw	1
 10045  00197E  6E37               	movwf	_FinComandT,c
 10046                           
 10047                           ;robot.c: 101: EntTrama = 0;
 10048  001980  0E00               	movlw	0
 10049  001982  6E35               	movwf	_EntTrama,c
 10050  001984  D015               	goto	i2l5457
 10051  001986                     i2l5445:
 10052                           
 10053                           ; BSR set to: 1
 10054                           ;robot.c: 105: else if (EntTrama == 1)
 10055  001986  0435               	decf	_EntTrama,w,c
 10056  001988  A4D8               	btfss	status,2,c
 10057  00198A  D012               	goto	i2l5457
 10058  00198C                     i2u563_40:
 10059                           
 10060                           ; BSR set to: 1
 10061                           ;robot.c: 106: cad++;
 10062  00198C  2A3D               	incf	_cad,f,c
 10063  00198E  D010               	goto	i2l5457
 10064  001990                     i2l370:
 10065                           
 10066                           ;robot.c: 110: else if(PIR1bits.TMR2IF){
 10067  001990  A29E               	btfss	3998,1,c	;volatile
 10068  001992  D00E               	goto	i2l5457
 10069                           
 10070                           ;robot.c: 111: Lcd_Clear();
 10071  001994  EC75  F014         	call	i2_Lcd_Clear	;wreg free
 10072                           
 10073                           ;robot.c: 112: Lcd_Set_Cursor(1,1);
 10074  001998  0E01               	movlw	1
 10075  00199A  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10076  00199C  0E01               	movlw	1
 10077  00199E  EC17  F012         	call	i2_Lcd_Set_Cursor
 10078                           
 10079                           ;robot.c: 113: Lcd_Write_String("Interruption TMR2");
 10080  0019A2  0E7F               	movlw	high STR_20
 10081  0019A4  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10082  0019A6  0E41               	movlw	low STR_20
 10083  0019A8  6E05               	movwf	i2Lcd_Write_String@a,c
 10084  0019AA  ECAF  F010         	call	i2_Lcd_Write_String	;wreg free
 10085                           
 10086                           ;robot.c: 114: PIE1bits.TMR2IE = 0;
 10087  0019AE  929D               	bcf	3997,1,c	;volatile
 10088  0019B0                     i2l5457:
 10089                           
 10090                           ;robot.c: 115: }
 10091                           ;robot.c: 116: PIR1bits.TMR2IF=0;
 10092  0019B0  929E               	bcf	3998,1,c	;volatile
 10093                           
 10094                           ;robot.c: 117: PIR1bits.RCIF=0;
 10095  0019B2  9A9E               	bcf	3998,5,c	;volatile
 10096  0019B4  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10097  0019B8  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10098  0019BC  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10099  0019C0  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10100  0019C4  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10101  0019C8  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10102  0019CC  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10103  0019D0  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10104  0019D4  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10105  0019D8  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10106  0019DC  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10107  0019E0  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10108  0019E4  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10109  0019E8  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10110  0019EC  0011               	retfie		f
 10111  0019EE                     __end_of_TMRO_USART:
 10112                           	opt stack 0
 10113                           pclatu	equ	0xFFB
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           indf0	equ	0xFEF
 10123                           postinc0	equ	0xFEE
 10124                           fsr0h	equ	0xFEA
 10125                           fsr0l	equ	0xFE9
 10126                           wreg	equ	0xFE8
 10127                           postinc1	equ	0xFE6
 10128                           postdec1	equ	0xFE5
 10129                           fsr1h	equ	0xFE2
 10130                           fsr1l	equ	0xFE1
 10131                           indf2	equ	0xFDF
 10132                           postinc2	equ	0xFDE
 10133                           postdec2	equ	0xFDD
 10134                           fsr2h	equ	0xFDA
 10135                           fsr2l	equ	0xFD9
 10136                           status	equ	0xFD8
 10137                           
 10138 ;; *************** function i2_Lcd_Write_String *****************
 10139 ;; Defined at:
 10140 ;;		line 90 in file "lcd.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;  a               2    4[COMRAM] PTR unsigned char 
 10143 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
 10144 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
 10145 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10148 ;; Return value:  Size  Location     Type
 10149 ;;		None               void
 10150 ;; Registers used:
 10151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10152 ;; Tracked objects:
 10153 ;;		On entry : 0/0
 10154 ;;		On exit  : 0/0
 10155 ;;		Unchanged: 0/0
 10156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10157 ;;      Params:         2       0       0       0       0       0       0       0       0
 10158 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10159 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10160 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10161 ;;Total ram usage:        6 bytes
 10162 ;; Hardware stack levels used:    1
 10163 ;; Hardware stack levels required when called:    2
 10164 ;; This function calls:
 10165 ;;		i2_Lcd_Write_Char
 10166 ;; This function is called by:
 10167 ;;		_TMRO_USART
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text51
 10172  00215E                     __ptext51:
 10173                           	opt stack 0
 10174  00215E                     i2_Lcd_Write_String:
 10175                           	opt stack 21
 10176                           
 10177                           ;lcd.c: 91: int i;
 10178                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10179                           
 10180                           ;incstack = 0
 10181  00215E  0E00               	movlw	0
 10182  002160  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10183  002162  0E00               	movlw	0
 10184  002164  6E09               	movwf	i2Lcd_Write_String@i,c
 10185  002166  D01C               	goto	i2l5397
 10186  002168                     i2l5393:
 10187                           
 10188                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10189  002168  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10190  00216C  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10191  002170  5009               	movf	i2Lcd_Write_String@i,w,c
 10192  002172  2607               	addwf	??i2_Lcd_Write_String,f,c
 10193  002174  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10194  002176  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10195  002178  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10196  00217C  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10197  002180  6AF8               	clrf	tblptru,c
 10198  002182  0E07               	movlw	(high __ramtop+-1)
 10199  002184  64F7               	cpfsgt	tblptrh,c
 10200  002186  D003               	bra	i2u555_47
 10201  002188  0008               	tblrd		*
 10202  00218A  50F5               	movf	tablat,w,c
 10203  00218C  D005               	bra	i2u555_40
 10204  00218E                     i2u555_47:
 10205  00218E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10206  002192  CFF7 FFEA          	movff	tblptrh,fsr0h
 10207  002196  50EF               	movf	indf0,w,c
 10208  002198                     i2u555_40:
 10209  002198  EC52  F013         	call	i2_Lcd_Write_Char
 10210  00219C  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10211  00219E  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10212  0021A0                     i2l5397:
 10213  0021A0  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10214  0021A4  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10215  0021A8  5009               	movf	i2Lcd_Write_String@i,w,c
 10216  0021AA  2607               	addwf	??i2_Lcd_Write_String,f,c
 10217  0021AC  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10218  0021AE  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10219  0021B0  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10220  0021B4  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10221  0021B8  6AF8               	clrf	tblptru,c
 10222  0021BA  0E07               	movlw	(high __ramtop+-1)
 10223  0021BC  64F7               	cpfsgt	tblptrh,c
 10224  0021BE  D003               	bra	i2u556_47
 10225  0021C0  0008               	tblrd		*
 10226  0021C2  50F5               	movf	tablat,w,c
 10227  0021C4  D005               	bra	i2u556_40
 10228  0021C6                     i2u556_47:
 10229  0021C6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10230  0021CA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10231  0021CE  50EF               	movf	indf0,w,c
 10232  0021D0                     i2u556_40:
 10233  0021D0  0900               	iorlw	0
 10234  0021D2  B4D8               	btfsc	status,2,c
 10235  0021D4  0012               	return	
 10236  0021D6  D7C8               	goto	i2l5393
 10237  0021D8                     __end_ofi2_Lcd_Write_String:
 10238                           	opt stack 0
 10239                           pclatu	equ	0xFFB
 10240                           pclath	equ	0xFFA
 10241                           tblptru	equ	0xFF8
 10242                           tblptrh	equ	0xFF7
 10243                           tblptrl	equ	0xFF6
 10244                           tablat	equ	0xFF5
 10245                           prodh	equ	0xFF4
 10246                           prodl	equ	0xFF3
 10247                           intcon	equ	0xFF2
 10248                           indf0	equ	0xFEF
 10249                           postinc0	equ	0xFEE
 10250                           fsr0h	equ	0xFEA
 10251                           fsr0l	equ	0xFE9
 10252                           wreg	equ	0xFE8
 10253                           postinc1	equ	0xFE6
 10254                           postdec1	equ	0xFE5
 10255                           fsr1h	equ	0xFE2
 10256                           fsr1l	equ	0xFE1
 10257                           indf2	equ	0xFDF
 10258                           postinc2	equ	0xFDE
 10259                           postdec2	equ	0xFDD
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264 ;; *************** function i2_Lcd_Write_Char *****************
 10265 ;; Defined at:
 10266 ;;		line 75 in file "lcd.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  a               1    wreg     unsigned char 
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;  a               1    3[COMRAM] unsigned char 
 10271 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10272 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;		None               void
 10275 ;; Registers used:
 10276 ;;		wreg, status,2, status,0, cstack
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10282 ;;      Params:         0       0       0       0       0       0       0       0       0
 10283 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10285 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10286 ;;Total ram usage:        3 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    1
 10289 ;; This function calls:
 10290 ;;		i2_Lcd_Port
 10291 ;; This function is called by:
 10292 ;;		i2_Lcd_Write_String
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text52
 10297  0026A4                     __ptext52:
 10298                           	opt stack 0
 10299  0026A4                     i2_Lcd_Write_Char:
 10300                           	opt stack 21
 10301                           
 10302                           ;incstack = 0
 10303                           ;i2Lcd_Write_Char@a stored from wreg
 10304  0026A4  6E04               	movwf	i2Lcd_Write_Char@a,c
 10305                           
 10306                           ;lcd.c: 76: char temp, y;
 10307                           ;lcd.c: 77: temp = a & 0x0F;
 10308  0026A6  5004               	movf	i2Lcd_Write_Char@a,w,c
 10309  0026A8  0B0F               	andlw	15
 10310  0026AA  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10311                           
 10312                           ;lcd.c: 78: y = a & 0xF0;
 10313  0026AC  5004               	movf	i2Lcd_Write_Char@a,w,c
 10314  0026AE  0BF0               	andlw	240
 10315  0026B0  6E03               	movwf	i2Lcd_Write_Char@y,c
 10316                           
 10317                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10318  0026B2  8084               	bsf	3972,0,c	;volatile
 10319                           
 10320                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10321  0026B4  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10322  0026B6  0B0F               	andlw	15
 10323  0026B8  EC9D  F013         	call	i2_Lcd_Port
 10324                           
 10325                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10326  0026BC  8484               	bsf	3972,2,c	;volatile
 10327                           
 10328                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10329  0026BE  0E0D               	movlw	13
 10330  0026C0                     i2u577_47:
 10331  0026C0  2EE8               	decfsz	wreg,f,c
 10332  0026C2  D7FE               	goto	i2u577_47
 10333  0026C4  F000               	nop	
 10334                           
 10335                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10336  0026C6  9484               	bcf	3972,2,c	;volatile
 10337                           
 10338                           ;lcd.c: 84: Lcd_Port(temp);
 10339  0026C8  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10340  0026CA  EC9D  F013         	call	i2_Lcd_Port
 10341                           
 10342                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10343  0026CE  8484               	bsf	3972,2,c	;volatile
 10344                           
 10345                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10346  0026D0  0E0D               	movlw	13
 10347  0026D2                     i2u578_47:
 10348  0026D2  2EE8               	decfsz	wreg,f,c
 10349  0026D4  D7FE               	goto	i2u578_47
 10350  0026D6  F000               	nop	
 10351                           
 10352                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10353  0026D8  9484               	bcf	3972,2,c	;volatile
 10354  0026DA  0012               	return	
 10355  0026DC                     __end_ofi2_Lcd_Write_Char:
 10356                           	opt stack 0
 10357                           pclatu	equ	0xFFB
 10358                           pclath	equ	0xFFA
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           indf0	equ	0xFEF
 10367                           postinc0	equ	0xFEE
 10368                           fsr0h	equ	0xFEA
 10369                           fsr0l	equ	0xFE9
 10370                           wreg	equ	0xFE8
 10371                           postinc1	equ	0xFE6
 10372                           postdec1	equ	0xFE5
 10373                           fsr1h	equ	0xFE2
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function i2_Lcd_Set_Cursor *****************
 10383 ;; Defined at:
 10384 ;;		line 40 in file "lcd.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  a               1    wreg     unsigned char 
 10387 ;;  b               1    3[COMRAM] unsigned char 
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  a               1    4[COMRAM] unsigned char 
 10390 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10391 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10392 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10393 ;; Return value:  Size  Location     Type
 10394 ;;		None               void
 10395 ;; Registers used:
 10396 ;;		wreg, status,2, status,0, cstack
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10402 ;;      Params:         1       0       0       0       0       0       0       0       0
 10403 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10404 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10405 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10406 ;;Total ram usage:        5 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:    2
 10409 ;; This function calls:
 10410 ;;		i2_Lcd_Cmd
 10411 ;; This function is called by:
 10412 ;;		_TMRO_USART
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           	psect	text53
 10417  00242E                     __ptext53:
 10418                           	opt stack 0
 10419  00242E                     i2_Lcd_Set_Cursor:
 10420                           	opt stack 21
 10421                           
 10422                           ;incstack = 0
 10423                           ;i2Lcd_Set_Cursor@a stored from wreg
 10424  00242E  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10425                           
 10426                           ;lcd.c: 41: char temp, z, y;
 10427                           ;lcd.c: 42: if (a == 1) {
 10428  002430  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10429  002432  A4D8               	btfss	status,2,c
 10430  002434  D010               	goto	i2l5383
 10431                           
 10432                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10433  002436  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10434  002438  0F7F               	addlw	127
 10435  00243A  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10436                           
 10437                           ;lcd.c: 44: z = temp >> 4;
 10438  00243C  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10439  00243E  0B0F               	andlw	15
 10440  002440  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10441                           
 10442                           ;lcd.c: 45: y = temp & 0x0F;
 10443  002442  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10444  002444  0B0F               	andlw	15
 10445  002446  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10446                           
 10447                           ;lcd.c: 46: Lcd_Cmd(z);
 10448  002448  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10449  00244A  ECFB  F013         	call	i2_Lcd_Cmd
 10450                           
 10451                           ;lcd.c: 47: Lcd_Cmd(y);
 10452  00244E  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10453  002450  ECFB  F013         	call	i2_Lcd_Cmd
 10454                           
 10455                           ;lcd.c: 48: } else if (a == 2) {
 10456  002454  D013               	goto	i2l273
 10457  002456                     i2l5383:
 10458  002456  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10459  002458  0A02               	xorlw	2
 10460  00245A  A4D8               	btfss	status,2,c
 10461  00245C  D00F               	goto	i2l273
 10462                           
 10463                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10464  00245E  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10465  002460  0FBF               	addlw	191
 10466  002462  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10467                           
 10468                           ;lcd.c: 50: z = temp >> 4;
 10469  002464  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10470  002466  0B0F               	andlw	15
 10471  002468  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10472                           
 10473                           ;lcd.c: 51: y = temp & 0x0F;
 10474  00246A  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10475  00246C  0B0F               	andlw	15
 10476  00246E  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10477                           
 10478                           ;lcd.c: 52: Lcd_Cmd(z);
 10479  002470  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10480  002472  ECFB  F013         	call	i2_Lcd_Cmd
 10481                           
 10482                           ;lcd.c: 53: Lcd_Cmd(y);
 10483  002476  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10484  002478  ECFB  F013         	call	i2_Lcd_Cmd
 10485  00247C                     i2l273:
 10486  00247C  0012               	return	
 10487  00247E                     __end_ofi2_Lcd_Set_Cursor:
 10488                           	opt stack 0
 10489                           pclatu	equ	0xFFB
 10490                           pclath	equ	0xFFA
 10491                           tblptru	equ	0xFF8
 10492                           tblptrh	equ	0xFF7
 10493                           tblptrl	equ	0xFF6
 10494                           tablat	equ	0xFF5
 10495                           prodh	equ	0xFF4
 10496                           prodl	equ	0xFF3
 10497                           intcon	equ	0xFF2
 10498                           indf0	equ	0xFEF
 10499                           postinc0	equ	0xFEE
 10500                           fsr0h	equ	0xFEA
 10501                           fsr0l	equ	0xFE9
 10502                           wreg	equ	0xFE8
 10503                           postinc1	equ	0xFE6
 10504                           postdec1	equ	0xFE5
 10505                           fsr1h	equ	0xFE2
 10506                           fsr1l	equ	0xFE1
 10507                           indf2	equ	0xFDF
 10508                           postinc2	equ	0xFDE
 10509                           postdec2	equ	0xFDD
 10510                           fsr2h	equ	0xFDA
 10511                           fsr2l	equ	0xFD9
 10512                           status	equ	0xFD8
 10513                           
 10514 ;; *************** function i2_Lcd_Clear *****************
 10515 ;; Defined at:
 10516 ;;		line 35 in file "lcd.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;		None               void
 10523 ;; Registers used:
 10524 ;;		wreg, status,2, cstack
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10533 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10534 ;;Total ram usage:        0 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    2
 10537 ;; This function calls:
 10538 ;;		i2_Lcd_Cmd
 10539 ;; This function is called by:
 10540 ;;		_TMRO_USART
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text54
 10545  0028EA                     __ptext54:
 10546                           	opt stack 0
 10547  0028EA                     i2_Lcd_Clear:
 10548                           	opt stack 21
 10549                           
 10550                           ;lcd.c: 36: Lcd_Cmd(0);
 10551                           
 10552                           ;incstack = 0
 10553  0028EA  0E00               	movlw	0
 10554  0028EC  ECFB  F013         	call	i2_Lcd_Cmd
 10555                           
 10556                           ;lcd.c: 37: Lcd_Cmd(1);
 10557  0028F0  0E01               	movlw	1
 10558  0028F2  ECFB  F013         	call	i2_Lcd_Cmd
 10559  0028F6  0012               	return	
 10560  0028F8                     __end_ofi2_Lcd_Clear:
 10561                           	opt stack 0
 10562                           pclatu	equ	0xFFB
 10563                           pclath	equ	0xFFA
 10564                           tblptru	equ	0xFF8
 10565                           tblptrh	equ	0xFF7
 10566                           tblptrl	equ	0xFF6
 10567                           tablat	equ	0xFF5
 10568                           prodh	equ	0xFF4
 10569                           prodl	equ	0xFF3
 10570                           intcon	equ	0xFF2
 10571                           indf0	equ	0xFEF
 10572                           postinc0	equ	0xFEE
 10573                           fsr0h	equ	0xFEA
 10574                           fsr0l	equ	0xFE9
 10575                           wreg	equ	0xFE8
 10576                           postinc1	equ	0xFE6
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           indf2	equ	0xFDF
 10581                           postinc2	equ	0xFDE
 10582                           postdec2	equ	0xFDD
 10583                           fsr2h	equ	0xFDA
 10584                           fsr2l	equ	0xFD9
 10585                           status	equ	0xFD8
 10586                           
 10587 ;; *************** function i2_Lcd_Cmd *****************
 10588 ;; Defined at:
 10589 ;;		line 27 in file "lcd.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;  a               1    wreg     unsigned char 
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  a               1    2[COMRAM] unsigned char 
 10594 ;; Return value:  Size  Location     Type
 10595 ;;		None               void
 10596 ;; Registers used:
 10597 ;;		wreg, status,2, cstack
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0
 10604 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10605 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10606 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10607 ;;Total ram usage:        2 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    1
 10610 ;; This function calls:
 10611 ;;		i2_Lcd_Port
 10612 ;; This function is called by:
 10613 ;;		i2_Lcd_Clear
 10614 ;;		i2_Lcd_Set_Cursor
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text55
 10619  0027F6                     __ptext55:
 10620                           	opt stack 0
 10621  0027F6                     i2_Lcd_Cmd:
 10622                           	opt stack 21
 10623                           
 10624                           ;incstack = 0
 10625                           ;i2Lcd_Cmd@a stored from wreg
 10626  0027F6  6E03               	movwf	i2Lcd_Cmd@a,c
 10627                           
 10628                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10629  0027F8  9084               	bcf	3972,0,c	;volatile
 10630                           
 10631                           ;lcd.c: 29: Lcd_Port(a);
 10632  0027FA  5003               	movf	i2Lcd_Cmd@a,w,c
 10633  0027FC  EC9D  F013         	call	i2_Lcd_Port
 10634                           
 10635                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10636  002800  8484               	bsf	3972,2,c	;volatile
 10637                           
 10638                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10639  002802  0E06               	movlw	6
 10640  002804  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10641  002806  0E30               	movlw	48
 10642  002808                     i2u579_47:
 10643  002808  2EE8               	decfsz	wreg,f,c
 10644  00280A  D7FE               	goto	i2u579_47
 10645  00280C  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10646  00280E  D7FC               	goto	i2u579_47
 10647  002810  D000               	nop2	
 10648                           
 10649                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10650  002812  9484               	bcf	3972,2,c	;volatile
 10651  002814  0012               	return	
 10652  002816                     __end_ofi2_Lcd_Cmd:
 10653                           	opt stack 0
 10654                           pclatu	equ	0xFFB
 10655                           pclath	equ	0xFFA
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           indf0	equ	0xFEF
 10664                           postinc0	equ	0xFEE
 10665                           fsr0h	equ	0xFEA
 10666                           fsr0l	equ	0xFE9
 10667                           wreg	equ	0xFE8
 10668                           postinc1	equ	0xFE6
 10669                           postdec1	equ	0xFE5
 10670                           fsr1h	equ	0xFE2
 10671                           fsr1l	equ	0xFE1
 10672                           indf2	equ	0xFDF
 10673                           postinc2	equ	0xFDE
 10674                           postdec2	equ	0xFDD
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function i2_Lcd_Port *****************
 10680 ;; Defined at:
 10681 ;;		line 6 in file "lcd.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  a               1    wreg     unsigned char 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  a               1    0[COMRAM] unsigned char 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;		None               void
 10688 ;; Registers used:
 10689 ;;		wreg
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0
 10696 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10698 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10699 ;;Total ram usage:        1 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; This function calls:
 10702 ;;		Nothing
 10703 ;; This function is called by:
 10704 ;;		i2_Lcd_Cmd
 10705 ;;		i2_Lcd_Write_Char
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text56
 10710  00273A                     __ptext56:
 10711                           	opt stack 0
 10712  00273A                     i2_Lcd_Port:
 10713                           	opt stack 21
 10714                           
 10715                           ;incstack = 0
 10716                           ;i2Lcd_Port@a stored from wreg
 10717  00273A  6E01               	movwf	i2Lcd_Port@a,c
 10718                           
 10719                           ;lcd.c: 7: if (a & 1)
 10720  00273C  A001               	btfss	i2Lcd_Port@a,0,c
 10721  00273E  D002               	goto	i2l253
 10722                           
 10723                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10724  002740  8883               	bsf	3971,4,c	;volatile
 10725  002742  D001               	goto	i2l5087
 10726  002744                     i2l253:
 10727                           
 10728                           ;lcd.c: 9: else
 10729                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10730  002744  9883               	bcf	3971,4,c	;volatile
 10731  002746                     i2l5087:
 10732                           
 10733                           ;lcd.c: 12: if (a & 2)
 10734  002746  A201               	btfss	i2Lcd_Port@a,1,c
 10735  002748  D002               	goto	i2l255
 10736                           
 10737                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10738  00274A  8A83               	bsf	3971,5,c	;volatile
 10739  00274C  D001               	goto	i2l5091
 10740  00274E                     i2l255:
 10741                           
 10742                           ;lcd.c: 14: else
 10743                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10744  00274E  9A83               	bcf	3971,5,c	;volatile
 10745  002750                     i2l5091:
 10746                           
 10747                           ;lcd.c: 17: if (a & 4)
 10748  002750  A401               	btfss	i2Lcd_Port@a,2,c
 10749  002752  D002               	goto	i2l257
 10750                           
 10751                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10752  002754  8C83               	bsf	3971,6,c	;volatile
 10753  002756  D001               	goto	i2l5095
 10754  002758                     i2l257:
 10755                           
 10756                           ;lcd.c: 19: else
 10757                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10758  002758  9C83               	bcf	3971,6,c	;volatile
 10759  00275A                     i2l5095:
 10760                           
 10761                           ;lcd.c: 22: if (a & 8)
 10762  00275A  A601               	btfss	i2Lcd_Port@a,3,c
 10763  00275C  D002               	goto	i2l259
 10764                           
 10765                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10766  00275E  8E83               	bsf	3971,7,c	;volatile
 10767  002760  D001               	goto	i2l261
 10768  002762                     i2l259:
 10769                           
 10770                           ;lcd.c: 24: else
 10771                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10772  002762  9E83               	bcf	3971,7,c	;volatile
 10773  002764                     i2l261:
 10774  002764  0012               	return	
 10775  002766                     __end_ofi2_Lcd_Port:
 10776                           	opt stack 0
 10777                           pclatu	equ	0xFFB
 10778                           pclath	equ	0xFFA
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           indf0	equ	0xFEF
 10787                           postinc0	equ	0xFEE
 10788                           fsr0h	equ	0xFEA
 10789                           fsr0l	equ	0xFE9
 10790                           wreg	equ	0xFE8
 10791                           postinc1	equ	0xFE6
 10792                           postdec1	equ	0xFE5
 10793                           fsr1h	equ	0xFE2
 10794                           fsr1l	equ	0xFE1
 10795                           indf2	equ	0xFDF
 10796                           postinc2	equ	0xFDE
 10797                           postdec2	equ	0xFDD
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _ReadUSART *****************
 10803 ;; Defined at:
 10804 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  data            1    0[COMRAM] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      unsigned char 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0
 10819 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10821 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10822 ;;Total ram usage:        1 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_TMRO_USART
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text57
 10832  002852                     __ptext57:
 10833                           	opt stack 0
 10834  002852                     _ReadUSART:
 10835                           	opt stack 23
 10836                           
 10837                           ;incstack = 0
 10838  002852  0EF2               	movlw	242
 10839  002854  163C               	andwf	_USART_Status,f,c
 10840  002856  ACAB               	btfss	4011,6,c	;volatile
 10841  002858  D003               	goto	i2l604
 10842  00285A  903C               	bcf	_USART_Status,0,c
 10843  00285C  B0AB               	btfsc	4011,0,c	;volatile
 10844  00285E  803C               	bsf	_USART_Status,0,c
 10845  002860                     i2l604:
 10846  002860  B4AB               	btfsc	4011,2,c	;volatile
 10847  002862  843C               	bsf	_USART_Status,2,c
 10848  002864  B2AB               	btfsc	4011,1,c	;volatile
 10849  002866  863C               	bsf	_USART_Status,3,c
 10850  002868  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 10851  00286C  5001               	movf	ReadUSART@data,w,c
 10852  00286E  0012               	return	
 10853  002870                     __end_of_ReadUSART:
 10854                           	opt stack 0
 10855                           pclatu	equ	0xFFB
 10856                           pclath	equ	0xFFA
 10857                           tblptru	equ	0xFF8
 10858                           tblptrh	equ	0xFF7
 10859                           tblptrl	equ	0xFF6
 10860                           tablat	equ	0xFF5
 10861                           prodh	equ	0xFF4
 10862                           prodl	equ	0xFF3
 10863                           intcon	equ	0xFF2
 10864                           indf0	equ	0xFEF
 10865                           postinc0	equ	0xFEE
 10866                           fsr0h	equ	0xFEA
 10867                           fsr0l	equ	0xFE9
 10868                           wreg	equ	0xFE8
 10869                           postinc1	equ	0xFE6
 10870                           postdec1	equ	0xFE5
 10871                           fsr1h	equ	0xFE2
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           pclatu	equ	0xFFB
 10880                           pclath	equ	0xFFA
 10881                           tblptru	equ	0xFF8
 10882                           tblptrh	equ	0xFF7
 10883                           tblptrl	equ	0xFF6
 10884                           tablat	equ	0xFF5
 10885                           prodh	equ	0xFF4
 10886                           prodl	equ	0xFF3
 10887                           intcon	equ	0xFF2
 10888                           indf0	equ	0xFEF
 10889                           postinc0	equ	0xFEE
 10890                           fsr0h	equ	0xFEA
 10891                           fsr0l	equ	0xFE9
 10892                           wreg	equ	0xFE8
 10893                           postinc1	equ	0xFE6
 10894                           postdec1	equ	0xFE5
 10895                           fsr1h	equ	0xFE2
 10896                           fsr1l	equ	0xFE1
 10897                           indf2	equ	0xFDF
 10898                           postinc2	equ	0xFDE
 10899                           postdec2	equ	0xFDD
 10900                           fsr2h	equ	0xFDA
 10901                           fsr2l	equ	0xFD9
 10902                           status	equ	0xFD8
 10903                           
 10904                           	psect	rparam
 10905  0000                     pclatu	equ	0xFFB
 10906                           pclath	equ	0xFFA
 10907                           tblptru	equ	0xFF8
 10908                           tblptrh	equ	0xFF7
 10909                           tblptrl	equ	0xFF6
 10910                           tablat	equ	0xFF5
 10911                           prodh	equ	0xFF4
 10912                           prodl	equ	0xFF3
 10913                           intcon	equ	0xFF2
 10914                           indf0	equ	0xFEF
 10915                           postinc0	equ	0xFEE
 10916                           fsr0h	equ	0xFEA
 10917                           fsr0l	equ	0xFE9
 10918                           wreg	equ	0xFE8
 10919                           postinc1	equ	0xFE6
 10920                           postdec1	equ	0xFE5
 10921                           fsr1h	equ	0xFE2
 10922                           fsr1l	equ	0xFE1
 10923                           indf2	equ	0xFDF
 10924                           postinc2	equ	0xFDE
 10925                           postdec2	equ	0xFDD
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8


Data Sizes:
    Strings     189
    Constant    118
    Data        20
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160     90     142
    BANK1           256     22     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_19(CODE[13]), STR_18(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK1[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1310$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[11]), STR_21(CODE[7]), STR_20(CODE[18]), Lcd_Write_Integer@s(BANK1[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_17(CODE[8]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124649
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5136
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       0     0      0  116186
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0      2     0      2
                                              0 BANK1     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1129
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    1177
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     419
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     254
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     580
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     155
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     155
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0     124
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      70       7       43.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     145      20        0.0%
DATA                 0      0     145       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jun 26 16:48:54 2017

                            _i 00C4                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 266A                             l59 227C  
                           l68 1F3A                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l208 2700                            l261 2738  
                          l253 2718                            l229 28D6                            l255 2722  
                          l257 272C                            l273 242C                            l259 2736  
                          l452 0DB6                            l552 2570                            l553 257A  
                          l554 257C                            l590 22EA                            l591 22EC  
                          l904 17F8                            l592 22F6                            l913 17E8  
                          l593 22F8                            l586 22D6                            l499 0592  
                          l595 231A                            l945 1B4E                            l982 10CA  
                          l983 12DC                            l986 1104                            l988 112C  
                          l997 1216                   __CFG_CPB$OFF 000000                            _PR2 000FCB  
                 __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000                            _cad 003D  
                 ___awmod@sign 001E                            prod 000FF3                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l1006 1240  
                         l1022 18F8                           l1031 18E8                           l1040 1EE2  
                         l1024 1868                           l1105 1FDA                           l1025 1890  
                         l1115 2370                           l1046 1434                           l1056 27A4  
                         l1066 157E                           l4201 1AD0                           l4211 1B2C  
                         l4203 1AEE                           l5013 0730                           l5005 0708  
                         l4231 271A                           l4207 1B04                           l5007 0716  
                         l5015 073C                           l4209 1B22                           l4305 126A  
                         l5025 07B6                           l4235 2724                           l4315 12B8  
                         l4403 1C82                           l4331 1334                           l5131 225A  
                         l4325 1300                           l5053 08FA                           l5045 0838  
                         l4239 272E                           l5063 20EE                           l4263 1112  
                         l4407 1C90                           l4431 1E1E                           l4423 1E04  
                         l5047 084C                           l5039 0808                           l5055 090E  
                         l5135 2284                           l4257 10D8                           l4345 1382  
                         l5057 0932                           l5153 1F44                           l5313 1628  
                         l5171 2406                           l5067 2126                           l4195 1AB8  
                         l4291 11C4                           l4443 1E4A                           l4435 1E32  
                         l4427 1E12                           l4419 1DE8                           l4355 13CC  
                         l3643 256C                           l5331 167E                           l4285 1198  
                         l4269 1122                           l4701 17B0                           l4381 1C3A  
                         l4429 1E1A                           l4349 13A0                           l4189 28A6  
                         l5149 1F20                           l5341 16BE                           l5253 1A58  
                         l4199 1AC6                           l4287 11AC                           l4279 1164  
                         l4711 17D8                           l4615 182E                           l4391 1C5C  
                         l4375 1C1A                           l4439 1E3C                           l4359 13EA  
                         l4455 1D78                           l5503 1D1A                           l4297 11F8  
                         l4289 11B8                           l4713 17E4                           l4705 17C0  
                         l4609 1814                           l4561 100A                           l4553 0F26  
                         l4465 1DBA                           l4449 1D3A                           l4299 120C  
                         l4643 18B0                           l4387 1C50                           l4491 22D8  
                         l4483 22CA                           l5291 15BA                           l5339 169A  
                         l4459 1D90                           l4725 1E84                           l4653 18D8  
                         l4389 1C58                           l4581 0B5C                           l5285 159E  
                         l4469 26EE                           l4735 1EE0                           l4807 1FCC  
                         l4823 2362                           l4815 232E                           l4831 2394  
                         l4663 16F0                           l4655 18E4                           l4647 18C0  
                         l4399 1C78                           l4575 0A9A                           l5279 1582  
                         l4729 1EB4                           l4817 233A                           l4593 0CB8  
                         l4585 0B6C                           l4921 0320                           l4913 02B8  
                         l4905 024C                           l5297 15D6                           l4841 24D4  
                         l4771 1508                           l4819 233E                           l4691 178E  
                         l4683 175E                           l5483 1CE0                           l4781 1548  
                         l4749 145E                           l4829 2388                           l4669 171C  
                         l4941 0420                           l4925 0346                           l4909 0272  
                         l4861 0060                           l4853 0030                           l4845 2506  
                         l5477 1CD2                           l4767 14EC                           l4599 0D86  
                         l4785 156E                           l4777 152A                           l4961 049C  
                         l4937 03B8                           l4881 011C                           l4865 0066  
                         l4779 1542                           l4795 1F8C                           l4971 0548  
                         l4955 0472                           l4867 00A2                           l4859 0052  
                         l4797 1F98                           l4799 1F9C                           l4991 05C4  
                         l4983 0596                           l4977 0562                           l4969 053A  
                         l4897 01E4                           l4995 0616                           STR_1 7FB7  
                         STR_2 7F63                           STR_3 7FD9                           STR_4 7FD9  
                         STR_5 7FB4                           STR_6 7F72                           STR_7 7F80  
                         STR_8 7F9C                           STR_9 7F8E                __end_of_BT_Init 1BF6  
                         u4051 1076                           u4061 1096                           _PIE1 000F9D  
                         u4261 12F2                           u3455 25CA                           u4440 1D6E  
                         u4281 1314                           u4290 1320                           u5090 016C  
                         u5075 00F6                           u3485 2590                           u4470 1DB0  
                         u5095 0160                           u4447 1D64                           u5431 1B66  
                         u5360 211E                           u5370 2156                           u4740 18C6  
                         u4477 1DA6                           u4910 148A                           u4830 17C6  
                         u5367 2114                           u4671 180A                           u5295 078E  
                         u4760 16E2                           u5377 214C                           u4915 1480  
                         u4691 1824                           u5707 2210                           u4940 1510  
                         u4780 170E                           u4765 16D8                           u5717 1A10  
                         u5727 1A48                           u4785 1704                           u5737 26F4  
                         u5747 2688                           u4891 144E                           u5757 269A  
                         u5767 27E8                           u5687 21E4                           u5697 21FA  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1C9A  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1323 0098                   _sprintf$2377 0095                __end_of_Lcd_Cmd 27F6  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 25FA                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1C9A                __end_of___ftadd 12DE  
                        STR_10 7FF1                          STR_11 7F53                          STR_12 7FF8  
                        STR_20 7F41                          STR_13 7F51                          STR_21 7FEA  
                        STR_14 7FFA                          STR_22 7FC3                          STR_15 7FFC  
                        STR_16 7F70                          STR_17 7FE2                          STR_18 7FCE  
                        STR_19 7FAA                __end_of___awmod 1E54                __end_of___ftneg 27B2  
              __end_of___lldiv 1FEC                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 2382                __end_of___ftsub 254C                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l261 2764                          i2l253 2744  
                        i2l255 274E                          i2l257 2758                          i2l273 247C  
                        i2l370 1990                          i2l259 2762                          i2l604 2860  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF3                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 242E                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 224A                 WriteUSART@data 0019               __end_of_Lcd_Port 273A  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 247E  
                 __end_of_main 1D30      __end_of_Lcd_Write_Integer 2634    __size_of_Inicializa_Driveby 00BA  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 28BE               __end_of_OpenPWM2 2586  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 270E  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1B50               __end_of___lbtoft 27D6                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 23DE  
                       i2l5091 2750                         i2l5095 275A                         i2l5087 2746  
                       i2l5441 1972                         i2l5445 1986                         i2l5383 2456  
                       _INTCON 000FF2                         i2l5393 2168                         i2l5457 19B0  
                       i2l5397 21A0             __size_of_ReadUSART 001E            _putcBluetoothString 224A  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F41                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1E54  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 2816                         ___wmul 2766  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 2068                 _PWM_DutyCycle2 1FEC                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 2484                         clear_1 2490  
                       clear_2 249C               ___awdiv@quotient 0025                 sprintf@vd_1325 00A0  
         ?_putcBluetoothString 0020                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 26A4          ___ftmul@f3_as_product 0067                   __mediumconst 7ECA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19E6              __end_of_PWM_init1 2852              __end_of_PWM_init2 2834  
             __end_of_putcTxU1 28DC                      ??_sprintf 008F        __size_of_Comando_Tablet 0144  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 24C2  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 28EA                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 20E4         __end_of_PWM_DutyCycle2 2068                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 289A                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2886     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 2634                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 2870              __end_of_SetDCPWM1 25FA  
            __end_of_SetDCPWM2 25C0              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 23DE                     __div_to_l_ 16C4                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 231C                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 2510                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00BA                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 266C  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
                      _CCP1CON 000FBD                        _CCP2CON 000FBA           i2Lcd_Set_Cursor@temp 0008  
  SendBlueToothCommand@command 0023                        ?_fround 006C      __size_of_Lcd_Write_String 007A  
                    ?___ftpack 0019                      ?___lbtoft 0021         __end_of_Lcd_Set_Cursor 242E  
                    ?___lltoft 0021               putSTRINGU1@total 001D       __end_ofi2_Lcd_Set_Cursor 247E  
                      _BT_Init 1B50                        _SBUSART 003A                     ??_Lcd_Init 001C  
                 ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019                     _contadorbt 00C2  
           __end_of_UART1_Init 28CE                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 266C  
                      _Lcd_Cmd 27D6                        _Comando 0033                        _Med_lsb 00BC  
                      _Med_msb 00BE                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1A  
                      __Hparam 0000                     _scale$2376 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1BF6                        ___ftadd 105E                        ___awmod 1DC4  
                    ?_putcTxU1 0001                        ___ftneg 278C                        ___lldiv 1F6A  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 231C  
                      ___ftsub 2510                        ___fttol 1436             __end_ofi2_Lcd_Port 2766  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 247E                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5671 00DA                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1C9A                        __ptext1 21D8  
                      __ptext2 19EE                        __ptext3 1B50                        __ptext4 2870  
                      __ptext5 1D30                        __ptext6 28CE                        __ptext7 24C8  
                      __ptext8 26DC                        __ptext9 1580                        _comando 00C6  
                  ?__div_to_l_ 0019                        _countup 00EC                        _dpowers 7ECB  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19EE  
               _Comando_Tablet 1580                        _sprintf 001C         __end_of_Lcd_Write_Char 26A4  
               __pintcode_body 18FA           end_of_initialization 24C2                    _TramaTablet 0100  
    __size_of_putcBluetoothInt 0086                        int_func 18FA       __end_ofi2_Lcd_Write_Char 26DC  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                      _RCSTAbits 000FAB  
   __end_of_Inicializa_Driveby 1AA8                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0019                     ??_putcTxU1 001A                     _num_med_hi 0043  
               __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F  
                    i2_Lcd_Cmd 27F6                      _PORTAbits 000F80                      _PORTDbits 000F83  
                    _PORTEbits 000F84         __end_of_Comando_Tablet 16C4   __end_of_SendBlueToothCommand 2886  
                    _TRISBbits 000F93                      _TRISCbits 000F94            __size_of_WriteUSART 0012  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 001D              Lcd_Write_String@i 0021  
                    _PWM_init1 2834                      _PWM_init2 2816                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0136                    ___ftmul@exp 0066                      _Lcd_Clear 28DC  
               __end_of___ftge 1EE4                 __end_of___wmul 278C               _Lcd_Write_String 20E4  
                   ?i2_Lcd_Cmd 0001                 __end_of_fround 105E            start_initialization 247E  
                    Pause_ms@i 001C                      Pause_ms@x 0019                ?_Comando_Tablet 0001  
                    _ReadUSART 2852                      _SetDCPWM1 25C0                      _SetDCPWM2 2586  
              SetDCPWM1@DCycle 001D            __end_of__tdiv_to_l_ 18FA                SetDCPWM2@DCycle 001D  
                    _DutyCycle 00BA              __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C  
                   ?_PWM_init1 0001                     ?_PWM_init2 0001                      _OpenUSART 22B4  
             ??_PWM_DutyCycle1 0082               ??_PWM_DutyCycle2 0082                      _Pause_seg 24C8  
              ___llmod@divisor 002A                ___llmod@counter 002E    __end_of_putcBluetoothString 22B4  
            __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A              __size_of_Pause_ms 0032  
                   ?_Lcd_Clear 0001                       ??___ftge 001F     __end_ofi2_Lcd_Write_String 21D8  
                     ??___wmul 002B                    __pdataBANK0 00DA               __CFG_LPT1OSC$OFF 000000  
              Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B                       ??_fround 0030  
               _num_med_medium 0045                     fround@prec 0075              __size_of___ftpack 00A8  
            __size_of___lbtoft 0024              __size_of___lltoft 005C                    __pbssCOMRAM 0030  
                   ?_ReadUSART 0001                       ?_BT_Init 0001                  __pcstackBANK0 0060  
                __pcstackBANK1 015A              ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019  
                   ?_SetDCPWM2 0019            __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005  
             _putcBluetoothInt 1EE4                     ?_OpenUSART 0019                       ?_Lcd_Cmd 0001  
                  sprintf@_val 00AD                    sprintf@flag 00A6               ??_clrBufferUSART 0019  
                   ?_Pause_seg 0001                    sprintf@fval 00B4                    sprintf@prec 00AB  
                    _cleanBfer 003E                   ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D  
         _SendBlueToothCommand 2870                      __pintcode 0008                  __pmediumconst 7ECA  
                     ?___awdiv 001F                       ?___ftadd 0076                       ?___awmod 0019  
                     ?___ftneg 0019                       ?___lldiv 0019                       ?___ftmul 0060  
                     ?___llmod 0026                       ?___ftsub 0082                      __npowers_ 7EF3  
                     ?___fttol 0073              putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002  
            __size_of_putcTxU1 000E                    __tdiv_to_l_ 17FA                      _contador2 0040  
                 ??__div_to_l_ 001F      SendBlueToothCommand@total 0025                   _TamanhoTrama 00C0  
                     ?_sprintf 0088                 __size_of_scale 0478             __end_of_WriteUSART 28AC  
                  ??_PWM_init1 001A                    ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088  
                _ComandoTablet 0034                 ___wmul@product 002B              ?i2_Lcd_Write_Char 0001  
                     _PIE1bits 000F9D                       Lcd_Cmd@a 001B                       _PIR1bits 000F9E  
           __end_of__div_to_l_ 17FA             ??i2_Lcd_Write_Char 0002                       i2u555_40 2198  
                     i2u563_40 198C                       i2u555_47 218E                       i2u556_40 21D0  
        ?_SendBlueToothCommand 0023                       i2u556_47 21C6                       i2u577_47 26C0  
                     i2u578_47 26D2                       i2u579_47 2808                  ??i2_Lcd_Clear 0004  
                  ??_Lcd_Clear 001C               __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F  
                   _ADCON1bits 000FC1                    __stringdata 7F41              ___wmul@multiplier 0027  
                     _CheckSum 0030               ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001  
           _Inicializa_Driveby 19EE                    ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B  
             __size_of_BT_Init 00A6                       _Lcd_Init 21D8                       _Lcd_Port 270E  
                    copy_data0 24B6                       _EntTrama 0035            ?_Inicializa_Driveby 0001  
                _BluetoothDato 0128       __end_of_Lcd_Write_String 215E                    ??_OpenUSART 001B  
           SetDCPWM1@dutycycle 0019                    ??_Pause_seg 001E                OpenUSART@config 001E  
             __size_of_Lcd_Cmd 0020                   _Timer2Config 0047                       _OpenPWM1 28AC  
                     _OpenPWM2 254C                       _Pause_ms 26DC                       __Hrparam 0000  
                     __Lrparam 0000             SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4  
             __size_of___ftadd 0280               __size_of___awmod 0090           ??_Inicializa_Driveby 0027  
             PWM_DutyCycle1@DC 0089               PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026  
             __size_of___lldiv 0082               __size_of___ftmul 0158               __size_of___llmod 0066  
             __size_of___ftsub 003C               __size_of___fttol 014A               ??_Comando_Tablet 0030  
                     ___ftpack 1AA8                       ___lbtoft 27B2                    _fround$2374 0072  
                  _fround$2375 006F                       ___lltoft 2382            __end_ofi2_Lcd_Clear 28F8  
               OpenPWM2@ccp2mx 001B          __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1DC4  
                   sprintf@exp 00B2                 OpenPWM1@period 0019                 OpenPWM2@period 001A  
                     __ptext10 224A                       __ptext11 1EE4                       __ptext20 1FEC  
                     __ptext12 289A                       __ptext21 2586                       __ptext13 28BE  
                     __ptext30 12DE                       __ptext22 2068                       __ptext14 22B4  
                     __ptext31 1DC4                       __ptext23 27B2                       __ptext15 2634  
                     __ptext40 105E                       __ptext32 1BF6                       __ptext24 25C0  
                     __ptext16 2816                       __ptext41 1AA8                       __ptext33 17FA  
                     __ptext25 25FA                       __ptext17 254C                       __ptext42 278C  
                     __ptext34 16C4                       __ptext26 001C                       __ptext18 2834  
                     __ptext51 215E                       __ptext43 1E54                       __ptext35 2382  
                     __ptext27 0940                       __ptext19 28AC                       __ptext52 26A4  
                     __ptext44 20E4                       __ptext36 231C                       __ptext28 0DB8  
                     __ptext53 242E                       __ptext45 266C                       __ptext37 1F6A  
                     __ptext29 2766                       __ptext54 28EA                       __ptext46 23DE  
                     __ptext38 1436                       __ptext55 27F6                       __ptext47 28DC  
                     __ptext39 2510                       __ptext56 273A                       __ptext48 27D6  
                     __ptext57 2852                       __ptext49 270E                       __powers_ 7F1A  
              PWM_init1@period 001A                PWM_init2@period 001C                       _contador 003F  
             __size_of_sprintf 0924                  __size_of_main 0096         ??_SendBlueToothCommand 0027  
                     _putcTxU1 28CE                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 1F6A          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 215E  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 28EA                     _UART1_Init 28BE  
                  _putSTRINGU1 1D30           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
 __size_of_putcBluetoothString 006A                   ?__tdiv_to_l_ 0019                    _num_med_low 0044  
                     sprintf@c 00B7                       sprintf@f 008A               ___lldiv@quotient 0021  
           Lcd_Write_Integer@a 00B8             Lcd_Write_Integer@s 015A                     i2_Lcd_Port 273A  
                 _USART_Status 003C                     _TMRO_USART 0008  
