

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Sep 06 16:17:22 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK0
    79  002944                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for BT_Init@F5669
    83  002944  41                 	db	65
    84  002945  54                 	db	84
    85  002946  2B                 	db	43
    86  002947  4E                 	db	78
    87  002948  41                 	db	65
    88  002949  4D                 	db	77
    89  00294A  45                 	db	69
    90  00294B  3D                 	db	61
    91  00294C  72                 	db	114
    92  00294D  6F                 	db	111
    93  00294E  62                 	db	98
    94  00294F  6F                 	db	111
    95  002950  74                 	db	116
    96  002951  0D                 	db	13
    97  002952  0A                 	db	10
    98  002953  00                 	db	0
    99  002954  00                 	db	0
   100  002955  00                 	db	0
   101                           
   102                           ;initializer for _countup
   103  002956  0001               	dw	1
   104                           
   105                           	psect	mediumconst
   106  007ECC                     __pmediumconst:
   107                           	opt stack 0
   108  007ECC  00                 	db	0
   109  007ECD                     _dpowers:
   110                           	opt stack 0
   111  007ECD  0001               	dw	1
   112  007ECF  0000               	dw	0
   113  007ED1  000A               	dw	10
   114  007ED3  0000               	dw	0
   115  007ED5  0064               	dw	100
   116  007ED7  0000               	dw	0
   117  007ED9  03E8               	dw	1000
   118  007EDB  0000               	dw	0
   119  007EDD  2710               	dw	10000
   120  007EDF  0000               	dw	0
   121  007EE1  86A0               	dw	34464
   122  007EE3  0001               	dw	1
   123  007EE5  4240               	dw	16960
   124  007EE7  000F               	dw	15
   125  007EE9  9680               	dw	38528
   126  007EEB  0098               	dw	152
   127  007EED  E100               	dw	57600
   128  007EEF  05F5               	dw	1525
   129  007EF1  CA00               	dw	51712
   130  007EF3  3B9A               	dw	15258
   131  007EF5                     __end_of_dpowers:
   132                           	opt stack 0
   133  007EF5                     __npowers_:
   134                           	opt stack 0
   135  007EF5  00                 	db	0
   136  007EF6  80                 	db	128
   137  007EF7  3F                 	db	63
   138  007EF8  CD                 	db	205
   139  007EF9  CC                 	db	204
   140  007EFA  3D                 	db	61
   141  007EFB  D7                 	db	215
   142  007EFC  23                 	db	35
   143  007EFD  3C                 	db	60
   144  007EFE  12                 	db	18
   145  007EFF  83                 	db	131
   146  007F00  3A                 	db	58
   147  007F01  B7                 	db	183
   148  007F02  D1                 	db	209
   149  007F03  38                 	db	56
   150  007F04  C6                 	db	198
   151  007F05  27                 	db	39
   152  007F06  37                 	db	55
   153  007F07  38                 	db	56
   154  007F08  86                 	db	134
   155  007F09  35                 	db	53
   156  007F0A  C0                 	db	192
   157  007F0B  D6                 	db	214
   158  007F0C  33                 	db	51
   159  007F0D  CC                 	db	204
   160  007F0E  2B                 	db	43
   161  007F0F  32                 	db	50
   162  007F10  70                 	db	112
   163  007F11  89                 	db	137
   164  007F12  30                 	db	48
   165  007F13  E7                 	db	231
   166  007F14  DB                 	db	219
   167  007F15  2E                 	db	46
   168  007F16  E5                 	db	229
   169  007F17  3C                 	db	60
   170  007F18  1E                 	db	30
   171  007F19  42                 	db	66
   172  007F1A  A2                 	db	162
   173  007F1B  0D                 	db	13
   174  007F1C                     __end_of__npowers_:
   175                           	opt stack 0
   176  007F1C                     __powers_:
   177                           	opt stack 0
   178  007F1C  00                 	db	0
   179  007F1D  80                 	db	128
   180  007F1E  3F                 	db	63
   181  007F1F  00                 	db	0
   182  007F20  20                 	db	32
   183  007F21  41                 	db	65
   184  007F22  00                 	db	0
   185  007F23  C8                 	db	200
   186  007F24  42                 	db	66
   187  007F25  00                 	db	0
   188  007F26  7A                 	db	122
   189  007F27  44                 	db	68
   190  007F28  40                 	db	64
   191  007F29  1C                 	db	28
   192  007F2A  46                 	db	70
   193  007F2B  50                 	db	80
   194  007F2C  C3                 	db	195
   195  007F2D  47                 	db	71
   196  007F2E  24                 	db	36
   197  007F2F  74                 	db	116
   198  007F30  49                 	db	73
   199  007F31  97                 	db	151
   200  007F32  18                 	db	24
   201  007F33  4B                 	db	75
   202  007F34  BC                 	db	188
   203  007F35  BE                 	db	190
   204  007F36  4C                 	db	76
   205  007F37  6B                 	db	107
   206  007F38  6E                 	db	110
   207  007F39  4E                 	db	78
   208  007F3A  03                 	db	3
   209  007F3B  15                 	db	21
   210  007F3C  50                 	db	80
   211  007F3D  79                 	db	121
   212  007F3E  AD                 	db	173
   213  007F3F  60                 	db	96
   214  007F40  F3                 	db	243
   215  007F41  49                 	db	73
   216  007F42  71                 	db	113
   217  007F43                     __end_of__powers_:
   218                           	opt stack 0
   219  0000                     _ADCON1bits	set	4033
   220  0000                     _CCP1CON	set	4029
   221  0000                     _CCP2CON	set	4026
   222  0000                     _CCPR1L	set	4030
   223  0000                     _CCPR2L	set	4027
   224  0000                     _INTCON	set	4082
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _PIE1	set	3997
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTAbits	set	3968
   231  0000                     _PORTB	set	3969
   232  0000                     _PORTBbits	set	3969
   233  0000                     _PORTDbits	set	3971
   234  0000                     _PORTE	set	3972
   235  0000                     _PORTEbits	set	3972
   236  0000                     _PR2	set	4043
   237  0000                     _RCREG	set	4014
   238  0000                     _RCSTA	set	4011
   239  0000                     _RCSTAbits	set	4011
   240  0000                     _SPBRG	set	4015
   241  0000                     _SPBRGH	set	4016
   242  0000                     _T2CON	set	4042
   243  0000                     _T2CONbits	set	4042
   244  0000                     _TMR2	set	4044
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISBbits	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISCbits	set	3988
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISE	set	3990
   252  0000                     _TXREG	set	4013
   253  0000                     _TXSTA	set	4012
   254  0000                     _TXSTAbits	set	4012
   255  007F43                     __stringdata:
   256                           	opt stack 0
   257  007F43                     STR_19:
   258  007F43  49                 	db	73	;'I'
   259  007F44  6E                 	db	110	;'n'
   260  007F45  74                 	db	116	;'t'
   261  007F46  65                 	db	101	;'e'
   262  007F47  72                 	db	114	;'r'
   263  007F48  72                 	db	114	;'r'
   264  007F49  75                 	db	117	;'u'
   265  007F4A  70                 	db	112	;'p'
   266  007F4B  74                 	db	116	;'t'
   267  007F4C  69                 	db	105	;'i'
   268  007F4D  6F                 	db	111	;'o'
   269  007F4E  6E                 	db	110	;'n'
   270  007F4F  20                 	db	32
   271  007F50  54                 	db	84	;'T'
   272  007F51  4D                 	db	77	;'M'
   273  007F52  52                 	db	82	;'R'
   274  007F53  32                 	db	50	;'2'
   275  007F54  00                 	db	0
   276  007F55                     STR_11:
   277  007F55  42                 	db	66	;'B'
   278  007F56  54                 	db	84	;'T'
   279  007F57  20                 	db	32
   280  007F58  49                 	db	73	;'I'
   281  007F59  4E                 	db	78	;'N'
   282  007F5A  49                 	db	73	;'I'
   283  007F5B  43                 	db	67	;'C'
   284  007F5C  49                 	db	73	;'I'
   285  007F5D  41                 	db	65	;'A'
   286  007F5E  4C                 	db	76	;'L'
   287  007F5F  49                 	db	73	;'I'
   288  007F60  5A                 	db	90	;'Z'
   289  007F61  41                 	db	65	;'A'
   290  007F62  44                 	db	68	;'D'
   291  007F63  4F                 	db	79	;'O'
   292  007F64  00                 	db	0
   293  007F65                     STR_2:
   294  007F65  41                 	db	65	;'A'
   295  007F66  54                 	db	84	;'T'
   296  007F67  2B                 	db	43
   297  007F68  50                 	db	80	;'P'
   298  007F69  53                 	db	83	;'S'
   299  007F6A  57                 	db	87	;'W'
   300  007F6B  44                 	db	68	;'D'
   301  007F6C  3D                 	db	61	;'='
   302  007F6D  30                 	db	48	;'0'
   303  007F6E  30                 	db	48	;'0'
   304  007F6F  30                 	db	48	;'0'
   305  007F70  30                 	db	48	;'0'
   306  007F71  0D                 	db	13
   307  007F72  0A                 	db	10
   308  007F73  00                 	db	0
   309  007F74  0A                 	db	10
   310  007F75  2B                 	db	43
   311  007F76  42                 	db	66	;'B'
   312  007F77  54                 	db	84	;'T'
   313  007F78  53                 	db	83	;'S'
   314  007F79  54                 	db	84	;'T'
   315  007F7A  41                 	db	65	;'A'
   316  007F7B  54                 	db	84	;'T'
   317  007F7C  45                 	db	69	;'E'
   318  007F7D  3A                 	db	58	;':'
   319  007F7E  31                 	db	49	;'1'
   320  007F7F  0D                 	db	13
   321  007F80  0A                 	db	10
   322  007F81  00                 	db	0
   323  007F82  0A                 	db	10
   324  007F83  2B                 	db	43
   325  007F84  42                 	db	66	;'B'
   326  007F85  54                 	db	84	;'T'
   327  007F86  53                 	db	83	;'S'
   328  007F87  54                 	db	84	;'T'
   329  007F88  41                 	db	65	;'A'
   330  007F89  54                 	db	84	;'T'
   331  007F8A  45                 	db	69	;'E'
   332  007F8B  3A                 	db	58	;':'
   333  007F8C  33                 	db	51	;'3'
   334  007F8D  0D                 	db	13
   335  007F8E  0A                 	db	10
   336  007F8F  00                 	db	0
   337  007F90  0A                 	db	10
   338  007F91  2B                 	db	43
   339  007F92  42                 	db	66	;'B'
   340  007F93  54                 	db	84	;'T'
   341  007F94  53                 	db	83	;'S'
   342  007F95  54                 	db	84	;'T'
   343  007F96  41                 	db	65	;'A'
   344  007F97  54                 	db	84	;'T'
   345  007F98  45                 	db	69	;'E'
   346  007F99  3A                 	db	58	;':'
   347  007F9A  34                 	db	52	;'4'
   348  007F9B  0D                 	db	13
   349  007F9C  0A                 	db	10
   350  007F9D  00                 	db	0
   351  007F9E  0A                 	db	10
   352  007F9F  43                 	db	67	;'C'
   353  007FA0  4F                 	db	79	;'O'
   354  007FA1  4E                 	db	78	;'N'
   355  007FA2  4E                 	db	78	;'N'
   356  007FA3  45                 	db	69	;'E'
   357  007FA4  43                 	db	67	;'C'
   358  007FA5  54                 	db	84	;'T'
   359  007FA6  3A                 	db	58	;':'
   360  007FA7  4F                 	db	79	;'O'
   361  007FA8  4B                 	db	75	;'K'
   362  007FA9  0D                 	db	13
   363  007FAA  0A                 	db	10
   364  007FAB  00                 	db	0
   365  007FAC                     STR_18:
   366  007FAC  49                 	db	73	;'I'
   367  007FAD  6E                 	db	110	;'n'
   368  007FAE  74                 	db	116	;'t'
   369  007FAF  65                 	db	101	;'e'
   370  007FB0  67                 	db	103	;'g'
   371  007FB1  65                 	db	101	;'e'
   372  007FB2  72                 	db	114	;'r'
   373  007FB3  20                 	db	32
   374  007FB4  3D                 	db	61	;'='
   375  007FB5  20                 	db	32
   376  007FB6  25                 	db	37
   377  007FB7  64                 	db	100	;'d'
   378  007FB8  00                 	db	0
   379  007FB9                     STR_1:
   380  007FB9  41                 	db	65	;'A'
   381  007FBA  54                 	db	84	;'T'
   382  007FBB  2B                 	db	43
   383  007FBC  52                 	db	82	;'R'
   384  007FBD  4F                 	db	79	;'O'
   385  007FBE  4C                 	db	76	;'L'
   386  007FBF  45                 	db	69	;'E'
   387  007FC0  3D                 	db	61	;'='
   388  007FC1  30                 	db	48	;'0'
   389  007FC2  0D                 	db	13
   390  007FC3  0A                 	db	10
   391  007FC4  00                 	db	0
   392  007FC5                     STR_21:
   393  007FC5  43                 	db	67	;'C'
   394  007FC6  4D                 	db	77	;'M'
   395  007FC7  44                 	db	68	;'D'
   396  007FC8  20                 	db	32
   397  007FC9  54                 	db	84	;'T'
   398  007FCA  41                 	db	65	;'A'
   399  007FCB  42                 	db	66	;'B'
   400  007FCC  4C                 	db	76	;'L'
   401  007FCD  45                 	db	69	;'E'
   402  007FCE  54                 	db	84	;'T'
   403  007FCF  00                 	db	0
   404  007FD0  46                 	db	70	;'F'
   405  007FD1  6C                 	db	108	;'l'
   406  007FD2  6F                 	db	111	;'o'
   407  007FD3  61                 	db	97	;'a'
   408  007FD4  74                 	db	116	;'t'
   409  007FD5  20                 	db	32
   410  007FD6  3D                 	db	61	;'='
   411  007FD7  20                 	db	32
   412  007FD8  25                 	db	37
   413  007FD9  66                 	db	102	;'f'
   414  007FDA  00                 	db	0
   415  007FDB                     STR_3:
   416  007FDB  41                 	db	65	;'A'
   417  007FDC  54                 	db	84	;'T'
   418  007FDD  2B                 	db	43
   419  007FDE  49                 	db	73	;'I'
   420  007FDF  4E                 	db	78	;'N'
   421  007FE0  51                 	db	81	;'Q'
   422  007FE1  0D                 	db	13
   423  007FE2  0A                 	db	10
   424  007FE3  00                 	db	0
   425  007FE4                     STR_16:
   426  007FE4  44                 	db	68	;'D'
   427  007FE5  65                 	db	101	;'e'
   428  007FE6  66                 	db	102	;'f'
   429  007FE7  61                 	db	97	;'a'
   430  007FE8  75                 	db	117	;'u'
   431  007FE9  6C                 	db	108	;'l'
   432  007FEA  74                 	db	116	;'t'
   433  007FEB  00                 	db	0
   434  007FEC                     STR_20:
   435  007FEC  49                 	db	73	;'I'
   436  007FED  6E                 	db	110	;'n'
   437  007FEE  69                 	db	105	;'i'
   438  007FEF  63                 	db	99	;'c'
   439  007FF0  69                 	db	105	;'i'
   440  007FF1  6F                 	db	111	;'o'
   441  007FF2  00                 	db	0
   442  007FF3                     STR_10:
   443  007FF3  49                 	db	73	;'I'
   444  007FF4  4E                 	db	78	;'N'
   445  007FF5  49                 	db	73	;'I'
   446  007FF6  43                 	db	67	;'C'
   447  007FF7  49                 	db	73	;'I'
   448  007FF8  4F                 	db	79	;'O'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_12:
   451  007FFA  31                 	db	49	;'1'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_14:
   454  007FFC  33                 	db	51	;'3'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  00253C                     __pcinit:
   464                           	opt stack 0
   465  00253C                     start_initialization:
   466                           	opt stack 0
   467  00253C                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  00253C  EE01  F000         	lfsr	0,__pbssBANK1
   472  002540  0E5A               	movlw	90
   473  002542                     clear_0:
   474  002542  6AEE               	clrf	postinc0,c
   475  002544  06E8               	decf	wreg,f,c
   476  002546  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (30 bytes)
   479  002548  EE00  F0CE         	lfsr	0,__pbssBANK0
   480  00254C  0E1E               	movlw	30
   481  00254E                     clear_1:
   482  00254E  6AEE               	clrf	postinc0,c
   483  002550  06E8               	decf	wreg,f,c
   484  002552  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  002554  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  002558  0E18               	movlw	24
   489  00255A                     clear_2:
   490  00255A  6AEE               	clrf	postinc0,c
   491  00255C  06E8               	decf	wreg,f,c
   492  00255E  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  002560  0E44               	movlw	low __pidataBANK0
   497  002562  6EF6               	movwf	tblptrl,c
   498  002564  0E29               	movlw	high __pidataBANK0
   499  002566  6EF7               	movwf	tblptrh,c
   500  002568  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  00256A  6EF8               	movwf	tblptru,c
   502  00256C  EE00  F0EC         	lfsr	0,__pdataBANK0
   503  002570  EE10 F014          	lfsr	1,20
   504  002574                     copy_data0:
   505  002574  0009               	tblrd		*+
   506  002576  CFF5 FFEE          	movff	tablat,postinc0
   507  00257A  50E5               	movf	postdec1,w,c
   508  00257C  50E1               	movf	fsr1l,w,c
   509  00257E  E1FA               	bnz	copy_data0
   510  002580                     end_of_initialization:
   511                           	opt stack 0
   512  002580                     __end_of__initialization:
   513                           	opt stack 0
   514  002580  0100               	movlb	0
   515  002582  EFAB  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000CE                     __pbssBANK0:
   611                           	opt stack 0
   612  0000CE                     _DutyCycle:
   613                           	opt stack 0
   614  0000CE                     	ds	2
   615  0000D0                     _Med_lsb:
   616                           	opt stack 0
   617  0000D0                     	ds	2
   618  0000D2                     _Med_msb:
   619                           	opt stack 0
   620  0000D2                     	ds	2
   621  0000D4                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000D4                     	ds	2
   624  0000D6                     _i:
   625                           	opt stack 0
   626  0000D6                     	ds	2
   627  0000D8                     _comando:
   628                           	opt stack 0
   629  0000D8                     	ds	20
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK0
   640  0000EC                     __pdataBANK0:
   641                           	opt stack 0
   642  0000EC                     BT_Init@F5669:
   643                           	opt stack 0
   644  0000EC                     	ds	18
   645  0000FE                     _countup:
   646                           	opt stack 0
   647  0000FE                     	ds	2
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK1
   658  000100                     __pbssBANK1:
   659                           	opt stack 0
   660  000100                     _TramaTablet:
   661                           	opt stack 0
   662  000100                     	ds	20
   663  000114                     _array:
   664                           	opt stack 0
   665  000114                     	ds	20
   666  000128                     _BluetoothDato:
   667                           	opt stack 0
   668  000128                     	ds	50
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  00015A                     __pcstackBANK1:
   680                           	opt stack 0
   681  00015A                     putcBluetoothInt@s:
   682                           	opt stack 0
   683                           
   684                           ; 20 bytes @ 0x0
   685  00015A                     	ds	20
   686  00016E                     putcBluetoothInt@i:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x14
   690  00016E                     	ds	2
   691  000170                     Comando_Tablet@sensed:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695  000170                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2449:
   750                           	opt stack 0
   751  00006F                     _scale$2450:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2448:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2451:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1426:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1428:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934  0000BA                     Lcd_Write_Integer@s:
   935                           	opt stack 0
   936                           
   937                           ; 20 bytes @ 0x5A
   938  0000BA                     	ds	20
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ReadUSART@data:
   952                           	opt stack 0
   953  000001                     i2Lcd_Port@a:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x0
   957  000001                     	ds	1
   958  000002                     ??i2_Lcd_Cmd:
   959  000002                     i2Lcd_Write_Char@temp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1
   963  000002                     	ds	1
   964  000003                     i2Lcd_Cmd@a:
   965                           	opt stack 0
   966  000003                     i2Lcd_Write_Char@y:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     i2Lcd_Set_Cursor@b:
   972                           	opt stack 0
   973  000004                     i2Lcd_Write_Char@a:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3
   977  000004                     	ds	1
   978  000005                     i2Lcd_Set_Cursor@a:
   979                           	opt stack 0
   980  000005                     i2Lcd_Write_String@a:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x4
   984  000005                     	ds	1
   985  000006                     i2Lcd_Set_Cursor@z:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x5
   989  000006                     	ds	1
   990  000007                     ??i2_Lcd_Write_String:
   991  000007                     i2Lcd_Set_Cursor@y:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x6
   995  000007                     	ds	1
   996  000008                     i2Lcd_Set_Cursor@temp:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x7
  1000  000008                     	ds	1
  1001  000009                     i2Lcd_Write_String@i:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  000009                     	ds	2
  1006  00000B                     ??_TMRO_USART:
  1007                           
  1008                           ; 0 bytes @ 0xA
  1009  00000B                     	ds	14
  1010  000019                     ??_OpenPWM2:
  1011  000019                     ?_getCNY70Value:
  1012                           	opt stack 0
  1013  000019                     ?___awmod:
  1014                           	opt stack 0
  1015  000019                     ?___ftpack:
  1016                           	opt stack 0
  1017  000019                     ?___ftneg:
  1018                           	opt stack 0
  1019  000019                     ?__tdiv_to_l_:
  1020                           	opt stack 0
  1021  000019                     ?__div_to_l_:
  1022                           	opt stack 0
  1023  000019                     ?___lldiv:
  1024                           	opt stack 0
  1025  000019                     Lcd_Port@a:
  1026                           	opt stack 0
  1027  000019                     OpenPWM1@period:
  1028                           	opt stack 0
  1029  000019                     WriteUSART@data:
  1030                           	opt stack 0
  1031  000019                     clrBufferUSART@i:
  1032                           	opt stack 0
  1033  000019                     Pause_ms@x:
  1034                           	opt stack 0
  1035  000019                     SetDCPWM1@dutycycle:
  1036                           	opt stack 0
  1037  000019                     SetDCPWM2@dutycycle:
  1038                           	opt stack 0
  1039  000019                     OpenUSART@spbrg:
  1040                           	opt stack 0
  1041  000019                     ___awmod@dividend:
  1042                           	opt stack 0
  1043  000019                     __div_to_l_@f1:
  1044                           	opt stack 0
  1045  000019                     ___ftpack@arg:
  1046                           	opt stack 0
  1047  000019                     __tdiv_to_l_@f1:
  1048                           	opt stack 0
  1049  000019                     ___ftge@ff1:
  1050                           	opt stack 0
  1051  000019                     ___ftneg@f1:
  1052                           	opt stack 0
  1053  000019                     ___lldiv@dividend:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x18
  1057  000019                     	ds	1
  1058  00001A                     ??_Lcd_Cmd:
  1059  00001A                     putcTxU1@character:
  1060                           	opt stack 0
  1061  00001A                     Lcd_Write_Char@temp:
  1062                           	opt stack 0
  1063  00001A                     PWM_init1@period:
  1064                           	opt stack 0
  1065  00001A                     OpenPWM2@period:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x19
  1069  00001A                     	ds	1
  1070  00001B                     ??_OpenUSART:
  1071  00001B                     ??_SetDCPWM1:
  1072  00001B                     ??_SetDCPWM2:
  1073  00001B                     ??_Pause_ms:
  1074  00001B                     Lcd_Cmd@a:
  1075                           	opt stack 0
  1076  00001B                     Lcd_Write_Char@y:
  1077                           	opt stack 0
  1078  00001B                     OpenPWM2@ccp2mx:
  1079                           	opt stack 0
  1080  00001B                     putSTRINGU1@dato:
  1081                           	opt stack 0
  1082  00001B                     ___awmod@divisor:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1A
  1086  00001B                     	ds	1
  1087  00001C                     ??_Lcd_Init:
  1088  00001C                     Lcd_Set_Cursor@b:
  1089                           	opt stack 0
  1090  00001C                     Lcd_Write_Char@a:
  1091                           	opt stack 0
  1092  00001C                     PWM_init2@period:
  1093                           	opt stack 0
  1094  00001C                     ___ftpack@exp:
  1095                           	opt stack 0
  1096  00001C                     Pause_ms@i:
  1097                           	opt stack 0
  1098  00001C                     __div_to_l_@f2:
  1099                           	opt stack 0
  1100  00001C                     __tdiv_to_l_@f2:
  1101                           	opt stack 0
  1102  00001C                     ___ftge@ff2:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x1B
  1106  00001C                     	ds	1
  1107  00001D                     Lcd_Set_Cursor@a:
  1108                           	opt stack 0
  1109  00001D                     ___awmod@counter:
  1110                           	opt stack 0
  1111  00001D                     ___ftpack@sign:
  1112                           	opt stack 0
  1113  00001D                     putSTRINGU1@total:
  1114                           	opt stack 0
  1115  00001D                     Lcd_Write_String@a:
  1116                           	opt stack 0
  1117  00001D                     SetDCPWM1@DCycle:
  1118                           	opt stack 0
  1119  00001D                     SetDCPWM2@DCycle:
  1120                           	opt stack 0
  1121  00001D                     ___lldiv@divisor:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1C
  1125  00001D                     	ds	1
  1126  00001E                     ??___ftpack:
  1127  00001E                     Pause_seg@x:
  1128                           	opt stack 0
  1129  00001E                     Lcd_Set_Cursor@z:
  1130                           	opt stack 0
  1131  00001E                     OpenUSART@config:
  1132                           	opt stack 0
  1133  00001E                     ___awmod@sign:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x1D
  1137  00001E                     	ds	1
  1138  00001F                     ??_putSTRINGU1:
  1139  00001F                     ??_Lcd_Write_String:
  1140  00001F                     ??__tdiv_to_l_:
  1141  00001F                     ??__div_to_l_:
  1142  00001F                     ??___ftge:
  1143  00001F                     ?___awdiv:
  1144                           	opt stack 0
  1145  00001F                     Pause_seg@i:
  1146                           	opt stack 0
  1147  00001F                     UART1_Init@bdr:
  1148                           	opt stack 0
  1149  00001F                     Lcd_Set_Cursor@y:
  1150                           	opt stack 0
  1151  00001F                     ___awdiv@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1E
  1155  00001F                     	ds	1
  1156  000020                     Lcd_Set_Cursor@temp:
  1157                           	opt stack 0
  1158  000020                     putcBluetoothString@a:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1F
  1162  000020                     	ds	1
  1163  000021                     ?___lbtoft:
  1164                           	opt stack 0
  1165  000021                     ?___lltoft:
  1166                           	opt stack 0
  1167  000021                     putSTRINGU1@last:
  1168                           	opt stack 0
  1169  000021                     Lcd_Write_String@i:
  1170                           	opt stack 0
  1171  000021                     ___awdiv@divisor:
  1172                           	opt stack 0
  1173  000021                     ___lldiv@quotient:
  1174                           	opt stack 0
  1175  000021                     ___lltoft@c:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x20
  1179  000021                     	ds	1
  1180  000022                     ??_putcBluetoothString:
  1181  000022                     putSTRINGU1@cont:
  1182                           	opt stack 0
  1183  000022                     __tdiv_to_l_@quot:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x21
  1187  000022                     	ds	1
  1188  000023                     ___awdiv@counter:
  1189                           	opt stack 0
  1190  000023                     SendBlueToothCommand@command:
  1191                           	opt stack 0
  1192  000023                     __div_to_l_@quot:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x22
  1196  000023                     	ds	1
  1197  000024                     ___awdiv@sign:
  1198                           	opt stack 0
  1199  000024                     ___lbtoft@c:
  1200                           	opt stack 0
  1201  000024                     putcBluetoothString@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x23
  1205  000024                     	ds	1
  1206  000025                     ??___lltoft:
  1207  000025                     ___lldiv@counter:
  1208                           	opt stack 0
  1209  000025                     SendBlueToothCommand@total:
  1210                           	opt stack 0
  1211  000025                     ___awdiv@quotient:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x24
  1215  000025                     	ds	1
  1216  000026                     ?___llmod:
  1217                           	opt stack 0
  1218  000026                     __tdiv_to_l_@cntr:
  1219                           	opt stack 0
  1220  000026                     ___llmod@dividend:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x25
  1224  000026                     	ds	1
  1225  000027                     ??_Inicializa_Driveby:
  1226  000027                     ?___wmul:
  1227                           	opt stack 0
  1228  000027                     __div_to_l_@cntr:
  1229                           	opt stack 0
  1230  000027                     __tdiv_to_l_@exp1:
  1231                           	opt stack 0
  1232  000027                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x26
  1236  000027                     	ds	1
  1237  000028                     __div_to_l_@exp1:
  1238                           	opt stack 0
  1239  000028                     Inicializa_Driveby@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x27
  1243  000028                     	ds	1
  1244  000029                     ___lltoft@exp:
  1245                           	opt stack 0
  1246  000029                     ___wmul@multiplicand:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x28
  1250  000029                     	ds	1
  1251  00002A                     ___llmod@divisor:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x29
  1255  00002A                     	ds	1
  1256  00002B                     ___wmul@product:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2A
  1260  00002B                     	ds	2
  1261  00002D                     ??___ftmul:
  1262                           
  1263                           ; 0 bytes @ 0x2C
  1264  00002D                     	ds	1
  1265  00002E                     ___llmod@counter:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x2D
  1269  00002E                     	ds	2
  1270  000030                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 0 bytes @ 0x2F
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 122 in file "robot.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2  370[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1299 ;;      Params:         0       0       0       0       0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   10
  1305 ;; This function calls:
  1306 ;;		_Comando_Tablet
  1307 ;;		_Inicializa_Driveby
  1308 ;;		_Lcd_Clear
  1309 ;;		_Lcd_Init
  1310 ;;		_Lcd_Set_Cursor
  1311 ;;		_Lcd_Write_String
  1312 ;;		_UART1_Init
  1313 ;;		_clrBufferUSART
  1314 ;; This function is called by:
  1315 ;;		Startup code after reset
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text0
  1320  001D56                     __ptext0:
  1321                           	opt stack 0
  1322  001D56                     _main:
  1323                           	opt stack 21
  1324                           
  1325                           ;robot.c: 124: INTCON =0X00;
  1326                           
  1327                           ;incstack = 0
  1328  001D56  0E00               	movlw	0
  1329  001D58  6EF2               	movwf	intcon,c	;volatile
  1330                           
  1331                           ;robot.c: 125: TRISD = 0x00;
  1332  001D5A  0E00               	movlw	0
  1333  001D5C  6E95               	movwf	3989,c	;volatile
  1334                           
  1335                           ;robot.c: 126: TRISE = 0x00;
  1336  001D5E  0E00               	movlw	0
  1337  001D60  6E96               	movwf	3990,c	;volatile
  1338                           
  1339                           ;robot.c: 127: PORTEbits.RE1=0;
  1340  001D62  9284               	bcf	3972,1,c	;volatile
  1341                           
  1342                           ;robot.c: 128: ADCON1bits.PCFG=0b1111;
  1343  001D64  80C1               	bsf	4033,0,c	;volatile
  1344  001D66  82C1               	bsf	4033,1,c	;volatile
  1345  001D68  84C1               	bsf	4033,2,c	;volatile
  1346  001D6A  86C1               	bsf	4033,3,c	;volatile
  1347                           
  1348                           ;robot.c: 129: Lcd_Init();
  1349  001D6C  EC4B  F011         	call	_Lcd_Init	;wreg free
  1350                           
  1351                           ;robot.c: 130: Lcd_Clear();
  1352  001D70  ECCD  F014         	call	_Lcd_Clear	;wreg free
  1353                           
  1354                           ;robot.c: 131: Lcd_Set_Cursor(1,1);
  1355  001D74  0E01               	movlw	1
  1356  001D76  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1357  001D78  0E01               	movlw	1
  1358  001D7A  EC4E  F012         	call	_Lcd_Set_Cursor
  1359                           
  1360                           ;robot.c: 132: Lcd_Write_String("Inicio");
  1361  001D7E  0E7F               	movlw	high STR_20
  1362  001D80  6E1E               	movwf	Lcd_Write_String@a+1,c
  1363  001D82  0EEC               	movlw	low STR_20
  1364  001D84  6E1D               	movwf	Lcd_Write_String@a,c
  1365  001D86  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  1366                           
  1367                           ;robot.c: 133: Inicializa_Driveby();
  1368  001D8A  ECF4  F00C         	call	_Inicializa_Driveby	;wreg free
  1369                           
  1370                           ;robot.c: 134: PORTAbits.RA2 = 1;
  1371  001D8E  8480               	bsf	3968,2,c	;volatile
  1372  001D90                     l5861:
  1373                           
  1374                           ;robot.c: 138: {
  1375                           ;robot.c: 141: if (cleanBfer == 1) {
  1376  001D90  043E               	decf	_cleanBfer,w,c
  1377  001D92  A4D8               	btfss	status,2,c
  1378  001D94  D004               	goto	l5867
  1379                           
  1380                           ;robot.c: 142: clrBufferUSART();
  1381  001D96  EC79  F013         	call	_clrBufferUSART	;wreg free
  1382                           
  1383                           ;robot.c: 143: cleanBfer = 0;
  1384  001D9A  0E00               	movlw	0
  1385  001D9C  6E3E               	movwf	_cleanBfer,c
  1386  001D9E                     l5867:
  1387                           
  1388                           ;robot.c: 144: }
  1389                           ;robot.c: 145: if (FinComandT == 1) {
  1390  001D9E  0437               	decf	_FinComandT,w,c
  1391  001DA0  A4D8               	btfss	status,2,c
  1392  001DA2  D01A               	goto	l5887
  1393                           
  1394                           ;robot.c: 146: Lcd_Clear();
  1395  001DA4  ECCD  F014         	call	_Lcd_Clear	;wreg free
  1396                           
  1397                           ;robot.c: 147: Lcd_Set_Cursor(2,1);
  1398  001DA8  0E01               	movlw	1
  1399  001DAA  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1400  001DAC  0E02               	movlw	2
  1401  001DAE  EC4E  F012         	call	_Lcd_Set_Cursor
  1402                           
  1403                           ;robot.c: 148: Lcd_Write_String("CMD TABLET");
  1404  001DB2  0E7F               	movlw	high STR_21
  1405  001DB4  6E1E               	movwf	Lcd_Write_String@a+1,c
  1406  001DB6  0EC5               	movlw	low STR_21
  1407  001DB8  6E1D               	movwf	Lcd_Write_String@a,c
  1408  001DBA  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  1409                           
  1410                           ;robot.c: 149: FinComandT = 0;
  1411  001DBE  0E00               	movlw	0
  1412  001DC0  6E37               	movwf	_FinComandT,c
  1413                           
  1414                           ;robot.c: 150: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1415  001DC2  0E4F               	movlw	79
  1416  001DC4  16AB               	andwf	4011,f,c	;volatile
  1417  001DC6  9AAC               	bcf	4012,5,c	;volatile
  1418  001DC8  0ECF               	movlw	207
  1419  001DCA  169D               	andwf	3997,f,c	;volatile
  1420                           
  1421                           ;robot.c: 151: Comando_Tablet();
  1422  001DCC  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1423                           
  1424                           ;robot.c: 152: UART1_Init(51);
  1425  001DD0  0E33               	movlw	51
  1426  001DD2  ECBE  F014         	call	_UART1_Init
  1427                           
  1428                           ;robot.c: 154: }
  1429  001DD6  D7DC               	goto	l5861
  1430  001DD8                     l5887:
  1431                           
  1432                           ;robot.c: 155: else if (FinComandB == 1) {
  1433  001DD8  0436               	decf	_FinComandB,w,c
  1434  001DDA  A4D8               	btfss	status,2,c
  1435  001DDC  D7D9               	goto	l5861
  1436                           
  1437                           ;robot.c: 160: FinComandB = 0;
  1438  001DDE  0E00               	movlw	0
  1439  001DE0  6E36               	movwf	_FinComandB,c
  1440                           
  1441                           ;robot.c: 161: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1442  001DE2  0E4F               	movlw	79
  1443  001DE4  16AB               	andwf	4011,f,c	;volatile
  1444  001DE6  9AAC               	bcf	4012,5,c	;volatile
  1445  001DE8  0ECF               	movlw	207
  1446  001DEA  169D               	andwf	3997,f,c	;volatile
  1447  001DEC  D7D1               	goto	l5861
  1448  001DEE                     __end_of_main:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           intcon	equ	0xFF2
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           status	equ	0xFD8
  1460                           
  1461 ;; *************** function _Lcd_Init *****************
  1462 ;; Defined at:
  1463 ;;		line 57 in file "lcd.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;		None               void
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1477 ;;      Params:         0       0       0       0       0       0       0       0       0
  1478 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1479 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1480 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1481 ;;Total ram usage:        1 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    6
  1484 ;; This function calls:
  1485 ;;		_Lcd_Cmd
  1486 ;;		_Lcd_Port
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text1
  1493  002296                     __ptext1:
  1494                           	opt stack 0
  1495  002296                     _Lcd_Init:
  1496                           	opt stack 24
  1497                           
  1498                           ;lcd.c: 58: Lcd_Port(0x00);
  1499                           
  1500                           ;incstack = 0
  1501  002296  0E00               	movlw	0
  1502  002298  ECE6  F013         	call	_Lcd_Port
  1503                           
  1504                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1505  00229C  0E1A               	movlw	26
  1506  00229E  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1507  0022A0  0EF8               	movlw	248
  1508  0022A2                     u6897:
  1509  0022A2  2EE8               	decfsz	wreg,f,c
  1510  0022A4  D7FE               	goto	u6897
  1511  0022A6  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1512  0022A8  D7FC               	goto	u6897
  1513  0022AA  D000               	nop2	
  1514                           
  1515                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1516  0022AC  0E03               	movlw	3
  1517  0022AE  EC4A  F014         	call	_Lcd_Cmd
  1518                           
  1519                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1520  0022B2  0E07               	movlw	7
  1521  0022B4  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1522  0022B6  0E7D               	movlw	125
  1523  0022B8                     u6907:
  1524  0022B8  2EE8               	decfsz	wreg,f,c
  1525  0022BA  D7FE               	goto	u6907
  1526  0022BC  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1527  0022BE  D7FC               	goto	u6907
  1528  0022C0  F000               	nop	
  1529                           
  1530                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1531  0022C2  0E03               	movlw	3
  1532  0022C4  EC4A  F014         	call	_Lcd_Cmd
  1533                           
  1534                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1535  0022C8  0E0F               	movlw	15
  1536  0022CA  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1537  0022CC  0E48               	movlw	72
  1538  0022CE                     u6917:
  1539  0022CE  2EE8               	decfsz	wreg,f,c
  1540  0022D0  D7FE               	goto	u6917
  1541  0022D2  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1542  0022D4  D7FC               	goto	u6917
  1543                           
  1544                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1545  0022D6  0E03               	movlw	3
  1546  0022D8  EC4A  F014         	call	_Lcd_Cmd
  1547                           
  1548                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1549  0022DC  0E02               	movlw	2
  1550  0022DE  EC4A  F014         	call	_Lcd_Cmd
  1551                           
  1552                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1553  0022E2  0E02               	movlw	2
  1554  0022E4  EC4A  F014         	call	_Lcd_Cmd
  1555                           
  1556                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1557  0022E8  0E08               	movlw	8
  1558  0022EA  EC4A  F014         	call	_Lcd_Cmd
  1559                           
  1560                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1561  0022EE  0E00               	movlw	0
  1562  0022F0  EC4A  F014         	call	_Lcd_Cmd
  1563                           
  1564                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1565  0022F4  0E0C               	movlw	12
  1566  0022F6  EC4A  F014         	call	_Lcd_Cmd
  1567                           
  1568                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1569  0022FA  0E00               	movlw	0
  1570  0022FC  EC4A  F014         	call	_Lcd_Cmd
  1571                           
  1572                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1573  002300  0E06               	movlw	6
  1574  002302  EC4A  F014         	call	_Lcd_Cmd
  1575  002306  0012               	return	
  1576  002308                     __end_of_Lcd_Init:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1l	equ	0xFE1
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _Inicializa_Driveby *****************
  1590 ;; Defined at:
  1591 ;;		line 62 in file "Funciones_Db.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;		None
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  i               2   39[COMRAM] int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         0       0       0       0       0       0       0       0       0
  1606 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1609 ;;Total ram usage:        3 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    9
  1612 ;; This function calls:
  1613 ;;		_BT_Init
  1614 ;;		_Lcd_Clear
  1615 ;;		_Lcd_Set_Cursor
  1616 ;;		_Lcd_Write_String
  1617 ;;		_Pause_seg
  1618 ;;		_clrBufferUSART
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text2
  1625  0019E8                     __ptext2:
  1626                           	opt stack 0
  1627  0019E8                     _Inicializa_Driveby:
  1628                           	opt stack 21
  1629                           
  1630                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1631                           
  1632                           ;incstack = 0
  1633  0019E8  0E00               	movlw	0
  1634  0019EA  6E95               	movwf	3989,c	;volatile
  1635  0019EC  CF95 FF94          	movff	3989,3988	;volatile
  1636  0019F0  CF94 FF93          	movff	3988,3987	;volatile
  1637  0019F4  CF93 FF92          	movff	3987,3986	;volatile
  1638                           
  1639                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1640  0019F8  0EC0               	movlw	192
  1641  0019FA  6EF2               	movwf	intcon,c	;volatile
  1642                           
  1643                           ;Funciones_Db.c: 67: int i = 0;
  1644  0019FC  0E00               	movlw	0
  1645  0019FE  6E29               	movwf	Inicializa_Driveby@i+1,c
  1646  001A00  0E00               	movlw	0
  1647  001A02  6E28               	movwf	Inicializa_Driveby@i,c
  1648                           
  1649                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1650  001A04  0E34               	movlw	52
  1651  001A06  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1652  001A08  0EF2               	movlw	242
  1653  001A0A                     u6927:
  1654  001A0A  2EE8               	decfsz	wreg,f,c
  1655  001A0C  D7FE               	goto	u6927
  1656  001A0E  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1657  001A10  D7FC               	goto	u6927
  1658                           
  1659                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1660  001A12  88D3               	bsf	4051,4,c	;volatile
  1661  001A14  8AD3               	bsf	4051,5,c	;volatile
  1662  001A16  8CD3               	bsf	4051,6,c	;volatile
  1663                           
  1664                           ;Funciones_Db.c: 74: TRISA = 0;
  1665  001A18  0E00               	movlw	0
  1666  001A1A  6E92               	movwf	3986,c	;volatile
  1667                           
  1668                           ;Funciones_Db.c: 75: PORTA = 0;
  1669  001A1C  0E00               	movlw	0
  1670  001A1E  6E80               	movwf	3968,c	;volatile
  1671                           
  1672                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  1673  001A20  8E94               	bsf	3988,7,c	;volatile
  1674                           
  1675                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  1676  001A22  9C94               	bcf	3988,6,c	;volatile
  1677                           
  1678                           ;Funciones_Db.c: 78: for (i = 1; i <= 5; i++)
  1679  001A24  0E00               	movlw	0
  1680  001A26  6E29               	movwf	Inicializa_Driveby@i+1,c
  1681  001A28  0E01               	movlw	1
  1682  001A2A  6E28               	movwf	Inicializa_Driveby@i,c
  1683  001A2C  5029               	movf	Inicializa_Driveby@i+1,w,c
  1684  001A2E  0A80               	xorlw	128
  1685  001A30  0F80               	addlw	-128
  1686  001A32  0E06               	movlw	6
  1687  001A34  B4D8               	btfsc	status,2,c
  1688  001A36  5C28               	subwf	Inicializa_Driveby@i,w,c
  1689  001A38  B0D8               	btfsc	status,0,c
  1690  001A3A  D00B               	goto	l5689
  1691                           
  1692                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1693  001A3C  0E1A               	movlw	26
  1694  001A3E  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1695  001A40  0EF8               	movlw	248
  1696  001A42                     u6937:
  1697  001A42  2EE8               	decfsz	wreg,f,c
  1698  001A44  D7FE               	goto	u6937
  1699  001A46  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1700  001A48  D7FC               	goto	u6937
  1701  001A4A  D000               	nop2	
  1702  001A4C  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1703  001A4E  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1704  001A50  D7ED               	goto	L1
  1705  001A52                     l5689:
  1706                           
  1707                           ;Funciones_Db.c: 80: PORTE = 0;
  1708  001A52  0E00               	movlw	0
  1709  001A54  6E84               	movwf	3972,c	;volatile
  1710                           
  1711                           ;Funciones_Db.c: 81: PORTB = 0;
  1712  001A56  0E00               	movlw	0
  1713  001A58  6E81               	movwf	3969,c	;volatile
  1714                           
  1715                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  1716  001A5A  8093               	bsf	3987,0,c	;volatile
  1717                           
  1718                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  1719  001A5C  8293               	bsf	3987,1,c	;volatile
  1720                           
  1721                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  1722  001A5E  8493               	bsf	3987,2,c	;volatile
  1723                           
  1724                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  1725  001A60  8693               	bsf	3987,3,c	;volatile
  1726                           
  1727                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  1728  001A62  8893               	bsf	3987,4,c	;volatile
  1729                           
  1730                           ;Funciones_Db.c: 87: Lcd_Clear();
  1731  001A64  ECCD  F014         	call	_Lcd_Clear	;wreg free
  1732                           
  1733                           ;Funciones_Db.c: 88: Lcd_Set_Cursor(2, 1);
  1734  001A68  0E01               	movlw	1
  1735  001A6A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1736  001A6C  0E02               	movlw	2
  1737  001A6E  EC4E  F012         	call	_Lcd_Set_Cursor
  1738                           
  1739                           ;Funciones_Db.c: 89: Lcd_Write_String("INICIO");
  1740  001A72  0E7F               	movlw	high STR_10
  1741  001A74  6E1E               	movwf	Lcd_Write_String@a+1,c
  1742  001A76  0EF3               	movlw	low STR_10
  1743  001A78  6E1D               	movwf	Lcd_Write_String@a,c
  1744  001A7A  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  1745                           
  1746                           ;Funciones_Db.c: 91: BT_Init();
  1747  001A7E  EC06  F00E         	call	_BT_Init	;wreg free
  1748                           
  1749                           ;Funciones_Db.c: 92: Lcd_Clear();
  1750  001A82  ECCD  F014         	call	_Lcd_Clear	;wreg free
  1751                           
  1752                           ;Funciones_Db.c: 93: Lcd_Set_Cursor(1, 1);
  1753  001A86  0E01               	movlw	1
  1754  001A88  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1755  001A8A  0E01               	movlw	1
  1756  001A8C  EC4E  F012         	call	_Lcd_Set_Cursor
  1757                           
  1758                           ;Funciones_Db.c: 94: Lcd_Write_String("BT INICIALIZADO");
  1759  001A90  0E7F               	movlw	high STR_11
  1760  001A92  6E1E               	movwf	Lcd_Write_String@a+1,c
  1761  001A94  0E55               	movlw	low STR_11
  1762  001A96  6E1D               	movwf	Lcd_Write_String@a,c
  1763  001A98  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  1764                           
  1765                           ;Funciones_Db.c: 96: Pause_seg(7);
  1766  001A9C  0E07               	movlw	7
  1767  001A9E  ECC3  F012         	call	_Pause_seg
  1768                           
  1769                           ;Funciones_Db.c: 97: cad = 0;
  1770  001AA2  0E00               	movlw	0
  1771  001AA4  6E3D               	movwf	_cad,c
  1772                           
  1773                           ;Funciones_Db.c: 98: clrBufferUSART();
  1774  001AA6  EC79  F013         	call	_clrBufferUSART	;wreg free
  1775                           
  1776                           ;Funciones_Db.c: 99: return;
  1777  001AAA  0012               	return	
  1778  001AAC                     __end_of_Inicializa_Driveby:
  1779                           	opt stack 0
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _BT_Init *****************
  1792 ;; Defined at:
  1793 ;;		line 16 in file "Bluetooth.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1798 ;; Return value:  Size  Location     Type
  1799 ;;		None               void
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1807 ;;      Params:         0       0       0       0       0       0       0       0       0
  1808 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1810 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1811 ;;Total ram usage:       18 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    8
  1814 ;; This function calls:
  1815 ;;		_Pause_seg
  1816 ;;		_SendBlueToothCommand
  1817 ;;		_UART1_Init
  1818 ;; This function is called by:
  1819 ;;		_Inicializa_Driveby
  1820 ;;		_EstadoBluetooth
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text3
  1825  001C0C                     __ptext3:
  1826                           	opt stack 0
  1827  001C0C                     _BT_Init:
  1828                           	opt stack 21
  1829                           
  1830                           ;Bluetooth.c: 18: UART1_Init(51);
  1831                           
  1832                           ;incstack = 0
  1833  001C0C  0E33               	movlw	51
  1834  001C0E  ECBE  F014         	call	_UART1_Init
  1835                           
  1836                           ;Bluetooth.c: 21: Pause_seg(1);
  1837  001C12  0E01               	movlw	1
  1838  001C14  ECC3  F012         	call	_Pause_seg
  1839                           
  1840                           ;Bluetooth.c: 22: char nameBT[18] = {
  1841                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1842                           ;Bluetooth.c: 24: };
  1843  001C18  EE20  F0EC         	lfsr	2,BT_Init@F5669
  1844  001C1C  EE10  F060         	lfsr	1,BT_Init@nameBT
  1845  001C20  0E12               	movlw	18
  1846  001C22                     u6261:
  1847  001C22  CFDE FFE6          	movff	postinc2,postinc1
  1848  001C26  2EE8               	decfsz	wreg,f,c
  1849  001C28  D7FC               	goto	u6261
  1850                           
  1851                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1852  001C2A  0E7F               	movlw	high STR_1
  1853  001C2C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1854  001C2E  0EB9               	movlw	low STR_1
  1855  001C30  6E23               	movwf	SendBlueToothCommand@command,c
  1856  001C32  0E00               	movlw	0
  1857  001C34  6E26               	movwf	SendBlueToothCommand@total+1,c
  1858  001C36  0E0B               	movlw	11
  1859  001C38  6E25               	movwf	SendBlueToothCommand@total,c
  1860  001C3A  EC97  F014         	call	_SendBlueToothCommand	;wreg free
  1861                           
  1862                           ;Bluetooth.c: 29: Pause_seg(1);
  1863  001C3E  0E01               	movlw	1
  1864  001C40  ECC3  F012         	call	_Pause_seg
  1865                           
  1866                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1867  001C44  0100               	movlb	0	; () banked
  1868  001C46  0E00               	movlw	high BT_Init@nameBT
  1869  001C48  6E24               	movwf	SendBlueToothCommand@command+1,c
  1870  001C4A  0100               	movlb	0	; () banked
  1871  001C4C  0E60               	movlw	low BT_Init@nameBT
  1872  001C4E  6E23               	movwf	SendBlueToothCommand@command,c
  1873  001C50  0E00               	movlw	0
  1874  001C52  6E26               	movwf	SendBlueToothCommand@total+1,c
  1875  001C54  0E12               	movlw	18
  1876  001C56  6E25               	movwf	SendBlueToothCommand@total,c
  1877  001C58  EC97  F014         	call	_SendBlueToothCommand	;wreg free
  1878                           
  1879                           ;Bluetooth.c: 33: Pause_seg(2);
  1880  001C5C  0E02               	movlw	2
  1881  001C5E  ECC3  F012         	call	_Pause_seg
  1882                           
  1883                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1884  001C62  0E7F               	movlw	high STR_2
  1885  001C64  6E24               	movwf	SendBlueToothCommand@command+1,c
  1886  001C66  0E65               	movlw	low STR_2
  1887  001C68  6E23               	movwf	SendBlueToothCommand@command,c
  1888  001C6A  0E00               	movlw	0
  1889  001C6C  6E26               	movwf	SendBlueToothCommand@total+1,c
  1890  001C6E  0E0E               	movlw	14
  1891  001C70  6E25               	movwf	SendBlueToothCommand@total,c
  1892  001C72  EC97  F014         	call	_SendBlueToothCommand	;wreg free
  1893                           
  1894                           ;Bluetooth.c: 36: Pause_seg(2);
  1895  001C76  0E02               	movlw	2
  1896  001C78  ECC3  F012         	call	_Pause_seg
  1897                           
  1898                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1899  001C7C  0E7F               	movlw	high STR_3
  1900  001C7E  6E24               	movwf	SendBlueToothCommand@command+1,c
  1901  001C80  0EDB               	movlw	low STR_3
  1902  001C82  6E23               	movwf	SendBlueToothCommand@command,c
  1903  001C84  0E00               	movlw	0
  1904  001C86  6E26               	movwf	SendBlueToothCommand@total+1,c
  1905  001C88  0E08               	movlw	8
  1906  001C8A  6E25               	movwf	SendBlueToothCommand@total,c
  1907  001C8C  EC97  F014         	call	_SendBlueToothCommand	;wreg free
  1908                           
  1909                           ;Bluetooth.c: 41: Pause_seg(2);
  1910  001C90  0E02               	movlw	2
  1911  001C92  ECC3  F012         	call	_Pause_seg
  1912                           
  1913                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1914  001C96  0E7F               	movlw	high STR_3
  1915  001C98  6E24               	movwf	SendBlueToothCommand@command+1,c
  1916  001C9A  0EDB               	movlw	low STR_3
  1917  001C9C  6E23               	movwf	SendBlueToothCommand@command,c
  1918  001C9E  0E00               	movlw	0
  1919  001CA0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1920  001CA2  0E08               	movlw	8
  1921  001CA4  6E25               	movwf	SendBlueToothCommand@total,c
  1922  001CA6  EC97  F014         	call	_SendBlueToothCommand	;wreg free
  1923                           
  1924                           ;Bluetooth.c: 44: Pause_seg(2);
  1925  001CAA  0E02               	movlw	2
  1926  001CAC  ECC3  F012         	call	_Pause_seg
  1927                           
  1928                           ;Bluetooth.c: 45: return;
  1929  001CB0  0012               	return	
  1930  001CB2                     __end_of_BT_Init:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           intcon	equ	0xFF2
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postinc1	equ	0xFE6
  1940                           postdec1	equ	0xFE5
  1941                           fsr1l	equ	0xFE1
  1942                           postinc2	equ	0xFDE
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _SendBlueToothCommand *****************
  1946 ;; Defined at:
  1947 ;;		line 48 in file "Bluetooth.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1950 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1951 ;;		 -> BT_Init@nameBT(18), 
  1952 ;;  total           2   36[COMRAM] unsigned int 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;		None               void
  1957 ;; Registers used:
  1958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1964 ;;      Params:         4       0       0       0       0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1967 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1968 ;;Total ram usage:        4 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    7
  1971 ;; This function calls:
  1972 ;;		_putSTRINGU1
  1973 ;; This function is called by:
  1974 ;;		_BT_Init
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text4
  1979  00292E                     __ptext4:
  1980                           	opt stack 0
  1981  00292E                     _SendBlueToothCommand:
  1982                           	opt stack 21
  1983                           
  1984                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1985                           
  1986                           ;incstack = 0
  1987  00292E  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1988  002932  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1989  002936  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1990  00293A  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1991  00293E  ECF7  F00E         	call	_putSTRINGU1	;wreg free
  1992                           
  1993                           ;Bluetooth.c: 50: return;
  1994  002942  0012               	return	
  1995  002944                     __end_of_SendBlueToothCommand:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postinc1	equ	0xFE6
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           postinc2	equ	0xFDE
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _putSTRINGU1 *****************
  2011 ;; Defined at:
  2012 ;;		line 18 in file "UART1.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  2015 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2016 ;;		 -> BT_Init@nameBT(18), 
  2017 ;;  total           2   28[COMRAM] unsigned int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  cont            1   33[COMRAM] unsigned char 
  2020 ;;  last            1   32[COMRAM] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         4       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2032 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        8 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    6
  2037 ;; This function calls:
  2038 ;;		_putcTxU1
  2039 ;; This function is called by:
  2040 ;;		_SendBlueToothCommand
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text5
  2045  001DEE                     __ptext5:
  2046                           	opt stack 0
  2047  001DEE                     _putSTRINGU1:
  2048                           	opt stack 21
  2049                           
  2050                           ;UART1.c: 19: unsigned char cont,last;
  2051                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2052                           
  2053                           ;incstack = 0
  2054  001DEE  0E00               	movlw	0
  2055  001DF0  6E22               	movwf	putSTRINGU1@cont,c
  2056  001DF2  0E00               	movlw	0
  2057  001DF4  6E21               	movwf	putSTRINGU1@last,c
  2058  001DF6  D01F               	goto	l4721
  2059  001DF8                     l4715:
  2060                           
  2061                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2062  001DF8  5022               	movf	putSTRINGU1@cont,w,c
  2063  001DFA  0D01               	mullw	1
  2064  001DFC  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2065  001E00  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2066  001E04  50F3               	movf	prodl,w,c
  2067  001E06  261F               	addwf	??_putSTRINGU1,f,c
  2068  001E08  50F4               	movf	prodh,w,c
  2069  001E0A  2220               	addwfc	??_putSTRINGU1+1,f,c
  2070  001E0C  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2071  001E10  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2072  001E14  6AF8               	clrf	tblptru,c
  2073  001E16  0E07               	movlw	(high __ramtop+-1)
  2074  001E18  64F7               	cpfsgt	tblptrh,c
  2075  001E1A  D003               	bra	u5277
  2076  001E1C  0008               	tblrd		*
  2077  001E1E  50F5               	movf	tablat,w,c
  2078  001E20  D005               	bra	u5270
  2079  001E22                     u5277:
  2080  001E22  CFF6 FFE9          	movff	tblptrl,fsr0l
  2081  001E26  CFF7 FFEA          	movff	tblptrh,fsr0h
  2082  001E2A  50EF               	movf	indf0,w,c
  2083  001E2C                     u5270:
  2084  001E2C  0900               	iorlw	0
  2085  001E2E  A4D8               	btfss	status,2,c
  2086  001E30  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2087  001E34  2A22               	incf	putSTRINGU1@cont,f,c
  2088  001E36                     l4721:
  2089  001E36  5022               	movf	putSTRINGU1@cont,w,c
  2090  001E38  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2091  001E3A  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2092  001E3C  501D               	movf	putSTRINGU1@total,w,c
  2093  001E3E  5C1F               	subwf	??_putSTRINGU1,w,c
  2094  001E40  501E               	movf	putSTRINGU1@total+1,w,c
  2095  001E42  5820               	subwfb	??_putSTRINGU1+1,w,c
  2096  001E44  A0D8               	btfss	status,0,c
  2097  001E46  D7D8               	goto	l4715
  2098                           
  2099                           ;UART1.c: 23: }
  2100                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2101  001E48  0E00               	movlw	0
  2102  001E4A  6E22               	movwf	putSTRINGU1@cont,c
  2103  001E4C  D015               	goto	l4731
  2104  001E4E                     l4725:
  2105                           
  2106                           ;UART1.c: 26: putcTxU1(*dato++);
  2107  001E4E  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2108  001E52  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2109  001E56  6AF8               	clrf	tblptru,c
  2110  001E58  0E07               	movlw	(high __ramtop+-1)
  2111  001E5A  64F7               	cpfsgt	tblptrh,c
  2112  001E5C  D003               	bra	u5307
  2113  001E5E  0008               	tblrd		*
  2114  001E60  50F5               	movf	tablat,w,c
  2115  001E62  D005               	bra	u5300
  2116  001E64                     u5307:
  2117  001E64  CFF6 FFE9          	movff	tblptrl,fsr0l
  2118  001E68  CFF7 FFEA          	movff	tblptrh,fsr0h
  2119  001E6C  50EF               	movf	indf0,w,c
  2120  001E6E                     u5300:
  2121  001E6E  ECC6  F014         	call	_putcTxU1
  2122  001E72  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2123  001E74  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2124  001E76  2A22               	incf	putSTRINGU1@cont,f,c
  2125  001E78                     l4731:
  2126  001E78  5022               	movf	putSTRINGU1@cont,w,c
  2127  001E7A  5C21               	subwf	putSTRINGU1@last,w,c
  2128  001E7C  A0D8               	btfss	status,0,c
  2129  001E7E  0012               	return	
  2130  001E80  D7E6               	goto	l4725
  2131  001E82                     __end_of_putSTRINGU1:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           indf0	equ	0xFEF
  2141                           postinc0	equ	0xFEE
  2142                           fsr0h	equ	0xFEA
  2143                           fsr0l	equ	0xFE9
  2144                           wreg	equ	0xFE8
  2145                           postinc1	equ	0xFE6
  2146                           postdec1	equ	0xFE5
  2147                           fsr1l	equ	0xFE1
  2148                           postinc2	equ	0xFDE
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _putcTxU1 *****************
  2152 ;; Defined at:
  2153 ;;		line 12 in file "UART1.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  character       1    wreg     unsigned char 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  character       1   25[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0
  2168 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2170 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    5
  2174 ;; This function calls:
  2175 ;;		_WriteUSART
  2176 ;; This function is called by:
  2177 ;;		_putSTRINGU1
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text6
  2182  00298C                     __ptext6:
  2183                           	opt stack 0
  2184  00298C                     _putcTxU1:
  2185                           	opt stack 21
  2186                           
  2187                           ;incstack = 0
  2188                           ;putcTxU1@character stored from wreg
  2189  00298C  6E1A               	movwf	putcTxU1@character,c
  2190                           
  2191                           ;UART1.c: 14: WriteUSART(character);
  2192  00298E  501A               	movf	putcTxU1@character,w,c
  2193  002990  ECAC  F014         	call	_WriteUSART
  2194  002994                     l216:
  2195  002994  B2AC               	btfsc	4012,1,c	;volatile
  2196  002996  0012               	return	
  2197  002998  D7FD               	goto	l216
  2198  00299A                     __end_of_putcTxU1:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           indf0	equ	0xFEF
  2208                           postinc0	equ	0xFEE
  2209                           fsr0h	equ	0xFEA
  2210                           fsr0l	equ	0xFE9
  2211                           wreg	equ	0xFE8
  2212                           postinc1	equ	0xFE6
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           postinc2	equ	0xFDE
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _Pause_seg *****************
  2219 ;; Defined at:
  2220 ;;		line 18 in file "Retardos.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  x               1    wreg     unsigned char 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  x               1   29[COMRAM] unsigned char 
  2225 ;;  i               1   30[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0
  2236 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2238 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2239 ;;Total ram usage:        2 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    5
  2242 ;; This function calls:
  2243 ;;		_Pause_ms
  2244 ;; This function is called by:
  2245 ;;		_BT_Init
  2246 ;;		_Inicializa_Driveby
  2247 ;;		_EstadoBluetooth
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text7
  2252  002586                     __ptext7:
  2253                           	opt stack 0
  2254  002586                     _Pause_seg:
  2255                           	opt stack 24
  2256                           
  2257                           ;incstack = 0
  2258                           ;Pause_seg@x stored from wreg
  2259  002586  6E1E               	movwf	Pause_seg@x,c
  2260                           
  2261                           ;Retardos.c: 19: unsigned char i=0;
  2262  002588  0E00               	movlw	0
  2263  00258A  6E1F               	movwf	Pause_seg@i,c
  2264                           
  2265                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2266  00258C  0E00               	movlw	0
  2267  00258E  6E1F               	movwf	Pause_seg@i,c
  2268  002590  D019               	goto	l5111
  2269  002592                     l5107:
  2270                           
  2271                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2272  002592  0E00               	movlw	0
  2273  002594  6E1A               	movwf	Pause_ms@x+1,c
  2274  002596  0EFA               	movlw	250
  2275  002598  6E19               	movwf	Pause_ms@x,c
  2276  00259A  ECCD  F013         	call	_Pause_ms	;wreg free
  2277  00259E  0E00               	movlw	0
  2278  0025A0  6E1A               	movwf	Pause_ms@x+1,c
  2279  0025A2  0EFA               	movlw	250
  2280  0025A4  6E19               	movwf	Pause_ms@x,c
  2281  0025A6  ECCD  F013         	call	_Pause_ms	;wreg free
  2282                           
  2283                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2284  0025AA  0E00               	movlw	0
  2285  0025AC  6E1A               	movwf	Pause_ms@x+1,c
  2286  0025AE  0EFA               	movlw	250
  2287  0025B0  6E19               	movwf	Pause_ms@x,c
  2288  0025B2  ECCD  F013         	call	_Pause_ms	;wreg free
  2289  0025B6  0E00               	movlw	0
  2290  0025B8  6E1A               	movwf	Pause_ms@x+1,c
  2291  0025BA  0EFA               	movlw	250
  2292  0025BC  6E19               	movwf	Pause_ms@x,c
  2293  0025BE  ECCD  F013         	call	_Pause_ms	;wreg free
  2294  0025C2  2A1F               	incf	Pause_seg@i,f,c
  2295  0025C4                     l5111:
  2296  0025C4  501F               	movf	Pause_seg@i,w,c
  2297  0025C6  5C1E               	subwf	Pause_seg@x,w,c
  2298  0025C8  A0D8               	btfss	status,0,c
  2299  0025CA  0012               	return	
  2300  0025CC  D7E2               	goto	l5107
  2301  0025CE                     __end_of_Pause_seg:
  2302                           	opt stack 0
  2303                           tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           indf0	equ	0xFEF
  2311                           postinc0	equ	0xFEE
  2312                           fsr0h	equ	0xFEA
  2313                           fsr0l	equ	0xFE9
  2314                           wreg	equ	0xFE8
  2315                           postinc1	equ	0xFE6
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           postinc2	equ	0xFDE
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _Pause_ms *****************
  2322 ;; Defined at:
  2323 ;;		line 11 in file "Retardos.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  x               2   24[COMRAM] unsigned int 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  i               2   27[COMRAM] unsigned int 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         2       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        5 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    4
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_Pause_seg
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text8
  2352  00279A                     __ptext8:
  2353                           	opt stack 0
  2354  00279A                     _Pause_ms:
  2355                           	opt stack 24
  2356                           
  2357                           ;Retardos.c: 12: unsigned int i=0;
  2358                           
  2359                           ;incstack = 0
  2360  00279A  0E00               	movlw	0
  2361  00279C  6E1D               	movwf	Pause_ms@i+1,c
  2362  00279E  0E00               	movlw	0
  2363  0027A0  6E1C               	movwf	Pause_ms@i,c
  2364                           
  2365                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2366  0027A2  0E00               	movlw	0
  2367  0027A4  6E1D               	movwf	Pause_ms@i+1,c
  2368  0027A6  0E00               	movlw	0
  2369  0027A8  6E1C               	movwf	Pause_ms@i,c
  2370  0027AA  D009               	goto	l195
  2371  0027AC                     l4735:
  2372                           
  2373                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2374  0027AC  0E03               	movlw	3
  2375  0027AE  6E1B               	movwf	??_Pause_ms& (0+255),c
  2376  0027B0  0E98               	movlw	152
  2377  0027B2                     u6947:
  2378  0027B2  2EE8               	decfsz	wreg,f,c
  2379  0027B4  D7FE               	goto	u6947
  2380  0027B6  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2381  0027B8  D7FC               	goto	u6947
  2382  0027BA  4A1C               	infsnz	Pause_ms@i,f,c
  2383  0027BC  2A1D               	incf	Pause_ms@i+1,f,c
  2384  0027BE                     l195:
  2385  0027BE  501C               	movf	Pause_ms@i,w,c
  2386  0027C0  5C19               	subwf	Pause_ms@x,w,c
  2387  0027C2  501D               	movf	Pause_ms@i+1,w,c
  2388  0027C4  581A               	subwfb	Pause_ms@x+1,w,c
  2389  0027C6  A0D8               	btfss	status,0,c
  2390  0027C8  0012               	return	
  2391  0027CA  D7F0               	goto	l4735
  2392  0027CC                     __end_of_Pause_ms:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           intcon	equ	0xFF2
  2401                           indf0	equ	0xFEF
  2402                           postinc0	equ	0xFEE
  2403                           fsr0h	equ	0xFEA
  2404                           fsr0l	equ	0xFE9
  2405                           wreg	equ	0xFE8
  2406                           postinc1	equ	0xFE6
  2407                           postdec1	equ	0xFE5
  2408                           fsr1l	equ	0xFE1
  2409                           postinc2	equ	0xFDE
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _Comando_Tablet *****************
  2413 ;; Defined at:
  2414 ;;		line 104 in file "Funciones_Db.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  sensed          2   22[BANK1 ] int 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0
  2429 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2432 ;;Total ram usage:        2 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    9
  2435 ;; This function calls:
  2436 ;;		_Lcd_Clear
  2437 ;;		_Lcd_Set_Cursor
  2438 ;;		_Lcd_Write_Integer
  2439 ;;		_Lcd_Write_String
  2440 ;;		_PWM_DutyCycle1
  2441 ;;		_PWM_DutyCycle2
  2442 ;;		_PWM_init1
  2443 ;;		_PWM_init2
  2444 ;;		_clrBufferUSART
  2445 ;;		_getCNY70Value
  2446 ;;		_putcBluetoothInt
  2447 ;;		_putcBluetoothString
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text9
  2454  001580                     __ptext9:
  2455                           	opt stack 0
  2456  001580                     _Comando_Tablet:
  2457                           	opt stack 21
  2458                           
  2459                           ;Funciones_Db.c: 106: int sensed=0;
  2460                           
  2461                           ;incstack = 0
  2462  001580  0E00               	movlw	0
  2463  001582  0101               	movlb	1	; () banked
  2464  001584  6F71               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  2465  001586  0E00               	movlw	0
  2466  001588  0101               	movlb	1	; () banked
  2467  00158A  6F70               	movwf	Comando_Tablet@sensed& (0+255),b
  2468                           
  2469                           ;Funciones_Db.c: 107: switch (BluetoothDato[1]) {
  2470  00158C  D083               	goto	l5779
  2471  00158E                     l5725:
  2472                           
  2473                           ; BSR set to: 1
  2474                           ;Funciones_Db.c: 109: Lcd_Clear();
  2475  00158E  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2476                           
  2477                           ;Funciones_Db.c: 110: Lcd_Set_Cursor(1, 1);
  2478  001592  0E01               	movlw	1
  2479  001594  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2480  001596  0E01               	movlw	1
  2481  001598  EC4E  F012         	call	_Lcd_Set_Cursor
  2482                           
  2483                           ;Funciones_Db.c: 111: Lcd_Write_String("1");
  2484  00159C  0E7F               	movlw	high STR_12
  2485  00159E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2486  0015A0  0EFA               	movlw	low STR_12
  2487  0015A2  6E1D               	movwf	Lcd_Write_String@a,c
  2488  0015A4  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  2489                           
  2490                           ;Funciones_Db.c: 112: break;
  2491  0015A8  D087               	goto	l5781
  2492  0015AA                     l5731:
  2493                           
  2494                           ;Funciones_Db.c: 114: Lcd_Clear();
  2495  0015AA  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2496                           
  2497                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2498  0015AE  0E01               	movlw	1
  2499  0015B0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2500  0015B2  0E01               	movlw	1
  2501  0015B4  EC4E  F012         	call	_Lcd_Set_Cursor
  2502                           
  2503                           ;Funciones_Db.c: 116: Lcd_Write_String("2");
  2504  0015B8  0E7F               	movlw	high (STR_19+16)
  2505  0015BA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2506  0015BC  0E53               	movlw	low (STR_19+16)
  2507  0015BE  6E1D               	movwf	Lcd_Write_String@a,c
  2508  0015C0  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  2509                           
  2510                           ;Funciones_Db.c: 117: break;
  2511  0015C4  D079               	goto	l5781
  2512  0015C6                     l5737:
  2513                           
  2514                           ;Funciones_Db.c: 120: Lcd_Clear();
  2515  0015C6  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2516                           
  2517                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2518  0015CA  0E01               	movlw	1
  2519  0015CC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2520  0015CE  0E01               	movlw	1
  2521  0015D0  EC4E  F012         	call	_Lcd_Set_Cursor
  2522                           
  2523                           ;Funciones_Db.c: 123: Lcd_Write_String("3");
  2524  0015D4  0E7F               	movlw	high STR_14
  2525  0015D6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2526  0015D8  0EFC               	movlw	low STR_14
  2527  0015DA  6E1D               	movwf	Lcd_Write_String@a,c
  2528  0015DC  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  2529                           
  2530                           ;Funciones_Db.c: 124: break;
  2531  0015E0  D06B               	goto	l5781
  2532  0015E2                     l5743:
  2533                           
  2534                           ;Funciones_Db.c: 129: sensed = getCNY70Value();
  2535  0015E2  EC56  F00D         	call	_getCNY70Value	;wreg free
  2536  0015E6  C019  F170         	movff	?_getCNY70Value,Comando_Tablet@sensed
  2537  0015EA  C01A  F171         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  2538                           
  2539                           ;Funciones_Db.c: 130: Lcd_Clear();
  2540  0015EE  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2541                           
  2542                           ;Funciones_Db.c: 131: Lcd_Set_Cursor(1,1);
  2543  0015F2  0E01               	movlw	1
  2544  0015F4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2545  0015F6  0E01               	movlw	1
  2546  0015F8  EC4E  F012         	call	_Lcd_Set_Cursor
  2547                           
  2548                           ;Funciones_Db.c: 132: Lcd_Write_Integer(sensed);
  2549  0015FC  C170  F0B8         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  2550  001600  C171  F0B9         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  2551  001604  EC5C  F013         	call	_Lcd_Write_Integer	;wreg free
  2552                           
  2553                           ;Funciones_Db.c: 133: putcBluetoothInt(sensed);
  2554  001608  C170  F0B8         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  2555  00160C  C171  F0B9         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  2556  001610  ECD1  F00F         	call	_putcBluetoothInt	;wreg free
  2557                           
  2558                           ;Funciones_Db.c: 134: putcBluetoothString("\n");
  2559  001614  0E7F               	movlw	high (STR_2+13)
  2560  001616  6E21               	movwf	putcBluetoothString@a+1,c
  2561  001618  0E72               	movlw	low (STR_2+13)
  2562  00161A  6E20               	movwf	putcBluetoothString@a,c
  2563  00161C  EC84  F011         	call	_putcBluetoothString	;wreg free
  2564                           
  2565                           ;Funciones_Db.c: 135: break;
  2566  001620  D04B               	goto	l5781
  2567  001622                     l5753:
  2568                           
  2569                           ;Funciones_Db.c: 137: Lcd_Clear();
  2570  001622  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2571                           
  2572                           ;Funciones_Db.c: 138: Lcd_Set_Cursor(1, 1);
  2573  001626  0E01               	movlw	1
  2574  001628  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2575  00162A  0E01               	movlw	1
  2576  00162C  EC4E  F012         	call	_Lcd_Set_Cursor
  2577                           
  2578                           ;Funciones_Db.c: 139: Lcd_Write_Integer(BluetoothDato[3]);
  2579  001630  0101               	movlb	1	; () banked
  2580  001632  0100               	movlb	0	; () banked
  2581  001634  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2582  001638  0100               	movlb	0	; () banked
  2583  00163A  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2584  00163C  EC5C  F013         	call	_Lcd_Write_Integer	;wreg free
  2585                           
  2586                           ;Funciones_Db.c: 140: Lcd_Set_Cursor(2, 1);
  2587  001640  0E01               	movlw	1
  2588  001642  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2589  001644  0E02               	movlw	2
  2590  001646  EC4E  F012         	call	_Lcd_Set_Cursor
  2591                           
  2592                           ;Funciones_Db.c: 141: Lcd_Write_Integer(BluetoothDato[4]);
  2593  00164A  0101               	movlb	1	; () banked
  2594  00164C  0100               	movlb	0	; () banked
  2595  00164E  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2596  001652  0100               	movlb	0	; () banked
  2597  001654  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2598  001656  EC5C  F013         	call	_Lcd_Write_Integer	;wreg free
  2599                           
  2600                           ;Funciones_Db.c: 142: PWM_init1(0xff);
  2601  00165A  0EFF               	movlw	255
  2602  00165C  EC79  F014         	call	_PWM_init1
  2603                           
  2604                           ;Funciones_Db.c: 143: PWM_init2(0xff);
  2605  001660  0EFF               	movlw	255
  2606  001662  EC6A  F014         	call	_PWM_init2
  2607                           
  2608                           ;Funciones_Db.c: 144: PWM_DutyCycle1(BluetoothDato[3]);
  2609  001666  0101               	movlb	1	; () banked
  2610  001668  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2611  00166A  EC93  F010         	call	_PWM_DutyCycle1
  2612                           
  2613                           ;Funciones_Db.c: 145: PWM_DutyCycle2(BluetoothDato[4]);
  2614  00166E  0101               	movlb	1	; () banked
  2615  001670  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2616  001672  EC55  F010         	call	_PWM_DutyCycle2
  2617                           
  2618                           ;Funciones_Db.c: 146: break;
  2619  001676  D020               	goto	l5781
  2620  001678                     l5771:
  2621                           
  2622                           ;Funciones_Db.c: 148: Lcd_Clear();
  2623  001678  ECCD  F014         	call	_Lcd_Clear	;wreg free
  2624                           
  2625                           ;Funciones_Db.c: 149: Lcd_Set_Cursor(1, 1);
  2626  00167C  0E01               	movlw	1
  2627  00167E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2628  001680  0E01               	movlw	1
  2629  001682  EC4E  F012         	call	_Lcd_Set_Cursor
  2630                           
  2631                           ;Funciones_Db.c: 150: Lcd_Write_String("Default");
  2632  001686  0E7F               	movlw	high STR_16
  2633  001688  6E1E               	movwf	Lcd_Write_String@a+1,c
  2634  00168A  0EE4               	movlw	low STR_16
  2635  00168C  6E1D               	movwf	Lcd_Write_String@a,c
  2636  00168E  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  2637                           
  2638                           ;Funciones_Db.c: 151: break;
  2639  001692  D012               	goto	l5781
  2640  001694                     l5779:
  2641  001694  0101               	movlb	1	; () banked
  2642  001696  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2643                           
  2644                           ; Switch size 1, requested type "space"
  2645                           ; Number of cases is 5, Range of values is 1 to 5
  2646                           ; switch strategies available:
  2647                           ; Name         Instructions Cycles
  2648                           ; simple_byte           16     9 (average)
  2649                           ;	Chosen strategy is simple_byte
  2650  001698  0A01               	xorlw	1	; case 1
  2651  00169A  B4D8               	btfsc	status,2,c
  2652  00169C  D778               	goto	l5725
  2653  00169E  0A03               	xorlw	3	; case 2
  2654  0016A0  B4D8               	btfsc	status,2,c
  2655  0016A2  D783               	goto	l5731
  2656  0016A4  0A01               	xorlw	1	; case 3
  2657  0016A6  B4D8               	btfsc	status,2,c
  2658  0016A8  D78E               	goto	l5737
  2659  0016AA  0A07               	xorlw	7	; case 4
  2660  0016AC  B4D8               	btfsc	status,2,c
  2661  0016AE  D799               	goto	l5743
  2662  0016B0  0A01               	xorlw	1	; case 5
  2663  0016B2  B4D8               	btfsc	status,2,c
  2664  0016B4  D7B6               	goto	l5753
  2665  0016B6  D7E0               	goto	l5771
  2666  0016B8                     l5781:
  2667                           
  2668                           ;Funciones_Db.c: 153: clrBufferUSART();
  2669  0016B8  EC79  F013         	call	_clrBufferUSART	;wreg free
  2670                           
  2671                           ;Funciones_Db.c: 154: return;
  2672  0016BC  0012               	return	
  2673  0016BE                     __end_of_Comando_Tablet:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           intcon	equ	0xFF2
  2682                           indf0	equ	0xFEF
  2683                           postinc0	equ	0xFEE
  2684                           fsr0h	equ	0xFEA
  2685                           fsr0l	equ	0xFE9
  2686                           wreg	equ	0xFE8
  2687                           postinc1	equ	0xFE6
  2688                           postdec1	equ	0xFE5
  2689                           fsr1l	equ	0xFE1
  2690                           postinc2	equ	0xFDE
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _putcBluetoothString *****************
  2694 ;; Defined at:
  2695 ;;		line 90 in file "Bluetooth.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  a               2   31[COMRAM] PTR unsigned char 
  2698 ;;		 -> STR_15(2), 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  i               2   35[COMRAM] int 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;		None               void
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2710 ;;      Params:         2       0       0       0       0       0       0       0       0
  2711 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2712 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2713 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2714 ;;Total ram usage:        6 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    6
  2717 ;; This function calls:
  2718 ;;		_UART1_Init
  2719 ;;		_WriteUSART
  2720 ;; This function is called by:
  2721 ;;		_Comando_Tablet
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text10
  2726  002308                     __ptext10:
  2727                           	opt stack 0
  2728  002308                     _putcBluetoothString:
  2729                           	opt stack 23
  2730                           
  2731                           ;Bluetooth.c: 92: int i;
  2732                           ;Bluetooth.c: 93: UART1_Init(51);
  2733                           
  2734                           ;incstack = 0
  2735  002308  0E33               	movlw	51
  2736  00230A  ECBE  F014         	call	_UART1_Init
  2737                           
  2738                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2739  00230E  0E00               	movlw	0
  2740  002310  6E25               	movwf	putcBluetoothString@i+1,c
  2741  002312  0E00               	movlw	0
  2742  002314  6E24               	movwf	putcBluetoothString@i,c
  2743  002316  D015               	goto	l5427
  2744  002318                     l5423:
  2745                           
  2746                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2747  002318  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2748  00231C  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2749  002320  5024               	movf	putcBluetoothString@i,w,c
  2750  002322  2622               	addwf	??_putcBluetoothString,f,c
  2751  002324  5025               	movf	putcBluetoothString@i+1,w,c
  2752  002326  2223               	addwfc	??_putcBluetoothString+1,f,c
  2753  002328  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2754  00232C  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2755  002330                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2756  002330  6AF8               	clrf	tblptru,c
  2757  002332                     	endif
  2758  002332                     	if	0	;tblptru may be non-zero
  2759  002332                     	endif
  2760  002332  0008               	tblrd		*
  2761  002334  50F5               	movf	tablat,w,c
  2762  002336  ECAC  F014         	call	_WriteUSART
  2763  00233A                     l59:
  2764  00233A  A2AC               	btfss	4012,1,c	;volatile
  2765  00233C  D7FE               	goto	l59
  2766  00233E  4A24               	infsnz	putcBluetoothString@i,f,c
  2767  002340  2A25               	incf	putcBluetoothString@i+1,f,c
  2768  002342                     l5427:
  2769  002342  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2770  002346  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2771  00234A  5024               	movf	putcBluetoothString@i,w,c
  2772  00234C  2622               	addwf	??_putcBluetoothString,f,c
  2773  00234E  5025               	movf	putcBluetoothString@i+1,w,c
  2774  002350  2223               	addwfc	??_putcBluetoothString+1,f,c
  2775  002352  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2776  002356  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2777  00235A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2778  00235A  6AF8               	clrf	tblptru,c
  2779  00235C                     	endif
  2780  00235C                     	if	0	;tblptru may be non-zero
  2781  00235C                     	endif
  2782  00235C  0008               	tblrd		*
  2783  00235E  50F5               	movf	tablat,w,c
  2784  002360  0900               	iorlw	0
  2785  002362  A4D8               	btfss	status,2,c
  2786  002364  D7D9               	goto	l5423
  2787                           
  2788                           ;Bluetooth.c: 98: }
  2789                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2790  002366  0E4F               	movlw	79
  2791  002368  16AB               	andwf	4011,f,c	;volatile
  2792  00236A  9AAC               	bcf	4012,5,c	;volatile
  2793  00236C  0ECF               	movlw	207
  2794  00236E  169D               	andwf	3997,f,c	;volatile
  2795                           
  2796                           ;Bluetooth.c: 100: return;
  2797  002370  0012               	return	
  2798  002372                     __end_of_putcBluetoothString:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           intcon	equ	0xFF2
  2807                           indf0	equ	0xFEF
  2808                           postinc0	equ	0xFEE
  2809                           fsr0h	equ	0xFEA
  2810                           fsr0l	equ	0xFE9
  2811                           wreg	equ	0xFE8
  2812                           postinc1	equ	0xFE6
  2813                           postdec1	equ	0xFE5
  2814                           fsr1l	equ	0xFE1
  2815                           postinc2	equ	0xFDE
  2816                           status	equ	0xFD8
  2817                           
  2818 ;; *************** function _putcBluetoothInt *****************
  2819 ;; Defined at:
  2820 ;;		line 102 in file "Bluetooth.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  a               2   88[BANK0 ] int 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  s              20    0[BANK1 ] unsigned char [20]
  2825 ;;  i               2   20[BANK1 ] int 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;		None               void
  2828 ;; Registers used:
  2829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2835 ;;      Params:         0       2       0       0       0       0       0       0       0
  2836 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2838 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2839 ;;Total ram usage:       24 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    8
  2842 ;; This function calls:
  2843 ;;		_UART1_Init
  2844 ;;		_WriteUSART
  2845 ;;		_sprintf
  2846 ;; This function is called by:
  2847 ;;		_Comando_Tablet
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text11
  2852  001FA2                     __ptext11:
  2853                           	opt stack 0
  2854  001FA2                     _putcBluetoothInt:
  2855                           	opt stack 21
  2856                           
  2857                           ;Bluetooth.c: 104: int i;
  2858                           ;Bluetooth.c: 105: unsigned char s[20];
  2859                           ;Bluetooth.c: 106: UART1_Init(51);
  2860                           
  2861                           ;incstack = 0
  2862  001FA2  0E33               	movlw	51
  2863  001FA4  ECBE  F014         	call	_UART1_Init
  2864                           
  2865                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2866  001FA8  0101               	movlb	1	; () banked
  2867  001FAA  0E01               	movlw	high putcBluetoothInt@s
  2868  001FAC  0100               	movlb	0	; () banked
  2869  001FAE  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2870  001FB0  0101               	movlb	1	; () banked
  2871  001FB2  0E5A               	movlw	low putcBluetoothInt@s
  2872  001FB4  0100               	movlb	0	; () banked
  2873  001FB6  6F88               	movwf	sprintf@sp& (0+255),b
  2874  001FB8  0E7F               	movlw	high (STR_18+10)
  2875  001FBA  0100               	movlb	0	; () banked
  2876  001FBC  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2877  001FBE  0EB6               	movlw	low (STR_18+10)
  2878  001FC0  0100               	movlb	0	; () banked
  2879  001FC2  6F8A               	movwf	sprintf@f& (0+255),b
  2880  001FC4  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2881  001FC8  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2882  001FCC  EC0E  F000         	call	_sprintf	;wreg free
  2883                           
  2884                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2885  001FD0  0E00               	movlw	0
  2886  001FD2  0101               	movlb	1	; () banked
  2887  001FD4  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2888  001FD6  0E00               	movlw	0
  2889  001FD8  0101               	movlb	1	; () banked
  2890  001FDA  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2891  001FDC  D012               	goto	l5445
  2892  001FDE                     l5441:
  2893                           
  2894                           ; BSR set to: 1
  2895                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2896  001FDE  0101               	movlb	1	; () banked
  2897  001FE0  0E5A               	movlw	low putcBluetoothInt@s
  2898  001FE2  0101               	movlb	1	; () banked
  2899  001FE4  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2900  001FE6  6ED9               	movwf	fsr2l,c
  2901  001FE8  0101               	movlb	1	; () banked
  2902  001FEA  0E01               	movlw	high putcBluetoothInt@s
  2903  001FEC  0101               	movlb	1	; () banked
  2904  001FEE  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2905  001FF0  6EDA               	movwf	fsr2h,c
  2906  001FF2  50DF               	movf	indf2,w,c
  2907  001FF4  ECAC  F014         	call	_WriteUSART
  2908  001FF8                     l68:
  2909  001FF8  A2AC               	btfss	4012,1,c	;volatile
  2910  001FFA  D7FE               	goto	l68
  2911  001FFC  0101               	movlb	1	; () banked
  2912  001FFE  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2913  002000  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2914  002002                     l5445:
  2915                           
  2916                           ; BSR set to: 1
  2917  002002  0101               	movlb	1	; () banked
  2918  002004  0E5A               	movlw	low putcBluetoothInt@s
  2919  002006  0101               	movlb	1	; () banked
  2920  002008  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2921  00200A  6ED9               	movwf	fsr2l,c
  2922  00200C  0101               	movlb	1	; () banked
  2923  00200E  0E01               	movlw	high putcBluetoothInt@s
  2924  002010  0101               	movlb	1	; () banked
  2925  002012  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2926  002014  6EDA               	movwf	fsr2h,c
  2927  002016  50DF               	movf	indf2,w,c
  2928  002018  A4D8               	btfss	status,2,c
  2929  00201A  D7E1               	goto	l5441
  2930                           
  2931                           ; BSR set to: 1
  2932                           ;Bluetooth.c: 112: }
  2933                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2934                           
  2935                           ; BSR set to: 1
  2936  00201C  0E4F               	movlw	79
  2937  00201E  16AB               	andwf	4011,f,c	;volatile
  2938                           
  2939                           ; BSR set to: 1
  2940  002020  9AAC               	bcf	4012,5,c	;volatile
  2941  002022  0ECF               	movlw	207
  2942  002024  169D               	andwf	3997,f,c	;volatile
  2943                           
  2944                           ; BSR set to: 1
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;Bluetooth.c: 114: return;
  2948  002026  0012               	return	
  2949  002028                     __end_of_putcBluetoothInt:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           intcon	equ	0xFF2
  2958                           indf0	equ	0xFEF
  2959                           postinc0	equ	0xFEE
  2960                           fsr0h	equ	0xFEA
  2961                           fsr0l	equ	0xFE9
  2962                           wreg	equ	0xFE8
  2963                           postinc1	equ	0xFE6
  2964                           postdec1	equ	0xFE5
  2965                           fsr1l	equ	0xFE1
  2966                           indf2	equ	0xFDF
  2967                           postinc2	equ	0xFDE
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _WriteUSART *****************
  2973 ;; Defined at:
  2974 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  data            1    wreg     unsigned char 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  data            1   24[COMRAM] unsigned char 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;		None               void
  2981 ;; Registers used:
  2982 ;;		wreg
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0
  2989 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2991 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2992 ;;Total ram usage:        1 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    4
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_putcBluetoothString
  2999 ;;		_putcBluetoothInt
  3000 ;;		_putcTxU1
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text12
  3005  002958                     __ptext12:
  3006                           	opt stack 0
  3007  002958                     _WriteUSART:
  3008                           	opt stack 21
  3009                           
  3010                           ; BSR set to: 1
  3011                           ;incstack = 0
  3012                           ;WriteUSART@data stored from wreg
  3013  002958  6E19               	movwf	WriteUSART@data,c
  3014  00295A  ACAC               	btfss	4012,6,c	;volatile
  3015  00295C  D003               	goto	l4455
  3016  00295E  90AC               	bcf	4012,0,c	;volatile
  3017  002960  B23C               	btfsc	_USART_Status,1,c
  3018  002962  80AC               	bsf	4012,0,c	;volatile
  3019  002964                     l4455:
  3020  002964  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3021  002968  0012               	return	
  3022  00296A                     __end_of_WriteUSART:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           prodh	equ	0xFF4
  3029                           prodl	equ	0xFF3
  3030                           intcon	equ	0xFF2
  3031                           indf0	equ	0xFEF
  3032                           postinc0	equ	0xFEE
  3033                           fsr0h	equ	0xFEA
  3034                           fsr0l	equ	0xFE9
  3035                           wreg	equ	0xFE8
  3036                           postinc1	equ	0xFE6
  3037                           postdec1	equ	0xFE5
  3038                           fsr1l	equ	0xFE1
  3039                           indf2	equ	0xFDF
  3040                           postinc2	equ	0xFDE
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _UART1_Init *****************
  3046 ;; Defined at:
  3047 ;;		line 5 in file "UART1.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  bdr             1    wreg     unsigned char 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  bdr             1   30[COMRAM] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;		None               void
  3054 ;; Registers used:
  3055 ;;		wreg, status,2, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3061 ;;      Params:         0       0       0       0       0       0       0       0       0
  3062 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3064 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3065 ;;Total ram usage:        1 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    5
  3068 ;; This function calls:
  3069 ;;		_OpenUSART
  3070 ;; This function is called by:
  3071 ;;		_BT_Init
  3072 ;;		_putcBluetoothString
  3073 ;;		_putcBluetoothInt
  3074 ;;		_main
  3075 ;;		_EstadoBluetooth
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text13
  3080  00297C                     __ptext13:
  3081                           	opt stack 0
  3082  00297C                     _UART1_Init:
  3083                           	opt stack 25
  3084                           
  3085                           ;incstack = 0
  3086                           ;UART1_Init@bdr stored from wreg
  3087  00297C  6E1F               	movwf	UART1_Init@bdr,c
  3088                           
  3089                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3090  00297E  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3091  002982  6A1A               	clrf	OpenUSART@spbrg+1,c
  3092  002984  0E7C               	movlw	124
  3093  002986  ECB9  F011         	call	_OpenUSART
  3094  00298A  0012               	return	
  3095  00298C                     __end_of_UART1_Init:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon	equ	0xFF2
  3104                           indf0	equ	0xFEF
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           postinc1	equ	0xFE6
  3110                           postdec1	equ	0xFE5
  3111                           fsr1l	equ	0xFE1
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _OpenUSART *****************
  3119 ;; Defined at:
  3120 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  config          1    wreg     unsigned char 
  3123 ;;  spbrg           2   24[COMRAM] unsigned int 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  config          1   29[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, status,2
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3135 ;;      Params:         2       0       0       0       0       0       0       0       0
  3136 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3137 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3138 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3139 ;;Total ram usage:        6 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    4
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_UART1_Init
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text14
  3150  002372                     __ptext14:
  3151                           	opt stack 0
  3152  002372                     _OpenUSART:
  3153                           	opt stack 25
  3154                           
  3155                           ;incstack = 0
  3156                           ;OpenUSART@config stored from wreg
  3157  002372  6E1E               	movwf	OpenUSART@config,c
  3158  002374  0E00               	movlw	0
  3159  002376  6EAC               	movwf	4012,c	;volatile
  3160  002378  0E00               	movlw	0
  3161  00237A  6EAB               	movwf	4011,c	;volatile
  3162  00237C  B01E               	btfsc	OpenUSART@config,0,c
  3163  00237E  88AC               	bsf	4012,4,c	;volatile
  3164  002380  A21E               	btfss	OpenUSART@config,1,c
  3165  002382  D002               	goto	l4749
  3166  002384  8CAC               	bsf	4012,6,c	;volatile
  3167  002386  8CAB               	bsf	4011,6,c	;volatile
  3168  002388                     l4749:
  3169  002388  B41E               	btfsc	OpenUSART@config,2,c
  3170  00238A  8EAC               	bsf	4012,7,c	;volatile
  3171  00238C  A61E               	btfss	OpenUSART@config,3,c
  3172  00238E  D002               	goto	l598
  3173  002390  88AB               	bsf	4011,4,c	;volatile
  3174  002392  D001               	goto	l4757
  3175  002394                     l598:
  3176  002394  8AAB               	bsf	4011,5,c	;volatile
  3177  002396                     l4757:
  3178  002396  B81E               	btfsc	OpenUSART@config,4,c
  3179  002398  84AC               	bsf	4012,2,c	;volatile
  3180  00239A  989E               	bcf	3998,4,c	;volatile
  3181  00239C  BA1E               	btfsc	OpenUSART@config,5,c
  3182  00239E  86AB               	bsf	4011,3,c	;volatile
  3183  0023A0  AC1E               	btfss	OpenUSART@config,6,c
  3184  0023A2  D002               	goto	l602
  3185  0023A4  8A9D               	bsf	3997,5,c	;volatile
  3186  0023A6  D001               	goto	l603
  3187  0023A8                     l602:
  3188  0023A8  9A9D               	bcf	3997,5,c	;volatile
  3189  0023AA                     l603:
  3190  0023AA  9A9E               	bcf	3998,5,c	;volatile
  3191  0023AC  AE1E               	btfss	OpenUSART@config,7,c
  3192  0023AE  D002               	goto	l604
  3193  0023B0  889D               	bsf	3997,4,c	;volatile
  3194  0023B2  D001               	goto	l605
  3195  0023B4                     l604:
  3196  0023B4  989D               	bcf	3997,4,c	;volatile
  3197  0023B6                     l605:
  3198  0023B6  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3199  0023BA  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3200  0023BE  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3201  0023C2  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3202  0023C4  501C               	movf	??_OpenUSART+1,w,c
  3203  0023C6  6EB0               	movwf	4016,c	;volatile
  3204  0023C8  8AAC               	bsf	4012,5,c	;volatile
  3205  0023CA  8EAB               	bsf	4011,7,c	;volatile
  3206  0023CC  9C94               	bcf	3988,6,c	;volatile
  3207  0023CE  8E94               	bsf	3988,7,c	;volatile
  3208  0023D0  B8AC               	btfsc	4012,4,c	;volatile
  3209  0023D2  BEAC               	btfsc	4012,7,c	;volatile
  3210  0023D4  D001               	goto	l607
  3211  0023D6  8C94               	bsf	3988,6,c	;volatile
  3212  0023D8                     l607:
  3213  0023D8  0012               	return	
  3214  0023DA                     __end_of_OpenUSART:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           indf0	equ	0xFEF
  3224                           postinc0	equ	0xFEE
  3225                           fsr0h	equ	0xFEA
  3226                           fsr0l	equ	0xFE9
  3227                           wreg	equ	0xFE8
  3228                           postinc1	equ	0xFE6
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _getCNY70Value *****************
  3238 ;; Defined at:
  3239 ;;		line 3 in file "cny70.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;		None
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  2   24[COMRAM] int 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3253 ;;      Params:         2       0       0       0       0       0       0       0       0
  3254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3256 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3257 ;;Total ram usage:        2 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    4
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_Comando_Tablet
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text15
  3268  001AAC                     __ptext15:
  3269                           	opt stack 0
  3270  001AAC                     _getCNY70Value:
  3271                           	opt stack 25
  3272                           
  3273                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  3274                           
  3275                           ;incstack = 0
  3276  001AAC  B081               	btfsc	3969,0,c	;volatile
  3277  001AAE  A281               	btfss	3969,1,c	;volatile
  3278  001AB0  D005               	goto	l421
  3279  001AB2  A481               	btfss	3969,2,c	;volatile
  3280  001AB4  A681               	btfss	3969,3,c	;volatile
  3281  001AB6  D002               	goto	l421
  3282  001AB8  B881               	btfsc	3969,4,c	;volatile
  3283  001ABA  D04F               	goto	l5595
  3284  001ABC                     l421:
  3285                           
  3286                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3287  001ABC  B081               	btfsc	3969,0,c	;volatile
  3288  001ABE  B281               	btfsc	3969,1,c	;volatile
  3289  001AC0  D005               	goto	l424
  3290  001AC2  B481               	btfsc	3969,2,c	;volatile
  3291  001AC4  A681               	btfss	3969,3,c	;volatile
  3292  001AC6  D002               	goto	l424
  3293  001AC8  B881               	btfsc	3969,4,c	;volatile
  3294  001ACA  D038               	goto	u6740
  3295  001ACC                     l424:
  3296                           
  3297                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3298  001ACC  A081               	btfss	3969,0,c	;volatile
  3299  001ACE  A281               	btfss	3969,1,c	;volatile
  3300  001AD0  D009               	goto	l426
  3301  001AD2  B481               	btfsc	3969,2,c	;volatile
  3302  001AD4  A681               	btfss	3969,3,c	;volatile
  3303  001AD6  D006               	goto	l426
  3304  001AD8  A881               	btfss	3969,4,c	;volatile
  3305  001ADA  D004               	goto	l426
  3306  001ADC                     
  3307                           ;cny70.c: 10: return -2;
  3308  001ADC  0EFF               	movlw	255
  3309  001ADE  6E1A               	movwf	?_getCNY70Value+1,c
  3310  001AE0  0EFE               	movlw	254
  3311  001AE2  D03E               	goto	L5
  3312  001AE4                     l426:
  3313                           
  3314                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3315  001AE4  B081               	btfsc	3969,0,c	;volatile
  3316  001AE6  A281               	btfss	3969,1,c	;volatile
  3317  001AE8  D005               	goto	l428
  3318  001AEA  B481               	btfsc	3969,2,c	;volatile
  3319  001AEC  B681               	btfsc	3969,3,c	;volatile
  3320  001AEE  D002               	goto	l428
  3321  001AF0  B881               	btfsc	3969,4,c	;volatile
  3322  001AF2  D02F               	goto	u6790
  3323  001AF4                     l428:
  3324                           
  3325                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  3326  001AF4  B081               	btfsc	3969,0,c	;volatile
  3327  001AF6  A281               	btfss	3969,1,c	;volatile
  3328  001AF8  D005               	goto	l430
  3329  001AFA  B481               	btfsc	3969,2,c	;volatile
  3330  001AFC  A681               	btfss	3969,3,c	;volatile
  3331  001AFE  D002               	goto	l430
  3332  001B00  A881               	btfss	3969,4,c	;volatile
  3333  001B02  D008               	goto	u6640
  3334  001B04                     l430:
  3335                           
  3336                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  3337  001B04  B081               	btfsc	3969,0,c	;volatile
  3338  001B06  A281               	btfss	3969,1,c	;volatile
  3339  001B08  D009               	goto	l432
  3340  001B0A  B481               	btfsc	3969,2,c	;volatile
  3341  001B0C  B681               	btfsc	3969,3,c	;volatile
  3342  001B0E  D006               	goto	l432
  3343  001B10  B881               	btfsc	3969,4,c	;volatile
  3344  001B12  D004               	goto	l432
  3345  001B14                     u6640:
  3346                           
  3347                           ;cny70.c: 16: return 2;
  3348  001B14  0E00               	movlw	0
  3349  001B16  6E1A               	movwf	?_getCNY70Value+1,c
  3350  001B18  0E02               	movlw	2
  3351  001B1A  D022               	goto	L5
  3352  001B1C                     l432:
  3353                           
  3354                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3355  001B1C  A081               	btfss	3969,0,c	;volatile
  3356  001B1E  B281               	btfsc	3969,1,c	;volatile
  3357  001B20  D005               	goto	l434
  3358  001B22  B481               	btfsc	3969,2,c	;volatile
  3359  001B24  A681               	btfss	3969,3,c	;volatile
  3360  001B26  D002               	goto	l434
  3361  001B28  B881               	btfsc	3969,4,c	;volatile
  3362  001B2A  D7D8               	goto	L6
  3363  001B2C                     l434:
  3364                           
  3365                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3366  001B2C  B081               	btfsc	3969,0,c	;volatile
  3367  001B2E  B281               	btfsc	3969,1,c	;volatile
  3368  001B30  D008               	goto	l436
  3369  001B32  A481               	btfss	3969,2,c	;volatile
  3370  001B34  A681               	btfss	3969,3,c	;volatile
  3371  001B36  D005               	goto	l436
  3372  001B38  A881               	btfss	3969,4,c	;volatile
  3373  001B3A  D003               	goto	l436
  3374  001B3C                     u6740:
  3375                           
  3376                           ;cny70.c: 20: return -1;
  3377  001B3C  6819               	setf	?_getCNY70Value,c
  3378  001B3E  681A               	setf	?_getCNY70Value+1,c
  3379  001B40  D010               	goto	l422
  3380  001B42                     l436:
  3381                           
  3382                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3383  001B42  B081               	btfsc	3969,0,c	;volatile
  3384  001B44  A281               	btfss	3969,1,c	;volatile
  3385  001B46  D009               	goto	l5595
  3386  001B48  A481               	btfss	3969,2,c	;volatile
  3387  001B4A  B681               	btfsc	3969,3,c	;volatile
  3388  001B4C  D006               	goto	l5595
  3389  001B4E  A881               	btfss	3969,4,c	;volatile
  3390  001B50  D004               	goto	l5595
  3391  001B52                     u6790:
  3392                           
  3393                           ;cny70.c: 22: return 1;
  3394  001B52  0E00               	movlw	0
  3395  001B54  6E1A               	movwf	?_getCNY70Value+1,c
  3396  001B56  0E01               	movlw	1
  3397  001B58  D003               	goto	L5
  3398  001B5A                     l5595:
  3399                           
  3400                           ;cny70.c: 23: else
  3401                           ;cny70.c: 24: return 0;
  3402  001B5A  0E00               	movlw	0
  3403  001B5C  6E1A               	movwf	?_getCNY70Value+1,c
  3404  001B5E  0E00               	movlw	0
  3405  001B60                     L5:
  3406  001B60  6E19               	movwf	?_getCNY70Value,c
  3407  001B62                     l422:
  3408  001B62  0012               	return	
  3409  001B64                     __end_of_getCNY70Value:
  3410                           	opt stack 0
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           intcon	equ	0xFF2
  3418                           indf0	equ	0xFEF
  3419                           postinc0	equ	0xFEE
  3420                           fsr0h	equ	0xFEA
  3421                           fsr0l	equ	0xFE9
  3422                           wreg	equ	0xFE8
  3423                           postinc1	equ	0xFE6
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _clrBufferUSART *****************
  3433 ;; Defined at:
  3434 ;;		line 68 in file "Bluetooth.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  i               2   24[COMRAM] int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;		None               void
  3441 ;; Registers used:
  3442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0
  3449 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3451 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3452 ;;Total ram usage:        2 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_Inicializa_Driveby
  3459 ;;		_Comando_Tablet
  3460 ;;		_main
  3461 ;;		_CheckTX
  3462 ;;		_EstadoBluetooth
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text16
  3467  0026F2                     __ptext16:
  3468                           	opt stack 0
  3469  0026F2                     _clrBufferUSART:
  3470                           	opt stack 26
  3471                           
  3472                           ;Bluetooth.c: 69: int i;
  3473                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3474                           
  3475                           ;incstack = 0
  3476  0026F2  0E00               	movlw	0
  3477  0026F4  6E1A               	movwf	clrBufferUSART@i+1,c
  3478  0026F6  0E00               	movlw	0
  3479  0026F8  6E19               	movwf	clrBufferUSART@i,c
  3480  0026FA  501A               	movf	clrBufferUSART@i+1,w,c
  3481  0026FC  0A80               	xorlw	128
  3482  0026FE  0F80               	addlw	-128
  3483  002700  0E14               	movlw	20
  3484  002702  B4D8               	btfsc	status,2,c
  3485  002704  5C19               	subwf	clrBufferUSART@i,w,c
  3486  002706  B0D8               	btfsc	status,0,c
  3487  002708  D00F               	goto	l54
  3488                           
  3489                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3490  00270A  0101               	movlb	1	; () banked
  3491  00270C  0E28               	movlw	low _BluetoothDato
  3492  00270E  2419               	addwf	clrBufferUSART@i,w,c
  3493  002710  6ED9               	movwf	fsr2l,c
  3494  002712  0101               	movlb	1	; () banked
  3495  002714  0E01               	movlw	high _BluetoothDato
  3496  002716  201A               	addwfc	clrBufferUSART@i+1,w,c
  3497  002718  6EDA               	movwf	fsr2h,c
  3498  00271A  0E00               	movlw	0
  3499  00271C  6EDF               	movwf	indf2,c
  3500                           
  3501                           ; BSR set to: 1
  3502                           ;Bluetooth.c: 72: cad = 0;
  3503  00271E  0E00               	movlw	0
  3504  002720  6E3D               	movwf	_cad,c
  3505                           
  3506                           ; BSR set to: 1
  3507  002722  4A19               	infsnz	clrBufferUSART@i,f,c
  3508  002724  2A1A               	incf	clrBufferUSART@i+1,f,c
  3509  002726  D7E9               	goto	L7
  3510  002728                     l54:
  3511  002728  0012               	return	
  3512  00272A                     __end_of_clrBufferUSART:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           intcon	equ	0xFF2
  3521                           indf0	equ	0xFEF
  3522                           postinc0	equ	0xFEE
  3523                           fsr0h	equ	0xFEA
  3524                           fsr0l	equ	0xFE9
  3525                           wreg	equ	0xFE8
  3526                           postinc1	equ	0xFE6
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _PWM_init2 *****************
  3536 ;; Defined at:
  3537 ;;		line 42 in file "pwm.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  period          1    wreg     unsigned char 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  period          1   27[COMRAM] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;		None               void
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3551 ;;      Params:         0       0       0       0       0       0       0       0       0
  3552 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3554 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3555 ;;Total ram usage:        1 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    5
  3558 ;; This function calls:
  3559 ;;		_OpenPWM2
  3560 ;; This function is called by:
  3561 ;;		_Comando_Tablet
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text17
  3566  0028D4                     __ptext17:
  3567                           	opt stack 0
  3568  0028D4                     _PWM_init2:
  3569                           	opt stack 24
  3570                           
  3571                           ;incstack = 0
  3572                           ;PWM_init2@period stored from wreg
  3573  0028D4  6E1C               	movwf	PWM_init2@period,c
  3574                           
  3575                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3576  0028D6  0EFE               	movlw	254
  3577  0028D8  6E47               	movwf	_Timer2Config,c
  3578                           
  3579                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3580  0028DA  5047               	movf	_Timer2Config,w,c
  3581  0028DC  0BFB               	andlw	251
  3582  0028DE  6ECA               	movwf	4042,c	;volatile
  3583                           
  3584                           ;pwm.c: 47: TMR2 = 0;
  3585  0028E0  0E00               	movlw	0
  3586  0028E2  6ECC               	movwf	4044,c	;volatile
  3587                           
  3588                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3589  0028E4  929E               	bcf	3998,1,c	;volatile
  3590                           
  3591                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3592  0028E6  929D               	bcf	3997,1,c	;volatile
  3593                           
  3594                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3595  0028E8  84CA               	bsf	4042,2,c	;volatile
  3596                           
  3597                           ;pwm.c: 51: OpenPWM2(period);
  3598  0028EA  501C               	movf	PWM_init2@period,w,c
  3599  0028EC  EC05  F013         	call	_OpenPWM2
  3600                           
  3601                           ;pwm.c: 53: return;
  3602  0028F0  0012               	return	
  3603  0028F2                     __end_of_PWM_init2:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           indf0	equ	0xFEF
  3613                           postinc0	equ	0xFEE
  3614                           fsr0h	equ	0xFEA
  3615                           fsr0l	equ	0xFE9
  3616                           wreg	equ	0xFE8
  3617                           postinc1	equ	0xFE6
  3618                           postdec1	equ	0xFE5
  3619                           fsr1l	equ	0xFE1
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _OpenPWM2 *****************
  3627 ;; Defined at:
  3628 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  period          1    wreg     unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  period          1   25[COMRAM] unsigned char 
  3633 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3634 ;;  pmmode          1    0        unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;		None               void
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3644 ;;      Params:         0       0       0       0       0       0       0       0       0
  3645 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3646 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3647 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3648 ;;Total ram usage:        3 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    4
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_PWM_init2
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text18
  3659  00260A                     __ptext18:
  3660                           	opt stack 0
  3661  00260A                     _OpenPWM2:
  3662                           	opt stack 24
  3663                           
  3664                           ;incstack = 0
  3665                           ;OpenPWM2@period stored from wreg
  3666  00260A  6E1A               	movwf	OpenPWM2@period,c
  3667  00260C  0E0C               	movlw	12
  3668  00260E  6EBA               	movwf	4026,c	;volatile
  3669  002610  0E05               	movlw	5
  3670  002612  6EF6               	movwf	tblptrl,c
  3671  002614                     	if	1	;There is more than 1 active tblptr byte
  3672  002614  0E00               	movlw	0
  3673  002616  6EF7               	movwf	tblptrh,c
  3674  002618                     	endif
  3675  002618                     	if	1	;There are 3 active tblptr bytes
  3676  002618  0E30               	movlw	48
  3677  00261A  6EF8               	movwf	tblptru,c
  3678  00261C                     	endif
  3679  00261C  0008               	tblrd		*
  3680  00261E  CFF5 F019          	movff	tablat,??_OpenPWM2
  3681  002622  A019               	btfss	??_OpenPWM2,0,c
  3682  002624  D002               	goto	l5365
  3683  002626  681B               	setf	OpenPWM2@ccp2mx,c
  3684  002628  D002               	goto	l564
  3685  00262A                     l5365:
  3686  00262A  0E00               	movlw	0
  3687  00262C  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3688  00262E                     l564:
  3689  00262E  501B               	movf	OpenPWM2@ccp2mx,w,c
  3690  002630  B4D8               	btfsc	status,2,c
  3691  002632  D002               	goto	l565
  3692  002634  9294               	bcf	3988,1,c	;volatile
  3693  002636  D001               	goto	l566
  3694  002638                     l565:
  3695  002638  9693               	bcf	3987,3,c	;volatile
  3696  00263A                     l566:
  3697  00263A  94CA               	bcf	4042,2,c	;volatile
  3698  00263C  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3699  002640  84CA               	bsf	4042,2,c	;volatile
  3700  002642  0012               	return	
  3701  002644                     __end_of_OpenPWM2:
  3702                           	opt stack 0
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           indf0	equ	0xFEF
  3711                           postinc0	equ	0xFEE
  3712                           fsr0h	equ	0xFEA
  3713                           fsr0l	equ	0xFE9
  3714                           wreg	equ	0xFE8
  3715                           postinc1	equ	0xFE6
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           indf2	equ	0xFDF
  3719                           postinc2	equ	0xFDE
  3720                           fsr2h	equ	0xFDA
  3721                           fsr2l	equ	0xFD9
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _PWM_init1 *****************
  3725 ;; Defined at:
  3726 ;;		line 20 in file "pwm.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  period          1    wreg     unsigned char 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  period          1   25[COMRAM] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3740 ;;      Params:         0       0       0       0       0       0       0       0       0
  3741 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3743 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3744 ;;Total ram usage:        1 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    5
  3747 ;; This function calls:
  3748 ;;		_OpenPWM1
  3749 ;; This function is called by:
  3750 ;;		_Comando_Tablet
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text19
  3755  0028F2                     __ptext19:
  3756                           	opt stack 0
  3757  0028F2                     _PWM_init1:
  3758                           	opt stack 24
  3759                           
  3760                           ;incstack = 0
  3761                           ;PWM_init1@period stored from wreg
  3762  0028F2  6E1A               	movwf	PWM_init1@period,c
  3763                           
  3764                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3765  0028F4  0EFE               	movlw	254
  3766  0028F6  6E47               	movwf	_Timer2Config,c
  3767                           
  3768                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3769  0028F8  5047               	movf	_Timer2Config,w,c
  3770  0028FA  0BFB               	andlw	251
  3771  0028FC  6ECA               	movwf	4042,c	;volatile
  3772                           
  3773                           ;pwm.c: 25: TMR2 = 0;
  3774  0028FE  0E00               	movlw	0
  3775  002900  6ECC               	movwf	4044,c	;volatile
  3776                           
  3777                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3778  002902  929E               	bcf	3998,1,c	;volatile
  3779                           
  3780                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3781  002904  929D               	bcf	3997,1,c	;volatile
  3782                           
  3783                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3784  002906  84CA               	bsf	4042,2,c	;volatile
  3785                           
  3786                           ;pwm.c: 29: OpenPWM1(period);
  3787  002908  501A               	movf	PWM_init1@period,w,c
  3788  00290A  ECB5  F014         	call	_OpenPWM1
  3789                           
  3790                           ;pwm.c: 31: return;
  3791  00290E  0012               	return	
  3792  002910                     __end_of_PWM_init1:
  3793                           	opt stack 0
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           indf0	equ	0xFEF
  3802                           postinc0	equ	0xFEE
  3803                           fsr0h	equ	0xFEA
  3804                           fsr0l	equ	0xFE9
  3805                           wreg	equ	0xFE8
  3806                           postinc1	equ	0xFE6
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function _OpenPWM1 *****************
  3816 ;; Defined at:
  3817 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  period          1    wreg     unsigned char 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  period          1   24[COMRAM] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;		None               void
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3831 ;;      Params:         0       0       0       0       0       0       0       0       0
  3832 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3834 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3835 ;;Total ram usage:        1 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    4
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_PWM_init1
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text20
  3846  00296A                     __ptext20:
  3847                           	opt stack 0
  3848  00296A                     _OpenPWM1:
  3849                           	opt stack 24
  3850                           
  3851                           ;incstack = 0
  3852                           ;OpenPWM1@period stored from wreg
  3853  00296A  6E19               	movwf	OpenPWM1@period,c
  3854  00296C  0E0C               	movlw	12
  3855  00296E  12BD               	iorwf	4029,f,c	;volatile
  3856  002970  9494               	bcf	3988,2,c	;volatile
  3857  002972  94CA               	bcf	4042,2,c	;volatile
  3858  002974  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3859  002978  84CA               	bsf	4042,2,c	;volatile
  3860  00297A  0012               	return	
  3861  00297C                     __end_of_OpenPWM1:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           indf0	equ	0xFEF
  3871                           postinc0	equ	0xFEE
  3872                           fsr0h	equ	0xFEA
  3873                           fsr0l	equ	0xFE9
  3874                           wreg	equ	0xFE8
  3875                           postinc1	equ	0xFE6
  3876                           postdec1	equ	0xFE5
  3877                           fsr1l	equ	0xFE1
  3878                           indf2	equ	0xFDF
  3879                           postinc2	equ	0xFDE
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _PWM_DutyCycle2 *****************
  3885 ;; Defined at:
  3886 ;;		line 55 in file "pwm.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  percentageDu    1    wreg     unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3891 ;;  DC              2   41[BANK0 ] unsigned int 
  3892 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;		None               void
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3902 ;;      Params:         0       0       0       0       0       0       0       0       0
  3903 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3904 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3905 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3906 ;;Total ram usage:        9 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    6
  3909 ;; This function calls:
  3910 ;;		_SetDCPWM2
  3911 ;;		___ftmul
  3912 ;;		___fttol
  3913 ;;		___lbtoft
  3914 ;; This function is called by:
  3915 ;;		_Comando_Tablet
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text21
  3920  0020AA                     __ptext21:
  3921                           	opt stack 0
  3922  0020AA                     _PWM_DutyCycle2:
  3923                           	opt stack 23
  3924                           
  3925                           ;incstack = 0
  3926                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3927  0020AA  0100               	movlb	0	; () banked
  3928  0020AC  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3932  0020AE  0E00               	movlw	0
  3933  0020B0  0100               	movlb	0	; () banked
  3934  0020B2  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3935  0020B4  0E00               	movlw	0
  3936  0020B6  0100               	movlb	0	; () banked
  3937  0020B8  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3938  0020BA  0E00               	movlw	0
  3939  0020BC  0100               	movlb	0	; () banked
  3940  0020BE  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3941  0020C0  0E00               	movlw	0
  3942  0020C2  0100               	movlb	0	; () banked
  3943  0020C4  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3947  0020C6  0EAE               	movlw	174
  3948  0020C8  0100               	movlb	0	; () banked
  3949  0020CA  6F63               	movwf	___ftmul@f2& (0+255),b
  3950  0020CC  0E23               	movlw	35
  3951  0020CE  0100               	movlb	0	; () banked
  3952  0020D0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3953  0020D2  0E41               	movlw	65
  3954  0020D4  0100               	movlb	0	; () banked
  3955  0020D6  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3956  0020D8  0100               	movlb	0	; () banked
  3957  0020DA  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3958  0020DC  EC38  F014         	call	___lbtoft
  3959  0020E0  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3960  0020E4  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3961  0020E8  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3962  0020EC  EC6F  F009         	call	___ftmul	;wreg free
  3963  0020F0  C060  F073         	movff	?___ftmul,___fttol@f1
  3964  0020F4  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3965  0020F8  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3966  0020FC  EC1B  F00A         	call	___fttol	;wreg free
  3967  002100  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3968  002104  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3969  002108  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3970  00210C  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3971  002110  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3972  002114  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3973                           
  3974                           ;pwm.c: 60: SetDCPWM2(DC);
  3975  002118  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3976  00211C  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3977  002120  EC22  F013         	call	_SetDCPWM2	;wreg free
  3978                           
  3979                           ;pwm.c: 61: return;
  3980  002124  0012               	return	
  3981  002126                     __end_of_PWM_DutyCycle2:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           indf0	equ	0xFEF
  3991                           postinc0	equ	0xFEE
  3992                           fsr0h	equ	0xFEA
  3993                           fsr0l	equ	0xFE9
  3994                           wreg	equ	0xFE8
  3995                           postinc1	equ	0xFE6
  3996                           postdec1	equ	0xFE5
  3997                           fsr1l	equ	0xFE1
  3998                           indf2	equ	0xFDF
  3999                           postinc2	equ	0xFDE
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _SetDCPWM2 *****************
  4005 ;; Defined at:
  4006 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4011 ;; Return value:  Size  Location     Type
  4012 ;;		None               void
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4020 ;;      Params:         2       0       0       0       0       0       0       0       0
  4021 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4022 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4023 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4024 ;;Total ram usage:        6 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    4
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_PWM_DutyCycle2
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text22
  4035  002644                     __ptext22:
  4036                           	opt stack 0
  4037  002644                     _SetDCPWM2:
  4038                           	opt stack 24
  4039                           
  4040                           ;incstack = 0
  4041  002644  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4042  002648  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4043  00264C  0E06               	movlw	6
  4044  00264E                     u6255:
  4045  00264E  90D8               	bcf	status,0,c
  4046  002650  361B               	rlcf	??_SetDCPWM2,f,c
  4047  002652  361C               	rlcf	??_SetDCPWM2+1,f,c
  4048  002654  2EE8               	decfsz	wreg,f,c
  4049  002656  D7FB               	goto	u6255
  4050  002658  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4051  00265C  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4052  002660  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4053  002664  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4054  002668  90D8               	bcf	status,0,c
  4055  00266A  321B               	rrcf	??_SetDCPWM2,f,c
  4056  00266C  90D8               	bcf	status,0,c
  4057  00266E  321B               	rrcf	??_SetDCPWM2,f,c
  4058  002670  0E30               	movlw	48
  4059  002672  161B               	andwf	??_SetDCPWM2,f,c
  4060  002674  50BA               	movf	4026,w,c	;volatile
  4061  002676  0BCF               	andlw	207
  4062  002678  101B               	iorwf	??_SetDCPWM2,w,c
  4063  00267A  6EBA               	movwf	4026,c	;volatile
  4064  00267C  0012               	return	
  4065  00267E                     __end_of_SetDCPWM2:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           intcon	equ	0xFF2
  4074                           indf0	equ	0xFEF
  4075                           postinc0	equ	0xFEE
  4076                           fsr0h	equ	0xFEA
  4077                           fsr0l	equ	0xFE9
  4078                           wreg	equ	0xFE8
  4079                           postinc1	equ	0xFE6
  4080                           postdec1	equ	0xFE5
  4081                           fsr1l	equ	0xFE1
  4082                           indf2	equ	0xFDF
  4083                           postinc2	equ	0xFDE
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _PWM_DutyCycle1 *****************
  4089 ;; Defined at:
  4090 ;;		line 33 in file "pwm.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  percentageDu    1    wreg     unsigned char 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  4095 ;;  DC              2   41[BANK0 ] unsigned int 
  4096 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4106 ;;      Params:         0       0       0       0       0       0       0       0       0
  4107 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4108 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4109 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4110 ;;Total ram usage:        9 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    6
  4113 ;; This function calls:
  4114 ;;		_SetDCPWM1
  4115 ;;		___ftmul
  4116 ;;		___fttol
  4117 ;;		___lbtoft
  4118 ;; This function is called by:
  4119 ;;		_Comando_Tablet
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text23
  4124  002126                     __ptext23:
  4125                           	opt stack 0
  4126  002126                     _PWM_DutyCycle1:
  4127                           	opt stack 23
  4128                           
  4129                           ;incstack = 0
  4130                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4131  002126  0100               	movlb	0	; () banked
  4132  002128  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4136  00212A  0E00               	movlw	0
  4137  00212C  0100               	movlb	0	; () banked
  4138  00212E  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4139  002130  0E00               	movlw	0
  4140  002132  0100               	movlb	0	; () banked
  4141  002134  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4142  002136  0E00               	movlw	0
  4143  002138  0100               	movlb	0	; () banked
  4144  00213A  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4145  00213C  0E00               	movlw	0
  4146  00213E  0100               	movlb	0	; () banked
  4147  002140  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4151  002142  0EAE               	movlw	174
  4152  002144  0100               	movlb	0	; () banked
  4153  002146  6F63               	movwf	___ftmul@f2& (0+255),b
  4154  002148  0E23               	movlw	35
  4155  00214A  0100               	movlb	0	; () banked
  4156  00214C  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4157  00214E  0E41               	movlw	65
  4158  002150  0100               	movlb	0	; () banked
  4159  002152  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4160  002154  0100               	movlb	0	; () banked
  4161  002156  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4162  002158  EC38  F014         	call	___lbtoft
  4163  00215C  C021  F060         	movff	?___lbtoft,___ftmul@f1
  4164  002160  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  4165  002164  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  4166  002168  EC6F  F009         	call	___ftmul	;wreg free
  4167  00216C  C060  F073         	movff	?___ftmul,___fttol@f1
  4168  002170  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  4169  002174  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  4170  002178  EC1B  F00A         	call	___fttol	;wreg free
  4171  00217C  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  4172  002180  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4173  002184  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4174  002188  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4175  00218C  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4176  002190  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4177                           
  4178                           ;pwm.c: 38: SetDCPWM1(DC);
  4179  002194  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4180  002198  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4181  00219C  EC3F  F013         	call	_SetDCPWM1	;wreg free
  4182                           
  4183                           ;pwm.c: 39: return;
  4184  0021A0  0012               	return	
  4185  0021A2                     __end_of_PWM_DutyCycle1:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           indf0	equ	0xFEF
  4195                           postinc0	equ	0xFEE
  4196                           fsr0h	equ	0xFEA
  4197                           fsr0l	equ	0xFE9
  4198                           wreg	equ	0xFE8
  4199                           postinc1	equ	0xFE6
  4200                           postdec1	equ	0xFE5
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function ___lbtoft *****************
  4209 ;; Defined at:
  4210 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  c               1    wreg     unsigned char 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  c               1   35[COMRAM] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  3   32[COMRAM] float 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2, status,0, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4224 ;;      Params:         3       0       0       0       0       0       0       0       0
  4225 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4227 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4228 ;;Total ram usage:        4 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    5
  4231 ;; This function calls:
  4232 ;;		___ftpack
  4233 ;; This function is called by:
  4234 ;;		_PWM_DutyCycle1
  4235 ;;		_PWM_DutyCycle2
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text24
  4240  002870                     __ptext24:
  4241                           	opt stack 0
  4242  002870                     ___lbtoft:
  4243                           	opt stack 23
  4244                           
  4245                           ;incstack = 0
  4246                           ;___lbtoft@c stored from wreg
  4247  002870  6E24               	movwf	___lbtoft@c,c
  4248  002872  5024               	movf	___lbtoft@c,w,c
  4249  002874  6E19               	movwf	___ftpack@arg,c
  4250  002876  6A1A               	clrf	___ftpack@arg+1,c
  4251  002878  6A1B               	clrf	___ftpack@arg+2,c
  4252  00287A  0E8E               	movlw	142
  4253  00287C  6E1C               	movwf	___ftpack@exp,c
  4254  00287E  0E00               	movlw	0
  4255  002880  6E1D               	movwf	___ftpack@sign,c
  4256  002882  ECB2  F00D         	call	___ftpack	;wreg free
  4257  002886  C019  F021         	movff	?___ftpack,?___lbtoft
  4258  00288A  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4259  00288E  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4260  002892  0012               	return	
  4261  002894                     __end_of___lbtoft:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           indf0	equ	0xFEF
  4271                           postinc0	equ	0xFEE
  4272                           fsr0h	equ	0xFEA
  4273                           fsr0l	equ	0xFE9
  4274                           wreg	equ	0xFE8
  4275                           postinc1	equ	0xFE6
  4276                           postdec1	equ	0xFE5
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _SetDCPWM1 *****************
  4285 ;; Defined at:
  4286 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4300 ;;      Params:         2       0       0       0       0       0       0       0       0
  4301 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4302 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4303 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4304 ;;Total ram usage:        6 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    4
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_PWM_DutyCycle1
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text25
  4315  00267E                     __ptext25:
  4316                           	opt stack 0
  4317  00267E                     _SetDCPWM1:
  4318                           	opt stack 24
  4319                           
  4320                           ;incstack = 0
  4321  00267E  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4322  002682  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4323  002686  0E06               	movlw	6
  4324  002688                     u6225:
  4325  002688  90D8               	bcf	status,0,c
  4326  00268A  361B               	rlcf	??_SetDCPWM1,f,c
  4327  00268C  361C               	rlcf	??_SetDCPWM1+1,f,c
  4328  00268E  2EE8               	decfsz	wreg,f,c
  4329  002690  D7FB               	goto	u6225
  4330  002692  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4331  002696  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4332  00269A  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4333  00269E  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4334  0026A2  90D8               	bcf	status,0,c
  4335  0026A4  321B               	rrcf	??_SetDCPWM1,f,c
  4336  0026A6  90D8               	bcf	status,0,c
  4337  0026A8  321B               	rrcf	??_SetDCPWM1,f,c
  4338  0026AA  0E30               	movlw	48
  4339  0026AC  161B               	andwf	??_SetDCPWM1,f,c
  4340  0026AE  50BD               	movf	4029,w,c	;volatile
  4341  0026B0  0BCF               	andlw	207
  4342  0026B2  101B               	iorwf	??_SetDCPWM1,w,c
  4343  0026B4  6EBD               	movwf	4029,c	;volatile
  4344  0026B6  0012               	return	
  4345  0026B8                     __end_of_SetDCPWM1:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           indf0	equ	0xFEF
  4355                           postinc0	equ	0xFEE
  4356                           fsr0h	equ	0xFEA
  4357                           fsr0l	equ	0xFE9
  4358                           wreg	equ	0xFE8
  4359                           postinc1	equ	0xFE6
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           indf2	equ	0xFDF
  4363                           postinc2	equ	0xFDE
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _Lcd_Write_Integer *****************
  4369 ;; Defined at:
  4370 ;;		line 113 in file "lcd.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  a               2   88[BANK0 ] int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  s              20   90[BANK0 ] unsigned char [20]
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4384 ;;      Params:         0       2       0       0       0       0       0       0       0
  4385 ;;      Locals:         0      20       0       0       0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4387 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4388 ;;Total ram usage:       22 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    8
  4391 ;; This function calls:
  4392 ;;		_Lcd_Write_String
  4393 ;;		_sprintf
  4394 ;; This function is called by:
  4395 ;;		_Comando_Tablet
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text26
  4400  0026B8                     __ptext26:
  4401                           	opt stack 0
  4402  0026B8                     _Lcd_Write_Integer:
  4403                           	opt stack 21
  4404                           
  4405                           ;lcd.c: 114: unsigned char s[20];
  4406                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4407                           
  4408                           ;incstack = 0
  4409  0026B8  0100               	movlb	0	; () banked
  4410  0026BA  0E00               	movlw	high Lcd_Write_Integer@s
  4411  0026BC  0100               	movlb	0	; () banked
  4412  0026BE  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4413  0026C0  0100               	movlb	0	; () banked
  4414  0026C2  0EBA               	movlw	low Lcd_Write_Integer@s
  4415  0026C4  0100               	movlb	0	; () banked
  4416  0026C6  6F88               	movwf	sprintf@sp& (0+255),b
  4417  0026C8  0E7F               	movlw	high STR_18
  4418  0026CA  0100               	movlb	0	; () banked
  4419  0026CC  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4420  0026CE  0EAC               	movlw	low STR_18
  4421  0026D0  0100               	movlb	0	; () banked
  4422  0026D2  6F8A               	movwf	sprintf@f& (0+255),b
  4423  0026D4  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4424  0026D8  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4425  0026DC  EC0E  F000         	call	_sprintf	;wreg free
  4426                           
  4427                           ;lcd.c: 117: Lcd_Write_String(s);
  4428  0026E0  0100               	movlb	0	; () banked
  4429  0026E2  0E00               	movlw	high Lcd_Write_Integer@s
  4430  0026E4  6E1E               	movwf	Lcd_Write_String@a+1,c
  4431  0026E6  0100               	movlb	0	; () banked
  4432  0026E8  0EBA               	movlw	low Lcd_Write_Integer@s
  4433  0026EA  6E1D               	movwf	Lcd_Write_String@a,c
  4434  0026EC  ECD1  F010         	call	_Lcd_Write_String	;wreg free
  4435  0026F0  0012               	return	
  4436  0026F2                     __end_of_Lcd_Write_Integer:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           indf0	equ	0xFEF
  4446                           postinc0	equ	0xFEE
  4447                           fsr0h	equ	0xFEA
  4448                           fsr0l	equ	0xFE9
  4449                           wreg	equ	0xFE8
  4450                           postinc1	equ	0xFE6
  4451                           postdec1	equ	0xFE5
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8
  4458                           
  4459 ;; *************** function _sprintf *****************
  4460 ;; Defined at:
  4461 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4464 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4465 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4466 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  vd              4   60[BANK0 ] unsigned long 
  4469 ;;  vd              4   64[BANK0 ] unsigned long 
  4470 ;;  _val            5   77[BANK0 ] struct .
  4471 ;;  fval            3   84[BANK0 ] struct .
  4472 ;;  integ           3   72[BANK0 ] struct .
  4473 ;;  ival            3    0        struct .
  4474 ;;  exp             2   82[BANK0 ] int 
  4475 ;;  prec            2   75[BANK0 ] int 
  4476 ;;  flag            2   70[BANK0 ] unsigned short 
  4477 ;;  ap              2   68[BANK0 ] PTR void [1]
  4478 ;;		 -> ?_sprintf(2), 
  4479 ;;  width           2    0        int 
  4480 ;;  c               1   87[BANK0 ] char 
  4481 ;;  d               1    0        unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  2   40[BANK0 ] int 
  4484 ;; Registers used:
  4485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4491 ;;      Params:         0       7       0       0       0       0       0       0       0
  4492 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4493 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4494 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4495 ;;Total ram usage:       48 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    7
  4498 ;; This function calls:
  4499 ;;		___awdiv
  4500 ;;		___ftadd
  4501 ;;		___ftge
  4502 ;;		___ftmul
  4503 ;;		___ftneg
  4504 ;;		___ftsub
  4505 ;;		___fttol
  4506 ;;		___lldiv
  4507 ;;		___llmod
  4508 ;;		___lltoft
  4509 ;;		___wmul
  4510 ;;		__div_to_l_
  4511 ;;		__tdiv_to_l_
  4512 ;;		_fround
  4513 ;;		_scale
  4514 ;; This function is called by:
  4515 ;;		_putcBluetoothInt
  4516 ;;		_Lcd_Write_Integer
  4517 ;;		_Lcd_Write_Float
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text27
  4522  00001C                     __ptext27:
  4523                           	opt stack 0
  4524  00001C                     _sprintf:
  4525                           	opt stack 21
  4526                           
  4527                           ;doprnt.c: 494: va_list ap;
  4528                           ;doprnt.c: 499: signed char c;
  4529                           ;doprnt.c: 501: int width;
  4530                           ;doprnt.c: 504: int prec;
  4531                           ;doprnt.c: 508: unsigned short flag;
  4532                           ;doprnt.c: 515: char d;
  4533                           ;doprnt.c: 516: double fval, integ;
  4534                           ;doprnt.c: 517: int exp;
  4535                           ;doprnt.c: 518: double ival;
  4536                           ;doprnt.c: 519: union {
  4537                           ;doprnt.c: 520: unsigned long _val;
  4538                           ;doprnt.c: 521: struct {
  4539                           ;doprnt.c: 522: const char * _cp;
  4540                           ;doprnt.c: 523: unsigned _len;
  4541                           ;doprnt.c: 524: } _str;
  4542                           ;doprnt.c: 525: } _val;
  4543                           ;doprnt.c: 542: *ap = __va_start();
  4544                           
  4545                           ;incstack = 0
  4546  00001C  0100               	movlb	0	; () banked
  4547  00001E  0E00               	movlw	high (?_sprintf+4)
  4548  000020  0100               	movlb	0	; () banked
  4549  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4550  000024  0100               	movlb	0	; () banked
  4551  000026  0E8C               	movlw	low (?_sprintf+4)
  4552  000028  0100               	movlb	0	; () banked
  4553  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4554                           
  4555                           ;doprnt.c: 545: while(c = *f++) {
  4556  00002C  EF87  F004         	goto	l5321
  4557  000030                     l5119:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 547: if(c != '%')
  4561  000030  0100               	movlb	0	; () banked
  4562  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4563  000034  0A25               	xorlw	37
  4564  000036  B4D8               	btfsc	status,2,c
  4565  000038  D00C               	goto	l5125
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;doprnt.c: 549: {
  4569                           ;doprnt.c: 550: ((*sp++ = (c)));
  4570  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4571  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4572  000042  0100               	movlb	0	; () banked
  4573  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4574                           
  4575                           ; BSR set to: 0
  4576  000048  0100               	movlb	0	; () banked
  4577  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4578  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4579                           
  4580                           ;doprnt.c: 551: continue;
  4581  00004E  EF87  F004         	goto	l5321
  4582  000052                     l5125:
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;doprnt.c: 552: }
  4586                           ;doprnt.c: 557: flag = 0;
  4587  000052  0E00               	movlw	0
  4588  000054  0100               	movlb	0	; () banked
  4589  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4590  000058  0E00               	movlw	0
  4591  00005A  0100               	movlb	0	; () banked
  4592  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4593                           
  4594                           ;doprnt.c: 644: switch(c = *f++) {
  4595  00005E  D003               	goto	l5131
  4596  000060                     l5127:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;doprnt.c: 672: flag |= 0x400;
  4600  000060  0100               	movlb	0	; () banked
  4601  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4602                           
  4603                           ;doprnt.c: 673: break;
  4604  000064  D01E               	goto	l5133
  4605  000066                     l5131:
  4606                           
  4607                           ; BSR set to: 0
  4608  000066  0100               	movlb	0	; () banked
  4609  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4610  00006C  0100               	movlb	0	; () banked
  4611  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4612  000072  0100               	movlb	0	; () banked
  4613  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4614  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4615  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4616  000078  6AF8               	clrf	tblptru,c
  4617  00007A                     	endif
  4618  00007A                     	if	0	;tblptru may be non-zero
  4619  00007A                     	endif
  4620  00007A  0008               	tblrd		*
  4621  00007C  0100               	movlb	0	; () banked
  4622  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4623  000082  0100               	movlb	0	; () banked
  4624  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4625                           
  4626                           ; Switch size 1, requested type "space"
  4627                           ; Number of cases is 4, Range of values is 0 to 105
  4628                           ; switch strategies available:
  4629                           ; Name         Instructions Cycles
  4630                           ; simple_byte           13     7 (average)
  4631                           ;	Chosen strategy is simple_byte
  4632  000086  0A00               	xorlw	0	; case 0
  4633  000088  B4D8               	btfsc	status,2,c
  4634  00008A  EF99  F004         	goto	l5323
  4635  00008E  0A64               	xorlw	100	; case 100
  4636  000090  B4D8               	btfsc	status,2,c
  4637  000092  D007               	goto	l5133
  4638  000094  0A02               	xorlw	2	; case 102
  4639  000096  B4D8               	btfsc	status,2,c
  4640  000098  D7E3               	goto	l5127
  4641  00009A  0A0F               	xorlw	15	; case 105
  4642  00009C  A4D8               	btfss	status,2,c
  4643  00009E  EF87  F004         	goto	l5321
  4644  0000A2                     l5133:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;doprnt.c: 834: if(flag & (0x700)) {
  4648  0000A2  0E07               	movlw	7
  4649  0000A4  0100               	movlb	0	; () banked
  4650  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4651  0000A8  B4D8               	btfsc	status,2,c
  4652  0000AA  D348               	goto	l5281
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;doprnt.c: 838: prec = 6;
  4656  0000AC  0E00               	movlw	0
  4657  0000AE  0100               	movlb	0	; () banked
  4658  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4659  0000B2  0E06               	movlw	6
  4660  0000B4  0100               	movlb	0	; () banked
  4661  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4665  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4666  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4667  0000C0  0100               	movlb	0	; () banked
  4668  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4669  0000C6  0100               	movlb	0	; () banked
  4670  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4671  0000CC  0100               	movlb	0	; () banked
  4672  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4673                           
  4674                           ; BSR set to: 0
  4675  0000D2  0E03               	movlw	3
  4676  0000D4  0100               	movlb	0	; () banked
  4677  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4678  0000D8  0E00               	movlw	0
  4679  0000DA  0100               	movlb	0	; () banked
  4680  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 840: if(fval < 0.0) {
  4684  0000DE  0100               	movlb	0	; () banked
  4685  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4686  0000E2  0A80               	xorlw	128
  4687  0000E4  0F80               	addlw	128
  4688  0000E6  E107               	bnz	u5905
  4689  0000E8  0E00               	movlw	0
  4690  0000EA  0100               	movlb	0	; () banked
  4691  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4692  0000EE  E103               	bnz	u5905
  4693  0000F0  0E00               	movlw	0
  4694  0000F2  0100               	movlb	0	; () banked
  4695  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4696  0000F6                     u5905:
  4697  0000F6  B0D8               	btfsc	status,0,c
  4698  0000F8  D011               	goto	l5147
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 841: fval = -fval;
  4702  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4703  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4704  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4705  000106  EC25  F014         	call	___ftneg	;wreg free
  4706  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4707  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4708  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4709                           
  4710                           ;doprnt.c: 842: flag |= 0x03;
  4711  000116  0E03               	movlw	3
  4712  000118  0100               	movlb	0	; () banked
  4713  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4714  00011C                     l5147:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;doprnt.c: 843: }
  4718                           ;doprnt.c: 844: exp = 0;
  4719  00011C  0E00               	movlw	0
  4720  00011E  0100               	movlb	0	; () banked
  4721  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4722  000122  0E00               	movlw	0
  4723  000124  0100               	movlb	0	; () banked
  4724  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 845: if( fval!=0) {
  4728  000128  0E7F               	movlw	127
  4729  00012A  0100               	movlb	0	; () banked
  4730  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4731  00012E  0100               	movlb	0	; () banked
  4732  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4733  000132  0100               	movlb	0	; () banked
  4734  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4735  000136  B4D8               	btfsc	status,2,c
  4736  000138  D09C               	goto	l5175
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4740  00013A  0E82               	movlw	130
  4741  00013C  0100               	movlb	0	; () banked
  4742  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4743  000140  0EFF               	movlw	255
  4744  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4745  000144  0100               	movlb	0	; () banked
  4746  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4747  00014A  0100               	movlb	0	; () banked
  4748  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4749  000150  0100               	movlb	0	; () banked
  4750  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4751  000156  0100               	movlb	0	; () banked
  4752  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4753  00015C  0E10               	movlw	16
  4754  00015E  D006               	goto	u5920
  4755  000160                     u5925:
  4756  000160  0100               	movlb	0	; () banked
  4757  000162  90D8               	bcf	status,0,c
  4758  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4759  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4760  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4761  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4762  00016C                     u5920:
  4763  00016C  2EE8               	decfsz	wreg,f,c
  4764  00016E  D7F8               	goto	u5925
  4765  000170  0100               	movlb	0	; () banked
  4766  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4767  000174  0100               	movlb	0	; () banked
  4768  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4769  000178  0100               	movlb	0	; () banked
  4770  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4771  00017C  0E00               	movlw	0
  4772  00017E  0100               	movlb	0	; () banked
  4773  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4774  000182  0100               	movlb	0	; () banked
  4775  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 847: exp--;
  4779  000186  0100               	movlb	0	; () banked
  4780  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4781  00018A  A0D8               	btfss	status,0,c
  4782  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 848: exp *= 3;
  4786  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4787  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4788  000196  0E00               	movlw	0
  4789  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4790  00019A  0E03               	movlw	3
  4791  00019C  6E29               	movwf	___wmul@multiplicand,c
  4792  00019E  EC12  F014         	call	___wmul	;wreg free
  4793  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4794  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4795                           
  4796                           ;doprnt.c: 849: exp /= 10;
  4797  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4798  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4799  0001B2  0E00               	movlw	0
  4800  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4801  0001B6  0E0A               	movlw	10
  4802  0001B8  6E21               	movwf	___awdiv@divisor,c
  4803  0001BA  EC59  F00E         	call	___awdiv	;wreg free
  4804  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4805  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4806                           
  4807                           ;doprnt.c: 850: if(exp < 0)
  4808  0001C6  0100               	movlb	0	; () banked
  4809  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4810  0001CA  0A80               	xorlw	128
  4811  0001CC  6EF3               	movwf	prodl,c
  4812  0001CE  0E80               	movlw	128
  4813  0001D0  5CF3               	subwf	prodl,w,c
  4814  0001D2  0E00               	movlw	0
  4815  0001D4  B4D8               	btfsc	status,2,c
  4816  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4817  0001D8  B0D8               	btfsc	status,0,c
  4818  0001DA  D004               	goto	l5163
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;doprnt.c: 851: exp--;
  4822  0001DC  0100               	movlb	0	; () banked
  4823  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4824  0001E0  A0D8               	btfss	status,0,c
  4825  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4826  0001E4                     l5163:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 855: integ = scale(-exp);
  4830  0001E4  0100               	movlb	0	; () banked
  4831  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4832  0001E8  0800               	sublw	0
  4833  0001EA  ECA0  F004         	call	_scale
  4834  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4835  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4836  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4837                           
  4838                           ;doprnt.c: 856: integ *= fval;
  4839  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4840  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4841  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4842  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4843  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4844  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4845  000212  EC6F  F009         	call	___ftmul	;wreg free
  4846  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4847  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4848  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4849                           
  4850                           ;doprnt.c: 857: if(integ < 1.0)
  4851  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4852  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4853  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4854  00022E  0E00               	movlw	0
  4855  000230  6E1C               	movwf	___ftge@ff2,c
  4856  000232  0E80               	movlw	128
  4857  000234  6E1D               	movwf	___ftge@ff2+1,c
  4858  000236  0E3F               	movlw	63
  4859  000238  6E1E               	movwf	___ftge@ff2+2,c
  4860  00023A  EC89  F00F         	call	___ftge	;wreg free
  4861  00023E  B0D8               	btfsc	status,0,c
  4862  000240  D005               	goto	l5171
  4863                           
  4864                           ;doprnt.c: 858: exp--;
  4865  000242  0100               	movlb	0	; () banked
  4866  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4867  000246  A0D8               	btfss	status,0,c
  4868  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4869  00024A  D013               	goto	l5175
  4870  00024C                     l5171:
  4871                           
  4872                           ;doprnt.c: 859: else if(integ >= 10.0)
  4873  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4874  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4875  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4876  000258  0E00               	movlw	0
  4877  00025A  6E1C               	movwf	___ftge@ff2,c
  4878  00025C  0E20               	movlw	32
  4879  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4880  000260  0E41               	movlw	65
  4881  000262  6E1E               	movwf	___ftge@ff2+2,c
  4882  000264  EC89  F00F         	call	___ftge	;wreg free
  4883  000268  A0D8               	btfss	status,0,c
  4884  00026A  D003               	goto	l5175
  4885                           
  4886                           ;doprnt.c: 860: exp++;
  4887  00026C  0100               	movlb	0	; () banked
  4888  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4889  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4890  000272                     l5175:
  4891                           
  4892                           ;doprnt.c: 861: }
  4893                           ;doprnt.c: 1121: if(prec <= 12)
  4894  000272  0100               	movlb	0	; () banked
  4895  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4896  000276  0A80               	xorlw	128
  4897  000278  6EF3               	movwf	prodl,c
  4898  00027A  0E80               	movlw	128
  4899  00027C  5CF3               	subwf	prodl,w,c
  4900  00027E  0E0D               	movlw	13
  4901  000280  B4D8               	btfsc	status,2,c
  4902  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4903  000284  B0D8               	btfsc	status,0,c
  4904  000286  D018               	goto	l5179
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;doprnt.c: 1122: fval += fround(prec);
  4908  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4909  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4910  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4911  000294  0100               	movlb	0	; () banked
  4912  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4913  000298  ECDC  F006         	call	_fround
  4914  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4915  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4916  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4917  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4918  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4919  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4920  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4921  0002B8                     l5179:
  4922                           
  4923                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4924  0002B8  0100               	movlb	0	; () banked
  4925  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4926  0002BC  0A80               	xorlw	128
  4927  0002BE  6EF3               	movwf	prodl,c
  4928  0002C0  0E80               	movlw	128
  4929  0002C2  5CF3               	subwf	prodl,w,c
  4930  0002C4  0E0A               	movlw	10
  4931  0002C6  B4D8               	btfsc	status,2,c
  4932  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4933  0002CA  B0D8               	btfsc	status,0,c
  4934  0002CC  D029               	goto	l5187
  4935                           
  4936                           ; BSR set to: 0
  4937  0002CE  0E7F               	movlw	127
  4938  0002D0  0100               	movlb	0	; () banked
  4939  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4940  0002D4  0100               	movlb	0	; () banked
  4941  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4942  0002D8  0100               	movlb	0	; () banked
  4943  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4944  0002DC  B4D8               	btfsc	status,2,c
  4945  0002DE  D06C               	goto	l5203
  4946                           
  4947                           ; BSR set to: 0
  4948  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4949  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4950  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4951  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4952  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4953  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4954  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4955  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4956  000300  0100               	movlb	0	; () banked
  4957  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4958  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4959  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4960  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4961  00030A  A4D8               	btfss	status,2,c
  4962  00030C  D055               	goto	l5203
  4963                           
  4964                           ; BSR set to: 0
  4965  00030E  0100               	movlb	0	; () banked
  4966  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4967  000312  0A80               	xorlw	128
  4968  000314  0F80               	addlw	-128
  4969  000316  0E02               	movlw	2
  4970  000318  B4D8               	btfsc	status,2,c
  4971  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4972  00031C  A0D8               	btfss	status,0,c
  4973  00031E  D04C               	goto	l5203
  4974  000320                     l5187:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4978  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4979  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4980  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4981  00032C  0E70               	movlw	112
  4982  00032E  6E1C               	movwf	___ftge@ff2,c
  4983  000330  0E89               	movlw	137
  4984  000332  6E1D               	movwf	___ftge@ff2+1,c
  4985  000334  0E40               	movlw	64
  4986  000336  6E1E               	movwf	___ftge@ff2+2,c
  4987  000338  EC89  F00F         	call	___ftge	;wreg free
  4988  00033C  B0D8               	btfsc	status,0,c
  4989  00033E  D003               	goto	l5191
  4990                           
  4991                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4992  000340  0100               	movlb	0	; () banked
  4993  000342  0EF7               	movlw	247
  4994  000344  D002               	goto	L8
  4995  000346                     l5191:
  4996                           
  4997                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4998  000346  0100               	movlb	0	; () banked
  4999  000348  0EF8               	movlw	248
  5000  00034A                     L8:
  5001  00034A  0100               	movlb	0	; () banked
  5002  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  5003  00034E  0EFF               	movlw	255
  5004  000350  0100               	movlb	0	; () banked
  5005  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;doprnt.c: 1133: }
  5009                           ;doprnt.c: 1134: integ = scale(exp);
  5010                           
  5011                           ; BSR set to: 0
  5012  000354  0100               	movlb	0	; () banked
  5013  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  5014  000358  ECA0  F004         	call	_scale
  5015  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  5016  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  5017  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  5018                           
  5019                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5020  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  5021  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5022  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5023  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  5024  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5025  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5026  000380  ECFA  F00B         	call	__tdiv_to_l_	;wreg free
  5027  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1426
  5028  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1426+1
  5029  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1426+2
  5030  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1426+3
  5031  000394  C098  F0AD         	movff	_sprintf$1426,sprintf@_val
  5032  000398  C099  F0AE         	movff	_sprintf$1426+1,sprintf@_val+1
  5033  00039C  C09A  F0AF         	movff	_sprintf$1426+2,sprintf@_val+2
  5034  0003A0  C09B  F0B0         	movff	_sprintf$1426+3,sprintf@_val+3
  5035                           
  5036                           ;doprnt.c: 1138: fval = 0.0;
  5037  0003A4  0E00               	movlw	0
  5038  0003A6  0100               	movlb	0	; () banked
  5039  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  5040  0003AA  0E00               	movlw	0
  5041  0003AC  0100               	movlb	0	; () banked
  5042  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  5043  0003B0  0E00               	movlw	0
  5044  0003B2  0100               	movlb	0	; () banked
  5045  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  5046                           
  5047                           ;doprnt.c: 1139: } else {
  5048  0003B6  D034               	goto	l5207
  5049  0003B8                     l5203:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5053  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  5054  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  5055  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  5056  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  5057  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  5058  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5059  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5060  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5061                           
  5062                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5063  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  5064  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  5065  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  5066  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  5067  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  5068  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  5069  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  5070  0003F4  EC20  F012         	call	___lltoft	;wreg free
  5071  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  5072  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  5073  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  5074  000404  ECE7  F012         	call	___ftsub	;wreg free
  5075  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  5076  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  5077  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  5078                           
  5079                           ;doprnt.c: 1142: exp = 0;
  5080  000414  0E00               	movlw	0
  5081  000416  0100               	movlb	0	; () banked
  5082  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  5083  00041A  0E00               	movlw	0
  5084  00041C  0100               	movlb	0	; () banked
  5085  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  5086  000420                     l5207:
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;doprnt.c: 1143: }
  5090                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5091  000420  0E01               	movlw	1
  5092  000422  0100               	movlb	0	; () banked
  5093  000424  6FB7               	movwf	sprintf@c& (0+255),b
  5094  000426                     
  5095                           ; BSR set to: 0
  5096  000426  0100               	movlb	0	; () banked
  5097  000428  51B7               	movf	sprintf@c& (0+255),w,b
  5098  00042A  0A0A               	xorlw	10
  5099  00042C  B4D8               	btfsc	status,2,c
  5100  00042E  D021               	goto	l5221
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5104                           
  5105                           ; BSR set to: 0
  5106                           
  5107                           ; BSR set to: 0
  5108  000430  0100               	movlb	0	; () banked
  5109  000432  51B7               	movf	sprintf@c& (0+255),w,b
  5110  000434  0D04               	mullw	4
  5111  000436  0ECD               	movlw	low _dpowers
  5112  000438  24F3               	addwf	prodl,w,c
  5113  00043A  6EF6               	movwf	tblptrl,c
  5114  00043C  0E7E               	movlw	high _dpowers
  5115  00043E  20F4               	addwfc	prodh,w,c
  5116  000440  6EF7               	movwf	tblptrh,c
  5117  000442                     	if	1	;There are 3 active tblptr bytes
  5118  000442  6AF8               	clrf	tblptru,c
  5119  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  5120  000446  22F8               	addwfc	tblptru,f,c
  5121  000448                     	endif
  5122  000448  0009               	tblrd		*+
  5123  00044A  50F5               	movf	tablat,w,c
  5124  00044C  0100               	movlb	0	; () banked
  5125  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5126  000450  0009               	tblrd		*+
  5127  000452  50F5               	movf	tablat,w,c
  5128  000454  0100               	movlb	0	; () banked
  5129  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5130  000458  0009               	tblrd		*+
  5131  00045A  50F5               	movf	tablat,w,c
  5132  00045C  0100               	movlb	0	; () banked
  5133  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5134  000460  0009               	tblrd		*+
  5135  000462  50F5               	movf	tablat,w,c
  5136  000464  0100               	movlb	0	; () banked
  5137  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5138  000468  A0D8               	btfss	status,0,c
  5139  00046A  D003               	goto	l5221
  5140                           
  5141                           ; BSR set to: 0
  5142                           
  5143                           ; BSR set to: 0
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;doprnt.c: 1147: break;
  5147  00046C  0100               	movlb	0	; () banked
  5148  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  5149  000470  D7DA               	goto	L9
  5150  000472                     l5221:
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;doprnt.c: 1184: {
  5154                           ;doprnt.c: 1197: if(flag & 0x03)
  5155  000472  0E03               	movlw	3
  5156  000474  0100               	movlb	0	; () banked
  5157  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  5158  000478  0100               	movlb	0	; () banked
  5159  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  5160  00047C  0E00               	movlw	0
  5161  00047E  0100               	movlb	0	; () banked
  5162  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5163  000482  0100               	movlb	0	; () banked
  5164  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5165  000486  0100               	movlb	0	; () banked
  5166  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5167  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  5168  00048C  B4D8               	btfsc	status,2,c
  5169  00048E  D055               	goto	l5235
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5173  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  5174  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5175  000498  0E2D               	movlw	45
  5176  00049A  D04B               	goto	L10
  5177  00049C                     l5227:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;doprnt.c: 1209: {
  5181                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5182  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5183  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5184  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5185  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5186  0004AC  0100               	movlb	0	; () banked
  5187  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  5188  0004B0  0D04               	mullw	4
  5189  0004B2  0ECD               	movlw	low _dpowers
  5190  0004B4  24F3               	addwf	prodl,w,c
  5191  0004B6  6EF6               	movwf	tblptrl,c
  5192  0004B8  0E7E               	movlw	high _dpowers
  5193  0004BA  20F4               	addwfc	prodh,w,c
  5194  0004BC  6EF7               	movwf	tblptrh,c
  5195  0004BE                     	if	1	;There are 3 active tblptr bytes
  5196  0004BE  6AF8               	clrf	tblptru,c
  5197  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  5198  0004C2  22F8               	addwfc	tblptru,f,c
  5199  0004C4                     	endif
  5200  0004C4  0009               	tblrd		*+
  5201  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5202  0004CA  0009               	tblrd		*+
  5203  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5204  0004D0  0009               	tblrd		*+
  5205  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5206  0004D6  000A               	tblrd		*-
  5207  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5208  0004DC  EC14  F010         	call	___lldiv	;wreg free
  5209  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  5210  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  5211  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5212  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5213                           
  5214                           ;doprnt.c: 1211: vd %= 10;
  5215  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5216  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5217  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5218  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5219  000500  0E0A               	movlw	10
  5220  000502  6E2A               	movwf	___llmod@divisor,c
  5221  000504  0E00               	movlw	0
  5222  000506  6E2B               	movwf	___llmod@divisor+1,c
  5223  000508  0E00               	movlw	0
  5224  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5225  00050C  0E00               	movlw	0
  5226  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5227  000510  ECED  F011         	call	___llmod	;wreg free
  5228  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5229  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5230  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5231  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5232                           
  5233                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5234  000524  0100               	movlb	0	; () banked
  5235  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5236  000528  0F30               	addlw	48
  5237  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5238  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5239  000532                     L10:
  5240  000532  6EDF               	movwf	indf2,c
  5241                           
  5242                           ; BSR set to: 0
  5243  000534  0100               	movlb	0	; () banked
  5244  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5245  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5246  00053A                     l5235:
  5247                           
  5248                           ; BSR set to: 0
  5249  00053A  0100               	movlb	0	; () banked
  5250  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5251  00053E  0100               	movlb	0	; () banked
  5252  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5253  000542  B4D8               	btfsc	status,2,c
  5254  000544  D00E               	goto	l5243
  5255  000546  D7AA               	goto	l5227
  5256  000548                     l5237:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5260  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5261  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5262  000550  0E30               	movlw	48
  5263  000552  6EDF               	movwf	indf2,c
  5264                           
  5265                           ; BSR set to: 0
  5266  000554  0100               	movlb	0	; () banked
  5267  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5268  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1218: exp--;
  5272  00055A  0100               	movlb	0	; () banked
  5273  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5274  00055E  A0D8               	btfss	status,0,c
  5275  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5276  000562                     l5243:
  5277                           
  5278                           ; BSR set to: 0
  5279  000562  0100               	movlb	0	; () banked
  5280  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5281  000566  0A80               	xorlw	128
  5282  000568  6EF3               	movwf	prodl,c
  5283  00056A  0E80               	movlw	128
  5284  00056C  5CF3               	subwf	prodl,w,c
  5285  00056E  0E01               	movlw	1
  5286  000570  B4D8               	btfsc	status,2,c
  5287  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5288  000574  B0D8               	btfsc	status,0,c
  5289  000576  D7E8               	goto	l5237
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;doprnt.c: 1219: }
  5293                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5294                           
  5295                           ; BSR set to: 0
  5296  000578  0100               	movlb	0	; () banked
  5297  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5298  00057C  0A80               	xorlw	128
  5299  00057E  0F80               	addlw	-128
  5300  000580  0E09               	movlw	9
  5301  000582  B4D8               	btfsc	status,2,c
  5302  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5303  000586  A0D8               	btfss	status,0,c
  5304  000588  D004               	goto	l511
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5308  00058A  0E08               	movlw	8
  5309  00058C  0100               	movlb	0	; () banked
  5310  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5311  000590  D002               	goto	l5249
  5312  000592                     l511:
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;doprnt.c: 1222: else
  5316                           ;doprnt.c: 1223: c = prec;
  5317  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5318  000596                     l5249:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1224: prec -= c;
  5322  000596  0100               	movlb	0	; () banked
  5323  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5324  00059A  0100               	movlb	0	; () banked
  5325  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5326  00059E  0E00               	movlw	0
  5327  0005A0  0100               	movlb	0	; () banked
  5328  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5329  0005A4  0EFF               	movlw	255
  5330  0005A6  0100               	movlb	0	; () banked
  5331  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;doprnt.c: 1228: if(c)
  5335  0005AA  0100               	movlb	0	; () banked
  5336  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5337  0005AE  B4D8               	btfsc	status,2,c
  5338  0005B0  D009               	goto	l5257
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5342  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5343  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5344  0005BA  0E2E               	movlw	46
  5345  0005BC  6EDF               	movwf	indf2,c
  5346                           
  5347                           ; BSR set to: 0
  5348  0005BE  0100               	movlb	0	; () banked
  5349  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5350  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5351  0005C4                     l5257:
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5355  0005C4  0100               	movlb	0	; () banked
  5356  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5357  0005C8  ECA0  F004         	call	_scale
  5358  0005CC  C06C  F095         	movff	?_scale,_sprintf$2451
  5359  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2451+1
  5360  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2451+2
  5361                           
  5362                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5363  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5364  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5365  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5366  0005E4  C095  F060         	movff	_sprintf$2451,___ftmul@f1
  5367  0005E8  C096  F061         	movff	_sprintf$2451+1,___ftmul@f1+1
  5368  0005EC  C097  F062         	movff	_sprintf$2451+2,___ftmul@f1+2
  5369  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5370  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5371  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5372  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5373  000600  EC1B  F00A         	call	___fttol	;wreg free
  5374  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5375  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5376  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5377  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5378                           
  5379                           ;doprnt.c: 1237: while(c--) {
  5380  000614  D079               	goto	l5271
  5381  000616                     l5261:
  5382                           
  5383                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5384  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5385  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5386  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5387  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5388  000626  0100               	movlb	0	; () banked
  5389  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5390  00062A  0D04               	mullw	4
  5391  00062C  0ECD               	movlw	low _dpowers
  5392  00062E  24F3               	addwf	prodl,w,c
  5393  000630  6EF6               	movwf	tblptrl,c
  5394  000632  0E7E               	movlw	high _dpowers
  5395  000634  20F4               	addwfc	prodh,w,c
  5396  000636  6EF7               	movwf	tblptrh,c
  5397  000638                     	if	1	;There are 3 active tblptr bytes
  5398  000638  6AF8               	clrf	tblptru,c
  5399  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5400  00063C  22F8               	addwfc	tblptru,f,c
  5401  00063E                     	endif
  5402  00063E  0009               	tblrd		*+
  5403  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5404  000644  0009               	tblrd		*+
  5405  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5406  00064A  0009               	tblrd		*+
  5407  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5408  000650  000A               	tblrd		*-
  5409  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5410  000656  EC14  F010         	call	___lldiv	;wreg free
  5411  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1428
  5412  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1428+1
  5413  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1428+2
  5414  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1428+3
  5415                           
  5416                           ;doprnt.c: 1239: vd %= 10;
  5417  00066A  C0A0  F026         	movff	sprintf@vd_1428,___llmod@dividend
  5418  00066E  C0A1  F027         	movff	sprintf@vd_1428+1,___llmod@dividend+1
  5419  000672  C0A2  F028         	movff	sprintf@vd_1428+2,___llmod@dividend+2
  5420  000676  C0A3  F029         	movff	sprintf@vd_1428+3,___llmod@dividend+3
  5421  00067A  0E0A               	movlw	10
  5422  00067C  6E2A               	movwf	___llmod@divisor,c
  5423  00067E  0E00               	movlw	0
  5424  000680  6E2B               	movwf	___llmod@divisor+1,c
  5425  000682  0E00               	movlw	0
  5426  000684  6E2C               	movwf	___llmod@divisor+2,c
  5427  000686  0E00               	movlw	0
  5428  000688  6E2D               	movwf	___llmod@divisor+3,c
  5429  00068A  ECED  F011         	call	___llmod	;wreg free
  5430  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1428
  5431  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1428+1
  5432  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1428+2
  5433  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1428+3
  5434                           
  5435                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5436  00069E  0100               	movlb	0	; () banked
  5437  0006A0  51A0               	movf	sprintf@vd_1428& (0+255),w,b
  5438  0006A2  0F30               	addlw	48
  5439  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5440  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5441  0006AC  6EDF               	movwf	indf2,c
  5442                           
  5443                           ; BSR set to: 0
  5444  0006AE  0100               	movlb	0	; () banked
  5445  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5446  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5450  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5451  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5452  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5453  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5454  0006C4  0100               	movlb	0	; () banked
  5455  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5456  0006C8  0D04               	mullw	4
  5457  0006CA  0ECD               	movlw	low _dpowers
  5458  0006CC  24F3               	addwf	prodl,w,c
  5459  0006CE  6EF6               	movwf	tblptrl,c
  5460  0006D0  0E7E               	movlw	high _dpowers
  5461  0006D2  20F4               	addwfc	prodh,w,c
  5462  0006D4  6EF7               	movwf	tblptrh,c
  5463  0006D6                     	if	1	;There are 3 active tblptr bytes
  5464  0006D6  6AF8               	clrf	tblptru,c
  5465  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5466  0006DA  22F8               	addwfc	tblptru,f,c
  5467  0006DC                     	endif
  5468  0006DC  0009               	tblrd		*+
  5469  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5470  0006E2  0009               	tblrd		*+
  5471  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5472  0006E8  0009               	tblrd		*+
  5473  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5474  0006EE  000A               	tblrd		*-
  5475  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5476  0006F4  ECED  F011         	call	___llmod	;wreg free
  5477  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5478  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5479  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5480  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5481  000708                     l5271:
  5482  000708  0100               	movlb	0	; () banked
  5483  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5484  00070C  0100               	movlb	0	; () banked
  5485  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5486  000710  B4D8               	btfsc	status,2,c
  5487  000712  D00E               	goto	l5279
  5488  000714  D780               	goto	l5261
  5489  000716                     l5273:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5493  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5494  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5495  00071E  0E30               	movlw	48
  5496  000720  6EDF               	movwf	indf2,c
  5497                           
  5498                           ; BSR set to: 0
  5499  000722  0100               	movlb	0	; () banked
  5500  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5501  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 1246: prec--;
  5505  000728  0100               	movlb	0	; () banked
  5506  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5507  00072C  A0D8               	btfss	status,0,c
  5508  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5509  000730                     l5279:
  5510                           
  5511                           ; BSR set to: 0
  5512  000730  0100               	movlb	0	; () banked
  5513  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5514  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5515  000736  B4D8               	btfsc	status,2,c
  5516  000738  D0EA               	goto	l5321
  5517  00073A  D7ED               	goto	l5273
  5518  00073C                     l5281:
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;doprnt.c: 1255: }
  5522                           ;doprnt.c: 1262: {
  5523                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5524  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5525  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5526  000744  0100               	movlb	0	; () banked
  5527  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5528  00074A  0100               	movlb	0	; () banked
  5529  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5530  000750  0100               	movlb	0	; () banked
  5531  000752  0E00               	movlw	0
  5532  000754  0100               	movlb	0	; () banked
  5533  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5534  000758  0EFF               	movlw	-1
  5535  00075A  0100               	movlb	0	; () banked
  5536  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5537  00075E  0100               	movlb	0	; () banked
  5538  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541  000762  0E02               	movlw	2
  5542  000764  0100               	movlb	0	; () banked
  5543  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5544  000768  0E00               	movlw	0
  5545  00076A  0100               	movlb	0	; () banked
  5546  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5550  00076E  0100               	movlb	0	; () banked
  5551  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5552  000772  0A80               	xorlw	128
  5553  000774  0F80               	addlw	128
  5554  000776  E10B               	bnz	u6125
  5555  000778  0E00               	movlw	0
  5556  00077A  0100               	movlb	0	; () banked
  5557  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5558  00077E  E107               	bnz	u6125
  5559  000780  0E00               	movlw	0
  5560  000782  0100               	movlb	0	; () banked
  5561  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5562  000786  E103               	bnz	u6125
  5563  000788  0E00               	movlw	0
  5564  00078A  0100               	movlb	0	; () banked
  5565  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5566  00078E                     u6125:
  5567  00078E  B0D8               	btfsc	status,0,c
  5568  000790  D012               	goto	l5291
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 1271: flag |= 0x03;
  5572  000792  0E03               	movlw	3
  5573  000794  0100               	movlb	0	; () banked
  5574  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;doprnt.c: 1272: _val._val = -_val._val;
  5578  000798  0100               	movlb	0	; () banked
  5579  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5580  00079C  0100               	movlb	0	; () banked
  5581  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5582  0007A0  0100               	movlb	0	; () banked
  5583  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5584  0007A4  0100               	movlb	0	; () banked
  5585  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5586  0007A8  0E00               	movlw	0
  5587  0007AA  0100               	movlb	0	; () banked
  5588  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5589  0007AE  0100               	movlb	0	; () banked
  5590  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5591  0007B2  0100               	movlb	0	; () banked
  5592  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5593  0007B6                     l5291:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;doprnt.c: 1273: }
  5597                           ;doprnt.c: 1275: }
  5598                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5599  0007B6  0E01               	movlw	1
  5600  0007B8  0100               	movlb	0	; () banked
  5601  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5602  0007BC                     
  5603                           ; BSR set to: 0
  5604  0007BC  0100               	movlb	0	; () banked
  5605  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5606  0007C0  0A0A               	xorlw	10
  5607  0007C2  B4D8               	btfsc	status,2,c
  5608  0007C4  D021               	goto	l5305
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5612                           
  5613                           ; BSR set to: 0
  5614                           
  5615                           ; BSR set to: 0
  5616  0007C6  0100               	movlb	0	; () banked
  5617  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5618  0007CA  0D04               	mullw	4
  5619  0007CC  0ECD               	movlw	low _dpowers
  5620  0007CE  24F3               	addwf	prodl,w,c
  5621  0007D0  6EF6               	movwf	tblptrl,c
  5622  0007D2  0E7E               	movlw	high _dpowers
  5623  0007D4  20F4               	addwfc	prodh,w,c
  5624  0007D6  6EF7               	movwf	tblptrh,c
  5625  0007D8                     	if	1	;There are 3 active tblptr bytes
  5626  0007D8  6AF8               	clrf	tblptru,c
  5627  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5628  0007DC  22F8               	addwfc	tblptru,f,c
  5629  0007DE                     	endif
  5630  0007DE  0009               	tblrd		*+
  5631  0007E0  50F5               	movf	tablat,w,c
  5632  0007E2  0100               	movlb	0	; () banked
  5633  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5634  0007E6  0009               	tblrd		*+
  5635  0007E8  50F5               	movf	tablat,w,c
  5636  0007EA  0100               	movlb	0	; () banked
  5637  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5638  0007EE  0009               	tblrd		*+
  5639  0007F0  50F5               	movf	tablat,w,c
  5640  0007F2  0100               	movlb	0	; () banked
  5641  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5642  0007F6  0009               	tblrd		*+
  5643  0007F8  50F5               	movf	tablat,w,c
  5644  0007FA  0100               	movlb	0	; () banked
  5645  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5646  0007FE  A0D8               	btfss	status,0,c
  5647  000800  D003               	goto	l5305
  5648                           
  5649                           ; BSR set to: 0
  5650                           
  5651                           ; BSR set to: 0
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;doprnt.c: 1316: break;
  5655  000802  0100               	movlb	0	; () banked
  5656  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5657  000806  D7DA               	goto	L11
  5658  000808                     l5305:
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;doprnt.c: 1431: {
  5662                           ;doprnt.c: 1447: if(flag & 0x03)
  5663  000808  0E03               	movlw	3
  5664  00080A  0100               	movlb	0	; () banked
  5665  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5666  00080E  0100               	movlb	0	; () banked
  5667  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5668  000812  0E00               	movlw	0
  5669  000814  0100               	movlb	0	; () banked
  5670  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5671  000818  0100               	movlb	0	; () banked
  5672  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5673  00081C  0100               	movlb	0	; () banked
  5674  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5675  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5676  000822  B4D8               	btfsc	status,2,c
  5677  000824  D009               	goto	l5311
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5681  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5682  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5683  00082E  0E2D               	movlw	45
  5684  000830  6EDF               	movwf	indf2,c
  5685                           
  5686                           ; BSR set to: 0
  5687  000832  0100               	movlb	0	; () banked
  5688  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5689  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5690  000838                     l5311:
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;doprnt.c: 1478: }
  5694                           ;doprnt.c: 1481: prec = c;
  5695  000838  0100               	movlb	0	; () banked
  5696  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5697  00083C  0100               	movlb	0	; () banked
  5698  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5699  000840  0100               	movlb	0	; () banked
  5700  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5701  000844  0100               	movlb	0	; () banked
  5702  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5703  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5704                           
  5705                           ;doprnt.c: 1483: while(prec--) {
  5706  00084A  D057               	goto	l5319
  5707  00084C                     l5313:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;doprnt.c: 1487: {
  5711                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5712  00084C  0100               	movlb	0	; () banked
  5713  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5714  000852  0100               	movlb	0	; () banked
  5715  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5716  000858  0100               	movlb	0	; () banked
  5717  00085A  90D8               	bcf	status,0,c
  5718  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5719  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5720  000860  0100               	movlb	0	; () banked
  5721  000862  90D8               	bcf	status,0,c
  5722  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5723  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5724  000868  0ECD               	movlw	low _dpowers
  5725  00086A  0100               	movlb	0	; () banked
  5726  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5727  00086E  6EF6               	movwf	tblptrl,c
  5728  000870  0E7E               	movlw	high _dpowers
  5729  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5730  000874  6EF7               	movwf	tblptrh,c
  5731  000876                     	if	1	;There are 3 active tblptr bytes
  5732  000876  6AF8               	clrf	tblptru,c
  5733  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5734  00087A  22F8               	addwfc	tblptru,f,c
  5735  00087C                     	endif
  5736  00087C  0009               	tblrd		*+
  5737  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5738  000882  0009               	tblrd		*+
  5739  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5740  000888  0009               	tblrd		*+
  5741  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5742  00088E  000A               	tblrd		*-
  5743  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5744  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5745  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5746  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5747  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5748  0008A4  EC14  F010         	call	___lldiv	;wreg free
  5749  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5750  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5751  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5752  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5753  0008B8  0E0A               	movlw	10
  5754  0008BA  6E2A               	movwf	___llmod@divisor,c
  5755  0008BC  0E00               	movlw	0
  5756  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5757  0008C0  0E00               	movlw	0
  5758  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5759  0008C4  0E00               	movlw	0
  5760  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5761  0008C8  ECED  F011         	call	___llmod	;wreg free
  5762  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5763  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5764  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5765  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5766  0008DC  0100               	movlb	0	; () banked
  5767  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5768  0008E0  0F30               	addlw	48
  5769  0008E2  0100               	movlb	0	; () banked
  5770  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;doprnt.c: 1532: }
  5774                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5775  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5776  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5777  0008EE  0100               	movlb	0	; () banked
  5778  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5779                           
  5780                           ; BSR set to: 0
  5781  0008F4  0100               	movlb	0	; () banked
  5782  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5783  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5784  0008FA                     l5319:
  5785                           
  5786                           ; BSR set to: 0
  5787  0008FA  0100               	movlb	0	; () banked
  5788  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5789  0008FE  A0D8               	btfss	status,0,c
  5790  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5791  000902  0100               	movlb	0	; () banked
  5792  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5793  000906  B4D8               	btfsc	status,2,c
  5794  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5795  00090A  A4D8               	btfss	status,2,c
  5796  00090C  D79F               	goto	l5313
  5797  00090E                     l5321:
  5798                           
  5799                           ; BSR set to: 0
  5800  00090E  0100               	movlb	0	; () banked
  5801  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5802  000914  0100               	movlb	0	; () banked
  5803  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5804  00091A  0100               	movlb	0	; () banked
  5805  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5806  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5807  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5808  000920  6AF8               	clrf	tblptru,c
  5809  000922                     	endif
  5810  000922                     	if	0	;tblptru may be non-zero
  5811  000922                     	endif
  5812  000922  0008               	tblrd		*
  5813  000924  0100               	movlb	0	; () banked
  5814  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5815  00092A  0100               	movlb	0	; () banked
  5816  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5817  00092E  EF18  F000         	goto	l5119
  5818  000932                     l5323:
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;doprnt.c: 1547: *sp = 0;
  5822  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5823  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5824  00093A  0E00               	movlw	0
  5825  00093C  6EDF               	movwf	indf2,c
  5826                           
  5827                           ; BSR set to: 0
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;doprnt.c: 1549: return 0;
  5831                           ;	Return value of _sprintf is never used
  5832  00093E  0012               	return	
  5833  000940                     __end_of_sprintf:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           indf0	equ	0xFEF
  5843                           postinc0	equ	0xFEE
  5844                           fsr0h	equ	0xFEA
  5845                           fsr0l	equ	0xFE9
  5846                           wreg	equ	0xFE8
  5847                           postinc1	equ	0xFE6
  5848                           postdec1	equ	0xFE5
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _scale *****************
  5858 ;; Defined at:
  5859 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  scl             1    wreg     char 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  scl             1   18[BANK0 ] char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  3   12[BANK0 ] char 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5873 ;;      Params:         0       3       0       0       0       0       0       0       0
  5874 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5876 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5877 ;;Total ram usage:        7 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    6
  5880 ;; This function calls:
  5881 ;;		___awdiv
  5882 ;;		___awmod
  5883 ;;		___ftmul
  5884 ;;		___wmul
  5885 ;; This function is called by:
  5886 ;;		_sprintf
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text28
  5891  000940                     __ptext28:
  5892                           	opt stack 0
  5893  000940                     _scale:
  5894                           	opt stack 21
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;incstack = 0
  5898                           ;scale@scl stored from wreg
  5899  000940  0100               	movlb	0	; () banked
  5900  000942  6F72               	movwf	scale@scl& (0+255),b
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;doprnt.c: 428: if(scl < 0) {
  5904  000944  0100               	movlb	0	; () banked
  5905  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5906  000948  D111               	goto	l4851
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;doprnt.c: 429: scl = -scl;
  5910  00094A  0100               	movlb	0	; () banked
  5911  00094C  6D72               	negf	scale@scl& (0+255),b
  5912                           
  5913                           ;doprnt.c: 430: if(scl>=110)
  5914  00094E  0100               	movlb	0	; () banked
  5915  000950  5172               	movf	scale@scl& (0+255),w,b
  5916  000952  0A80               	xorlw	128
  5917  000954  0F12               	addlw	-238
  5918  000956  A0D8               	btfss	status,0,c
  5919  000958  D0A0               	goto	l4841
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5923  00095A  0E00               	movlw	0
  5924  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5925  00095E  0E03               	movlw	3
  5926  000960  6E29               	movwf	___wmul@multiplicand,c
  5927  000962  0E00               	movlw	0
  5928  000964  6E22               	movwf	___awdiv@divisor+1,c
  5929  000966  0E0A               	movlw	10
  5930  000968  6E21               	movwf	___awdiv@divisor,c
  5931  00096A  0E00               	movlw	0
  5932  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5933  00096E  0E64               	movlw	100
  5934  000970  6E1B               	movwf	___awmod@divisor,c
  5935  000972  0100               	movlb	0	; () banked
  5936  000974  5172               	movf	scale@scl& (0+255),w,b
  5937  000976  6E19               	movwf	___awmod@dividend,c
  5938  000978  6A1A               	clrf	___awmod@dividend+1,c
  5939  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5940  00097C  061A               	decf	___awmod@dividend+1,f,c
  5941  00097E  EC41  F00F         	call	___awmod	;wreg free
  5942  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5943  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5944  00098A  EC59  F00E         	call	___awdiv	;wreg free
  5945  00098E  0E09               	movlw	9
  5946  000990  241F               	addwf	?___awdiv,w,c
  5947  000992  6E27               	movwf	___wmul@multiplier,c
  5948  000994  0E00               	movlw	0
  5949  000996  2020               	addwfc	?___awdiv+1,w,c
  5950  000998  6E28               	movwf	___wmul@multiplier+1,c
  5951  00099A  EC12  F014         	call	___wmul	;wreg free
  5952  00099E  0EF5               	movlw	low __npowers_
  5953  0009A0  2427               	addwf	?___wmul,w,c
  5954  0009A2  6EF6               	movwf	tblptrl,c
  5955  0009A4  0E7E               	movlw	high __npowers_
  5956  0009A6  2028               	addwfc	?___wmul+1,w,c
  5957  0009A8  6EF7               	movwf	tblptrh,c
  5958  0009AA                     	if	1	;There are 3 active tblptr bytes
  5959  0009AA  6AF8               	clrf	tblptru,c
  5960  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5961  0009AE  22F8               	addwfc	tblptru,f,c
  5962  0009B0                     	endif
  5963  0009B0  0009               	tblrd		*+
  5964  0009B2  0100               	movlb	0	; () banked
  5965  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5966  0009B8  0009               	tblrd		*+
  5967  0009BA  0100               	movlb	0	; () banked
  5968  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5969  0009C0  000A               	tblrd		*-
  5970  0009C2  0100               	movlb	0	; () banked
  5971  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5972  0009C8  0E00               	movlw	0
  5973  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5974  0009CC  0E64               	movlw	100
  5975  0009CE  6E21               	movwf	___awdiv@divisor,c
  5976  0009D0  0100               	movlb	0	; () banked
  5977  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5978  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5979  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5980  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5981  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5982  0009DC  EC59  F00E         	call	___awdiv	;wreg free
  5983  0009E0  0E12               	movlw	18
  5984  0009E2  241F               	addwf	?___awdiv,w,c
  5985  0009E4  6E27               	movwf	___wmul@multiplier,c
  5986  0009E6  0E00               	movlw	0
  5987  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5988  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5989  0009EC  0E00               	movlw	0
  5990  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5991  0009F0  0E03               	movlw	3
  5992  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5993  0009F4  EC12  F014         	call	___wmul	;wreg free
  5994  0009F8  0EF5               	movlw	low __npowers_
  5995  0009FA  2427               	addwf	?___wmul,w,c
  5996  0009FC  6EF6               	movwf	tblptrl,c
  5997  0009FE  0E7E               	movlw	high __npowers_
  5998  000A00  2028               	addwfc	?___wmul+1,w,c
  5999  000A02  6EF7               	movwf	tblptrh,c
  6000  000A04                     	if	1	;There are 3 active tblptr bytes
  6001  000A04  6AF8               	clrf	tblptru,c
  6002  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  6003  000A08  22F8               	addwfc	tblptru,f,c
  6004  000A0A                     	endif
  6005  000A0A  0009               	tblrd		*+
  6006  000A0C  0100               	movlb	0	; () banked
  6007  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  6008  000A12  0009               	tblrd		*+
  6009  000A14  0100               	movlb	0	; () banked
  6010  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6011  000A1A  000A               	tblrd		*-
  6012  000A1C  0100               	movlb	0	; () banked
  6013  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6014  000A22  EC6F  F009         	call	___ftmul	;wreg free
  6015  000A26  C060  F06F         	movff	?___ftmul,_scale$2450
  6016  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2450+1
  6017  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2450+2
  6018                           
  6019                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6020  000A32  C06F  F060         	movff	_scale$2450,___ftmul@f1
  6021  000A36  C070  F061         	movff	_scale$2450+1,___ftmul@f1+1
  6022  000A3A  C071  F062         	movff	_scale$2450+2,___ftmul@f1+2
  6023  000A3E  0E00               	movlw	0
  6024  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  6025  000A42  0E03               	movlw	3
  6026  000A44  6E29               	movwf	___wmul@multiplicand,c
  6027  000A46  0E00               	movlw	0
  6028  000A48  6E1C               	movwf	___awmod@divisor+1,c
  6029  000A4A  0E0A               	movlw	10
  6030  000A4C  6E1B               	movwf	___awmod@divisor,c
  6031  000A4E  0100               	movlb	0	; () banked
  6032  000A50  5172               	movf	scale@scl& (0+255),w,b
  6033  000A52  6E19               	movwf	___awmod@dividend,c
  6034  000A54  6A1A               	clrf	___awmod@dividend+1,c
  6035  000A56  BE19               	btfsc	___awmod@dividend,7,c
  6036  000A58  061A               	decf	___awmod@dividend+1,f,c
  6037  000A5A  EC41  F00F         	call	___awmod	;wreg free
  6038  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6039  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6040  000A66  EC12  F014         	call	___wmul	;wreg free
  6041  000A6A  0EF5               	movlw	low __npowers_
  6042  000A6C  2427               	addwf	?___wmul,w,c
  6043  000A6E  6EF6               	movwf	tblptrl,c
  6044  000A70  0E7E               	movlw	high __npowers_
  6045  000A72  2028               	addwfc	?___wmul+1,w,c
  6046  000A74  6EF7               	movwf	tblptrh,c
  6047  000A76                     	if	1	;There are 3 active tblptr bytes
  6048  000A76  6AF8               	clrf	tblptru,c
  6049  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  6050  000A7A  22F8               	addwfc	tblptru,f,c
  6051  000A7C                     	endif
  6052  000A7C  0009               	tblrd		*+
  6053  000A7E  0100               	movlb	0	; () banked
  6054  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  6055  000A84  0009               	tblrd		*+
  6056  000A86  0100               	movlb	0	; () banked
  6057  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6058  000A8C  000A               	tblrd		*-
  6059  000A8E  0100               	movlb	0	; () banked
  6060  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6061  000A94  EC6F  F009         	call	___ftmul	;wreg free
  6062  000A98  D16F               	goto	L15
  6063  000A9A                     l4841:
  6064                           
  6065                           ;doprnt.c: 432: else if(scl > 10)
  6066  000A9A  0100               	movlb	0	; () banked
  6067  000A9C  5172               	movf	scale@scl& (0+255),w,b
  6068  000A9E  0A80               	xorlw	128
  6069  000AA0  0F75               	addlw	-139
  6070  000AA2  A0D8               	btfss	status,0,c
  6071  000AA4  D05B               	goto	l4847
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6075  000AA6  0E00               	movlw	0
  6076  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  6077  000AAA  0E0A               	movlw	10
  6078  000AAC  6E21               	movwf	___awdiv@divisor,c
  6079  000AAE  0100               	movlb	0	; () banked
  6080  000AB0  5172               	movf	scale@scl& (0+255),w,b
  6081  000AB2  6E1F               	movwf	___awdiv@dividend,c
  6082  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  6083  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  6084  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  6085  000ABA  EC59  F00E         	call	___awdiv	;wreg free
  6086  000ABE  0E09               	movlw	9
  6087  000AC0  241F               	addwf	?___awdiv,w,c
  6088  000AC2  6E27               	movwf	___wmul@multiplier,c
  6089  000AC4  0E00               	movlw	0
  6090  000AC6  2020               	addwfc	?___awdiv+1,w,c
  6091  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  6092  000ACA  0E00               	movlw	0
  6093  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  6094  000ACE  0E03               	movlw	3
  6095  000AD0  6E29               	movwf	___wmul@multiplicand,c
  6096  000AD2  EC12  F014         	call	___wmul	;wreg free
  6097  000AD6  0EF5               	movlw	low __npowers_
  6098  000AD8  2427               	addwf	?___wmul,w,c
  6099  000ADA  6EF6               	movwf	tblptrl,c
  6100  000ADC  0E7E               	movlw	high __npowers_
  6101  000ADE  2028               	addwfc	?___wmul+1,w,c
  6102  000AE0  6EF7               	movwf	tblptrh,c
  6103  000AE2                     	if	1	;There are 3 active tblptr bytes
  6104  000AE2  6AF8               	clrf	tblptru,c
  6105  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  6106  000AE6  22F8               	addwfc	tblptru,f,c
  6107  000AE8                     	endif
  6108  000AE8  0009               	tblrd		*+
  6109  000AEA  0100               	movlb	0	; () banked
  6110  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  6111  000AF0  0009               	tblrd		*+
  6112  000AF2  0100               	movlb	0	; () banked
  6113  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6114  000AF8  000A               	tblrd		*-
  6115  000AFA  0100               	movlb	0	; () banked
  6116  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6117  000B00  0E00               	movlw	0
  6118  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  6119  000B04  0E03               	movlw	3
  6120  000B06  6E29               	movwf	___wmul@multiplicand,c
  6121  000B08  0E00               	movlw	0
  6122  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  6123  000B0C  0E0A               	movlw	10
  6124  000B0E  6E1B               	movwf	___awmod@divisor,c
  6125  000B10  0100               	movlb	0	; () banked
  6126  000B12  5172               	movf	scale@scl& (0+255),w,b
  6127  000B14  6E19               	movwf	___awmod@dividend,c
  6128  000B16  6A1A               	clrf	___awmod@dividend+1,c
  6129  000B18  BE19               	btfsc	___awmod@dividend,7,c
  6130  000B1A  061A               	decf	___awmod@dividend+1,f,c
  6131  000B1C  EC41  F00F         	call	___awmod	;wreg free
  6132  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  6133  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6134  000B28  EC12  F014         	call	___wmul	;wreg free
  6135  000B2C  0EF5               	movlw	low __npowers_
  6136  000B2E  2427               	addwf	?___wmul,w,c
  6137  000B30  6EF6               	movwf	tblptrl,c
  6138  000B32  0E7E               	movlw	high __npowers_
  6139  000B34  2028               	addwfc	?___wmul+1,w,c
  6140  000B36  6EF7               	movwf	tblptrh,c
  6141  000B38                     	if	1	;There are 3 active tblptr bytes
  6142  000B38  6AF8               	clrf	tblptru,c
  6143  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6144  000B3C  22F8               	addwfc	tblptru,f,c
  6145  000B3E                     	endif
  6146  000B3E  0009               	tblrd		*+
  6147  000B40  0100               	movlb	0	; () banked
  6148  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  6149  000B46  0009               	tblrd		*+
  6150  000B48  0100               	movlb	0	; () banked
  6151  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6152  000B4E  000A               	tblrd		*-
  6153  000B50  0100               	movlb	0	; () banked
  6154  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6155  000B56  EC6F  F009         	call	___ftmul	;wreg free
  6156  000B5A  D10E               	goto	L15
  6157  000B5C                     l4847:
  6158                           
  6159                           ;doprnt.c: 434: return _npowers_[scl];
  6160  000B5C  0100               	movlb	0	; () banked
  6161  000B5E  5172               	movf	scale@scl& (0+255),w,b
  6162  000B60  0D03               	mullw	3
  6163  000B62  0EF5               	movlw	low __npowers_
  6164  000B64  24F3               	addwf	prodl,w,c
  6165  000B66  6EF6               	movwf	tblptrl,c
  6166  000B68  0E7E               	movlw	high __npowers_
  6167  000B6A  D114               	goto	L14
  6168  000B6C                     l4851:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;doprnt.c: 435: }
  6172                           ;doprnt.c: 436: if(scl>=110)
  6173  000B6C  0100               	movlb	0	; () banked
  6174  000B6E  5172               	movf	scale@scl& (0+255),w,b
  6175  000B70  0A80               	xorlw	128
  6176  000B72  0F12               	addlw	-238
  6177  000B74  A0D8               	btfss	status,0,c
  6178  000B76  D0A0               	goto	l4859
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6182  000B78  0E00               	movlw	0
  6183  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  6184  000B7C  0E03               	movlw	3
  6185  000B7E  6E29               	movwf	___wmul@multiplicand,c
  6186  000B80  0E00               	movlw	0
  6187  000B82  6E22               	movwf	___awdiv@divisor+1,c
  6188  000B84  0E0A               	movlw	10
  6189  000B86  6E21               	movwf	___awdiv@divisor,c
  6190  000B88  0E00               	movlw	0
  6191  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  6192  000B8C  0E64               	movlw	100
  6193  000B8E  6E1B               	movwf	___awmod@divisor,c
  6194  000B90  0100               	movlb	0	; () banked
  6195  000B92  5172               	movf	scale@scl& (0+255),w,b
  6196  000B94  6E19               	movwf	___awmod@dividend,c
  6197  000B96  6A1A               	clrf	___awmod@dividend+1,c
  6198  000B98  BE19               	btfsc	___awmod@dividend,7,c
  6199  000B9A  061A               	decf	___awmod@dividend+1,f,c
  6200  000B9C  EC41  F00F         	call	___awmod	;wreg free
  6201  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6202  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6203  000BA8  EC59  F00E         	call	___awdiv	;wreg free
  6204  000BAC  0E09               	movlw	9
  6205  000BAE  241F               	addwf	?___awdiv,w,c
  6206  000BB0  6E27               	movwf	___wmul@multiplier,c
  6207  000BB2  0E00               	movlw	0
  6208  000BB4  2020               	addwfc	?___awdiv+1,w,c
  6209  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  6210  000BB8  EC12  F014         	call	___wmul	;wreg free
  6211  000BBC  0E1C               	movlw	low __powers_
  6212  000BBE  2427               	addwf	?___wmul,w,c
  6213  000BC0  6EF6               	movwf	tblptrl,c
  6214  000BC2  0E7F               	movlw	high __powers_
  6215  000BC4  2028               	addwfc	?___wmul+1,w,c
  6216  000BC6  6EF7               	movwf	tblptrh,c
  6217  000BC8                     	if	1	;There are 3 active tblptr bytes
  6218  000BC8  6AF8               	clrf	tblptru,c
  6219  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6220  000BCC  22F8               	addwfc	tblptru,f,c
  6221  000BCE                     	endif
  6222  000BCE  0009               	tblrd		*+
  6223  000BD0  0100               	movlb	0	; () banked
  6224  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6225  000BD6  0009               	tblrd		*+
  6226  000BD8  0100               	movlb	0	; () banked
  6227  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6228  000BDE  000A               	tblrd		*-
  6229  000BE0  0100               	movlb	0	; () banked
  6230  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6231  000BE6  0E00               	movlw	0
  6232  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6233  000BEA  0E64               	movlw	100
  6234  000BEC  6E21               	movwf	___awdiv@divisor,c
  6235  000BEE  0100               	movlb	0	; () banked
  6236  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6237  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6238  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6239  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6240  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6241  000BFA  EC59  F00E         	call	___awdiv	;wreg free
  6242  000BFE  0E12               	movlw	18
  6243  000C00  241F               	addwf	?___awdiv,w,c
  6244  000C02  6E27               	movwf	___wmul@multiplier,c
  6245  000C04  0E00               	movlw	0
  6246  000C06  2020               	addwfc	?___awdiv+1,w,c
  6247  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6248  000C0A  0E00               	movlw	0
  6249  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6250  000C0E  0E03               	movlw	3
  6251  000C10  6E29               	movwf	___wmul@multiplicand,c
  6252  000C12  EC12  F014         	call	___wmul	;wreg free
  6253  000C16  0E1C               	movlw	low __powers_
  6254  000C18  2427               	addwf	?___wmul,w,c
  6255  000C1A  6EF6               	movwf	tblptrl,c
  6256  000C1C  0E7F               	movlw	high __powers_
  6257  000C1E  2028               	addwfc	?___wmul+1,w,c
  6258  000C20  6EF7               	movwf	tblptrh,c
  6259  000C22                     	if	1	;There are 3 active tblptr bytes
  6260  000C22  6AF8               	clrf	tblptru,c
  6261  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6262  000C26  22F8               	addwfc	tblptru,f,c
  6263  000C28                     	endif
  6264  000C28  0009               	tblrd		*+
  6265  000C2A  0100               	movlb	0	; () banked
  6266  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6267  000C30  0009               	tblrd		*+
  6268  000C32  0100               	movlb	0	; () banked
  6269  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6270  000C38  000A               	tblrd		*-
  6271  000C3A  0100               	movlb	0	; () banked
  6272  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6273  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6274  000C44  C060  F06F         	movff	?___ftmul,_scale$2450
  6275  000C48  C061  F070         	movff	?___ftmul+1,_scale$2450+1
  6276  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2450+2
  6277                           
  6278                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6279  000C50  C06F  F060         	movff	_scale$2450,___ftmul@f1
  6280  000C54  C070  F061         	movff	_scale$2450+1,___ftmul@f1+1
  6281  000C58  C071  F062         	movff	_scale$2450+2,___ftmul@f1+2
  6282  000C5C  0E00               	movlw	0
  6283  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6284  000C60  0E03               	movlw	3
  6285  000C62  6E29               	movwf	___wmul@multiplicand,c
  6286  000C64  0E00               	movlw	0
  6287  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6288  000C68  0E0A               	movlw	10
  6289  000C6A  6E1B               	movwf	___awmod@divisor,c
  6290  000C6C  0100               	movlb	0	; () banked
  6291  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6292  000C70  6E19               	movwf	___awmod@dividend,c
  6293  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6294  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6295  000C76  061A               	decf	___awmod@dividend+1,f,c
  6296  000C78  EC41  F00F         	call	___awmod	;wreg free
  6297  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6298  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6299  000C84  EC12  F014         	call	___wmul	;wreg free
  6300  000C88  0E1C               	movlw	low __powers_
  6301  000C8A  2427               	addwf	?___wmul,w,c
  6302  000C8C  6EF6               	movwf	tblptrl,c
  6303  000C8E  0E7F               	movlw	high __powers_
  6304  000C90  2028               	addwfc	?___wmul+1,w,c
  6305  000C92  6EF7               	movwf	tblptrh,c
  6306  000C94                     	if	1	;There are 3 active tblptr bytes
  6307  000C94  6AF8               	clrf	tblptru,c
  6308  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6309  000C98  22F8               	addwfc	tblptru,f,c
  6310  000C9A                     	endif
  6311  000C9A  0009               	tblrd		*+
  6312  000C9C  0100               	movlb	0	; () banked
  6313  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6314  000CA2  0009               	tblrd		*+
  6315  000CA4  0100               	movlb	0	; () banked
  6316  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6317  000CAA  000A               	tblrd		*-
  6318  000CAC  0100               	movlb	0	; () banked
  6319  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6320  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6321  000CB6  D060               	goto	L15
  6322  000CB8                     l4859:
  6323                           
  6324                           ;doprnt.c: 438: else if(scl > 10)
  6325  000CB8  0100               	movlb	0	; () banked
  6326  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6327  000CBC  0A80               	xorlw	128
  6328  000CBE  0F75               	addlw	-139
  6329  000CC0  A0D8               	btfss	status,0,c
  6330  000CC2  D061               	goto	l4865
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6334  000CC4  0E00               	movlw	0
  6335  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6336  000CC8  0E0A               	movlw	10
  6337  000CCA  6E21               	movwf	___awdiv@divisor,c
  6338  000CCC  0100               	movlb	0	; () banked
  6339  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6340  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6341  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6342  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6343  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6344  000CD8  EC59  F00E         	call	___awdiv	;wreg free
  6345  000CDC  0E09               	movlw	9
  6346  000CDE  241F               	addwf	?___awdiv,w,c
  6347  000CE0  6E27               	movwf	___wmul@multiplier,c
  6348  000CE2  0E00               	movlw	0
  6349  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6350  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6351  000CE8  0E00               	movlw	0
  6352  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6353  000CEC  0E03               	movlw	3
  6354  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6355  000CF0  EC12  F014         	call	___wmul	;wreg free
  6356  000CF4  0E1C               	movlw	low __powers_
  6357  000CF6  2427               	addwf	?___wmul,w,c
  6358  000CF8  6EF6               	movwf	tblptrl,c
  6359  000CFA  0E7F               	movlw	high __powers_
  6360  000CFC  2028               	addwfc	?___wmul+1,w,c
  6361  000CFE  6EF7               	movwf	tblptrh,c
  6362  000D00                     	if	1	;There are 3 active tblptr bytes
  6363  000D00  6AF8               	clrf	tblptru,c
  6364  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6365  000D04  22F8               	addwfc	tblptru,f,c
  6366  000D06                     	endif
  6367  000D06  0009               	tblrd		*+
  6368  000D08  0100               	movlb	0	; () banked
  6369  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6370  000D0E  0009               	tblrd		*+
  6371  000D10  0100               	movlb	0	; () banked
  6372  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6373  000D16  000A               	tblrd		*-
  6374  000D18  0100               	movlb	0	; () banked
  6375  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6376  000D1E  0E00               	movlw	0
  6377  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6378  000D22  0E03               	movlw	3
  6379  000D24  6E29               	movwf	___wmul@multiplicand,c
  6380  000D26  0E00               	movlw	0
  6381  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6382  000D2A  0E0A               	movlw	10
  6383  000D2C  6E1B               	movwf	___awmod@divisor,c
  6384  000D2E  0100               	movlb	0	; () banked
  6385  000D30  5172               	movf	scale@scl& (0+255),w,b
  6386  000D32  6E19               	movwf	___awmod@dividend,c
  6387  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6388  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6389  000D38  061A               	decf	___awmod@dividend+1,f,c
  6390  000D3A  EC41  F00F         	call	___awmod	;wreg free
  6391  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6392  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6393  000D46  EC12  F014         	call	___wmul	;wreg free
  6394  000D4A  0E1C               	movlw	low __powers_
  6395  000D4C  2427               	addwf	?___wmul,w,c
  6396  000D4E  6EF6               	movwf	tblptrl,c
  6397  000D50  0E7F               	movlw	high __powers_
  6398  000D52  2028               	addwfc	?___wmul+1,w,c
  6399  000D54  6EF7               	movwf	tblptrh,c
  6400  000D56                     	if	1	;There are 3 active tblptr bytes
  6401  000D56  6AF8               	clrf	tblptru,c
  6402  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6403  000D5A  22F8               	addwfc	tblptru,f,c
  6404  000D5C                     	endif
  6405  000D5C  0009               	tblrd		*+
  6406  000D5E  0100               	movlb	0	; () banked
  6407  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6408  000D64  0009               	tblrd		*+
  6409  000D66  0100               	movlb	0	; () banked
  6410  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6411  000D6C  000A               	tblrd		*-
  6412  000D6E  0100               	movlb	0	; () banked
  6413  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6414  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6415  000D78                     L15:
  6416  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6417  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6418  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6419  000D84  D018               	goto	l464
  6420  000D86                     l4865:
  6421                           
  6422                           ;doprnt.c: 440: return _powers_[scl];
  6423  000D86  0100               	movlb	0	; () banked
  6424  000D88  5172               	movf	scale@scl& (0+255),w,b
  6425  000D8A  0D03               	mullw	3
  6426  000D8C  0E1C               	movlw	low __powers_
  6427  000D8E  24F3               	addwf	prodl,w,c
  6428  000D90  6EF6               	movwf	tblptrl,c
  6429  000D92  0E7F               	movlw	high __powers_
  6430  000D94                     L14:
  6431  000D94  20F4               	addwfc	prodh,w,c
  6432  000D96  6EF7               	movwf	tblptrh,c
  6433  000D98                     	if	1	;There are 3 active tblptr bytes
  6434  000D98  6AF8               	clrf	tblptru,c
  6435  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6436  000D9C  22F8               	addwfc	tblptru,f,c
  6437  000D9E                     	endif
  6438  000D9E  0009               	tblrd		*+
  6439  000DA0  0100               	movlb	0	; () banked
  6440  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6441  000DA6  0009               	tblrd		*+
  6442  000DA8  0100               	movlb	0	; () banked
  6443  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6444  000DAE  000A               	tblrd		*-
  6445  000DB0  0100               	movlb	0	; () banked
  6446  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6447  000DB6                     l464:
  6448  000DB6  0012               	return	
  6449  000DB8                     __end_of_scale:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           indf0	equ	0xFEF
  6459                           postinc0	equ	0xFEE
  6460                           fsr0h	equ	0xFEA
  6461                           fsr0l	equ	0xFE9
  6462                           wreg	equ	0xFE8
  6463                           postinc1	equ	0xFE6
  6464                           postdec1	equ	0xFE5
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _fround *****************
  6474 ;; Defined at:
  6475 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  prec            1    wreg     unsigned char 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  prec            1   21[BANK0 ] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  3   12[BANK0 ] unsigned char 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6489 ;;      Params:         0       3       0       0       0       0       0       0       0
  6490 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6492 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6493 ;;Total ram usage:       10 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    6
  6496 ;; This function calls:
  6497 ;;		___awdiv
  6498 ;;		___awmod
  6499 ;;		___ftmul
  6500 ;;		___wmul
  6501 ;; This function is called by:
  6502 ;;		_sprintf
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           	psect	text29
  6507  000DB8                     __ptext29:
  6508                           	opt stack 0
  6509  000DB8                     _fround:
  6510                           	opt stack 21
  6511                           
  6512                           ;incstack = 0
  6513                           ;fround@prec stored from wreg
  6514  000DB8  0100               	movlb	0	; () banked
  6515  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;doprnt.c: 413: if(prec>=110)
  6519  000DBC  0E6D               	movlw	109
  6520  000DBE  0100               	movlb	0	; () banked
  6521  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6522  000DC2  D0B1               	goto	l4819
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6526  000DC4  0E00               	movlw	0
  6527  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6528  000DC8  0E03               	movlw	3
  6529  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6530  000DCC  0E00               	movlw	0
  6531  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6532  000DD0  0E0A               	movlw	10
  6533  000DD2  6E21               	movwf	___awdiv@divisor,c
  6534  000DD4  0E00               	movlw	0
  6535  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6536  000DD8  0E64               	movlw	100
  6537  000DDA  6E1B               	movwf	___awmod@divisor,c
  6538  000DDC  0100               	movlb	0	; () banked
  6539  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6540  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6541  000DE4  EC41  F00F         	call	___awmod	;wreg free
  6542  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6543  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6544  000DF0  EC59  F00E         	call	___awdiv	;wreg free
  6545  000DF4  0E09               	movlw	9
  6546  000DF6  241F               	addwf	?___awdiv,w,c
  6547  000DF8  6E27               	movwf	___wmul@multiplier,c
  6548  000DFA  0E00               	movlw	0
  6549  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6550  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6551  000E00  EC12  F014         	call	___wmul	;wreg free
  6552  000E04  0EF5               	movlw	low __npowers_
  6553  000E06  2427               	addwf	?___wmul,w,c
  6554  000E08  6EF6               	movwf	tblptrl,c
  6555  000E0A  0E7E               	movlw	high __npowers_
  6556  000E0C  2028               	addwfc	?___wmul+1,w,c
  6557  000E0E  6EF7               	movwf	tblptrh,c
  6558  000E10                     	if	1	;There are 3 active tblptr bytes
  6559  000E10  6AF8               	clrf	tblptru,c
  6560  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6561  000E14  22F8               	addwfc	tblptru,f,c
  6562  000E16                     	endif
  6563  000E16  0009               	tblrd		*+
  6564  000E18  0100               	movlb	0	; () banked
  6565  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6566  000E1E  0009               	tblrd		*+
  6567  000E20  0100               	movlb	0	; () banked
  6568  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6569  000E26  000A               	tblrd		*-
  6570  000E28  0100               	movlb	0	; () banked
  6571  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6572  000E2E  0E00               	movlw	0
  6573  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6574  000E32  0E64               	movlw	100
  6575  000E34  6E21               	movwf	___awdiv@divisor,c
  6576  000E36  0100               	movlb	0	; () banked
  6577  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6578  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6579  000E3E  EC59  F00E         	call	___awdiv	;wreg free
  6580  000E42  0E12               	movlw	18
  6581  000E44  241F               	addwf	?___awdiv,w,c
  6582  000E46  6E27               	movwf	___wmul@multiplier,c
  6583  000E48  0E00               	movlw	0
  6584  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6585  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6586  000E4E  0E00               	movlw	0
  6587  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6588  000E52  0E03               	movlw	3
  6589  000E54  6E29               	movwf	___wmul@multiplicand,c
  6590  000E56  EC12  F014         	call	___wmul	;wreg free
  6591  000E5A  0EF5               	movlw	low __npowers_
  6592  000E5C  2427               	addwf	?___wmul,w,c
  6593  000E5E  6EF6               	movwf	tblptrl,c
  6594  000E60  0E7E               	movlw	high __npowers_
  6595  000E62  2028               	addwfc	?___wmul+1,w,c
  6596  000E64  6EF7               	movwf	tblptrh,c
  6597  000E66                     	if	1	;There are 3 active tblptr bytes
  6598  000E66  6AF8               	clrf	tblptru,c
  6599  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6600  000E6A  22F8               	addwfc	tblptru,f,c
  6601  000E6C                     	endif
  6602  000E6C  0009               	tblrd		*+
  6603  000E6E  0100               	movlb	0	; () banked
  6604  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6605  000E74  0009               	tblrd		*+
  6606  000E76  0100               	movlb	0	; () banked
  6607  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6608  000E7C  000A               	tblrd		*-
  6609  000E7E  0100               	movlb	0	; () banked
  6610  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6611  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6612  000E88  C060  F072         	movff	?___ftmul,_fround$2448
  6613  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2448+1
  6614  000E90  C062  F074         	movff	?___ftmul+2,_fround$2448+2
  6615                           
  6616                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6617  000E94  0E00               	movlw	0
  6618  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6619  000E98  0E03               	movlw	3
  6620  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6621  000E9C  0E00               	movlw	0
  6622  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6623  000EA0  0E0A               	movlw	10
  6624  000EA2  6E1B               	movwf	___awmod@divisor,c
  6625  000EA4  0100               	movlb	0	; () banked
  6626  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6627  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6628  000EAC  EC41  F00F         	call	___awmod	;wreg free
  6629  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6630  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6631  000EB8  EC12  F014         	call	___wmul	;wreg free
  6632  000EBC  0EF5               	movlw	low __npowers_
  6633  000EBE  2427               	addwf	?___wmul,w,c
  6634  000EC0  6EF6               	movwf	tblptrl,c
  6635  000EC2  0E7E               	movlw	high __npowers_
  6636  000EC4  2028               	addwfc	?___wmul+1,w,c
  6637  000EC6  6EF7               	movwf	tblptrh,c
  6638  000EC8                     	if	1	;There are 3 active tblptr bytes
  6639  000EC8  6AF8               	clrf	tblptru,c
  6640  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6641  000ECC  22F8               	addwfc	tblptru,f,c
  6642  000ECE                     	endif
  6643  000ECE  0009               	tblrd		*+
  6644  000ED0  0100               	movlb	0	; () banked
  6645  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6646  000ED6  0009               	tblrd		*+
  6647  000ED8  0100               	movlb	0	; () banked
  6648  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6649  000EDE  000A               	tblrd		*-
  6650  000EE0  0100               	movlb	0	; () banked
  6651  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6652  000EE6  C072  F060         	movff	_fround$2448,___ftmul@f1
  6653  000EEA  C073  F061         	movff	_fround$2448+1,___ftmul@f1+1
  6654  000EEE  C074  F062         	movff	_fround$2448+2,___ftmul@f1+2
  6655  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6656  000EF6  C060  F06F         	movff	?___ftmul,_fround$2449
  6657  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2449+1
  6658  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2449+2
  6659                           
  6660                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6661  000F02  C06F  F060         	movff	_fround$2449,___ftmul@f1
  6662  000F06  C070  F061         	movff	_fround$2449+1,___ftmul@f1+1
  6663  000F0A  C071  F062         	movff	_fround$2449+2,___ftmul@f1+2
  6664  000F0E  0E00               	movlw	0
  6665  000F10  0100               	movlb	0	; () banked
  6666  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6667  000F14  0E00               	movlw	0
  6668  000F16  0100               	movlb	0	; () banked
  6669  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6670  000F1A  0E3F               	movlw	63
  6671  000F1C  0100               	movlb	0	; () banked
  6672  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6673  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6674  000F24  D095               	goto	L17
  6675  000F26                     l4819:
  6676                           
  6677                           ;doprnt.c: 415: else if(prec > 10)
  6678  000F26  0E0A               	movlw	10
  6679  000F28  0100               	movlb	0	; () banked
  6680  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6681  000F2C  D06E               	goto	l4827
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6685  000F2E  0E00               	movlw	0
  6686  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6687  000F32  0E03               	movlw	3
  6688  000F34  6E29               	movwf	___wmul@multiplicand,c
  6689  000F36  0E00               	movlw	0
  6690  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6691  000F3A  0E0A               	movlw	10
  6692  000F3C  6E1B               	movwf	___awmod@divisor,c
  6693  000F3E  0100               	movlb	0	; () banked
  6694  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6695  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6696  000F46  EC41  F00F         	call	___awmod	;wreg free
  6697  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6698  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6699  000F52  EC12  F014         	call	___wmul	;wreg free
  6700  000F56  0EF5               	movlw	low __npowers_
  6701  000F58  2427               	addwf	?___wmul,w,c
  6702  000F5A  6EF6               	movwf	tblptrl,c
  6703  000F5C  0E7E               	movlw	high __npowers_
  6704  000F5E  2028               	addwfc	?___wmul+1,w,c
  6705  000F60  6EF7               	movwf	tblptrh,c
  6706  000F62                     	if	1	;There are 3 active tblptr bytes
  6707  000F62  6AF8               	clrf	tblptru,c
  6708  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6709  000F66  22F8               	addwfc	tblptru,f,c
  6710  000F68                     	endif
  6711  000F68  0009               	tblrd		*+
  6712  000F6A  0100               	movlb	0	; () banked
  6713  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6714  000F70  0009               	tblrd		*+
  6715  000F72  0100               	movlb	0	; () banked
  6716  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6717  000F78  000A               	tblrd		*-
  6718  000F7A  0100               	movlb	0	; () banked
  6719  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6720  000F80  0E00               	movlw	0
  6721  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6722  000F84  0E0A               	movlw	10
  6723  000F86  6E21               	movwf	___awdiv@divisor,c
  6724  000F88  0100               	movlb	0	; () banked
  6725  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6726  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6727  000F90  EC59  F00E         	call	___awdiv	;wreg free
  6728  000F94  0E09               	movlw	9
  6729  000F96  241F               	addwf	?___awdiv,w,c
  6730  000F98  6E27               	movwf	___wmul@multiplier,c
  6731  000F9A  0E00               	movlw	0
  6732  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6733  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6734  000FA0  0E00               	movlw	0
  6735  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6736  000FA4  0E03               	movlw	3
  6737  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6738  000FA8  EC12  F014         	call	___wmul	;wreg free
  6739  000FAC  0EF5               	movlw	low __npowers_
  6740  000FAE  2427               	addwf	?___wmul,w,c
  6741  000FB0  6EF6               	movwf	tblptrl,c
  6742  000FB2  0E7E               	movlw	high __npowers_
  6743  000FB4  2028               	addwfc	?___wmul+1,w,c
  6744  000FB6  6EF7               	movwf	tblptrh,c
  6745  000FB8                     	if	1	;There are 3 active tblptr bytes
  6746  000FB8  6AF8               	clrf	tblptru,c
  6747  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6748  000FBC  22F8               	addwfc	tblptru,f,c
  6749  000FBE                     	endif
  6750  000FBE  0009               	tblrd		*+
  6751  000FC0  0100               	movlb	0	; () banked
  6752  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6753  000FC6  0009               	tblrd		*+
  6754  000FC8  0100               	movlb	0	; () banked
  6755  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6756  000FCE  000A               	tblrd		*-
  6757  000FD0  0100               	movlb	0	; () banked
  6758  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6759  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6760  000FDA  C060  F072         	movff	?___ftmul,_fround$2448
  6761  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2448+1
  6762  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2448+2
  6763                           
  6764                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6765  000FE6  C072  F060         	movff	_fround$2448,___ftmul@f1
  6766  000FEA  C073  F061         	movff	_fround$2448+1,___ftmul@f1+1
  6767  000FEE  C074  F062         	movff	_fround$2448+2,___ftmul@f1+2
  6768  000FF2  0E00               	movlw	0
  6769  000FF4  0100               	movlb	0	; () banked
  6770  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6771  000FF8  0E00               	movlw	0
  6772  000FFA  0100               	movlb	0	; () banked
  6773  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6774  000FFE  0E3F               	movlw	63
  6775  001000  0100               	movlb	0	; () banked
  6776  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6777  001004  EC6F  F009         	call	___ftmul	;wreg free
  6778  001008  D023               	goto	L17
  6779  00100A                     l4827:
  6780                           
  6781                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6782  00100A  0100               	movlb	0	; () banked
  6783  00100C  5175               	movf	fround@prec& (0+255),w,b
  6784  00100E  0D03               	mullw	3
  6785  001010  0EF5               	movlw	low __npowers_
  6786  001012  24F3               	addwf	prodl,w,c
  6787  001014  6EF6               	movwf	tblptrl,c
  6788  001016  0E7E               	movlw	high __npowers_
  6789  001018  20F4               	addwfc	prodh,w,c
  6790  00101A  6EF7               	movwf	tblptrh,c
  6791  00101C                     	if	1	;There are 3 active tblptr bytes
  6792  00101C  6AF8               	clrf	tblptru,c
  6793  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6794  001020  22F8               	addwfc	tblptru,f,c
  6795  001022                     	endif
  6796  001022  0009               	tblrd		*+
  6797  001024  0100               	movlb	0	; () banked
  6798  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6799  00102A  0009               	tblrd		*+
  6800  00102C  0100               	movlb	0	; () banked
  6801  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6802  001032  000A               	tblrd		*-
  6803  001034  0100               	movlb	0	; () banked
  6804  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6805  00103A  0E00               	movlw	0
  6806  00103C  0100               	movlb	0	; () banked
  6807  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6808  001040  0E00               	movlw	0
  6809  001042  0100               	movlb	0	; () banked
  6810  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6811  001046  0E3F               	movlw	63
  6812  001048  0100               	movlb	0	; () banked
  6813  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6814  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6815  001050                     L17:
  6816  001050  C060  F06C         	movff	?___ftmul,?_fround
  6817  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6818  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6819  00105C  0012               	return	
  6820  00105E                     __end_of_fround:
  6821                           	opt stack 0
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodh	equ	0xFF4
  6827                           prodl	equ	0xFF3
  6828                           intcon	equ	0xFF2
  6829                           indf0	equ	0xFEF
  6830                           postinc0	equ	0xFEE
  6831                           fsr0h	equ	0xFEA
  6832                           fsr0l	equ	0xFE9
  6833                           wreg	equ	0xFE8
  6834                           postinc1	equ	0xFE6
  6835                           postdec1	equ	0xFE5
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function ___wmul *****************
  6845 ;; Defined at:
  6846 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  multiplier      2   38[COMRAM] unsigned int 
  6849 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;  product         2   42[COMRAM] unsigned int 
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  2   38[COMRAM] unsigned int 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, prodl, prodh
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6861 ;;      Params:         4       0       0       0       0       0       0       0       0
  6862 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6864 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6865 ;;Total ram usage:        6 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    4
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_fround
  6872 ;;		_scale
  6873 ;;		_sprintf
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text30
  6878  002824                     __ptext30:
  6879                           	opt stack 0
  6880  002824                     ___wmul:
  6881                           	opt stack 22
  6882                           
  6883                           ;incstack = 0
  6884  002824  5027               	movf	___wmul@multiplier,w,c
  6885  002826  0229               	mulwf	___wmul@multiplicand,c
  6886  002828  CFF3 F02B          	movff	prodl,___wmul@product
  6887  00282C  CFF4 F02C          	movff	prodh,___wmul@product+1
  6888  002830  5027               	movf	___wmul@multiplier,w,c
  6889  002832  022A               	mulwf	___wmul@multiplicand+1,c
  6890  002834  50F3               	movf	prodl,w,c
  6891  002836  262C               	addwf	___wmul@product+1,f,c
  6892  002838  5028               	movf	___wmul@multiplier+1,w,c
  6893  00283A  0229               	mulwf	___wmul@multiplicand,c
  6894  00283C  50F3               	movf	prodl,w,c
  6895  00283E  262C               	addwf	___wmul@product+1,f,c
  6896  002840  C02B  F027         	movff	___wmul@product,?___wmul
  6897  002844  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6898  002848  0012               	return	
  6899  00284A                     __end_of___wmul:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           indf0	equ	0xFEF
  6909                           postinc0	equ	0xFEE
  6910                           fsr0h	equ	0xFEA
  6911                           fsr0l	equ	0xFE9
  6912                           wreg	equ	0xFE8
  6913                           postinc1	equ	0xFE6
  6914                           postdec1	equ	0xFE5
  6915                           fsr1l	equ	0xFE1
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function ___ftmul *****************
  6924 ;; Defined at:
  6925 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  f1              3    0[BANK0 ] float 
  6928 ;;  f2              3    3[BANK0 ] float 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6931 ;;  sign            1   11[BANK0 ] unsigned char 
  6932 ;;  cntr            1   10[BANK0 ] unsigned char 
  6933 ;;  exp             1    6[BANK0 ] unsigned char 
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  3    0[BANK0 ] float 
  6936 ;; Registers used:
  6937 ;;		wreg, status,2, status,0, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6943 ;;      Params:         0       6       0       0       0       0       0       0       0
  6944 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6945 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6946 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6947 ;;Total ram usage:       15 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    5
  6950 ;; This function calls:
  6951 ;;		___ftpack
  6952 ;; This function is called by:
  6953 ;;		_PWM_DutyCycle1
  6954 ;;		_PWM_DutyCycle2
  6955 ;;		_fround
  6956 ;;		_scale
  6957 ;;		_sprintf
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text31
  6962  0012DE                     __ptext31:
  6963                           	opt stack 0
  6964  0012DE                     ___ftmul:
  6965                           	opt stack 21
  6966                           
  6967                           ;incstack = 0
  6968  0012DE  0100               	movlb	0	; () banked
  6969  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6970  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6971  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6972  0012E8  0100               	movlb	0	; () banked
  6973  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6974  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6975  0012EE  E301               	bnc	u5091
  6976  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6977  0012F2                     u5091:
  6978  0012F2  502D               	movf	??___ftmul,w,c
  6979  0012F4  0100               	movlb	0	; () banked
  6980  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6981  0012F8  0100               	movlb	0	; () banked
  6982  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6983  0012FC  D001               	goto	l4591
  6984  0012FE  D010               	goto	u5120
  6985  001300                     l4591:
  6986                           
  6987                           ; BSR set to: 0
  6988  001300  0100               	movlb	0	; () banked
  6989  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6990  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6991  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6992  00130A  0100               	movlb	0	; () banked
  6993  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6994  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6995  001310  E301               	bnc	u5111
  6996  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6997  001314                     u5111:
  6998  001314  502D               	movf	??___ftmul,w,c
  6999  001316  0100               	movlb	0	; () banked
  7000  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  7001  00131A  0100               	movlb	0	; () banked
  7002  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  7003  00131E  D00A               	goto	l4597
  7004  001320                     u5120:
  7005                           
  7006                           ; BSR set to: 0
  7007  001320  0E00               	movlw	0
  7008  001322  0100               	movlb	0	; () banked
  7009  001324  6F60               	movwf	?___ftmul& (0+255),b
  7010  001326  0E00               	movlw	0
  7011  001328  0100               	movlb	0	; () banked
  7012  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  7013  00132C  0E00               	movlw	0
  7014  00132E  0100               	movlb	0	; () banked
  7015  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  7016  001332  D080               	goto	l1058
  7017  001334                     l4597:
  7018                           
  7019                           ; BSR set to: 0
  7020  001334  0100               	movlb	0	; () banked
  7021  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  7022  001338  0F7B               	addlw	123
  7023  00133A  0100               	movlb	0	; () banked
  7024  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  7025                           
  7026                           ; BSR set to: 0
  7027  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  7028  001342  0100               	movlb	0	; () banked
  7029  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7030  001346  0100               	movlb	0	; () banked
  7031  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  7032  00134A  0E80               	movlw	128
  7033  00134C  0100               	movlb	0	; () banked
  7034  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  7035                           
  7036                           ; BSR set to: 0
  7037  001350  0100               	movlb	0	; () banked
  7038  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7039                           
  7040                           ; BSR set to: 0
  7041  001354  0100               	movlb	0	; () banked
  7042  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7043                           
  7044                           ; BSR set to: 0
  7045  001358  0EFF               	movlw	255
  7046  00135A  0100               	movlb	0	; () banked
  7047  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  7048  00135E  0EFF               	movlw	255
  7049  001360  0100               	movlb	0	; () banked
  7050  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7051  001364  0E00               	movlw	0
  7052  001366  0100               	movlb	0	; () banked
  7053  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7054                           
  7055                           ; BSR set to: 0
  7056  00136A  0E00               	movlw	0
  7057  00136C  0100               	movlb	0	; () banked
  7058  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  7059  001370  0E00               	movlw	0
  7060  001372  0100               	movlb	0	; () banked
  7061  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7062  001376  0E00               	movlw	0
  7063  001378  0100               	movlb	0	; () banked
  7064  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7065                           
  7066                           ; BSR set to: 0
  7067  00137C  0E07               	movlw	7
  7068  00137E  0100               	movlb	0	; () banked
  7069  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7070  001382                     l4611:
  7071                           
  7072                           ; BSR set to: 0
  7073  001382  0100               	movlb	0	; () banked
  7074  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  7075  001386  D00C               	goto	l4615
  7076                           
  7077                           ; BSR set to: 0
  7078  001388  0100               	movlb	0	; () banked
  7079  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  7080  00138C  0100               	movlb	0	; () banked
  7081  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7082  001390  0100               	movlb	0	; () banked
  7083  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7084  001394  0100               	movlb	0	; () banked
  7085  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7086  001398  0100               	movlb	0	; () banked
  7087  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7088  00139C  0100               	movlb	0	; () banked
  7089  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7090  0013A0                     l4615:
  7091                           
  7092                           ; BSR set to: 0
  7093  0013A0  0100               	movlb	0	; () banked
  7094  0013A2  90D8               	bcf	status,0,c
  7095  0013A4  0100               	movlb	0	; () banked
  7096  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7097  0013A8  0100               	movlb	0	; () banked
  7098  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7099  0013AC  0100               	movlb	0	; () banked
  7100  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7101  0013B0  0100               	movlb	0	; () banked
  7102  0013B2  90D8               	bcf	status,0,c
  7103  0013B4  0100               	movlb	0	; () banked
  7104  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  7105  0013B8  0100               	movlb	0	; () banked
  7106  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7107  0013BC  0100               	movlb	0	; () banked
  7108  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7109                           
  7110                           ; BSR set to: 0
  7111  0013C0  0100               	movlb	0	; () banked
  7112  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7113  0013C4  D7DE               	goto	l4611
  7114                           
  7115                           ; BSR set to: 0
  7116                           
  7117                           ; BSR set to: 0
  7118  0013C6  0E09               	movlw	9
  7119  0013C8  0100               	movlb	0	; () banked
  7120  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7121  0013CC                     l4621:
  7122                           
  7123                           ; BSR set to: 0
  7124  0013CC  0100               	movlb	0	; () banked
  7125  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  7126  0013D0  D00C               	goto	l4625
  7127                           
  7128                           ; BSR set to: 0
  7129  0013D2  0100               	movlb	0	; () banked
  7130  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  7131  0013D6  0100               	movlb	0	; () banked
  7132  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7133  0013DA  0100               	movlb	0	; () banked
  7134  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7135  0013DE  0100               	movlb	0	; () banked
  7136  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7137  0013E2  0100               	movlb	0	; () banked
  7138  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7139  0013E6  0100               	movlb	0	; () banked
  7140  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7141  0013EA                     l4625:
  7142                           
  7143                           ; BSR set to: 0
  7144  0013EA  0100               	movlb	0	; () banked
  7145  0013EC  90D8               	bcf	status,0,c
  7146  0013EE  0100               	movlb	0	; () banked
  7147  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7148  0013F2  0100               	movlb	0	; () banked
  7149  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7150  0013F6  0100               	movlb	0	; () banked
  7151  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7152  0013FA  0100               	movlb	0	; () banked
  7153  0013FC  90D8               	bcf	status,0,c
  7154  0013FE  0100               	movlb	0	; () banked
  7155  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7156  001402  0100               	movlb	0	; () banked
  7157  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7158  001406  0100               	movlb	0	; () banked
  7159  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7160                           
  7161                           ; BSR set to: 0
  7162  00140A  0100               	movlb	0	; () banked
  7163  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7164  00140E  D7DE               	goto	l4621
  7165                           
  7166                           ; BSR set to: 0
  7167                           
  7168                           ; BSR set to: 0
  7169  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  7170  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7171  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7172  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  7173  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  7174  001424  ECB2  F00D         	call	___ftpack	;wreg free
  7175  001428  C019  F060         	movff	?___ftpack,?___ftmul
  7176  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  7177  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  7178  001434                     l1058:
  7179  001434  0012               	return	
  7180  001436                     __end_of___ftmul:
  7181                           	opt stack 0
  7182                           tblptru	equ	0xFF8
  7183                           tblptrh	equ	0xFF7
  7184                           tblptrl	equ	0xFF6
  7185                           tablat	equ	0xFF5
  7186                           prodh	equ	0xFF4
  7187                           prodl	equ	0xFF3
  7188                           intcon	equ	0xFF2
  7189                           indf0	equ	0xFEF
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           postinc1	equ	0xFE6
  7195                           postdec1	equ	0xFE5
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function ___awmod *****************
  7205 ;; Defined at:
  7206 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  dividend        2   24[COMRAM] int 
  7209 ;;  divisor         2   26[COMRAM] int 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  sign            1   29[COMRAM] unsigned char 
  7212 ;;  counter         1   28[COMRAM] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  2   24[COMRAM] int 
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, prodl
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7222 ;;      Params:         4       0       0       0       0       0       0       0       0
  7223 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7225 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7226 ;;Total ram usage:        6 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    4
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_fround
  7233 ;;		_scale
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text32
  7238  001E82                     __ptext32:
  7239                           	opt stack 0
  7240  001E82                     ___awmod:
  7241                           	opt stack 22
  7242                           
  7243                           ;incstack = 0
  7244  001E82  0E00               	movlw	0
  7245  001E84  6E1E               	movwf	___awmod@sign,c
  7246  001E86  501A               	movf	___awmod@dividend+1,w,c
  7247  001E88  0A80               	xorlw	128
  7248  001E8A  6EF3               	movwf	prodl,c
  7249  001E8C  0E80               	movlw	128
  7250  001E8E  5CF3               	subwf	prodl,w,c
  7251  001E90  0E00               	movlw	0
  7252  001E92  B4D8               	btfsc	status,2,c
  7253  001E94  5C19               	subwf	___awmod@dividend,w,c
  7254  001E96  B0D8               	btfsc	status,0,c
  7255  001E98  D006               	goto	l4685
  7256  001E9A  6C19               	negf	___awmod@dividend,c
  7257  001E9C  1E1A               	comf	___awmod@dividend+1,f,c
  7258  001E9E  B0D8               	btfsc	status,0,c
  7259  001EA0  2A1A               	incf	___awmod@dividend+1,f,c
  7260  001EA2  0E01               	movlw	1
  7261  001EA4  6E1E               	movwf	___awmod@sign,c
  7262  001EA6                     l4685:
  7263  001EA6  501C               	movf	___awmod@divisor+1,w,c
  7264  001EA8  0A80               	xorlw	128
  7265  001EAA  6EF3               	movwf	prodl,c
  7266  001EAC  0E80               	movlw	128
  7267  001EAE  5CF3               	subwf	prodl,w,c
  7268  001EB0  0E00               	movlw	0
  7269  001EB2  B4D8               	btfsc	status,2,c
  7270  001EB4  5C1B               	subwf	___awmod@divisor,w,c
  7271  001EB6  B0D8               	btfsc	status,0,c
  7272  001EB8  D004               	goto	l4689
  7273  001EBA  6C1B               	negf	___awmod@divisor,c
  7274  001EBC  1E1C               	comf	___awmod@divisor+1,f,c
  7275  001EBE  B0D8               	btfsc	status,0,c
  7276  001EC0  2A1C               	incf	___awmod@divisor+1,f,c
  7277  001EC2                     l4689:
  7278  001EC2  501C               	movf	___awmod@divisor+1,w,c
  7279  001EC4  101B               	iorwf	___awmod@divisor,w,c
  7280  001EC6  B4D8               	btfsc	status,2,c
  7281  001EC8  D018               	goto	l4705
  7282  001ECA  0E01               	movlw	1
  7283  001ECC  6E1D               	movwf	___awmod@counter,c
  7284  001ECE  D004               	goto	l4695
  7285  001ED0                     l4693:
  7286  001ED0  90D8               	bcf	status,0,c
  7287  001ED2  361B               	rlcf	___awmod@divisor,f,c
  7288  001ED4  361C               	rlcf	___awmod@divisor+1,f,c
  7289  001ED6  2A1D               	incf	___awmod@counter,f,c
  7290  001ED8                     l4695:
  7291  001ED8  AE1C               	btfss	___awmod@divisor+1,7,c
  7292  001EDA  D7FA               	goto	l4693
  7293  001EDC                     l4697:
  7294  001EDC  501B               	movf	___awmod@divisor,w,c
  7295  001EDE  5C19               	subwf	___awmod@dividend,w,c
  7296  001EE0  501C               	movf	___awmod@divisor+1,w,c
  7297  001EE2  581A               	subwfb	___awmod@dividend+1,w,c
  7298  001EE4  A0D8               	btfss	status,0,c
  7299  001EE6  D004               	goto	l4701
  7300  001EE8  501B               	movf	___awmod@divisor,w,c
  7301  001EEA  5E19               	subwf	___awmod@dividend,f,c
  7302  001EEC  501C               	movf	___awmod@divisor+1,w,c
  7303  001EEE  5A1A               	subwfb	___awmod@dividend+1,f,c
  7304  001EF0                     l4701:
  7305  001EF0  90D8               	bcf	status,0,c
  7306  001EF2  321C               	rrcf	___awmod@divisor+1,f,c
  7307  001EF4  321B               	rrcf	___awmod@divisor,f,c
  7308  001EF6  2E1D               	decfsz	___awmod@counter,f,c
  7309  001EF8  D7F1               	goto	l4697
  7310  001EFA                     l4705:
  7311  001EFA  501E               	movf	___awmod@sign,w,c
  7312  001EFC  B4D8               	btfsc	status,2,c
  7313  001EFE  D004               	goto	l4709
  7314  001F00  6C19               	negf	___awmod@dividend,c
  7315  001F02  1E1A               	comf	___awmod@dividend+1,f,c
  7316  001F04  B0D8               	btfsc	status,0,c
  7317  001F06  2A1A               	incf	___awmod@dividend+1,f,c
  7318  001F08                     l4709:
  7319  001F08  C019  F019         	movff	___awmod@dividend,?___awmod
  7320  001F0C  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7321  001F10  0012               	return	
  7322  001F12                     __end_of___awmod:
  7323                           	opt stack 0
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           intcon	equ	0xFF2
  7331                           indf0	equ	0xFEF
  7332                           postinc0	equ	0xFEE
  7333                           fsr0h	equ	0xFEA
  7334                           fsr0l	equ	0xFE9
  7335                           wreg	equ	0xFE8
  7336                           postinc1	equ	0xFE6
  7337                           postdec1	equ	0xFE5
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function ___awdiv *****************
  7347 ;; Defined at:
  7348 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  dividend        2   30[COMRAM] int 
  7351 ;;  divisor         2   32[COMRAM] int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  quotient        2   36[COMRAM] int 
  7354 ;;  sign            1   35[COMRAM] unsigned char 
  7355 ;;  counter         1   34[COMRAM] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  2   30[COMRAM] int 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, prodl
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7365 ;;      Params:         4       0       0       0       0       0       0       0       0
  7366 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7368 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7369 ;;Total ram usage:        8 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    4
  7372 ;; This function calls:
  7373 ;;		Nothing
  7374 ;; This function is called by:
  7375 ;;		_fround
  7376 ;;		_scale
  7377 ;;		_sprintf
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text33
  7382  001CB2                     __ptext33:
  7383                           	opt stack 0
  7384  001CB2                     ___awdiv:
  7385                           	opt stack 22
  7386                           
  7387                           ;incstack = 0
  7388  001CB2  0E00               	movlw	0
  7389  001CB4  6E24               	movwf	___awdiv@sign,c
  7390  001CB6  5022               	movf	___awdiv@divisor+1,w,c
  7391  001CB8  0A80               	xorlw	128
  7392  001CBA  6EF3               	movwf	prodl,c
  7393  001CBC  0E80               	movlw	128
  7394  001CBE  5CF3               	subwf	prodl,w,c
  7395  001CC0  0E00               	movlw	0
  7396  001CC2  B4D8               	btfsc	status,2,c
  7397  001CC4  5C21               	subwf	___awdiv@divisor,w,c
  7398  001CC6  B0D8               	btfsc	status,0,c
  7399  001CC8  D006               	goto	l4641
  7400  001CCA  6C21               	negf	___awdiv@divisor,c
  7401  001CCC  1E22               	comf	___awdiv@divisor+1,f,c
  7402  001CCE  B0D8               	btfsc	status,0,c
  7403  001CD0  2A22               	incf	___awdiv@divisor+1,f,c
  7404  001CD2  0E01               	movlw	1
  7405  001CD4  6E24               	movwf	___awdiv@sign,c
  7406  001CD6                     l4641:
  7407  001CD6  5020               	movf	___awdiv@dividend+1,w,c
  7408  001CD8  0A80               	xorlw	128
  7409  001CDA  6EF3               	movwf	prodl,c
  7410  001CDC  0E80               	movlw	128
  7411  001CDE  5CF3               	subwf	prodl,w,c
  7412  001CE0  0E00               	movlw	0
  7413  001CE2  B4D8               	btfsc	status,2,c
  7414  001CE4  5C1F               	subwf	___awdiv@dividend,w,c
  7415  001CE6  B0D8               	btfsc	status,0,c
  7416  001CE8  D006               	goto	l4647
  7417  001CEA  6C1F               	negf	___awdiv@dividend,c
  7418  001CEC  1E20               	comf	___awdiv@dividend+1,f,c
  7419  001CEE  B0D8               	btfsc	status,0,c
  7420  001CF0  2A20               	incf	___awdiv@dividend+1,f,c
  7421  001CF2  0E01               	movlw	1
  7422  001CF4  1A24               	xorwf	___awdiv@sign,f,c
  7423  001CF6                     l4647:
  7424  001CF6  0E00               	movlw	0
  7425  001CF8  6E26               	movwf	___awdiv@quotient+1,c
  7426  001CFA  0E00               	movlw	0
  7427  001CFC  6E25               	movwf	___awdiv@quotient,c
  7428  001CFE  5022               	movf	___awdiv@divisor+1,w,c
  7429  001D00  1021               	iorwf	___awdiv@divisor,w,c
  7430  001D02  B4D8               	btfsc	status,2,c
  7431  001D04  D01C               	goto	l4669
  7432  001D06  0E01               	movlw	1
  7433  001D08  6E23               	movwf	___awdiv@counter,c
  7434  001D0A  D004               	goto	l4655
  7435  001D0C                     l4653:
  7436  001D0C  90D8               	bcf	status,0,c
  7437  001D0E  3621               	rlcf	___awdiv@divisor,f,c
  7438  001D10  3622               	rlcf	___awdiv@divisor+1,f,c
  7439  001D12  2A23               	incf	___awdiv@counter,f,c
  7440  001D14                     l4655:
  7441  001D14  AE22               	btfss	___awdiv@divisor+1,7,c
  7442  001D16  D7FA               	goto	l4653
  7443  001D18                     l4657:
  7444  001D18  90D8               	bcf	status,0,c
  7445  001D1A  3625               	rlcf	___awdiv@quotient,f,c
  7446  001D1C  3626               	rlcf	___awdiv@quotient+1,f,c
  7447  001D1E  5021               	movf	___awdiv@divisor,w,c
  7448  001D20  5C1F               	subwf	___awdiv@dividend,w,c
  7449  001D22  5022               	movf	___awdiv@divisor+1,w,c
  7450  001D24  5820               	subwfb	___awdiv@dividend+1,w,c
  7451  001D26  A0D8               	btfss	status,0,c
  7452  001D28  D005               	goto	l4665
  7453  001D2A  5021               	movf	___awdiv@divisor,w,c
  7454  001D2C  5E1F               	subwf	___awdiv@dividend,f,c
  7455  001D2E  5022               	movf	___awdiv@divisor+1,w,c
  7456  001D30  5A20               	subwfb	___awdiv@dividend+1,f,c
  7457  001D32  8025               	bsf	___awdiv@quotient,0,c
  7458  001D34                     l4665:
  7459  001D34  90D8               	bcf	status,0,c
  7460  001D36  3222               	rrcf	___awdiv@divisor+1,f,c
  7461  001D38  3221               	rrcf	___awdiv@divisor,f,c
  7462  001D3A  2E23               	decfsz	___awdiv@counter,f,c
  7463  001D3C  D7ED               	goto	l4657
  7464  001D3E                     l4669:
  7465  001D3E  5024               	movf	___awdiv@sign,w,c
  7466  001D40  B4D8               	btfsc	status,2,c
  7467  001D42  D004               	goto	l4673
  7468  001D44  6C25               	negf	___awdiv@quotient,c
  7469  001D46  1E26               	comf	___awdiv@quotient+1,f,c
  7470  001D48  B0D8               	btfsc	status,0,c
  7471  001D4A  2A26               	incf	___awdiv@quotient+1,f,c
  7472  001D4C                     l4673:
  7473  001D4C  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7474  001D50  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7475  001D54  0012               	return	
  7476  001D56                     __end_of___awdiv:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodh	equ	0xFF4
  7483                           prodl	equ	0xFF3
  7484                           intcon	equ	0xFF2
  7485                           indf0	equ	0xFEF
  7486                           postinc0	equ	0xFEE
  7487                           fsr0h	equ	0xFEA
  7488                           fsr0l	equ	0xFE9
  7489                           wreg	equ	0xFE8
  7490                           postinc1	equ	0xFE6
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function __tdiv_to_l_ *****************
  7501 ;; Defined at:
  7502 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;  f1              3   24[COMRAM] float 
  7505 ;;  f2              3   27[COMRAM] float 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  quot            4   33[COMRAM] unsigned long 
  7508 ;;  exp1            1   38[COMRAM] unsigned char 
  7509 ;;  cntr            1   37[COMRAM] unsigned char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  4   24[COMRAM] unsigned long 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7519 ;;      Params:         6       0       0       0       0       0       0       0       0
  7520 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7521 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7522 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7523 ;;Total ram usage:       15 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    4
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_sprintf
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text34
  7534  0017F4                     __ptext34:
  7535                           	opt stack 0
  7536  0017F4                     __tdiv_to_l_:
  7537                           	opt stack 23
  7538                           
  7539                           ;incstack = 0
  7540  0017F4  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7541  0017F8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7542  0017FA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7543  0017FC  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7544  0017FE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7545  001800  E301               	bnc	u5501
  7546  001802  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7547  001804                     u5501:
  7548  001804  501F               	movf	??__tdiv_to_l_,w,c
  7549  001806  6E27               	movwf	__tdiv_to_l_@exp1,c
  7550  001808  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7551  00180A  D001               	goto	l4875
  7552  00180C  D059               	goto	u5570
  7553  00180E                     l4875:
  7554  00180E  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7555  001812  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7556  001814  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7557  001816  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7558  001818  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7559  00181A  E301               	bnc	u5521
  7560  00181C  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7561  00181E                     u5521:
  7562  00181E  501F               	movf	??__tdiv_to_l_,w,c
  7563  001820  6E26               	movwf	__tdiv_to_l_@cntr,c
  7564  001822  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7565  001824  D001               	goto	l4881
  7566  001826  D04C               	goto	u5570
  7567  001828                     l4881:
  7568  001828  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7569  00182A  0EFF               	movlw	255
  7570  00182C  1619               	andwf	__tdiv_to_l_@f1,f,c
  7571  00182E  0EFF               	movlw	255
  7572  001830  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7573  001832  0E00               	movlw	0
  7574  001834  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7575  001836  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7576  001838  0EFF               	movlw	255
  7577  00183A  161C               	andwf	__tdiv_to_l_@f2,f,c
  7578  00183C  0EFF               	movlw	255
  7579  00183E  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7580  001840  0E00               	movlw	0
  7581  001842  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7582  001844  0E00               	movlw	0
  7583  001846  6E22               	movwf	__tdiv_to_l_@quot,c
  7584  001848  0E00               	movlw	0
  7585  00184A  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7586  00184C  0E00               	movlw	0
  7587  00184E  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7588  001850  0E00               	movlw	0
  7589  001852  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7590  001854  0E7F               	movlw	127
  7591  001856  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7592  001858  5026               	movf	__tdiv_to_l_@cntr,w,c
  7593  00185A  0F98               	addlw	152
  7594  00185C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7595  00185E  0E18               	movlw	24
  7596  001860  6E26               	movwf	__tdiv_to_l_@cntr,c
  7597  001862                     l1036:
  7598  001862  90D8               	bcf	status,0,c
  7599  001864  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7600  001866  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7601  001868  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7602  00186A  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7603  00186C  501C               	movf	__tdiv_to_l_@f2,w,c
  7604  00186E  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7605  001870  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7606  001872  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7607  001874  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7608  001876  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7609  001878  A0D8               	btfss	status,0,c
  7610  00187A  D007               	goto	l1037
  7611  00187C  501C               	movf	__tdiv_to_l_@f2,w,c
  7612  00187E  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7613  001880  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7614  001882  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7615  001884  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7616  001886  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7617  001888  8022               	bsf	__tdiv_to_l_@quot,0,c
  7618  00188A                     l1037:
  7619  00188A  90D8               	bcf	status,0,c
  7620  00188C  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7621  00188E  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7622  001890  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7623  001892  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7624  001894  D7E6               	goto	l1036
  7625  001896  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7626  001898  D010               	goto	l4913
  7627  00189A  5027               	movf	__tdiv_to_l_@exp1,w,c
  7628  00189C  0A80               	xorlw	128
  7629  00189E  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7630  0018A0  0EE9               	movlw	233
  7631  0018A2  0A80               	xorlw	128
  7632  0018A4  5C1F               	subwf	??__tdiv_to_l_,w,c
  7633  0018A6  A0D8               	btfss	status,0,c
  7634  0018A8  D00B               	goto	u5570
  7635  0018AA                     l4909:
  7636  0018AA  90D8               	bcf	status,0,c
  7637  0018AC  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7638  0018AE  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7639  0018B0  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7640  0018B2  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7641  0018B4  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7642  0018B6  D7F9               	goto	l4909
  7643  0018B8  D014               	goto	l1043
  7644  0018BA                     l4913:
  7645  0018BA  0E17               	movlw	23
  7646  0018BC  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7647  0018BE  D00F               	goto	l4921
  7648  0018C0                     u5570:
  7649  0018C0  0E00               	movlw	0
  7650  0018C2  6E19               	movwf	?__tdiv_to_l_,c
  7651  0018C4  0E00               	movlw	0
  7652  0018C6  6E1A               	movwf	?__tdiv_to_l_+1,c
  7653  0018C8  0E00               	movlw	0
  7654  0018CA  6E1B               	movwf	?__tdiv_to_l_+2,c
  7655  0018CC  0E00               	movlw	0
  7656  0018CE  6E1C               	movwf	?__tdiv_to_l_+3,c
  7657  0018D0  D010               	goto	l1034
  7658  0018D2                     l4919:
  7659  0018D2  90D8               	bcf	status,0,c
  7660  0018D4  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7661  0018D6  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7662  0018D8  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7663  0018DA  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7664  0018DC  0627               	decf	__tdiv_to_l_@exp1,f,c
  7665  0018DE                     l4921:
  7666  0018DE  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7667  0018E0  D7F8               	goto	l4919
  7668  0018E2                     l1043:
  7669  0018E2  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7670  0018E6  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7671  0018EA  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7672  0018EE  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7673  0018F2                     l1034:
  7674  0018F2  0012               	return	
  7675  0018F4                     __end_of__tdiv_to_l_:
  7676                           	opt stack 0
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           intcon	equ	0xFF2
  7684                           indf0	equ	0xFEF
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postinc1	equ	0xFE6
  7690                           postdec1	equ	0xFE5
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function __div_to_l_ *****************
  7700 ;; Defined at:
  7701 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  f1              3   24[COMRAM] unsigned long 
  7704 ;;  f2              3   27[COMRAM] unsigned long 
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  quot            4   34[COMRAM] unsigned long 
  7707 ;;  exp1            1   39[COMRAM] unsigned char 
  7708 ;;  cntr            1   38[COMRAM] unsigned char 
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  4   24[COMRAM] unsigned long 
  7711 ;; Registers used:
  7712 ;;		wreg, status,2, status,0
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7718 ;;      Params:         6       0       0       0       0       0       0       0       0
  7719 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7720 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7721 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7722 ;;Total ram usage:       16 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    4
  7725 ;; This function calls:
  7726 ;;		Nothing
  7727 ;; This function is called by:
  7728 ;;		_sprintf
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text35
  7733  0016BE                     __ptext35:
  7734                           	opt stack 0
  7735  0016BE                     __div_to_l_:
  7736                           	opt stack 23
  7737                           
  7738                           ;incstack = 0
  7739  0016BE  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7740  0016C2  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7741  0016C6  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7742  0016CA  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7743  0016CE  0E18               	movlw	24
  7744  0016D0  D005               	goto	u5590
  7745  0016D2                     u5595:
  7746  0016D2  90D8               	bcf	status,0,c
  7747  0016D4  3222               	rrcf	??__div_to_l_+3,f,c
  7748  0016D6  3221               	rrcf	??__div_to_l_+2,f,c
  7749  0016D8  3220               	rrcf	??__div_to_l_+1,f,c
  7750  0016DA  321F               	rrcf	??__div_to_l_,f,c
  7751  0016DC                     u5590:
  7752  0016DC  2EE8               	decfsz	wreg,f,c
  7753  0016DE  D7F9               	goto	u5595
  7754  0016E0  501F               	movf	??__div_to_l_,w,c
  7755  0016E2  6E28               	movwf	__div_to_l_@exp1,c
  7756  0016E4  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7757  0016E6  D001               	goto	l4929
  7758  0016E8  D06B               	goto	u5660
  7759  0016EA                     l4929:
  7760  0016EA  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7761  0016EE  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7762  0016F2  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7763  0016F6  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7764  0016FA  0E18               	movlw	24
  7765  0016FC  D005               	goto	u5610
  7766  0016FE                     u5615:
  7767  0016FE  90D8               	bcf	status,0,c
  7768  001700  3222               	rrcf	??__div_to_l_+3,f,c
  7769  001702  3221               	rrcf	??__div_to_l_+2,f,c
  7770  001704  3220               	rrcf	??__div_to_l_+1,f,c
  7771  001706  321F               	rrcf	??__div_to_l_,f,c
  7772  001708                     u5610:
  7773  001708  2EE8               	decfsz	wreg,f,c
  7774  00170A  D7F9               	goto	u5615
  7775  00170C  501F               	movf	??__div_to_l_,w,c
  7776  00170E  6E27               	movwf	__div_to_l_@cntr,c
  7777  001710  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7778  001712  D001               	goto	l4935
  7779  001714  D055               	goto	u5660
  7780  001716                     l4935:
  7781  001716  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7782  001718  0EFF               	movlw	255
  7783  00171A  1619               	andwf	__div_to_l_@f1,f,c
  7784  00171C  0EFF               	movlw	255
  7785  00171E  161A               	andwf	__div_to_l_@f1+1,f,c
  7786  001720  0EFF               	movlw	255
  7787  001722  161B               	andwf	__div_to_l_@f1+2,f,c
  7788  001724  0E00               	movlw	0
  7789  001726  161C               	andwf	__div_to_l_@f1+3,f,c
  7790  001728  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7791  00172A  0EFF               	movlw	255
  7792  00172C  161C               	andwf	__div_to_l_@f2,f,c
  7793  00172E  0EFF               	movlw	255
  7794  001730  161D               	andwf	__div_to_l_@f2+1,f,c
  7795  001732  0EFF               	movlw	255
  7796  001734  161E               	andwf	__div_to_l_@f2+2,f,c
  7797  001736  0E00               	movlw	0
  7798  001738  161F               	andwf	__div_to_l_@f2+3,f,c
  7799  00173A  0E00               	movlw	0
  7800  00173C  6E23               	movwf	__div_to_l_@quot,c
  7801  00173E  0E00               	movlw	0
  7802  001740  6E24               	movwf	__div_to_l_@quot+1,c
  7803  001742  0E00               	movlw	0
  7804  001744  6E25               	movwf	__div_to_l_@quot+2,c
  7805  001746  0E00               	movlw	0
  7806  001748  6E26               	movwf	__div_to_l_@quot+3,c
  7807  00174A  0E7F               	movlw	127
  7808  00174C  5E28               	subwf	__div_to_l_@exp1,f,c
  7809  00174E  5027               	movf	__div_to_l_@cntr,w,c
  7810  001750  0FA0               	addlw	160
  7811  001752  5E28               	subwf	__div_to_l_@exp1,f,c
  7812  001754  0E20               	movlw	32
  7813  001756  6E27               	movwf	__div_to_l_@cntr,c
  7814  001758                     l4949:
  7815  001758  90D8               	bcf	status,0,c
  7816  00175A  3623               	rlcf	__div_to_l_@quot,f,c
  7817  00175C  3624               	rlcf	__div_to_l_@quot+1,f,c
  7818  00175E  3625               	rlcf	__div_to_l_@quot+2,f,c
  7819  001760  3626               	rlcf	__div_to_l_@quot+3,f,c
  7820  001762  501C               	movf	__div_to_l_@f2,w,c
  7821  001764  5C19               	subwf	__div_to_l_@f1,w,c
  7822  001766  501D               	movf	__div_to_l_@f2+1,w,c
  7823  001768  581A               	subwfb	__div_to_l_@f1+1,w,c
  7824  00176A  501E               	movf	__div_to_l_@f2+2,w,c
  7825  00176C  581B               	subwfb	__div_to_l_@f1+2,w,c
  7826  00176E  501F               	movf	__div_to_l_@f2+3,w,c
  7827  001770  581C               	subwfb	__div_to_l_@f1+3,w,c
  7828  001772  A0D8               	btfss	status,0,c
  7829  001774  D009               	goto	l4957
  7830  001776  501C               	movf	__div_to_l_@f2,w,c
  7831  001778  5E19               	subwf	__div_to_l_@f1,f,c
  7832  00177A  501D               	movf	__div_to_l_@f2+1,w,c
  7833  00177C  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7834  00177E  501E               	movf	__div_to_l_@f2+2,w,c
  7835  001780  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7836  001782  501F               	movf	__div_to_l_@f2+3,w,c
  7837  001784  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7838  001786  8023               	bsf	__div_to_l_@quot,0,c
  7839  001788                     l4957:
  7840  001788  90D8               	bcf	status,0,c
  7841  00178A  3619               	rlcf	__div_to_l_@f1,f,c
  7842  00178C  361A               	rlcf	__div_to_l_@f1+1,f,c
  7843  00178E  361B               	rlcf	__div_to_l_@f1+2,f,c
  7844  001790  361C               	rlcf	__div_to_l_@f1+3,f,c
  7845  001792  2E27               	decfsz	__div_to_l_@cntr,f,c
  7846  001794  D7E1               	goto	l4949
  7847  001796  AE28               	btfss	__div_to_l_@exp1,7,c
  7848  001798  D010               	goto	l4971
  7849  00179A  5028               	movf	__div_to_l_@exp1,w,c
  7850  00179C  0A80               	xorlw	128
  7851  00179E  6E1F               	movwf	??__div_to_l_& (0+255),c
  7852  0017A0  0EE1               	movlw	225
  7853  0017A2  0A80               	xorlw	128
  7854  0017A4  5C1F               	subwf	??__div_to_l_,w,c
  7855  0017A6  A0D8               	btfss	status,0,c
  7856  0017A8  D00B               	goto	u5660
  7857  0017AA                     l4967:
  7858  0017AA  90D8               	bcf	status,0,c
  7859  0017AC  3226               	rrcf	__div_to_l_@quot+3,f,c
  7860  0017AE  3225               	rrcf	__div_to_l_@quot+2,f,c
  7861  0017B0  3224               	rrcf	__div_to_l_@quot+1,f,c
  7862  0017B2  3223               	rrcf	__div_to_l_@quot,f,c
  7863  0017B4  3E28               	incfsz	__div_to_l_@exp1,f,c
  7864  0017B6  D7F9               	goto	l4967
  7865  0017B8  D014               	goto	l925
  7866  0017BA                     l4971:
  7867  0017BA  0E1F               	movlw	31
  7868  0017BC  6428               	cpfsgt	__div_to_l_@exp1,c
  7869  0017BE  D00F               	goto	l4979
  7870  0017C0                     u5660:
  7871  0017C0  0E00               	movlw	0
  7872  0017C2  6E19               	movwf	?__div_to_l_,c
  7873  0017C4  0E00               	movlw	0
  7874  0017C6  6E1A               	movwf	?__div_to_l_+1,c
  7875  0017C8  0E00               	movlw	0
  7876  0017CA  6E1B               	movwf	?__div_to_l_+2,c
  7877  0017CC  0E00               	movlw	0
  7878  0017CE  6E1C               	movwf	?__div_to_l_+3,c
  7879  0017D0  D010               	goto	l916
  7880  0017D2                     l4977:
  7881  0017D2  90D8               	bcf	status,0,c
  7882  0017D4  3623               	rlcf	__div_to_l_@quot,f,c
  7883  0017D6  3624               	rlcf	__div_to_l_@quot+1,f,c
  7884  0017D8  3625               	rlcf	__div_to_l_@quot+2,f,c
  7885  0017DA  3626               	rlcf	__div_to_l_@quot+3,f,c
  7886  0017DC  0628               	decf	__div_to_l_@exp1,f,c
  7887  0017DE                     l4979:
  7888  0017DE  6628               	tstfsz	__div_to_l_@exp1,c
  7889  0017E0  D7F8               	goto	l4977
  7890  0017E2                     l925:
  7891  0017E2  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7892  0017E6  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7893  0017EA  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7894  0017EE  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7895  0017F2                     l916:
  7896  0017F2  0012               	return	
  7897  0017F4                     __end_of__div_to_l_:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           indf0	equ	0xFEF
  7907                           postinc0	equ	0xFEE
  7908                           fsr0h	equ	0xFEA
  7909                           fsr0l	equ	0xFE9
  7910                           wreg	equ	0xFE8
  7911                           postinc1	equ	0xFE6
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function ___lltoft *****************
  7922 ;; Defined at:
  7923 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  c               4   32[COMRAM] unsigned long 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  exp             1   40[COMRAM] unsigned char 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  3   32[COMRAM] float 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7937 ;;      Params:         4       0       0       0       0       0       0       0       0
  7938 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7939 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7940 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7941 ;;Total ram usage:        9 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    5
  7944 ;; This function calls:
  7945 ;;		___ftpack
  7946 ;; This function is called by:
  7947 ;;		_sprintf
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text36
  7952  002440                     __ptext36:
  7953                           	opt stack 0
  7954  002440                     ___lltoft:
  7955                           	opt stack 22
  7956                           
  7957                           ;incstack = 0
  7958  002440  0E8E               	movlw	142
  7959  002442  6E29               	movwf	___lltoft@exp,c
  7960  002444  D006               	goto	l5097
  7961  002446                     l5095:
  7962  002446  90D8               	bcf	status,0,c
  7963  002448  3224               	rrcf	___lltoft@c+3,f,c
  7964  00244A  3223               	rrcf	___lltoft@c+2,f,c
  7965  00244C  3222               	rrcf	___lltoft@c+1,f,c
  7966  00244E  3221               	rrcf	___lltoft@c,f,c
  7967  002450  2A29               	incf	___lltoft@exp,f,c
  7968  002452                     l5097:
  7969  002452  0E00               	movlw	0
  7970  002454  1421               	andwf	___lltoft@c,w,c
  7971  002456  6E25               	movwf	??___lltoft& (0+255),c
  7972  002458  0E00               	movlw	0
  7973  00245A  1422               	andwf	___lltoft@c+1,w,c
  7974  00245C  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7975  00245E  0E00               	movlw	0
  7976  002460  1423               	andwf	___lltoft@c+2,w,c
  7977  002462  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7978  002464  0EFF               	movlw	255
  7979  002466  1424               	andwf	___lltoft@c+3,w,c
  7980  002468  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7981  00246A  5028               	movf	??___lltoft+3,w,c
  7982  00246C  1025               	iorwf	??___lltoft,w,c
  7983  00246E  1026               	iorwf	??___lltoft+1,w,c
  7984  002470  1027               	iorwf	??___lltoft+2,w,c
  7985  002472  A4D8               	btfss	status,2,c
  7986  002474  D7E8               	goto	l5095
  7987  002476  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7988  00247A  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7989  00247E  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7990  002482  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7991  002486  0E00               	movlw	0
  7992  002488  6E1D               	movwf	___ftpack@sign,c
  7993  00248A  ECB2  F00D         	call	___ftpack	;wreg free
  7994  00248E  C019  F021         	movff	?___ftpack,?___lltoft
  7995  002492  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7996  002496  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7997  00249A  0012               	return	
  7998  00249C                     __end_of___lltoft:
  7999                           	opt stack 0
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           indf0	equ	0xFEF
  8008                           postinc0	equ	0xFEE
  8009                           fsr0h	equ	0xFEA
  8010                           fsr0l	equ	0xFE9
  8011                           wreg	equ	0xFE8
  8012                           postinc1	equ	0xFE6
  8013                           postdec1	equ	0xFE5
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function ___llmod *****************
  8023 ;; Defined at:
  8024 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  dividend        4   37[COMRAM] unsigned long 
  8027 ;;  divisor         4   41[COMRAM] unsigned long 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  counter         1   45[COMRAM] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  4   37[COMRAM] unsigned long 
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8039 ;;      Params:         8       0       0       0       0       0       0       0       0
  8040 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8042 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8043 ;;Total ram usage:        9 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    4
  8046 ;; This function calls:
  8047 ;;		Nothing
  8048 ;; This function is called by:
  8049 ;;		_sprintf
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text37
  8054  0023DA                     __ptext37:
  8055                           	opt stack 0
  8056  0023DA                     ___llmod:
  8057                           	opt stack 23
  8058                           
  8059                           ;incstack = 0
  8060  0023DA  502D               	movf	___llmod@divisor+3,w,c
  8061  0023DC  102A               	iorwf	___llmod@divisor,w,c
  8062  0023DE  102B               	iorwf	___llmod@divisor+1,w,c
  8063  0023E0  102C               	iorwf	___llmod@divisor+2,w,c
  8064  0023E2  B4D8               	btfsc	status,2,c
  8065  0023E4  D024               	goto	l1127
  8066  0023E6  0E01               	movlw	1
  8067  0023E8  6E2E               	movwf	___llmod@counter,c
  8068  0023EA  D006               	goto	l5083
  8069  0023EC                     l5081:
  8070  0023EC  90D8               	bcf	status,0,c
  8071  0023EE  362A               	rlcf	___llmod@divisor,f,c
  8072  0023F0  362B               	rlcf	___llmod@divisor+1,f,c
  8073  0023F2  362C               	rlcf	___llmod@divisor+2,f,c
  8074  0023F4  362D               	rlcf	___llmod@divisor+3,f,c
  8075  0023F6  2A2E               	incf	___llmod@counter,f,c
  8076  0023F8                     l5083:
  8077  0023F8  AE2D               	btfss	___llmod@divisor+3,7,c
  8078  0023FA  D7F8               	goto	l5081
  8079  0023FC                     l5085:
  8080  0023FC  502A               	movf	___llmod@divisor,w,c
  8081  0023FE  5C26               	subwf	___llmod@dividend,w,c
  8082  002400  502B               	movf	___llmod@divisor+1,w,c
  8083  002402  5827               	subwfb	___llmod@dividend+1,w,c
  8084  002404  502C               	movf	___llmod@divisor+2,w,c
  8085  002406  5828               	subwfb	___llmod@dividend+2,w,c
  8086  002408  502D               	movf	___llmod@divisor+3,w,c
  8087  00240A  5829               	subwfb	___llmod@dividend+3,w,c
  8088  00240C  A0D8               	btfss	status,0,c
  8089  00240E  D008               	goto	l5089
  8090  002410  502A               	movf	___llmod@divisor,w,c
  8091  002412  5E26               	subwf	___llmod@dividend,f,c
  8092  002414  502B               	movf	___llmod@divisor+1,w,c
  8093  002416  5A27               	subwfb	___llmod@dividend+1,f,c
  8094  002418  502C               	movf	___llmod@divisor+2,w,c
  8095  00241A  5A28               	subwfb	___llmod@dividend+2,f,c
  8096  00241C  502D               	movf	___llmod@divisor+3,w,c
  8097  00241E  5A29               	subwfb	___llmod@dividend+3,f,c
  8098  002420                     l5089:
  8099  002420  90D8               	bcf	status,0,c
  8100  002422  322D               	rrcf	___llmod@divisor+3,f,c
  8101  002424  322C               	rrcf	___llmod@divisor+2,f,c
  8102  002426  322B               	rrcf	___llmod@divisor+1,f,c
  8103  002428  322A               	rrcf	___llmod@divisor,f,c
  8104  00242A  2E2E               	decfsz	___llmod@counter,f,c
  8105  00242C  D7E7               	goto	l5085
  8106  00242E                     l1127:
  8107  00242E  C026  F026         	movff	___llmod@dividend,?___llmod
  8108  002432  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  8109  002436  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  8110  00243A  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  8111  00243E  0012               	return	
  8112  002440                     __end_of___llmod:
  8113                           	opt stack 0
  8114                           tblptru	equ	0xFF8
  8115                           tblptrh	equ	0xFF7
  8116                           tblptrl	equ	0xFF6
  8117                           tablat	equ	0xFF5
  8118                           prodh	equ	0xFF4
  8119                           prodl	equ	0xFF3
  8120                           intcon	equ	0xFF2
  8121                           indf0	equ	0xFEF
  8122                           postinc0	equ	0xFEE
  8123                           fsr0h	equ	0xFEA
  8124                           fsr0l	equ	0xFE9
  8125                           wreg	equ	0xFE8
  8126                           postinc1	equ	0xFE6
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function ___lldiv *****************
  8137 ;; Defined at:
  8138 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  dividend        4   24[COMRAM] unsigned long 
  8141 ;;  divisor         4   28[COMRAM] unsigned long 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  quotient        4   32[COMRAM] unsigned long 
  8144 ;;  counter         1   36[COMRAM] unsigned char 
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  4   24[COMRAM] unsigned long 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8154 ;;      Params:         8       0       0       0       0       0       0       0       0
  8155 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8157 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8158 ;;Total ram usage:       13 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    4
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_sprintf
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text38
  8169  002028                     __ptext38:
  8170                           	opt stack 0
  8171  002028                     ___lldiv:
  8172                           	opt stack 23
  8173                           
  8174                           ;incstack = 0
  8175  002028  0E00               	movlw	0
  8176  00202A  6E21               	movwf	___lldiv@quotient,c
  8177  00202C  0E00               	movlw	0
  8178  00202E  6E22               	movwf	___lldiv@quotient+1,c
  8179  002030  0E00               	movlw	0
  8180  002032  6E23               	movwf	___lldiv@quotient+2,c
  8181  002034  0E00               	movlw	0
  8182  002036  6E24               	movwf	___lldiv@quotient+3,c
  8183  002038  5020               	movf	___lldiv@divisor+3,w,c
  8184  00203A  101D               	iorwf	___lldiv@divisor,w,c
  8185  00203C  101E               	iorwf	___lldiv@divisor+1,w,c
  8186  00203E  101F               	iorwf	___lldiv@divisor+2,w,c
  8187  002040  B4D8               	btfsc	status,2,c
  8188  002042  D02A               	goto	l1117
  8189  002044  0E01               	movlw	1
  8190  002046  6E25               	movwf	___lldiv@counter,c
  8191  002048  D006               	goto	l5063
  8192  00204A                     l5061:
  8193  00204A  90D8               	bcf	status,0,c
  8194  00204C  361D               	rlcf	___lldiv@divisor,f,c
  8195  00204E  361E               	rlcf	___lldiv@divisor+1,f,c
  8196  002050  361F               	rlcf	___lldiv@divisor+2,f,c
  8197  002052  3620               	rlcf	___lldiv@divisor+3,f,c
  8198  002054  2A25               	incf	___lldiv@counter,f,c
  8199  002056                     l5063:
  8200  002056  AE20               	btfss	___lldiv@divisor+3,7,c
  8201  002058  D7F8               	goto	l5061
  8202  00205A                     l5065:
  8203  00205A  90D8               	bcf	status,0,c
  8204  00205C  3621               	rlcf	___lldiv@quotient,f,c
  8205  00205E  3622               	rlcf	___lldiv@quotient+1,f,c
  8206  002060  3623               	rlcf	___lldiv@quotient+2,f,c
  8207  002062  3624               	rlcf	___lldiv@quotient+3,f,c
  8208  002064  501D               	movf	___lldiv@divisor,w,c
  8209  002066  5C19               	subwf	___lldiv@dividend,w,c
  8210  002068  501E               	movf	___lldiv@divisor+1,w,c
  8211  00206A  581A               	subwfb	___lldiv@dividend+1,w,c
  8212  00206C  501F               	movf	___lldiv@divisor+2,w,c
  8213  00206E  581B               	subwfb	___lldiv@dividend+2,w,c
  8214  002070  5020               	movf	___lldiv@divisor+3,w,c
  8215  002072  581C               	subwfb	___lldiv@dividend+3,w,c
  8216  002074  A0D8               	btfss	status,0,c
  8217  002076  D009               	goto	l5073
  8218  002078  501D               	movf	___lldiv@divisor,w,c
  8219  00207A  5E19               	subwf	___lldiv@dividend,f,c
  8220  00207C  501E               	movf	___lldiv@divisor+1,w,c
  8221  00207E  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8222  002080  501F               	movf	___lldiv@divisor+2,w,c
  8223  002082  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8224  002084  5020               	movf	___lldiv@divisor+3,w,c
  8225  002086  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8226  002088  8021               	bsf	___lldiv@quotient,0,c
  8227  00208A                     l5073:
  8228  00208A  90D8               	bcf	status,0,c
  8229  00208C  3220               	rrcf	___lldiv@divisor+3,f,c
  8230  00208E  321F               	rrcf	___lldiv@divisor+2,f,c
  8231  002090  321E               	rrcf	___lldiv@divisor+1,f,c
  8232  002092  321D               	rrcf	___lldiv@divisor,f,c
  8233  002094  2E25               	decfsz	___lldiv@counter,f,c
  8234  002096  D7E1               	goto	l5065
  8235  002098                     l1117:
  8236  002098  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8237  00209C  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8238  0020A0  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8239  0020A4  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8240  0020A8  0012               	return	
  8241  0020AA                     __end_of___lldiv:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           indf0	equ	0xFEF
  8251                           postinc0	equ	0xFEE
  8252                           fsr0h	equ	0xFEA
  8253                           fsr0l	equ	0xFE9
  8254                           wreg	equ	0xFE8
  8255                           postinc1	equ	0xFE6
  8256                           postdec1	equ	0xFE5
  8257                           fsr1l	equ	0xFE1
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           postdec2	equ	0xFDD
  8261                           fsr2h	equ	0xFDA
  8262                           fsr2l	equ	0xFD9
  8263                           status	equ	0xFD8
  8264                           
  8265 ;; *************** function ___fttol *****************
  8266 ;; Defined at:
  8267 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  f1              3   19[BANK0 ] float 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  lval            4   29[BANK0 ] unsigned long 
  8272 ;;  exp1            1   33[BANK0 ] unsigned char 
  8273 ;;  sign1           1   28[BANK0 ] unsigned char 
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  4   19[BANK0 ] long 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8283 ;;      Params:         0       4       0       0       0       0       0       0       0
  8284 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8285 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8286 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8287 ;;Total ram usage:       15 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    4
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_PWM_DutyCycle1
  8294 ;;		_PWM_DutyCycle2
  8295 ;;		_sprintf
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text39
  8300  001436                     __ptext39:
  8301                           	opt stack 0
  8302  001436                     ___fttol:
  8303                           	opt stack 23
  8304                           
  8305                           ;incstack = 0
  8306  001436  0100               	movlb	0	; () banked
  8307  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8308  00143C  0100               	movlb	0	; () banked
  8309  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8310  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8311  001442  0100               	movlb	0	; () banked
  8312  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8313  001446  0100               	movlb	0	; () banked
  8314  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8315  00144A  E301               	bnc	u5721
  8316  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8317  00144E                     u5721:
  8318  00144E  0100               	movlb	0	; () banked
  8319  001450  5177               	movf	??___fttol& (0+255),w,b
  8320  001452  0100               	movlb	0	; () banked
  8321  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8322  001456  0100               	movlb	0	; () banked
  8323  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8324  00145A  D001               	goto	l5015
  8325  00145C  D059               	goto	u5770
  8326  00145E                     l5015:
  8327                           
  8328                           ; BSR set to: 0
  8329  00145E  0E17               	movlw	23
  8330  001460  0100               	movlb	0	; () banked
  8331  001462  6F77               	movwf	??___fttol& (0+255),b
  8332  001464  0100               	movlb	0	; () banked
  8333  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8334  00146A  0100               	movlb	0	; () banked
  8335  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8336  001470  0100               	movlb	0	; () banked
  8337  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8338  001476  0100               	movlb	0	; () banked
  8339  001478  2977               	incf	??___fttol& (0+255),w,b
  8340  00147A  0100               	movlb	0	; () banked
  8341  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8342  00147E  D005               	goto	u5740
  8343  001480                     u5745:
  8344  001480  0100               	movlb	0	; () banked
  8345  001482  90D8               	bcf	status,0,c
  8346  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8347  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8348  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8349  00148A                     u5740:
  8350  00148A  0100               	movlb	0	; () banked
  8351  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8352  00148E  D7F8               	goto	u5745
  8353  001490  0100               	movlb	0	; () banked
  8354  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8355  001494  0100               	movlb	0	; () banked
  8356  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8357                           
  8358                           ; BSR set to: 0
  8359  001498  0100               	movlb	0	; () banked
  8360  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8361                           
  8362                           ; BSR set to: 0
  8363  00149C  0EFF               	movlw	255
  8364  00149E  0100               	movlb	0	; () banked
  8365  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8366  0014A2  0EFF               	movlw	255
  8367  0014A4  0100               	movlb	0	; () banked
  8368  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8369  0014A8  0E00               	movlw	0
  8370  0014AA  0100               	movlb	0	; () banked
  8371  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374  0014AE  0100               	movlb	0	; () banked
  8375  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8376  0014B2  0100               	movlb	0	; () banked
  8377  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8378  0014B6  0100               	movlb	0	; () banked
  8379  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8380  0014BA  0100               	movlb	0	; () banked
  8381  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8382  0014BE  0100               	movlb	0	; () banked
  8383  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8384  0014C2  0100               	movlb	0	; () banked
  8385  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8386  0014C6  0100               	movlb	0	; () banked
  8387  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8388                           
  8389                           ; BSR set to: 0
  8390  0014CA  0E8E               	movlw	142
  8391  0014CC  0100               	movlb	0	; () banked
  8392  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8393                           
  8394                           ; BSR set to: 0
  8395  0014D0  0100               	movlb	0	; () banked
  8396  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8397  0014D4  D019               	goto	l5037
  8398                           
  8399                           ; BSR set to: 0
  8400  0014D6  0100               	movlb	0	; () banked
  8401  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8402  0014DA  0A80               	xorlw	128
  8403  0014DC  0100               	movlb	0	; () banked
  8404  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8405  0014E0  0EF1               	movlw	241
  8406  0014E2  0A80               	xorlw	128
  8407  0014E4  0100               	movlb	0	; () banked
  8408  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8409  0014E8  A0D8               	btfss	status,0,c
  8410  0014EA  D012               	goto	u5770
  8411  0014EC                     l5033:
  8412                           
  8413                           ; BSR set to: 0
  8414  0014EC  0100               	movlb	0	; () banked
  8415  0014EE  90D8               	bcf	status,0,c
  8416  0014F0  0100               	movlb	0	; () banked
  8417  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8418  0014F4  0100               	movlb	0	; () banked
  8419  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8420  0014F8  0100               	movlb	0	; () banked
  8421  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8422  0014FC  0100               	movlb	0	; () banked
  8423  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8424                           
  8425                           ; BSR set to: 0
  8426  001500  0100               	movlb	0	; () banked
  8427  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8428  001504  D7F3               	goto	l5033
  8429  001506  D020               	goto	l5047
  8430  001508                     l5037:
  8431                           
  8432                           ; BSR set to: 0
  8433  001508  0E17               	movlw	23
  8434  00150A  0100               	movlb	0	; () banked
  8435  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8436  00150E  D019               	goto	l5045
  8437  001510                     u5770:
  8438                           
  8439                           ; BSR set to: 0
  8440  001510  0E00               	movlw	0
  8441  001512  0100               	movlb	0	; () banked
  8442  001514  6F73               	movwf	?___fttol& (0+255),b
  8443  001516  0E00               	movlw	0
  8444  001518  0100               	movlb	0	; () banked
  8445  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8446  00151C  0E00               	movlw	0
  8447  00151E  0100               	movlb	0	; () banked
  8448  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8449  001522  0E00               	movlw	0
  8450  001524  0100               	movlb	0	; () banked
  8451  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8452  001528  D02A               	goto	l1078
  8453  00152A                     l5043:
  8454                           
  8455                           ; BSR set to: 0
  8456  00152A  0100               	movlb	0	; () banked
  8457  00152C  90D8               	bcf	status,0,c
  8458  00152E  0100               	movlb	0	; () banked
  8459  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8460  001532  0100               	movlb	0	; () banked
  8461  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8462  001536  0100               	movlb	0	; () banked
  8463  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8464  00153A  0100               	movlb	0	; () banked
  8465  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8466  00153E  0100               	movlb	0	; () banked
  8467  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8468  001542                     l5045:
  8469                           
  8470                           ; BSR set to: 0
  8471  001542  0100               	movlb	0	; () banked
  8472  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8473  001546  D7F1               	goto	l5043
  8474  001548                     l5047:
  8475                           
  8476                           ; BSR set to: 0
  8477  001548  0100               	movlb	0	; () banked
  8478  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8479  00154C  B4D8               	btfsc	status,2,c
  8480  00154E  D00F               	goto	l5051
  8481                           
  8482                           ; BSR set to: 0
  8483  001550  0100               	movlb	0	; () banked
  8484  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8485  001554  0100               	movlb	0	; () banked
  8486  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8487  001558  0100               	movlb	0	; () banked
  8488  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8489  00155C  0100               	movlb	0	; () banked
  8490  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8491  001560  0E00               	movlw	0
  8492  001562  0100               	movlb	0	; () banked
  8493  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8494  001566  0100               	movlb	0	; () banked
  8495  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8496  00156A  0100               	movlb	0	; () banked
  8497  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8498  00156E                     l5051:
  8499                           
  8500                           ; BSR set to: 0
  8501  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8502  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8503  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8504  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8505  00157E                     l1078:
  8506                           
  8507                           ; BSR set to: 0
  8508  00157E  0012               	return	
  8509  001580                     __end_of___fttol:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           indf0	equ	0xFEF
  8519                           postinc0	equ	0xFEE
  8520                           fsr0h	equ	0xFEA
  8521                           fsr0l	equ	0xFE9
  8522                           wreg	equ	0xFE8
  8523                           postinc1	equ	0xFE6
  8524                           postdec1	equ	0xFE5
  8525                           fsr1l	equ	0xFE1
  8526                           indf2	equ	0xFDF
  8527                           postinc2	equ	0xFDE
  8528                           postdec2	equ	0xFDD
  8529                           fsr2h	equ	0xFDA
  8530                           fsr2l	equ	0xFD9
  8531                           status	equ	0xFD8
  8532                           
  8533 ;; *************** function ___ftsub *****************
  8534 ;; Defined at:
  8535 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;  f1              3   34[BANK0 ] float 
  8538 ;;  f2              3   37[BANK0 ] float 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  3   34[BANK0 ] float 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8550 ;;      Params:         0       6       0       0       0       0       0       0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8553 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8554 ;;Total ram usage:        6 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    6
  8557 ;; This function calls:
  8558 ;;		___ftadd
  8559 ;; This function is called by:
  8560 ;;		_sprintf
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text40
  8565  0025CE                     __ptext40:
  8566                           	opt stack 0
  8567  0025CE                     ___ftsub:
  8568                           	opt stack 21
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;incstack = 0
  8572  0025CE  0E00               	movlw	0
  8573  0025D0  0100               	movlb	0	; () banked
  8574  0025D2  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8575  0025D4  0E00               	movlw	0
  8576  0025D6  0100               	movlb	0	; () banked
  8577  0025D8  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8578  0025DA  0E80               	movlw	128
  8579  0025DC  0100               	movlb	0	; () banked
  8580  0025DE  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8581                           
  8582                           ; BSR set to: 0
  8583  0025E0  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8584  0025E4  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8585  0025E8  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8586  0025EC  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8587  0025F0  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8588  0025F4  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8589  0025F8  EC2F  F008         	call	___ftadd	;wreg free
  8590  0025FC  C076  F082         	movff	?___ftadd,?___ftsub
  8591  002600  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8592  002604  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8593  002608  0012               	return	
  8594  00260A                     __end_of___ftsub:
  8595                           	opt stack 0
  8596                           tblptru	equ	0xFF8
  8597                           tblptrh	equ	0xFF7
  8598                           tblptrl	equ	0xFF6
  8599                           tablat	equ	0xFF5
  8600                           prodh	equ	0xFF4
  8601                           prodl	equ	0xFF3
  8602                           intcon	equ	0xFF2
  8603                           indf0	equ	0xFEF
  8604                           postinc0	equ	0xFEE
  8605                           fsr0h	equ	0xFEA
  8606                           fsr0l	equ	0xFE9
  8607                           wreg	equ	0xFE8
  8608                           postinc1	equ	0xFE6
  8609                           postdec1	equ	0xFE5
  8610                           fsr1l	equ	0xFE1
  8611                           indf2	equ	0xFDF
  8612                           postinc2	equ	0xFDE
  8613                           postdec2	equ	0xFDD
  8614                           fsr2h	equ	0xFDA
  8615                           fsr2l	equ	0xFD9
  8616                           status	equ	0xFD8
  8617                           
  8618 ;; *************** function ___ftadd *****************
  8619 ;; Defined at:
  8620 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;  f1              3   22[BANK0 ] float 
  8623 ;;  f2              3   25[BANK0 ] float 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  exp1            1   33[BANK0 ] unsigned char 
  8626 ;;  exp2            1   32[BANK0 ] unsigned char 
  8627 ;;  sign            1   31[BANK0 ] unsigned char 
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  3   22[BANK0 ] float 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2, status,0, cstack
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8637 ;;      Params:         0       6       0       0       0       0       0       0       0
  8638 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8639 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8640 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8641 ;;Total ram usage:       12 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    5
  8644 ;; This function calls:
  8645 ;;		___ftpack
  8646 ;; This function is called by:
  8647 ;;		_sprintf
  8648 ;;		___ftsub
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text41
  8653  00105E                     __ptext41:
  8654                           	opt stack 0
  8655  00105E                     ___ftadd:
  8656                           	opt stack 21
  8657                           
  8658                           ;incstack = 0
  8659  00105E  0100               	movlb	0	; () banked
  8660  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8661  001064  0100               	movlb	0	; () banked
  8662  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8663  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8664  00106A  0100               	movlb	0	; () banked
  8665  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8666  00106E  0100               	movlb	0	; () banked
  8667  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8668  001072  E301               	bnc	u4881
  8669  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8670  001076                     u4881:
  8671  001076  0100               	movlb	0	; () banked
  8672  001078  517C               	movf	??___ftadd& (0+255),w,b
  8673  00107A  0100               	movlb	0	; () banked
  8674  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8675  00107E  0100               	movlb	0	; () banked
  8676  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8677  001084  0100               	movlb	0	; () banked
  8678  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8679  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8680  00108A  0100               	movlb	0	; () banked
  8681  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8682  00108E  0100               	movlb	0	; () banked
  8683  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8684  001092  E301               	bnc	u4891
  8685  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8686  001096                     u4891:
  8687  001096  0100               	movlb	0	; () banked
  8688  001098  517C               	movf	??___ftadd& (0+255),w,b
  8689  00109A  0100               	movlb	0	; () banked
  8690  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693  00109E  0100               	movlb	0	; () banked
  8694  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8695  0010A2  B4D8               	btfsc	status,2,c
  8696  0010A4  D012               	goto	l994
  8697                           
  8698                           ; BSR set to: 0
  8699  0010A6  0100               	movlb	0	; () banked
  8700  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8701  0010AA  0100               	movlb	0	; () banked
  8702  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8703  0010AE  B0D8               	btfsc	status,0,c
  8704  0010B0  D013               	goto	l4523
  8705                           
  8706                           ; BSR set to: 0
  8707  0010B2  0100               	movlb	0	; () banked
  8708  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8709  0010B6  0800               	sublw	0
  8710  0010B8  0100               	movlb	0	; () banked
  8711  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8712  0010BC  0100               	movlb	0	; () banked
  8713  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8714  0010C0  0E19               	movlw	25
  8715  0010C2  0100               	movlb	0	; () banked
  8716  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8717  0010C6  A0D8               	btfss	status,0,c
  8718  0010C8  D007               	goto	l4523
  8719  0010CA                     l994:
  8720                           
  8721                           ; BSR set to: 0
  8722  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8723  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8724  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8725  0010D6  D102               	goto	l995
  8726  0010D8                     l4523:
  8727                           
  8728                           ; BSR set to: 0
  8729  0010D8  0100               	movlb	0	; () banked
  8730  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8731  0010DC  B4D8               	btfsc	status,2,c
  8732  0010DE  D012               	goto	l998
  8733                           
  8734                           ; BSR set to: 0
  8735  0010E0  0100               	movlb	0	; () banked
  8736  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8737  0010E4  0100               	movlb	0	; () banked
  8738  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8739  0010E8  B0D8               	btfsc	status,0,c
  8740  0010EA  D013               	goto	l4529
  8741                           
  8742                           ; BSR set to: 0
  8743  0010EC  0100               	movlb	0	; () banked
  8744  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8745  0010F0  0800               	sublw	0
  8746  0010F2  0100               	movlb	0	; () banked
  8747  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8748  0010F6  0100               	movlb	0	; () banked
  8749  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8750  0010FA  0E19               	movlw	25
  8751  0010FC  0100               	movlb	0	; () banked
  8752  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8753  001100  A0D8               	btfss	status,0,c
  8754  001102  D007               	goto	l4529
  8755  001104                     l998:
  8756                           
  8757                           ; BSR set to: 0
  8758  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8759  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8760  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8761  001110  D0E5               	goto	l995
  8762  001112                     l4529:
  8763                           
  8764                           ; BSR set to: 0
  8765  001112  0E06               	movlw	6
  8766  001114  0100               	movlb	0	; () banked
  8767  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8768                           
  8769                           ; BSR set to: 0
  8770  001118  0100               	movlb	0	; () banked
  8771  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8772  00111C  D002               	goto	l4535
  8773                           
  8774                           ; BSR set to: 0
  8775  00111E  0100               	movlb	0	; () banked
  8776  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8777  001122                     l4535:
  8778                           
  8779                           ; BSR set to: 0
  8780  001122  0100               	movlb	0	; () banked
  8781  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8782  001126  D002               	goto	l1000
  8783                           
  8784                           ; BSR set to: 0
  8785  001128  0100               	movlb	0	; () banked
  8786  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8787  00112C                     l1000:
  8788                           
  8789                           ; BSR set to: 0
  8790  00112C  0100               	movlb	0	; () banked
  8791  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8792                           
  8793                           ; BSR set to: 0
  8794  001130  0EFF               	movlw	255
  8795  001132  0100               	movlb	0	; () banked
  8796  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8797  001136  0EFF               	movlw	255
  8798  001138  0100               	movlb	0	; () banked
  8799  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8800  00113C  0E00               	movlw	0
  8801  00113E  0100               	movlb	0	; () banked
  8802  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8803  001142  0100               	movlb	0	; () banked
  8804  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8805                           
  8806                           ; BSR set to: 0
  8807  001146  0EFF               	movlw	255
  8808  001148  0100               	movlb	0	; () banked
  8809  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8810  00114C  0EFF               	movlw	255
  8811  00114E  0100               	movlb	0	; () banked
  8812  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8813  001152  0E00               	movlw	0
  8814  001154  0100               	movlb	0	; () banked
  8815  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8816                           
  8817                           ; BSR set to: 0
  8818  001158  0100               	movlb	0	; () banked
  8819  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8820  00115C  0100               	movlb	0	; () banked
  8821  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8822  001160  B0D8               	btfsc	status,0,c
  8823  001162  D02A               	goto	l4555
  8824  001164                     l4545:
  8825                           
  8826                           ; BSR set to: 0
  8827  001164  0100               	movlb	0	; () banked
  8828  001166  90D8               	bcf	status,0,c
  8829  001168  0100               	movlb	0	; () banked
  8830  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8831  00116C  0100               	movlb	0	; () banked
  8832  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8833  001170  0100               	movlb	0	; () banked
  8834  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8835  001174  0100               	movlb	0	; () banked
  8836  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8837                           
  8838                           ; BSR set to: 0
  8839  001178  0100               	movlb	0	; () banked
  8840  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8841  00117C  0100               	movlb	0	; () banked
  8842  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8843  001180  B4D8               	btfsc	status,2,c
  8844  001182  D014               	goto	l4553
  8845                           
  8846                           ; BSR set to: 0
  8847  001184  0100               	movlb	0	; () banked
  8848  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8849  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8850  00118C  0E07               	movlw	7
  8851  00118E  0100               	movlb	0	; () banked
  8852  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8853  001192  B4D8               	btfsc	status,2,c
  8854  001194  D00B               	goto	l4553
  8855  001196  D7E6               	goto	l4545
  8856  001198                     l4551:
  8857                           
  8858                           ; BSR set to: 0
  8859  001198  0100               	movlb	0	; () banked
  8860  00119A  90D8               	bcf	status,0,c
  8861  00119C  0100               	movlb	0	; () banked
  8862  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8863  0011A0  0100               	movlb	0	; () banked
  8864  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8865  0011A4  0100               	movlb	0	; () banked
  8866  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8867  0011A8  0100               	movlb	0	; () banked
  8868  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8869  0011AC                     l4553:
  8870                           
  8871                           ; BSR set to: 0
  8872  0011AC  0100               	movlb	0	; () banked
  8873  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8874  0011B0  0100               	movlb	0	; () banked
  8875  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8876  0011B4  D7F1               	goto	l4551
  8877  0011B6  D02F               	goto	l1009
  8878  0011B8                     l4555:
  8879                           
  8880                           ; BSR set to: 0
  8881  0011B8  0100               	movlb	0	; () banked
  8882  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8883  0011BC  0100               	movlb	0	; () banked
  8884  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8885  0011C0  B0D8               	btfsc	status,0,c
  8886  0011C2  D029               	goto	l1009
  8887  0011C4                     l4557:
  8888                           
  8889                           ; BSR set to: 0
  8890  0011C4  0100               	movlb	0	; () banked
  8891  0011C6  90D8               	bcf	status,0,c
  8892  0011C8  0100               	movlb	0	; () banked
  8893  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8894  0011CC  0100               	movlb	0	; () banked
  8895  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8896  0011D0  0100               	movlb	0	; () banked
  8897  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8898  0011D4  0100               	movlb	0	; () banked
  8899  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8900                           
  8901                           ; BSR set to: 0
  8902  0011D8  0100               	movlb	0	; () banked
  8903  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8904  0011DC  0100               	movlb	0	; () banked
  8905  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8906  0011E0  B4D8               	btfsc	status,2,c
  8907  0011E2  D014               	goto	l4565
  8908                           
  8909                           ; BSR set to: 0
  8910  0011E4  0100               	movlb	0	; () banked
  8911  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8912  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8913  0011EC  0E07               	movlw	7
  8914  0011EE  0100               	movlb	0	; () banked
  8915  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8916  0011F2  B4D8               	btfsc	status,2,c
  8917  0011F4  D00B               	goto	l4565
  8918  0011F6  D7E6               	goto	l4557
  8919  0011F8                     l4563:
  8920                           
  8921                           ; BSR set to: 0
  8922  0011F8  0100               	movlb	0	; () banked
  8923  0011FA  90D8               	bcf	status,0,c
  8924  0011FC  0100               	movlb	0	; () banked
  8925  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8926  001200  0100               	movlb	0	; () banked
  8927  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8928  001204  0100               	movlb	0	; () banked
  8929  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8930  001208  0100               	movlb	0	; () banked
  8931  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8932  00120C                     l4565:
  8933                           
  8934                           ; BSR set to: 0
  8935  00120C  0100               	movlb	0	; () banked
  8936  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8937  001210  0100               	movlb	0	; () banked
  8938  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8939  001214  D7F1               	goto	l4563
  8940  001216                     l1009:
  8941                           
  8942                           ; BSR set to: 0
  8943  001216  0100               	movlb	0	; () banked
  8944  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8945  00121A  D012               	goto	l1018
  8946                           
  8947                           ; BSR set to: 0
  8948  00121C  0EFF               	movlw	255
  8949  00121E  0100               	movlb	0	; () banked
  8950  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8951  001222  0EFF               	movlw	255
  8952  001224  0100               	movlb	0	; () banked
  8953  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8954  001228  0EFF               	movlw	255
  8955  00122A  0100               	movlb	0	; () banked
  8956  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8957  00122E  0E01               	movlw	1
  8958  001230  0100               	movlb	0	; () banked
  8959  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8960  001234  0E00               	movlw	0
  8961  001236  0100               	movlb	0	; () banked
  8962  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8963  00123A  0E00               	movlw	0
  8964  00123C  0100               	movlb	0	; () banked
  8965  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8966  001240                     l1018:
  8967                           
  8968                           ; BSR set to: 0
  8969  001240  0100               	movlb	0	; () banked
  8970  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8971  001244  D012               	goto	l4571
  8972                           
  8973                           ; BSR set to: 0
  8974  001246  0EFF               	movlw	255
  8975  001248  0100               	movlb	0	; () banked
  8976  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8977  00124C  0EFF               	movlw	255
  8978  00124E  0100               	movlb	0	; () banked
  8979  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8980  001252  0EFF               	movlw	255
  8981  001254  0100               	movlb	0	; () banked
  8982  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8983  001258  0E01               	movlw	1
  8984  00125A  0100               	movlb	0	; () banked
  8985  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8986  00125E  0E00               	movlw	0
  8987  001260  0100               	movlb	0	; () banked
  8988  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8989  001264  0E00               	movlw	0
  8990  001266  0100               	movlb	0	; () banked
  8991  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8992  00126A                     l4571:
  8993                           
  8994                           ; BSR set to: 0
  8995  00126A  0E00               	movlw	0
  8996  00126C  0100               	movlb	0	; () banked
  8997  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8998                           
  8999                           ; BSR set to: 0
  9000  001270  0100               	movlb	0	; () banked
  9001  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  9002  001274  0100               	movlb	0	; () banked
  9003  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  9004  001278  0100               	movlb	0	; () banked
  9005  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  9006  00127C  0100               	movlb	0	; () banked
  9007  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9008  001280  0100               	movlb	0	; () banked
  9009  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  9010  001284  0100               	movlb	0	; () banked
  9011  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9012                           
  9013                           ; BSR set to: 0
  9014  001288  0100               	movlb	0	; () banked
  9015  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9016  00128C  D015               	goto	l4581
  9017                           
  9018                           ; BSR set to: 0
  9019  00128E  0EFF               	movlw	255
  9020  001290  0100               	movlb	0	; () banked
  9021  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  9022  001294  0EFF               	movlw	255
  9023  001296  0100               	movlb	0	; () banked
  9024  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9025  00129A  0EFF               	movlw	255
  9026  00129C  0100               	movlb	0	; () banked
  9027  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9028  0012A0  0E01               	movlw	1
  9029  0012A2  0100               	movlb	0	; () banked
  9030  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  9031  0012A6  0E00               	movlw	0
  9032  0012A8  0100               	movlb	0	; () banked
  9033  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9034  0012AC  0E00               	movlw	0
  9035  0012AE  0100               	movlb	0	; () banked
  9036  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9037                           
  9038                           ; BSR set to: 0
  9039  0012B2  0E01               	movlw	1
  9040  0012B4  0100               	movlb	0	; () banked
  9041  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  9042  0012B8                     l4581:
  9043                           
  9044                           ; BSR set to: 0
  9045  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  9046  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  9047  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  9048  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  9049  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  9050  0012CC  ECB2  F00D         	call	___ftpack	;wreg free
  9051  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  9052  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  9053  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  9054  0012DC                     l995:
  9055  0012DC  0012               	return	
  9056  0012DE                     __end_of___ftadd:
  9057                           	opt stack 0
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodh	equ	0xFF4
  9063                           prodl	equ	0xFF3
  9064                           intcon	equ	0xFF2
  9065                           indf0	equ	0xFEF
  9066                           postinc0	equ	0xFEE
  9067                           fsr0h	equ	0xFEA
  9068                           fsr0l	equ	0xFE9
  9069                           wreg	equ	0xFE8
  9070                           postinc1	equ	0xFE6
  9071                           postdec1	equ	0xFE5
  9072                           fsr1l	equ	0xFE1
  9073                           indf2	equ	0xFDF
  9074                           postinc2	equ	0xFDE
  9075                           postdec2	equ	0xFDD
  9076                           fsr2h	equ	0xFDA
  9077                           fsr2l	equ	0xFD9
  9078                           status	equ	0xFD8
  9079                           
  9080 ;; *************** function ___ftpack *****************
  9081 ;; Defined at:
  9082 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;  arg             3   24[COMRAM] unsigned um
  9085 ;;  exp             1   27[COMRAM] unsigned char 
  9086 ;;  sign            1   28[COMRAM] unsigned char 
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;		None
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  3   24[COMRAM] float 
  9091 ;; Registers used:
  9092 ;;		wreg, status,2, status,0
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9098 ;;      Params:         5       0       0       0       0       0       0       0       0
  9099 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9100 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9101 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9102 ;;Total ram usage:        8 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    4
  9105 ;; This function calls:
  9106 ;;		Nothing
  9107 ;; This function is called by:
  9108 ;;		___ftadd
  9109 ;;		___ftmul
  9110 ;;		___lbtoft
  9111 ;;		___lltoft
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           	psect	text42
  9116  001B64                     __ptext42:
  9117                           	opt stack 0
  9118  001B64                     ___ftpack:
  9119                           	opt stack 21
  9120                           
  9121                           ;incstack = 0
  9122  001B64  501C               	movf	___ftpack@exp,w,c
  9123  001B66  B4D8               	btfsc	status,2,c
  9124  001B68  D005               	goto	l4461
  9125  001B6A  5019               	movf	___ftpack@arg,w,c
  9126  001B6C  101A               	iorwf	___ftpack@arg+1,w,c
  9127  001B6E  101B               	iorwf	___ftpack@arg+2,w,c
  9128  001B70  A4D8               	btfss	status,2,c
  9129  001B72  D00C               	goto	l4467
  9130  001B74                     l4461:
  9131  001B74  0E00               	movlw	0
  9132  001B76  6E19               	movwf	?___ftpack,c
  9133  001B78  0E00               	movlw	0
  9134  001B7A  6E1A               	movwf	?___ftpack+1,c
  9135  001B7C  0E00               	movlw	0
  9136  001B7E  6E1B               	movwf	?___ftpack+2,c
  9137  001B80  D044               	goto	l957
  9138  001B82                     l4465:
  9139  001B82  2A1C               	incf	___ftpack@exp,f,c
  9140  001B84  90D8               	bcf	status,0,c
  9141  001B86  321B               	rrcf	___ftpack@arg+2,f,c
  9142  001B88  321A               	rrcf	___ftpack@arg+1,f,c
  9143  001B8A  3219               	rrcf	___ftpack@arg,f,c
  9144  001B8C                     l4467:
  9145  001B8C  0E00               	movlw	0
  9146  001B8E  1419               	andwf	___ftpack@arg,w,c
  9147  001B90  6E1E               	movwf	??___ftpack& (0+255),c
  9148  001B92  0E00               	movlw	0
  9149  001B94  141A               	andwf	___ftpack@arg+1,w,c
  9150  001B96  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9151  001B98  0EFE               	movlw	254
  9152  001B9A  141B               	andwf	___ftpack@arg+2,w,c
  9153  001B9C  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9154  001B9E  501E               	movf	??___ftpack,w,c
  9155  001BA0  101F               	iorwf	??___ftpack+1,w,c
  9156  001BA2  1020               	iorwf	??___ftpack+2,w,c
  9157  001BA4  B4D8               	btfsc	status,2,c
  9158  001BA6  D00C               	goto	l4473
  9159  001BA8  D7EC               	goto	l4465
  9160  001BAA                     l4469:
  9161  001BAA  2A1C               	incf	___ftpack@exp,f,c
  9162  001BAC  0E01               	movlw	1
  9163  001BAE  2619               	addwf	___ftpack@arg,f,c
  9164  001BB0  0E00               	movlw	0
  9165  001BB2  221A               	addwfc	___ftpack@arg+1,f,c
  9166  001BB4  0E00               	movlw	0
  9167  001BB6  221B               	addwfc	___ftpack@arg+2,f,c
  9168  001BB8  90D8               	bcf	status,0,c
  9169  001BBA  321B               	rrcf	___ftpack@arg+2,f,c
  9170  001BBC  321A               	rrcf	___ftpack@arg+1,f,c
  9171  001BBE  3219               	rrcf	___ftpack@arg,f,c
  9172  001BC0                     l4473:
  9173  001BC0  0E00               	movlw	0
  9174  001BC2  1419               	andwf	___ftpack@arg,w,c
  9175  001BC4  6E1E               	movwf	??___ftpack& (0+255),c
  9176  001BC6  0E00               	movlw	0
  9177  001BC8  141A               	andwf	___ftpack@arg+1,w,c
  9178  001BCA  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9179  001BCC  0EFF               	movlw	255
  9180  001BCE  141B               	andwf	___ftpack@arg+2,w,c
  9181  001BD0  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9182  001BD2  501E               	movf	??___ftpack,w,c
  9183  001BD4  101F               	iorwf	??___ftpack+1,w,c
  9184  001BD6  1020               	iorwf	??___ftpack+2,w,c
  9185  001BD8  B4D8               	btfsc	status,2,c
  9186  001BDA  D006               	goto	l4477
  9187  001BDC  D7E6               	goto	l4469
  9188  001BDE                     l4475:
  9189  001BDE  061C               	decf	___ftpack@exp,f,c
  9190  001BE0  90D8               	bcf	status,0,c
  9191  001BE2  3619               	rlcf	___ftpack@arg,f,c
  9192  001BE4  361A               	rlcf	___ftpack@arg+1,f,c
  9193  001BE6  361B               	rlcf	___ftpack@arg+2,f,c
  9194  001BE8                     l4477:
  9195  001BE8  AE1A               	btfss	___ftpack@arg+1,7,c
  9196  001BEA  D7F9               	goto	l4475
  9197  001BEC  A01C               	btfss	___ftpack@exp,0,c
  9198  001BEE  9E1A               	bcf	___ftpack@arg+1,7,c
  9199  001BF0  90D8               	bcf	status,0,c
  9200  001BF2  321C               	rrcf	___ftpack@exp,f,c
  9201  001BF4  501C               	movf	___ftpack@exp,w,c
  9202  001BF6  121B               	iorwf	___ftpack@arg+2,f,c
  9203  001BF8  501D               	movf	___ftpack@sign,w,c
  9204  001BFA  A4D8               	btfss	status,2,c
  9205  001BFC  8E1B               	bsf	___ftpack@arg+2,7,c
  9206  001BFE  C019  F019         	movff	___ftpack@arg,?___ftpack
  9207  001C02  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  9208  001C06  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  9209  001C0A                     l957:
  9210  001C0A  0012               	return	
  9211  001C0C                     __end_of___ftpack:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           intcon	equ	0xFF2
  9220                           indf0	equ	0xFEF
  9221                           postinc0	equ	0xFEE
  9222                           fsr0h	equ	0xFEA
  9223                           fsr0l	equ	0xFE9
  9224                           wreg	equ	0xFE8
  9225                           postinc1	equ	0xFE6
  9226                           postdec1	equ	0xFE5
  9227                           fsr1l	equ	0xFE1
  9228                           indf2	equ	0xFDF
  9229                           postinc2	equ	0xFDE
  9230                           postdec2	equ	0xFDD
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function ___ftneg *****************
  9236 ;; Defined at:
  9237 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;  f1              3   24[COMRAM] float 
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;		None
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  3   24[COMRAM] float 
  9244 ;; Registers used:
  9245 ;;		wreg, status,2, status,0
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9251 ;;      Params:         3       0       0       0       0       0       0       0       0
  9252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9254 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9255 ;;Total ram usage:        3 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    4
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_sprintf
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text43
  9266  00284A                     __ptext43:
  9267                           	opt stack 0
  9268  00284A                     ___ftneg:
  9269                           	opt stack 23
  9270                           
  9271                           ;incstack = 0
  9272  00284A  0E7F               	movlw	127
  9273  00284C  141B               	andwf	___ftneg@f1+2,w,c
  9274  00284E  101A               	iorwf	___ftneg@f1+1,w,c
  9275  002850  1019               	iorwf	___ftneg@f1,w,c
  9276  002852  B4D8               	btfsc	status,2,c
  9277  002854  D006               	goto	l1068
  9278  002856  0E00               	movlw	0
  9279  002858  1A19               	xorwf	___ftneg@f1,f,c
  9280  00285A  0E00               	movlw	0
  9281  00285C  1A1A               	xorwf	___ftneg@f1+1,f,c
  9282  00285E  0E80               	movlw	128
  9283  002860  1A1B               	xorwf	___ftneg@f1+2,f,c
  9284  002862                     l1068:
  9285  002862  C019  F019         	movff	___ftneg@f1,?___ftneg
  9286  002866  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9287  00286A  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9288  00286E  0012               	return	
  9289  002870                     __end_of___ftneg:
  9290                           	opt stack 0
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           indf0	equ	0xFEF
  9299                           postinc0	equ	0xFEE
  9300                           fsr0h	equ	0xFEA
  9301                           fsr0l	equ	0xFE9
  9302                           wreg	equ	0xFE8
  9303                           postinc1	equ	0xFE6
  9304                           postdec1	equ	0xFE5
  9305                           fsr1l	equ	0xFE1
  9306                           indf2	equ	0xFDF
  9307                           postinc2	equ	0xFDE
  9308                           postdec2	equ	0xFDD
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function ___ftge *****************
  9314 ;; Defined at:
  9315 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  ff1             3   24[COMRAM] float 
  9318 ;;  ff2             3   27[COMRAM] float 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;		None
  9321 ;; Return value:  Size  Location     Type
  9322 ;;		None               void
  9323 ;; Registers used:
  9324 ;;		wreg, status,2, status,0
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9330 ;;      Params:         6       0       0       0       0       0       0       0       0
  9331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9332 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9333 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9334 ;;Total ram usage:        9 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    4
  9337 ;; This function calls:
  9338 ;;		Nothing
  9339 ;; This function is called by:
  9340 ;;		_sprintf
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text44
  9345  001F12                     __ptext44:
  9346                           	opt stack 0
  9347  001F12                     ___ftge:
  9348                           	opt stack 23
  9349                           
  9350                           ;incstack = 0
  9351  001F12  AE1B               	btfss	___ftge@ff1+2,7,c
  9352  001F14  D016               	goto	l4991
  9353  001F16  C019  F01F         	movff	___ftge@ff1,??___ftge
  9354  001F1A  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9355  001F1E  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9356  001F22  1E1F               	comf	??___ftge,f,c
  9357  001F24  1E20               	comf	??___ftge+1,f,c
  9358  001F26  1E21               	comf	??___ftge+2,f,c
  9359  001F28  2A1F               	incf	??___ftge,f,c
  9360  001F2A  0E00               	movlw	0
  9361  001F2C  2220               	addwfc	??___ftge+1,f,c
  9362  001F2E  2221               	addwfc	??___ftge+2,f,c
  9363  001F30  0E00               	movlw	0
  9364  001F32  241F               	addwf	??___ftge,w,c
  9365  001F34  6E19               	movwf	___ftge@ff1,c
  9366  001F36  0E00               	movlw	0
  9367  001F38  2020               	addwfc	??___ftge+1,w,c
  9368  001F3A  6E1A               	movwf	___ftge@ff1+1,c
  9369  001F3C  0E80               	movlw	128
  9370  001F3E  2021               	addwfc	??___ftge+2,w,c
  9371  001F40  6E1B               	movwf	___ftge@ff1+2,c
  9372  001F42                     l4991:
  9373  001F42  AE1E               	btfss	___ftge@ff2+2,7,c
  9374  001F44  D016               	goto	l4995
  9375  001F46  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9376  001F4A  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9377  001F4E  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9378  001F52  1E1F               	comf	??___ftge,f,c
  9379  001F54  1E20               	comf	??___ftge+1,f,c
  9380  001F56  1E21               	comf	??___ftge+2,f,c
  9381  001F58  2A1F               	incf	??___ftge,f,c
  9382  001F5A  0E00               	movlw	0
  9383  001F5C  2220               	addwfc	??___ftge+1,f,c
  9384  001F5E  2221               	addwfc	??___ftge+2,f,c
  9385  001F60  0E00               	movlw	0
  9386  001F62  241F               	addwf	??___ftge,w,c
  9387  001F64  6E1C               	movwf	___ftge@ff2,c
  9388  001F66  0E00               	movlw	0
  9389  001F68  2020               	addwfc	??___ftge+1,w,c
  9390  001F6A  6E1D               	movwf	___ftge@ff2+1,c
  9391  001F6C  0E80               	movlw	128
  9392  001F6E  2021               	addwfc	??___ftge+2,w,c
  9393  001F70  6E1E               	movwf	___ftge@ff2+2,c
  9394  001F72                     l4995:
  9395  001F72  0E00               	movlw	0
  9396  001F74  1A19               	xorwf	___ftge@ff1,f,c
  9397  001F76  0E00               	movlw	0
  9398  001F78  1A1A               	xorwf	___ftge@ff1+1,f,c
  9399  001F7A  0E80               	movlw	128
  9400  001F7C  1A1B               	xorwf	___ftge@ff1+2,f,c
  9401  001F7E  0E00               	movlw	0
  9402  001F80  1A1C               	xorwf	___ftge@ff2,f,c
  9403  001F82  0E00               	movlw	0
  9404  001F84  1A1D               	xorwf	___ftge@ff2+1,f,c
  9405  001F86  0E80               	movlw	128
  9406  001F88  1A1E               	xorwf	___ftge@ff2+2,f,c
  9407  001F8A  501C               	movf	___ftge@ff2,w,c
  9408  001F8C  5C19               	subwf	___ftge@ff1,w,c
  9409  001F8E  501D               	movf	___ftge@ff2+1,w,c
  9410  001F90  581A               	subwfb	___ftge@ff1+1,w,c
  9411  001F92  501E               	movf	___ftge@ff2+2,w,c
  9412  001F94  581B               	subwfb	___ftge@ff1+2,w,c
  9413  001F96  B0D8               	btfsc	status,0,c
  9414  001F98  D002               	goto	l5001
  9415  001F9A  90D8               	bcf	status,0,c
  9416  001F9C  D001               	goto	l1052
  9417  001F9E                     l5001:
  9418  001F9E  80D8               	bsf	status,0,c
  9419  001FA0                     l1052:
  9420  001FA0  0012               	return	
  9421  001FA2                     __end_of___ftge:
  9422                           	opt stack 0
  9423                           tblptru	equ	0xFF8
  9424                           tblptrh	equ	0xFF7
  9425                           tblptrl	equ	0xFF6
  9426                           tablat	equ	0xFF5
  9427                           prodh	equ	0xFF4
  9428                           prodl	equ	0xFF3
  9429                           intcon	equ	0xFF2
  9430                           indf0	equ	0xFEF
  9431                           postinc0	equ	0xFEE
  9432                           fsr0h	equ	0xFEA
  9433                           fsr0l	equ	0xFE9
  9434                           wreg	equ	0xFE8
  9435                           postinc1	equ	0xFE6
  9436                           postdec1	equ	0xFE5
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _Lcd_Write_String *****************
  9446 ;; Defined at:
  9447 ;;		line 90 in file "lcd.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  a               2   28[COMRAM] PTR unsigned char 
  9450 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9451 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
  9452 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  i               2   32[COMRAM] int 
  9455 ;; Return value:  Size  Location     Type
  9456 ;;		None               void
  9457 ;; Registers used:
  9458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9464 ;;      Params:         2       0       0       0       0       0       0       0       0
  9465 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9466 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9467 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9468 ;;Total ram usage:        6 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:    6
  9471 ;; This function calls:
  9472 ;;		_Lcd_Write_Char
  9473 ;; This function is called by:
  9474 ;;		_Inicializa_Driveby
  9475 ;;		_Comando_Tablet
  9476 ;;		_Lcd_Write_Integer
  9477 ;;		_main
  9478 ;;		_Lcd_Write_Float
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text45
  9483  0021A2                     __ptext45:
  9484                           	opt stack 0
  9485  0021A2                     _Lcd_Write_String:
  9486                           	opt stack 24
  9487                           
  9488                           ;lcd.c: 91: int i;
  9489                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9490                           
  9491                           ;incstack = 0
  9492  0021A2  0E00               	movlw	0
  9493  0021A4  6E22               	movwf	Lcd_Write_String@i+1,c
  9494  0021A6  0E00               	movlw	0
  9495  0021A8  6E21               	movwf	Lcd_Write_String@i,c
  9496  0021AA  D01C               	goto	l5333
  9497  0021AC                     l5329:
  9498                           
  9499                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9500  0021AC  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9501  0021B0  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9502  0021B4  5021               	movf	Lcd_Write_String@i,w,c
  9503  0021B6  261F               	addwf	??_Lcd_Write_String,f,c
  9504  0021B8  5022               	movf	Lcd_Write_String@i+1,w,c
  9505  0021BA  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9506  0021BC  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9507  0021C0  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9508  0021C4  6AF8               	clrf	tblptru,c
  9509  0021C6  0E07               	movlw	(high __ramtop+-1)
  9510  0021C8  64F7               	cpfsgt	tblptrh,c
  9511  0021CA  D003               	bra	u6197
  9512  0021CC  0008               	tblrd		*
  9513  0021CE  50F5               	movf	tablat,w,c
  9514  0021D0  D005               	bra	u6190
  9515  0021D2                     u6197:
  9516  0021D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  9517  0021D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  9518  0021DA  50EF               	movf	indf0,w,c
  9519  0021DC                     u6190:
  9520  0021DC  EC95  F013         	call	_Lcd_Write_Char
  9521  0021E0  4A21               	infsnz	Lcd_Write_String@i,f,c
  9522  0021E2  2A22               	incf	Lcd_Write_String@i+1,f,c
  9523  0021E4                     l5333:
  9524  0021E4  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9525  0021E8  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9526  0021EC  5021               	movf	Lcd_Write_String@i,w,c
  9527  0021EE  261F               	addwf	??_Lcd_Write_String,f,c
  9528  0021F0  5022               	movf	Lcd_Write_String@i+1,w,c
  9529  0021F2  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9530  0021F4  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9531  0021F8  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9532  0021FC  6AF8               	clrf	tblptru,c
  9533  0021FE  0E07               	movlw	(high __ramtop+-1)
  9534  002200  64F7               	cpfsgt	tblptrh,c
  9535  002202  D003               	bra	u6207
  9536  002204  0008               	tblrd		*
  9537  002206  50F5               	movf	tablat,w,c
  9538  002208  D005               	bra	u6200
  9539  00220A                     u6207:
  9540  00220A  CFF6 FFE9          	movff	tblptrl,fsr0l
  9541  00220E  CFF7 FFEA          	movff	tblptrh,fsr0h
  9542  002212  50EF               	movf	indf0,w,c
  9543  002214                     u6200:
  9544  002214  0900               	iorlw	0
  9545  002216  B4D8               	btfsc	status,2,c
  9546  002218  0012               	return	
  9547  00221A  D7C8               	goto	l5329
  9548  00221C                     __end_of_Lcd_Write_String:
  9549                           	opt stack 0
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodh	equ	0xFF4
  9555                           prodl	equ	0xFF3
  9556                           intcon	equ	0xFF2
  9557                           indf0	equ	0xFEF
  9558                           postinc0	equ	0xFEE
  9559                           fsr0h	equ	0xFEA
  9560                           fsr0l	equ	0xFE9
  9561                           wreg	equ	0xFE8
  9562                           postinc1	equ	0xFE6
  9563                           postdec1	equ	0xFE5
  9564                           fsr1l	equ	0xFE1
  9565                           indf2	equ	0xFDF
  9566                           postinc2	equ	0xFDE
  9567                           postdec2	equ	0xFDD
  9568                           fsr2h	equ	0xFDA
  9569                           fsr2l	equ	0xFD9
  9570                           status	equ	0xFD8
  9571                           
  9572 ;; *************** function _Lcd_Write_Char *****************
  9573 ;; Defined at:
  9574 ;;		line 75 in file "lcd.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  a               1    wreg     unsigned char 
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;  a               1   27[COMRAM] unsigned char 
  9579 ;;  y               1   26[COMRAM] unsigned char 
  9580 ;;  temp            1   25[COMRAM] unsigned char 
  9581 ;; Return value:  Size  Location     Type
  9582 ;;		None               void
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 0/0
  9587 ;;		On exit  : 0/0
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9590 ;;      Params:         0       0       0       0       0       0       0       0       0
  9591 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9592 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9593 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9594 ;;Total ram usage:        3 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    5
  9597 ;; This function calls:
  9598 ;;		_Lcd_Port
  9599 ;; This function is called by:
  9600 ;;		_Lcd_Write_String
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604                           	psect	text46
  9605  00272A                     __ptext46:
  9606                           	opt stack 0
  9607  00272A                     _Lcd_Write_Char:
  9608                           	opt stack 24
  9609                           
  9610                           ;incstack = 0
  9611                           ;Lcd_Write_Char@a stored from wreg
  9612  00272A  6E1C               	movwf	Lcd_Write_Char@a,c
  9613                           
  9614                           ;lcd.c: 76: char temp, y;
  9615                           ;lcd.c: 77: temp = a & 0x0F;
  9616  00272C  501C               	movf	Lcd_Write_Char@a,w,c
  9617  00272E  0B0F               	andlw	15
  9618  002730  6E1A               	movwf	Lcd_Write_Char@temp,c
  9619                           
  9620                           ;lcd.c: 78: y = a & 0xF0;
  9621  002732  501C               	movf	Lcd_Write_Char@a,w,c
  9622  002734  0BF0               	andlw	240
  9623  002736  6E1B               	movwf	Lcd_Write_Char@y,c
  9624                           
  9625                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9626  002738  8084               	bsf	3972,0,c	;volatile
  9627                           
  9628                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9629  00273A  381B               	swapf	Lcd_Write_Char@y,w,c
  9630  00273C  0B0F               	andlw	15
  9631  00273E  ECE6  F013         	call	_Lcd_Port
  9632                           
  9633                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9634  002742  8484               	bsf	3972,2,c	;volatile
  9635                           
  9636                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9637  002744  0E0D               	movlw	13
  9638  002746                     u6957:
  9639  002746  2EE8               	decfsz	wreg,f,c
  9640  002748  D7FE               	goto	u6957
  9641  00274A  F000               	nop	
  9642                           
  9643                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9644  00274C  9484               	bcf	3972,2,c	;volatile
  9645                           
  9646                           ;lcd.c: 84: Lcd_Port(temp);
  9647  00274E  501A               	movf	Lcd_Write_Char@temp,w,c
  9648  002750  ECE6  F013         	call	_Lcd_Port
  9649                           
  9650                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9651  002754  8484               	bsf	3972,2,c	;volatile
  9652                           
  9653                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9654  002756  0E0D               	movlw	13
  9655  002758                     u6967:
  9656  002758  2EE8               	decfsz	wreg,f,c
  9657  00275A  D7FE               	goto	u6967
  9658  00275C  F000               	nop	
  9659                           
  9660                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9661  00275E  9484               	bcf	3972,2,c	;volatile
  9662  002760  0012               	return	
  9663  002762                     __end_of_Lcd_Write_Char:
  9664                           	opt stack 0
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           indf0	equ	0xFEF
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           postinc1	equ	0xFE6
  9678                           postdec1	equ	0xFE5
  9679                           fsr1l	equ	0xFE1
  9680                           indf2	equ	0xFDF
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           fsr2h	equ	0xFDA
  9684                           fsr2l	equ	0xFD9
  9685                           status	equ	0xFD8
  9686                           
  9687 ;; *************** function _Lcd_Set_Cursor *****************
  9688 ;; Defined at:
  9689 ;;		line 40 in file "lcd.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;  a               1    wreg     unsigned char 
  9692 ;;  b               1   27[COMRAM] unsigned char 
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;  a               1   28[COMRAM] unsigned char 
  9695 ;;  temp            1   31[COMRAM] unsigned char 
  9696 ;;  y               1   30[COMRAM] unsigned char 
  9697 ;;  z               1   29[COMRAM] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9707 ;;      Params:         1       0       0       0       0       0       0       0       0
  9708 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9710 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9711 ;;Total ram usage:        5 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    6
  9714 ;; This function calls:
  9715 ;;		_Lcd_Cmd
  9716 ;; This function is called by:
  9717 ;;		_Inicializa_Driveby
  9718 ;;		_Comando_Tablet
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text47
  9724  00249C                     __ptext47:
  9725                           	opt stack 0
  9726  00249C                     _Lcd_Set_Cursor:
  9727                           	opt stack 24
  9728                           
  9729                           ;incstack = 0
  9730                           ;Lcd_Set_Cursor@a stored from wreg
  9731  00249C  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9732                           
  9733                           ;lcd.c: 41: char temp, z, y;
  9734                           ;lcd.c: 42: if (a == 1) {
  9735  00249E  041D               	decf	Lcd_Set_Cursor@a,w,c
  9736  0024A0  A4D8               	btfss	status,2,c
  9737  0024A2  D010               	goto	l5463
  9738                           
  9739                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9740  0024A4  501C               	movf	Lcd_Set_Cursor@b,w,c
  9741  0024A6  0F7F               	addlw	127
  9742  0024A8  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9743                           
  9744                           ;lcd.c: 44: z = temp >> 4;
  9745  0024AA  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9746  0024AC  0B0F               	andlw	15
  9747  0024AE  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9748                           
  9749                           ;lcd.c: 45: y = temp & 0x0F;
  9750  0024B0  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9751  0024B2  0B0F               	andlw	15
  9752  0024B4  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9753                           
  9754                           ;lcd.c: 46: Lcd_Cmd(z);
  9755  0024B6  501E               	movf	Lcd_Set_Cursor@z,w,c
  9756  0024B8  EC4A  F014         	call	_Lcd_Cmd
  9757                           
  9758                           ;lcd.c: 47: Lcd_Cmd(y);
  9759  0024BC  501F               	movf	Lcd_Set_Cursor@y,w,c
  9760  0024BE  EC4A  F014         	call	_Lcd_Cmd
  9761                           
  9762                           ;lcd.c: 48: } else if (a == 2) {
  9763  0024C2  D013               	goto	l260
  9764  0024C4                     l5463:
  9765  0024C4  501D               	movf	Lcd_Set_Cursor@a,w,c
  9766  0024C6  0A02               	xorlw	2
  9767  0024C8  A4D8               	btfss	status,2,c
  9768  0024CA  D00F               	goto	l260
  9769                           
  9770                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9771  0024CC  501C               	movf	Lcd_Set_Cursor@b,w,c
  9772  0024CE  0FBF               	addlw	191
  9773  0024D0  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9774                           
  9775                           ;lcd.c: 50: z = temp >> 4;
  9776  0024D2  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9777  0024D4  0B0F               	andlw	15
  9778  0024D6  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9779                           
  9780                           ;lcd.c: 51: y = temp & 0x0F;
  9781  0024D8  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9782  0024DA  0B0F               	andlw	15
  9783  0024DC  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9784                           
  9785                           ;lcd.c: 52: Lcd_Cmd(z);
  9786  0024DE  501E               	movf	Lcd_Set_Cursor@z,w,c
  9787  0024E0  EC4A  F014         	call	_Lcd_Cmd
  9788                           
  9789                           ;lcd.c: 53: Lcd_Cmd(y);
  9790  0024E4  501F               	movf	Lcd_Set_Cursor@y,w,c
  9791  0024E6  EC4A  F014         	call	_Lcd_Cmd
  9792  0024EA                     l260:
  9793  0024EA  0012               	return	
  9794  0024EC                     __end_of_Lcd_Set_Cursor:
  9795                           	opt stack 0
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           indf0	equ	0xFEF
  9804                           postinc0	equ	0xFEE
  9805                           fsr0h	equ	0xFEA
  9806                           fsr0l	equ	0xFE9
  9807                           wreg	equ	0xFE8
  9808                           postinc1	equ	0xFE6
  9809                           postdec1	equ	0xFE5
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function _Lcd_Clear *****************
  9819 ;; Defined at:
  9820 ;;		line 35 in file "lcd.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;		None
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;		None
  9825 ;; Return value:  Size  Location     Type
  9826 ;;		None               void
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9834 ;;      Params:         0       0       0       0       0       0       0       0       0
  9835 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9837 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9838 ;;Total ram usage:        0 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    6
  9841 ;; This function calls:
  9842 ;;		_Lcd_Cmd
  9843 ;; This function is called by:
  9844 ;;		_Inicializa_Driveby
  9845 ;;		_Comando_Tablet
  9846 ;;		_main
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           	psect	text48
  9851  00299A                     __ptext48:
  9852                           	opt stack 0
  9853  00299A                     _Lcd_Clear:
  9854                           	opt stack 24
  9855                           
  9856                           ;lcd.c: 36: Lcd_Cmd(0);
  9857                           
  9858                           ;incstack = 0
  9859  00299A  0E00               	movlw	0
  9860  00299C  EC4A  F014         	call	_Lcd_Cmd
  9861                           
  9862                           ;lcd.c: 37: Lcd_Cmd(1);
  9863  0029A0  0E01               	movlw	1
  9864  0029A2  EC4A  F014         	call	_Lcd_Cmd
  9865  0029A6  0012               	return	
  9866  0029A8                     __end_of_Lcd_Clear:
  9867                           	opt stack 0
  9868                           tblptru	equ	0xFF8
  9869                           tblptrh	equ	0xFF7
  9870                           tblptrl	equ	0xFF6
  9871                           tablat	equ	0xFF5
  9872                           prodh	equ	0xFF4
  9873                           prodl	equ	0xFF3
  9874                           intcon	equ	0xFF2
  9875                           indf0	equ	0xFEF
  9876                           postinc0	equ	0xFEE
  9877                           fsr0h	equ	0xFEA
  9878                           fsr0l	equ	0xFE9
  9879                           wreg	equ	0xFE8
  9880                           postinc1	equ	0xFE6
  9881                           postdec1	equ	0xFE5
  9882                           fsr1l	equ	0xFE1
  9883                           indf2	equ	0xFDF
  9884                           postinc2	equ	0xFDE
  9885                           postdec2	equ	0xFDD
  9886                           fsr2h	equ	0xFDA
  9887                           fsr2l	equ	0xFD9
  9888                           status	equ	0xFD8
  9889                           
  9890 ;; *************** function _Lcd_Cmd *****************
  9891 ;; Defined at:
  9892 ;;		line 27 in file "lcd.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  a               1    wreg     unsigned char 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  a               1   26[COMRAM] unsigned char 
  9897 ;; Return value:  Size  Location     Type
  9898 ;;		None               void
  9899 ;; Registers used:
  9900 ;;		wreg, status,2, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0
  9907 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9908 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9909 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9910 ;;Total ram usage:        2 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    5
  9913 ;; This function calls:
  9914 ;;		_Lcd_Port
  9915 ;; This function is called by:
  9916 ;;		_Lcd_Clear
  9917 ;;		_Lcd_Set_Cursor
  9918 ;;		_Lcd_Init
  9919 ;;		_Lcd_Shift_Right
  9920 ;;		_Lcd_Shift_Left
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           	psect	text49
  9925  002894                     __ptext49:
  9926                           	opt stack 0
  9927  002894                     _Lcd_Cmd:
  9928                           	opt stack 24
  9929                           
  9930                           ;incstack = 0
  9931                           ;Lcd_Cmd@a stored from wreg
  9932  002894  6E1B               	movwf	Lcd_Cmd@a,c
  9933                           
  9934                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9935  002896  9084               	bcf	3972,0,c	;volatile
  9936                           
  9937                           ;lcd.c: 29: Lcd_Port(a);
  9938  002898  501B               	movf	Lcd_Cmd@a,w,c
  9939  00289A  ECE6  F013         	call	_Lcd_Port
  9940                           
  9941                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9942  00289E  8484               	bsf	3972,2,c	;volatile
  9943                           
  9944                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9945  0028A0  0E06               	movlw	6
  9946  0028A2  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9947  0028A4  0E30               	movlw	48
  9948  0028A6                     u6977:
  9949  0028A6  2EE8               	decfsz	wreg,f,c
  9950  0028A8  D7FE               	goto	u6977
  9951  0028AA  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9952  0028AC  D7FC               	goto	u6977
  9953  0028AE  D000               	nop2	
  9954                           
  9955                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9956  0028B0  9484               	bcf	3972,2,c	;volatile
  9957  0028B2  0012               	return	
  9958  0028B4                     __end_of_Lcd_Cmd:
  9959                           	opt stack 0
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           intcon	equ	0xFF2
  9967                           indf0	equ	0xFEF
  9968                           postinc0	equ	0xFEE
  9969                           fsr0h	equ	0xFEA
  9970                           fsr0l	equ	0xFE9
  9971                           wreg	equ	0xFE8
  9972                           postinc1	equ	0xFE6
  9973                           postdec1	equ	0xFE5
  9974                           fsr1l	equ	0xFE1
  9975                           indf2	equ	0xFDF
  9976                           postinc2	equ	0xFDE
  9977                           postdec2	equ	0xFDD
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function _Lcd_Port *****************
  9983 ;; Defined at:
  9984 ;;		line 6 in file "lcd.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;  a               1    wreg     unsigned char 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  a               1   24[COMRAM] unsigned char 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;		None               void
  9991 ;; Registers used:
  9992 ;;		wreg
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0
  9999 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10001 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10002 ;;Total ram usage:        1 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    4
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_Lcd_Cmd
 10009 ;;		_Lcd_Init
 10010 ;;		_Lcd_Write_Char
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           	psect	text50
 10015  0027CC                     __ptext50:
 10016                           	opt stack 0
 10017  0027CC                     _Lcd_Port:
 10018                           	opt stack 24
 10019                           
 10020                           ;incstack = 0
 10021                           ;Lcd_Port@a stored from wreg
 10022  0027CC  6E19               	movwf	Lcd_Port@a,c
 10023                           
 10024                           ;lcd.c: 7: if (a & 1)
 10025  0027CE  A019               	btfss	Lcd_Port@a,0,c
 10026  0027D0  D002               	goto	l240
 10027                           
 10028                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10029  0027D2  8883               	bsf	3971,4,c	;volatile
 10030  0027D4  D001               	goto	l4497
 10031  0027D6                     l240:
 10032                           
 10033                           ;lcd.c: 9: else
 10034                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10035  0027D6  9883               	bcf	3971,4,c	;volatile
 10036  0027D8                     l4497:
 10037                           
 10038                           ;lcd.c: 12: if (a & 2)
 10039  0027D8  A219               	btfss	Lcd_Port@a,1,c
 10040  0027DA  D002               	goto	l242
 10041                           
 10042                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10043  0027DC  8A83               	bsf	3971,5,c	;volatile
 10044  0027DE  D001               	goto	l4501
 10045  0027E0                     l242:
 10046                           
 10047                           ;lcd.c: 14: else
 10048                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10049  0027E0  9A83               	bcf	3971,5,c	;volatile
 10050  0027E2                     l4501:
 10051                           
 10052                           ;lcd.c: 17: if (a & 4)
 10053  0027E2  A419               	btfss	Lcd_Port@a,2,c
 10054  0027E4  D002               	goto	l244
 10055                           
 10056                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10057  0027E6  8C83               	bsf	3971,6,c	;volatile
 10058  0027E8  D001               	goto	l4505
 10059  0027EA                     l244:
 10060                           
 10061                           ;lcd.c: 19: else
 10062                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10063  0027EA  9C83               	bcf	3971,6,c	;volatile
 10064  0027EC                     l4505:
 10065                           
 10066                           ;lcd.c: 22: if (a & 8)
 10067  0027EC  A619               	btfss	Lcd_Port@a,3,c
 10068  0027EE  D002               	goto	l246
 10069                           
 10070                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10071  0027F0  8E83               	bsf	3971,7,c	;volatile
 10072  0027F2  D001               	goto	l248
 10073  0027F4                     l246:
 10074                           
 10075                           ;lcd.c: 24: else
 10076                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10077  0027F4  9E83               	bcf	3971,7,c	;volatile
 10078  0027F6                     l248:
 10079  0027F6  0012               	return	
 10080  0027F8                     __end_of_Lcd_Port:
 10081                           	opt stack 0
 10082                           tblptru	equ	0xFF8
 10083                           tblptrh	equ	0xFF7
 10084                           tblptrl	equ	0xFF6
 10085                           tablat	equ	0xFF5
 10086                           prodh	equ	0xFF4
 10087                           prodl	equ	0xFF3
 10088                           intcon	equ	0xFF2
 10089                           indf0	equ	0xFEF
 10090                           postinc0	equ	0xFEE
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           postinc1	equ	0xFE6
 10095                           postdec1	equ	0xFE5
 10096                           fsr1l	equ	0xFE1
 10097                           indf2	equ	0xFDF
 10098                           postinc2	equ	0xFDE
 10099                           postdec2	equ	0xFDD
 10100                           fsr2h	equ	0xFDA
 10101                           fsr2l	equ	0xFD9
 10102                           status	equ	0xFD8
 10103                           
 10104 ;; *************** function _TMRO_USART *****************
 10105 ;; Defined at:
 10106 ;;		line 84 in file "robot.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;		None
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;		None
 10111 ;; Return value:  Size  Location     Type
 10112 ;;		None               void
 10113 ;; Registers used:
 10114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10122 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10123 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10124 ;;Total ram usage:       14 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    3
 10127 ;; This function calls:
 10128 ;;		_ReadUSART
 10129 ;;		i2_Lcd_Clear
 10130 ;;		i2_Lcd_Set_Cursor
 10131 ;;		i2_Lcd_Write_String
 10132 ;; This function is called by:
 10133 ;;		Interrupt level 2
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	intcode
 10138  000008                     __pintcode:
 10139                           	opt stack 0
 10140  000008                     _TMRO_USART:
 10141                           	opt stack 21
 10142                           
 10143                           ;incstack = 0
 10144  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
 10145  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
 10146  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
 10147  000014  ED7A  F00C         	call	int_func,f	;refresh shadow registers
 10148                           pclatu	equ	0xFFB
 10149                           pclath	equ	0xFFA
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           indf0	equ	0xFEF
 10158                           postinc0	equ	0xFEE
 10159                           fsr0h	equ	0xFEA
 10160                           fsr0l	equ	0xFE9
 10161                           wreg	equ	0xFE8
 10162                           postinc1	equ	0xFE6
 10163                           postdec1	equ	0xFE5
 10164                           fsr1l	equ	0xFE1
 10165                           indf2	equ	0xFDF
 10166                           postinc2	equ	0xFDE
 10167                           postdec2	equ	0xFDD
 10168                           fsr2h	equ	0xFDA
 10169                           fsr2l	equ	0xFD9
 10170                           status	equ	0xFD8
 10171                           
 10172                           	psect	intcode_body
 10173  0018F4                     __pintcode_body:
 10174                           	opt stack 21
 10175  0018F4                     int_func:
 10176                           	opt stack 21
 10177  0018F4  0006               	pop		; remove dummy address from shadow register refresh
 10178  0018F6  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
 10179  0018FA  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
 10180  0018FE  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
 10181  001902  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
 10182  001906  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
 10183  00190A  CFF3 F013          	movff	prodl,??_TMRO_USART+8
 10184  00190E  CFF4 F014          	movff	prodh,??_TMRO_USART+9
 10185  001912  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
 10186  001916  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
 10187  00191A  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
 10188  00191E  CFF5 F018          	movff	tablat,??_TMRO_USART+13
 10189                           
 10190                           ;robot.c: 89: if (PIR1bits.RCIF) {
 10191  001922  AA9E               	btfss	3998,5,c	;volatile
 10192  001924  D032               	goto	i2l359
 10193                           
 10194                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 10195  001926  503D               	movf	_cad,w,c
 10196  001928  0D01               	mullw	1
 10197  00192A  0101               	movlb	1	; () banked
 10198  00192C  0E28               	movlw	low _BluetoothDato
 10199  00192E  24F3               	addwf	prodl,w,c
 10200  001930  6ED9               	movwf	fsr2l,c
 10201  001932  0101               	movlb	1	; () banked
 10202  001934  0E01               	movlw	high _BluetoothDato
 10203  001936  20F4               	addwfc	prodh,w,c
 10204  001938  6EDA               	movwf	fsr2h,c
 10205  00193A  EC88  F014         	call	_ReadUSART	;wreg free
 10206  00193E  6EDF               	movwf	indf2,c
 10207                           
 10208                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 10209  001940  503D               	movf	_cad,w,c
 10210  001942  0D01               	mullw	1
 10211  001944  0101               	movlb	1	; () banked
 10212  001946  0E28               	movlw	low _BluetoothDato
 10213  001948  24F3               	addwf	prodl,w,c
 10214  00194A  6ED9               	movwf	fsr2l,c
 10215  00194C  0101               	movlb	1	; () banked
 10216  00194E  0E01               	movlw	high _BluetoothDato
 10217  001950  20F4               	addwfc	prodh,w,c
 10218  001952  6EDA               	movwf	fsr2h,c
 10219  001954  0E23               	movlw	35
 10220  001956  62DF               	cpfseq	indf2,c
 10221  001958  D013               	goto	i2l4375
 10222                           
 10223                           ; BSR set to: 1
 10224                           ;robot.c: 93: if (ComanTFlag == 0) {
 10225  00195A  6632               	tstfsz	_ComanTFlag,c
 10226  00195C  D007               	goto	i2l4371
 10227                           
 10228                           ; BSR set to: 1
 10229                           ;robot.c: 94: EntTrama = 1;
 10230  00195E  0E01               	movlw	1
 10231  001960  6E35               	movwf	_EntTrama,c
 10232                           
 10233                           ;robot.c: 95: FinComandT = 0;
 10234  001962  0E00               	movlw	0
 10235  001964  6E37               	movwf	_FinComandT,c
 10236                           
 10237                           ;robot.c: 96: ComanTFlag = 1;
 10238  001966  0E01               	movlw	1
 10239  001968  6E32               	movwf	_ComanTFlag,c
 10240  00196A  D00D               	goto	i2u469_40
 10241  00196C                     i2l4371:
 10242                           
 10243                           ; BSR set to: 1
 10244                           ;robot.c: 99: else if (ComanTFlag == 1) {
 10245  00196C  0432               	decf	_ComanTFlag,w,c
 10246  00196E  A4D8               	btfss	status,2,c
 10247  001970  D01C               	goto	i2l4387
 10248                           
 10249                           ; BSR set to: 1
 10250                           ;robot.c: 100: ComanTFlag = 0;
 10251  001972  0E00               	movlw	0
 10252  001974  6E32               	movwf	_ComanTFlag,c
 10253                           
 10254                           ;robot.c: 101: FinComandT = 1;
 10255  001976  0E01               	movlw	1
 10256  001978  6E37               	movwf	_FinComandT,c
 10257                           
 10258                           ;robot.c: 102: EntTrama = 0;
 10259  00197A  0E00               	movlw	0
 10260  00197C  6E35               	movwf	_EntTrama,c
 10261  00197E  D015               	goto	i2l4387
 10262  001980                     i2l4375:
 10263                           
 10264                           ; BSR set to: 1
 10265                           ;robot.c: 106: else if (EntTrama == 1)
 10266  001980  0435               	decf	_EntTrama,w,c
 10267  001982  A4D8               	btfss	status,2,c
 10268  001984  D012               	goto	i2l4387
 10269  001986                     i2u469_40:
 10270                           
 10271                           ; BSR set to: 1
 10272                           ;robot.c: 107: cad++;
 10273  001986  2A3D               	incf	_cad,f,c
 10274  001988  D010               	goto	i2l4387
 10275  00198A                     i2l359:
 10276                           
 10277                           ;robot.c: 111: else if(PIR1bits.TMR2IF){
 10278  00198A  A29E               	btfss	3998,1,c	;volatile
 10279  00198C  D00E               	goto	i2l4387
 10280                           
 10281                           ;robot.c: 112: Lcd_Clear();
 10282  00198E  ECD4  F014         	call	i2_Lcd_Clear	;wreg free
 10283                           
 10284                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 10285  001992  0E01               	movlw	1
 10286  001994  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10287  001996  0E01               	movlw	1
 10288  001998  EC76  F012         	call	i2_Lcd_Set_Cursor
 10289                           
 10290                           ;robot.c: 114: Lcd_Write_String("Interruption TMR2");
 10291  00199C  0E7F               	movlw	high STR_19
 10292  00199E  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10293  0019A0  0E43               	movlw	low STR_19
 10294  0019A2  6E05               	movwf	i2Lcd_Write_String@a,c
 10295  0019A4  EC0E  F011         	call	i2_Lcd_Write_String	;wreg free
 10296                           
 10297                           ;robot.c: 115: PIE1bits.TMR2IE = 0;
 10298  0019A8  929D               	bcf	3997,1,c	;volatile
 10299  0019AA                     i2l4387:
 10300                           
 10301                           ;robot.c: 116: }
 10302                           ;robot.c: 117: PIR1bits.TMR2IF=0;
 10303  0019AA  929E               	bcf	3998,1,c	;volatile
 10304                           
 10305                           ;robot.c: 118: PIR1bits.RCIF=0;
 10306  0019AC  9A9E               	bcf	3998,5,c	;volatile
 10307  0019AE  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10308  0019B2  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10309  0019B6  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10310  0019BA  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10311  0019BE  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10312  0019C2  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10313  0019C6  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10314  0019CA  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10315  0019CE  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10316  0019D2  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10317  0019D6  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10318  0019DA  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10319  0019DE  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10320  0019E2  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10321  0019E6  0011               	retfie		f
 10322  0019E8                     __end_of_TMRO_USART:
 10323                           	opt stack 0
 10324                           pclatu	equ	0xFFB
 10325                           pclath	equ	0xFFA
 10326                           tblptru	equ	0xFF8
 10327                           tblptrh	equ	0xFF7
 10328                           tblptrl	equ	0xFF6
 10329                           tablat	equ	0xFF5
 10330                           prodh	equ	0xFF4
 10331                           prodl	equ	0xFF3
 10332                           intcon	equ	0xFF2
 10333                           indf0	equ	0xFEF
 10334                           postinc0	equ	0xFEE
 10335                           fsr0h	equ	0xFEA
 10336                           fsr0l	equ	0xFE9
 10337                           wreg	equ	0xFE8
 10338                           postinc1	equ	0xFE6
 10339                           postdec1	equ	0xFE5
 10340                           fsr1h	equ	0xFE2
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           postdec2	equ	0xFDD
 10345                           fsr2h	equ	0xFDA
 10346                           fsr2l	equ	0xFD9
 10347                           status	equ	0xFD8
 10348                           
 10349 ;; *************** function i2_Lcd_Write_String *****************
 10350 ;; Defined at:
 10351 ;;		line 90 in file "lcd.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;  a               2    4[COMRAM] PTR unsigned char 
 10354 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
 10355 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
 10356 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;		None               void
 10361 ;; Registers used:
 10362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10368 ;;      Params:         2       0       0       0       0       0       0       0       0
 10369 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10370 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10371 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10372 ;;Total ram usage:        6 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    2
 10375 ;; This function calls:
 10376 ;;		i2_Lcd_Write_Char
 10377 ;; This function is called by:
 10378 ;;		_TMRO_USART
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           
 10382                           	psect	text52
 10383  00221C                     __ptext52:
 10384                           	opt stack 0
 10385  00221C                     i2_Lcd_Write_String:
 10386                           	opt stack 21
 10387                           
 10388                           ;lcd.c: 91: int i;
 10389                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10390                           
 10391                           ;incstack = 0
 10392  00221C  0E00               	movlw	0
 10393  00221E  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10394  002220  0E00               	movlw	0
 10395  002222  6E09               	movwf	i2Lcd_Write_String@i,c
 10396  002224  D01C               	goto	i2l4309
 10397  002226                     i2l4305:
 10398                           
 10399                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10400  002226  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10401  00222A  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10402  00222E  5009               	movf	i2Lcd_Write_String@i,w,c
 10403  002230  2607               	addwf	??i2_Lcd_Write_String,f,c
 10404  002232  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10405  002234  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10406  002236  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10407  00223A  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10408  00223E  6AF8               	clrf	tblptru,c
 10409  002240  0E07               	movlw	(high __ramtop+-1)
 10410  002242  64F7               	cpfsgt	tblptrh,c
 10411  002244  D003               	bra	i2u457_47
 10412  002246  0008               	tblrd		*
 10413  002248  50F5               	movf	tablat,w,c
 10414  00224A  D005               	bra	i2u457_40
 10415  00224C                     i2u457_47:
 10416  00224C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10417  002250  CFF7 FFEA          	movff	tblptrh,fsr0h
 10418  002254  50EF               	movf	indf0,w,c
 10419  002256                     i2u457_40:
 10420  002256  ECB1  F013         	call	i2_Lcd_Write_Char
 10421  00225A  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10422  00225C  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10423  00225E                     i2l4309:
 10424  00225E  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10425  002262  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10426  002266  5009               	movf	i2Lcd_Write_String@i,w,c
 10427  002268  2607               	addwf	??i2_Lcd_Write_String,f,c
 10428  00226A  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10429  00226C  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10430  00226E  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10431  002272  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10432  002276  6AF8               	clrf	tblptru,c
 10433  002278  0E07               	movlw	(high __ramtop+-1)
 10434  00227A  64F7               	cpfsgt	tblptrh,c
 10435  00227C  D003               	bra	i2u458_47
 10436  00227E  0008               	tblrd		*
 10437  002280  50F5               	movf	tablat,w,c
 10438  002282  D005               	bra	i2u458_40
 10439  002284                     i2u458_47:
 10440  002284  CFF6 FFE9          	movff	tblptrl,fsr0l
 10441  002288  CFF7 FFEA          	movff	tblptrh,fsr0h
 10442  00228C  50EF               	movf	indf0,w,c
 10443  00228E                     i2u458_40:
 10444  00228E  0900               	iorlw	0
 10445  002290  B4D8               	btfsc	status,2,c
 10446  002292  0012               	return	
 10447  002294  D7C8               	goto	i2l4305
 10448  002296                     __end_ofi2_Lcd_Write_String:
 10449                           	opt stack 0
 10450                           pclatu	equ	0xFFB
 10451                           pclath	equ	0xFFA
 10452                           tblptru	equ	0xFF8
 10453                           tblptrh	equ	0xFF7
 10454                           tblptrl	equ	0xFF6
 10455                           tablat	equ	0xFF5
 10456                           prodh	equ	0xFF4
 10457                           prodl	equ	0xFF3
 10458                           intcon	equ	0xFF2
 10459                           indf0	equ	0xFEF
 10460                           postinc0	equ	0xFEE
 10461                           fsr0h	equ	0xFEA
 10462                           fsr0l	equ	0xFE9
 10463                           wreg	equ	0xFE8
 10464                           postinc1	equ	0xFE6
 10465                           postdec1	equ	0xFE5
 10466                           fsr1h	equ	0xFE2
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           fsr2h	equ	0xFDA
 10472                           fsr2l	equ	0xFD9
 10473                           status	equ	0xFD8
 10474                           
 10475 ;; *************** function i2_Lcd_Write_Char *****************
 10476 ;; Defined at:
 10477 ;;		line 75 in file "lcd.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;  a               1    wreg     unsigned char 
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;  a               1    3[COMRAM] unsigned char 
 10482 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10483 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;		None               void
 10486 ;; Registers used:
 10487 ;;		wreg, status,2, status,0, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0
 10494 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10496 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10497 ;;Total ram usage:        3 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    1
 10500 ;; This function calls:
 10501 ;;		i2_Lcd_Port
 10502 ;; This function is called by:
 10503 ;;		i2_Lcd_Write_String
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text53
 10508  002762                     __ptext53:
 10509                           	opt stack 0
 10510  002762                     i2_Lcd_Write_Char:
 10511                           	opt stack 21
 10512                           
 10513                           ;incstack = 0
 10514                           ;i2Lcd_Write_Char@a stored from wreg
 10515  002762  6E04               	movwf	i2Lcd_Write_Char@a,c
 10516                           
 10517                           ;lcd.c: 76: char temp, y;
 10518                           ;lcd.c: 77: temp = a & 0x0F;
 10519  002764  5004               	movf	i2Lcd_Write_Char@a,w,c
 10520  002766  0B0F               	andlw	15
 10521  002768  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10522                           
 10523                           ;lcd.c: 78: y = a & 0xF0;
 10524  00276A  5004               	movf	i2Lcd_Write_Char@a,w,c
 10525  00276C  0BF0               	andlw	240
 10526  00276E  6E03               	movwf	i2Lcd_Write_Char@y,c
 10527                           
 10528                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10529  002770  8084               	bsf	3972,0,c	;volatile
 10530                           
 10531                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10532  002772  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10533  002774  0B0F               	andlw	15
 10534  002776  ECFC  F013         	call	i2_Lcd_Port
 10535                           
 10536                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10537  00277A  8484               	bsf	3972,2,c	;volatile
 10538                           
 10539                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10540  00277C  0E0D               	movlw	13
 10541  00277E                     i2u698_47:
 10542  00277E  2EE8               	decfsz	wreg,f,c
 10543  002780  D7FE               	goto	i2u698_47
 10544  002782  F000               	nop	
 10545                           
 10546                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10547  002784  9484               	bcf	3972,2,c	;volatile
 10548                           
 10549                           ;lcd.c: 84: Lcd_Port(temp);
 10550  002786  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10551  002788  ECFC  F013         	call	i2_Lcd_Port
 10552                           
 10553                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10554  00278C  8484               	bsf	3972,2,c	;volatile
 10555                           
 10556                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10557  00278E  0E0D               	movlw	13
 10558  002790                     i2u699_47:
 10559  002790  2EE8               	decfsz	wreg,f,c
 10560  002792  D7FE               	goto	i2u699_47
 10561  002794  F000               	nop	
 10562                           
 10563                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10564  002796  9484               	bcf	3972,2,c	;volatile
 10565  002798  0012               	return	
 10566  00279A                     __end_ofi2_Lcd_Write_Char:
 10567                           	opt stack 0
 10568                           pclatu	equ	0xFFB
 10569                           pclath	equ	0xFFA
 10570                           tblptru	equ	0xFF8
 10571                           tblptrh	equ	0xFF7
 10572                           tblptrl	equ	0xFF6
 10573                           tablat	equ	0xFF5
 10574                           prodh	equ	0xFF4
 10575                           prodl	equ	0xFF3
 10576                           intcon	equ	0xFF2
 10577                           indf0	equ	0xFEF
 10578                           postinc0	equ	0xFEE
 10579                           fsr0h	equ	0xFEA
 10580                           fsr0l	equ	0xFE9
 10581                           wreg	equ	0xFE8
 10582                           postinc1	equ	0xFE6
 10583                           postdec1	equ	0xFE5
 10584                           fsr1h	equ	0xFE2
 10585                           fsr1l	equ	0xFE1
 10586                           indf2	equ	0xFDF
 10587                           postinc2	equ	0xFDE
 10588                           postdec2	equ	0xFDD
 10589                           fsr2h	equ	0xFDA
 10590                           fsr2l	equ	0xFD9
 10591                           status	equ	0xFD8
 10592                           
 10593 ;; *************** function i2_Lcd_Set_Cursor *****************
 10594 ;; Defined at:
 10595 ;;		line 40 in file "lcd.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;  a               1    wreg     unsigned char 
 10598 ;;  b               1    3[COMRAM] unsigned char 
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;  a               1    4[COMRAM] unsigned char 
 10601 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10602 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10603 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10604 ;; Return value:  Size  Location     Type
 10605 ;;		None               void
 10606 ;; Registers used:
 10607 ;;		wreg, status,2, status,0, cstack
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10613 ;;      Params:         1       0       0       0       0       0       0       0       0
 10614 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10615 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10616 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10617 ;;Total ram usage:        5 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    2
 10620 ;; This function calls:
 10621 ;;		i2_Lcd_Cmd
 10622 ;; This function is called by:
 10623 ;;		_TMRO_USART
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           	psect	text54
 10628  0024EC                     __ptext54:
 10629                           	opt stack 0
 10630  0024EC                     i2_Lcd_Set_Cursor:
 10631                           	opt stack 21
 10632                           
 10633                           ;incstack = 0
 10634                           ;i2Lcd_Set_Cursor@a stored from wreg
 10635  0024EC  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10636                           
 10637                           ;lcd.c: 41: char temp, z, y;
 10638                           ;lcd.c: 42: if (a == 1) {
 10639  0024EE  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10640  0024F0  A4D8               	btfss	status,2,c
 10641  0024F2  D010               	goto	i2l4295
 10642                           
 10643                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10644  0024F4  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10645  0024F6  0F7F               	addlw	127
 10646  0024F8  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10647                           
 10648                           ;lcd.c: 44: z = temp >> 4;
 10649  0024FA  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10650  0024FC  0B0F               	andlw	15
 10651  0024FE  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10652                           
 10653                           ;lcd.c: 45: y = temp & 0x0F;
 10654  002500  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10655  002502  0B0F               	andlw	15
 10656  002504  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10657                           
 10658                           ;lcd.c: 46: Lcd_Cmd(z);
 10659  002506  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10660  002508  EC5A  F014         	call	i2_Lcd_Cmd
 10661                           
 10662                           ;lcd.c: 47: Lcd_Cmd(y);
 10663  00250C  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10664  00250E  EC5A  F014         	call	i2_Lcd_Cmd
 10665                           
 10666                           ;lcd.c: 48: } else if (a == 2) {
 10667  002512  D013               	goto	i2l260
 10668  002514                     i2l4295:
 10669  002514  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10670  002516  0A02               	xorlw	2
 10671  002518  A4D8               	btfss	status,2,c
 10672  00251A  D00F               	goto	i2l260
 10673                           
 10674                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10675  00251C  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10676  00251E  0FBF               	addlw	191
 10677  002520  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10678                           
 10679                           ;lcd.c: 50: z = temp >> 4;
 10680  002522  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10681  002524  0B0F               	andlw	15
 10682  002526  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10683                           
 10684                           ;lcd.c: 51: y = temp & 0x0F;
 10685  002528  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10686  00252A  0B0F               	andlw	15
 10687  00252C  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10688                           
 10689                           ;lcd.c: 52: Lcd_Cmd(z);
 10690  00252E  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10691  002530  EC5A  F014         	call	i2_Lcd_Cmd
 10692                           
 10693                           ;lcd.c: 53: Lcd_Cmd(y);
 10694  002534  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10695  002536  EC5A  F014         	call	i2_Lcd_Cmd
 10696  00253A                     i2l260:
 10697  00253A  0012               	return	
 10698  00253C                     __end_ofi2_Lcd_Set_Cursor:
 10699                           	opt stack 0
 10700                           pclatu	equ	0xFFB
 10701                           pclath	equ	0xFFA
 10702                           tblptru	equ	0xFF8
 10703                           tblptrh	equ	0xFF7
 10704                           tblptrl	equ	0xFF6
 10705                           tablat	equ	0xFF5
 10706                           prodh	equ	0xFF4
 10707                           prodl	equ	0xFF3
 10708                           intcon	equ	0xFF2
 10709                           indf0	equ	0xFEF
 10710                           postinc0	equ	0xFEE
 10711                           fsr0h	equ	0xFEA
 10712                           fsr0l	equ	0xFE9
 10713                           wreg	equ	0xFE8
 10714                           postinc1	equ	0xFE6
 10715                           postdec1	equ	0xFE5
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function i2_Lcd_Clear *****************
 10726 ;; Defined at:
 10727 ;;		line 35 in file "lcd.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;		None               void
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10741 ;;      Params:         0       0       0       0       0       0       0       0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10744 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10745 ;;Total ram usage:        0 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    2
 10748 ;; This function calls:
 10749 ;;		i2_Lcd_Cmd
 10750 ;; This function is called by:
 10751 ;;		_TMRO_USART
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text55
 10756  0029A8                     __ptext55:
 10757                           	opt stack 0
 10758  0029A8                     i2_Lcd_Clear:
 10759                           	opt stack 21
 10760                           
 10761                           ;lcd.c: 36: Lcd_Cmd(0);
 10762                           
 10763                           ;incstack = 0
 10764  0029A8  0E00               	movlw	0
 10765  0029AA  EC5A  F014         	call	i2_Lcd_Cmd
 10766                           
 10767                           ;lcd.c: 37: Lcd_Cmd(1);
 10768  0029AE  0E01               	movlw	1
 10769  0029B0  EC5A  F014         	call	i2_Lcd_Cmd
 10770  0029B4  0012               	return	
 10771  0029B6                     __end_ofi2_Lcd_Clear:
 10772                           	opt stack 0
 10773                           pclatu	equ	0xFFB
 10774                           pclath	equ	0xFFA
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           intcon	equ	0xFF2
 10782                           indf0	equ	0xFEF
 10783                           postinc0	equ	0xFEE
 10784                           fsr0h	equ	0xFEA
 10785                           fsr0l	equ	0xFE9
 10786                           wreg	equ	0xFE8
 10787                           postinc1	equ	0xFE6
 10788                           postdec1	equ	0xFE5
 10789                           fsr1h	equ	0xFE2
 10790                           fsr1l	equ	0xFE1
 10791                           indf2	equ	0xFDF
 10792                           postinc2	equ	0xFDE
 10793                           postdec2	equ	0xFDD
 10794                           fsr2h	equ	0xFDA
 10795                           fsr2l	equ	0xFD9
 10796                           status	equ	0xFD8
 10797                           
 10798 ;; *************** function i2_Lcd_Cmd *****************
 10799 ;; Defined at:
 10800 ;;		line 27 in file "lcd.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;  a               1    wreg     unsigned char 
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;  a               1    2[COMRAM] unsigned char 
 10805 ;; Return value:  Size  Location     Type
 10806 ;;		None               void
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, cstack
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0
 10815 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10816 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10817 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10818 ;;Total ram usage:        2 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    1
 10821 ;; This function calls:
 10822 ;;		i2_Lcd_Port
 10823 ;; This function is called by:
 10824 ;;		i2_Lcd_Clear
 10825 ;;		i2_Lcd_Set_Cursor
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           	psect	text56
 10830  0028B4                     __ptext56:
 10831                           	opt stack 0
 10832  0028B4                     i2_Lcd_Cmd:
 10833                           	opt stack 21
 10834                           
 10835                           ;incstack = 0
 10836                           ;i2Lcd_Cmd@a stored from wreg
 10837  0028B4  6E03               	movwf	i2Lcd_Cmd@a,c
 10838                           
 10839                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10840  0028B6  9084               	bcf	3972,0,c	;volatile
 10841                           
 10842                           ;lcd.c: 29: Lcd_Port(a);
 10843  0028B8  5003               	movf	i2Lcd_Cmd@a,w,c
 10844  0028BA  ECFC  F013         	call	i2_Lcd_Port
 10845                           
 10846                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10847  0028BE  8484               	bsf	3972,2,c	;volatile
 10848                           
 10849                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10850  0028C0  0E06               	movlw	6
 10851  0028C2  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10852  0028C4  0E30               	movlw	48
 10853  0028C6                     i2u700_47:
 10854  0028C6  2EE8               	decfsz	wreg,f,c
 10855  0028C8  D7FE               	goto	i2u700_47
 10856  0028CA  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10857  0028CC  D7FC               	goto	i2u700_47
 10858  0028CE  D000               	nop2	
 10859                           
 10860                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10861  0028D0  9484               	bcf	3972,2,c	;volatile
 10862  0028D2  0012               	return	
 10863  0028D4                     __end_ofi2_Lcd_Cmd:
 10864                           	opt stack 0
 10865                           pclatu	equ	0xFFB
 10866                           pclath	equ	0xFFA
 10867                           tblptru	equ	0xFF8
 10868                           tblptrh	equ	0xFF7
 10869                           tblptrl	equ	0xFF6
 10870                           tablat	equ	0xFF5
 10871                           prodh	equ	0xFF4
 10872                           prodl	equ	0xFF3
 10873                           intcon	equ	0xFF2
 10874                           indf0	equ	0xFEF
 10875                           postinc0	equ	0xFEE
 10876                           fsr0h	equ	0xFEA
 10877                           fsr0l	equ	0xFE9
 10878                           wreg	equ	0xFE8
 10879                           postinc1	equ	0xFE6
 10880                           postdec1	equ	0xFE5
 10881                           fsr1h	equ	0xFE2
 10882                           fsr1l	equ	0xFE1
 10883                           indf2	equ	0xFDF
 10884                           postinc2	equ	0xFDE
 10885                           postdec2	equ	0xFDD
 10886                           fsr2h	equ	0xFDA
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function i2_Lcd_Port *****************
 10891 ;; Defined at:
 10892 ;;		line 6 in file "lcd.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  a               1    wreg     unsigned char 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  a               1    0[COMRAM] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;		None               void
 10899 ;; Registers used:
 10900 ;;		wreg
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0
 10907 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10909 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10910 ;;Total ram usage:        1 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; This function calls:
 10913 ;;		Nothing
 10914 ;; This function is called by:
 10915 ;;		i2_Lcd_Cmd
 10916 ;;		i2_Lcd_Write_Char
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text57
 10921  0027F8                     __ptext57:
 10922                           	opt stack 0
 10923  0027F8                     i2_Lcd_Port:
 10924                           	opt stack 21
 10925                           
 10926                           ;incstack = 0
 10927                           ;i2Lcd_Port@a stored from wreg
 10928  0027F8  6E01               	movwf	i2Lcd_Port@a,c
 10929                           
 10930                           ;lcd.c: 7: if (a & 1)
 10931  0027FA  A001               	btfss	i2Lcd_Port@a,0,c
 10932  0027FC  D002               	goto	i2l240
 10933                           
 10934                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10935  0027FE  8883               	bsf	3971,4,c	;volatile
 10936  002800  D001               	goto	i2l3791
 10937  002802                     i2l240:
 10938                           
 10939                           ;lcd.c: 9: else
 10940                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10941  002802  9883               	bcf	3971,4,c	;volatile
 10942  002804                     i2l3791:
 10943                           
 10944                           ;lcd.c: 12: if (a & 2)
 10945  002804  A201               	btfss	i2Lcd_Port@a,1,c
 10946  002806  D002               	goto	i2l242
 10947                           
 10948                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10949  002808  8A83               	bsf	3971,5,c	;volatile
 10950  00280A  D001               	goto	i2l3795
 10951  00280C                     i2l242:
 10952                           
 10953                           ;lcd.c: 14: else
 10954                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10955  00280C  9A83               	bcf	3971,5,c	;volatile
 10956  00280E                     i2l3795:
 10957                           
 10958                           ;lcd.c: 17: if (a & 4)
 10959  00280E  A401               	btfss	i2Lcd_Port@a,2,c
 10960  002810  D002               	goto	i2l244
 10961                           
 10962                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10963  002812  8C83               	bsf	3971,6,c	;volatile
 10964  002814  D001               	goto	i2l3799
 10965  002816                     i2l244:
 10966                           
 10967                           ;lcd.c: 19: else
 10968                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10969  002816  9C83               	bcf	3971,6,c	;volatile
 10970  002818                     i2l3799:
 10971                           
 10972                           ;lcd.c: 22: if (a & 8)
 10973  002818  A601               	btfss	i2Lcd_Port@a,3,c
 10974  00281A  D002               	goto	i2l246
 10975                           
 10976                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10977  00281C  8E83               	bsf	3971,7,c	;volatile
 10978  00281E  D001               	goto	i2l248
 10979  002820                     i2l246:
 10980                           
 10981                           ;lcd.c: 24: else
 10982                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10983  002820  9E83               	bcf	3971,7,c	;volatile
 10984  002822                     i2l248:
 10985  002822  0012               	return	
 10986  002824                     __end_ofi2_Lcd_Port:
 10987                           	opt stack 0
 10988                           pclatu	equ	0xFFB
 10989                           pclath	equ	0xFFA
 10990                           tblptru	equ	0xFF8
 10991                           tblptrh	equ	0xFF7
 10992                           tblptrl	equ	0xFF6
 10993                           tablat	equ	0xFF5
 10994                           prodh	equ	0xFF4
 10995                           prodl	equ	0xFF3
 10996                           intcon	equ	0xFF2
 10997                           indf0	equ	0xFEF
 10998                           postinc0	equ	0xFEE
 10999                           fsr0h	equ	0xFEA
 11000                           fsr0l	equ	0xFE9
 11001                           wreg	equ	0xFE8
 11002                           postinc1	equ	0xFE6
 11003                           postdec1	equ	0xFE5
 11004                           fsr1h	equ	0xFE2
 11005                           fsr1l	equ	0xFE1
 11006                           indf2	equ	0xFDF
 11007                           postinc2	equ	0xFDE
 11008                           postdec2	equ	0xFDD
 11009                           fsr2h	equ	0xFDA
 11010                           fsr2l	equ	0xFD9
 11011                           status	equ	0xFD8
 11012                           
 11013 ;; *************** function _ReadUSART *****************
 11014 ;; Defined at:
 11015 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;  data            1    0[COMRAM] unsigned char 
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      unsigned char 
 11022 ;; Registers used:
 11023 ;;		wreg, status,2, status,0
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0
 11030 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11032 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11033 ;;Total ram usage:        1 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; This function calls:
 11036 ;;		Nothing
 11037 ;; This function is called by:
 11038 ;;		_TMRO_USART
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           	psect	text58
 11043  002910                     __ptext58:
 11044                           	opt stack 0
 11045  002910                     _ReadUSART:
 11046                           	opt stack 23
 11047                           
 11048                           ;incstack = 0
 11049  002910  0EF2               	movlw	242
 11050  002912  163C               	andwf	_USART_Status,f,c
 11051  002914  ACAB               	btfss	4011,6,c	;volatile
 11052  002916  D003               	goto	i2l616
 11053  002918  903C               	bcf	_USART_Status,0,c
 11054  00291A  B0AB               	btfsc	4011,0,c	;volatile
 11055  00291C  803C               	bsf	_USART_Status,0,c
 11056  00291E                     i2l616:
 11057  00291E  B4AB               	btfsc	4011,2,c	;volatile
 11058  002920  843C               	bsf	_USART_Status,2,c
 11059  002922  B2AB               	btfsc	4011,1,c	;volatile
 11060  002924  863C               	bsf	_USART_Status,3,c
 11061  002926  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 11062  00292A  5001               	movf	ReadUSART@data,w,c
 11063  00292C  0012               	return	
 11064  00292E                     __end_of_ReadUSART:
 11065                           	opt stack 0
 11066                           pclatu	equ	0xFFB
 11067                           pclath	equ	0xFFA
 11068                           tblptru	equ	0xFF8
 11069                           tblptrh	equ	0xFF7
 11070                           tblptrl	equ	0xFF6
 11071                           tablat	equ	0xFF5
 11072                           prodh	equ	0xFF4
 11073                           prodl	equ	0xFF3
 11074                           intcon	equ	0xFF2
 11075                           indf0	equ	0xFEF
 11076                           postinc0	equ	0xFEE
 11077                           fsr0h	equ	0xFEA
 11078                           fsr0l	equ	0xFE9
 11079                           wreg	equ	0xFE8
 11080                           postinc1	equ	0xFE6
 11081                           postdec1	equ	0xFE5
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           fsr2h	equ	0xFDA
 11088                           fsr2l	equ	0xFD9
 11089                           status	equ	0xFD8
 11090                           pclatu	equ	0xFFB
 11091                           pclath	equ	0xFFA
 11092                           tblptru	equ	0xFF8
 11093                           tblptrh	equ	0xFF7
 11094                           tblptrl	equ	0xFF6
 11095                           tablat	equ	0xFF5
 11096                           prodh	equ	0xFF4
 11097                           prodl	equ	0xFF3
 11098                           intcon	equ	0xFF2
 11099                           indf0	equ	0xFEF
 11100                           postinc0	equ	0xFEE
 11101                           fsr0h	equ	0xFEA
 11102                           fsr0l	equ	0xFE9
 11103                           wreg	equ	0xFE8
 11104                           postinc1	equ	0xFE6
 11105                           postdec1	equ	0xFE5
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           fsr2h	equ	0xFDA
 11112                           fsr2l	equ	0xFD9
 11113                           status	equ	0xFD8
 11114                           
 11115                           	psect	rparam
 11116  0000                     pclatu	equ	0xFFB
 11117                           pclath	equ	0xFFA
 11118                           tblptru	equ	0xFF8
 11119                           tblptrh	equ	0xFF7
 11120                           tblptrl	equ	0xFF6
 11121                           tablat	equ	0xFF5
 11122                           prodh	equ	0xFF4
 11123                           prodl	equ	0xFF3
 11124                           intcon	equ	0xFF2
 11125                           indf0	equ	0xFEF
 11126                           postinc0	equ	0xFEE
 11127                           fsr0h	equ	0xFEA
 11128                           fsr0l	equ	0xFE9
 11129                           wreg	equ	0xFE8
 11130                           postinc1	equ	0xFE6
 11131                           postdec1	equ	0xFE5
 11132                           fsr1h	equ	0xFE2
 11133                           fsr1l	equ	0xFE1
 11134                           indf2	equ	0xFDF
 11135                           postinc2	equ	0xFDE
 11136                           postdec2	equ	0xFDD
 11137                           fsr2h	equ	0xFDA
 11138                           fsr2l	equ	0xFD9
 11139                           status	equ	0xFD8


Data Sizes:
    Strings     187
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1413$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124750
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5102
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  116355
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      99
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1064
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Sep 06 16:17:22 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 2728                             l59 233A  
                           l68 1FF8                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l240 27D6                            l216 2994  
                          l242 27E0                            l244 27EA                            l260 24EA  
                          l421 1ABC                            l246 27F4                            l430 1B04  
                          l422 1B62                            l511 0592                            l248 27F6  
                          l432 1B1C                            l424 1ACC                            l434 1B2C  
                          l426 1AE4                            l602 23A8                            l603 23AA  
                          l195 27BE                            l436 1B42                            l428 1AF4  
                          l604 23B4                            l605 23B6                            l607 23D8  
                          l464 0DB6                            l564 262E                            l565 2638  
                          l566 263A                            l916 17F2                            l925 17E2  
                          l598 2394                            l957 1C0A                            l994 10CA  
                          l995 12DC                            l998 1104                   __CFG_CPB$OFF 000000  
                          _PR2 000FCB                   __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000  
                          _cad 003D                   ___awmod@sign 001E                            prod 000FF3  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l1000 112C                           l1009 1216                           l1018 1240  
                         l1034 18F2                           l1043 18E2                           l1052 1FA0  
                         l1036 1862                           l1117 2098                           l1037 188A  
                         l1127 242E                           l1058 1434                           l1068 2862  
                         l1078 157E                           l5001 1F9E                           l5015 145E  
                         l5111 25C4                           l5033 14EC                           l5051 156E  
                         l5043 152A                           l5203 03B8                           l5131 0066  
                         l5107 2592                           l4501 27E2                           l5045 1542  
                         l5037 1508                           l5061 204A                           l5221 0472  
                         l5133 00A2                           l5125 0052                           l5047 1548  
                         l5063 2056                           l5311 0838                           l5207 0420  
                         l5127 0060                           l5119 0030                           l4505 27EC  
                         l5073 208A                           l5065 205A                           l5081 23EC  
                         l5313 084C                           l5305 0808                           l5321 090E  
                         l4523 10D8                           l5083 23F8                           l4611 1382  
                         l5243 0562                           l5227 049C                           l5235 053A  
                         l5171 024C                           l5163 01E4                           l5147 011C  
                         l5323 0932                           l5333 21E4                           l4461 1B74  
                         l5085 23FC                           l4701 1EF0                           l4621 13CC  
                         l5261 0616                           l5237 0548                           l4551 1198  
                         l4535 1122                           l5095 2446                           l4615 13A0  
                         l5319 08FA                           l5271 0708                           l5191 0346  
                         l5175 0272                           l4455 2964                           l5423 2318  
                         l5329 21AC                           l4473 1BC0                           l4465 1B82  
                         l4553 11AC                           l4545 1164                           l4529 1112  
                         l5089 2420                           l5097 2452                           l4641 1CD6  
                         l4705 1EFA                           l4625 13EA                           l5273 0716  
                         l5257 05C4                           l5249 0596                           l5281 073C  
                         l5441 1FDE                           l4721 1E36                           l4475 1BDE  
                         l4467 1B8C                           l4571 126A                           l4563 11F8  
                         l4555 11B8                           l5291 07B6                           l5187 0320  
                         l5179 02B8                           l5427 2342                           l4731 1E78  
                         l4715 1DF8                           l4477 1BE8                           l4469 1BAA  
                         l4581 12B8                           l4565 120C                           l4557 11C4  
                         l4653 1D0C                           l4709 1F08                           l5365 262A  
                         l5445 2002                           l4725 1E4E                           l5463 24C4  
                         l4655 1D14                           l4647 1CF6                           l4591 1300  
                         l5279 0730                           l4735 27AC                           l4497 27D8  
                         l4921 18DE                           l4913 18BA                           l4673 1D4C  
                         l4665 1D34                           l4657 1D18                           l4841 0A9A  
                         l4827 100A                           l4819 0F26                           l4851 0B6C  
                         l5731 15AA                           l4909 18AA                           l4669 1D3E  
                         l4693 1ED0                           l4685 1EA6                           l4597 1334  
                         l4757 2396                           l4749 2388                           l5725 158E  
                         l4935 1716                           l4919 18D2                           l4695 1ED8  
                         l4847 0B5C                           l5743 15E2                           l4929 16EA  
                         l4881 1828                           l4697 1EDC                           l4689 1EC2  
                         l4865 0D86                           l5753 1622                           l5737 15C6  
                         l4971 17BA                           l4875 180E                           l4859 0CB8  
                         l5595 1B5A                           l5771 1678                           l4957 1788  
                         l4949 1758                           l5781 16B8                           l5861 1D90  
                         l4991 1F42                           l4967 17AA                           l4977 17D2  
                         l5689 1A52                           l4995 1F72                           l4979 17DE  
                         l5779 1694                           l5867 1D9E                           l5887 1DD8  
                         STR_1 7FB9                           STR_2 7F65                           STR_3 7FDB  
                         STR_4 7FDB                           STR_5 7FB6                           STR_6 7F74  
                         STR_7 7F82                           STR_8 7F9E                           STR_9 7F90  
              __end_of_BT_Init 1CB2                           u5111 1314                           _PIE1 000F9D  
                         u5120 1320                           u5300 1E6E                           u6200 2214  
                         u5091 12F2                           u5307 1E64                           u5501 1804  
                         u6125 078E                           u5270 1E2C                           u6207 220A  
                         u5521 181E                           u6225 2688                           u5610 1708  
                         u5277 1E22                           u6261 1C22                           u6190 21DC  
                         u5615 16FE                           u6255 264E                           u5721 144E  
                         u5570 18C0                           u5740 148A                           u5660 17C0  
                         u6197 21D2                           u5590 16DC                           u5920 016C  
                         u6640 1B14                           u4881 1076                           u5745 1480  
                         u5905 00F6                           u5770 1510                           u4891 1096  
                         u5595 16D2                           u6740 1B3C                           u5925 0160  
                         u6907 22B8                           u6917 22CE                           u6790 1B52  
                         u6927 1A0A                           u6937 1A42                           u6947 27B2  
                         u6957 2746                           u6967 2758                           u6977 28A6  
                         u6897 22A2                           _TMR2 000FCC              ?_Lcd_Write_String 001D  
                         _main 1D56                   ___ftpack@arg 0019                   ___ftpack@exp 001C  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0018  
           ??_Lcd_Write_String 001F                  __CFG_IESO$OFF 000000                     _FinComandB 0036  
                   _FinComandT 0037                   _sprintf$1426 0098                   _sprintf$2451 0095  
              __end_of_Lcd_Cmd 28B4                  __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A  
                 ___ftmul@sign 006B                    ?_UART1_Init 0001                   ___fttol@exp1 0081  
                 ___fttol@lval 007D                     _ComanBFlag 0031        __size_of_clrBufferUSART 0038  
                __CFG_PLLDIV$1 000000                     _ComanTFlag 0032              _Lcd_Write_Integer 26B8  
               __CFG_CCP2MX$ON 000000                          ?_main 0001                __end_of___awdiv 1D56  
              __end_of___ftadd 12DE                          STR_10 7FF3                          STR_11 7F55  
                        STR_12 7FFA                          STR_20 7FEC                          STR_13 7F53  
                        STR_21 7FC5                          STR_14 7FFC                          STR_15 7F72  
                        STR_16 7FE4                          STR_17 7FD0                          STR_18 7FAC  
                        STR_19 7F43                __end_of___awmod 1F12                __end_of___ftneg 2870  
              __end_of___lldiv 20AA                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 2440                __end_of___ftsub 260A                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l240 2802                          i2l242 280C  
                        i2l244 2816                          i2l260 253A                          i2l246 2820  
                        i2l248 2822                          i2l359 198A                          i2l616 291E  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF5                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 24EC                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 2308                 WriteUSART@data 0019               __end_of_Lcd_Port 27F8  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 253C  
                 __end_of_main 1DEE      __end_of_Lcd_Write_Integer 26F2    __size_of_Inicializa_Driveby 00C4  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 297C               __end_of_OpenPWM2 2644  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 27CC  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1C0C               __end_of___lbtoft 2894                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 249C  
                       i2l4305 2226                         i2l4309 225E                         i2l4371 196C  
                       i2l4295 2514                         i2l4375 1980                         i2l4387 19AA  
                       i2l3791 2804                         _INTCON 000FF2                         i2l3795 280E  
                       i2l3799 2818             __size_of_ReadUSART 001E            _putcBluetoothString 2308  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F43                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1F12  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 28D4                         ___wmul 2824  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 2126                 _PWM_DutyCycle2 20AA                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 2542                         clear_1 254E  
                       clear_2 255A               ___awdiv@quotient 0025           ?_putcBluetoothString 0020  
               sprintf@vd_1428 00A0                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 2762          ___ftmul@f3_as_product 0067                   __mediumconst 7ECC  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19E0              __end_of_PWM_init1 2910              __end_of_PWM_init2 28F2  
             __end_of_putcTxU1 299A                      ??_sprintf 008F        __size_of_Comando_Tablet 013E  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 2580  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 29A8                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 21A2         __end_of_PWM_DutyCycle2 2126                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 2958                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2944     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 26F2                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 292E              __end_of_SetDCPWM1 26B8  
            __end_of_SetDCPWM2 267E              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 249C                     __div_to_l_ 16BE                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 23DA                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 25CE                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00CE                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 272A  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
       __size_of_getCNY70Value 00B8                        _CCP1CON 000FBD                        _CCP2CON 000FBA  
         i2Lcd_Set_Cursor@temp 0008    SendBlueToothCommand@command 0023                        ?_fround 006C  
    __size_of_Lcd_Write_String 007A                      ?___ftpack 0019                      ?___lbtoft 0021  
       __end_of_Lcd_Set_Cursor 24EC                      ?___lltoft 0021               putSTRINGU1@total 001D  
     __end_ofi2_Lcd_Set_Cursor 253C                        _BT_Init 1C0C                        _SBUSART 003A  
                   ??_Lcd_Init 001C                   ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019  
           __end_of_UART1_Init 298C                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 272A  
                      _Lcd_Cmd 2894                        _Comando 0033                        _Med_lsb 00D0  
                      _Med_msb 00D2                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1C  
                      __Hparam 0000                     _scale$2450 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1CB2                        ___ftadd 105E                        ___awmod 1E82  
                    ?_putcTxU1 0001                        ___ftneg 284A                        ___lldiv 2028  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 23DA  
                      ___ftsub 25CE                        ___fttol 1436             __end_ofi2_Lcd_Port 2824  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 253C                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5669 00EC                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1D56                        __ptext1 2296  
                      __ptext2 19E8                        __ptext3 1C0C                        __ptext4 292E  
                      __ptext5 1DEE                        __ptext6 298C                        __ptext7 2586  
                      __ptext8 279A                        __ptext9 1580                        _comando 00D8  
                  ?__div_to_l_ 0019                        _countup 00FE                        _dpowers 7ECD  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19E8  
               _Comando_Tablet 1580                        _sprintf 001C                  _getCNY70Value 1AAC  
       __end_of_Lcd_Write_Char 2762                 __pintcode_body 18F4           end_of_initialization 2580  
                  _TramaTablet 0100      __size_of_putcBluetoothInt 0086                        int_func 18F4  
     __end_ofi2_Lcd_Write_Char 279A                ___lldiv@divisor 001D                ___lldiv@counter 0025  
                    _RCSTAbits 000FAB     __end_of_Inicializa_Driveby 1AAC                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      Lcd_Port@a 0019                     ??_putcTxU1 001A  
                   _num_med_hi 0043                 __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C  
                ??__tdiv_to_l_ 001F                      i2_Lcd_Cmd 28B4                      _PORTAbits 000F80  
                    _PORTBbits 000F81                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 16BE   __end_of_SendBlueToothCommand 2944                      _TRISBbits 000F93  
                    _TRISCbits 000F94                 ?_getCNY70Value 0019            __size_of_WriteUSART 0012  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 001D              Lcd_Write_String@i 0021  
                    _PWM_init1 28F2                      _PWM_init2 28D4                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0136                    ___ftmul@exp 0066                      _Lcd_Clear 299A  
               __end_of___ftge 1FA2                 __end_of___wmul 284A               _Lcd_Write_String 21A2  
                   ?i2_Lcd_Cmd 0001                 __end_of_fround 105E            start_initialization 253C  
                    Pause_ms@i 001C                      Pause_ms@x 0019                ?_Comando_Tablet 0001  
                    _ReadUSART 2910                      _SetDCPWM1 267E                      _SetDCPWM2 2644  
              SetDCPWM1@DCycle 001D            __end_of__tdiv_to_l_ 18F4                SetDCPWM2@DCycle 001D  
                    _DutyCycle 00CE              __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C  
                   ?_PWM_init1 0001                     ?_PWM_init2 0001           Comando_Tablet@sensed 0170  
                    _OpenUSART 2372               ??_PWM_DutyCycle1 0082               ??_PWM_DutyCycle2 0082  
                    _Pause_seg 2586                ___llmod@divisor 002A                ___llmod@counter 002E  
  __end_of_putcBluetoothString 2372              __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A  
            __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001                       ??___ftge 001F  
   __end_ofi2_Lcd_Write_String 2296                       ??___wmul 002B                    __pdataBANK0 00EC  
             __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B  
                     ??_fround 0030                 _num_med_medium 0045                     fround@prec 0075  
            __size_of___ftpack 00A8              __size_of___lbtoft 0024              __size_of___lltoft 005C  
                  __pbssCOMRAM 0030                ??_getCNY70Value 001B                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019  
          __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1FA2  
                   ?_OpenUSART 0019                       ?_Lcd_Cmd 0001                    sprintf@_val 00AD  
                  sprintf@flag 00A6               ??_clrBufferUSART 0019                     ?_Pause_seg 0001  
                  sprintf@fval 00B4                    sprintf@prec 00AB                      _cleanBfer 003E  
                 ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 292E  
                    __pintcode 0008                  __pmediumconst 7ECC                       ?___awdiv 001F  
                     ?___ftadd 0076                       ?___awmod 0019                       ?___ftneg 0019  
                     ?___lldiv 0019                       ?___ftmul 0060                       ?___llmod 0026  
                     ?___ftsub 0082                      __npowers_ 7EF5                       ?___fttol 0073  
            putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E  
                  __tdiv_to_l_ 17F4                      _contador2 0040                   ??__div_to_l_ 001F  
    SendBlueToothCommand@total 0025                   _TamanhoTrama 00D4                       ?_sprintf 0088  
               __size_of_scale 0478             __end_of_WriteUSART 296A                    ??_PWM_init1 001A  
                  ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034  
               ___wmul@product 002B              ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 001B                       _PIR1bits 000F9E             __end_of__div_to_l_ 17F4  
                     i2u700_47 28C6             ??i2_Lcd_Write_Char 0002                       i2u457_40 2256  
                     i2u457_47 224C                       i2u458_40 228E                       i2u458_47 2284  
        ?_SendBlueToothCommand 0023                       i2u469_40 1986                  ??i2_Lcd_Clear 0004  
                     i2u698_47 277E                       i2u699_47 2790                    ??_Lcd_Clear 001C  
             __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F                     _ADCON1bits 000FC1  
                  __stringdata 7F43              ___wmul@multiplier 0027                       _CheckSum 0030  
             ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001             _Inicializa_Driveby 19E8  
                  ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 2296                       _Lcd_Port 27CC                      copy_data0 2574  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 221C                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 296A                       _OpenPWM2 260A  
                     _Pause_ms 279A                       __Hrparam 0000                       __Lrparam 0000  
           SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4               __size_of___ftadd 0280  
             __size_of___awmod 0090           ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089  
             PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1B64  
                     ___lbtoft 2870                    _fround$2448 0072                    _fround$2449 006F  
                     ___lltoft 2440            __end_ofi2_Lcd_Clear 29B6                 OpenPWM2@ccp2mx 001B  
        __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1E82                     sprintf@exp 00B2  
               OpenPWM1@period 0019                 OpenPWM2@period 001A                       __ptext10 2308  
                     __ptext11 1FA2                       __ptext20 296A                       __ptext12 2958  
                     __ptext21 20AA                       __ptext13 297C                       __ptext30 2824  
                     __ptext22 2644                       __ptext14 2372                       __ptext31 12DE  
                     __ptext23 2126                       __ptext15 1AAC                       __ptext40 25CE  
                     __ptext32 1E82                       __ptext24 2870                       __ptext16 26F2  
                     __ptext41 105E                       __ptext33 1CB2                       __ptext25 267E  
                     __ptext17 28D4                       __ptext50 27CC                       __ptext42 1B64  
                     __ptext34 17F4                       __ptext26 26B8                       __ptext18 260A  
                     __ptext43 284A                       __ptext35 16BE                       __ptext27 001C  
                     __ptext19 28F2                       __ptext52 221C                       __ptext44 1F12  
                     __ptext36 2440                       __ptext28 0940                       __ptext53 2762  
                     __ptext45 21A2                       __ptext37 23DA                       __ptext29 0DB8  
                     __ptext54 24EC                       __ptext46 272A                       __ptext38 2028  
                     __ptext55 29A8                       __ptext47 249C                       __ptext39 1436  
                     __ptext56 28B4                       __ptext48 299A                       __ptext57 27F8  
                     __ptext49 2894                       __ptext58 2910                       __powers_ 7F1C  
              PWM_init1@period 001A                PWM_init2@period 001C                       _contador 003F  
             __size_of_sprintf 0924                  __size_of_main 0098         ??_SendBlueToothCommand 0027  
                     _putcTxU1 298C                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 2028          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 221C  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 29A8                     _UART1_Init 297C  
                  _putSTRINGU1 1DEE           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
 __size_of_putcBluetoothString 006A                   ?__tdiv_to_l_ 0019                    _num_med_low 0044  
                     sprintf@c 00B7                       sprintf@f 008A               ___lldiv@quotient 0021  
           Lcd_Write_Integer@a 00B8             Lcd_Write_Integer@s 00BA          __end_of_getCNY70Value 1B64  
                   i2_Lcd_Port 27F8                   _USART_Status 003C                     _TMRO_USART 0008  
