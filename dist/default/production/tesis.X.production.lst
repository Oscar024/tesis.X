

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 25 14:02:19 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataBANK0
    73  00266C                     __pidataBANK0:
    74                           	opt stack 0
    75                           
    76                           ;initializer for BT_Init@F5669
    77  00266C  41                 	db	65
    78  00266D  54                 	db	84
    79  00266E  2B                 	db	43
    80  00266F  4E                 	db	78
    81  002670  41                 	db	65
    82  002671  4D                 	db	77
    83  002672  45                 	db	69
    84  002673  3D                 	db	61
    85  002674  72                 	db	114
    86  002675  6F                 	db	111
    87  002676  62                 	db	98
    88  002677  6F                 	db	111
    89  002678  74                 	db	116
    90  002679  0D                 	db	13
    91  00267A  0A                 	db	10
    92  00267B  00                 	db	0
    93  00267C  00                 	db	0
    94  00267D  00                 	db	0
    95                           
    96                           ;initializer for _countup
    97  00267E  0001               	dw	1
    98                           
    99                           	psect	mediumconst
   100  007ECA                     __pmediumconst:
   101                           	opt stack 0
   102  007ECA  00                 	db	0
   103  007ECB                     _dpowers:
   104                           	opt stack 0
   105  007ECB  0001               	dw	1
   106  007ECD  0000               	dw	0
   107  007ECF  000A               	dw	10
   108  007ED1  0000               	dw	0
   109  007ED3  0064               	dw	100
   110  007ED5  0000               	dw	0
   111  007ED7  03E8               	dw	1000
   112  007ED9  0000               	dw	0
   113  007EDB  2710               	dw	10000
   114  007EDD  0000               	dw	0
   115  007EDF  86A0               	dw	34464
   116  007EE1  0001               	dw	1
   117  007EE3  4240               	dw	16960
   118  007EE5  000F               	dw	15
   119  007EE7  9680               	dw	38528
   120  007EE9  0098               	dw	152
   121  007EEB  E100               	dw	57600
   122  007EED  05F5               	dw	1525
   123  007EEF  CA00               	dw	51712
   124  007EF1  3B9A               	dw	15258
   125  007EF3                     __end_of_dpowers:
   126                           	opt stack 0
   127  007EF3                     __npowers_:
   128                           	opt stack 0
   129  007EF3  00                 	db	0
   130  007EF4  80                 	db	128
   131  007EF5  3F                 	db	63
   132  007EF6  CD                 	db	205
   133  007EF7  CC                 	db	204
   134  007EF8  3D                 	db	61
   135  007EF9  D7                 	db	215
   136  007EFA  23                 	db	35
   137  007EFB  3C                 	db	60
   138  007EFC  12                 	db	18
   139  007EFD  83                 	db	131
   140  007EFE  3A                 	db	58
   141  007EFF  B7                 	db	183
   142  007F00  D1                 	db	209
   143  007F01  38                 	db	56
   144  007F02  C6                 	db	198
   145  007F03  27                 	db	39
   146  007F04  37                 	db	55
   147  007F05  38                 	db	56
   148  007F06  86                 	db	134
   149  007F07  35                 	db	53
   150  007F08  C0                 	db	192
   151  007F09  D6                 	db	214
   152  007F0A  33                 	db	51
   153  007F0B  CC                 	db	204
   154  007F0C  2B                 	db	43
   155  007F0D  32                 	db	50
   156  007F0E  70                 	db	112
   157  007F0F  89                 	db	137
   158  007F10  30                 	db	48
   159  007F11  E7                 	db	231
   160  007F12  DB                 	db	219
   161  007F13  2E                 	db	46
   162  007F14  E5                 	db	229
   163  007F15  3C                 	db	60
   164  007F16  1E                 	db	30
   165  007F17  42                 	db	66
   166  007F18  A2                 	db	162
   167  007F19  0D                 	db	13
   168  007F1A                     __end_of__npowers_:
   169                           	opt stack 0
   170  007F1A                     __powers_:
   171                           	opt stack 0
   172  007F1A  00                 	db	0
   173  007F1B  80                 	db	128
   174  007F1C  3F                 	db	63
   175  007F1D  00                 	db	0
   176  007F1E  20                 	db	32
   177  007F1F  41                 	db	65
   178  007F20  00                 	db	0
   179  007F21  C8                 	db	200
   180  007F22  42                 	db	66
   181  007F23  00                 	db	0
   182  007F24  7A                 	db	122
   183  007F25  44                 	db	68
   184  007F26  40                 	db	64
   185  007F27  1C                 	db	28
   186  007F28  46                 	db	70
   187  007F29  50                 	db	80
   188  007F2A  C3                 	db	195
   189  007F2B  47                 	db	71
   190  007F2C  24                 	db	36
   191  007F2D  74                 	db	116
   192  007F2E  49                 	db	73
   193  007F2F  97                 	db	151
   194  007F30  18                 	db	24
   195  007F31  4B                 	db	75
   196  007F32  BC                 	db	188
   197  007F33  BE                 	db	190
   198  007F34  4C                 	db	76
   199  007F35  6B                 	db	107
   200  007F36  6E                 	db	110
   201  007F37  4E                 	db	78
   202  007F38  03                 	db	3
   203  007F39  15                 	db	21
   204  007F3A  50                 	db	80
   205  007F3B  79                 	db	121
   206  007F3C  AD                 	db	173
   207  007F3D  60                 	db	96
   208  007F3E  F3                 	db	243
   209  007F3F  49                 	db	73
   210  007F40  71                 	db	113
   211  007F41                     __end_of__powers_:
   212                           	opt stack 0
   213  0000                     _ADCON1bits	set	4033
   214  0000                     _CCP1CON	set	4029
   215  0000                     _CCPR1L	set	4030
   216  0000                     _INTCON	set	4082
   217  0000                     _OSCCONbits	set	4051
   218  0000                     _PIE1	set	3997
   219  0000                     _PIE1bits	set	3997
   220  0000                     _PIR1bits	set	3998
   221  0000                     _PORTA	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTDbits	set	3971
   224  0000                     _PORTE	set	3972
   225  0000                     _PORTEbits	set	3972
   226  0000                     _PR2	set	4043
   227  0000                     _RCREG	set	4014
   228  0000                     _RCSTA	set	4011
   229  0000                     _RCSTAbits	set	4011
   230  0000                     _SPBRG	set	4015
   231  0000                     _SPBRGH	set	4016
   232  0000                     _T2CON	set	4042
   233  0000                     _T2CONbits	set	4042
   234  0000                     _TMR2	set	4044
   235  0000                     _TRISA	set	3986
   236  0000                     _TRISB	set	3987
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISCbits	set	3988
   239  0000                     _TRISD	set	3989
   240  0000                     _TRISE	set	3990
   241  0000                     _TXREG	set	4013
   242  0000                     _TXSTA	set	4012
   243  0000                     _TXSTAbits	set	4012
   244  007F41                     __stringdata:
   245                           	opt stack 0
   246  007F41                     STR_19:
   247  007F41  49                 	db	73	;'I'
   248  007F42  6E                 	db	110	;'n'
   249  007F43  74                 	db	116	;'t'
   250  007F44  65                 	db	101	;'e'
   251  007F45  72                 	db	114	;'r'
   252  007F46  72                 	db	114	;'r'
   253  007F47  75                 	db	117	;'u'
   254  007F48  70                 	db	112	;'p'
   255  007F49  74                 	db	116	;'t'
   256  007F4A  69                 	db	105	;'i'
   257  007F4B  6F                 	db	111	;'o'
   258  007F4C  6E                 	db	110	;'n'
   259  007F4D  20                 	db	32
   260  007F4E  54                 	db	84	;'T'
   261  007F4F  4D                 	db	77	;'M'
   262  007F50  52                 	db	82	;'R'
   263  007F51  32                 	db	50	;'2'
   264  007F52  00                 	db	0
   265  007F53                     STR_11:
   266  007F53  42                 	db	66	;'B'
   267  007F54  54                 	db	84	;'T'
   268  007F55  20                 	db	32
   269  007F56  49                 	db	73	;'I'
   270  007F57  4E                 	db	78	;'N'
   271  007F58  49                 	db	73	;'I'
   272  007F59  43                 	db	67	;'C'
   273  007F5A  49                 	db	73	;'I'
   274  007F5B  41                 	db	65	;'A'
   275  007F5C  4C                 	db	76	;'L'
   276  007F5D  49                 	db	73	;'I'
   277  007F5E  5A                 	db	90	;'Z'
   278  007F5F  41                 	db	65	;'A'
   279  007F60  44                 	db	68	;'D'
   280  007F61  4F                 	db	79	;'O'
   281  007F62  00                 	db	0
   282  007F63                     STR_2:
   283  007F63  41                 	db	65	;'A'
   284  007F64  54                 	db	84	;'T'
   285  007F65  2B                 	db	43
   286  007F66  50                 	db	80	;'P'
   287  007F67  53                 	db	83	;'S'
   288  007F68  57                 	db	87	;'W'
   289  007F69  44                 	db	68	;'D'
   290  007F6A  3D                 	db	61	;'='
   291  007F6B  30                 	db	48	;'0'
   292  007F6C  30                 	db	48	;'0'
   293  007F6D  30                 	db	48	;'0'
   294  007F6E  30                 	db	48	;'0'
   295  007F6F  0D                 	db	13
   296  007F70  0A                 	db	10
   297  007F71  00                 	db	0
   298  007F72  0A                 	db	10
   299  007F73  2B                 	db	43
   300  007F74  42                 	db	66	;'B'
   301  007F75  54                 	db	84	;'T'
   302  007F76  53                 	db	83	;'S'
   303  007F77  54                 	db	84	;'T'
   304  007F78  41                 	db	65	;'A'
   305  007F79  54                 	db	84	;'T'
   306  007F7A  45                 	db	69	;'E'
   307  007F7B  3A                 	db	58	;':'
   308  007F7C  31                 	db	49	;'1'
   309  007F7D  0D                 	db	13
   310  007F7E  0A                 	db	10
   311  007F7F  00                 	db	0
   312  007F80  0A                 	db	10
   313  007F81  2B                 	db	43
   314  007F82  42                 	db	66	;'B'
   315  007F83  54                 	db	84	;'T'
   316  007F84  53                 	db	83	;'S'
   317  007F85  54                 	db	84	;'T'
   318  007F86  41                 	db	65	;'A'
   319  007F87  54                 	db	84	;'T'
   320  007F88  45                 	db	69	;'E'
   321  007F89  3A                 	db	58	;':'
   322  007F8A  33                 	db	51	;'3'
   323  007F8B  0D                 	db	13
   324  007F8C  0A                 	db	10
   325  007F8D  00                 	db	0
   326  007F8E  0A                 	db	10
   327  007F8F  2B                 	db	43
   328  007F90  42                 	db	66	;'B'
   329  007F91  54                 	db	84	;'T'
   330  007F92  53                 	db	83	;'S'
   331  007F93  54                 	db	84	;'T'
   332  007F94  41                 	db	65	;'A'
   333  007F95  54                 	db	84	;'T'
   334  007F96  45                 	db	69	;'E'
   335  007F97  3A                 	db	58	;':'
   336  007F98  34                 	db	52	;'4'
   337  007F99  0D                 	db	13
   338  007F9A  0A                 	db	10
   339  007F9B  00                 	db	0
   340  007F9C  0A                 	db	10
   341  007F9D  43                 	db	67	;'C'
   342  007F9E  4F                 	db	79	;'O'
   343  007F9F  4E                 	db	78	;'N'
   344  007FA0  4E                 	db	78	;'N'
   345  007FA1  45                 	db	69	;'E'
   346  007FA2  43                 	db	67	;'C'
   347  007FA3  54                 	db	84	;'T'
   348  007FA4  3A                 	db	58	;':'
   349  007FA5  4F                 	db	79	;'O'
   350  007FA6  4B                 	db	75	;'K'
   351  007FA7  0D                 	db	13
   352  007FA8  0A                 	db	10
   353  007FA9  00                 	db	0
   354  007FAA                     STR_18:
   355  007FAA  49                 	db	73	;'I'
   356  007FAB  6E                 	db	110	;'n'
   357  007FAC  74                 	db	116	;'t'
   358  007FAD  65                 	db	101	;'e'
   359  007FAE  67                 	db	103	;'g'
   360  007FAF  65                 	db	101	;'e'
   361  007FB0  72                 	db	114	;'r'
   362  007FB1  20                 	db	32
   363  007FB2  3D                 	db	61	;'='
   364  007FB3  20                 	db	32
   365  007FB4  25                 	db	37
   366  007FB5  64                 	db	100	;'d'
   367  007FB6  00                 	db	0
   368  007FB7                     STR_1:
   369  007FB7  41                 	db	65	;'A'
   370  007FB8  54                 	db	84	;'T'
   371  007FB9  2B                 	db	43
   372  007FBA  52                 	db	82	;'R'
   373  007FBB  4F                 	db	79	;'O'
   374  007FBC  4C                 	db	76	;'L'
   375  007FBD  45                 	db	69	;'E'
   376  007FBE  3D                 	db	61	;'='
   377  007FBF  30                 	db	48	;'0'
   378  007FC0  0D                 	db	13
   379  007FC1  0A                 	db	10
   380  007FC2  00                 	db	0
   381  007FC3                     STR_21:
   382  007FC3  43                 	db	67	;'C'
   383  007FC4  4D                 	db	77	;'M'
   384  007FC5  44                 	db	68	;'D'
   385  007FC6  20                 	db	32
   386  007FC7  54                 	db	84	;'T'
   387  007FC8  41                 	db	65	;'A'
   388  007FC9  42                 	db	66	;'B'
   389  007FCA  4C                 	db	76	;'L'
   390  007FCB  45                 	db	69	;'E'
   391  007FCC  54                 	db	84	;'T'
   392  007FCD  00                 	db	0
   393  007FCE  46                 	db	70	;'F'
   394  007FCF  6C                 	db	108	;'l'
   395  007FD0  6F                 	db	111	;'o'
   396  007FD1  61                 	db	97	;'a'
   397  007FD2  74                 	db	116	;'t'
   398  007FD3  20                 	db	32
   399  007FD4  3D                 	db	61	;'='
   400  007FD5  20                 	db	32
   401  007FD6  25                 	db	37
   402  007FD7  66                 	db	102	;'f'
   403  007FD8  00                 	db	0
   404  007FD9                     STR_3:
   405  007FD9  41                 	db	65	;'A'
   406  007FDA  54                 	db	84	;'T'
   407  007FDB  2B                 	db	43
   408  007FDC  49                 	db	73	;'I'
   409  007FDD  4E                 	db	78	;'N'
   410  007FDE  51                 	db	81	;'Q'
   411  007FDF  0D                 	db	13
   412  007FE0  0A                 	db	10
   413  007FE1  00                 	db	0
   414  007FE2                     STR_16:
   415  007FE2  44                 	db	68	;'D'
   416  007FE3  65                 	db	101	;'e'
   417  007FE4  66                 	db	102	;'f'
   418  007FE5  61                 	db	97	;'a'
   419  007FE6  75                 	db	117	;'u'
   420  007FE7  6C                 	db	108	;'l'
   421  007FE8  74                 	db	116	;'t'
   422  007FE9  00                 	db	0
   423  007FEA                     STR_20:
   424  007FEA  49                 	db	73	;'I'
   425  007FEB  6E                 	db	110	;'n'
   426  007FEC  69                 	db	105	;'i'
   427  007FED  63                 	db	99	;'c'
   428  007FEE  69                 	db	105	;'i'
   429  007FEF  6F                 	db	111	;'o'
   430  007FF0  00                 	db	0
   431  007FF1                     STR_10:
   432  007FF1  49                 	db	73	;'I'
   433  007FF2  4E                 	db	78	;'N'
   434  007FF3  49                 	db	73	;'I'
   435  007FF4  43                 	db	67	;'C'
   436  007FF5  49                 	db	73	;'I'
   437  007FF6  4F                 	db	79	;'O'
   438  007FF7  00                 	db	0
   439  007FF8                     STR_12:
   440  007FF8  31                 	db	49	;'1'
   441  007FF9  00                 	db	0
   442  007FFA                     STR_14:
   443  007FFA  33                 	db	51	;'3'
   444  007FFB  00                 	db	0
   445  007FFC                     STR_15:
   446  007FFC  34                 	db	52	;'4'
   447  007FFD  00                 	db	0
   448  007FFE                     __end_of__stringdata:
   449                           	opt stack 0
   450                           
   451                           ; #config settings
   452  007FFE  00                 	db	0	; dummy byte at the end
   453  0000                     
   454                           	psect	cinit
   455  0022F2                     __pcinit:
   456                           	opt stack 0
   457  0022F2                     start_initialization:
   458                           	opt stack 0
   459  0022F2                     __initialization:
   460                           	opt stack 0
   461                           
   462                           ; Clear objects allocated to BANK1 (90 bytes)
   463  0022F2  EE01  F000         	lfsr	0,__pbssBANK1
   464  0022F6  0E5A               	movlw	90
   465  0022F8                     clear_0:
   466  0022F8  6AEE               	clrf	postinc0,c
   467  0022FA  06E8               	decf	wreg,f,c
   468  0022FC  E1FD               	bnz	clear_0
   469                           
   470                           ; Clear objects allocated to BANK0 (30 bytes)
   471  0022FE  EE00  F0CE         	lfsr	0,__pbssBANK0
   472  002302  0E1E               	movlw	30
   473  002304                     clear_1:
   474  002304  6AEE               	clrf	postinc0,c
   475  002306  06E8               	decf	wreg,f,c
   476  002308  E1FD               	bnz	clear_1
   477                           
   478                           ; Clear objects allocated to COMRAM (24 bytes)
   479  00230A  EE00  F030         	lfsr	0,__pbssCOMRAM
   480  00230E  0E18               	movlw	24
   481  002310                     clear_2:
   482  002310  6AEE               	clrf	postinc0,c
   483  002312  06E8               	decf	wreg,f,c
   484  002314  E1FD               	bnz	clear_2
   485                           
   486                           ; Initialize objects allocated to BANK0 (20 bytes)
   487                           ; load TBLPTR registers with __pidataBANK0
   488  002316  0E6C               	movlw	low __pidataBANK0
   489  002318  6EF6               	movwf	tblptrl,c
   490  00231A  0E26               	movlw	high __pidataBANK0
   491  00231C  6EF7               	movwf	tblptrh,c
   492  00231E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   493  002320  6EF8               	movwf	tblptru,c
   494  002322  EE00  F0EC         	lfsr	0,__pdataBANK0
   495  002326  EE10 F014          	lfsr	1,20
   496  00232A                     copy_data0:
   497  00232A  0009               	tblrd		*+
   498  00232C  CFF5 FFEE          	movff	tablat,postinc0
   499  002330  50E5               	movf	postdec1,w,c
   500  002332  50E1               	movf	fsr1l,w,c
   501  002334  E1FA               	bnz	copy_data0
   502  002336                     end_of_initialization:
   503                           	opt stack 0
   504  002336                     __end_of__initialization:
   505                           	opt stack 0
   506  002336  0E00               	movlw	low (__Lmediumconst shr (0+16))
   507  002338  6EF8               	movwf	tblptru,c
   508  00233A  0100               	movlb	0
   509  00233C  EFFA  F00D         	goto	_main	;jump to C main() function
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           postdec1	equ	0xFE5
   517                           fsr1l	equ	0xFE1
   518                           
   519                           	psect	bssCOMRAM
   520  000030                     __pbssCOMRAM:
   521                           	opt stack 0
   522  000030                     _CheckSum:
   523                           	opt stack 0
   524  000030                     	ds	1
   525  000031                     _ComanBFlag:
   526                           	opt stack 0
   527  000031                     	ds	1
   528  000032                     _ComanTFlag:
   529                           	opt stack 0
   530  000032                     	ds	1
   531  000033                     _Comando:
   532                           	opt stack 0
   533  000033                     	ds	1
   534  000034                     _ComandoTablet:
   535                           	opt stack 0
   536  000034                     	ds	1
   537  000035                     _EntTrama:
   538                           	opt stack 0
   539  000035                     	ds	1
   540  000036                     _FinComandB:
   541                           	opt stack 0
   542  000036                     	ds	1
   543  000037                     _FinComandT:
   544                           	opt stack 0
   545  000037                     	ds	1
   546  000038                     _InicioComando:
   547                           	opt stack 0
   548  000038                     	ds	1
   549  000039                     _RXComandoTB:
   550                           	opt stack 0
   551  000039                     	ds	1
   552  00003A                     _SBUSART:
   553                           	opt stack 0
   554  00003A                     	ds	1
   555  00003B                     _Timer1:
   556                           	opt stack 0
   557  00003B                     	ds	1
   558  00003C                     _USART_Status:
   559                           	opt stack 0
   560  00003C                     	ds	1
   561  00003D                     _cad:
   562                           	opt stack 0
   563  00003D                     	ds	1
   564  00003E                     _cleanBfer:
   565                           	opt stack 0
   566  00003E                     	ds	1
   567  00003F                     _contador:
   568                           	opt stack 0
   569  00003F                     	ds	1
   570  000040                     _contador2:
   571                           	opt stack 0
   572  000040                     	ds	1
   573  000041                     _j:
   574                           	opt stack 0
   575  000041                     	ds	1
   576  000042                     _lenght:
   577                           	opt stack 0
   578  000042                     	ds	1
   579  000043                     _num_med_hi:
   580                           	opt stack 0
   581  000043                     	ds	1
   582  000044                     _num_med_low:
   583                           	opt stack 0
   584  000044                     	ds	1
   585  000045                     _num_med_medium:
   586                           	opt stack 0
   587  000045                     	ds	1
   588  000046                     _packet:
   589                           	opt stack 0
   590  000046                     	ds	1
   591  000047                     _Timer2Config:
   592                           	opt stack 0
   593  000047                     	ds	1
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	bssBANK0
   604  0000CE                     __pbssBANK0:
   605                           	opt stack 0
   606  0000CE                     _DutyCycle:
   607                           	opt stack 0
   608  0000CE                     	ds	2
   609  0000D0                     _Med_lsb:
   610                           	opt stack 0
   611  0000D0                     	ds	2
   612  0000D2                     _Med_msb:
   613                           	opt stack 0
   614  0000D2                     	ds	2
   615  0000D4                     _TamanhoTrama:
   616                           	opt stack 0
   617  0000D4                     	ds	2
   618  0000D6                     _i:
   619                           	opt stack 0
   620  0000D6                     	ds	2
   621  0000D8                     _comando:
   622                           	opt stack 0
   623  0000D8                     	ds	20
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	dataBANK0
   634  0000EC                     __pdataBANK0:
   635                           	opt stack 0
   636  0000EC                     BT_Init@F5669:
   637                           	opt stack 0
   638  0000EC                     	ds	18
   639  0000FE                     _countup:
   640                           	opt stack 0
   641  0000FE                     	ds	2
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           postdec1	equ	0xFE5
   649                           fsr1l	equ	0xFE1
   650                           
   651                           	psect	bssBANK1
   652  000100                     __pbssBANK1:
   653                           	opt stack 0
   654  000100                     _TramaTablet:
   655                           	opt stack 0
   656  000100                     	ds	20
   657  000114                     _array:
   658                           	opt stack 0
   659  000114                     	ds	20
   660  000128                     _BluetoothDato:
   661                           	opt stack 0
   662  000128                     	ds	50
   663                           tblptru	equ	0xFF8
   664                           tblptrh	equ	0xFF7
   665                           tblptrl	equ	0xFF6
   666                           tablat	equ	0xFF5
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           postdec1	equ	0xFE5
   670                           fsr1l	equ	0xFE1
   671                           
   672                           	psect	cstackBANK1
   673  00015A                     __pcstackBANK1:
   674                           	opt stack 0
   675  00015A                     putcBluetoothInt@s:
   676                           	opt stack 0
   677                           
   678                           ; 20 bytes @ 0x0
   679  00015A                     	ds	20
   680  00016E                     putcBluetoothInt@i:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x14
   684  00016E                     	ds	2
   685  000170                     Comando_Tablet@sum:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x16
   689  000170                     	ds	2
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           
   699                           	psect	cstackBANK0
   700  000060                     __pcstackBANK0:
   701                           	opt stack 0
   702  000060                     ?___ftmul:
   703                           	opt stack 0
   704  000060                     ___ftmul@f1:
   705                           	opt stack 0
   706  000060                     BT_Init@nameBT:
   707                           	opt stack 0
   708                           
   709                           ; 18 bytes @ 0x0
   710  000060                     	ds	3
   711  000063                     ___ftmul@f2:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x3
   715  000063                     	ds	3
   716  000066                     ___ftmul@exp:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x6
   720  000066                     	ds	1
   721  000067                     ___ftmul@f3_as_product:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x7
   725  000067                     	ds	3
   726  00006A                     ___ftmul@cntr:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0xA
   730  00006A                     	ds	1
   731  00006B                     ___ftmul@sign:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0xB
   735  00006B                     	ds	1
   736  00006C                     ?_fround:
   737                           	opt stack 0
   738  00006C                     ?_scale:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0xC
   742  00006C                     	ds	3
   743  00006F                     _fround$2149:
   744                           	opt stack 0
   745  00006F                     _scale$2150:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0xF
   749  00006F                     	ds	3
   750  000072                     scale@scl:
   751                           	opt stack 0
   752  000072                     _fround$2148:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x12
   756  000072                     	ds	1
   757  000073                     ?___fttol:
   758                           	opt stack 0
   759  000073                     ___fttol@f1:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x13
   763  000073                     	ds	2
   764  000075                     fround@prec:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x15
   768  000075                     	ds	1
   769  000076                     ?___ftadd:
   770                           	opt stack 0
   771  000076                     ___ftadd@f1:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x16
   775  000076                     	ds	1
   776  000077                     ??___fttol:
   777                           
   778                           ; 0 bytes @ 0x17
   779  000077                     	ds	2
   780  000079                     ___ftadd@f2:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x19
   784  000079                     	ds	3
   785  00007C                     ??___ftadd:
   786  00007C                     ___fttol@sign1:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x1C
   790  00007C                     	ds	1
   791  00007D                     ___fttol@lval:
   792                           	opt stack 0
   793                           
   794                           ; 4 bytes @ 0x1D
   795  00007D                     	ds	2
   796  00007F                     ___ftadd@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x1F
   800  00007F                     	ds	1
   801  000080                     ___ftadd@exp2:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x20
   805  000080                     	ds	1
   806  000081                     ___ftadd@exp1:
   807                           	opt stack 0
   808  000081                     ___fttol@exp1:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x21
   812  000081                     	ds	1
   813  000082                     ??_PWM_DutyCycle1:
   814  000082                     ?___ftsub:
   815                           	opt stack 0
   816  000082                     ___ftsub@f1:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x22
   820  000082                     	ds	3
   821  000085                     ___ftsub@f2:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x25
   825  000085                     	ds	1
   826  000086                     PWM_DutyCycle1@DutyCycle:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x26
   830  000086                     	ds	2
   831  000088                     ?_sprintf:
   832                           	opt stack 0
   833  000088                     PWM_DutyCycle1@percentageDuty:
   834                           	opt stack 0
   835  000088                     sprintf@sp:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x28
   839  000088                     	ds	1
   840  000089                     PWM_DutyCycle1@DC:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x29
   844  000089                     	ds	1
   845  00008A                     sprintf@f:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x2A
   849  00008A                     	ds	5
   850  00008F                     ??_sprintf:
   851                           
   852                           ; 0 bytes @ 0x2F
   853  00008F                     	ds	6
   854  000095                     _sprintf$2151:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x35
   858  000095                     	ds	3
   859  000098                     _sprintf$1210:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x38
   863  000098                     	ds	4
   864  00009C                     sprintf@vd:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x3C
   868  00009C                     	ds	4
   869  0000A0                     sprintf@vd_1212:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x40
   873  0000A0                     	ds	4
   874  0000A4                     sprintf@ap:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x44
   878  0000A4                     	ds	2
   879  0000A6                     sprintf@flag:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x46
   883  0000A6                     	ds	2
   884  0000A8                     sprintf@integ:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x48
   888  0000A8                     	ds	3
   889  0000AB                     sprintf@prec:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x4B
   893  0000AB                     	ds	2
   894  0000AD                     sprintf@_val:
   895                           	opt stack 0
   896                           
   897                           ; 5 bytes @ 0x4D
   898  0000AD                     	ds	5
   899  0000B2                     sprintf@exp:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x52
   903  0000B2                     	ds	2
   904  0000B4                     sprintf@fval:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x54
   908  0000B4                     	ds	3
   909  0000B7                     sprintf@c:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x57
   913  0000B7                     	ds	1
   914  0000B8                     putcBluetoothInt@a:
   915                           	opt stack 0
   916  0000B8                     Lcd_Write_Integer@a:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x58
   920  0000B8                     	ds	2
   921  0000BA                     Lcd_Write_Integer@s:
   922                           	opt stack 0
   923                           
   924                           ; 20 bytes @ 0x5A
   925  0000BA                     	ds	20
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           
   935                           	psect	cstackCOMRAM
   936  000001                     __pcstackCOMRAM:
   937                           	opt stack 0
   938  000001                     ReadUSART@data:
   939                           	opt stack 0
   940  000001                     i2Lcd_Port@a:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x0
   944  000001                     	ds	1
   945  000002                     ??i2_Lcd_Cmd:
   946  000002                     i2Lcd_Write_Char@temp:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x1
   950  000002                     	ds	1
   951  000003                     i2Lcd_Cmd@a:
   952                           	opt stack 0
   953  000003                     i2Lcd_Write_Char@y:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x2
   957  000003                     	ds	1
   958  000004                     i2Lcd_Set_Cursor@b:
   959                           	opt stack 0
   960  000004                     i2Lcd_Write_Char@a:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x3
   964  000004                     	ds	1
   965  000005                     i2Lcd_Set_Cursor@a:
   966                           	opt stack 0
   967  000005                     i2Lcd_Write_String@a:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x4
   971  000005                     	ds	1
   972  000006                     i2Lcd_Set_Cursor@z:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x5
   976  000006                     	ds	1
   977  000007                     ??i2_Lcd_Write_String:
   978  000007                     i2Lcd_Set_Cursor@y:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x6
   982  000007                     	ds	1
   983  000008                     i2Lcd_Set_Cursor@temp:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x7
   987  000008                     	ds	1
   988  000009                     i2Lcd_Write_String@i:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x8
   992  000009                     	ds	2
   993  00000B                     ??_TMRO_USART:
   994                           
   995                           ; 0 bytes @ 0xA
   996  00000B                     	ds	14
   997  000019                     ?___awmod:
   998                           	opt stack 0
   999  000019                     ?___ftpack:
  1000                           	opt stack 0
  1001  000019                     ?___ftneg:
  1002                           	opt stack 0
  1003  000019                     ?__tdiv_to_l_:
  1004                           	opt stack 0
  1005  000019                     ?__div_to_l_:
  1006                           	opt stack 0
  1007  000019                     ?___lldiv:
  1008                           	opt stack 0
  1009  000019                     Lcd_Port@a:
  1010                           	opt stack 0
  1011  000019                     OpenPWM1@period:
  1012                           	opt stack 0
  1013  000019                     WriteUSART@data:
  1014                           	opt stack 0
  1015  000019                     clrBufferUSART@i:
  1016                           	opt stack 0
  1017  000019                     Pause_ms@x:
  1018                           	opt stack 0
  1019  000019                     SetDCPWM1@dutycycle:
  1020                           	opt stack 0
  1021  000019                     OpenUSART@spbrg:
  1022                           	opt stack 0
  1023  000019                     ___awmod@dividend:
  1024                           	opt stack 0
  1025  000019                     __div_to_l_@f1:
  1026                           	opt stack 0
  1027  000019                     ___ftpack@arg:
  1028                           	opt stack 0
  1029  000019                     __tdiv_to_l_@f1:
  1030                           	opt stack 0
  1031  000019                     ___ftge@ff1:
  1032                           	opt stack 0
  1033  000019                     ___ftneg@f1:
  1034                           	opt stack 0
  1035  000019                     ___lldiv@dividend:
  1036                           	opt stack 0
  1037                           
  1038                           ; 4 bytes @ 0x18
  1039  000019                     	ds	1
  1040  00001A                     ??_Lcd_Cmd:
  1041  00001A                     putcTxU1@character:
  1042                           	opt stack 0
  1043  00001A                     Lcd_Write_Char@temp:
  1044                           	opt stack 0
  1045  00001A                     PWM_init1@period:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x19
  1049  00001A                     	ds	1
  1050  00001B                     ??_OpenUSART:
  1051  00001B                     ??_SetDCPWM1:
  1052  00001B                     ??_Pause_ms:
  1053  00001B                     Lcd_Cmd@a:
  1054                           	opt stack 0
  1055  00001B                     Lcd_Write_Char@y:
  1056                           	opt stack 0
  1057  00001B                     putSTRINGU1@dato:
  1058                           	opt stack 0
  1059  00001B                     ___awmod@divisor:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x1A
  1063  00001B                     	ds	1
  1064  00001C                     ??_Lcd_Init:
  1065  00001C                     Lcd_Set_Cursor@b:
  1066                           	opt stack 0
  1067  00001C                     Lcd_Write_Char@a:
  1068                           	opt stack 0
  1069  00001C                     ___ftpack@exp:
  1070                           	opt stack 0
  1071  00001C                     Pause_ms@i:
  1072                           	opt stack 0
  1073  00001C                     __div_to_l_@f2:
  1074                           	opt stack 0
  1075  00001C                     __tdiv_to_l_@f2:
  1076                           	opt stack 0
  1077  00001C                     ___ftge@ff2:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x1B
  1081  00001C                     	ds	1
  1082  00001D                     Lcd_Set_Cursor@a:
  1083                           	opt stack 0
  1084  00001D                     ___awmod@counter:
  1085                           	opt stack 0
  1086  00001D                     ___ftpack@sign:
  1087                           	opt stack 0
  1088  00001D                     putSTRINGU1@total:
  1089                           	opt stack 0
  1090  00001D                     Lcd_Write_String@a:
  1091                           	opt stack 0
  1092  00001D                     SetDCPWM1@DCycle:
  1093                           	opt stack 0
  1094  00001D                     ___lldiv@divisor:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x1C
  1098  00001D                     	ds	1
  1099  00001E                     ??___ftpack:
  1100  00001E                     Pause_seg@x:
  1101                           	opt stack 0
  1102  00001E                     Lcd_Set_Cursor@z:
  1103                           	opt stack 0
  1104  00001E                     OpenUSART@config:
  1105                           	opt stack 0
  1106  00001E                     ___awmod@sign:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x1D
  1110  00001E                     	ds	1
  1111  00001F                     ??_putSTRINGU1:
  1112  00001F                     ??_Lcd_Write_String:
  1113  00001F                     ??__tdiv_to_l_:
  1114  00001F                     ??__div_to_l_:
  1115  00001F                     ??___ftge:
  1116  00001F                     ?___awdiv:
  1117                           	opt stack 0
  1118  00001F                     Pause_seg@i:
  1119                           	opt stack 0
  1120  00001F                     UART1_Init@bdr:
  1121                           	opt stack 0
  1122  00001F                     Lcd_Set_Cursor@y:
  1123                           	opt stack 0
  1124  00001F                     ___awdiv@dividend:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x1E
  1128  00001F                     	ds	1
  1129  000020                     Lcd_Set_Cursor@temp:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x1F
  1133  000020                     	ds	1
  1134  000021                     ?___lbtoft:
  1135                           	opt stack 0
  1136  000021                     ?___lltoft:
  1137                           	opt stack 0
  1138  000021                     putSTRINGU1@last:
  1139                           	opt stack 0
  1140  000021                     Lcd_Write_String@i:
  1141                           	opt stack 0
  1142  000021                     ___awdiv@divisor:
  1143                           	opt stack 0
  1144  000021                     ___lldiv@quotient:
  1145                           	opt stack 0
  1146  000021                     ___lltoft@c:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x20
  1150  000021                     	ds	1
  1151  000022                     putSTRINGU1@cont:
  1152                           	opt stack 0
  1153  000022                     __tdiv_to_l_@quot:
  1154                           	opt stack 0
  1155                           
  1156                           ; 4 bytes @ 0x21
  1157  000022                     	ds	1
  1158  000023                     ___awdiv@counter:
  1159                           	opt stack 0
  1160  000023                     SendBlueToothCommand@command:
  1161                           	opt stack 0
  1162  000023                     __div_to_l_@quot:
  1163                           	opt stack 0
  1164                           
  1165                           ; 4 bytes @ 0x22
  1166  000023                     	ds	1
  1167  000024                     ___awdiv@sign:
  1168                           	opt stack 0
  1169  000024                     ___lbtoft@c:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x23
  1173  000024                     	ds	1
  1174  000025                     ??___lltoft:
  1175  000025                     ___lldiv@counter:
  1176                           	opt stack 0
  1177  000025                     SendBlueToothCommand@total:
  1178                           	opt stack 0
  1179  000025                     ___awdiv@quotient:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x24
  1183  000025                     	ds	1
  1184  000026                     ?___llmod:
  1185                           	opt stack 0
  1186  000026                     __tdiv_to_l_@cntr:
  1187                           	opt stack 0
  1188  000026                     ___llmod@dividend:
  1189                           	opt stack 0
  1190                           
  1191                           ; 4 bytes @ 0x25
  1192  000026                     	ds	1
  1193  000027                     ??_Inicializa_Driveby:
  1194  000027                     ?___wmul:
  1195                           	opt stack 0
  1196  000027                     __div_to_l_@cntr:
  1197                           	opt stack 0
  1198  000027                     __tdiv_to_l_@exp1:
  1199                           	opt stack 0
  1200  000027                     ___wmul@multiplier:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x26
  1204  000027                     	ds	1
  1205  000028                     __div_to_l_@exp1:
  1206                           	opt stack 0
  1207  000028                     Inicializa_Driveby@i:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x27
  1211  000028                     	ds	1
  1212  000029                     ___lltoft@exp:
  1213                           	opt stack 0
  1214  000029                     ___wmul@multiplicand:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x28
  1218  000029                     	ds	1
  1219  00002A                     ___llmod@divisor:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x29
  1223  00002A                     	ds	1
  1224  00002B                     ___wmul@product:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x2A
  1228  00002B                     	ds	2
  1229  00002D                     ??___ftmul:
  1230                           
  1231                           ; 0 bytes @ 0x2C
  1232  00002D                     	ds	1
  1233  00002E                     ___llmod@counter:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x2D
  1237  00002E                     	ds	2
  1238  000030                     tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           
  1247                           ; 0 bytes @ 0x2F
  1248 ;;
  1249 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1250 ;;
  1251 ;; *************** function _main *****************
  1252 ;; Defined at:
  1253 ;;		line 139 in file "robot.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2  358[COMRAM] int 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels required when called:   10
  1273 ;; This function calls:
  1274 ;;		_Comando_Tablet
  1275 ;;		_Inicializa_Driveby
  1276 ;;		_Lcd_Clear
  1277 ;;		_Lcd_Init
  1278 ;;		_Lcd_Set_Cursor
  1279 ;;		_Lcd_Write_String
  1280 ;;		_UART1_Init
  1281 ;;		_clrBufferUSART
  1282 ;; This function is called by:
  1283 ;;		Startup code after reset
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text0
  1288  001BF4                     __ptext0:
  1289                           	opt stack 0
  1290  001BF4                     _main:
  1291                           	opt stack 21
  1292                           
  1293                           ;robot.c: 141: INTCON =0X00;
  1294                           
  1295                           ;incstack = 0
  1296  001BF4  0E00               	movlw	0
  1297  001BF6  6EF2               	movwf	intcon,c	;volatile
  1298                           
  1299                           ;robot.c: 142: TRISD = 0x00;
  1300  001BF8  0E00               	movlw	0
  1301  001BFA  6E95               	movwf	3989,c	;volatile
  1302                           
  1303                           ;robot.c: 143: TRISE = 0x00;
  1304  001BFC  0E00               	movlw	0
  1305  001BFE  6E96               	movwf	3990,c	;volatile
  1306                           
  1307                           ;robot.c: 144: PORTEbits.RE1=0;
  1308  001C00  9284               	bcf	3972,1,c	;volatile
  1309                           
  1310                           ;robot.c: 145: ADCON1bits.PCFG=0b1111;
  1311  001C02  80C1               	bsf	4033,0,c	;volatile
  1312  001C04  82C1               	bsf	4033,1,c	;volatile
  1313  001C06  84C1               	bsf	4033,2,c	;volatile
  1314  001C08  86C1               	bsf	4033,3,c	;volatile
  1315                           
  1316                           ;robot.c: 146: Lcd_Init();
  1317  001C0A  EC5B  F010         	call	_Lcd_Init	;wreg free
  1318                           
  1319                           ;robot.c: 147: Lcd_Clear();
  1320  001C0E  EC61  F013         	call	_Lcd_Clear	;wreg free
  1321                           
  1322                           ;robot.c: 148: Lcd_Set_Cursor(1,1);
  1323  001C12  0E01               	movlw	1
  1324  001C14  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1325  001C16  0E01               	movlw	1
  1326  001C18  EC29  F011         	call	_Lcd_Set_Cursor
  1327                           
  1328                           ;robot.c: 149: Lcd_Write_String("Inicio");
  1329  001C1C  0E7F               	movlw	high STR_20
  1330  001C1E  6E1E               	movwf	Lcd_Write_String@a+1,c
  1331  001C20  0EEA               	movlw	low STR_20
  1332  001C22  6E1D               	movwf	Lcd_Write_String@a,c
  1333  001C24  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  1334                           
  1335                           ;robot.c: 150: Inicializa_Driveby();
  1336  001C28  ECA4  F00C         	call	_Inicializa_Driveby	;wreg free
  1337  001C2C                     l5246:
  1338                           
  1339                           ;robot.c: 154: {
  1340                           ;robot.c: 157: if (cleanBfer == 1) {
  1341  001C2C  043E               	decf	_cleanBfer,w,c
  1342  001C2E  A4D8               	btfss	status,2,c
  1343  001C30  D004               	goto	l5252
  1344                           
  1345                           ;robot.c: 158: clrBufferUSART();
  1346  001C32  EC1C  F012         	call	_clrBufferUSART	;wreg free
  1347                           
  1348                           ;robot.c: 159: cleanBfer = 0;
  1349  001C36  0E00               	movlw	0
  1350  001C38  6E3E               	movwf	_cleanBfer,c
  1351  001C3A                     l5252:
  1352                           
  1353                           ;robot.c: 160: }
  1354                           ;robot.c: 161: if (FinComandT == 1) {
  1355  001C3A  0437               	decf	_FinComandT,w,c
  1356  001C3C  A4D8               	btfss	status,2,c
  1357  001C3E  D01A               	goto	l5272
  1358                           
  1359                           ;robot.c: 162: Lcd_Clear();
  1360  001C40  EC61  F013         	call	_Lcd_Clear	;wreg free
  1361                           
  1362                           ;robot.c: 163: Lcd_Set_Cursor(2,1);
  1363  001C44  0E01               	movlw	1
  1364  001C46  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1365  001C48  0E02               	movlw	2
  1366  001C4A  EC29  F011         	call	_Lcd_Set_Cursor
  1367                           
  1368                           ;robot.c: 164: Lcd_Write_String("CMD TABLET");
  1369  001C4E  0E7F               	movlw	high STR_21
  1370  001C50  6E1E               	movwf	Lcd_Write_String@a+1,c
  1371  001C52  0EC3               	movlw	low STR_21
  1372  001C54  6E1D               	movwf	Lcd_Write_String@a,c
  1373  001C56  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  1374                           
  1375                           ;robot.c: 165: FinComandT = 0;
  1376  001C5A  0E00               	movlw	0
  1377  001C5C  6E37               	movwf	_FinComandT,c
  1378                           
  1379                           ;robot.c: 166: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1380  001C5E  0E4F               	movlw	79
  1381  001C60  16AB               	andwf	4011,f,c	;volatile
  1382  001C62  9AAC               	bcf	4012,5,c	;volatile
  1383  001C64  0ECF               	movlw	207
  1384  001C66  169D               	andwf	3997,f,c	;volatile
  1385                           
  1386                           ;robot.c: 167: Comando_Tablet();
  1387  001C68  EC14  F00B         	call	_Comando_Tablet	;wreg free
  1388                           
  1389                           ;robot.c: 168: UART1_Init(51);
  1390  001C6C  0E33               	movlw	51
  1391  001C6E  EC52  F013         	call	_UART1_Init
  1392                           
  1393                           ;robot.c: 170: }
  1394  001C72  D7DC               	goto	l5246
  1395  001C74                     l5272:
  1396                           
  1397                           ;robot.c: 171: else if (FinComandB == 1) {
  1398  001C74  0436               	decf	_FinComandB,w,c
  1399  001C76  A4D8               	btfss	status,2,c
  1400  001C78  D7D9               	goto	l5246
  1401                           
  1402                           ;robot.c: 176: FinComandB = 0;
  1403  001C7A  0E00               	movlw	0
  1404  001C7C  6E36               	movwf	_FinComandB,c
  1405                           
  1406                           ;robot.c: 177: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1407  001C7E  0E4F               	movlw	79
  1408  001C80  16AB               	andwf	4011,f,c	;volatile
  1409  001C82  9AAC               	bcf	4012,5,c	;volatile
  1410  001C84  0ECF               	movlw	207
  1411  001C86  169D               	andwf	3997,f,c	;volatile
  1412  001C88  D7D1               	goto	l5246
  1413  001C8A                     __end_of_main:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function _Lcd_Init *****************
  1427 ;; Defined at:
  1428 ;;		line 57 in file "lcd.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;		None               void
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1442 ;;      Params:         0       0       0       0       0       0       0       0       0
  1443 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1444 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1445 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1446 ;;Total ram usage:        1 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    6
  1449 ;; This function calls:
  1450 ;;		_Lcd_Cmd
  1451 ;;		_Lcd_Port
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text1
  1458  0020B6                     __ptext1:
  1459                           	opt stack 0
  1460  0020B6                     _Lcd_Init:
  1461                           	opt stack 24
  1462                           
  1463                           ;lcd.c: 58: Lcd_Port(0x00);
  1464                           
  1465                           ;incstack = 0
  1466  0020B6  0E00               	movlw	0
  1467  0020B8  EC89  F012         	call	_Lcd_Port
  1468                           
  1469                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1470  0020BC  0E1A               	movlw	26
  1471  0020BE  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1472  0020C0  0EF8               	movlw	248
  1473  0020C2                     u5457:
  1474  0020C2  2EE8               	decfsz	wreg,f,c
  1475  0020C4  D7FE               	goto	u5457
  1476  0020C6  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1477  0020C8  D7FC               	goto	u5457
  1478  0020CA  D000               	nop2	
  1479                           
  1480                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1481  0020CC  0E03               	movlw	3
  1482  0020CE  ECED  F012         	call	_Lcd_Cmd
  1483                           
  1484                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1485  0020D2  0E07               	movlw	7
  1486  0020D4  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1487  0020D6  0E7D               	movlw	125
  1488  0020D8                     u5467:
  1489  0020D8  2EE8               	decfsz	wreg,f,c
  1490  0020DA  D7FE               	goto	u5467
  1491  0020DC  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1492  0020DE  D7FC               	goto	u5467
  1493  0020E0  F000               	nop	
  1494                           
  1495                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1496  0020E2  0E03               	movlw	3
  1497  0020E4  ECED  F012         	call	_Lcd_Cmd
  1498                           
  1499                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1500  0020E8  0E0F               	movlw	15
  1501  0020EA  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1502  0020EC  0E48               	movlw	72
  1503  0020EE                     u5477:
  1504  0020EE  2EE8               	decfsz	wreg,f,c
  1505  0020F0  D7FE               	goto	u5477
  1506  0020F2  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1507  0020F4  D7FC               	goto	u5477
  1508                           
  1509                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1510  0020F6  0E03               	movlw	3
  1511  0020F8  ECED  F012         	call	_Lcd_Cmd
  1512                           
  1513                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1514  0020FC  0E02               	movlw	2
  1515  0020FE  ECED  F012         	call	_Lcd_Cmd
  1516                           
  1517                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1518  002102  0E02               	movlw	2
  1519  002104  ECED  F012         	call	_Lcd_Cmd
  1520                           
  1521                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1522  002108  0E08               	movlw	8
  1523  00210A  ECED  F012         	call	_Lcd_Cmd
  1524                           
  1525                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1526  00210E  0E00               	movlw	0
  1527  002110  ECED  F012         	call	_Lcd_Cmd
  1528                           
  1529                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1530  002114  0E0C               	movlw	12
  1531  002116  ECED  F012         	call	_Lcd_Cmd
  1532                           
  1533                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1534  00211A  0E00               	movlw	0
  1535  00211C  ECED  F012         	call	_Lcd_Cmd
  1536                           
  1537                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1538  002120  0E06               	movlw	6
  1539  002122  ECED  F012         	call	_Lcd_Cmd
  1540  002126  0012               	return	
  1541  002128                     __end_of_Lcd_Init:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           intcon	equ	0xFF2
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1l	equ	0xFE1
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _Inicializa_Driveby *****************
  1555 ;; Defined at:
  1556 ;;		line 59 in file "Funciones_Db.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  i               2   39[COMRAM] int 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1570 ;;      Params:         0       0       0       0       0       0       0       0       0
  1571 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1572 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1573 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1574 ;;Total ram usage:        3 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    9
  1577 ;; This function calls:
  1578 ;;		_BT_Init
  1579 ;;		_Lcd_Clear
  1580 ;;		_Lcd_Set_Cursor
  1581 ;;		_Lcd_Write_String
  1582 ;;		_Pause_seg
  1583 ;;		_clrBufferUSART
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text2
  1590  001948                     __ptext2:
  1591                           	opt stack 0
  1592  001948                     _Inicializa_Driveby:
  1593                           	opt stack 21
  1594                           
  1595                           ;Funciones_Db.c: 60: TRISA = TRISB = TRISC = TRISD = 0;
  1596                           
  1597                           ;incstack = 0
  1598  001948  0E00               	movlw	0
  1599  00194A  6E95               	movwf	3989,c	;volatile
  1600  00194C  CF95 FF94          	movff	3989,3988	;volatile
  1601  001950  CF94 FF93          	movff	3988,3987	;volatile
  1602  001954  CF93 FF92          	movff	3987,3986	;volatile
  1603                           
  1604                           ;Funciones_Db.c: 61: INTCON = 0b11000000;
  1605  001958  0EC0               	movlw	192
  1606  00195A  6EF2               	movwf	intcon,c	;volatile
  1607                           
  1608                           ;Funciones_Db.c: 64: int i = 0;
  1609  00195C  0E00               	movlw	0
  1610  00195E  6E29               	movwf	Inicializa_Driveby@i+1,c
  1611  001960  0E00               	movlw	0
  1612  001962  6E28               	movwf	Inicializa_Driveby@i,c
  1613                           
  1614                           ;Funciones_Db.c: 65: _delay((unsigned long)((40)*(4000000/4000.0)));
  1615  001964  0E34               	movlw	52
  1616  001966  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1617  001968  0EF2               	movlw	242
  1618  00196A                     u5487:
  1619  00196A  2EE8               	decfsz	wreg,f,c
  1620  00196C  D7FE               	goto	u5487
  1621  00196E  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1622  001970  D7FC               	goto	u5487
  1623                           
  1624                           ;Funciones_Db.c: 66: OSCCONbits.IRCF = 0b111;
  1625  001972  88D3               	bsf	4051,4,c	;volatile
  1626  001974  8AD3               	bsf	4051,5,c	;volatile
  1627  001976  8CD3               	bsf	4051,6,c	;volatile
  1628                           
  1629                           ;Funciones_Db.c: 71: TRISA = 0;
  1630  001978  0E00               	movlw	0
  1631  00197A  6E92               	movwf	3986,c	;volatile
  1632                           
  1633                           ;Funciones_Db.c: 72: PORTA = 0;
  1634  00197C  0E00               	movlw	0
  1635  00197E  6E80               	movwf	3968,c	;volatile
  1636                           
  1637                           ;Funciones_Db.c: 73: TRISCbits.TRISC7 = 1;
  1638  001980  8E94               	bsf	3988,7,c	;volatile
  1639                           
  1640                           ;Funciones_Db.c: 74: TRISCbits.TRISC6 = 0;
  1641  001982  9C94               	bcf	3988,6,c	;volatile
  1642                           
  1643                           ;Funciones_Db.c: 75: for (i = 1; i <= 50; i++)
  1644  001984  0E00               	movlw	0
  1645  001986  6E29               	movwf	Inicializa_Driveby@i+1,c
  1646  001988  0E01               	movlw	1
  1647  00198A  6E28               	movwf	Inicializa_Driveby@i,c
  1648  00198C  5029               	movf	Inicializa_Driveby@i+1,w,c
  1649  00198E  0A80               	xorlw	128
  1650  001990  0F80               	addlw	-128
  1651  001992  0E33               	movlw	51
  1652  001994  B4D8               	btfsc	status,2,c
  1653  001996  5C28               	subwf	Inicializa_Driveby@i,w,c
  1654  001998  B0D8               	btfsc	status,0,c
  1655  00199A  D00B               	goto	l5074
  1656                           
  1657                           ;Funciones_Db.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
  1658  00199C  0E1A               	movlw	26
  1659  00199E  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1660  0019A0  0EF8               	movlw	248
  1661  0019A2                     u5497:
  1662  0019A2  2EE8               	decfsz	wreg,f,c
  1663  0019A4  D7FE               	goto	u5497
  1664  0019A6  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1665  0019A8  D7FC               	goto	u5497
  1666  0019AA  D000               	nop2	
  1667  0019AC  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1668  0019AE  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1669  0019B0  D7ED               	goto	L1
  1670  0019B2                     l5074:
  1671                           
  1672                           ;Funciones_Db.c: 77: PORTE = 0;
  1673  0019B2  0E00               	movlw	0
  1674  0019B4  6E84               	movwf	3972,c	;volatile
  1675                           
  1676                           ;Funciones_Db.c: 78: PORTB = 0;
  1677  0019B6  0E00               	movlw	0
  1678  0019B8  6E81               	movwf	3969,c	;volatile
  1679                           
  1680                           ;Funciones_Db.c: 79: Lcd_Clear();
  1681  0019BA  EC61  F013         	call	_Lcd_Clear	;wreg free
  1682                           
  1683                           ;Funciones_Db.c: 80: Lcd_Set_Cursor(2, 1);
  1684  0019BE  0E01               	movlw	1
  1685  0019C0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1686  0019C2  0E02               	movlw	2
  1687  0019C4  EC29  F011         	call	_Lcd_Set_Cursor
  1688                           
  1689                           ;Funciones_Db.c: 81: Lcd_Write_String("INICIO");
  1690  0019C8  0E7F               	movlw	high STR_10
  1691  0019CA  6E1E               	movwf	Lcd_Write_String@a+1,c
  1692  0019CC  0EF1               	movlw	low STR_10
  1693  0019CE  6E1D               	movwf	Lcd_Write_String@a,c
  1694  0019D0  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  1695                           
  1696                           ;Funciones_Db.c: 83: BT_Init();
  1697  0019D4  EC55  F00D         	call	_BT_Init	;wreg free
  1698                           
  1699                           ;Funciones_Db.c: 84: Lcd_Clear();
  1700  0019D8  EC61  F013         	call	_Lcd_Clear	;wreg free
  1701                           
  1702                           ;Funciones_Db.c: 85: Lcd_Set_Cursor(1, 1);
  1703  0019DC  0E01               	movlw	1
  1704  0019DE  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1705  0019E0  0E01               	movlw	1
  1706  0019E2  EC29  F011         	call	_Lcd_Set_Cursor
  1707                           
  1708                           ;Funciones_Db.c: 86: Lcd_Write_String("BT INICIALIZADO");
  1709  0019E6  0E7F               	movlw	high STR_11
  1710  0019E8  6E1E               	movwf	Lcd_Write_String@a+1,c
  1711  0019EA  0E53               	movlw	low STR_11
  1712  0019EC  6E1D               	movwf	Lcd_Write_String@a,c
  1713  0019EE  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  1714                           
  1715                           ;Funciones_Db.c: 88: Pause_seg(7);
  1716  0019F2  0E07               	movlw	7
  1717  0019F4  ECA0  F011         	call	_Pause_seg
  1718                           
  1719                           ;Funciones_Db.c: 89: cad = 0;
  1720  0019F8  0E00               	movlw	0
  1721  0019FA  6E3D               	movwf	_cad,c
  1722                           
  1723                           ;Funciones_Db.c: 90: clrBufferUSART();
  1724  0019FC  EC1C  F012         	call	_clrBufferUSART	;wreg free
  1725                           
  1726                           ;Funciones_Db.c: 96: return;
  1727  001A00  0012               	return	
  1728  001A02                     __end_of_Inicializa_Driveby:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           intcon	equ	0xFF2
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1l	equ	0xFE1
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _BT_Init *****************
  1742 ;; Defined at:
  1743 ;;		line 16 in file "Bluetooth.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1748 ;; Return value:  Size  Location     Type
  1749 ;;		None               void
  1750 ;; Registers used:
  1751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1757 ;;      Params:         0       0       0       0       0       0       0       0       0
  1758 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1760 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1761 ;;Total ram usage:       18 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    8
  1764 ;; This function calls:
  1765 ;;		_Pause_seg
  1766 ;;		_SendBlueToothCommand
  1767 ;;		_UART1_Init
  1768 ;; This function is called by:
  1769 ;;		_Inicializa_Driveby
  1770 ;;		_EstadoBluetooth
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text3
  1775  001AAA                     __ptext3:
  1776                           	opt stack 0
  1777  001AAA                     _BT_Init:
  1778                           	opt stack 21
  1779                           
  1780                           ;Bluetooth.c: 18: UART1_Init(51);
  1781                           
  1782                           ;incstack = 0
  1783  001AAA  0E33               	movlw	51
  1784  001AAC  EC52  F013         	call	_UART1_Init
  1785                           
  1786                           ;Bluetooth.c: 21: Pause_seg(1);
  1787  001AB0  0E01               	movlw	1
  1788  001AB2  ECA0  F011         	call	_Pause_seg
  1789                           
  1790                           ;Bluetooth.c: 22: char nameBT[18] = {
  1791                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1792                           ;Bluetooth.c: 24: };
  1793  001AB6  EE20  F0EC         	lfsr	2,BT_Init@F5669
  1794  001ABA  EE10  F060         	lfsr	1,BT_Init@nameBT
  1795  001ABE  0E12               	movlw	18
  1796  001AC0                     u5271:
  1797  001AC0  CFDE FFE6          	movff	postinc2,postinc1
  1798  001AC4  2EE8               	decfsz	wreg,f,c
  1799  001AC6  D7FC               	goto	u5271
  1800                           
  1801                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1802  001AC8  0E7F               	movlw	high STR_1
  1803  001ACA  6E24               	movwf	SendBlueToothCommand@command+1,c
  1804  001ACC  0EB7               	movlw	low STR_1
  1805  001ACE  6E23               	movwf	SendBlueToothCommand@command,c
  1806  001AD0  0E00               	movlw	0
  1807  001AD2  6E26               	movwf	SendBlueToothCommand@total+1,c
  1808  001AD4  0E0B               	movlw	11
  1809  001AD6  6E25               	movwf	SendBlueToothCommand@total,c
  1810  001AD8  EC2B  F013         	call	_SendBlueToothCommand	;wreg free
  1811                           
  1812                           ;Bluetooth.c: 29: Pause_seg(1);
  1813  001ADC  0E01               	movlw	1
  1814  001ADE  ECA0  F011         	call	_Pause_seg
  1815                           
  1816                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1817  001AE2  0100               	movlb	0	; () banked
  1818  001AE4  0E00               	movlw	high BT_Init@nameBT
  1819  001AE6  6E24               	movwf	SendBlueToothCommand@command+1,c
  1820  001AE8  0100               	movlb	0	; () banked
  1821  001AEA  0E60               	movlw	low BT_Init@nameBT
  1822  001AEC  6E23               	movwf	SendBlueToothCommand@command,c
  1823  001AEE  0E00               	movlw	0
  1824  001AF0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1825  001AF2  0E12               	movlw	18
  1826  001AF4  6E25               	movwf	SendBlueToothCommand@total,c
  1827  001AF6  EC2B  F013         	call	_SendBlueToothCommand	;wreg free
  1828                           
  1829                           ;Bluetooth.c: 33: Pause_seg(2);
  1830  001AFA  0E02               	movlw	2
  1831  001AFC  ECA0  F011         	call	_Pause_seg
  1832                           
  1833                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1834  001B00  0E7F               	movlw	high STR_2
  1835  001B02  6E24               	movwf	SendBlueToothCommand@command+1,c
  1836  001B04  0E63               	movlw	low STR_2
  1837  001B06  6E23               	movwf	SendBlueToothCommand@command,c
  1838  001B08  0E00               	movlw	0
  1839  001B0A  6E26               	movwf	SendBlueToothCommand@total+1,c
  1840  001B0C  0E0E               	movlw	14
  1841  001B0E  6E25               	movwf	SendBlueToothCommand@total,c
  1842  001B10  EC2B  F013         	call	_SendBlueToothCommand	;wreg free
  1843                           
  1844                           ;Bluetooth.c: 36: Pause_seg(2);
  1845  001B14  0E02               	movlw	2
  1846  001B16  ECA0  F011         	call	_Pause_seg
  1847                           
  1848                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1849  001B1A  0E7F               	movlw	high STR_3
  1850  001B1C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1851  001B1E  0ED9               	movlw	low STR_3
  1852  001B20  6E23               	movwf	SendBlueToothCommand@command,c
  1853  001B22  0E00               	movlw	0
  1854  001B24  6E26               	movwf	SendBlueToothCommand@total+1,c
  1855  001B26  0E08               	movlw	8
  1856  001B28  6E25               	movwf	SendBlueToothCommand@total,c
  1857  001B2A  EC2B  F013         	call	_SendBlueToothCommand	;wreg free
  1858                           
  1859                           ;Bluetooth.c: 41: Pause_seg(2);
  1860  001B2E  0E02               	movlw	2
  1861  001B30  ECA0  F011         	call	_Pause_seg
  1862                           
  1863                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1864  001B34  0E7F               	movlw	high STR_3
  1865  001B36  6E24               	movwf	SendBlueToothCommand@command+1,c
  1866  001B38  0ED9               	movlw	low STR_3
  1867  001B3A  6E23               	movwf	SendBlueToothCommand@command,c
  1868  001B3C  0E00               	movlw	0
  1869  001B3E  6E26               	movwf	SendBlueToothCommand@total+1,c
  1870  001B40  0E08               	movlw	8
  1871  001B42  6E25               	movwf	SendBlueToothCommand@total,c
  1872  001B44  EC2B  F013         	call	_SendBlueToothCommand	;wreg free
  1873                           
  1874                           ;Bluetooth.c: 44: Pause_seg(2);
  1875  001B48  0E02               	movlw	2
  1876  001B4A  ECA0  F011         	call	_Pause_seg
  1877                           
  1878                           ;Bluetooth.c: 45: return;
  1879  001B4E  0012               	return	
  1880  001B50                     __end_of_BT_Init:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           intcon	equ	0xFF2
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postinc1	equ	0xFE6
  1890                           postdec1	equ	0xFE5
  1891                           fsr1l	equ	0xFE1
  1892                           postinc2	equ	0xFDE
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _SendBlueToothCommand *****************
  1896 ;; Defined at:
  1897 ;;		line 48 in file "Bluetooth.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1900 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1901 ;;		 -> BT_Init@nameBT(18), 
  1902 ;;  total           2   36[COMRAM] unsigned int 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;		None               void
  1907 ;; Registers used:
  1908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1914 ;;      Params:         4       0       0       0       0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1917 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1918 ;;Total ram usage:        4 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    7
  1921 ;; This function calls:
  1922 ;;		_putSTRINGU1
  1923 ;; This function is called by:
  1924 ;;		_BT_Init
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text4
  1929  002656                     __ptext4:
  1930                           	opt stack 0
  1931  002656                     _SendBlueToothCommand:
  1932                           	opt stack 21
  1933                           
  1934                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1935                           
  1936                           ;incstack = 0
  1937  002656  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1938  00265A  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1939  00265E  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1940  002662  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1941  002666  EC45  F00E         	call	_putSTRINGU1	;wreg free
  1942                           
  1943                           ;Bluetooth.c: 50: return;
  1944  00266A  0012               	return	
  1945  00266C                     __end_of_SendBlueToothCommand:
  1946                           	opt stack 0
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           intcon	equ	0xFF2
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postinc1	equ	0xFE6
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           postinc2	equ	0xFDE
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _putSTRINGU1 *****************
  1961 ;; Defined at:
  1962 ;;		line 21 in file "UART1.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  1965 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1966 ;;		 -> BT_Init@nameBT(18), 
  1967 ;;  total           2   28[COMRAM] unsigned int 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  cont            1   33[COMRAM] unsigned char 
  1970 ;;  last            1   32[COMRAM] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1980 ;;      Params:         4       0       0       0       0       0       0       0       0
  1981 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1982 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1983 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1984 ;;Total ram usage:        8 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    6
  1987 ;; This function calls:
  1988 ;;		_putcTxU1
  1989 ;; This function is called by:
  1990 ;;		_SendBlueToothCommand
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text5
  1995  001C8A                     __ptext5:
  1996                           	opt stack 0
  1997  001C8A                     _putSTRINGU1:
  1998                           	opt stack 21
  1999                           
  2000                           ;UART1.c: 22: unsigned char cont,last;
  2001                           ;UART1.c: 24: for(cont=0,last=0;cont<total;cont++){
  2002                           
  2003                           ;incstack = 0
  2004  001C8A  0E00               	movlw	0
  2005  001C8C  6E22               	movwf	putSTRINGU1@cont,c
  2006  001C8E  0E00               	movlw	0
  2007  001C90  6E21               	movwf	putSTRINGU1@last,c
  2008  001C92  D01F               	goto	l4288
  2009  001C94                     l4282:
  2010                           
  2011                           ;UART1.c: 25: if(dato[cont]!='\0') last=cont;
  2012  001C94  5022               	movf	putSTRINGU1@cont,w,c
  2013  001C96  0D01               	mullw	1
  2014  001C98  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2015  001C9C  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2016  001CA0  50F3               	movf	prodl,w,c
  2017  001CA2  261F               	addwf	??_putSTRINGU1,f,c
  2018  001CA4  50F4               	movf	prodh,w,c
  2019  001CA6  2220               	addwfc	??_putSTRINGU1+1,f,c
  2020  001CA8  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2021  001CAC  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2022  001CB0  6AF8               	clrf	tblptru,c
  2023  001CB2  0E07               	movlw	(high __ramtop+-1)
  2024  001CB4  64F7               	cpfsgt	tblptrh,c
  2025  001CB6  D003               	bra	u4317
  2026  001CB8  0008               	tblrd		*
  2027  001CBA  50F5               	movf	tablat,w,c
  2028  001CBC  D005               	bra	u4310
  2029  001CBE                     u4317:
  2030  001CBE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2031  001CC2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2032  001CC6  50EF               	movf	indf0,w,c
  2033  001CC8                     u4310:
  2034  001CC8  0900               	iorlw	0
  2035  001CCA  A4D8               	btfss	status,2,c
  2036  001CCC  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2037  001CD0  2A22               	incf	putSTRINGU1@cont,f,c
  2038  001CD2                     l4288:
  2039  001CD2  5022               	movf	putSTRINGU1@cont,w,c
  2040  001CD4  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2041  001CD6  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2042  001CD8  501D               	movf	putSTRINGU1@total,w,c
  2043  001CDA  5C1F               	subwf	??_putSTRINGU1,w,c
  2044  001CDC  501E               	movf	putSTRINGU1@total+1,w,c
  2045  001CDE  5820               	subwfb	??_putSTRINGU1+1,w,c
  2046  001CE0  A0D8               	btfss	status,0,c
  2047  001CE2  D7D8               	goto	l4282
  2048                           
  2049                           ;UART1.c: 26: }
  2050                           ;UART1.c: 28: for (cont=0;cont<=last;cont++){
  2051  001CE4  0E00               	movlw	0
  2052  001CE6  6E22               	movwf	putSTRINGU1@cont,c
  2053  001CE8  D015               	goto	l4298
  2054  001CEA                     l4292:
  2055                           
  2056                           ;UART1.c: 29: putcTxU1(*dato++);
  2057  001CEA  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2058  001CEE  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2059  001CF2  6AF8               	clrf	tblptru,c
  2060  001CF4  0E07               	movlw	(high __ramtop+-1)
  2061  001CF6  64F7               	cpfsgt	tblptrh,c
  2062  001CF8  D003               	bra	u4347
  2063  001CFA  0008               	tblrd		*
  2064  001CFC  50F5               	movf	tablat,w,c
  2065  001CFE  D005               	bra	u4340
  2066  001D00                     u4347:
  2067  001D00  CFF6 FFE9          	movff	tblptrl,fsr0l
  2068  001D04  CFF7 FFEA          	movff	tblptrh,fsr0h
  2069  001D08  50EF               	movf	indf0,w,c
  2070  001D0A                     u4340:
  2071  001D0A  EC5A  F013         	call	_putcTxU1
  2072  001D0E  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2073  001D10  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2074  001D12  2A22               	incf	putSTRINGU1@cont,f,c
  2075  001D14                     l4298:
  2076  001D14  5022               	movf	putSTRINGU1@cont,w,c
  2077  001D16  5C21               	subwf	putSTRINGU1@last,w,c
  2078  001D18  A0D8               	btfss	status,0,c
  2079  001D1A  0012               	return	
  2080  001D1C  D7E6               	goto	l4292
  2081  001D1E                     __end_of_putSTRINGU1:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           intcon	equ	0xFF2
  2090                           indf0	equ	0xFEF
  2091                           postinc0	equ	0xFEE
  2092                           fsr0h	equ	0xFEA
  2093                           fsr0l	equ	0xFE9
  2094                           wreg	equ	0xFE8
  2095                           postinc1	equ	0xFE6
  2096                           postdec1	equ	0xFE5
  2097                           fsr1l	equ	0xFE1
  2098                           postinc2	equ	0xFDE
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _putcTxU1 *****************
  2102 ;; Defined at:
  2103 ;;		line 12 in file "UART1.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  character       1    wreg     unsigned char 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  character       1   25[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;		None               void
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0
  2118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2120 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2121 ;;Total ram usage:        1 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		_WriteUSART
  2126 ;; This function is called by:
  2127 ;;		_putSTRINGU1
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text6
  2132  0026B4                     __ptext6:
  2133                           	opt stack 0
  2134  0026B4                     _putcTxU1:
  2135                           	opt stack 21
  2136                           
  2137                           ;incstack = 0
  2138                           ;putcTxU1@character stored from wreg
  2139  0026B4  6E1A               	movwf	putcTxU1@character,c
  2140                           
  2141                           ;UART1.c: 14: WriteUSART(character);
  2142  0026B6  501A               	movf	putcTxU1@character,w,c
  2143  0026B8  EC40  F013         	call	_WriteUSART
  2144  0026BC                     l206:
  2145  0026BC  B2AC               	btfsc	4012,1,c	;volatile
  2146  0026BE  0012               	return	
  2147  0026C0  D7FD               	goto	l206
  2148  0026C2                     __end_of_putcTxU1:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           indf0	equ	0xFEF
  2158                           postinc0	equ	0xFEE
  2159                           fsr0h	equ	0xFEA
  2160                           fsr0l	equ	0xFE9
  2161                           wreg	equ	0xFE8
  2162                           postinc1	equ	0xFE6
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           postinc2	equ	0xFDE
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _Pause_seg *****************
  2169 ;; Defined at:
  2170 ;;		line 18 in file "Retardos.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  x               1    wreg     unsigned char 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  x               1   29[COMRAM] unsigned char 
  2175 ;;  i               1   30[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0
  2186 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2188 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2189 ;;Total ram usage:        2 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    5
  2192 ;; This function calls:
  2193 ;;		_Pause_ms
  2194 ;; This function is called by:
  2195 ;;		_BT_Init
  2196 ;;		_Inicializa_Driveby
  2197 ;;		_EstadoBluetooth
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text7
  2202  002340                     __ptext7:
  2203                           	opt stack 0
  2204  002340                     _Pause_seg:
  2205                           	opt stack 24
  2206                           
  2207                           ;incstack = 0
  2208                           ;Pause_seg@x stored from wreg
  2209  002340  6E1E               	movwf	Pause_seg@x,c
  2210                           
  2211                           ;Retardos.c: 19: unsigned char i=0;
  2212  002342  0E00               	movlw	0
  2213  002344  6E1F               	movwf	Pause_seg@i,c
  2214                           
  2215                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2216  002346  0E00               	movlw	0
  2217  002348  6E1F               	movwf	Pause_seg@i,c
  2218  00234A  D019               	goto	l4678
  2219  00234C                     l4674:
  2220                           
  2221                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2222  00234C  0E00               	movlw	0
  2223  00234E  6E1A               	movwf	Pause_ms@x+1,c
  2224  002350  0EFA               	movlw	250
  2225  002352  6E19               	movwf	Pause_ms@x,c
  2226  002354  EC70  F012         	call	_Pause_ms	;wreg free
  2227  002358  0E00               	movlw	0
  2228  00235A  6E1A               	movwf	Pause_ms@x+1,c
  2229  00235C  0EFA               	movlw	250
  2230  00235E  6E19               	movwf	Pause_ms@x,c
  2231  002360  EC70  F012         	call	_Pause_ms	;wreg free
  2232                           
  2233                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2234  002364  0E00               	movlw	0
  2235  002366  6E1A               	movwf	Pause_ms@x+1,c
  2236  002368  0EFA               	movlw	250
  2237  00236A  6E19               	movwf	Pause_ms@x,c
  2238  00236C  EC70  F012         	call	_Pause_ms	;wreg free
  2239  002370  0E00               	movlw	0
  2240  002372  6E1A               	movwf	Pause_ms@x+1,c
  2241  002374  0EFA               	movlw	250
  2242  002376  6E19               	movwf	Pause_ms@x,c
  2243  002378  EC70  F012         	call	_Pause_ms	;wreg free
  2244  00237C  2A1F               	incf	Pause_seg@i,f,c
  2245  00237E                     l4678:
  2246  00237E  501F               	movf	Pause_seg@i,w,c
  2247  002380  5C1E               	subwf	Pause_seg@x,w,c
  2248  002382  A0D8               	btfss	status,0,c
  2249  002384  0012               	return	
  2250  002386  D7E2               	goto	l4674
  2251  002388                     __end_of_Pause_seg:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           intcon	equ	0xFF2
  2260                           indf0	equ	0xFEF
  2261                           postinc0	equ	0xFEE
  2262                           fsr0h	equ	0xFEA
  2263                           fsr0l	equ	0xFE9
  2264                           wreg	equ	0xFE8
  2265                           postinc1	equ	0xFE6
  2266                           postdec1	equ	0xFE5
  2267                           fsr1l	equ	0xFE1
  2268                           postinc2	equ	0xFDE
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _Pause_ms *****************
  2272 ;; Defined at:
  2273 ;;		line 11 in file "Retardos.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  x               2   24[COMRAM] unsigned int 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  i               2   27[COMRAM] unsigned int 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2287 ;;      Params:         2       0       0       0       0       0       0       0       0
  2288 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2289 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2290 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2291 ;;Total ram usage:        5 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_Pause_seg
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text8
  2302  0024E0                     __ptext8:
  2303                           	opt stack 0
  2304  0024E0                     _Pause_ms:
  2305                           	opt stack 24
  2306                           
  2307                           ;Retardos.c: 12: unsigned int i=0;
  2308                           
  2309                           ;incstack = 0
  2310  0024E0  0E00               	movlw	0
  2311  0024E2  6E1D               	movwf	Pause_ms@i+1,c
  2312  0024E4  0E00               	movlw	0
  2313  0024E6  6E1C               	movwf	Pause_ms@i,c
  2314                           
  2315                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2316  0024E8  0E00               	movlw	0
  2317  0024EA  6E1D               	movwf	Pause_ms@i+1,c
  2318  0024EC  0E00               	movlw	0
  2319  0024EE  6E1C               	movwf	Pause_ms@i,c
  2320  0024F0  D009               	goto	l185
  2321  0024F2                     l4302:
  2322                           
  2323                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2324  0024F2  0E03               	movlw	3
  2325  0024F4  6E1B               	movwf	??_Pause_ms& (0+255),c
  2326  0024F6  0E98               	movlw	152
  2327  0024F8                     u5507:
  2328  0024F8  2EE8               	decfsz	wreg,f,c
  2329  0024FA  D7FE               	goto	u5507
  2330  0024FC  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2331  0024FE  D7FC               	goto	u5507
  2332  002500  4A1C               	infsnz	Pause_ms@i,f,c
  2333  002502  2A1D               	incf	Pause_ms@i+1,f,c
  2334  002504                     l185:
  2335  002504  501C               	movf	Pause_ms@i,w,c
  2336  002506  5C19               	subwf	Pause_ms@x,w,c
  2337  002508  501D               	movf	Pause_ms@i+1,w,c
  2338  00250A  581A               	subwfb	Pause_ms@x+1,w,c
  2339  00250C  A0D8               	btfss	status,0,c
  2340  00250E  0012               	return	
  2341  002510  D7F0               	goto	l4302
  2342  002512                     __end_of_Pause_ms:
  2343                           	opt stack 0
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           intcon	equ	0xFF2
  2351                           indf0	equ	0xFEF
  2352                           postinc0	equ	0xFEE
  2353                           fsr0h	equ	0xFEA
  2354                           fsr0l	equ	0xFE9
  2355                           wreg	equ	0xFE8
  2356                           postinc1	equ	0xFE6
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           postinc2	equ	0xFDE
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function _Comando_Tablet *****************
  2363 ;; Defined at:
  2364 ;;		line 267 in file "Funciones_Db.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;		None
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  sum             2   22[BANK1 ] int 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;		None               void
  2371 ;; Registers used:
  2372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2378 ;;      Params:         0       0       0       0       0       0       0       0       0
  2379 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2381 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2382 ;;Total ram usage:        2 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    9
  2385 ;; This function calls:
  2386 ;;		_Lcd_Clear
  2387 ;;		_Lcd_Set_Cursor
  2388 ;;		_Lcd_Write_Integer
  2389 ;;		_Lcd_Write_String
  2390 ;;		_PWM_DutyCycle1
  2391 ;;		_PWM_init1
  2392 ;;		_clrBufferUSART
  2393 ;;		_putcBluetoothInt
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text9
  2400  001628                     __ptext9:
  2401                           	opt stack 0
  2402  001628                     _Comando_Tablet:
  2403                           	opt stack 21
  2404                           
  2405                           ;Funciones_Db.c: 268: int sum=0;
  2406                           
  2407                           ;incstack = 0
  2408  001628  0E00               	movlw	0
  2409  00162A  0101               	movlb	1	; () banked
  2410  00162C  6F71               	movwf	(Comando_Tablet@sum+1)& (0+255),b
  2411  00162E  0E00               	movlw	0
  2412  001630  0101               	movlb	1	; () banked
  2413  001632  6F70               	movwf	Comando_Tablet@sum& (0+255),b
  2414                           
  2415                           ;Funciones_Db.c: 271: switch (BluetoothDato[1]) {
  2416  001634  D07A               	goto	l5150
  2417  001636                     l5100:
  2418                           
  2419                           ; BSR set to: 1
  2420                           ;Funciones_Db.c: 273: Lcd_Clear();
  2421  001636  EC61  F013         	call	_Lcd_Clear	;wreg free
  2422                           
  2423                           ;Funciones_Db.c: 274: Lcd_Set_Cursor(1, 1);
  2424  00163A  0E01               	movlw	1
  2425  00163C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2426  00163E  0E01               	movlw	1
  2427  001640  EC29  F011         	call	_Lcd_Set_Cursor
  2428                           
  2429                           ;Funciones_Db.c: 275: Lcd_Write_String("1");
  2430  001644  0E7F               	movlw	high STR_12
  2431  001646  6E1E               	movwf	Lcd_Write_String@a+1,c
  2432  001648  0EF8               	movlw	low STR_12
  2433  00164A  6E1D               	movwf	Lcd_Write_String@a,c
  2434  00164C  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  2435                           
  2436                           ;Funciones_Db.c: 276: break;
  2437  001650  D07E               	goto	l5152
  2438  001652                     l5106:
  2439                           
  2440                           ;Funciones_Db.c: 278: Lcd_Clear();
  2441  001652  EC61  F013         	call	_Lcd_Clear	;wreg free
  2442                           
  2443                           ;Funciones_Db.c: 279: Lcd_Set_Cursor(1, 1);
  2444  001656  0E01               	movlw	1
  2445  001658  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2446  00165A  0E01               	movlw	1
  2447  00165C  EC29  F011         	call	_Lcd_Set_Cursor
  2448                           
  2449                           ;Funciones_Db.c: 280: Lcd_Write_String("2");
  2450  001660  0E7F               	movlw	high (STR_19+16)
  2451  001662  6E1E               	movwf	Lcd_Write_String@a+1,c
  2452  001664  0E51               	movlw	low (STR_19+16)
  2453  001666  6E1D               	movwf	Lcd_Write_String@a,c
  2454  001668  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  2455                           
  2456                           ;Funciones_Db.c: 281: break;
  2457  00166C  D070               	goto	l5152
  2458  00166E                     l5112:
  2459                           
  2460                           ;Funciones_Db.c: 284: Lcd_Clear();
  2461  00166E  EC61  F013         	call	_Lcd_Clear	;wreg free
  2462                           
  2463                           ;Funciones_Db.c: 285: Lcd_Set_Cursor(1, 1);
  2464  001672  0E01               	movlw	1
  2465  001674  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2466  001676  0E01               	movlw	1
  2467  001678  EC29  F011         	call	_Lcd_Set_Cursor
  2468                           
  2469                           ;Funciones_Db.c: 287: Lcd_Write_String("3");
  2470  00167C  0E7F               	movlw	high STR_14
  2471  00167E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2472  001680  0EFA               	movlw	low STR_14
  2473  001682  6E1D               	movwf	Lcd_Write_String@a,c
  2474  001684  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  2475                           
  2476                           ;Funciones_Db.c: 288: break;
  2477  001688  D062               	goto	l5152
  2478  00168A                     l5118:
  2479                           
  2480                           ;Funciones_Db.c: 290: Lcd_Clear();
  2481  00168A  EC61  F013         	call	_Lcd_Clear	;wreg free
  2482                           
  2483                           ;Funciones_Db.c: 291: Lcd_Set_Cursor(1, 1);
  2484  00168E  0E01               	movlw	1
  2485  001690  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2486  001692  0E01               	movlw	1
  2487  001694  EC29  F011         	call	_Lcd_Set_Cursor
  2488                           
  2489                           ;Funciones_Db.c: 292: Lcd_Write_String("4");
  2490  001698  0E7F               	movlw	high STR_15
  2491  00169A  6E1E               	movwf	Lcd_Write_String@a+1,c
  2492  00169C  0EFC               	movlw	low STR_15
  2493  00169E  6E1D               	movwf	Lcd_Write_String@a,c
  2494  0016A0  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  2495                           
  2496                           ;Funciones_Db.c: 293: break;
  2497  0016A4  D054               	goto	l5152
  2498  0016A6                     l5124:
  2499                           
  2500                           ;Funciones_Db.c: 295: Lcd_Clear();
  2501  0016A6  EC61  F013         	call	_Lcd_Clear	;wreg free
  2502                           
  2503                           ;Funciones_Db.c: 296: Lcd_Set_Cursor(1, 1);
  2504  0016AA  0E01               	movlw	1
  2505  0016AC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2506  0016AE  0E01               	movlw	1
  2507  0016B0  EC29  F011         	call	_Lcd_Set_Cursor
  2508                           
  2509                           ;Funciones_Db.c: 297: Lcd_Write_Integer(BluetoothDato[3]);
  2510  0016B4  0101               	movlb	1	; () banked
  2511  0016B6  0100               	movlb	0	; () banked
  2512  0016B8  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2513  0016BC  0100               	movlb	0	; () banked
  2514  0016BE  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2515  0016C0  ECFF  F011         	call	_Lcd_Write_Integer	;wreg free
  2516                           
  2517                           ;Funciones_Db.c: 298: Lcd_Set_Cursor(2, 1);
  2518  0016C4  0E01               	movlw	1
  2519  0016C6  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2520  0016C8  0E02               	movlw	2
  2521  0016CA  EC29  F011         	call	_Lcd_Set_Cursor
  2522                           
  2523                           ;Funciones_Db.c: 299: Lcd_Write_Integer(BluetoothDato[4]);
  2524  0016CE  0101               	movlb	1	; () banked
  2525  0016D0  0100               	movlb	0	; () banked
  2526  0016D2  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2527  0016D6  0100               	movlb	0	; () banked
  2528  0016D8  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2529  0016DA  ECFF  F011         	call	_Lcd_Write_Integer	;wreg free
  2530                           
  2531                           ;Funciones_Db.c: 300: sum = (int)(BluetoothDato[3] + BluetoothDato[4]);
  2532  0016DE  0101               	movlb	1	; () banked
  2533  0016E0  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2534  0016E2  0101               	movlb	1	; () banked
  2535  0016E4  252C               	addwf	(_BluetoothDato+4)& (0+255),w,b
  2536  0016E6  0101               	movlb	1	; () banked
  2537  0016E8  6F70               	movwf	Comando_Tablet@sum& (0+255),b
  2538  0016EA  0101               	movlb	1	; () banked
  2539  0016EC  6B71               	clrf	(Comando_Tablet@sum+1)& (0+255),b
  2540  0016EE  0101               	movlb	1	; () banked
  2541  0016F0  3771               	rlcf	(Comando_Tablet@sum+1)& (0+255),f,b
  2542                           
  2543                           ; BSR set to: 1
  2544                           ;Funciones_Db.c: 301: putcBluetoothInt(sum);
  2545  0016F2  C170  F0B8         	movff	Comando_Tablet@sum,putcBluetoothInt@a
  2546  0016F6  C171  F0B9         	movff	Comando_Tablet@sum+1,putcBluetoothInt@a+1
  2547  0016FA  EC1F  F00F         	call	_putcBluetoothInt	;wreg free
  2548                           
  2549                           ;Funciones_Db.c: 302: PWM_init1(0xff);
  2550  0016FE  0EFF               	movlw	255
  2551  001700  EC0D  F013         	call	_PWM_init1
  2552                           
  2553                           ;Funciones_Db.c: 304: PWM_DutyCycle1(BluetoothDato[3]);
  2554  001704  0101               	movlb	1	; () banked
  2555  001706  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2556  001708  ECA3  F00F         	call	_PWM_DutyCycle1
  2557                           
  2558                           ;Funciones_Db.c: 307: break;
  2559  00170C  D020               	goto	l5152
  2560  00170E                     l5142:
  2561                           
  2562                           ;Funciones_Db.c: 309: Lcd_Clear();
  2563  00170E  EC61  F013         	call	_Lcd_Clear	;wreg free
  2564                           
  2565                           ;Funciones_Db.c: 310: Lcd_Set_Cursor(1, 1);
  2566  001712  0E01               	movlw	1
  2567  001714  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2568  001716  0E01               	movlw	1
  2569  001718  EC29  F011         	call	_Lcd_Set_Cursor
  2570                           
  2571                           ;Funciones_Db.c: 311: Lcd_Write_String("Default");
  2572  00171C  0E7F               	movlw	high STR_16
  2573  00171E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2574  001720  0EE2               	movlw	low STR_16
  2575  001722  6E1D               	movwf	Lcd_Write_String@a,c
  2576  001724  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  2577                           
  2578                           ;Funciones_Db.c: 312: break;
  2579  001728  D012               	goto	l5152
  2580  00172A                     l5150:
  2581  00172A  0101               	movlb	1	; () banked
  2582  00172C  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2583                           
  2584                           ; Switch size 1, requested type "space"
  2585                           ; Number of cases is 5, Range of values is 1 to 5
  2586                           ; switch strategies available:
  2587                           ; Name         Instructions Cycles
  2588                           ; simple_byte           16     9 (average)
  2589                           ;	Chosen strategy is simple_byte
  2590  00172E  0A01               	xorlw	1	; case 1
  2591  001730  B4D8               	btfsc	status,2,c
  2592  001732  D781               	goto	l5100
  2593  001734  0A03               	xorlw	3	; case 2
  2594  001736  B4D8               	btfsc	status,2,c
  2595  001738  D78C               	goto	l5106
  2596  00173A  0A01               	xorlw	1	; case 3
  2597  00173C  B4D8               	btfsc	status,2,c
  2598  00173E  D797               	goto	l5112
  2599  001740  0A07               	xorlw	7	; case 4
  2600  001742  B4D8               	btfsc	status,2,c
  2601  001744  D7A2               	goto	l5118
  2602  001746  0A01               	xorlw	1	; case 5
  2603  001748  B4D8               	btfsc	status,2,c
  2604  00174A  D7AD               	goto	l5124
  2605  00174C  D7E0               	goto	l5142
  2606  00174E                     l5152:
  2607                           
  2608                           ;Funciones_Db.c: 314: clrBufferUSART();
  2609  00174E  EC1C  F012         	call	_clrBufferUSART	;wreg free
  2610                           
  2611                           ;Funciones_Db.c: 315: return;
  2612  001752  0012               	return	
  2613  001754                     __end_of_Comando_Tablet:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           intcon	equ	0xFF2
  2622                           indf0	equ	0xFEF
  2623                           postinc0	equ	0xFEE
  2624                           fsr0h	equ	0xFEA
  2625                           fsr0l	equ	0xFE9
  2626                           wreg	equ	0xFE8
  2627                           postinc1	equ	0xFE6
  2628                           postdec1	equ	0xFE5
  2629                           fsr1l	equ	0xFE1
  2630                           postinc2	equ	0xFDE
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function _putcBluetoothInt *****************
  2634 ;; Defined at:
  2635 ;;		line 102 in file "Bluetooth.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  a               2   88[BANK0 ] int 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  s              20    0[BANK1 ] unsigned char [20]
  2640 ;;  i               2   20[BANK1 ] int 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;		None               void
  2643 ;; Registers used:
  2644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2650 ;;      Params:         0       2       0       0       0       0       0       0       0
  2651 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2653 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2654 ;;Total ram usage:       24 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    8
  2657 ;; This function calls:
  2658 ;;		_UART1_Init
  2659 ;;		_WriteUSART
  2660 ;;		_sprintf
  2661 ;; This function is called by:
  2662 ;;		_Comando_Tablet
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text10
  2667  001E3E                     __ptext10:
  2668                           	opt stack 0
  2669  001E3E                     _putcBluetoothInt:
  2670                           	opt stack 21
  2671                           
  2672                           ;Bluetooth.c: 104: int i;
  2673                           ;Bluetooth.c: 105: unsigned char s[20];
  2674                           ;Bluetooth.c: 106: UART1_Init(51);
  2675                           
  2676                           ;incstack = 0
  2677  001E3E  0E33               	movlw	51
  2678  001E40  EC52  F013         	call	_UART1_Init
  2679                           
  2680                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2681  001E44  0101               	movlb	1	; () banked
  2682  001E46  0E01               	movlw	high putcBluetoothInt@s
  2683  001E48  0100               	movlb	0	; () banked
  2684  001E4A  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2685  001E4C  0101               	movlb	1	; () banked
  2686  001E4E  0E5A               	movlw	low putcBluetoothInt@s
  2687  001E50  0100               	movlb	0	; () banked
  2688  001E52  6F88               	movwf	sprintf@sp& (0+255),b
  2689  001E54  0E7F               	movlw	high (STR_18+10)
  2690  001E56  0100               	movlb	0	; () banked
  2691  001E58  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2692  001E5A  0EB4               	movlw	low (STR_18+10)
  2693  001E5C  0100               	movlb	0	; () banked
  2694  001E5E  6F8A               	movwf	sprintf@f& (0+255),b
  2695  001E60  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2696  001E64  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2697  001E68  EC0E  F000         	call	_sprintf	;wreg free
  2698                           
  2699                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2700  001E6C  0E00               	movlw	0
  2701  001E6E  0101               	movlb	1	; () banked
  2702  001E70  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2703  001E72  0E00               	movlw	0
  2704  001E74  0101               	movlb	1	; () banked
  2705  001E76  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2706  001E78  D012               	goto	l4982
  2707  001E7A                     l4978:
  2708                           
  2709                           ; BSR set to: 1
  2710                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2711  001E7A  0101               	movlb	1	; () banked
  2712  001E7C  0E5A               	movlw	low putcBluetoothInt@s
  2713  001E7E  0101               	movlb	1	; () banked
  2714  001E80  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2715  001E82  6ED9               	movwf	fsr2l,c
  2716  001E84  0101               	movlb	1	; () banked
  2717  001E86  0E01               	movlw	high putcBluetoothInt@s
  2718  001E88  0101               	movlb	1	; () banked
  2719  001E8A  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2720  001E8C  6EDA               	movwf	fsr2h,c
  2721  001E8E  50DF               	movf	indf2,w,c
  2722  001E90  EC40  F013         	call	_WriteUSART
  2723  001E94                     l68:
  2724  001E94  A2AC               	btfss	4012,1,c	;volatile
  2725  001E96  D7FE               	goto	l68
  2726  001E98  0101               	movlb	1	; () banked
  2727  001E9A  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2728  001E9C  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2729  001E9E                     l4982:
  2730                           
  2731                           ; BSR set to: 1
  2732  001E9E  0101               	movlb	1	; () banked
  2733  001EA0  0E5A               	movlw	low putcBluetoothInt@s
  2734  001EA2  0101               	movlb	1	; () banked
  2735  001EA4  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2736  001EA6  6ED9               	movwf	fsr2l,c
  2737  001EA8  0101               	movlb	1	; () banked
  2738  001EAA  0E01               	movlw	high putcBluetoothInt@s
  2739  001EAC  0101               	movlb	1	; () banked
  2740  001EAE  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2741  001EB0  6EDA               	movwf	fsr2h,c
  2742  001EB2  50DF               	movf	indf2,w,c
  2743  001EB4  A4D8               	btfss	status,2,c
  2744  001EB6  D7E1               	goto	l4978
  2745                           
  2746                           ; BSR set to: 1
  2747                           ;Bluetooth.c: 112: }
  2748                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2749                           
  2750                           ; BSR set to: 1
  2751  001EB8  0E4F               	movlw	79
  2752  001EBA  16AB               	andwf	4011,f,c	;volatile
  2753                           
  2754                           ; BSR set to: 1
  2755  001EBC  9AAC               	bcf	4012,5,c	;volatile
  2756  001EBE  0ECF               	movlw	207
  2757  001EC0  169D               	andwf	3997,f,c	;volatile
  2758                           
  2759                           ; BSR set to: 1
  2760                           
  2761                           ; BSR set to: 1
  2762                           ;Bluetooth.c: 114: return;
  2763  001EC2  0012               	return	
  2764  001EC4                     __end_of_putcBluetoothInt:
  2765                           	opt stack 0
  2766                           tblptru	equ	0xFF8
  2767                           tblptrh	equ	0xFF7
  2768                           tblptrl	equ	0xFF6
  2769                           tablat	equ	0xFF5
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           intcon	equ	0xFF2
  2773                           indf0	equ	0xFEF
  2774                           postinc0	equ	0xFEE
  2775                           fsr0h	equ	0xFEA
  2776                           fsr0l	equ	0xFE9
  2777                           wreg	equ	0xFE8
  2778                           postinc1	equ	0xFE6
  2779                           postdec1	equ	0xFE5
  2780                           fsr1l	equ	0xFE1
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _WriteUSART *****************
  2788 ;; Defined at:
  2789 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  data            1    wreg     unsigned char 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  data            1   24[COMRAM] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;		None               void
  2796 ;; Registers used:
  2797 ;;		wreg
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0
  2804 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2806 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2807 ;;Total ram usage:        1 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    4
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_putcBluetoothInt
  2814 ;;		_putcTxU1
  2815 ;;		_putcBluetoothString
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text11
  2820  002680                     __ptext11:
  2821                           	opt stack 0
  2822  002680                     _WriteUSART:
  2823                           	opt stack 21
  2824                           
  2825                           ; BSR set to: 1
  2826                           ;incstack = 0
  2827                           ;WriteUSART@data stored from wreg
  2828  002680  6E19               	movwf	WriteUSART@data,c
  2829  002682  ACAC               	btfss	4012,6,c	;volatile
  2830  002684  D003               	goto	l4022
  2831  002686  90AC               	bcf	4012,0,c	;volatile
  2832  002688  B23C               	btfsc	_USART_Status,1,c
  2833  00268A  80AC               	bsf	4012,0,c	;volatile
  2834  00268C                     l4022:
  2835  00268C  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  2836  002690  0012               	return	
  2837  002692                     __end_of_WriteUSART:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           intcon	equ	0xFF2
  2846                           indf0	equ	0xFEF
  2847                           postinc0	equ	0xFEE
  2848                           fsr0h	equ	0xFEA
  2849                           fsr0l	equ	0xFE9
  2850                           wreg	equ	0xFE8
  2851                           postinc1	equ	0xFE6
  2852                           postdec1	equ	0xFE5
  2853                           fsr1l	equ	0xFE1
  2854                           indf2	equ	0xFDF
  2855                           postinc2	equ	0xFDE
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function _UART1_Init *****************
  2861 ;; Defined at:
  2862 ;;		line 5 in file "UART1.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  bdr             1    wreg     unsigned char 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  bdr             1   30[COMRAM] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;		None               void
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2876 ;;      Params:         0       0       0       0       0       0       0       0       0
  2877 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2879 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2880 ;;Total ram usage:        1 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    5
  2883 ;; This function calls:
  2884 ;;		_OpenUSART
  2885 ;; This function is called by:
  2886 ;;		_BT_Init
  2887 ;;		_putcBluetoothInt
  2888 ;;		_main
  2889 ;;		_putcBluetoothString
  2890 ;;		_EstadoBluetooth
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text12
  2895  0026A4                     __ptext12:
  2896                           	opt stack 0
  2897  0026A4                     _UART1_Init:
  2898                           	opt stack 25
  2899                           
  2900                           ;incstack = 0
  2901                           ;UART1_Init@bdr stored from wreg
  2902  0026A4  6E1F               	movwf	UART1_Init@bdr,c
  2903                           
  2904                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  2905  0026A6  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  2906  0026AA  6A1A               	clrf	OpenUSART@spbrg+1,c
  2907  0026AC  0E7C               	movlw	124
  2908  0026AE  EC94  F010         	call	_OpenUSART
  2909  0026B2  0012               	return	
  2910  0026B4                     __end_of_UART1_Init:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           intcon	equ	0xFF2
  2919                           indf0	equ	0xFEF
  2920                           postinc0	equ	0xFEE
  2921                           fsr0h	equ	0xFEA
  2922                           fsr0l	equ	0xFE9
  2923                           wreg	equ	0xFE8
  2924                           postinc1	equ	0xFE6
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _OpenUSART *****************
  2934 ;; Defined at:
  2935 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  config          1    wreg     unsigned char 
  2938 ;;  spbrg           2   24[COMRAM] unsigned int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  config          1   29[COMRAM] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;		None               void
  2943 ;; Registers used:
  2944 ;;		wreg, status,2
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2950 ;;      Params:         2       0       0       0       0       0       0       0       0
  2951 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2952 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2953 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2954 ;;Total ram usage:        6 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    4
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_UART1_Init
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text13
  2965  002128                     __ptext13:
  2966                           	opt stack 0
  2967  002128                     _OpenUSART:
  2968                           	opt stack 25
  2969                           
  2970                           ;incstack = 0
  2971                           ;OpenUSART@config stored from wreg
  2972  002128  6E1E               	movwf	OpenUSART@config,c
  2973  00212A  0E00               	movlw	0
  2974  00212C  6EAC               	movwf	4012,c	;volatile
  2975  00212E  0E00               	movlw	0
  2976  002130  6EAB               	movwf	4011,c	;volatile
  2977  002132  B01E               	btfsc	OpenUSART@config,0,c
  2978  002134  88AC               	bsf	4012,4,c	;volatile
  2979  002136  A21E               	btfss	OpenUSART@config,1,c
  2980  002138  D002               	goto	l4316
  2981  00213A  8CAC               	bsf	4012,6,c	;volatile
  2982  00213C  8CAB               	bsf	4011,6,c	;volatile
  2983  00213E                     l4316:
  2984  00213E  B41E               	btfsc	OpenUSART@config,2,c
  2985  002140  8EAC               	bsf	4012,7,c	;volatile
  2986  002142  A61E               	btfss	OpenUSART@config,3,c
  2987  002144  D002               	goto	l529
  2988  002146  88AB               	bsf	4011,4,c	;volatile
  2989  002148  D001               	goto	l4324
  2990  00214A                     l529:
  2991  00214A  8AAB               	bsf	4011,5,c	;volatile
  2992  00214C                     l4324:
  2993  00214C  B81E               	btfsc	OpenUSART@config,4,c
  2994  00214E  84AC               	bsf	4012,2,c	;volatile
  2995  002150  989E               	bcf	3998,4,c	;volatile
  2996  002152  BA1E               	btfsc	OpenUSART@config,5,c
  2997  002154  86AB               	bsf	4011,3,c	;volatile
  2998  002156  AC1E               	btfss	OpenUSART@config,6,c
  2999  002158  D002               	goto	l533
  3000  00215A  8A9D               	bsf	3997,5,c	;volatile
  3001  00215C  D001               	goto	l534
  3002  00215E                     l533:
  3003  00215E  9A9D               	bcf	3997,5,c	;volatile
  3004  002160                     l534:
  3005  002160  9A9E               	bcf	3998,5,c	;volatile
  3006  002162  AE1E               	btfss	OpenUSART@config,7,c
  3007  002164  D002               	goto	l535
  3008  002166  889D               	bsf	3997,4,c	;volatile
  3009  002168  D001               	goto	l536
  3010  00216A                     l535:
  3011  00216A  989D               	bcf	3997,4,c	;volatile
  3012  00216C                     l536:
  3013  00216C  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3014  002170  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3015  002174  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3016  002178  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3017  00217A  501C               	movf	??_OpenUSART+1,w,c
  3018  00217C  6EB0               	movwf	4016,c	;volatile
  3019  00217E  8AAC               	bsf	4012,5,c	;volatile
  3020  002180  8EAB               	bsf	4011,7,c	;volatile
  3021  002182  9C94               	bcf	3988,6,c	;volatile
  3022  002184  8E94               	bsf	3988,7,c	;volatile
  3023  002186  B8AC               	btfsc	4012,4,c	;volatile
  3024  002188  BEAC               	btfsc	4012,7,c	;volatile
  3025  00218A  D001               	goto	l538
  3026  00218C  8C94               	bsf	3988,6,c	;volatile
  3027  00218E                     l538:
  3028  00218E  0012               	return	
  3029  002190                     __end_of_OpenUSART:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           prodh	equ	0xFF4
  3036                           prodl	equ	0xFF3
  3037                           intcon	equ	0xFF2
  3038                           indf0	equ	0xFEF
  3039                           postinc0	equ	0xFEE
  3040                           fsr0h	equ	0xFEA
  3041                           fsr0l	equ	0xFE9
  3042                           wreg	equ	0xFE8
  3043                           postinc1	equ	0xFE6
  3044                           postdec1	equ	0xFE5
  3045                           fsr1l	equ	0xFE1
  3046                           indf2	equ	0xFDF
  3047                           postinc2	equ	0xFDE
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8
  3051                           
  3052 ;; *************** function _clrBufferUSART *****************
  3053 ;; Defined at:
  3054 ;;		line 68 in file "Bluetooth.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;		None
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  i               2   24[COMRAM] int 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;		None               void
  3061 ;; Registers used:
  3062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3068 ;;      Params:         0       0       0       0       0       0       0       0       0
  3069 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3071 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3072 ;;Total ram usage:        2 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    4
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_Inicializa_Driveby
  3079 ;;		_Comando_Tablet
  3080 ;;		_main
  3081 ;;		_CheckTX
  3082 ;;		_EstadoBluetooth
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text14
  3087  002438                     __ptext14:
  3088                           	opt stack 0
  3089  002438                     _clrBufferUSART:
  3090                           	opt stack 26
  3091                           
  3092                           ;Bluetooth.c: 69: int i;
  3093                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3094                           
  3095                           ;incstack = 0
  3096  002438  0E00               	movlw	0
  3097  00243A  6E1A               	movwf	clrBufferUSART@i+1,c
  3098  00243C  0E00               	movlw	0
  3099  00243E  6E19               	movwf	clrBufferUSART@i,c
  3100  002440  501A               	movf	clrBufferUSART@i+1,w,c
  3101  002442  0A80               	xorlw	128
  3102  002444  0F80               	addlw	-128
  3103  002446  0E14               	movlw	20
  3104  002448  B4D8               	btfsc	status,2,c
  3105  00244A  5C19               	subwf	clrBufferUSART@i,w,c
  3106  00244C  B0D8               	btfsc	status,0,c
  3107  00244E  D00F               	goto	l54
  3108                           
  3109                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3110  002450  0101               	movlb	1	; () banked
  3111  002452  0E28               	movlw	low _BluetoothDato
  3112  002454  2419               	addwf	clrBufferUSART@i,w,c
  3113  002456  6ED9               	movwf	fsr2l,c
  3114  002458  0101               	movlb	1	; () banked
  3115  00245A  0E01               	movlw	high _BluetoothDato
  3116  00245C  201A               	addwfc	clrBufferUSART@i+1,w,c
  3117  00245E  6EDA               	movwf	fsr2h,c
  3118  002460  0E00               	movlw	0
  3119  002462  6EDF               	movwf	indf2,c
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;Bluetooth.c: 72: cad = 0;
  3123  002464  0E00               	movlw	0
  3124  002466  6E3D               	movwf	_cad,c
  3125                           
  3126                           ; BSR set to: 1
  3127  002468  4A19               	infsnz	clrBufferUSART@i,f,c
  3128  00246A  2A1A               	incf	clrBufferUSART@i+1,f,c
  3129  00246C  D7E9               	goto	L2
  3130  00246E                     l54:
  3131  00246E  0012               	return	
  3132  002470                     __end_of_clrBufferUSART:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           intcon	equ	0xFF2
  3141                           indf0	equ	0xFEF
  3142                           postinc0	equ	0xFEE
  3143                           fsr0h	equ	0xFEA
  3144                           fsr0l	equ	0xFE9
  3145                           wreg	equ	0xFE8
  3146                           postinc1	equ	0xFE6
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           indf2	equ	0xFDF
  3150                           postinc2	equ	0xFDE
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _PWM_init1 *****************
  3156 ;; Defined at:
  3157 ;;		line 34 in file "pwm.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  period          1    wreg     unsigned char 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  period          1   25[COMRAM] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0
  3172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3174 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3175 ;;Total ram usage:        1 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    5
  3178 ;; This function calls:
  3179 ;;		_OpenPWM1
  3180 ;; This function is called by:
  3181 ;;		_Comando_Tablet
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text15
  3186  00261A                     __ptext15:
  3187                           	opt stack 0
  3188  00261A                     _PWM_init1:
  3189                           	opt stack 24
  3190                           
  3191                           ;incstack = 0
  3192                           ;PWM_init1@period stored from wreg
  3193  00261A  6E1A               	movwf	PWM_init1@period,c
  3194                           
  3195                           ;pwm.c: 36: Timer2Config = 0b11111110;
  3196  00261C  0EFE               	movlw	254
  3197  00261E  6E47               	movwf	_Timer2Config,c
  3198                           
  3199                           ;pwm.c: 40: T2CON = (0xfb & Timer2Config);
  3200  002620  5047               	movf	_Timer2Config,w,c
  3201  002622  0BFB               	andlw	251
  3202  002624  6ECA               	movwf	4042,c	;volatile
  3203                           
  3204                           ;pwm.c: 43: TMR2 = 0;
  3205  002626  0E00               	movlw	0
  3206  002628  6ECC               	movwf	4044,c	;volatile
  3207                           
  3208                           ;pwm.c: 44: PIR1bits.TMR2IF = 0;
  3209  00262A  929E               	bcf	3998,1,c	;volatile
  3210                           
  3211                           ;pwm.c: 47: PIE1bits.TMR2IE = 0;
  3212  00262C  929D               	bcf	3997,1,c	;volatile
  3213                           
  3214                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  3215  00262E  84CA               	bsf	4042,2,c	;volatile
  3216                           
  3217                           ;pwm.c: 53: OpenPWM1(period);
  3218  002630  501A               	movf	PWM_init1@period,w,c
  3219  002632  EC49  F013         	call	_OpenPWM1
  3220                           
  3221                           ;pwm.c: 55: return;
  3222  002636  0012               	return	
  3223  002638                     __end_of_PWM_init1:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           indf0	equ	0xFEF
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           postinc1	equ	0xFE6
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _OpenPWM1 *****************
  3247 ;; Defined at:
  3248 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  period          1    wreg     unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  period          1   24[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3262 ;;      Params:         0       0       0       0       0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3265 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3266 ;;Total ram usage:        1 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    4
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_PWM_init1
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text16
  3277  002692                     __ptext16:
  3278                           	opt stack 0
  3279  002692                     _OpenPWM1:
  3280                           	opt stack 24
  3281                           
  3282                           ;incstack = 0
  3283                           ;OpenPWM1@period stored from wreg
  3284  002692  6E19               	movwf	OpenPWM1@period,c
  3285  002694  0E0C               	movlw	12
  3286  002696  12BD               	iorwf	4029,f,c	;volatile
  3287  002698  9494               	bcf	3988,2,c	;volatile
  3288  00269A  94CA               	bcf	4042,2,c	;volatile
  3289  00269C  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3290  0026A0  84CA               	bsf	4042,2,c	;volatile
  3291  0026A2  0012               	return	
  3292  0026A4                     __end_of_OpenPWM1:
  3293                           	opt stack 0
  3294                           tblptru	equ	0xFF8
  3295                           tblptrh	equ	0xFF7
  3296                           tblptrl	equ	0xFF6
  3297                           tablat	equ	0xFF5
  3298                           prodh	equ	0xFF4
  3299                           prodl	equ	0xFF3
  3300                           intcon	equ	0xFF2
  3301                           indf0	equ	0xFEF
  3302                           postinc0	equ	0xFEE
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           postinc1	equ	0xFE6
  3307                           postdec1	equ	0xFE5
  3308                           fsr1l	equ	0xFE1
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _PWM_DutyCycle1 *****************
  3316 ;; Defined at:
  3317 ;;		line 57 in file "pwm.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  percentageDu    1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3322 ;;  DC              2   41[BANK0 ] unsigned int 
  3323 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0
  3334 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3335 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3336 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3337 ;;Total ram usage:        9 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    6
  3340 ;; This function calls:
  3341 ;;		_SetDCPWM1
  3342 ;;		___ftmul
  3343 ;;		___fttol
  3344 ;;		___lbtoft
  3345 ;; This function is called by:
  3346 ;;		_Comando_Tablet
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text17
  3351  001F46                     __ptext17:
  3352                           	opt stack 0
  3353  001F46                     _PWM_DutyCycle1:
  3354                           	opt stack 23
  3355                           
  3356                           ;incstack = 0
  3357                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  3358  001F46  0100               	movlb	0	; () banked
  3359  001F48  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;pwm.c: 60: unsigned int DC=0, DutyCycle=0;
  3363  001F4A  0E00               	movlw	0
  3364  001F4C  0100               	movlb	0	; () banked
  3365  001F4E  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  3366  001F50  0E00               	movlw	0
  3367  001F52  0100               	movlb	0	; () banked
  3368  001F54  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  3369  001F56  0E00               	movlw	0
  3370  001F58  0100               	movlb	0	; () banked
  3371  001F5A  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  3372  001F5C  0E00               	movlw	0
  3373  001F5E  0100               	movlb	0	; () banked
  3374  001F60  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;pwm.c: 62: DC=(unsigned int)(percentageDuty *10.23);
  3378  001F62  0EAE               	movlw	174
  3379  001F64  0100               	movlb	0	; () banked
  3380  001F66  6F63               	movwf	___ftmul@f2& (0+255),b
  3381  001F68  0E23               	movlw	35
  3382  001F6A  0100               	movlb	0	; () banked
  3383  001F6C  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3384  001F6E  0E41               	movlw	65
  3385  001F70  0100               	movlb	0	; () banked
  3386  001F72  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3387  001F74  0100               	movlb	0	; () banked
  3388  001F76  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  3389  001F78  ECDB  F012         	call	___lbtoft
  3390  001F7C  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3391  001F80  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3392  001F84  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3393  001F88  EC28  F009         	call	___ftmul	;wreg free
  3394  001F8C  C060  F073         	movff	?___ftmul,___fttol@f1
  3395  001F90  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3396  001F94  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3397  001F98  ECD4  F009         	call	___fttol	;wreg free
  3398  001F9C  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  3399  001FA0  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  3400  001FA4  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  3401  001FA8  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  3402  001FAC  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  3403  001FB0  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  3404                           
  3405                           ;pwm.c: 65: SetDCPWM1(DC);
  3406  001FB4  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  3407  001FB8  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  3408  001FBC  ECE2  F011         	call	_SetDCPWM1	;wreg free
  3409                           
  3410                           ;pwm.c: 66: return;
  3411  001FC0  0012               	return	
  3412  001FC2                     __end_of_PWM_DutyCycle1:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           indf0	equ	0xFEF
  3422                           postinc0	equ	0xFEE
  3423                           fsr0h	equ	0xFEA
  3424                           fsr0l	equ	0xFE9
  3425                           wreg	equ	0xFE8
  3426                           postinc1	equ	0xFE6
  3427                           postdec1	equ	0xFE5
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           postinc2	equ	0xFDE
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function ___lbtoft *****************
  3436 ;; Defined at:
  3437 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  c               1    wreg     unsigned char 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  c               1   35[COMRAM] unsigned char 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  3   32[COMRAM] float 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3451 ;;      Params:         3       0       0       0       0       0       0       0       0
  3452 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3454 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3455 ;;Total ram usage:        4 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    5
  3458 ;; This function calls:
  3459 ;;		___ftpack
  3460 ;; This function is called by:
  3461 ;;		_PWM_DutyCycle1
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text18
  3466  0025B6                     __ptext18:
  3467                           	opt stack 0
  3468  0025B6                     ___lbtoft:
  3469                           	opt stack 23
  3470                           
  3471                           ;incstack = 0
  3472                           ;___lbtoft@c stored from wreg
  3473  0025B6  6E24               	movwf	___lbtoft@c,c
  3474  0025B8  5024               	movf	___lbtoft@c,w,c
  3475  0025BA  6E19               	movwf	___ftpack@arg,c
  3476  0025BC  6A1A               	clrf	___ftpack@arg+1,c
  3477  0025BE  6A1B               	clrf	___ftpack@arg+2,c
  3478  0025C0  0E8E               	movlw	142
  3479  0025C2  6E1C               	movwf	___ftpack@exp,c
  3480  0025C4  0E00               	movlw	0
  3481  0025C6  6E1D               	movwf	___ftpack@sign,c
  3482  0025C8  EC01  F00D         	call	___ftpack	;wreg free
  3483  0025CC  C019  F021         	movff	?___ftpack,?___lbtoft
  3484  0025D0  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  3485  0025D4  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  3486  0025D8  0012               	return	
  3487  0025DA                     __end_of___lbtoft:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           intcon	equ	0xFF2
  3496                           indf0	equ	0xFEF
  3497                           postinc0	equ	0xFEE
  3498                           fsr0h	equ	0xFEA
  3499                           fsr0l	equ	0xFE9
  3500                           wreg	equ	0xFE8
  3501                           postinc1	equ	0xFE6
  3502                           postdec1	equ	0xFE5
  3503                           fsr1l	equ	0xFE1
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _SetDCPWM1 *****************
  3511 ;; Defined at:
  3512 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3526 ;;      Params:         2       0       0       0       0       0       0       0       0
  3527 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3528 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3529 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3530 ;;Total ram usage:        6 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    4
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_PWM_DutyCycle1
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text19
  3541  0023C4                     __ptext19:
  3542                           	opt stack 0
  3543  0023C4                     _SetDCPWM1:
  3544                           	opt stack 24
  3545                           
  3546                           ;incstack = 0
  3547  0023C4  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  3548  0023C8  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  3549  0023CC  0E06               	movlw	6
  3550  0023CE                     u5265:
  3551  0023CE  90D8               	bcf	status,0,c
  3552  0023D0  361B               	rlcf	??_SetDCPWM1,f,c
  3553  0023D2  361C               	rlcf	??_SetDCPWM1+1,f,c
  3554  0023D4  2EE8               	decfsz	wreg,f,c
  3555  0023D6  D7FB               	goto	u5265
  3556  0023D8  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  3557  0023DC  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  3558  0023E0  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  3559  0023E4  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  3560  0023E8  90D8               	bcf	status,0,c
  3561  0023EA  321B               	rrcf	??_SetDCPWM1,f,c
  3562  0023EC  90D8               	bcf	status,0,c
  3563  0023EE  321B               	rrcf	??_SetDCPWM1,f,c
  3564  0023F0  0E30               	movlw	48
  3565  0023F2  161B               	andwf	??_SetDCPWM1,f,c
  3566  0023F4  50BD               	movf	4029,w,c	;volatile
  3567  0023F6  0BCF               	andlw	207
  3568  0023F8  101B               	iorwf	??_SetDCPWM1,w,c
  3569  0023FA  6EBD               	movwf	4029,c	;volatile
  3570  0023FC  0012               	return	
  3571  0023FE                     __end_of_SetDCPWM1:
  3572                           	opt stack 0
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           indf0	equ	0xFEF
  3581                           postinc0	equ	0xFEE
  3582                           fsr0h	equ	0xFEA
  3583                           fsr0l	equ	0xFE9
  3584                           wreg	equ	0xFE8
  3585                           postinc1	equ	0xFE6
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _Lcd_Write_Integer *****************
  3595 ;; Defined at:
  3596 ;;		line 113 in file "lcd.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  a               2   88[BANK0 ] int 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  s              20   90[BANK0 ] unsigned char [20]
  3601 ;; Return value:  Size  Location     Type
  3602 ;;		None               void
  3603 ;; Registers used:
  3604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3610 ;;      Params:         0       2       0       0       0       0       0       0       0
  3611 ;;      Locals:         0      20       0       0       0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3613 ;;      Totals:         0      22       0       0       0       0       0       0       0
  3614 ;;Total ram usage:       22 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    8
  3617 ;; This function calls:
  3618 ;;		_Lcd_Write_String
  3619 ;;		_sprintf
  3620 ;; This function is called by:
  3621 ;;		_Comando_Tablet
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text20
  3626  0023FE                     __ptext20:
  3627                           	opt stack 0
  3628  0023FE                     _Lcd_Write_Integer:
  3629                           	opt stack 21
  3630                           
  3631                           ;lcd.c: 114: unsigned char s[20];
  3632                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  3633                           
  3634                           ;incstack = 0
  3635  0023FE  0100               	movlb	0	; () banked
  3636  002400  0E00               	movlw	high Lcd_Write_Integer@s
  3637  002402  0100               	movlb	0	; () banked
  3638  002404  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  3639  002406  0100               	movlb	0	; () banked
  3640  002408  0EBA               	movlw	low Lcd_Write_Integer@s
  3641  00240A  0100               	movlb	0	; () banked
  3642  00240C  6F88               	movwf	sprintf@sp& (0+255),b
  3643  00240E  0E7F               	movlw	high STR_18
  3644  002410  0100               	movlb	0	; () banked
  3645  002412  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  3646  002414  0EAA               	movlw	low STR_18
  3647  002416  0100               	movlb	0	; () banked
  3648  002418  6F8A               	movwf	sprintf@f& (0+255),b
  3649  00241A  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  3650  00241E  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  3651  002422  EC0E  F000         	call	_sprintf	;wreg free
  3652                           
  3653                           ;lcd.c: 117: Lcd_Write_String(s);
  3654  002426  0100               	movlb	0	; () banked
  3655  002428  0E00               	movlw	high Lcd_Write_Integer@s
  3656  00242A  6E1E               	movwf	Lcd_Write_String@a+1,c
  3657  00242C  0100               	movlb	0	; () banked
  3658  00242E  0EBA               	movlw	low Lcd_Write_Integer@s
  3659  002430  6E1D               	movwf	Lcd_Write_String@a,c
  3660  002432  ECE1  F00F         	call	_Lcd_Write_String	;wreg free
  3661  002436  0012               	return	
  3662  002438                     __end_of_Lcd_Write_Integer:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           intcon	equ	0xFF2
  3671                           indf0	equ	0xFEF
  3672                           postinc0	equ	0xFEE
  3673                           fsr0h	equ	0xFEA
  3674                           fsr0l	equ	0xFE9
  3675                           wreg	equ	0xFE8
  3676                           postinc1	equ	0xFE6
  3677                           postdec1	equ	0xFE5
  3678                           fsr1l	equ	0xFE1
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _sprintf *****************
  3686 ;; Defined at:
  3687 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  3690 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  3691 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  3692 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  vd              4   60[BANK0 ] unsigned long 
  3695 ;;  vd              4   64[BANK0 ] unsigned long 
  3696 ;;  _val            5   77[BANK0 ] struct .
  3697 ;;  fval            3   84[BANK0 ] struct .
  3698 ;;  integ           3   72[BANK0 ] struct .
  3699 ;;  ival            3    0        struct .
  3700 ;;  exp             2   82[BANK0 ] int 
  3701 ;;  prec            2   75[BANK0 ] int 
  3702 ;;  flag            2   70[BANK0 ] unsigned short 
  3703 ;;  ap              2   68[BANK0 ] PTR void [1]
  3704 ;;		 -> ?_sprintf(2), 
  3705 ;;  width           2    0        int 
  3706 ;;  c               1   87[BANK0 ] char 
  3707 ;;  d               1    0        unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  2   40[BANK0 ] int 
  3710 ;; Registers used:
  3711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3717 ;;      Params:         0       7       0       0       0       0       0       0       0
  3718 ;;      Locals:         0      35       0       0       0       0       0       0       0
  3719 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3720 ;;      Totals:         0      48       0       0       0       0       0       0       0
  3721 ;;Total ram usage:       48 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    7
  3724 ;; This function calls:
  3725 ;;		___awdiv
  3726 ;;		___ftadd
  3727 ;;		___ftge
  3728 ;;		___ftmul
  3729 ;;		___ftneg
  3730 ;;		___ftsub
  3731 ;;		___fttol
  3732 ;;		___lldiv
  3733 ;;		___llmod
  3734 ;;		___lltoft
  3735 ;;		___wmul
  3736 ;;		__div_to_l_
  3737 ;;		__tdiv_to_l_
  3738 ;;		_fround
  3739 ;;		_scale
  3740 ;; This function is called by:
  3741 ;;		_putcBluetoothInt
  3742 ;;		_Lcd_Write_Integer
  3743 ;;		_Lcd_Write_Float
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text21
  3748  00001C                     __ptext21:
  3749                           	opt stack 0
  3750  00001C                     _sprintf:
  3751                           	opt stack 21
  3752                           
  3753                           ;doprnt.c: 494: va_list ap;
  3754                           ;doprnt.c: 499: signed char c;
  3755                           ;doprnt.c: 501: int width;
  3756                           ;doprnt.c: 504: int prec;
  3757                           ;doprnt.c: 508: unsigned short flag;
  3758                           ;doprnt.c: 515: char d;
  3759                           ;doprnt.c: 516: double fval, integ;
  3760                           ;doprnt.c: 517: int exp;
  3761                           ;doprnt.c: 518: double ival;
  3762                           ;doprnt.c: 519: union {
  3763                           ;doprnt.c: 520: unsigned long _val;
  3764                           ;doprnt.c: 521: struct {
  3765                           ;doprnt.c: 522: const char * _cp;
  3766                           ;doprnt.c: 523: unsigned _len;
  3767                           ;doprnt.c: 524: } _str;
  3768                           ;doprnt.c: 525: } _val;
  3769                           ;doprnt.c: 542: *ap = __va_start();
  3770                           
  3771                           ;incstack = 0
  3772  00001C  0100               	movlb	0	; () banked
  3773  00001E  0E00               	movlw	high (?_sprintf+4)
  3774  000020  0100               	movlb	0	; () banked
  3775  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  3776  000024  0100               	movlb	0	; () banked
  3777  000026  0E8C               	movlw	low (?_sprintf+4)
  3778  000028  0100               	movlb	0	; () banked
  3779  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  3780                           
  3781                           ;doprnt.c: 545: while(c = *f++) {
  3782  00002C  EF74  F004         	goto	l4888
  3783  000030                     l4686:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;doprnt.c: 547: if(c != '%')
  3787  000030  0100               	movlb	0	; () banked
  3788  000032  51B7               	movf	sprintf@c& (0+255),w,b
  3789  000034  0A25               	xorlw	37
  3790  000036  B4D8               	btfsc	status,2,c
  3791  000038  D00C               	goto	l4692
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;doprnt.c: 549: {
  3795                           ;doprnt.c: 550: ((*sp++ = (c)));
  3796  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  3797  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  3798  000042  0100               	movlb	0	; () banked
  3799  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  3800                           
  3801                           ; BSR set to: 0
  3802  000048  0100               	movlb	0	; () banked
  3803  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  3804  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  3805                           
  3806                           ;doprnt.c: 551: continue;
  3807  00004E  EF74  F004         	goto	l4888
  3808  000052                     l4692:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 552: }
  3812                           ;doprnt.c: 557: flag = 0;
  3813  000052  0E00               	movlw	0
  3814  000054  0100               	movlb	0	; () banked
  3815  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  3816  000058  0E00               	movlw	0
  3817  00005A  0100               	movlb	0	; () banked
  3818  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  3819                           
  3820                           ;doprnt.c: 644: switch(c = *f++) {
  3821  00005E  D003               	goto	l4698
  3822  000060                     l4694:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;doprnt.c: 672: flag |= 0x400;
  3826  000060  0100               	movlb	0	; () banked
  3827  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  3828                           
  3829                           ;doprnt.c: 673: break;
  3830  000064  D01D               	goto	l4700
  3831  000066                     l4698:
  3832                           
  3833                           ; BSR set to: 0
  3834  000066  0100               	movlb	0	; () banked
  3835  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  3836  00006C  0100               	movlb	0	; () banked
  3837  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  3838  000072  0100               	movlb	0	; () banked
  3839  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  3840  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  3841  000078                     	if	0	;tblptru may be non-zero
  3842  000078                     	endif
  3843  000078                     	if	0	;tblptru may be non-zero
  3844  000078                     	endif
  3845  000078  0008               	tblrd		*
  3846  00007A  0100               	movlb	0	; () banked
  3847  00007C  CFF5 F0B7          	movff	tablat,sprintf@c
  3848  000080  0100               	movlb	0	; () banked
  3849  000082  51B7               	movf	sprintf@c& (0+255),w,b
  3850                           
  3851                           ; Switch size 1, requested type "space"
  3852                           ; Number of cases is 4, Range of values is 0 to 105
  3853                           ; switch strategies available:
  3854                           ; Name         Instructions Cycles
  3855                           ; simple_byte           13     7 (average)
  3856                           ;	Chosen strategy is simple_byte
  3857  000084  0A00               	xorlw	0	; case 0
  3858  000086  B4D8               	btfsc	status,2,c
  3859  000088  EF85  F004         	goto	l4890
  3860  00008C  0A64               	xorlw	100	; case 100
  3861  00008E  B4D8               	btfsc	status,2,c
  3862  000090  D007               	goto	l4700
  3863  000092  0A02               	xorlw	2	; case 102
  3864  000094  B4D8               	btfsc	status,2,c
  3865  000096  D7E4               	goto	l4694
  3866  000098  0A0F               	xorlw	15	; case 105
  3867  00009A  A4D8               	btfss	status,2,c
  3868  00009C  EF74  F004         	goto	l4888
  3869  0000A0                     l4700:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;doprnt.c: 834: if(flag & (0x700)) {
  3873  0000A0  0E07               	movlw	7
  3874  0000A2  0100               	movlb	0	; () banked
  3875  0000A4  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3876  0000A6  B4D8               	btfsc	status,2,c
  3877  0000A8  D33C               	goto	l4848
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;doprnt.c: 838: prec = 6;
  3881  0000AA  0E00               	movlw	0
  3882  0000AC  0100               	movlb	0	; () banked
  3883  0000AE  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  3884  0000B0  0E06               	movlw	6
  3885  0000B2  0100               	movlb	0	; () banked
  3886  0000B4  6FAB               	movwf	sprintf@prec& (0+255),b
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3890  0000B6  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  3891  0000BA  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  3892  0000BE  0100               	movlb	0	; () banked
  3893  0000C0  CFDE F0B4          	movff	postinc2,sprintf@fval
  3894  0000C4  0100               	movlb	0	; () banked
  3895  0000C6  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  3896  0000CA  0100               	movlb	0	; () banked
  3897  0000CC  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  3898                           
  3899                           ; BSR set to: 0
  3900  0000D0  0E03               	movlw	3
  3901  0000D2  0100               	movlb	0	; () banked
  3902  0000D4  27A4               	addwf	sprintf@ap& (0+255),f,b
  3903  0000D6  0E00               	movlw	0
  3904  0000D8  0100               	movlb	0	; () banked
  3905  0000DA  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;doprnt.c: 840: if(fval < 0.0) {
  3909  0000DC  0100               	movlb	0	; () banked
  3910  0000DE  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  3911  0000E0  0A80               	xorlw	128
  3912  0000E2  0F80               	addlw	128
  3913  0000E4  E107               	bnz	u4945
  3914  0000E6  0E00               	movlw	0
  3915  0000E8  0100               	movlb	0	; () banked
  3916  0000EA  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  3917  0000EC  E103               	bnz	u4945
  3918  0000EE  0E00               	movlw	0
  3919  0000F0  0100               	movlb	0	; () banked
  3920  0000F2  5DB4               	subwf	sprintf@fval& (0+255),w,b
  3921  0000F4                     u4945:
  3922  0000F4  B0D8               	btfsc	status,0,c
  3923  0000F6  D011               	goto	l4714
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 841: fval = -fval;
  3927  0000F8  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  3928  0000FC  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  3929  000100  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  3930  000104  ECC8  F012         	call	___ftneg	;wreg free
  3931  000108  C019  F0B4         	movff	?___ftneg,sprintf@fval
  3932  00010C  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  3933  000110  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  3934                           
  3935                           ;doprnt.c: 842: flag |= 0x03;
  3936  000114  0E03               	movlw	3
  3937  000116  0100               	movlb	0	; () banked
  3938  000118  13A6               	iorwf	sprintf@flag& (0+255),f,b
  3939  00011A                     l4714:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;doprnt.c: 843: }
  3943                           ;doprnt.c: 844: exp = 0;
  3944  00011A  0E00               	movlw	0
  3945  00011C  0100               	movlb	0	; () banked
  3946  00011E  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  3947  000120  0E00               	movlw	0
  3948  000122  0100               	movlb	0	; () banked
  3949  000124  6FB2               	movwf	sprintf@exp& (0+255),b
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;doprnt.c: 845: if( fval!=0) {
  3953  000126  0E7F               	movlw	127
  3954  000128  0100               	movlb	0	; () banked
  3955  00012A  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  3956  00012C  0100               	movlb	0	; () banked
  3957  00012E  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3958  000130  0100               	movlb	0	; () banked
  3959  000132  11B4               	iorwf	sprintf@fval& (0+255),w,b
  3960  000134  B4D8               	btfsc	status,2,c
  3961  000136  D09C               	goto	l4742
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3965  000138  0E82               	movlw	130
  3966  00013A  0100               	movlb	0	; () banked
  3967  00013C  6F8F               	movwf	??_sprintf& (0+255),b
  3968  00013E  0EFF               	movlw	255
  3969  000140  6F90               	movwf	(??_sprintf+1)& (0+255),b
  3970  000142  0100               	movlb	0	; () banked
  3971  000144  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  3972  000148  0100               	movlb	0	; () banked
  3973  00014A  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  3974  00014E  0100               	movlb	0	; () banked
  3975  000150  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  3976  000154  0100               	movlb	0	; () banked
  3977  000156  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  3978  00015A  0E10               	movlw	16
  3979  00015C  D006               	goto	u4960
  3980  00015E                     u4965:
  3981  00015E  0100               	movlb	0	; () banked
  3982  000160  90D8               	bcf	status,0,c
  3983  000162  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  3984  000164  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  3985  000166  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  3986  000168  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  3987  00016A                     u4960:
  3988  00016A  2EE8               	decfsz	wreg,f,c
  3989  00016C  D7F8               	goto	u4965
  3990  00016E  0100               	movlb	0	; () banked
  3991  000170  5191               	movf	(??_sprintf+2)& (0+255),w,b
  3992  000172  0100               	movlb	0	; () banked
  3993  000174  258F               	addwf	??_sprintf& (0+255),w,b
  3994  000176  0100               	movlb	0	; () banked
  3995  000178  6FB2               	movwf	sprintf@exp& (0+255),b
  3996  00017A  0E00               	movlw	0
  3997  00017C  0100               	movlb	0	; () banked
  3998  00017E  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  3999  000180  0100               	movlb	0	; () banked
  4000  000182  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;doprnt.c: 847: exp--;
  4004  000184  0100               	movlb	0	; () banked
  4005  000186  07B2               	decf	sprintf@exp& (0+255),f,b
  4006  000188  A0D8               	btfss	status,0,c
  4007  00018A  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 848: exp *= 3;
  4011  00018C  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4012  000190  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4013  000194  0E00               	movlw	0
  4014  000196  6E2A               	movwf	___wmul@multiplicand+1,c
  4015  000198  0E03               	movlw	3
  4016  00019A  6E29               	movwf	___wmul@multiplicand,c
  4017  00019C  ECB5  F012         	call	___wmul	;wreg free
  4018  0001A0  C027  F0B2         	movff	?___wmul,sprintf@exp
  4019  0001A4  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4020                           
  4021                           ;doprnt.c: 849: exp /= 10;
  4022  0001A8  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4023  0001AC  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4024  0001B0  0E00               	movlw	0
  4025  0001B2  6E22               	movwf	___awdiv@divisor+1,c
  4026  0001B4  0E0A               	movlw	10
  4027  0001B6  6E21               	movwf	___awdiv@divisor,c
  4028  0001B8  ECA8  F00D         	call	___awdiv	;wreg free
  4029  0001BC  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4030  0001C0  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4031                           
  4032                           ;doprnt.c: 850: if(exp < 0)
  4033  0001C4  0100               	movlb	0	; () banked
  4034  0001C6  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4035  0001C8  0A80               	xorlw	128
  4036  0001CA  6EF3               	movwf	prodl,c
  4037  0001CC  0E80               	movlw	128
  4038  0001CE  5CF3               	subwf	prodl,w,c
  4039  0001D0  0E00               	movlw	0
  4040  0001D2  B4D8               	btfsc	status,2,c
  4041  0001D4  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4042  0001D6  B0D8               	btfsc	status,0,c
  4043  0001D8  D004               	goto	l4730
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 851: exp--;
  4047  0001DA  0100               	movlb	0	; () banked
  4048  0001DC  07B2               	decf	sprintf@exp& (0+255),f,b
  4049  0001DE  A0D8               	btfss	status,0,c
  4050  0001E0  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4051  0001E2                     l4730:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;doprnt.c: 855: integ = scale(-exp);
  4055  0001E2  0100               	movlb	0	; () banked
  4056  0001E4  51B2               	movf	sprintf@exp& (0+255),w,b
  4057  0001E6  0800               	sublw	0
  4058  0001E8  EC8C  F004         	call	_scale
  4059  0001EC  C06C  F0A8         	movff	?_scale,sprintf@integ
  4060  0001F0  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4061  0001F4  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4062                           
  4063                           ;doprnt.c: 856: integ *= fval;
  4064  0001F8  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4065  0001FC  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4066  000200  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4067  000204  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4068  000208  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4069  00020C  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4070  000210  EC28  F009         	call	___ftmul	;wreg free
  4071  000214  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4072  000218  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4073  00021C  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4074                           
  4075                           ;doprnt.c: 857: if(integ < 1.0)
  4076  000220  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4077  000224  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4078  000228  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4079  00022C  0E00               	movlw	0
  4080  00022E  6E1C               	movwf	___ftge@ff2,c
  4081  000230  0E80               	movlw	128
  4082  000232  6E1D               	movwf	___ftge@ff2+1,c
  4083  000234  0E3F               	movlw	63
  4084  000236  6E1E               	movwf	___ftge@ff2+2,c
  4085  000238  ECD7  F00E         	call	___ftge	;wreg free
  4086  00023C  B0D8               	btfsc	status,0,c
  4087  00023E  D005               	goto	l4738
  4088                           
  4089                           ;doprnt.c: 858: exp--;
  4090  000240  0100               	movlb	0	; () banked
  4091  000242  07B2               	decf	sprintf@exp& (0+255),f,b
  4092  000244  A0D8               	btfss	status,0,c
  4093  000246  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4094  000248  D013               	goto	l4742
  4095  00024A                     l4738:
  4096                           
  4097                           ;doprnt.c: 859: else if(integ >= 10.0)
  4098  00024A  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4099  00024E  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4100  000252  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4101  000256  0E00               	movlw	0
  4102  000258  6E1C               	movwf	___ftge@ff2,c
  4103  00025A  0E20               	movlw	32
  4104  00025C  6E1D               	movwf	___ftge@ff2+1,c
  4105  00025E  0E41               	movlw	65
  4106  000260  6E1E               	movwf	___ftge@ff2+2,c
  4107  000262  ECD7  F00E         	call	___ftge	;wreg free
  4108  000266  A0D8               	btfss	status,0,c
  4109  000268  D003               	goto	l4742
  4110                           
  4111                           ;doprnt.c: 860: exp++;
  4112  00026A  0100               	movlb	0	; () banked
  4113  00026C  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4114  00026E  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4115  000270                     l4742:
  4116                           
  4117                           ;doprnt.c: 861: }
  4118                           ;doprnt.c: 1121: if(prec <= 12)
  4119  000270  0100               	movlb	0	; () banked
  4120  000272  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4121  000274  0A80               	xorlw	128
  4122  000276  6EF3               	movwf	prodl,c
  4123  000278  0E80               	movlw	128
  4124  00027A  5CF3               	subwf	prodl,w,c
  4125  00027C  0E0D               	movlw	13
  4126  00027E  B4D8               	btfsc	status,2,c
  4127  000280  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4128  000282  B0D8               	btfsc	status,0,c
  4129  000284  D018               	goto	l4746
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;doprnt.c: 1122: fval += fround(prec);
  4133  000286  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4134  00028A  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4135  00028E  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4136  000292  0100               	movlb	0	; () banked
  4137  000294  51AB               	movf	sprintf@prec& (0+255),w,b
  4138  000296  ECA7  F006         	call	_fround
  4139  00029A  C06C  F079         	movff	?_fround,___ftadd@f2
  4140  00029E  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4141  0002A2  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4142  0002A6  ECE8  F007         	call	___ftadd	;wreg free
  4143  0002AA  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4144  0002AE  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4145  0002B2  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4146  0002B6                     l4746:
  4147                           
  4148                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4149  0002B6  0100               	movlb	0	; () banked
  4150  0002B8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4151  0002BA  0A80               	xorlw	128
  4152  0002BC  6EF3               	movwf	prodl,c
  4153  0002BE  0E80               	movlw	128
  4154  0002C0  5CF3               	subwf	prodl,w,c
  4155  0002C2  0E0A               	movlw	10
  4156  0002C4  B4D8               	btfsc	status,2,c
  4157  0002C6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4158  0002C8  B0D8               	btfsc	status,0,c
  4159  0002CA  D029               	goto	l4754
  4160                           
  4161                           ; BSR set to: 0
  4162  0002CC  0E7F               	movlw	127
  4163  0002CE  0100               	movlb	0	; () banked
  4164  0002D0  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4165  0002D2  0100               	movlb	0	; () banked
  4166  0002D4  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4167  0002D6  0100               	movlb	0	; () banked
  4168  0002D8  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4169  0002DA  B4D8               	btfsc	status,2,c
  4170  0002DC  D06C               	goto	l4770
  4171                           
  4172                           ; BSR set to: 0
  4173  0002DE  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4174  0002E2  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4175  0002E6  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4176  0002EA  ECD4  F009         	call	___fttol	;wreg free
  4177  0002EE  C073  F08F         	movff	?___fttol,??_sprintf
  4178  0002F2  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4179  0002F6  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4180  0002FA  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4181  0002FE  0100               	movlb	0	; () banked
  4182  000300  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4183  000302  118F               	iorwf	??_sprintf& (0+255),w,b
  4184  000304  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4185  000306  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4186  000308  A4D8               	btfss	status,2,c
  4187  00030A  D055               	goto	l4770
  4188                           
  4189                           ; BSR set to: 0
  4190  00030C  0100               	movlb	0	; () banked
  4191  00030E  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4192  000310  0A80               	xorlw	128
  4193  000312  0F80               	addlw	-128
  4194  000314  0E02               	movlw	2
  4195  000316  B4D8               	btfsc	status,2,c
  4196  000318  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4197  00031A  A0D8               	btfss	status,0,c
  4198  00031C  D04C               	goto	l4770
  4199  00031E                     l4754:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4203  00031E  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4204  000322  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4205  000326  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4206  00032A  0E70               	movlw	112
  4207  00032C  6E1C               	movwf	___ftge@ff2,c
  4208  00032E  0E89               	movlw	137
  4209  000330  6E1D               	movwf	___ftge@ff2+1,c
  4210  000332  0E40               	movlw	64
  4211  000334  6E1E               	movwf	___ftge@ff2+2,c
  4212  000336  ECD7  F00E         	call	___ftge	;wreg free
  4213  00033A  B0D8               	btfsc	status,0,c
  4214  00033C  D003               	goto	l4758
  4215                           
  4216                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4217  00033E  0100               	movlb	0	; () banked
  4218  000340  0EF7               	movlw	247
  4219  000342  D002               	goto	L3
  4220  000344                     l4758:
  4221                           
  4222                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4223  000344  0100               	movlb	0	; () banked
  4224  000346  0EF8               	movlw	248
  4225  000348                     L3:
  4226  000348  0100               	movlb	0	; () banked
  4227  00034A  27B2               	addwf	sprintf@exp& (0+255),f,b
  4228  00034C  0EFF               	movlw	255
  4229  00034E  0100               	movlb	0	; () banked
  4230  000350  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 1133: }
  4234                           ;doprnt.c: 1134: integ = scale(exp);
  4235                           
  4236                           ; BSR set to: 0
  4237  000352  0100               	movlb	0	; () banked
  4238  000354  51B2               	movf	sprintf@exp& (0+255),w,b
  4239  000356  EC8C  F004         	call	_scale
  4240  00035A  C06C  F0A8         	movff	?_scale,sprintf@integ
  4241  00035E  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4242  000362  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4243                           
  4244                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4245  000366  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4246  00036A  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4247  00036E  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4248  000372  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4249  000376  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4250  00037A  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4251  00037E  ECAA  F00B         	call	__tdiv_to_l_	;wreg free
  4252  000382  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1210
  4253  000386  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1210+1
  4254  00038A  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1210+2
  4255  00038E  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1210+3
  4256  000392  C098  F0AD         	movff	_sprintf$1210,sprintf@_val
  4257  000396  C099  F0AE         	movff	_sprintf$1210+1,sprintf@_val+1
  4258  00039A  C09A  F0AF         	movff	_sprintf$1210+2,sprintf@_val+2
  4259  00039E  C09B  F0B0         	movff	_sprintf$1210+3,sprintf@_val+3
  4260                           
  4261                           ;doprnt.c: 1138: fval = 0.0;
  4262  0003A2  0E00               	movlw	0
  4263  0003A4  0100               	movlb	0	; () banked
  4264  0003A6  6FB4               	movwf	sprintf@fval& (0+255),b
  4265  0003A8  0E00               	movlw	0
  4266  0003AA  0100               	movlb	0	; () banked
  4267  0003AC  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4268  0003AE  0E00               	movlw	0
  4269  0003B0  0100               	movlb	0	; () banked
  4270  0003B2  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4271                           
  4272                           ;doprnt.c: 1139: } else {
  4273  0003B4  D034               	goto	l4774
  4274  0003B6                     l4770:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  4278  0003B6  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4279  0003BA  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4280  0003BE  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4281  0003C2  ECD4  F009         	call	___fttol	;wreg free
  4282  0003C6  C073  F0AD         	movff	?___fttol,sprintf@_val
  4283  0003CA  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4284  0003CE  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4285  0003D2  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4286                           
  4287                           ;doprnt.c: 1141: fval -= (double)_val._val;
  4288  0003D6  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  4289  0003DA  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  4290  0003DE  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  4291  0003E2  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  4292  0003E6  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  4293  0003EA  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  4294  0003EE  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  4295  0003F2  ECFB  F010         	call	___lltoft	;wreg free
  4296  0003F6  C021  F085         	movff	?___lltoft,___ftsub@f2
  4297  0003FA  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  4298  0003FE  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  4299  000402  ECC4  F011         	call	___ftsub	;wreg free
  4300  000406  C082  F0B4         	movff	?___ftsub,sprintf@fval
  4301  00040A  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  4302  00040E  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  4303                           
  4304                           ;doprnt.c: 1142: exp = 0;
  4305  000412  0E00               	movlw	0
  4306  000414  0100               	movlb	0	; () banked
  4307  000416  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4308  000418  0E00               	movlw	0
  4309  00041A  0100               	movlb	0	; () banked
  4310  00041C  6FB2               	movwf	sprintf@exp& (0+255),b
  4311  00041E                     l4774:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;doprnt.c: 1143: }
  4315                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4316  00041E  0E01               	movlw	1
  4317  000420  0100               	movlb	0	; () banked
  4318  000422  6FB7               	movwf	sprintf@c& (0+255),b
  4319  000424                     
  4320                           ; BSR set to: 0
  4321  000424  0100               	movlb	0	; () banked
  4322  000426  51B7               	movf	sprintf@c& (0+255),w,b
  4323  000428  0A0A               	xorlw	10
  4324  00042A  B4D8               	btfsc	status,2,c
  4325  00042C  D01E               	goto	l4788
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  4329                           
  4330                           ; BSR set to: 0
  4331                           
  4332                           ; BSR set to: 0
  4333  00042E  0100               	movlb	0	; () banked
  4334  000430  51B7               	movf	sprintf@c& (0+255),w,b
  4335  000432  0D04               	mullw	4
  4336  000434  0ECB               	movlw	low _dpowers
  4337  000436  24F3               	addwf	prodl,w,c
  4338  000438  6EF6               	movwf	tblptrl,c
  4339  00043A  0E7E               	movlw	high _dpowers
  4340  00043C  20F4               	addwfc	prodh,w,c
  4341  00043E  6EF7               	movwf	tblptrh,c
  4342  000440                     	if	0	;There are less than 3 active tblptr bytes
  4343  000440                     	endif
  4344  000440  0009               	tblrd		*+
  4345  000442  50F5               	movf	tablat,w,c
  4346  000444  0100               	movlb	0	; () banked
  4347  000446  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4348  000448  0009               	tblrd		*+
  4349  00044A  50F5               	movf	tablat,w,c
  4350  00044C  0100               	movlb	0	; () banked
  4351  00044E  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4352  000450  0009               	tblrd		*+
  4353  000452  50F5               	movf	tablat,w,c
  4354  000454  0100               	movlb	0	; () banked
  4355  000456  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4356  000458  0009               	tblrd		*+
  4357  00045A  50F5               	movf	tablat,w,c
  4358  00045C  0100               	movlb	0	; () banked
  4359  00045E  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4360  000460  A0D8               	btfss	status,0,c
  4361  000462  D003               	goto	l4788
  4362                           
  4363                           ; BSR set to: 0
  4364                           
  4365                           ; BSR set to: 0
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;doprnt.c: 1147: break;
  4369  000464  0100               	movlb	0	; () banked
  4370  000466  2BB7               	incf	sprintf@c& (0+255),f,b
  4371  000468  D7DD               	goto	L4
  4372  00046A                     l4788:
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;doprnt.c: 1184: {
  4376                           ;doprnt.c: 1197: if(flag & 0x03)
  4377  00046A  0E03               	movlw	3
  4378  00046C  0100               	movlb	0	; () banked
  4379  00046E  15A6               	andwf	sprintf@flag& (0+255),w,b
  4380  000470  0100               	movlb	0	; () banked
  4381  000472  6F8F               	movwf	??_sprintf& (0+255),b
  4382  000474  0E00               	movlw	0
  4383  000476  0100               	movlb	0	; () banked
  4384  000478  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4385  00047A  0100               	movlb	0	; () banked
  4386  00047C  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4387  00047E  0100               	movlb	0	; () banked
  4388  000480  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4389  000482  118F               	iorwf	??_sprintf& (0+255),w,b
  4390  000484  B4D8               	btfsc	status,2,c
  4391  000486  D052               	goto	l4802
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  4395  000488  C088  FFD9         	movff	sprintf@sp,fsr2l
  4396  00048C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4397  000490  0E2D               	movlw	45
  4398  000492  D048               	goto	L5
  4399  000494                     l4794:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;doprnt.c: 1209: {
  4403                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  4404  000494  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4405  000498  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4406  00049C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4407  0004A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4408  0004A4  0100               	movlb	0	; () banked
  4409  0004A6  51B7               	movf	sprintf@c& (0+255),w,b
  4410  0004A8  0D04               	mullw	4
  4411  0004AA  0ECB               	movlw	low _dpowers
  4412  0004AC  24F3               	addwf	prodl,w,c
  4413  0004AE  6EF6               	movwf	tblptrl,c
  4414  0004B0  0E7E               	movlw	high _dpowers
  4415  0004B2  20F4               	addwfc	prodh,w,c
  4416  0004B4  6EF7               	movwf	tblptrh,c
  4417  0004B6                     	if	0	;There are less than 3 active tblptr bytes
  4418  0004B6                     	endif
  4419  0004B6  0009               	tblrd		*+
  4420  0004B8  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4421  0004BC  0009               	tblrd		*+
  4422  0004BE  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4423  0004C2  0009               	tblrd		*+
  4424  0004C4  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4425  0004C8  000A               	tblrd		*-
  4426  0004CA  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4427  0004CE  EC62  F00F         	call	___lldiv	;wreg free
  4428  0004D2  C019  F09C         	movff	?___lldiv,sprintf@vd
  4429  0004D6  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  4430  0004DA  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  4431  0004DE  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  4432                           
  4433                           ;doprnt.c: 1211: vd %= 10;
  4434  0004E2  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  4435  0004E6  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  4436  0004EA  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  4437  0004EE  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  4438  0004F2  0E0A               	movlw	10
  4439  0004F4  6E2A               	movwf	___llmod@divisor,c
  4440  0004F6  0E00               	movlw	0
  4441  0004F8  6E2B               	movwf	___llmod@divisor+1,c
  4442  0004FA  0E00               	movlw	0
  4443  0004FC  6E2C               	movwf	___llmod@divisor+2,c
  4444  0004FE  0E00               	movlw	0
  4445  000500  6E2D               	movwf	___llmod@divisor+3,c
  4446  000502  ECC8  F010         	call	___llmod	;wreg free
  4447  000506  C026  F09C         	movff	?___llmod,sprintf@vd
  4448  00050A  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  4449  00050E  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  4450  000512  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  4451                           
  4452                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  4453  000516  0100               	movlb	0	; () banked
  4454  000518  519C               	movf	sprintf@vd& (0+255),w,b
  4455  00051A  0F30               	addlw	48
  4456  00051C  C088  FFD9         	movff	sprintf@sp,fsr2l
  4457  000520  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4458  000524                     L5:
  4459  000524  6EDF               	movwf	indf2,c
  4460                           
  4461                           ; BSR set to: 0
  4462  000526  0100               	movlb	0	; () banked
  4463  000528  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4464  00052A  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4465  00052C                     l4802:
  4466                           
  4467                           ; BSR set to: 0
  4468  00052C  0100               	movlb	0	; () banked
  4469  00052E  07B7               	decf	sprintf@c& (0+255),f,b
  4470  000530  0100               	movlb	0	; () banked
  4471  000532  29B7               	incf	sprintf@c& (0+255),w,b
  4472  000534  B4D8               	btfsc	status,2,c
  4473  000536  D00E               	goto	l4810
  4474  000538  D7AD               	goto	l4794
  4475  00053A                     l4804:
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  4479  00053A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4480  00053E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4481  000542  0E30               	movlw	48
  4482  000544  6EDF               	movwf	indf2,c
  4483                           
  4484                           ; BSR set to: 0
  4485  000546  0100               	movlb	0	; () banked
  4486  000548  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4487  00054A  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;doprnt.c: 1218: exp--;
  4491  00054C  0100               	movlb	0	; () banked
  4492  00054E  07B2               	decf	sprintf@exp& (0+255),f,b
  4493  000550  A0D8               	btfss	status,0,c
  4494  000552  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4495  000554                     l4810:
  4496                           
  4497                           ; BSR set to: 0
  4498  000554  0100               	movlb	0	; () banked
  4499  000556  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4500  000558  0A80               	xorlw	128
  4501  00055A  6EF3               	movwf	prodl,c
  4502  00055C  0E80               	movlw	128
  4503  00055E  5CF3               	subwf	prodl,w,c
  4504  000560  0E01               	movlw	1
  4505  000562  B4D8               	btfsc	status,2,c
  4506  000564  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4507  000566  B0D8               	btfsc	status,0,c
  4508  000568  D7E8               	goto	l4804
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1219: }
  4512                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4513                           
  4514                           ; BSR set to: 0
  4515  00056A  0100               	movlb	0	; () banked
  4516  00056C  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4517  00056E  0A80               	xorlw	128
  4518  000570  0F80               	addlw	-128
  4519  000572  0E09               	movlw	9
  4520  000574  B4D8               	btfsc	status,2,c
  4521  000576  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4522  000578  A0D8               	btfss	status,0,c
  4523  00057A  D004               	goto	l466
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4527  00057C  0E08               	movlw	8
  4528  00057E  0100               	movlb	0	; () banked
  4529  000580  6FB7               	movwf	sprintf@c& (0+255),b
  4530  000582  D002               	goto	l4816
  4531  000584                     l466:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 1222: else
  4535                           ;doprnt.c: 1223: c = prec;
  4536  000584  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  4537  000588                     l4816:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;doprnt.c: 1224: prec -= c;
  4541  000588  0100               	movlb	0	; () banked
  4542  00058A  51B7               	movf	sprintf@c& (0+255),w,b
  4543  00058C  0100               	movlb	0	; () banked
  4544  00058E  5FAB               	subwf	sprintf@prec& (0+255),f,b
  4545  000590  0E00               	movlw	0
  4546  000592  0100               	movlb	0	; () banked
  4547  000594  BFB7               	btfsc	sprintf@c& (0+255),7,b
  4548  000596  0EFF               	movlw	255
  4549  000598  0100               	movlb	0	; () banked
  4550  00059A  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 1228: if(c)
  4554  00059C  0100               	movlb	0	; () banked
  4555  00059E  51B7               	movf	sprintf@c& (0+255),w,b
  4556  0005A0  B4D8               	btfsc	status,2,c
  4557  0005A2  D009               	goto	l4824
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  4561  0005A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  4562  0005A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4563  0005AC  0E2E               	movlw	46
  4564  0005AE  6EDF               	movwf	indf2,c
  4565                           
  4566                           ; BSR set to: 0
  4567  0005B0  0100               	movlb	0	; () banked
  4568  0005B2  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4569  0005B4  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4570  0005B6                     l4824:
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  4574  0005B6  0100               	movlb	0	; () banked
  4575  0005B8  51B7               	movf	sprintf@c& (0+255),w,b
  4576  0005BA  EC8C  F004         	call	_scale
  4577  0005BE  C06C  F095         	movff	?_scale,_sprintf$2151
  4578  0005C2  C06D  F096         	movff	?_scale+1,_sprintf$2151+1
  4579  0005C6  C06E  F097         	movff	?_scale+2,_sprintf$2151+2
  4580                           
  4581                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  4582  0005CA  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4583  0005CE  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4584  0005D2  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4585  0005D6  C095  F060         	movff	_sprintf$2151,___ftmul@f1
  4586  0005DA  C096  F061         	movff	_sprintf$2151+1,___ftmul@f1+1
  4587  0005DE  C097  F062         	movff	_sprintf$2151+2,___ftmul@f1+2
  4588  0005E2  EC28  F009         	call	___ftmul	;wreg free
  4589  0005E6  C060  F073         	movff	?___ftmul,___fttol@f1
  4590  0005EA  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  4591  0005EE  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  4592  0005F2  ECD4  F009         	call	___fttol	;wreg free
  4593  0005F6  C073  F0AD         	movff	?___fttol,sprintf@_val
  4594  0005FA  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4595  0005FE  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4596  000602  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4597                           
  4598                           ;doprnt.c: 1237: while(c--) {
  4599  000606  D073               	goto	l4838
  4600  000608                     l4828:
  4601                           
  4602                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  4603  000608  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4604  00060C  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4605  000610  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4606  000614  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4607  000618  0100               	movlb	0	; () banked
  4608  00061A  51B7               	movf	sprintf@c& (0+255),w,b
  4609  00061C  0D04               	mullw	4
  4610  00061E  0ECB               	movlw	low _dpowers
  4611  000620  24F3               	addwf	prodl,w,c
  4612  000622  6EF6               	movwf	tblptrl,c
  4613  000624  0E7E               	movlw	high _dpowers
  4614  000626  20F4               	addwfc	prodh,w,c
  4615  000628  6EF7               	movwf	tblptrh,c
  4616  00062A                     	if	0	;There are less than 3 active tblptr bytes
  4617  00062A                     	endif
  4618  00062A  0009               	tblrd		*+
  4619  00062C  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4620  000630  0009               	tblrd		*+
  4621  000632  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4622  000636  0009               	tblrd		*+
  4623  000638  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4624  00063C  000A               	tblrd		*-
  4625  00063E  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4626  000642  EC62  F00F         	call	___lldiv	;wreg free
  4627  000646  C019  F0A0         	movff	?___lldiv,sprintf@vd_1212
  4628  00064A  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1212+1
  4629  00064E  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1212+2
  4630  000652  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1212+3
  4631                           
  4632                           ;doprnt.c: 1239: vd %= 10;
  4633  000656  C0A0  F026         	movff	sprintf@vd_1212,___llmod@dividend
  4634  00065A  C0A1  F027         	movff	sprintf@vd_1212+1,___llmod@dividend+1
  4635  00065E  C0A2  F028         	movff	sprintf@vd_1212+2,___llmod@dividend+2
  4636  000662  C0A3  F029         	movff	sprintf@vd_1212+3,___llmod@dividend+3
  4637  000666  0E0A               	movlw	10
  4638  000668  6E2A               	movwf	___llmod@divisor,c
  4639  00066A  0E00               	movlw	0
  4640  00066C  6E2B               	movwf	___llmod@divisor+1,c
  4641  00066E  0E00               	movlw	0
  4642  000670  6E2C               	movwf	___llmod@divisor+2,c
  4643  000672  0E00               	movlw	0
  4644  000674  6E2D               	movwf	___llmod@divisor+3,c
  4645  000676  ECC8  F010         	call	___llmod	;wreg free
  4646  00067A  C026  F0A0         	movff	?___llmod,sprintf@vd_1212
  4647  00067E  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1212+1
  4648  000682  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1212+2
  4649  000686  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1212+3
  4650                           
  4651                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  4652  00068A  0100               	movlb	0	; () banked
  4653  00068C  51A0               	movf	sprintf@vd_1212& (0+255),w,b
  4654  00068E  0F30               	addlw	48
  4655  000690  C088  FFD9         	movff	sprintf@sp,fsr2l
  4656  000694  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4657  000698  6EDF               	movwf	indf2,c
  4658                           
  4659                           ; BSR set to: 0
  4660  00069A  0100               	movlb	0	; () banked
  4661  00069C  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4662  00069E  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  4666  0006A0  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  4667  0006A4  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  4668  0006A8  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  4669  0006AC  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  4670  0006B0  0100               	movlb	0	; () banked
  4671  0006B2  51B7               	movf	sprintf@c& (0+255),w,b
  4672  0006B4  0D04               	mullw	4
  4673  0006B6  0ECB               	movlw	low _dpowers
  4674  0006B8  24F3               	addwf	prodl,w,c
  4675  0006BA  6EF6               	movwf	tblptrl,c
  4676  0006BC  0E7E               	movlw	high _dpowers
  4677  0006BE  20F4               	addwfc	prodh,w,c
  4678  0006C0  6EF7               	movwf	tblptrh,c
  4679  0006C2                     	if	0	;There are less than 3 active tblptr bytes
  4680  0006C2                     	endif
  4681  0006C2  0009               	tblrd		*+
  4682  0006C4  CFF5 F02A          	movff	tablat,___llmod@divisor
  4683  0006C8  0009               	tblrd		*+
  4684  0006CA  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  4685  0006CE  0009               	tblrd		*+
  4686  0006D0  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  4687  0006D4  000A               	tblrd		*-
  4688  0006D6  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  4689  0006DA  ECC8  F010         	call	___llmod	;wreg free
  4690  0006DE  C026  F0AD         	movff	?___llmod,sprintf@_val
  4691  0006E2  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  4692  0006E6  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  4693  0006EA  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  4694  0006EE                     l4838:
  4695  0006EE  0100               	movlb	0	; () banked
  4696  0006F0  07B7               	decf	sprintf@c& (0+255),f,b
  4697  0006F2  0100               	movlb	0	; () banked
  4698  0006F4  29B7               	incf	sprintf@c& (0+255),w,b
  4699  0006F6  B4D8               	btfsc	status,2,c
  4700  0006F8  D00E               	goto	l4846
  4701  0006FA  D786               	goto	l4828
  4702  0006FC                     l4840:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  4706  0006FC  C088  FFD9         	movff	sprintf@sp,fsr2l
  4707  000700  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4708  000704  0E30               	movlw	48
  4709  000706  6EDF               	movwf	indf2,c
  4710                           
  4711                           ; BSR set to: 0
  4712  000708  0100               	movlb	0	; () banked
  4713  00070A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4714  00070C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;doprnt.c: 1246: prec--;
  4718  00070E  0100               	movlb	0	; () banked
  4719  000710  07AB               	decf	sprintf@prec& (0+255),f,b
  4720  000712  A0D8               	btfss	status,0,c
  4721  000714  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  4722  000716                     l4846:
  4723                           
  4724                           ; BSR set to: 0
  4725  000716  0100               	movlb	0	; () banked
  4726  000718  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4727  00071A  11AB               	iorwf	sprintf@prec& (0+255),w,b
  4728  00071C  B4D8               	btfsc	status,2,c
  4729  00071E  D0E4               	goto	l4888
  4730  000720  D7ED               	goto	l4840
  4731  000722                     l4848:
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;doprnt.c: 1255: }
  4735                           ;doprnt.c: 1262: {
  4736                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4737  000722  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4738  000726  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4739  00072A  0100               	movlb	0	; () banked
  4740  00072C  CFDE F0AD          	movff	postinc2,sprintf@_val
  4741  000730  0100               	movlb	0	; () banked
  4742  000732  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  4743  000736  0100               	movlb	0	; () banked
  4744  000738  0E00               	movlw	0
  4745  00073A  0100               	movlb	0	; () banked
  4746  00073C  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  4747  00073E  0EFF               	movlw	-1
  4748  000740  0100               	movlb	0	; () banked
  4749  000742  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  4750  000744  0100               	movlb	0	; () banked
  4751  000746  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  4752                           
  4753                           ; BSR set to: 0
  4754  000748  0E02               	movlw	2
  4755  00074A  0100               	movlb	0	; () banked
  4756  00074C  27A4               	addwf	sprintf@ap& (0+255),f,b
  4757  00074E  0E00               	movlw	0
  4758  000750  0100               	movlb	0	; () banked
  4759  000752  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  4763  000754  0100               	movlb	0	; () banked
  4764  000756  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  4765  000758  0A80               	xorlw	128
  4766  00075A  0F80               	addlw	128
  4767  00075C  E10B               	bnz	u5165
  4768  00075E  0E00               	movlw	0
  4769  000760  0100               	movlb	0	; () banked
  4770  000762  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  4771  000764  E107               	bnz	u5165
  4772  000766  0E00               	movlw	0
  4773  000768  0100               	movlb	0	; () banked
  4774  00076A  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  4775  00076C  E103               	bnz	u5165
  4776  00076E  0E00               	movlw	0
  4777  000770  0100               	movlb	0	; () banked
  4778  000772  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4779  000774                     u5165:
  4780  000774  B0D8               	btfsc	status,0,c
  4781  000776  D012               	goto	l4858
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;doprnt.c: 1271: flag |= 0x03;
  4785  000778  0E03               	movlw	3
  4786  00077A  0100               	movlb	0	; () banked
  4787  00077C  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;doprnt.c: 1272: _val._val = -_val._val;
  4791  00077E  0100               	movlb	0	; () banked
  4792  000780  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  4793  000782  0100               	movlb	0	; () banked
  4794  000784  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  4795  000786  0100               	movlb	0	; () banked
  4796  000788  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  4797  00078A  0100               	movlb	0	; () banked
  4798  00078C  6DAD               	negf	sprintf@_val& (0+255),b
  4799  00078E  0E00               	movlw	0
  4800  000790  0100               	movlb	0	; () banked
  4801  000792  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  4802  000794  0100               	movlb	0	; () banked
  4803  000796  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  4804  000798  0100               	movlb	0	; () banked
  4805  00079A  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  4806  00079C                     l4858:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1273: }
  4810                           ;doprnt.c: 1275: }
  4811                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4812  00079C  0E01               	movlw	1
  4813  00079E  0100               	movlb	0	; () banked
  4814  0007A0  6FB7               	movwf	sprintf@c& (0+255),b
  4815  0007A2                     
  4816                           ; BSR set to: 0
  4817  0007A2  0100               	movlb	0	; () banked
  4818  0007A4  51B7               	movf	sprintf@c& (0+255),w,b
  4819  0007A6  0A0A               	xorlw	10
  4820  0007A8  B4D8               	btfsc	status,2,c
  4821  0007AA  D01E               	goto	l4872
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ; BSR set to: 0
  4829  0007AC  0100               	movlb	0	; () banked
  4830  0007AE  51B7               	movf	sprintf@c& (0+255),w,b
  4831  0007B0  0D04               	mullw	4
  4832  0007B2  0ECB               	movlw	low _dpowers
  4833  0007B4  24F3               	addwf	prodl,w,c
  4834  0007B6  6EF6               	movwf	tblptrl,c
  4835  0007B8  0E7E               	movlw	high _dpowers
  4836  0007BA  20F4               	addwfc	prodh,w,c
  4837  0007BC  6EF7               	movwf	tblptrh,c
  4838  0007BE                     	if	0	;There are less than 3 active tblptr bytes
  4839  0007BE                     	endif
  4840  0007BE  0009               	tblrd		*+
  4841  0007C0  50F5               	movf	tablat,w,c
  4842  0007C2  0100               	movlb	0	; () banked
  4843  0007C4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4844  0007C6  0009               	tblrd		*+
  4845  0007C8  50F5               	movf	tablat,w,c
  4846  0007CA  0100               	movlb	0	; () banked
  4847  0007CC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4848  0007CE  0009               	tblrd		*+
  4849  0007D0  50F5               	movf	tablat,w,c
  4850  0007D2  0100               	movlb	0	; () banked
  4851  0007D4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4852  0007D6  0009               	tblrd		*+
  4853  0007D8  50F5               	movf	tablat,w,c
  4854  0007DA  0100               	movlb	0	; () banked
  4855  0007DC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4856  0007DE  A0D8               	btfss	status,0,c
  4857  0007E0  D003               	goto	l4872
  4858                           
  4859                           ; BSR set to: 0
  4860                           
  4861                           ; BSR set to: 0
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;doprnt.c: 1316: break;
  4865  0007E2  0100               	movlb	0	; () banked
  4866  0007E4  2BB7               	incf	sprintf@c& (0+255),f,b
  4867  0007E6  D7DD               	goto	L6
  4868  0007E8                     l4872:
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;doprnt.c: 1431: {
  4872                           ;doprnt.c: 1447: if(flag & 0x03)
  4873  0007E8  0E03               	movlw	3
  4874  0007EA  0100               	movlb	0	; () banked
  4875  0007EC  15A6               	andwf	sprintf@flag& (0+255),w,b
  4876  0007EE  0100               	movlb	0	; () banked
  4877  0007F0  6F8F               	movwf	??_sprintf& (0+255),b
  4878  0007F2  0E00               	movlw	0
  4879  0007F4  0100               	movlb	0	; () banked
  4880  0007F6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4881  0007F8  0100               	movlb	0	; () banked
  4882  0007FA  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4883  0007FC  0100               	movlb	0	; () banked
  4884  0007FE  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4885  000800  118F               	iorwf	??_sprintf& (0+255),w,b
  4886  000802  B4D8               	btfsc	status,2,c
  4887  000804  D009               	goto	l4878
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4891  000806  C088  FFD9         	movff	sprintf@sp,fsr2l
  4892  00080A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4893  00080E  0E2D               	movlw	45
  4894  000810  6EDF               	movwf	indf2,c
  4895                           
  4896                           ; BSR set to: 0
  4897  000812  0100               	movlb	0	; () banked
  4898  000814  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4899  000816  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4900  000818                     l4878:
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;doprnt.c: 1478: }
  4904                           ;doprnt.c: 1481: prec = c;
  4905  000818  0100               	movlb	0	; () banked
  4906  00081A  51B7               	movf	sprintf@c& (0+255),w,b
  4907  00081C  0100               	movlb	0	; () banked
  4908  00081E  6FAB               	movwf	sprintf@prec& (0+255),b
  4909  000820  0100               	movlb	0	; () banked
  4910  000822  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  4911  000824  0100               	movlb	0	; () banked
  4912  000826  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  4913  000828  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  4914                           
  4915                           ;doprnt.c: 1483: while(prec--) {
  4916  00082A  D054               	goto	l4886
  4917  00082C                     l4880:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;doprnt.c: 1487: {
  4921                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4922  00082C  0100               	movlb	0	; () banked
  4923  00082E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  4924  000832  0100               	movlb	0	; () banked
  4925  000834  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  4926  000838  0100               	movlb	0	; () banked
  4927  00083A  90D8               	bcf	status,0,c
  4928  00083C  378F               	rlcf	??_sprintf& (0+255),f,b
  4929  00083E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  4930  000840  0100               	movlb	0	; () banked
  4931  000842  90D8               	bcf	status,0,c
  4932  000844  378F               	rlcf	??_sprintf& (0+255),f,b
  4933  000846  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  4934  000848  0ECB               	movlw	low _dpowers
  4935  00084A  0100               	movlb	0	; () banked
  4936  00084C  258F               	addwf	??_sprintf& (0+255),w,b
  4937  00084E  6EF6               	movwf	tblptrl,c
  4938  000850  0E7E               	movlw	high _dpowers
  4939  000852  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4940  000854  6EF7               	movwf	tblptrh,c
  4941  000856                     	if	0	;There are less than 3 active tblptr bytes
  4942  000856                     	endif
  4943  000856  0009               	tblrd		*+
  4944  000858  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4945  00085C  0009               	tblrd		*+
  4946  00085E  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4947  000862  0009               	tblrd		*+
  4948  000864  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4949  000868  000A               	tblrd		*-
  4950  00086A  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4951  00086E  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4952  000872  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4953  000876  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4954  00087A  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4955  00087E  EC62  F00F         	call	___lldiv	;wreg free
  4956  000882  C019  F026         	movff	?___lldiv,___llmod@dividend
  4957  000886  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  4958  00088A  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  4959  00088E  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  4960  000892  0E0A               	movlw	10
  4961  000894  6E2A               	movwf	___llmod@divisor,c
  4962  000896  0E00               	movlw	0
  4963  000898  6E2B               	movwf	___llmod@divisor+1,c
  4964  00089A  0E00               	movlw	0
  4965  00089C  6E2C               	movwf	___llmod@divisor+2,c
  4966  00089E  0E00               	movlw	0
  4967  0008A0  6E2D               	movwf	___llmod@divisor+3,c
  4968  0008A2  ECC8  F010         	call	___llmod	;wreg free
  4969  0008A6  C026  F091         	movff	?___llmod,??_sprintf+2
  4970  0008AA  C027  F092         	movff	?___llmod+1,??_sprintf+3
  4971  0008AE  C028  F093         	movff	?___llmod+2,??_sprintf+4
  4972  0008B2  C029  F094         	movff	?___llmod+3,??_sprintf+5
  4973  0008B6  0100               	movlb	0	; () banked
  4974  0008B8  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4975  0008BA  0F30               	addlw	48
  4976  0008BC  0100               	movlb	0	; () banked
  4977  0008BE  6FB7               	movwf	sprintf@c& (0+255),b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;doprnt.c: 1532: }
  4981                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4982  0008C0  C088  FFD9         	movff	sprintf@sp,fsr2l
  4983  0008C4  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4984  0008C8  0100               	movlb	0	; () banked
  4985  0008CA  C0B7  FFDF         	movff	sprintf@c,indf2
  4986                           
  4987                           ; BSR set to: 0
  4988  0008CE  0100               	movlb	0	; () banked
  4989  0008D0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4990  0008D2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4991  0008D4                     l4886:
  4992                           
  4993                           ; BSR set to: 0
  4994  0008D4  0100               	movlb	0	; () banked
  4995  0008D6  07AB               	decf	sprintf@prec& (0+255),f,b
  4996  0008D8  A0D8               	btfss	status,0,c
  4997  0008DA  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  4998  0008DC  0100               	movlb	0	; () banked
  4999  0008DE  29AB               	incf	sprintf@prec& (0+255),w,b
  5000  0008E0  B4D8               	btfsc	status,2,c
  5001  0008E2  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5002  0008E4  A4D8               	btfss	status,2,c
  5003  0008E6  D7A2               	goto	l4880
  5004  0008E8                     l4888:
  5005                           
  5006                           ; BSR set to: 0
  5007  0008E8  0100               	movlb	0	; () banked
  5008  0008EA  C08A  FFF6         	movff	sprintf@f,tblptrl
  5009  0008EE  0100               	movlb	0	; () banked
  5010  0008F0  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5011  0008F4  0100               	movlb	0	; () banked
  5012  0008F6  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5013  0008F8  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5014  0008FA                     	if	0	;tblptru may be non-zero
  5015  0008FA                     	endif
  5016  0008FA                     	if	0	;tblptru may be non-zero
  5017  0008FA                     	endif
  5018  0008FA  0008               	tblrd		*
  5019  0008FC  0100               	movlb	0	; () banked
  5020  0008FE  CFF5 F0B7          	movff	tablat,sprintf@c
  5021  000902  0100               	movlb	0	; () banked
  5022  000904  67B7               	tstfsz	sprintf@c& (0+255),b
  5023  000906  EF18  F000         	goto	l4686
  5024  00090A                     l4890:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;doprnt.c: 1547: *sp = 0;
  5028  00090A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5029  00090E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5030  000912  0E00               	movlw	0
  5031  000914  6EDF               	movwf	indf2,c
  5032                           
  5033                           ; BSR set to: 0
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;doprnt.c: 1549: return 0;
  5037                           ;	Return value of _sprintf is never used
  5038  000916  0012               	return	
  5039  000918                     __end_of_sprintf:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           indf0	equ	0xFEF
  5049                           postinc0	equ	0xFEE
  5050                           fsr0h	equ	0xFEA
  5051                           fsr0l	equ	0xFE9
  5052                           wreg	equ	0xFE8
  5053                           postinc1	equ	0xFE6
  5054                           postdec1	equ	0xFE5
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function _scale *****************
  5064 ;; Defined at:
  5065 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  scl             1    wreg     char 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  scl             1   18[BANK0 ] char 
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  3   12[BANK0 ] char 
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5079 ;;      Params:         0       3       0       0       0       0       0       0       0
  5080 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5082 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5083 ;;Total ram usage:        7 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    6
  5086 ;; This function calls:
  5087 ;;		___awdiv
  5088 ;;		___awmod
  5089 ;;		___ftmul
  5090 ;;		___wmul
  5091 ;; This function is called by:
  5092 ;;		_sprintf
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text22
  5097  000918                     __ptext22:
  5098                           	opt stack 0
  5099  000918                     _scale:
  5100                           	opt stack 21
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;incstack = 0
  5104                           ;scale@scl stored from wreg
  5105  000918  0100               	movlb	0	; () banked
  5106  00091A  6F72               	movwf	scale@scl& (0+255),b
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;doprnt.c: 428: if(scl < 0) {
  5110  00091C  0100               	movlb	0	; () banked
  5111  00091E  AF72               	btfss	scale@scl& (0+255),7,b
  5112  000920  D102               	goto	l4418
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;doprnt.c: 429: scl = -scl;
  5116  000922  0100               	movlb	0	; () banked
  5117  000924  6D72               	negf	scale@scl& (0+255),b
  5118                           
  5119                           ;doprnt.c: 430: if(scl>=110)
  5120  000926  0100               	movlb	0	; () banked
  5121  000928  5172               	movf	scale@scl& (0+255),w,b
  5122  00092A  0A80               	xorlw	128
  5123  00092C  0F12               	addlw	-238
  5124  00092E  A0D8               	btfss	status,0,c
  5125  000930  D097               	goto	l4408
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5129  000932  0E00               	movlw	0
  5130  000934  6E2A               	movwf	___wmul@multiplicand+1,c
  5131  000936  0E03               	movlw	3
  5132  000938  6E29               	movwf	___wmul@multiplicand,c
  5133  00093A  0E00               	movlw	0
  5134  00093C  6E22               	movwf	___awdiv@divisor+1,c
  5135  00093E  0E0A               	movlw	10
  5136  000940  6E21               	movwf	___awdiv@divisor,c
  5137  000942  0E00               	movlw	0
  5138  000944  6E1C               	movwf	___awmod@divisor+1,c
  5139  000946  0E64               	movlw	100
  5140  000948  6E1B               	movwf	___awmod@divisor,c
  5141  00094A  0100               	movlb	0	; () banked
  5142  00094C  5172               	movf	scale@scl& (0+255),w,b
  5143  00094E  6E19               	movwf	___awmod@dividend,c
  5144  000950  6A1A               	clrf	___awmod@dividend+1,c
  5145  000952  BE19               	btfsc	___awmod@dividend,7,c
  5146  000954  061A               	decf	___awmod@dividend+1,f,c
  5147  000956  EC8F  F00E         	call	___awmod	;wreg free
  5148  00095A  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5149  00095E  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5150  000962  ECA8  F00D         	call	___awdiv	;wreg free
  5151  000966  0E09               	movlw	9
  5152  000968  241F               	addwf	?___awdiv,w,c
  5153  00096A  6E27               	movwf	___wmul@multiplier,c
  5154  00096C  0E00               	movlw	0
  5155  00096E  2020               	addwfc	?___awdiv+1,w,c
  5156  000970  6E28               	movwf	___wmul@multiplier+1,c
  5157  000972  ECB5  F012         	call	___wmul	;wreg free
  5158  000976  0EF3               	movlw	low __npowers_
  5159  000978  2427               	addwf	?___wmul,w,c
  5160  00097A  6EF6               	movwf	tblptrl,c
  5161  00097C  0E7E               	movlw	high __npowers_
  5162  00097E  2028               	addwfc	?___wmul+1,w,c
  5163  000980  6EF7               	movwf	tblptrh,c
  5164  000982                     	if	0	;There are less than 3 active tblptr bytes
  5165  000982                     	endif
  5166  000982  0009               	tblrd		*+
  5167  000984  0100               	movlb	0	; () banked
  5168  000986  CFF5 F063          	movff	tablat,___ftmul@f2
  5169  00098A  0009               	tblrd		*+
  5170  00098C  0100               	movlb	0	; () banked
  5171  00098E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5172  000992  000A               	tblrd		*-
  5173  000994  0100               	movlb	0	; () banked
  5174  000996  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5175  00099A  0E00               	movlw	0
  5176  00099C  6E22               	movwf	___awdiv@divisor+1,c
  5177  00099E  0E64               	movlw	100
  5178  0009A0  6E21               	movwf	___awdiv@divisor,c
  5179  0009A2  0100               	movlb	0	; () banked
  5180  0009A4  5172               	movf	scale@scl& (0+255),w,b
  5181  0009A6  6E1F               	movwf	___awdiv@dividend,c
  5182  0009A8  6A20               	clrf	___awdiv@dividend+1,c
  5183  0009AA  BE1F               	btfsc	___awdiv@dividend,7,c
  5184  0009AC  0620               	decf	___awdiv@dividend+1,f,c
  5185  0009AE  ECA8  F00D         	call	___awdiv	;wreg free
  5186  0009B2  0E12               	movlw	18
  5187  0009B4  241F               	addwf	?___awdiv,w,c
  5188  0009B6  6E27               	movwf	___wmul@multiplier,c
  5189  0009B8  0E00               	movlw	0
  5190  0009BA  2020               	addwfc	?___awdiv+1,w,c
  5191  0009BC  6E28               	movwf	___wmul@multiplier+1,c
  5192  0009BE  0E00               	movlw	0
  5193  0009C0  6E2A               	movwf	___wmul@multiplicand+1,c
  5194  0009C2  0E03               	movlw	3
  5195  0009C4  6E29               	movwf	___wmul@multiplicand,c
  5196  0009C6  ECB5  F012         	call	___wmul	;wreg free
  5197  0009CA  0EF3               	movlw	low __npowers_
  5198  0009CC  2427               	addwf	?___wmul,w,c
  5199  0009CE  6EF6               	movwf	tblptrl,c
  5200  0009D0  0E7E               	movlw	high __npowers_
  5201  0009D2  2028               	addwfc	?___wmul+1,w,c
  5202  0009D4  6EF7               	movwf	tblptrh,c
  5203  0009D6                     	if	0	;There are less than 3 active tblptr bytes
  5204  0009D6                     	endif
  5205  0009D6  0009               	tblrd		*+
  5206  0009D8  0100               	movlb	0	; () banked
  5207  0009DA  CFF5 F060          	movff	tablat,___ftmul@f1
  5208  0009DE  0009               	tblrd		*+
  5209  0009E0  0100               	movlb	0	; () banked
  5210  0009E2  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5211  0009E6  000A               	tblrd		*-
  5212  0009E8  0100               	movlb	0	; () banked
  5213  0009EA  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5214  0009EE  EC28  F009         	call	___ftmul	;wreg free
  5215  0009F2  C060  F06F         	movff	?___ftmul,_scale$2150
  5216  0009F6  C061  F070         	movff	?___ftmul+1,_scale$2150+1
  5217  0009FA  C062  F071         	movff	?___ftmul+2,_scale$2150+2
  5218                           
  5219                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5220  0009FE  C06F  F060         	movff	_scale$2150,___ftmul@f1
  5221  000A02  C070  F061         	movff	_scale$2150+1,___ftmul@f1+1
  5222  000A06  C071  F062         	movff	_scale$2150+2,___ftmul@f1+2
  5223  000A0A  0E00               	movlw	0
  5224  000A0C  6E2A               	movwf	___wmul@multiplicand+1,c
  5225  000A0E  0E03               	movlw	3
  5226  000A10  6E29               	movwf	___wmul@multiplicand,c
  5227  000A12  0E00               	movlw	0
  5228  000A14  6E1C               	movwf	___awmod@divisor+1,c
  5229  000A16  0E0A               	movlw	10
  5230  000A18  6E1B               	movwf	___awmod@divisor,c
  5231  000A1A  0100               	movlb	0	; () banked
  5232  000A1C  5172               	movf	scale@scl& (0+255),w,b
  5233  000A1E  6E19               	movwf	___awmod@dividend,c
  5234  000A20  6A1A               	clrf	___awmod@dividend+1,c
  5235  000A22  BE19               	btfsc	___awmod@dividend,7,c
  5236  000A24  061A               	decf	___awmod@dividend+1,f,c
  5237  000A26  EC8F  F00E         	call	___awmod	;wreg free
  5238  000A2A  C019  F027         	movff	?___awmod,___wmul@multiplier
  5239  000A2E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5240  000A32  ECB5  F012         	call	___wmul	;wreg free
  5241  000A36  0EF3               	movlw	low __npowers_
  5242  000A38  2427               	addwf	?___wmul,w,c
  5243  000A3A  6EF6               	movwf	tblptrl,c
  5244  000A3C  0E7E               	movlw	high __npowers_
  5245  000A3E  2028               	addwfc	?___wmul+1,w,c
  5246  000A40  6EF7               	movwf	tblptrh,c
  5247  000A42                     	if	0	;There are less than 3 active tblptr bytes
  5248  000A42                     	endif
  5249  000A42  0009               	tblrd		*+
  5250  000A44  0100               	movlb	0	; () banked
  5251  000A46  CFF5 F063          	movff	tablat,___ftmul@f2
  5252  000A4A  0009               	tblrd		*+
  5253  000A4C  0100               	movlb	0	; () banked
  5254  000A4E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5255  000A52  000A               	tblrd		*-
  5256  000A54  0100               	movlb	0	; () banked
  5257  000A56  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5258  000A5A  EC28  F009         	call	___ftmul	;wreg free
  5259  000A5E  D15A               	goto	L10
  5260  000A60                     l4408:
  5261                           
  5262                           ;doprnt.c: 432: else if(scl > 10)
  5263  000A60  0100               	movlb	0	; () banked
  5264  000A62  5172               	movf	scale@scl& (0+255),w,b
  5265  000A64  0A80               	xorlw	128
  5266  000A66  0F75               	addlw	-139
  5267  000A68  A0D8               	btfss	status,0,c
  5268  000A6A  D055               	goto	l4414
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5272  000A6C  0E00               	movlw	0
  5273  000A6E  6E22               	movwf	___awdiv@divisor+1,c
  5274  000A70  0E0A               	movlw	10
  5275  000A72  6E21               	movwf	___awdiv@divisor,c
  5276  000A74  0100               	movlb	0	; () banked
  5277  000A76  5172               	movf	scale@scl& (0+255),w,b
  5278  000A78  6E1F               	movwf	___awdiv@dividend,c
  5279  000A7A  6A20               	clrf	___awdiv@dividend+1,c
  5280  000A7C  BE1F               	btfsc	___awdiv@dividend,7,c
  5281  000A7E  0620               	decf	___awdiv@dividend+1,f,c
  5282  000A80  ECA8  F00D         	call	___awdiv	;wreg free
  5283  000A84  0E09               	movlw	9
  5284  000A86  241F               	addwf	?___awdiv,w,c
  5285  000A88  6E27               	movwf	___wmul@multiplier,c
  5286  000A8A  0E00               	movlw	0
  5287  000A8C  2020               	addwfc	?___awdiv+1,w,c
  5288  000A8E  6E28               	movwf	___wmul@multiplier+1,c
  5289  000A90  0E00               	movlw	0
  5290  000A92  6E2A               	movwf	___wmul@multiplicand+1,c
  5291  000A94  0E03               	movlw	3
  5292  000A96  6E29               	movwf	___wmul@multiplicand,c
  5293  000A98  ECB5  F012         	call	___wmul	;wreg free
  5294  000A9C  0EF3               	movlw	low __npowers_
  5295  000A9E  2427               	addwf	?___wmul,w,c
  5296  000AA0  6EF6               	movwf	tblptrl,c
  5297  000AA2  0E7E               	movlw	high __npowers_
  5298  000AA4  2028               	addwfc	?___wmul+1,w,c
  5299  000AA6  6EF7               	movwf	tblptrh,c
  5300  000AA8                     	if	0	;There are less than 3 active tblptr bytes
  5301  000AA8                     	endif
  5302  000AA8  0009               	tblrd		*+
  5303  000AAA  0100               	movlb	0	; () banked
  5304  000AAC  CFF5 F060          	movff	tablat,___ftmul@f1
  5305  000AB0  0009               	tblrd		*+
  5306  000AB2  0100               	movlb	0	; () banked
  5307  000AB4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5308  000AB8  000A               	tblrd		*-
  5309  000ABA  0100               	movlb	0	; () banked
  5310  000ABC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5311  000AC0  0E00               	movlw	0
  5312  000AC2  6E2A               	movwf	___wmul@multiplicand+1,c
  5313  000AC4  0E03               	movlw	3
  5314  000AC6  6E29               	movwf	___wmul@multiplicand,c
  5315  000AC8  0E00               	movlw	0
  5316  000ACA  6E1C               	movwf	___awmod@divisor+1,c
  5317  000ACC  0E0A               	movlw	10
  5318  000ACE  6E1B               	movwf	___awmod@divisor,c
  5319  000AD0  0100               	movlb	0	; () banked
  5320  000AD2  5172               	movf	scale@scl& (0+255),w,b
  5321  000AD4  6E19               	movwf	___awmod@dividend,c
  5322  000AD6  6A1A               	clrf	___awmod@dividend+1,c
  5323  000AD8  BE19               	btfsc	___awmod@dividend,7,c
  5324  000ADA  061A               	decf	___awmod@dividend+1,f,c
  5325  000ADC  EC8F  F00E         	call	___awmod	;wreg free
  5326  000AE0  C019  F027         	movff	?___awmod,___wmul@multiplier
  5327  000AE4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5328  000AE8  ECB5  F012         	call	___wmul	;wreg free
  5329  000AEC  0EF3               	movlw	low __npowers_
  5330  000AEE  2427               	addwf	?___wmul,w,c
  5331  000AF0  6EF6               	movwf	tblptrl,c
  5332  000AF2  0E7E               	movlw	high __npowers_
  5333  000AF4  2028               	addwfc	?___wmul+1,w,c
  5334  000AF6  6EF7               	movwf	tblptrh,c
  5335  000AF8                     	if	0	;There are less than 3 active tblptr bytes
  5336  000AF8                     	endif
  5337  000AF8  0009               	tblrd		*+
  5338  000AFA  0100               	movlb	0	; () banked
  5339  000AFC  CFF5 F063          	movff	tablat,___ftmul@f2
  5340  000B00  0009               	tblrd		*+
  5341  000B02  0100               	movlb	0	; () banked
  5342  000B04  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5343  000B08  000A               	tblrd		*-
  5344  000B0A  0100               	movlb	0	; () banked
  5345  000B0C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5346  000B10  EC28  F009         	call	___ftmul	;wreg free
  5347  000B14  D0FF               	goto	L10
  5348  000B16                     l4414:
  5349                           
  5350                           ;doprnt.c: 434: return _npowers_[scl];
  5351  000B16  0100               	movlb	0	; () banked
  5352  000B18  5172               	movf	scale@scl& (0+255),w,b
  5353  000B1A  0D03               	mullw	3
  5354  000B1C  0EF3               	movlw	low __npowers_
  5355  000B1E  24F3               	addwf	prodl,w,c
  5356  000B20  6EF6               	movwf	tblptrl,c
  5357  000B22  0E7E               	movlw	high __npowers_
  5358  000B24  D105               	goto	L9
  5359  000B26                     l4418:
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;doprnt.c: 435: }
  5363                           ;doprnt.c: 436: if(scl>=110)
  5364  000B26  0100               	movlb	0	; () banked
  5365  000B28  5172               	movf	scale@scl& (0+255),w,b
  5366  000B2A  0A80               	xorlw	128
  5367  000B2C  0F12               	addlw	-238
  5368  000B2E  A0D8               	btfss	status,0,c
  5369  000B30  D097               	goto	l4426
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5373  000B32  0E00               	movlw	0
  5374  000B34  6E2A               	movwf	___wmul@multiplicand+1,c
  5375  000B36  0E03               	movlw	3
  5376  000B38  6E29               	movwf	___wmul@multiplicand,c
  5377  000B3A  0E00               	movlw	0
  5378  000B3C  6E22               	movwf	___awdiv@divisor+1,c
  5379  000B3E  0E0A               	movlw	10
  5380  000B40  6E21               	movwf	___awdiv@divisor,c
  5381  000B42  0E00               	movlw	0
  5382  000B44  6E1C               	movwf	___awmod@divisor+1,c
  5383  000B46  0E64               	movlw	100
  5384  000B48  6E1B               	movwf	___awmod@divisor,c
  5385  000B4A  0100               	movlb	0	; () banked
  5386  000B4C  5172               	movf	scale@scl& (0+255),w,b
  5387  000B4E  6E19               	movwf	___awmod@dividend,c
  5388  000B50  6A1A               	clrf	___awmod@dividend+1,c
  5389  000B52  BE19               	btfsc	___awmod@dividend,7,c
  5390  000B54  061A               	decf	___awmod@dividend+1,f,c
  5391  000B56  EC8F  F00E         	call	___awmod	;wreg free
  5392  000B5A  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5393  000B5E  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5394  000B62  ECA8  F00D         	call	___awdiv	;wreg free
  5395  000B66  0E09               	movlw	9
  5396  000B68  241F               	addwf	?___awdiv,w,c
  5397  000B6A  6E27               	movwf	___wmul@multiplier,c
  5398  000B6C  0E00               	movlw	0
  5399  000B6E  2020               	addwfc	?___awdiv+1,w,c
  5400  000B70  6E28               	movwf	___wmul@multiplier+1,c
  5401  000B72  ECB5  F012         	call	___wmul	;wreg free
  5402  000B76  0E1A               	movlw	low __powers_
  5403  000B78  2427               	addwf	?___wmul,w,c
  5404  000B7A  6EF6               	movwf	tblptrl,c
  5405  000B7C  0E7F               	movlw	high __powers_
  5406  000B7E  2028               	addwfc	?___wmul+1,w,c
  5407  000B80  6EF7               	movwf	tblptrh,c
  5408  000B82                     	if	0	;There are less than 3 active tblptr bytes
  5409  000B82                     	endif
  5410  000B82  0009               	tblrd		*+
  5411  000B84  0100               	movlb	0	; () banked
  5412  000B86  CFF5 F063          	movff	tablat,___ftmul@f2
  5413  000B8A  0009               	tblrd		*+
  5414  000B8C  0100               	movlb	0	; () banked
  5415  000B8E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5416  000B92  000A               	tblrd		*-
  5417  000B94  0100               	movlb	0	; () banked
  5418  000B96  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5419  000B9A  0E00               	movlw	0
  5420  000B9C  6E22               	movwf	___awdiv@divisor+1,c
  5421  000B9E  0E64               	movlw	100
  5422  000BA0  6E21               	movwf	___awdiv@divisor,c
  5423  000BA2  0100               	movlb	0	; () banked
  5424  000BA4  5172               	movf	scale@scl& (0+255),w,b
  5425  000BA6  6E1F               	movwf	___awdiv@dividend,c
  5426  000BA8  6A20               	clrf	___awdiv@dividend+1,c
  5427  000BAA  BE1F               	btfsc	___awdiv@dividend,7,c
  5428  000BAC  0620               	decf	___awdiv@dividend+1,f,c
  5429  000BAE  ECA8  F00D         	call	___awdiv	;wreg free
  5430  000BB2  0E12               	movlw	18
  5431  000BB4  241F               	addwf	?___awdiv,w,c
  5432  000BB6  6E27               	movwf	___wmul@multiplier,c
  5433  000BB8  0E00               	movlw	0
  5434  000BBA  2020               	addwfc	?___awdiv+1,w,c
  5435  000BBC  6E28               	movwf	___wmul@multiplier+1,c
  5436  000BBE  0E00               	movlw	0
  5437  000BC0  6E2A               	movwf	___wmul@multiplicand+1,c
  5438  000BC2  0E03               	movlw	3
  5439  000BC4  6E29               	movwf	___wmul@multiplicand,c
  5440  000BC6  ECB5  F012         	call	___wmul	;wreg free
  5441  000BCA  0E1A               	movlw	low __powers_
  5442  000BCC  2427               	addwf	?___wmul,w,c
  5443  000BCE  6EF6               	movwf	tblptrl,c
  5444  000BD0  0E7F               	movlw	high __powers_
  5445  000BD2  2028               	addwfc	?___wmul+1,w,c
  5446  000BD4  6EF7               	movwf	tblptrh,c
  5447  000BD6                     	if	0	;There are less than 3 active tblptr bytes
  5448  000BD6                     	endif
  5449  000BD6  0009               	tblrd		*+
  5450  000BD8  0100               	movlb	0	; () banked
  5451  000BDA  CFF5 F060          	movff	tablat,___ftmul@f1
  5452  000BDE  0009               	tblrd		*+
  5453  000BE0  0100               	movlb	0	; () banked
  5454  000BE2  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5455  000BE6  000A               	tblrd		*-
  5456  000BE8  0100               	movlb	0	; () banked
  5457  000BEA  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5458  000BEE  EC28  F009         	call	___ftmul	;wreg free
  5459  000BF2  C060  F06F         	movff	?___ftmul,_scale$2150
  5460  000BF6  C061  F070         	movff	?___ftmul+1,_scale$2150+1
  5461  000BFA  C062  F071         	movff	?___ftmul+2,_scale$2150+2
  5462                           
  5463                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5464  000BFE  C06F  F060         	movff	_scale$2150,___ftmul@f1
  5465  000C02  C070  F061         	movff	_scale$2150+1,___ftmul@f1+1
  5466  000C06  C071  F062         	movff	_scale$2150+2,___ftmul@f1+2
  5467  000C0A  0E00               	movlw	0
  5468  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  5469  000C0E  0E03               	movlw	3
  5470  000C10  6E29               	movwf	___wmul@multiplicand,c
  5471  000C12  0E00               	movlw	0
  5472  000C14  6E1C               	movwf	___awmod@divisor+1,c
  5473  000C16  0E0A               	movlw	10
  5474  000C18  6E1B               	movwf	___awmod@divisor,c
  5475  000C1A  0100               	movlb	0	; () banked
  5476  000C1C  5172               	movf	scale@scl& (0+255),w,b
  5477  000C1E  6E19               	movwf	___awmod@dividend,c
  5478  000C20  6A1A               	clrf	___awmod@dividend+1,c
  5479  000C22  BE19               	btfsc	___awmod@dividend,7,c
  5480  000C24  061A               	decf	___awmod@dividend+1,f,c
  5481  000C26  EC8F  F00E         	call	___awmod	;wreg free
  5482  000C2A  C019  F027         	movff	?___awmod,___wmul@multiplier
  5483  000C2E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5484  000C32  ECB5  F012         	call	___wmul	;wreg free
  5485  000C36  0E1A               	movlw	low __powers_
  5486  000C38  2427               	addwf	?___wmul,w,c
  5487  000C3A  6EF6               	movwf	tblptrl,c
  5488  000C3C  0E7F               	movlw	high __powers_
  5489  000C3E  2028               	addwfc	?___wmul+1,w,c
  5490  000C40  6EF7               	movwf	tblptrh,c
  5491  000C42                     	if	0	;There are less than 3 active tblptr bytes
  5492  000C42                     	endif
  5493  000C42  0009               	tblrd		*+
  5494  000C44  0100               	movlb	0	; () banked
  5495  000C46  CFF5 F063          	movff	tablat,___ftmul@f2
  5496  000C4A  0009               	tblrd		*+
  5497  000C4C  0100               	movlb	0	; () banked
  5498  000C4E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5499  000C52  000A               	tblrd		*-
  5500  000C54  0100               	movlb	0	; () banked
  5501  000C56  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5502  000C5A  EC28  F009         	call	___ftmul	;wreg free
  5503  000C5E  D05A               	goto	L10
  5504  000C60                     l4426:
  5505                           
  5506                           ;doprnt.c: 438: else if(scl > 10)
  5507  000C60  0100               	movlb	0	; () banked
  5508  000C62  5172               	movf	scale@scl& (0+255),w,b
  5509  000C64  0A80               	xorlw	128
  5510  000C66  0F75               	addlw	-139
  5511  000C68  A0D8               	btfss	status,0,c
  5512  000C6A  D05B               	goto	l4432
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5516  000C6C  0E00               	movlw	0
  5517  000C6E  6E22               	movwf	___awdiv@divisor+1,c
  5518  000C70  0E0A               	movlw	10
  5519  000C72  6E21               	movwf	___awdiv@divisor,c
  5520  000C74  0100               	movlb	0	; () banked
  5521  000C76  5172               	movf	scale@scl& (0+255),w,b
  5522  000C78  6E1F               	movwf	___awdiv@dividend,c
  5523  000C7A  6A20               	clrf	___awdiv@dividend+1,c
  5524  000C7C  BE1F               	btfsc	___awdiv@dividend,7,c
  5525  000C7E  0620               	decf	___awdiv@dividend+1,f,c
  5526  000C80  ECA8  F00D         	call	___awdiv	;wreg free
  5527  000C84  0E09               	movlw	9
  5528  000C86  241F               	addwf	?___awdiv,w,c
  5529  000C88  6E27               	movwf	___wmul@multiplier,c
  5530  000C8A  0E00               	movlw	0
  5531  000C8C  2020               	addwfc	?___awdiv+1,w,c
  5532  000C8E  6E28               	movwf	___wmul@multiplier+1,c
  5533  000C90  0E00               	movlw	0
  5534  000C92  6E2A               	movwf	___wmul@multiplicand+1,c
  5535  000C94  0E03               	movlw	3
  5536  000C96  6E29               	movwf	___wmul@multiplicand,c
  5537  000C98  ECB5  F012         	call	___wmul	;wreg free
  5538  000C9C  0E1A               	movlw	low __powers_
  5539  000C9E  2427               	addwf	?___wmul,w,c
  5540  000CA0  6EF6               	movwf	tblptrl,c
  5541  000CA2  0E7F               	movlw	high __powers_
  5542  000CA4  2028               	addwfc	?___wmul+1,w,c
  5543  000CA6  6EF7               	movwf	tblptrh,c
  5544  000CA8                     	if	0	;There are less than 3 active tblptr bytes
  5545  000CA8                     	endif
  5546  000CA8  0009               	tblrd		*+
  5547  000CAA  0100               	movlb	0	; () banked
  5548  000CAC  CFF5 F060          	movff	tablat,___ftmul@f1
  5549  000CB0  0009               	tblrd		*+
  5550  000CB2  0100               	movlb	0	; () banked
  5551  000CB4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5552  000CB8  000A               	tblrd		*-
  5553  000CBA  0100               	movlb	0	; () banked
  5554  000CBC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5555  000CC0  0E00               	movlw	0
  5556  000CC2  6E2A               	movwf	___wmul@multiplicand+1,c
  5557  000CC4  0E03               	movlw	3
  5558  000CC6  6E29               	movwf	___wmul@multiplicand,c
  5559  000CC8  0E00               	movlw	0
  5560  000CCA  6E1C               	movwf	___awmod@divisor+1,c
  5561  000CCC  0E0A               	movlw	10
  5562  000CCE  6E1B               	movwf	___awmod@divisor,c
  5563  000CD0  0100               	movlb	0	; () banked
  5564  000CD2  5172               	movf	scale@scl& (0+255),w,b
  5565  000CD4  6E19               	movwf	___awmod@dividend,c
  5566  000CD6  6A1A               	clrf	___awmod@dividend+1,c
  5567  000CD8  BE19               	btfsc	___awmod@dividend,7,c
  5568  000CDA  061A               	decf	___awmod@dividend+1,f,c
  5569  000CDC  EC8F  F00E         	call	___awmod	;wreg free
  5570  000CE0  C019  F027         	movff	?___awmod,___wmul@multiplier
  5571  000CE4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5572  000CE8  ECB5  F012         	call	___wmul	;wreg free
  5573  000CEC  0E1A               	movlw	low __powers_
  5574  000CEE  2427               	addwf	?___wmul,w,c
  5575  000CF0  6EF6               	movwf	tblptrl,c
  5576  000CF2  0E7F               	movlw	high __powers_
  5577  000CF4  2028               	addwfc	?___wmul+1,w,c
  5578  000CF6  6EF7               	movwf	tblptrh,c
  5579  000CF8                     	if	0	;There are less than 3 active tblptr bytes
  5580  000CF8                     	endif
  5581  000CF8  0009               	tblrd		*+
  5582  000CFA  0100               	movlb	0	; () banked
  5583  000CFC  CFF5 F063          	movff	tablat,___ftmul@f2
  5584  000D00  0009               	tblrd		*+
  5585  000D02  0100               	movlb	0	; () banked
  5586  000D04  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5587  000D08  000A               	tblrd		*-
  5588  000D0A  0100               	movlb	0	; () banked
  5589  000D0C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5590  000D10  EC28  F009         	call	___ftmul	;wreg free
  5591  000D14                     L10:
  5592  000D14  C060  F06C         	movff	?___ftmul,?_scale
  5593  000D18  C061  F06D         	movff	?___ftmul+1,?_scale+1
  5594  000D1C  C062  F06E         	movff	?___ftmul+2,?_scale+2
  5595  000D20  D015               	goto	l419
  5596  000D22                     l4432:
  5597                           
  5598                           ;doprnt.c: 440: return _powers_[scl];
  5599  000D22  0100               	movlb	0	; () banked
  5600  000D24  5172               	movf	scale@scl& (0+255),w,b
  5601  000D26  0D03               	mullw	3
  5602  000D28  0E1A               	movlw	low __powers_
  5603  000D2A  24F3               	addwf	prodl,w,c
  5604  000D2C  6EF6               	movwf	tblptrl,c
  5605  000D2E  0E7F               	movlw	high __powers_
  5606  000D30                     L9:
  5607  000D30  20F4               	addwfc	prodh,w,c
  5608  000D32  6EF7               	movwf	tblptrh,c
  5609  000D34                     	if	0	;There are less than 3 active tblptr bytes
  5610  000D34                     	endif
  5611  000D34  0009               	tblrd		*+
  5612  000D36  0100               	movlb	0	; () banked
  5613  000D38  CFF5 F06C          	movff	tablat,?_scale
  5614  000D3C  0009               	tblrd		*+
  5615  000D3E  0100               	movlb	0	; () banked
  5616  000D40  CFF5 F06D          	movff	tablat,?_scale+1
  5617  000D44  000A               	tblrd		*-
  5618  000D46  0100               	movlb	0	; () banked
  5619  000D48  CFF5 F06E          	movff	tablat,?_scale+2
  5620  000D4C                     l419:
  5621  000D4C  0012               	return	
  5622  000D4E                     __end_of_scale:
  5623                           	opt stack 0
  5624                           tblptru	equ	0xFF8
  5625                           tblptrh	equ	0xFF7
  5626                           tblptrl	equ	0xFF6
  5627                           tablat	equ	0xFF5
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           indf0	equ	0xFEF
  5632                           postinc0	equ	0xFEE
  5633                           fsr0h	equ	0xFEA
  5634                           fsr0l	equ	0xFE9
  5635                           wreg	equ	0xFE8
  5636                           postinc1	equ	0xFE6
  5637                           postdec1	equ	0xFE5
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _fround *****************
  5647 ;; Defined at:
  5648 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  prec            1    wreg     unsigned char 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  prec            1   21[BANK0 ] unsigned char 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  3   12[BANK0 ] unsigned char 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5662 ;;      Params:         0       3       0       0       0       0       0       0       0
  5663 ;;      Locals:         0       7       0       0       0       0       0       0       0
  5664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5665 ;;      Totals:         0      10       0       0       0       0       0       0       0
  5666 ;;Total ram usage:       10 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    6
  5669 ;; This function calls:
  5670 ;;		___awdiv
  5671 ;;		___awmod
  5672 ;;		___ftmul
  5673 ;;		___wmul
  5674 ;; This function is called by:
  5675 ;;		_sprintf
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text23
  5680  000D4E                     __ptext23:
  5681                           	opt stack 0
  5682  000D4E                     _fround:
  5683                           	opt stack 21
  5684                           
  5685                           ;incstack = 0
  5686                           ;fround@prec stored from wreg
  5687  000D4E  0100               	movlb	0	; () banked
  5688  000D50  6F75               	movwf	fround@prec& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;doprnt.c: 413: if(prec>=110)
  5692  000D52  0E6D               	movlw	109
  5693  000D54  0100               	movlb	0	; () banked
  5694  000D56  6575               	cpfsgt	fround@prec& (0+255),b
  5695  000D58  D0A8               	goto	l4386
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5699  000D5A  0E00               	movlw	0
  5700  000D5C  6E2A               	movwf	___wmul@multiplicand+1,c
  5701  000D5E  0E03               	movlw	3
  5702  000D60  6E29               	movwf	___wmul@multiplicand,c
  5703  000D62  0E00               	movlw	0
  5704  000D64  6E22               	movwf	___awdiv@divisor+1,c
  5705  000D66  0E0A               	movlw	10
  5706  000D68  6E21               	movwf	___awdiv@divisor,c
  5707  000D6A  0E00               	movlw	0
  5708  000D6C  6E1C               	movwf	___awmod@divisor+1,c
  5709  000D6E  0E64               	movlw	100
  5710  000D70  6E1B               	movwf	___awmod@divisor,c
  5711  000D72  0100               	movlb	0	; () banked
  5712  000D74  C075  F019         	movff	fround@prec,___awmod@dividend
  5713  000D78  6A1A               	clrf	___awmod@dividend+1,c
  5714  000D7A  EC8F  F00E         	call	___awmod	;wreg free
  5715  000D7E  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5716  000D82  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5717  000D86  ECA8  F00D         	call	___awdiv	;wreg free
  5718  000D8A  0E09               	movlw	9
  5719  000D8C  241F               	addwf	?___awdiv,w,c
  5720  000D8E  6E27               	movwf	___wmul@multiplier,c
  5721  000D90  0E00               	movlw	0
  5722  000D92  2020               	addwfc	?___awdiv+1,w,c
  5723  000D94  6E28               	movwf	___wmul@multiplier+1,c
  5724  000D96  ECB5  F012         	call	___wmul	;wreg free
  5725  000D9A  0EF3               	movlw	low __npowers_
  5726  000D9C  2427               	addwf	?___wmul,w,c
  5727  000D9E  6EF6               	movwf	tblptrl,c
  5728  000DA0  0E7E               	movlw	high __npowers_
  5729  000DA2  2028               	addwfc	?___wmul+1,w,c
  5730  000DA4  6EF7               	movwf	tblptrh,c
  5731  000DA6                     	if	0	;There are less than 3 active tblptr bytes
  5732  000DA6                     	endif
  5733  000DA6  0009               	tblrd		*+
  5734  000DA8  0100               	movlb	0	; () banked
  5735  000DAA  CFF5 F063          	movff	tablat,___ftmul@f2
  5736  000DAE  0009               	tblrd		*+
  5737  000DB0  0100               	movlb	0	; () banked
  5738  000DB2  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5739  000DB6  000A               	tblrd		*-
  5740  000DB8  0100               	movlb	0	; () banked
  5741  000DBA  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5742  000DBE  0E00               	movlw	0
  5743  000DC0  6E22               	movwf	___awdiv@divisor+1,c
  5744  000DC2  0E64               	movlw	100
  5745  000DC4  6E21               	movwf	___awdiv@divisor,c
  5746  000DC6  0100               	movlb	0	; () banked
  5747  000DC8  C075  F01F         	movff	fround@prec,___awdiv@dividend
  5748  000DCC  6A20               	clrf	___awdiv@dividend+1,c
  5749  000DCE  ECA8  F00D         	call	___awdiv	;wreg free
  5750  000DD2  0E12               	movlw	18
  5751  000DD4  241F               	addwf	?___awdiv,w,c
  5752  000DD6  6E27               	movwf	___wmul@multiplier,c
  5753  000DD8  0E00               	movlw	0
  5754  000DDA  2020               	addwfc	?___awdiv+1,w,c
  5755  000DDC  6E28               	movwf	___wmul@multiplier+1,c
  5756  000DDE  0E00               	movlw	0
  5757  000DE0  6E2A               	movwf	___wmul@multiplicand+1,c
  5758  000DE2  0E03               	movlw	3
  5759  000DE4  6E29               	movwf	___wmul@multiplicand,c
  5760  000DE6  ECB5  F012         	call	___wmul	;wreg free
  5761  000DEA  0EF3               	movlw	low __npowers_
  5762  000DEC  2427               	addwf	?___wmul,w,c
  5763  000DEE  6EF6               	movwf	tblptrl,c
  5764  000DF0  0E7E               	movlw	high __npowers_
  5765  000DF2  2028               	addwfc	?___wmul+1,w,c
  5766  000DF4  6EF7               	movwf	tblptrh,c
  5767  000DF6                     	if	0	;There are less than 3 active tblptr bytes
  5768  000DF6                     	endif
  5769  000DF6  0009               	tblrd		*+
  5770  000DF8  0100               	movlb	0	; () banked
  5771  000DFA  CFF5 F060          	movff	tablat,___ftmul@f1
  5772  000DFE  0009               	tblrd		*+
  5773  000E00  0100               	movlb	0	; () banked
  5774  000E02  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5775  000E06  000A               	tblrd		*-
  5776  000E08  0100               	movlb	0	; () banked
  5777  000E0A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5778  000E0E  EC28  F009         	call	___ftmul	;wreg free
  5779  000E12  C060  F072         	movff	?___ftmul,_fround$2148
  5780  000E16  C061  F073         	movff	?___ftmul+1,_fround$2148+1
  5781  000E1A  C062  F074         	movff	?___ftmul+2,_fround$2148+2
  5782                           
  5783                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5784  000E1E  0E00               	movlw	0
  5785  000E20  6E2A               	movwf	___wmul@multiplicand+1,c
  5786  000E22  0E03               	movlw	3
  5787  000E24  6E29               	movwf	___wmul@multiplicand,c
  5788  000E26  0E00               	movlw	0
  5789  000E28  6E1C               	movwf	___awmod@divisor+1,c
  5790  000E2A  0E0A               	movlw	10
  5791  000E2C  6E1B               	movwf	___awmod@divisor,c
  5792  000E2E  0100               	movlb	0	; () banked
  5793  000E30  C075  F019         	movff	fround@prec,___awmod@dividend
  5794  000E34  6A1A               	clrf	___awmod@dividend+1,c
  5795  000E36  EC8F  F00E         	call	___awmod	;wreg free
  5796  000E3A  C019  F027         	movff	?___awmod,___wmul@multiplier
  5797  000E3E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5798  000E42  ECB5  F012         	call	___wmul	;wreg free
  5799  000E46  0EF3               	movlw	low __npowers_
  5800  000E48  2427               	addwf	?___wmul,w,c
  5801  000E4A  6EF6               	movwf	tblptrl,c
  5802  000E4C  0E7E               	movlw	high __npowers_
  5803  000E4E  2028               	addwfc	?___wmul+1,w,c
  5804  000E50  6EF7               	movwf	tblptrh,c
  5805  000E52                     	if	0	;There are less than 3 active tblptr bytes
  5806  000E52                     	endif
  5807  000E52  0009               	tblrd		*+
  5808  000E54  0100               	movlb	0	; () banked
  5809  000E56  CFF5 F063          	movff	tablat,___ftmul@f2
  5810  000E5A  0009               	tblrd		*+
  5811  000E5C  0100               	movlb	0	; () banked
  5812  000E5E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5813  000E62  000A               	tblrd		*-
  5814  000E64  0100               	movlb	0	; () banked
  5815  000E66  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5816  000E6A  C072  F060         	movff	_fround$2148,___ftmul@f1
  5817  000E6E  C073  F061         	movff	_fround$2148+1,___ftmul@f1+1
  5818  000E72  C074  F062         	movff	_fround$2148+2,___ftmul@f1+2
  5819  000E76  EC28  F009         	call	___ftmul	;wreg free
  5820  000E7A  C060  F06F         	movff	?___ftmul,_fround$2149
  5821  000E7E  C061  F070         	movff	?___ftmul+1,_fround$2149+1
  5822  000E82  C062  F071         	movff	?___ftmul+2,_fround$2149+2
  5823                           
  5824                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5825  000E86  C06F  F060         	movff	_fround$2149,___ftmul@f1
  5826  000E8A  C070  F061         	movff	_fround$2149+1,___ftmul@f1+1
  5827  000E8E  C071  F062         	movff	_fround$2149+2,___ftmul@f1+2
  5828  000E92  0E00               	movlw	0
  5829  000E94  0100               	movlb	0	; () banked
  5830  000E96  6F63               	movwf	___ftmul@f2& (0+255),b
  5831  000E98  0E00               	movlw	0
  5832  000E9A  0100               	movlb	0	; () banked
  5833  000E9C  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5834  000E9E  0E3F               	movlw	63
  5835  000EA0  0100               	movlb	0	; () banked
  5836  000EA2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5837  000EA4  EC28  F009         	call	___ftmul	;wreg free
  5838  000EA8  D08C               	goto	L12
  5839  000EAA                     l4386:
  5840                           
  5841                           ;doprnt.c: 415: else if(prec > 10)
  5842  000EAA  0E0A               	movlw	10
  5843  000EAC  0100               	movlb	0	; () banked
  5844  000EAE  6575               	cpfsgt	fround@prec& (0+255),b
  5845  000EB0  D068               	goto	l4394
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5849  000EB2  0E00               	movlw	0
  5850  000EB4  6E2A               	movwf	___wmul@multiplicand+1,c
  5851  000EB6  0E03               	movlw	3
  5852  000EB8  6E29               	movwf	___wmul@multiplicand,c
  5853  000EBA  0E00               	movlw	0
  5854  000EBC  6E1C               	movwf	___awmod@divisor+1,c
  5855  000EBE  0E0A               	movlw	10
  5856  000EC0  6E1B               	movwf	___awmod@divisor,c
  5857  000EC2  0100               	movlb	0	; () banked
  5858  000EC4  C075  F019         	movff	fround@prec,___awmod@dividend
  5859  000EC8  6A1A               	clrf	___awmod@dividend+1,c
  5860  000ECA  EC8F  F00E         	call	___awmod	;wreg free
  5861  000ECE  C019  F027         	movff	?___awmod,___wmul@multiplier
  5862  000ED2  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5863  000ED6  ECB5  F012         	call	___wmul	;wreg free
  5864  000EDA  0EF3               	movlw	low __npowers_
  5865  000EDC  2427               	addwf	?___wmul,w,c
  5866  000EDE  6EF6               	movwf	tblptrl,c
  5867  000EE0  0E7E               	movlw	high __npowers_
  5868  000EE2  2028               	addwfc	?___wmul+1,w,c
  5869  000EE4  6EF7               	movwf	tblptrh,c
  5870  000EE6                     	if	0	;There are less than 3 active tblptr bytes
  5871  000EE6                     	endif
  5872  000EE6  0009               	tblrd		*+
  5873  000EE8  0100               	movlb	0	; () banked
  5874  000EEA  CFF5 F063          	movff	tablat,___ftmul@f2
  5875  000EEE  0009               	tblrd		*+
  5876  000EF0  0100               	movlb	0	; () banked
  5877  000EF2  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5878  000EF6  000A               	tblrd		*-
  5879  000EF8  0100               	movlb	0	; () banked
  5880  000EFA  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5881  000EFE  0E00               	movlw	0
  5882  000F00  6E22               	movwf	___awdiv@divisor+1,c
  5883  000F02  0E0A               	movlw	10
  5884  000F04  6E21               	movwf	___awdiv@divisor,c
  5885  000F06  0100               	movlb	0	; () banked
  5886  000F08  C075  F01F         	movff	fround@prec,___awdiv@dividend
  5887  000F0C  6A20               	clrf	___awdiv@dividend+1,c
  5888  000F0E  ECA8  F00D         	call	___awdiv	;wreg free
  5889  000F12  0E09               	movlw	9
  5890  000F14  241F               	addwf	?___awdiv,w,c
  5891  000F16  6E27               	movwf	___wmul@multiplier,c
  5892  000F18  0E00               	movlw	0
  5893  000F1A  2020               	addwfc	?___awdiv+1,w,c
  5894  000F1C  6E28               	movwf	___wmul@multiplier+1,c
  5895  000F1E  0E00               	movlw	0
  5896  000F20  6E2A               	movwf	___wmul@multiplicand+1,c
  5897  000F22  0E03               	movlw	3
  5898  000F24  6E29               	movwf	___wmul@multiplicand,c
  5899  000F26  ECB5  F012         	call	___wmul	;wreg free
  5900  000F2A  0EF3               	movlw	low __npowers_
  5901  000F2C  2427               	addwf	?___wmul,w,c
  5902  000F2E  6EF6               	movwf	tblptrl,c
  5903  000F30  0E7E               	movlw	high __npowers_
  5904  000F32  2028               	addwfc	?___wmul+1,w,c
  5905  000F34  6EF7               	movwf	tblptrh,c
  5906  000F36                     	if	0	;There are less than 3 active tblptr bytes
  5907  000F36                     	endif
  5908  000F36  0009               	tblrd		*+
  5909  000F38  0100               	movlb	0	; () banked
  5910  000F3A  CFF5 F060          	movff	tablat,___ftmul@f1
  5911  000F3E  0009               	tblrd		*+
  5912  000F40  0100               	movlb	0	; () banked
  5913  000F42  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5914  000F46  000A               	tblrd		*-
  5915  000F48  0100               	movlb	0	; () banked
  5916  000F4A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5917  000F4E  EC28  F009         	call	___ftmul	;wreg free
  5918  000F52  C060  F072         	movff	?___ftmul,_fround$2148
  5919  000F56  C061  F073         	movff	?___ftmul+1,_fround$2148+1
  5920  000F5A  C062  F074         	movff	?___ftmul+2,_fround$2148+2
  5921                           
  5922                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5923  000F5E  C072  F060         	movff	_fround$2148,___ftmul@f1
  5924  000F62  C073  F061         	movff	_fround$2148+1,___ftmul@f1+1
  5925  000F66  C074  F062         	movff	_fround$2148+2,___ftmul@f1+2
  5926  000F6A  0E00               	movlw	0
  5927  000F6C  0100               	movlb	0	; () banked
  5928  000F6E  6F63               	movwf	___ftmul@f2& (0+255),b
  5929  000F70  0E00               	movlw	0
  5930  000F72  0100               	movlb	0	; () banked
  5931  000F74  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5932  000F76  0E3F               	movlw	63
  5933  000F78  0100               	movlb	0	; () banked
  5934  000F7A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5935  000F7C  EC28  F009         	call	___ftmul	;wreg free
  5936  000F80  D020               	goto	L12
  5937  000F82                     l4394:
  5938                           
  5939                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5940  000F82  0100               	movlb	0	; () banked
  5941  000F84  5175               	movf	fround@prec& (0+255),w,b
  5942  000F86  0D03               	mullw	3
  5943  000F88  0EF3               	movlw	low __npowers_
  5944  000F8A  24F3               	addwf	prodl,w,c
  5945  000F8C  6EF6               	movwf	tblptrl,c
  5946  000F8E  0E7E               	movlw	high __npowers_
  5947  000F90  20F4               	addwfc	prodh,w,c
  5948  000F92  6EF7               	movwf	tblptrh,c
  5949  000F94                     	if	0	;There are less than 3 active tblptr bytes
  5950  000F94                     	endif
  5951  000F94  0009               	tblrd		*+
  5952  000F96  0100               	movlb	0	; () banked
  5953  000F98  CFF5 F060          	movff	tablat,___ftmul@f1
  5954  000F9C  0009               	tblrd		*+
  5955  000F9E  0100               	movlb	0	; () banked
  5956  000FA0  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5957  000FA4  000A               	tblrd		*-
  5958  000FA6  0100               	movlb	0	; () banked
  5959  000FA8  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5960  000FAC  0E00               	movlw	0
  5961  000FAE  0100               	movlb	0	; () banked
  5962  000FB0  6F63               	movwf	___ftmul@f2& (0+255),b
  5963  000FB2  0E00               	movlw	0
  5964  000FB4  0100               	movlb	0	; () banked
  5965  000FB6  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  5966  000FB8  0E3F               	movlw	63
  5967  000FBA  0100               	movlb	0	; () banked
  5968  000FBC  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  5969  000FBE  EC28  F009         	call	___ftmul	;wreg free
  5970  000FC2                     L12:
  5971  000FC2  C060  F06C         	movff	?___ftmul,?_fround
  5972  000FC6  C061  F06D         	movff	?___ftmul+1,?_fround+1
  5973  000FCA  C062  F06E         	movff	?___ftmul+2,?_fround+2
  5974  000FCE  0012               	return	
  5975  000FD0                     __end_of_fround:
  5976                           	opt stack 0
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           indf0	equ	0xFEF
  5985                           postinc0	equ	0xFEE
  5986                           fsr0h	equ	0xFEA
  5987                           fsr0l	equ	0xFE9
  5988                           wreg	equ	0xFE8
  5989                           postinc1	equ	0xFE6
  5990                           postdec1	equ	0xFE5
  5991                           fsr1l	equ	0xFE1
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           postdec2	equ	0xFDD
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function ___wmul *****************
  6000 ;; Defined at:
  6001 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;  multiplier      2   38[COMRAM] unsigned int 
  6004 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  product         2   42[COMRAM] unsigned int 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  2   38[COMRAM] unsigned int 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0, prodl, prodh
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6016 ;;      Params:         4       0       0       0       0       0       0       0       0
  6017 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6019 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6020 ;;Total ram usage:        6 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    4
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_fround
  6027 ;;		_scale
  6028 ;;		_sprintf
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text24
  6033  00256A                     __ptext24:
  6034                           	opt stack 0
  6035  00256A                     ___wmul:
  6036                           	opt stack 22
  6037                           
  6038                           ;incstack = 0
  6039  00256A  5027               	movf	___wmul@multiplier,w,c
  6040  00256C  0229               	mulwf	___wmul@multiplicand,c
  6041  00256E  CFF3 F02B          	movff	prodl,___wmul@product
  6042  002572  CFF4 F02C          	movff	prodh,___wmul@product+1
  6043  002576  5027               	movf	___wmul@multiplier,w,c
  6044  002578  022A               	mulwf	___wmul@multiplicand+1,c
  6045  00257A  50F3               	movf	prodl,w,c
  6046  00257C  262C               	addwf	___wmul@product+1,f,c
  6047  00257E  5028               	movf	___wmul@multiplier+1,w,c
  6048  002580  0229               	mulwf	___wmul@multiplicand,c
  6049  002582  50F3               	movf	prodl,w,c
  6050  002584  262C               	addwf	___wmul@product+1,f,c
  6051  002586  C02B  F027         	movff	___wmul@product,?___wmul
  6052  00258A  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6053  00258E  0012               	return	
  6054  002590                     __end_of___wmul:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           indf0	equ	0xFEF
  6064                           postinc0	equ	0xFEE
  6065                           fsr0h	equ	0xFEA
  6066                           fsr0l	equ	0xFE9
  6067                           wreg	equ	0xFE8
  6068                           postinc1	equ	0xFE6
  6069                           postdec1	equ	0xFE5
  6070                           fsr1l	equ	0xFE1
  6071                           indf2	equ	0xFDF
  6072                           postinc2	equ	0xFDE
  6073                           postdec2	equ	0xFDD
  6074                           fsr2h	equ	0xFDA
  6075                           fsr2l	equ	0xFD9
  6076                           status	equ	0xFD8
  6077                           
  6078 ;; *************** function ___ftmul *****************
  6079 ;; Defined at:
  6080 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  f1              3    0[BANK0 ] float 
  6083 ;;  f2              3    3[BANK0 ] float 
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6086 ;;  sign            1   11[BANK0 ] unsigned char 
  6087 ;;  cntr            1   10[BANK0 ] unsigned char 
  6088 ;;  exp             1    6[BANK0 ] unsigned char 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  3    0[BANK0 ] float 
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, status,0, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6098 ;;      Params:         0       6       0       0       0       0       0       0       0
  6099 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6100 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6101 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6102 ;;Total ram usage:       15 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    5
  6105 ;; This function calls:
  6106 ;;		___ftpack
  6107 ;; This function is called by:
  6108 ;;		_PWM_DutyCycle1
  6109 ;;		_fround
  6110 ;;		_scale
  6111 ;;		_sprintf
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text25
  6116  001250                     __ptext25:
  6117                           	opt stack 0
  6118  001250                     ___ftmul:
  6119                           	opt stack 21
  6120                           
  6121                           ;incstack = 0
  6122  001250  0100               	movlb	0	; () banked
  6123  001252  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6124  001256  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6125  001258  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6126  00125A  0100               	movlb	0	; () banked
  6127  00125C  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6128  00125E  362D               	rlcf	??___ftmul& (0+255),f,c
  6129  001260  E301               	bnc	u4131
  6130  001262  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6131  001264                     u4131:
  6132  001264  502D               	movf	??___ftmul,w,c
  6133  001266  0100               	movlb	0	; () banked
  6134  001268  6F66               	movwf	___ftmul@exp& (0+255),b
  6135  00126A  0100               	movlb	0	; () banked
  6136  00126C  6766               	tstfsz	___ftmul@exp& (0+255),b
  6137  00126E  D001               	goto	l4158
  6138  001270  D010               	goto	u4160
  6139  001272                     l4158:
  6140                           
  6141                           ; BSR set to: 0
  6142  001272  0100               	movlb	0	; () banked
  6143  001274  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6144  001278  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6145  00127A  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6146  00127C  0100               	movlb	0	; () banked
  6147  00127E  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6148  001280  362D               	rlcf	??___ftmul& (0+255),f,c
  6149  001282  E301               	bnc	u4151
  6150  001284  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6151  001286                     u4151:
  6152  001286  502D               	movf	??___ftmul,w,c
  6153  001288  0100               	movlb	0	; () banked
  6154  00128A  6F6B               	movwf	___ftmul@sign& (0+255),b
  6155  00128C  0100               	movlb	0	; () banked
  6156  00128E  676B               	tstfsz	___ftmul@sign& (0+255),b
  6157  001290  D00A               	goto	l4164
  6158  001292                     u4160:
  6159                           
  6160                           ; BSR set to: 0
  6161  001292  0E00               	movlw	0
  6162  001294  0100               	movlb	0	; () banked
  6163  001296  6F60               	movwf	?___ftmul& (0+255),b
  6164  001298  0E00               	movlw	0
  6165  00129A  0100               	movlb	0	; () banked
  6166  00129C  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6167  00129E  0E00               	movlw	0
  6168  0012A0  0100               	movlb	0	; () banked
  6169  0012A2  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6170  0012A4  D080               	goto	l989
  6171  0012A6                     l4164:
  6172                           
  6173                           ; BSR set to: 0
  6174  0012A6  0100               	movlb	0	; () banked
  6175  0012A8  516B               	movf	___ftmul@sign& (0+255),w,b
  6176  0012AA  0F7B               	addlw	123
  6177  0012AC  0100               	movlb	0	; () banked
  6178  0012AE  2766               	addwf	___ftmul@exp& (0+255),f,b
  6179                           
  6180                           ; BSR set to: 0
  6181  0012B0  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6182  0012B4  0100               	movlb	0	; () banked
  6183  0012B6  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6184  0012B8  0100               	movlb	0	; () banked
  6185  0012BA  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6186  0012BC  0E80               	movlw	128
  6187  0012BE  0100               	movlb	0	; () banked
  6188  0012C0  176B               	andwf	___ftmul@sign& (0+255),f,b
  6189                           
  6190                           ; BSR set to: 0
  6191  0012C2  0100               	movlb	0	; () banked
  6192  0012C4  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6193                           
  6194                           ; BSR set to: 0
  6195  0012C6  0100               	movlb	0	; () banked
  6196  0012C8  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6197                           
  6198                           ; BSR set to: 0
  6199  0012CA  0EFF               	movlw	255
  6200  0012CC  0100               	movlb	0	; () banked
  6201  0012CE  1763               	andwf	___ftmul@f2& (0+255),f,b
  6202  0012D0  0EFF               	movlw	255
  6203  0012D2  0100               	movlb	0	; () banked
  6204  0012D4  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6205  0012D6  0E00               	movlw	0
  6206  0012D8  0100               	movlb	0	; () banked
  6207  0012DA  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6208                           
  6209                           ; BSR set to: 0
  6210  0012DC  0E00               	movlw	0
  6211  0012DE  0100               	movlb	0	; () banked
  6212  0012E0  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  6213  0012E2  0E00               	movlw	0
  6214  0012E4  0100               	movlb	0	; () banked
  6215  0012E6  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6216  0012E8  0E00               	movlw	0
  6217  0012EA  0100               	movlb	0	; () banked
  6218  0012EC  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6219                           
  6220                           ; BSR set to: 0
  6221  0012EE  0E07               	movlw	7
  6222  0012F0  0100               	movlb	0	; () banked
  6223  0012F2  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6224  0012F4                     l4178:
  6225                           
  6226                           ; BSR set to: 0
  6227  0012F4  0100               	movlb	0	; () banked
  6228  0012F6  A160               	btfss	___ftmul@f1& (0+255),0,b
  6229  0012F8  D00C               	goto	l4182
  6230                           
  6231                           ; BSR set to: 0
  6232  0012FA  0100               	movlb	0	; () banked
  6233  0012FC  5163               	movf	___ftmul@f2& (0+255),w,b
  6234  0012FE  0100               	movlb	0	; () banked
  6235  001300  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6236  001302  0100               	movlb	0	; () banked
  6237  001304  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6238  001306  0100               	movlb	0	; () banked
  6239  001308  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6240  00130A  0100               	movlb	0	; () banked
  6241  00130C  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6242  00130E  0100               	movlb	0	; () banked
  6243  001310  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6244  001312                     l4182:
  6245                           
  6246                           ; BSR set to: 0
  6247  001312  0100               	movlb	0	; () banked
  6248  001314  90D8               	bcf	status,0,c
  6249  001316  0100               	movlb	0	; () banked
  6250  001318  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6251  00131A  0100               	movlb	0	; () banked
  6252  00131C  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6253  00131E  0100               	movlb	0	; () banked
  6254  001320  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6255  001322  0100               	movlb	0	; () banked
  6256  001324  90D8               	bcf	status,0,c
  6257  001326  0100               	movlb	0	; () banked
  6258  001328  3763               	rlcf	___ftmul@f2& (0+255),f,b
  6259  00132A  0100               	movlb	0	; () banked
  6260  00132C  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6261  00132E  0100               	movlb	0	; () banked
  6262  001330  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6263                           
  6264                           ; BSR set to: 0
  6265  001332  0100               	movlb	0	; () banked
  6266  001334  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6267  001336  D7DE               	goto	l4178
  6268                           
  6269                           ; BSR set to: 0
  6270                           
  6271                           ; BSR set to: 0
  6272  001338  0E09               	movlw	9
  6273  00133A  0100               	movlb	0	; () banked
  6274  00133C  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6275  00133E                     l4188:
  6276                           
  6277                           ; BSR set to: 0
  6278  00133E  0100               	movlb	0	; () banked
  6279  001340  A160               	btfss	___ftmul@f1& (0+255),0,b
  6280  001342  D00C               	goto	l4192
  6281                           
  6282                           ; BSR set to: 0
  6283  001344  0100               	movlb	0	; () banked
  6284  001346  5163               	movf	___ftmul@f2& (0+255),w,b
  6285  001348  0100               	movlb	0	; () banked
  6286  00134A  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6287  00134C  0100               	movlb	0	; () banked
  6288  00134E  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6289  001350  0100               	movlb	0	; () banked
  6290  001352  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6291  001354  0100               	movlb	0	; () banked
  6292  001356  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6293  001358  0100               	movlb	0	; () banked
  6294  00135A  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6295  00135C                     l4192:
  6296                           
  6297                           ; BSR set to: 0
  6298  00135C  0100               	movlb	0	; () banked
  6299  00135E  90D8               	bcf	status,0,c
  6300  001360  0100               	movlb	0	; () banked
  6301  001362  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6302  001364  0100               	movlb	0	; () banked
  6303  001366  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6304  001368  0100               	movlb	0	; () banked
  6305  00136A  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6306  00136C  0100               	movlb	0	; () banked
  6307  00136E  90D8               	bcf	status,0,c
  6308  001370  0100               	movlb	0	; () banked
  6309  001372  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6310  001374  0100               	movlb	0	; () banked
  6311  001376  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6312  001378  0100               	movlb	0	; () banked
  6313  00137A  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6314                           
  6315                           ; BSR set to: 0
  6316  00137C  0100               	movlb	0	; () banked
  6317  00137E  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6318  001380  D7DE               	goto	l4188
  6319                           
  6320                           ; BSR set to: 0
  6321                           
  6322                           ; BSR set to: 0
  6323  001382  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6324  001386  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6325  00138A  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6326  00138E  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  6327  001392  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  6328  001396  EC01  F00D         	call	___ftpack	;wreg free
  6329  00139A  C019  F060         	movff	?___ftpack,?___ftmul
  6330  00139E  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  6331  0013A2  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  6332  0013A6                     l989:
  6333  0013A6  0012               	return	
  6334  0013A8                     __end_of___ftmul:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           indf0	equ	0xFEF
  6344                           postinc0	equ	0xFEE
  6345                           fsr0h	equ	0xFEA
  6346                           fsr0l	equ	0xFE9
  6347                           wreg	equ	0xFE8
  6348                           postinc1	equ	0xFE6
  6349                           postdec1	equ	0xFE5
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function ___awmod *****************
  6359 ;; Defined at:
  6360 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  dividend        2   24[COMRAM] int 
  6363 ;;  divisor         2   26[COMRAM] int 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  sign            1   29[COMRAM] unsigned char 
  6366 ;;  counter         1   28[COMRAM] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  2   24[COMRAM] int 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, prodl
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6376 ;;      Params:         4       0       0       0       0       0       0       0       0
  6377 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6379 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6380 ;;Total ram usage:        6 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    4
  6383 ;; This function calls:
  6384 ;;		Nothing
  6385 ;; This function is called by:
  6386 ;;		_fround
  6387 ;;		_scale
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text26
  6392  001D1E                     __ptext26:
  6393                           	opt stack 0
  6394  001D1E                     ___awmod:
  6395                           	opt stack 22
  6396                           
  6397                           ;incstack = 0
  6398  001D1E  0E00               	movlw	0
  6399  001D20  6E1E               	movwf	___awmod@sign,c
  6400  001D22  501A               	movf	___awmod@dividend+1,w,c
  6401  001D24  0A80               	xorlw	128
  6402  001D26  6EF3               	movwf	prodl,c
  6403  001D28  0E80               	movlw	128
  6404  001D2A  5CF3               	subwf	prodl,w,c
  6405  001D2C  0E00               	movlw	0
  6406  001D2E  B4D8               	btfsc	status,2,c
  6407  001D30  5C19               	subwf	___awmod@dividend,w,c
  6408  001D32  B0D8               	btfsc	status,0,c
  6409  001D34  D006               	goto	l4252
  6410  001D36  6C19               	negf	___awmod@dividend,c
  6411  001D38  1E1A               	comf	___awmod@dividend+1,f,c
  6412  001D3A  B0D8               	btfsc	status,0,c
  6413  001D3C  2A1A               	incf	___awmod@dividend+1,f,c
  6414  001D3E  0E01               	movlw	1
  6415  001D40  6E1E               	movwf	___awmod@sign,c
  6416  001D42                     l4252:
  6417  001D42  501C               	movf	___awmod@divisor+1,w,c
  6418  001D44  0A80               	xorlw	128
  6419  001D46  6EF3               	movwf	prodl,c
  6420  001D48  0E80               	movlw	128
  6421  001D4A  5CF3               	subwf	prodl,w,c
  6422  001D4C  0E00               	movlw	0
  6423  001D4E  B4D8               	btfsc	status,2,c
  6424  001D50  5C1B               	subwf	___awmod@divisor,w,c
  6425  001D52  B0D8               	btfsc	status,0,c
  6426  001D54  D004               	goto	l4256
  6427  001D56  6C1B               	negf	___awmod@divisor,c
  6428  001D58  1E1C               	comf	___awmod@divisor+1,f,c
  6429  001D5A  B0D8               	btfsc	status,0,c
  6430  001D5C  2A1C               	incf	___awmod@divisor+1,f,c
  6431  001D5E                     l4256:
  6432  001D5E  501C               	movf	___awmod@divisor+1,w,c
  6433  001D60  101B               	iorwf	___awmod@divisor,w,c
  6434  001D62  B4D8               	btfsc	status,2,c
  6435  001D64  D018               	goto	l4272
  6436  001D66  0E01               	movlw	1
  6437  001D68  6E1D               	movwf	___awmod@counter,c
  6438  001D6A  D004               	goto	l4262
  6439  001D6C                     l4260:
  6440  001D6C  90D8               	bcf	status,0,c
  6441  001D6E  361B               	rlcf	___awmod@divisor,f,c
  6442  001D70  361C               	rlcf	___awmod@divisor+1,f,c
  6443  001D72  2A1D               	incf	___awmod@counter,f,c
  6444  001D74                     l4262:
  6445  001D74  AE1C               	btfss	___awmod@divisor+1,7,c
  6446  001D76  D7FA               	goto	l4260
  6447  001D78                     l4264:
  6448  001D78  501B               	movf	___awmod@divisor,w,c
  6449  001D7A  5C19               	subwf	___awmod@dividend,w,c
  6450  001D7C  501C               	movf	___awmod@divisor+1,w,c
  6451  001D7E  581A               	subwfb	___awmod@dividend+1,w,c
  6452  001D80  A0D8               	btfss	status,0,c
  6453  001D82  D004               	goto	l4268
  6454  001D84  501B               	movf	___awmod@divisor,w,c
  6455  001D86  5E19               	subwf	___awmod@dividend,f,c
  6456  001D88  501C               	movf	___awmod@divisor+1,w,c
  6457  001D8A  5A1A               	subwfb	___awmod@dividend+1,f,c
  6458  001D8C                     l4268:
  6459  001D8C  90D8               	bcf	status,0,c
  6460  001D8E  321C               	rrcf	___awmod@divisor+1,f,c
  6461  001D90  321B               	rrcf	___awmod@divisor,f,c
  6462  001D92  2E1D               	decfsz	___awmod@counter,f,c
  6463  001D94  D7F1               	goto	l4264
  6464  001D96                     l4272:
  6465  001D96  501E               	movf	___awmod@sign,w,c
  6466  001D98  B4D8               	btfsc	status,2,c
  6467  001D9A  D004               	goto	l4276
  6468  001D9C  6C19               	negf	___awmod@dividend,c
  6469  001D9E  1E1A               	comf	___awmod@dividend+1,f,c
  6470  001DA0  B0D8               	btfsc	status,0,c
  6471  001DA2  2A1A               	incf	___awmod@dividend+1,f,c
  6472  001DA4                     l4276:
  6473  001DA4  C019  F019         	movff	___awmod@dividend,?___awmod
  6474  001DA8  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  6475  001DAC  0012               	return	
  6476  001DAE                     __end_of___awmod:
  6477                           	opt stack 0
  6478                           tblptru	equ	0xFF8
  6479                           tblptrh	equ	0xFF7
  6480                           tblptrl	equ	0xFF6
  6481                           tablat	equ	0xFF5
  6482                           prodh	equ	0xFF4
  6483                           prodl	equ	0xFF3
  6484                           intcon	equ	0xFF2
  6485                           indf0	equ	0xFEF
  6486                           postinc0	equ	0xFEE
  6487                           fsr0h	equ	0xFEA
  6488                           fsr0l	equ	0xFE9
  6489                           wreg	equ	0xFE8
  6490                           postinc1	equ	0xFE6
  6491                           postdec1	equ	0xFE5
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function ___awdiv *****************
  6501 ;; Defined at:
  6502 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  dividend        2   30[COMRAM] int 
  6505 ;;  divisor         2   32[COMRAM] int 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  quotient        2   36[COMRAM] int 
  6508 ;;  sign            1   35[COMRAM] unsigned char 
  6509 ;;  counter         1   34[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  2   30[COMRAM] int 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, status,0, prodl
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6519 ;;      Params:         4       0       0       0       0       0       0       0       0
  6520 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6522 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6523 ;;Total ram usage:        8 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    4
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_fround
  6530 ;;		_scale
  6531 ;;		_sprintf
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text27
  6536  001B50                     __ptext27:
  6537                           	opt stack 0
  6538  001B50                     ___awdiv:
  6539                           	opt stack 22
  6540                           
  6541                           ;incstack = 0
  6542  001B50  0E00               	movlw	0
  6543  001B52  6E24               	movwf	___awdiv@sign,c
  6544  001B54  5022               	movf	___awdiv@divisor+1,w,c
  6545  001B56  0A80               	xorlw	128
  6546  001B58  6EF3               	movwf	prodl,c
  6547  001B5A  0E80               	movlw	128
  6548  001B5C  5CF3               	subwf	prodl,w,c
  6549  001B5E  0E00               	movlw	0
  6550  001B60  B4D8               	btfsc	status,2,c
  6551  001B62  5C21               	subwf	___awdiv@divisor,w,c
  6552  001B64  B0D8               	btfsc	status,0,c
  6553  001B66  D006               	goto	l4208
  6554  001B68  6C21               	negf	___awdiv@divisor,c
  6555  001B6A  1E22               	comf	___awdiv@divisor+1,f,c
  6556  001B6C  B0D8               	btfsc	status,0,c
  6557  001B6E  2A22               	incf	___awdiv@divisor+1,f,c
  6558  001B70  0E01               	movlw	1
  6559  001B72  6E24               	movwf	___awdiv@sign,c
  6560  001B74                     l4208:
  6561  001B74  5020               	movf	___awdiv@dividend+1,w,c
  6562  001B76  0A80               	xorlw	128
  6563  001B78  6EF3               	movwf	prodl,c
  6564  001B7A  0E80               	movlw	128
  6565  001B7C  5CF3               	subwf	prodl,w,c
  6566  001B7E  0E00               	movlw	0
  6567  001B80  B4D8               	btfsc	status,2,c
  6568  001B82  5C1F               	subwf	___awdiv@dividend,w,c
  6569  001B84  B0D8               	btfsc	status,0,c
  6570  001B86  D006               	goto	l4214
  6571  001B88  6C1F               	negf	___awdiv@dividend,c
  6572  001B8A  1E20               	comf	___awdiv@dividend+1,f,c
  6573  001B8C  B0D8               	btfsc	status,0,c
  6574  001B8E  2A20               	incf	___awdiv@dividend+1,f,c
  6575  001B90  0E01               	movlw	1
  6576  001B92  1A24               	xorwf	___awdiv@sign,f,c
  6577  001B94                     l4214:
  6578  001B94  0E00               	movlw	0
  6579  001B96  6E26               	movwf	___awdiv@quotient+1,c
  6580  001B98  0E00               	movlw	0
  6581  001B9A  6E25               	movwf	___awdiv@quotient,c
  6582  001B9C  5022               	movf	___awdiv@divisor+1,w,c
  6583  001B9E  1021               	iorwf	___awdiv@divisor,w,c
  6584  001BA0  B4D8               	btfsc	status,2,c
  6585  001BA2  D01C               	goto	l4236
  6586  001BA4  0E01               	movlw	1
  6587  001BA6  6E23               	movwf	___awdiv@counter,c
  6588  001BA8  D004               	goto	l4222
  6589  001BAA                     l4220:
  6590  001BAA  90D8               	bcf	status,0,c
  6591  001BAC  3621               	rlcf	___awdiv@divisor,f,c
  6592  001BAE  3622               	rlcf	___awdiv@divisor+1,f,c
  6593  001BB0  2A23               	incf	___awdiv@counter,f,c
  6594  001BB2                     l4222:
  6595  001BB2  AE22               	btfss	___awdiv@divisor+1,7,c
  6596  001BB4  D7FA               	goto	l4220
  6597  001BB6                     l4224:
  6598  001BB6  90D8               	bcf	status,0,c
  6599  001BB8  3625               	rlcf	___awdiv@quotient,f,c
  6600  001BBA  3626               	rlcf	___awdiv@quotient+1,f,c
  6601  001BBC  5021               	movf	___awdiv@divisor,w,c
  6602  001BBE  5C1F               	subwf	___awdiv@dividend,w,c
  6603  001BC0  5022               	movf	___awdiv@divisor+1,w,c
  6604  001BC2  5820               	subwfb	___awdiv@dividend+1,w,c
  6605  001BC4  A0D8               	btfss	status,0,c
  6606  001BC6  D005               	goto	l4232
  6607  001BC8  5021               	movf	___awdiv@divisor,w,c
  6608  001BCA  5E1F               	subwf	___awdiv@dividend,f,c
  6609  001BCC  5022               	movf	___awdiv@divisor+1,w,c
  6610  001BCE  5A20               	subwfb	___awdiv@dividend+1,f,c
  6611  001BD0  8025               	bsf	___awdiv@quotient,0,c
  6612  001BD2                     l4232:
  6613  001BD2  90D8               	bcf	status,0,c
  6614  001BD4  3222               	rrcf	___awdiv@divisor+1,f,c
  6615  001BD6  3221               	rrcf	___awdiv@divisor,f,c
  6616  001BD8  2E23               	decfsz	___awdiv@counter,f,c
  6617  001BDA  D7ED               	goto	l4224
  6618  001BDC                     l4236:
  6619  001BDC  5024               	movf	___awdiv@sign,w,c
  6620  001BDE  B4D8               	btfsc	status,2,c
  6621  001BE0  D004               	goto	l4240
  6622  001BE2  6C25               	negf	___awdiv@quotient,c
  6623  001BE4  1E26               	comf	___awdiv@quotient+1,f,c
  6624  001BE6  B0D8               	btfsc	status,0,c
  6625  001BE8  2A26               	incf	___awdiv@quotient+1,f,c
  6626  001BEA                     l4240:
  6627  001BEA  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  6628  001BEE  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  6629  001BF2  0012               	return	
  6630  001BF4                     __end_of___awdiv:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           indf0	equ	0xFEF
  6640                           postinc0	equ	0xFEE
  6641                           fsr0h	equ	0xFEA
  6642                           fsr0l	equ	0xFE9
  6643                           wreg	equ	0xFE8
  6644                           postinc1	equ	0xFE6
  6645                           postdec1	equ	0xFE5
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           postinc2	equ	0xFDE
  6649                           postdec2	equ	0xFDD
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function __tdiv_to_l_ *****************
  6655 ;; Defined at:
  6656 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  f1              3   24[COMRAM] float 
  6659 ;;  f2              3   27[COMRAM] float 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  quot            4   33[COMRAM] unsigned long 
  6662 ;;  exp1            1   38[COMRAM] unsigned char 
  6663 ;;  cntr            1   37[COMRAM] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  4   24[COMRAM] unsigned long 
  6666 ;; Registers used:
  6667 ;;		wreg, status,2, status,0
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6673 ;;      Params:         6       0       0       0       0       0       0       0       0
  6674 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6675 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6676 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6677 ;;Total ram usage:       15 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    4
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		_sprintf
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text28
  6688  001754                     __ptext28:
  6689                           	opt stack 0
  6690  001754                     __tdiv_to_l_:
  6691                           	opt stack 23
  6692                           
  6693                           ;incstack = 0
  6694  001754  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6695  001758  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6696  00175A  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6697  00175C  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  6698  00175E  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6699  001760  E301               	bnc	u4541
  6700  001762  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6701  001764                     u4541:
  6702  001764  501F               	movf	??__tdiv_to_l_,w,c
  6703  001766  6E27               	movwf	__tdiv_to_l_@exp1,c
  6704  001768  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  6705  00176A  D001               	goto	l4442
  6706  00176C  D059               	goto	u4610
  6707  00176E                     l4442:
  6708  00176E  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6709  001772  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6710  001774  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6711  001776  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  6712  001778  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6713  00177A  E301               	bnc	u4561
  6714  00177C  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6715  00177E                     u4561:
  6716  00177E  501F               	movf	??__tdiv_to_l_,w,c
  6717  001780  6E26               	movwf	__tdiv_to_l_@cntr,c
  6718  001782  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  6719  001784  D001               	goto	l4448
  6720  001786  D04C               	goto	u4610
  6721  001788                     l4448:
  6722  001788  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  6723  00178A  0EFF               	movlw	255
  6724  00178C  1619               	andwf	__tdiv_to_l_@f1,f,c
  6725  00178E  0EFF               	movlw	255
  6726  001790  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  6727  001792  0E00               	movlw	0
  6728  001794  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  6729  001796  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  6730  001798  0EFF               	movlw	255
  6731  00179A  161C               	andwf	__tdiv_to_l_@f2,f,c
  6732  00179C  0EFF               	movlw	255
  6733  00179E  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  6734  0017A0  0E00               	movlw	0
  6735  0017A2  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  6736  0017A4  0E00               	movlw	0
  6737  0017A6  6E22               	movwf	__tdiv_to_l_@quot,c
  6738  0017A8  0E00               	movlw	0
  6739  0017AA  6E23               	movwf	__tdiv_to_l_@quot+1,c
  6740  0017AC  0E00               	movlw	0
  6741  0017AE  6E24               	movwf	__tdiv_to_l_@quot+2,c
  6742  0017B0  0E00               	movlw	0
  6743  0017B2  6E25               	movwf	__tdiv_to_l_@quot+3,c
  6744  0017B4  0E7F               	movlw	127
  6745  0017B6  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  6746  0017B8  5026               	movf	__tdiv_to_l_@cntr,w,c
  6747  0017BA  0F98               	addlw	152
  6748  0017BC  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  6749  0017BE  0E18               	movlw	24
  6750  0017C0  6E26               	movwf	__tdiv_to_l_@cntr,c
  6751  0017C2                     l967:
  6752  0017C2  90D8               	bcf	status,0,c
  6753  0017C4  3622               	rlcf	__tdiv_to_l_@quot,f,c
  6754  0017C6  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  6755  0017C8  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  6756  0017CA  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  6757  0017CC  501C               	movf	__tdiv_to_l_@f2,w,c
  6758  0017CE  5C19               	subwf	__tdiv_to_l_@f1,w,c
  6759  0017D0  501D               	movf	__tdiv_to_l_@f2+1,w,c
  6760  0017D2  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  6761  0017D4  501E               	movf	__tdiv_to_l_@f2+2,w,c
  6762  0017D6  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  6763  0017D8  A0D8               	btfss	status,0,c
  6764  0017DA  D007               	goto	l968
  6765  0017DC  501C               	movf	__tdiv_to_l_@f2,w,c
  6766  0017DE  5E19               	subwf	__tdiv_to_l_@f1,f,c
  6767  0017E0  501D               	movf	__tdiv_to_l_@f2+1,w,c
  6768  0017E2  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  6769  0017E4  501E               	movf	__tdiv_to_l_@f2+2,w,c
  6770  0017E6  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  6771  0017E8  8022               	bsf	__tdiv_to_l_@quot,0,c
  6772  0017EA                     l968:
  6773  0017EA  90D8               	bcf	status,0,c
  6774  0017EC  3619               	rlcf	__tdiv_to_l_@f1,f,c
  6775  0017EE  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  6776  0017F0  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  6777  0017F2  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  6778  0017F4  D7E6               	goto	l967
  6779  0017F6  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  6780  0017F8  D010               	goto	l4480
  6781  0017FA  5027               	movf	__tdiv_to_l_@exp1,w,c
  6782  0017FC  0A80               	xorlw	128
  6783  0017FE  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  6784  001800  0EE9               	movlw	233
  6785  001802  0A80               	xorlw	128
  6786  001804  5C1F               	subwf	??__tdiv_to_l_,w,c
  6787  001806  A0D8               	btfss	status,0,c
  6788  001808  D00B               	goto	u4610
  6789  00180A                     l4476:
  6790  00180A  90D8               	bcf	status,0,c
  6791  00180C  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  6792  00180E  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  6793  001810  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  6794  001812  3222               	rrcf	__tdiv_to_l_@quot,f,c
  6795  001814  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  6796  001816  D7F9               	goto	l4476
  6797  001818  D014               	goto	l974
  6798  00181A                     l4480:
  6799  00181A  0E17               	movlw	23
  6800  00181C  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  6801  00181E  D00F               	goto	l4488
  6802  001820                     u4610:
  6803  001820  0E00               	movlw	0
  6804  001822  6E19               	movwf	?__tdiv_to_l_,c
  6805  001824  0E00               	movlw	0
  6806  001826  6E1A               	movwf	?__tdiv_to_l_+1,c
  6807  001828  0E00               	movlw	0
  6808  00182A  6E1B               	movwf	?__tdiv_to_l_+2,c
  6809  00182C  0E00               	movlw	0
  6810  00182E  6E1C               	movwf	?__tdiv_to_l_+3,c
  6811  001830  D010               	goto	l965
  6812  001832                     l4486:
  6813  001832  90D8               	bcf	status,0,c
  6814  001834  3622               	rlcf	__tdiv_to_l_@quot,f,c
  6815  001836  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  6816  001838  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  6817  00183A  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  6818  00183C  0627               	decf	__tdiv_to_l_@exp1,f,c
  6819  00183E                     l4488:
  6820  00183E  6627               	tstfsz	__tdiv_to_l_@exp1,c
  6821  001840  D7F8               	goto	l4486
  6822  001842                     l974:
  6823  001842  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6824  001846  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6825  00184A  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6826  00184E  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6827  001852                     l965:
  6828  001852  0012               	return	
  6829  001854                     __end_of__tdiv_to_l_:
  6830                           	opt stack 0
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           indf0	equ	0xFEF
  6839                           postinc0	equ	0xFEE
  6840                           fsr0h	equ	0xFEA
  6841                           fsr0l	equ	0xFE9
  6842                           wreg	equ	0xFE8
  6843                           postinc1	equ	0xFE6
  6844                           postdec1	equ	0xFE5
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function __div_to_l_ *****************
  6854 ;; Defined at:
  6855 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  f1              3   24[COMRAM] unsigned long 
  6858 ;;  f2              3   27[COMRAM] unsigned long 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  quot            4   34[COMRAM] unsigned long 
  6861 ;;  exp1            1   39[COMRAM] unsigned char 
  6862 ;;  cntr            1   38[COMRAM] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  4   24[COMRAM] unsigned long 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6872 ;;      Params:         6       0       0       0       0       0       0       0       0
  6873 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6874 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6875 ;;      Totals:        16       0       0       0       0       0       0       0       0
  6876 ;;Total ram usage:       16 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    4
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_sprintf
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text29
  6887  0014F2                     __ptext29:
  6888                           	opt stack 0
  6889  0014F2                     __div_to_l_:
  6890                           	opt stack 23
  6891                           
  6892                           ;incstack = 0
  6893  0014F2  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  6894  0014F6  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  6895  0014FA  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  6896  0014FE  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  6897  001502  0E18               	movlw	24
  6898  001504  D005               	goto	u4630
  6899  001506                     u4635:
  6900  001506  90D8               	bcf	status,0,c
  6901  001508  3222               	rrcf	??__div_to_l_+3,f,c
  6902  00150A  3221               	rrcf	??__div_to_l_+2,f,c
  6903  00150C  3220               	rrcf	??__div_to_l_+1,f,c
  6904  00150E  321F               	rrcf	??__div_to_l_,f,c
  6905  001510                     u4630:
  6906  001510  2EE8               	decfsz	wreg,f,c
  6907  001512  D7F9               	goto	u4635
  6908  001514  501F               	movf	??__div_to_l_,w,c
  6909  001516  6E28               	movwf	__div_to_l_@exp1,c
  6910  001518  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  6911  00151A  D001               	goto	l4496
  6912  00151C  D06B               	goto	u4700
  6913  00151E                     l4496:
  6914  00151E  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  6915  001522  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  6916  001526  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  6917  00152A  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  6918  00152E  0E18               	movlw	24
  6919  001530  D005               	goto	u4650
  6920  001532                     u4655:
  6921  001532  90D8               	bcf	status,0,c
  6922  001534  3222               	rrcf	??__div_to_l_+3,f,c
  6923  001536  3221               	rrcf	??__div_to_l_+2,f,c
  6924  001538  3220               	rrcf	??__div_to_l_+1,f,c
  6925  00153A  321F               	rrcf	??__div_to_l_,f,c
  6926  00153C                     u4650:
  6927  00153C  2EE8               	decfsz	wreg,f,c
  6928  00153E  D7F9               	goto	u4655
  6929  001540  501F               	movf	??__div_to_l_,w,c
  6930  001542  6E27               	movwf	__div_to_l_@cntr,c
  6931  001544  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  6932  001546  D001               	goto	l4502
  6933  001548  D055               	goto	u4700
  6934  00154A                     l4502:
  6935  00154A  8E1B               	bsf	__div_to_l_@f1+2,7,c
  6936  00154C  0EFF               	movlw	255
  6937  00154E  1619               	andwf	__div_to_l_@f1,f,c
  6938  001550  0EFF               	movlw	255
  6939  001552  161A               	andwf	__div_to_l_@f1+1,f,c
  6940  001554  0EFF               	movlw	255
  6941  001556  161B               	andwf	__div_to_l_@f1+2,f,c
  6942  001558  0E00               	movlw	0
  6943  00155A  161C               	andwf	__div_to_l_@f1+3,f,c
  6944  00155C  8E1E               	bsf	__div_to_l_@f2+2,7,c
  6945  00155E  0EFF               	movlw	255
  6946  001560  161C               	andwf	__div_to_l_@f2,f,c
  6947  001562  0EFF               	movlw	255
  6948  001564  161D               	andwf	__div_to_l_@f2+1,f,c
  6949  001566  0EFF               	movlw	255
  6950  001568  161E               	andwf	__div_to_l_@f2+2,f,c
  6951  00156A  0E00               	movlw	0
  6952  00156C  161F               	andwf	__div_to_l_@f2+3,f,c
  6953  00156E  0E00               	movlw	0
  6954  001570  6E23               	movwf	__div_to_l_@quot,c
  6955  001572  0E00               	movlw	0
  6956  001574  6E24               	movwf	__div_to_l_@quot+1,c
  6957  001576  0E00               	movlw	0
  6958  001578  6E25               	movwf	__div_to_l_@quot+2,c
  6959  00157A  0E00               	movlw	0
  6960  00157C  6E26               	movwf	__div_to_l_@quot+3,c
  6961  00157E  0E7F               	movlw	127
  6962  001580  5E28               	subwf	__div_to_l_@exp1,f,c
  6963  001582  5027               	movf	__div_to_l_@cntr,w,c
  6964  001584  0FA0               	addlw	160
  6965  001586  5E28               	subwf	__div_to_l_@exp1,f,c
  6966  001588  0E20               	movlw	32
  6967  00158A  6E27               	movwf	__div_to_l_@cntr,c
  6968  00158C                     l4516:
  6969  00158C  90D8               	bcf	status,0,c
  6970  00158E  3623               	rlcf	__div_to_l_@quot,f,c
  6971  001590  3624               	rlcf	__div_to_l_@quot+1,f,c
  6972  001592  3625               	rlcf	__div_to_l_@quot+2,f,c
  6973  001594  3626               	rlcf	__div_to_l_@quot+3,f,c
  6974  001596  501C               	movf	__div_to_l_@f2,w,c
  6975  001598  5C19               	subwf	__div_to_l_@f1,w,c
  6976  00159A  501D               	movf	__div_to_l_@f2+1,w,c
  6977  00159C  581A               	subwfb	__div_to_l_@f1+1,w,c
  6978  00159E  501E               	movf	__div_to_l_@f2+2,w,c
  6979  0015A0  581B               	subwfb	__div_to_l_@f1+2,w,c
  6980  0015A2  501F               	movf	__div_to_l_@f2+3,w,c
  6981  0015A4  581C               	subwfb	__div_to_l_@f1+3,w,c
  6982  0015A6  A0D8               	btfss	status,0,c
  6983  0015A8  D009               	goto	l4524
  6984  0015AA  501C               	movf	__div_to_l_@f2,w,c
  6985  0015AC  5E19               	subwf	__div_to_l_@f1,f,c
  6986  0015AE  501D               	movf	__div_to_l_@f2+1,w,c
  6987  0015B0  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  6988  0015B2  501E               	movf	__div_to_l_@f2+2,w,c
  6989  0015B4  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  6990  0015B6  501F               	movf	__div_to_l_@f2+3,w,c
  6991  0015B8  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  6992  0015BA  8023               	bsf	__div_to_l_@quot,0,c
  6993  0015BC                     l4524:
  6994  0015BC  90D8               	bcf	status,0,c
  6995  0015BE  3619               	rlcf	__div_to_l_@f1,f,c
  6996  0015C0  361A               	rlcf	__div_to_l_@f1+1,f,c
  6997  0015C2  361B               	rlcf	__div_to_l_@f1+2,f,c
  6998  0015C4  361C               	rlcf	__div_to_l_@f1+3,f,c
  6999  0015C6  2E27               	decfsz	__div_to_l_@cntr,f,c
  7000  0015C8  D7E1               	goto	l4516
  7001  0015CA  AE28               	btfss	__div_to_l_@exp1,7,c
  7002  0015CC  D010               	goto	l4538
  7003  0015CE  5028               	movf	__div_to_l_@exp1,w,c
  7004  0015D0  0A80               	xorlw	128
  7005  0015D2  6E1F               	movwf	??__div_to_l_& (0+255),c
  7006  0015D4  0EE1               	movlw	225
  7007  0015D6  0A80               	xorlw	128
  7008  0015D8  5C1F               	subwf	??__div_to_l_,w,c
  7009  0015DA  A0D8               	btfss	status,0,c
  7010  0015DC  D00B               	goto	u4700
  7011  0015DE                     l4534:
  7012  0015DE  90D8               	bcf	status,0,c
  7013  0015E0  3226               	rrcf	__div_to_l_@quot+3,f,c
  7014  0015E2  3225               	rrcf	__div_to_l_@quot+2,f,c
  7015  0015E4  3224               	rrcf	__div_to_l_@quot+1,f,c
  7016  0015E6  3223               	rrcf	__div_to_l_@quot,f,c
  7017  0015E8  3E28               	incfsz	__div_to_l_@exp1,f,c
  7018  0015EA  D7F9               	goto	l4534
  7019  0015EC  D014               	goto	l856
  7020  0015EE                     l4538:
  7021  0015EE  0E1F               	movlw	31
  7022  0015F0  6428               	cpfsgt	__div_to_l_@exp1,c
  7023  0015F2  D00F               	goto	l4546
  7024  0015F4                     u4700:
  7025  0015F4  0E00               	movlw	0
  7026  0015F6  6E19               	movwf	?__div_to_l_,c
  7027  0015F8  0E00               	movlw	0
  7028  0015FA  6E1A               	movwf	?__div_to_l_+1,c
  7029  0015FC  0E00               	movlw	0
  7030  0015FE  6E1B               	movwf	?__div_to_l_+2,c
  7031  001600  0E00               	movlw	0
  7032  001602  6E1C               	movwf	?__div_to_l_+3,c
  7033  001604  D010               	goto	l847
  7034  001606                     l4544:
  7035  001606  90D8               	bcf	status,0,c
  7036  001608  3623               	rlcf	__div_to_l_@quot,f,c
  7037  00160A  3624               	rlcf	__div_to_l_@quot+1,f,c
  7038  00160C  3625               	rlcf	__div_to_l_@quot+2,f,c
  7039  00160E  3626               	rlcf	__div_to_l_@quot+3,f,c
  7040  001610  0628               	decf	__div_to_l_@exp1,f,c
  7041  001612                     l4546:
  7042  001612  6628               	tstfsz	__div_to_l_@exp1,c
  7043  001614  D7F8               	goto	l4544
  7044  001616                     l856:
  7045  001616  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7046  00161A  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7047  00161E  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7048  001622  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7049  001626                     l847:
  7050  001626  0012               	return	
  7051  001628                     __end_of__div_to_l_:
  7052                           	opt stack 0
  7053                           tblptru	equ	0xFF8
  7054                           tblptrh	equ	0xFF7
  7055                           tblptrl	equ	0xFF6
  7056                           tablat	equ	0xFF5
  7057                           prodh	equ	0xFF4
  7058                           prodl	equ	0xFF3
  7059                           intcon	equ	0xFF2
  7060                           indf0	equ	0xFEF
  7061                           postinc0	equ	0xFEE
  7062                           fsr0h	equ	0xFEA
  7063                           fsr0l	equ	0xFE9
  7064                           wreg	equ	0xFE8
  7065                           postinc1	equ	0xFE6
  7066                           postdec1	equ	0xFE5
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function ___lltoft *****************
  7076 ;; Defined at:
  7077 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  c               4   32[COMRAM] unsigned long 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  exp             1   40[COMRAM] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  3   32[COMRAM] float 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7091 ;;      Params:         4       0       0       0       0       0       0       0       0
  7092 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7093 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7094 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7095 ;;Total ram usage:        9 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    5
  7098 ;; This function calls:
  7099 ;;		___ftpack
  7100 ;; This function is called by:
  7101 ;;		_sprintf
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text30
  7106  0021F6                     __ptext30:
  7107                           	opt stack 0
  7108  0021F6                     ___lltoft:
  7109                           	opt stack 22
  7110                           
  7111                           ;incstack = 0
  7112  0021F6  0E8E               	movlw	142
  7113  0021F8  6E29               	movwf	___lltoft@exp,c
  7114  0021FA  D006               	goto	l4664
  7115  0021FC                     l4662:
  7116  0021FC  90D8               	bcf	status,0,c
  7117  0021FE  3224               	rrcf	___lltoft@c+3,f,c
  7118  002200  3223               	rrcf	___lltoft@c+2,f,c
  7119  002202  3222               	rrcf	___lltoft@c+1,f,c
  7120  002204  3221               	rrcf	___lltoft@c,f,c
  7121  002206  2A29               	incf	___lltoft@exp,f,c
  7122  002208                     l4664:
  7123  002208  0E00               	movlw	0
  7124  00220A  1421               	andwf	___lltoft@c,w,c
  7125  00220C  6E25               	movwf	??___lltoft& (0+255),c
  7126  00220E  0E00               	movlw	0
  7127  002210  1422               	andwf	___lltoft@c+1,w,c
  7128  002212  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7129  002214  0E00               	movlw	0
  7130  002216  1423               	andwf	___lltoft@c+2,w,c
  7131  002218  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7132  00221A  0EFF               	movlw	255
  7133  00221C  1424               	andwf	___lltoft@c+3,w,c
  7134  00221E  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7135  002220  5028               	movf	??___lltoft+3,w,c
  7136  002222  1025               	iorwf	??___lltoft,w,c
  7137  002224  1026               	iorwf	??___lltoft+1,w,c
  7138  002226  1027               	iorwf	??___lltoft+2,w,c
  7139  002228  A4D8               	btfss	status,2,c
  7140  00222A  D7E8               	goto	l4662
  7141  00222C  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7142  002230  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7143  002234  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7144  002238  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7145  00223C  0E00               	movlw	0
  7146  00223E  6E1D               	movwf	___ftpack@sign,c
  7147  002240  EC01  F00D         	call	___ftpack	;wreg free
  7148  002244  C019  F021         	movff	?___ftpack,?___lltoft
  7149  002248  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7150  00224C  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7151  002250  0012               	return	
  7152  002252                     __end_of___lltoft:
  7153                           	opt stack 0
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           indf0	equ	0xFEF
  7162                           postinc0	equ	0xFEE
  7163                           fsr0h	equ	0xFEA
  7164                           fsr0l	equ	0xFE9
  7165                           wreg	equ	0xFE8
  7166                           postinc1	equ	0xFE6
  7167                           postdec1	equ	0xFE5
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function ___llmod *****************
  7177 ;; Defined at:
  7178 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  dividend        4   37[COMRAM] unsigned long 
  7181 ;;  divisor         4   41[COMRAM] unsigned long 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  counter         1   45[COMRAM] unsigned char 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  4   37[COMRAM] unsigned long 
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7193 ;;      Params:         8       0       0       0       0       0       0       0       0
  7194 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7196 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7197 ;;Total ram usage:        9 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    4
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_sprintf
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text31
  7208  002190                     __ptext31:
  7209                           	opt stack 0
  7210  002190                     ___llmod:
  7211                           	opt stack 23
  7212                           
  7213                           ;incstack = 0
  7214  002190  502D               	movf	___llmod@divisor+3,w,c
  7215  002192  102A               	iorwf	___llmod@divisor,w,c
  7216  002194  102B               	iorwf	___llmod@divisor+1,w,c
  7217  002196  102C               	iorwf	___llmod@divisor+2,w,c
  7218  002198  B4D8               	btfsc	status,2,c
  7219  00219A  D024               	goto	l1058
  7220  00219C  0E01               	movlw	1
  7221  00219E  6E2E               	movwf	___llmod@counter,c
  7222  0021A0  D006               	goto	l4650
  7223  0021A2                     l4648:
  7224  0021A2  90D8               	bcf	status,0,c
  7225  0021A4  362A               	rlcf	___llmod@divisor,f,c
  7226  0021A6  362B               	rlcf	___llmod@divisor+1,f,c
  7227  0021A8  362C               	rlcf	___llmod@divisor+2,f,c
  7228  0021AA  362D               	rlcf	___llmod@divisor+3,f,c
  7229  0021AC  2A2E               	incf	___llmod@counter,f,c
  7230  0021AE                     l4650:
  7231  0021AE  AE2D               	btfss	___llmod@divisor+3,7,c
  7232  0021B0  D7F8               	goto	l4648
  7233  0021B2                     l4652:
  7234  0021B2  502A               	movf	___llmod@divisor,w,c
  7235  0021B4  5C26               	subwf	___llmod@dividend,w,c
  7236  0021B6  502B               	movf	___llmod@divisor+1,w,c
  7237  0021B8  5827               	subwfb	___llmod@dividend+1,w,c
  7238  0021BA  502C               	movf	___llmod@divisor+2,w,c
  7239  0021BC  5828               	subwfb	___llmod@dividend+2,w,c
  7240  0021BE  502D               	movf	___llmod@divisor+3,w,c
  7241  0021C0  5829               	subwfb	___llmod@dividend+3,w,c
  7242  0021C2  A0D8               	btfss	status,0,c
  7243  0021C4  D008               	goto	l4656
  7244  0021C6  502A               	movf	___llmod@divisor,w,c
  7245  0021C8  5E26               	subwf	___llmod@dividend,f,c
  7246  0021CA  502B               	movf	___llmod@divisor+1,w,c
  7247  0021CC  5A27               	subwfb	___llmod@dividend+1,f,c
  7248  0021CE  502C               	movf	___llmod@divisor+2,w,c
  7249  0021D0  5A28               	subwfb	___llmod@dividend+2,f,c
  7250  0021D2  502D               	movf	___llmod@divisor+3,w,c
  7251  0021D4  5A29               	subwfb	___llmod@dividend+3,f,c
  7252  0021D6                     l4656:
  7253  0021D6  90D8               	bcf	status,0,c
  7254  0021D8  322D               	rrcf	___llmod@divisor+3,f,c
  7255  0021DA  322C               	rrcf	___llmod@divisor+2,f,c
  7256  0021DC  322B               	rrcf	___llmod@divisor+1,f,c
  7257  0021DE  322A               	rrcf	___llmod@divisor,f,c
  7258  0021E0  2E2E               	decfsz	___llmod@counter,f,c
  7259  0021E2  D7E7               	goto	l4652
  7260  0021E4                     l1058:
  7261  0021E4  C026  F026         	movff	___llmod@dividend,?___llmod
  7262  0021E8  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7263  0021EC  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7264  0021F0  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7265  0021F4  0012               	return	
  7266  0021F6                     __end_of___llmod:
  7267                           	opt stack 0
  7268                           tblptru	equ	0xFF8
  7269                           tblptrh	equ	0xFF7
  7270                           tblptrl	equ	0xFF6
  7271                           tablat	equ	0xFF5
  7272                           prodh	equ	0xFF4
  7273                           prodl	equ	0xFF3
  7274                           intcon	equ	0xFF2
  7275                           indf0	equ	0xFEF
  7276                           postinc0	equ	0xFEE
  7277                           fsr0h	equ	0xFEA
  7278                           fsr0l	equ	0xFE9
  7279                           wreg	equ	0xFE8
  7280                           postinc1	equ	0xFE6
  7281                           postdec1	equ	0xFE5
  7282                           fsr1l	equ	0xFE1
  7283                           indf2	equ	0xFDF
  7284                           postinc2	equ	0xFDE
  7285                           postdec2	equ	0xFDD
  7286                           fsr2h	equ	0xFDA
  7287                           fsr2l	equ	0xFD9
  7288                           status	equ	0xFD8
  7289                           
  7290 ;; *************** function ___lldiv *****************
  7291 ;; Defined at:
  7292 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  dividend        4   24[COMRAM] unsigned long 
  7295 ;;  divisor         4   28[COMRAM] unsigned long 
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;  quotient        4   32[COMRAM] unsigned long 
  7298 ;;  counter         1   36[COMRAM] unsigned char 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  4   24[COMRAM] unsigned long 
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7308 ;;      Params:         8       0       0       0       0       0       0       0       0
  7309 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7311 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7312 ;;Total ram usage:       13 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_sprintf
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text32
  7323  001EC4                     __ptext32:
  7324                           	opt stack 0
  7325  001EC4                     ___lldiv:
  7326                           	opt stack 23
  7327                           
  7328                           ;incstack = 0
  7329  001EC4  0E00               	movlw	0
  7330  001EC6  6E21               	movwf	___lldiv@quotient,c
  7331  001EC8  0E00               	movlw	0
  7332  001ECA  6E22               	movwf	___lldiv@quotient+1,c
  7333  001ECC  0E00               	movlw	0
  7334  001ECE  6E23               	movwf	___lldiv@quotient+2,c
  7335  001ED0  0E00               	movlw	0
  7336  001ED2  6E24               	movwf	___lldiv@quotient+3,c
  7337  001ED4  5020               	movf	___lldiv@divisor+3,w,c
  7338  001ED6  101D               	iorwf	___lldiv@divisor,w,c
  7339  001ED8  101E               	iorwf	___lldiv@divisor+1,w,c
  7340  001EDA  101F               	iorwf	___lldiv@divisor+2,w,c
  7341  001EDC  B4D8               	btfsc	status,2,c
  7342  001EDE  D02A               	goto	l1048
  7343  001EE0  0E01               	movlw	1
  7344  001EE2  6E25               	movwf	___lldiv@counter,c
  7345  001EE4  D006               	goto	l4630
  7346  001EE6                     l4628:
  7347  001EE6  90D8               	bcf	status,0,c
  7348  001EE8  361D               	rlcf	___lldiv@divisor,f,c
  7349  001EEA  361E               	rlcf	___lldiv@divisor+1,f,c
  7350  001EEC  361F               	rlcf	___lldiv@divisor+2,f,c
  7351  001EEE  3620               	rlcf	___lldiv@divisor+3,f,c
  7352  001EF0  2A25               	incf	___lldiv@counter,f,c
  7353  001EF2                     l4630:
  7354  001EF2  AE20               	btfss	___lldiv@divisor+3,7,c
  7355  001EF4  D7F8               	goto	l4628
  7356  001EF6                     l4632:
  7357  001EF6  90D8               	bcf	status,0,c
  7358  001EF8  3621               	rlcf	___lldiv@quotient,f,c
  7359  001EFA  3622               	rlcf	___lldiv@quotient+1,f,c
  7360  001EFC  3623               	rlcf	___lldiv@quotient+2,f,c
  7361  001EFE  3624               	rlcf	___lldiv@quotient+3,f,c
  7362  001F00  501D               	movf	___lldiv@divisor,w,c
  7363  001F02  5C19               	subwf	___lldiv@dividend,w,c
  7364  001F04  501E               	movf	___lldiv@divisor+1,w,c
  7365  001F06  581A               	subwfb	___lldiv@dividend+1,w,c
  7366  001F08  501F               	movf	___lldiv@divisor+2,w,c
  7367  001F0A  581B               	subwfb	___lldiv@dividend+2,w,c
  7368  001F0C  5020               	movf	___lldiv@divisor+3,w,c
  7369  001F0E  581C               	subwfb	___lldiv@dividend+3,w,c
  7370  001F10  A0D8               	btfss	status,0,c
  7371  001F12  D009               	goto	l4640
  7372  001F14  501D               	movf	___lldiv@divisor,w,c
  7373  001F16  5E19               	subwf	___lldiv@dividend,f,c
  7374  001F18  501E               	movf	___lldiv@divisor+1,w,c
  7375  001F1A  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7376  001F1C  501F               	movf	___lldiv@divisor+2,w,c
  7377  001F1E  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7378  001F20  5020               	movf	___lldiv@divisor+3,w,c
  7379  001F22  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7380  001F24  8021               	bsf	___lldiv@quotient,0,c
  7381  001F26                     l4640:
  7382  001F26  90D8               	bcf	status,0,c
  7383  001F28  3220               	rrcf	___lldiv@divisor+3,f,c
  7384  001F2A  321F               	rrcf	___lldiv@divisor+2,f,c
  7385  001F2C  321E               	rrcf	___lldiv@divisor+1,f,c
  7386  001F2E  321D               	rrcf	___lldiv@divisor,f,c
  7387  001F30  2E25               	decfsz	___lldiv@counter,f,c
  7388  001F32  D7E1               	goto	l4632
  7389  001F34                     l1048:
  7390  001F34  C021  F019         	movff	___lldiv@quotient,?___lldiv
  7391  001F38  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  7392  001F3C  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  7393  001F40  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  7394  001F44  0012               	return	
  7395  001F46                     __end_of___lldiv:
  7396                           	opt stack 0
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           intcon	equ	0xFF2
  7404                           indf0	equ	0xFEF
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           postinc1	equ	0xFE6
  7410                           postdec1	equ	0xFE5
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function ___fttol *****************
  7420 ;; Defined at:
  7421 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  f1              3   19[BANK0 ] float 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  lval            4   29[BANK0 ] unsigned long 
  7426 ;;  exp1            1   33[BANK0 ] unsigned char 
  7427 ;;  sign1           1   28[BANK0 ] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  4   19[BANK0 ] long 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2, status,0
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7437 ;;      Params:         0       4       0       0       0       0       0       0       0
  7438 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7439 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7440 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7441 ;;Total ram usage:       15 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    4
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_PWM_DutyCycle1
  7448 ;;		_sprintf
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text33
  7453  0013A8                     __ptext33:
  7454                           	opt stack 0
  7455  0013A8                     ___fttol:
  7456                           	opt stack 23
  7457                           
  7458                           ;incstack = 0
  7459  0013A8  0100               	movlb	0	; () banked
  7460  0013AA  C075  F077         	movff	___fttol@f1+2,??___fttol
  7461  0013AE  0100               	movlb	0	; () banked
  7462  0013B0  6B78               	clrf	(??___fttol+1)& (0+255),b
  7463  0013B2  6B79               	clrf	(??___fttol+2)& (0+255),b
  7464  0013B4  0100               	movlb	0	; () banked
  7465  0013B6  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7466  0013B8  0100               	movlb	0	; () banked
  7467  0013BA  3777               	rlcf	??___fttol& (0+255),f,b
  7468  0013BC  E301               	bnc	u4761
  7469  0013BE  8178               	bsf	(??___fttol+1)& (0+255),0,b
  7470  0013C0                     u4761:
  7471  0013C0  0100               	movlb	0	; () banked
  7472  0013C2  5177               	movf	??___fttol& (0+255),w,b
  7473  0013C4  0100               	movlb	0	; () banked
  7474  0013C6  6F81               	movwf	___fttol@exp1& (0+255),b
  7475  0013C8  0100               	movlb	0	; () banked
  7476  0013CA  6781               	tstfsz	___fttol@exp1& (0+255),b
  7477  0013CC  D001               	goto	l4582
  7478  0013CE  D059               	goto	u4810
  7479  0013D0                     l4582:
  7480                           
  7481                           ; BSR set to: 0
  7482  0013D0  0E17               	movlw	23
  7483  0013D2  0100               	movlb	0	; () banked
  7484  0013D4  6F77               	movwf	??___fttol& (0+255),b
  7485  0013D6  0100               	movlb	0	; () banked
  7486  0013D8  C073  F078         	movff	___fttol@f1,??___fttol+1
  7487  0013DC  0100               	movlb	0	; () banked
  7488  0013DE  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  7489  0013E2  0100               	movlb	0	; () banked
  7490  0013E4  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  7491  0013E8  0100               	movlb	0	; () banked
  7492  0013EA  2977               	incf	??___fttol& (0+255),w,b
  7493  0013EC  0100               	movlb	0	; () banked
  7494  0013EE  6F7B               	movwf	(??___fttol+4)& (0+255),b
  7495  0013F0  D005               	goto	u4780
  7496  0013F2                     u4785:
  7497  0013F2  0100               	movlb	0	; () banked
  7498  0013F4  90D8               	bcf	status,0,c
  7499  0013F6  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  7500  0013F8  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  7501  0013FA  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  7502  0013FC                     u4780:
  7503  0013FC  0100               	movlb	0	; () banked
  7504  0013FE  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  7505  001400  D7F8               	goto	u4785
  7506  001402  0100               	movlb	0	; () banked
  7507  001404  5178               	movf	(??___fttol+1)& (0+255),w,b
  7508  001406  0100               	movlb	0	; () banked
  7509  001408  6F7C               	movwf	___fttol@sign1& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512  00140A  0100               	movlb	0	; () banked
  7513  00140C  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  7514                           
  7515                           ; BSR set to: 0
  7516  00140E  0EFF               	movlw	255
  7517  001410  0100               	movlb	0	; () banked
  7518  001412  1773               	andwf	___fttol@f1& (0+255),f,b
  7519  001414  0EFF               	movlw	255
  7520  001416  0100               	movlb	0	; () banked
  7521  001418  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  7522  00141A  0E00               	movlw	0
  7523  00141C  0100               	movlb	0	; () banked
  7524  00141E  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  7525                           
  7526                           ; BSR set to: 0
  7527  001420  0100               	movlb	0	; () banked
  7528  001422  5173               	movf	___fttol@f1& (0+255),w,b
  7529  001424  0100               	movlb	0	; () banked
  7530  001426  6F7D               	movwf	___fttol@lval& (0+255),b
  7531  001428  0100               	movlb	0	; () banked
  7532  00142A  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  7533  00142C  0100               	movlb	0	; () banked
  7534  00142E  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  7535  001430  0100               	movlb	0	; () banked
  7536  001432  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  7537  001434  0100               	movlb	0	; () banked
  7538  001436  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  7539  001438  0100               	movlb	0	; () banked
  7540  00143A  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543  00143C  0E8E               	movlw	142
  7544  00143E  0100               	movlb	0	; () banked
  7545  001440  5F81               	subwf	___fttol@exp1& (0+255),f,b
  7546                           
  7547                           ; BSR set to: 0
  7548  001442  0100               	movlb	0	; () banked
  7549  001444  AF81               	btfss	___fttol@exp1& (0+255),7,b
  7550  001446  D019               	goto	l4604
  7551                           
  7552                           ; BSR set to: 0
  7553  001448  0100               	movlb	0	; () banked
  7554  00144A  5181               	movf	___fttol@exp1& (0+255),w,b
  7555  00144C  0A80               	xorlw	128
  7556  00144E  0100               	movlb	0	; () banked
  7557  001450  6F77               	movwf	??___fttol& (0+255),b
  7558  001452  0EF1               	movlw	241
  7559  001454  0A80               	xorlw	128
  7560  001456  0100               	movlb	0	; () banked
  7561  001458  5D77               	subwf	??___fttol& (0+255),w,b
  7562  00145A  A0D8               	btfss	status,0,c
  7563  00145C  D012               	goto	u4810
  7564  00145E                     l4600:
  7565                           
  7566                           ; BSR set to: 0
  7567  00145E  0100               	movlb	0	; () banked
  7568  001460  90D8               	bcf	status,0,c
  7569  001462  0100               	movlb	0	; () banked
  7570  001464  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7571  001466  0100               	movlb	0	; () banked
  7572  001468  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7573  00146A  0100               	movlb	0	; () banked
  7574  00146C  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7575  00146E  0100               	movlb	0	; () banked
  7576  001470  337D               	rrcf	___fttol@lval& (0+255),f,b
  7577                           
  7578                           ; BSR set to: 0
  7579  001472  0100               	movlb	0	; () banked
  7580  001474  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  7581  001476  D7F3               	goto	l4600
  7582  001478  D020               	goto	l4614
  7583  00147A                     l4604:
  7584                           
  7585                           ; BSR set to: 0
  7586  00147A  0E17               	movlw	23
  7587  00147C  0100               	movlb	0	; () banked
  7588  00147E  6581               	cpfsgt	___fttol@exp1& (0+255),b
  7589  001480  D019               	goto	l4612
  7590  001482                     u4810:
  7591                           
  7592                           ; BSR set to: 0
  7593  001482  0E00               	movlw	0
  7594  001484  0100               	movlb	0	; () banked
  7595  001486  6F73               	movwf	?___fttol& (0+255),b
  7596  001488  0E00               	movlw	0
  7597  00148A  0100               	movlb	0	; () banked
  7598  00148C  6F74               	movwf	(?___fttol+1)& (0+255),b
  7599  00148E  0E00               	movlw	0
  7600  001490  0100               	movlb	0	; () banked
  7601  001492  6F75               	movwf	(?___fttol+2)& (0+255),b
  7602  001494  0E00               	movlw	0
  7603  001496  0100               	movlb	0	; () banked
  7604  001498  6F76               	movwf	(?___fttol+3)& (0+255),b
  7605  00149A  D02A               	goto	l1009
  7606  00149C                     l4610:
  7607                           
  7608                           ; BSR set to: 0
  7609  00149C  0100               	movlb	0	; () banked
  7610  00149E  90D8               	bcf	status,0,c
  7611  0014A0  0100               	movlb	0	; () banked
  7612  0014A2  377D               	rlcf	___fttol@lval& (0+255),f,b
  7613  0014A4  0100               	movlb	0	; () banked
  7614  0014A6  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7615  0014A8  0100               	movlb	0	; () banked
  7616  0014AA  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7617  0014AC  0100               	movlb	0	; () banked
  7618  0014AE  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7619  0014B0  0100               	movlb	0	; () banked
  7620  0014B2  0781               	decf	___fttol@exp1& (0+255),f,b
  7621  0014B4                     l4612:
  7622                           
  7623                           ; BSR set to: 0
  7624  0014B4  0100               	movlb	0	; () banked
  7625  0014B6  6781               	tstfsz	___fttol@exp1& (0+255),b
  7626  0014B8  D7F1               	goto	l4610
  7627  0014BA                     l4614:
  7628                           
  7629                           ; BSR set to: 0
  7630  0014BA  0100               	movlb	0	; () banked
  7631  0014BC  517C               	movf	___fttol@sign1& (0+255),w,b
  7632  0014BE  B4D8               	btfsc	status,2,c
  7633  0014C0  D00F               	goto	l4618
  7634                           
  7635                           ; BSR set to: 0
  7636  0014C2  0100               	movlb	0	; () banked
  7637  0014C4  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  7638  0014C6  0100               	movlb	0	; () banked
  7639  0014C8  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  7640  0014CA  0100               	movlb	0	; () banked
  7641  0014CC  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  7642  0014CE  0100               	movlb	0	; () banked
  7643  0014D0  6D7D               	negf	___fttol@lval& (0+255),b
  7644  0014D2  0E00               	movlw	0
  7645  0014D4  0100               	movlb	0	; () banked
  7646  0014D6  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7647  0014D8  0100               	movlb	0	; () banked
  7648  0014DA  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7649  0014DC  0100               	movlb	0	; () banked
  7650  0014DE  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7651  0014E0                     l4618:
  7652                           
  7653                           ; BSR set to: 0
  7654  0014E0  C07D  F073         	movff	___fttol@lval,?___fttol
  7655  0014E4  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  7656  0014E8  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  7657  0014EC  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  7658  0014F0                     l1009:
  7659                           
  7660                           ; BSR set to: 0
  7661  0014F0  0012               	return	
  7662  0014F2                     __end_of___fttol:
  7663                           	opt stack 0
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           intcon	equ	0xFF2
  7671                           indf0	equ	0xFEF
  7672                           postinc0	equ	0xFEE
  7673                           fsr0h	equ	0xFEA
  7674                           fsr0l	equ	0xFE9
  7675                           wreg	equ	0xFE8
  7676                           postinc1	equ	0xFE6
  7677                           postdec1	equ	0xFE5
  7678                           fsr1l	equ	0xFE1
  7679                           indf2	equ	0xFDF
  7680                           postinc2	equ	0xFDE
  7681                           postdec2	equ	0xFDD
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           
  7686 ;; *************** function ___ftsub *****************
  7687 ;; Defined at:
  7688 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;  f1              3   34[BANK0 ] float 
  7691 ;;  f2              3   37[BANK0 ] float 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;		None
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  3   34[BANK0 ] float 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2, status,0, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7703 ;;      Params:         0       6       0       0       0       0       0       0       0
  7704 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7706 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7707 ;;Total ram usage:        6 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    6
  7710 ;; This function calls:
  7711 ;;		___ftadd
  7712 ;; This function is called by:
  7713 ;;		_sprintf
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text34
  7718  002388                     __ptext34:
  7719                           	opt stack 0
  7720  002388                     ___ftsub:
  7721                           	opt stack 21
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;incstack = 0
  7725  002388  0E00               	movlw	0
  7726  00238A  0100               	movlb	0	; () banked
  7727  00238C  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  7728  00238E  0E00               	movlw	0
  7729  002390  0100               	movlb	0	; () banked
  7730  002392  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7731  002394  0E80               	movlw	128
  7732  002396  0100               	movlb	0	; () banked
  7733  002398  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7734                           
  7735                           ; BSR set to: 0
  7736  00239A  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  7737  00239E  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  7738  0023A2  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  7739  0023A6  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  7740  0023AA  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  7741  0023AE  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  7742  0023B2  ECE8  F007         	call	___ftadd	;wreg free
  7743  0023B6  C076  F082         	movff	?___ftadd,?___ftsub
  7744  0023BA  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  7745  0023BE  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  7746  0023C2  0012               	return	
  7747  0023C4                     __end_of___ftsub:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           indf0	equ	0xFEF
  7757                           postinc0	equ	0xFEE
  7758                           fsr0h	equ	0xFEA
  7759                           fsr0l	equ	0xFE9
  7760                           wreg	equ	0xFE8
  7761                           postinc1	equ	0xFE6
  7762                           postdec1	equ	0xFE5
  7763                           fsr1l	equ	0xFE1
  7764                           indf2	equ	0xFDF
  7765                           postinc2	equ	0xFDE
  7766                           postdec2	equ	0xFDD
  7767                           fsr2h	equ	0xFDA
  7768                           fsr2l	equ	0xFD9
  7769                           status	equ	0xFD8
  7770                           
  7771 ;; *************** function ___ftadd *****************
  7772 ;; Defined at:
  7773 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  f1              3   22[BANK0 ] float 
  7776 ;;  f2              3   25[BANK0 ] float 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  exp1            1   33[BANK0 ] unsigned char 
  7779 ;;  exp2            1   32[BANK0 ] unsigned char 
  7780 ;;  sign            1   31[BANK0 ] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  3   22[BANK0 ] float 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7790 ;;      Params:         0       6       0       0       0       0       0       0       0
  7791 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7792 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7793 ;;      Totals:         0      12       0       0       0       0       0       0       0
  7794 ;;Total ram usage:       12 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    5
  7797 ;; This function calls:
  7798 ;;		___ftpack
  7799 ;; This function is called by:
  7800 ;;		_sprintf
  7801 ;;		___ftsub
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text35
  7806  000FD0                     __ptext35:
  7807                           	opt stack 0
  7808  000FD0                     ___ftadd:
  7809                           	opt stack 21
  7810                           
  7811                           ;incstack = 0
  7812  000FD0  0100               	movlb	0	; () banked
  7813  000FD2  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  7814  000FD6  0100               	movlb	0	; () banked
  7815  000FD8  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  7816  000FDA  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  7817  000FDC  0100               	movlb	0	; () banked
  7818  000FDE  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7819  000FE0  0100               	movlb	0	; () banked
  7820  000FE2  377C               	rlcf	??___ftadd& (0+255),f,b
  7821  000FE4  E301               	bnc	u3921
  7822  000FE6  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  7823  000FE8                     u3921:
  7824  000FE8  0100               	movlb	0	; () banked
  7825  000FEA  517C               	movf	??___ftadd& (0+255),w,b
  7826  000FEC  0100               	movlb	0	; () banked
  7827  000FEE  6F81               	movwf	___ftadd@exp1& (0+255),b
  7828  000FF0  0100               	movlb	0	; () banked
  7829  000FF2  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  7830  000FF6  0100               	movlb	0	; () banked
  7831  000FF8  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  7832  000FFA  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  7833  000FFC  0100               	movlb	0	; () banked
  7834  000FFE  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7835  001000  0100               	movlb	0	; () banked
  7836  001002  377C               	rlcf	??___ftadd& (0+255),f,b
  7837  001004  E301               	bnc	u3931
  7838  001006  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  7839  001008                     u3931:
  7840  001008  0100               	movlb	0	; () banked
  7841  00100A  517C               	movf	??___ftadd& (0+255),w,b
  7842  00100C  0100               	movlb	0	; () banked
  7843  00100E  6F80               	movwf	___ftadd@exp2& (0+255),b
  7844                           
  7845                           ; BSR set to: 0
  7846  001010  0100               	movlb	0	; () banked
  7847  001012  5181               	movf	___ftadd@exp1& (0+255),w,b
  7848  001014  B4D8               	btfsc	status,2,c
  7849  001016  D012               	goto	l925
  7850                           
  7851                           ; BSR set to: 0
  7852  001018  0100               	movlb	0	; () banked
  7853  00101A  5180               	movf	___ftadd@exp2& (0+255),w,b
  7854  00101C  0100               	movlb	0	; () banked
  7855  00101E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  7856  001020  B0D8               	btfsc	status,0,c
  7857  001022  D013               	goto	l4090
  7858                           
  7859                           ; BSR set to: 0
  7860  001024  0100               	movlb	0	; () banked
  7861  001026  5181               	movf	___ftadd@exp1& (0+255),w,b
  7862  001028  0800               	sublw	0
  7863  00102A  0100               	movlb	0	; () banked
  7864  00102C  2580               	addwf	___ftadd@exp2& (0+255),w,b
  7865  00102E  0100               	movlb	0	; () banked
  7866  001030  6F7C               	movwf	??___ftadd& (0+255),b
  7867  001032  0E19               	movlw	25
  7868  001034  0100               	movlb	0	; () banked
  7869  001036  5D7C               	subwf	??___ftadd& (0+255),w,b
  7870  001038  A0D8               	btfss	status,0,c
  7871  00103A  D007               	goto	l4090
  7872  00103C                     l925:
  7873                           
  7874                           ; BSR set to: 0
  7875  00103C  C079  F076         	movff	___ftadd@f2,?___ftadd
  7876  001040  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  7877  001044  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  7878  001048  D102               	goto	l926
  7879  00104A                     l4090:
  7880                           
  7881                           ; BSR set to: 0
  7882  00104A  0100               	movlb	0	; () banked
  7883  00104C  5180               	movf	___ftadd@exp2& (0+255),w,b
  7884  00104E  B4D8               	btfsc	status,2,c
  7885  001050  D012               	goto	l929
  7886                           
  7887                           ; BSR set to: 0
  7888  001052  0100               	movlb	0	; () banked
  7889  001054  5181               	movf	___ftadd@exp1& (0+255),w,b
  7890  001056  0100               	movlb	0	; () banked
  7891  001058  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  7892  00105A  B0D8               	btfsc	status,0,c
  7893  00105C  D013               	goto	l4096
  7894                           
  7895                           ; BSR set to: 0
  7896  00105E  0100               	movlb	0	; () banked
  7897  001060  5180               	movf	___ftadd@exp2& (0+255),w,b
  7898  001062  0800               	sublw	0
  7899  001064  0100               	movlb	0	; () banked
  7900  001066  2581               	addwf	___ftadd@exp1& (0+255),w,b
  7901  001068  0100               	movlb	0	; () banked
  7902  00106A  6F7C               	movwf	??___ftadd& (0+255),b
  7903  00106C  0E19               	movlw	25
  7904  00106E  0100               	movlb	0	; () banked
  7905  001070  5D7C               	subwf	??___ftadd& (0+255),w,b
  7906  001072  A0D8               	btfss	status,0,c
  7907  001074  D007               	goto	l4096
  7908  001076                     l929:
  7909                           
  7910                           ; BSR set to: 0
  7911  001076  C076  F076         	movff	___ftadd@f1,?___ftadd
  7912  00107A  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  7913  00107E  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  7914  001082  D0E5               	goto	l926
  7915  001084                     l4096:
  7916                           
  7917                           ; BSR set to: 0
  7918  001084  0E06               	movlw	6
  7919  001086  0100               	movlb	0	; () banked
  7920  001088  6F7F               	movwf	___ftadd@sign& (0+255),b
  7921                           
  7922                           ; BSR set to: 0
  7923  00108A  0100               	movlb	0	; () banked
  7924  00108C  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7925  00108E  D002               	goto	l4102
  7926                           
  7927                           ; BSR set to: 0
  7928  001090  0100               	movlb	0	; () banked
  7929  001092  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  7930  001094                     l4102:
  7931                           
  7932                           ; BSR set to: 0
  7933  001094  0100               	movlb	0	; () banked
  7934  001096  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7935  001098  D002               	goto	l931
  7936                           
  7937                           ; BSR set to: 0
  7938  00109A  0100               	movlb	0	; () banked
  7939  00109C  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  7940  00109E                     l931:
  7941                           
  7942                           ; BSR set to: 0
  7943  00109E  0100               	movlb	0	; () banked
  7944  0010A0  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7945                           
  7946                           ; BSR set to: 0
  7947  0010A2  0EFF               	movlw	255
  7948  0010A4  0100               	movlb	0	; () banked
  7949  0010A6  1776               	andwf	___ftadd@f1& (0+255),f,b
  7950  0010A8  0EFF               	movlw	255
  7951  0010AA  0100               	movlb	0	; () banked
  7952  0010AC  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7953  0010AE  0E00               	movlw	0
  7954  0010B0  0100               	movlb	0	; () banked
  7955  0010B2  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7956  0010B4  0100               	movlb	0	; () banked
  7957  0010B6  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7958                           
  7959                           ; BSR set to: 0
  7960  0010B8  0EFF               	movlw	255
  7961  0010BA  0100               	movlb	0	; () banked
  7962  0010BC  1779               	andwf	___ftadd@f2& (0+255),f,b
  7963  0010BE  0EFF               	movlw	255
  7964  0010C0  0100               	movlb	0	; () banked
  7965  0010C2  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7966  0010C4  0E00               	movlw	0
  7967  0010C6  0100               	movlb	0	; () banked
  7968  0010C8  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7969                           
  7970                           ; BSR set to: 0
  7971  0010CA  0100               	movlb	0	; () banked
  7972  0010CC  5180               	movf	___ftadd@exp2& (0+255),w,b
  7973  0010CE  0100               	movlb	0	; () banked
  7974  0010D0  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  7975  0010D2  B0D8               	btfsc	status,0,c
  7976  0010D4  D02A               	goto	l4122
  7977  0010D6                     l4112:
  7978                           
  7979                           ; BSR set to: 0
  7980  0010D6  0100               	movlb	0	; () banked
  7981  0010D8  90D8               	bcf	status,0,c
  7982  0010DA  0100               	movlb	0	; () banked
  7983  0010DC  3779               	rlcf	___ftadd@f2& (0+255),f,b
  7984  0010DE  0100               	movlb	0	; () banked
  7985  0010E0  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7986  0010E2  0100               	movlb	0	; () banked
  7987  0010E4  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7988  0010E6  0100               	movlb	0	; () banked
  7989  0010E8  0780               	decf	___ftadd@exp2& (0+255),f,b
  7990                           
  7991                           ; BSR set to: 0
  7992  0010EA  0100               	movlb	0	; () banked
  7993  0010EC  5180               	movf	___ftadd@exp2& (0+255),w,b
  7994  0010EE  0100               	movlb	0	; () banked
  7995  0010F0  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  7996  0010F2  B4D8               	btfsc	status,2,c
  7997  0010F4  D014               	goto	l4120
  7998                           
  7999                           ; BSR set to: 0
  8000  0010F6  0100               	movlb	0	; () banked
  8001  0010F8  077F               	decf	___ftadd@sign& (0+255),f,b
  8002  0010FA  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8003  0010FE  0E07               	movlw	7
  8004  001100  0100               	movlb	0	; () banked
  8005  001102  177C               	andwf	??___ftadd& (0+255),f,b
  8006  001104  B4D8               	btfsc	status,2,c
  8007  001106  D00B               	goto	l4120
  8008  001108  D7E6               	goto	l4112
  8009  00110A                     l4118:
  8010                           
  8011                           ; BSR set to: 0
  8012  00110A  0100               	movlb	0	; () banked
  8013  00110C  90D8               	bcf	status,0,c
  8014  00110E  0100               	movlb	0	; () banked
  8015  001110  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8016  001112  0100               	movlb	0	; () banked
  8017  001114  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8018  001116  0100               	movlb	0	; () banked
  8019  001118  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8020  00111A  0100               	movlb	0	; () banked
  8021  00111C  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8022  00111E                     l4120:
  8023                           
  8024                           ; BSR set to: 0
  8025  00111E  0100               	movlb	0	; () banked
  8026  001120  5180               	movf	___ftadd@exp2& (0+255),w,b
  8027  001122  0100               	movlb	0	; () banked
  8028  001124  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8029  001126  D7F1               	goto	l4118
  8030  001128  D02F               	goto	l940
  8031  00112A                     l4122:
  8032                           
  8033                           ; BSR set to: 0
  8034  00112A  0100               	movlb	0	; () banked
  8035  00112C  5181               	movf	___ftadd@exp1& (0+255),w,b
  8036  00112E  0100               	movlb	0	; () banked
  8037  001130  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8038  001132  B0D8               	btfsc	status,0,c
  8039  001134  D029               	goto	l940
  8040  001136                     l4124:
  8041                           
  8042                           ; BSR set to: 0
  8043  001136  0100               	movlb	0	; () banked
  8044  001138  90D8               	bcf	status,0,c
  8045  00113A  0100               	movlb	0	; () banked
  8046  00113C  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8047  00113E  0100               	movlb	0	; () banked
  8048  001140  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8049  001142  0100               	movlb	0	; () banked
  8050  001144  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8051  001146  0100               	movlb	0	; () banked
  8052  001148  0781               	decf	___ftadd@exp1& (0+255),f,b
  8053                           
  8054                           ; BSR set to: 0
  8055  00114A  0100               	movlb	0	; () banked
  8056  00114C  5180               	movf	___ftadd@exp2& (0+255),w,b
  8057  00114E  0100               	movlb	0	; () banked
  8058  001150  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8059  001152  B4D8               	btfsc	status,2,c
  8060  001154  D014               	goto	l4132
  8061                           
  8062                           ; BSR set to: 0
  8063  001156  0100               	movlb	0	; () banked
  8064  001158  077F               	decf	___ftadd@sign& (0+255),f,b
  8065  00115A  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8066  00115E  0E07               	movlw	7
  8067  001160  0100               	movlb	0	; () banked
  8068  001162  177C               	andwf	??___ftadd& (0+255),f,b
  8069  001164  B4D8               	btfsc	status,2,c
  8070  001166  D00B               	goto	l4132
  8071  001168  D7E6               	goto	l4124
  8072  00116A                     l4130:
  8073                           
  8074                           ; BSR set to: 0
  8075  00116A  0100               	movlb	0	; () banked
  8076  00116C  90D8               	bcf	status,0,c
  8077  00116E  0100               	movlb	0	; () banked
  8078  001170  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8079  001172  0100               	movlb	0	; () banked
  8080  001174  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8081  001176  0100               	movlb	0	; () banked
  8082  001178  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8083  00117A  0100               	movlb	0	; () banked
  8084  00117C  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8085  00117E                     l4132:
  8086                           
  8087                           ; BSR set to: 0
  8088  00117E  0100               	movlb	0	; () banked
  8089  001180  5180               	movf	___ftadd@exp2& (0+255),w,b
  8090  001182  0100               	movlb	0	; () banked
  8091  001184  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8092  001186  D7F1               	goto	l4130
  8093  001188                     l940:
  8094                           
  8095                           ; BSR set to: 0
  8096  001188  0100               	movlb	0	; () banked
  8097  00118A  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8098  00118C  D012               	goto	l949
  8099                           
  8100                           ; BSR set to: 0
  8101  00118E  0EFF               	movlw	255
  8102  001190  0100               	movlb	0	; () banked
  8103  001192  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8104  001194  0EFF               	movlw	255
  8105  001196  0100               	movlb	0	; () banked
  8106  001198  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8107  00119A  0EFF               	movlw	255
  8108  00119C  0100               	movlb	0	; () banked
  8109  00119E  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8110  0011A0  0E01               	movlw	1
  8111  0011A2  0100               	movlb	0	; () banked
  8112  0011A4  2776               	addwf	___ftadd@f1& (0+255),f,b
  8113  0011A6  0E00               	movlw	0
  8114  0011A8  0100               	movlb	0	; () banked
  8115  0011AA  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8116  0011AC  0E00               	movlw	0
  8117  0011AE  0100               	movlb	0	; () banked
  8118  0011B0  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8119  0011B2                     l949:
  8120                           
  8121                           ; BSR set to: 0
  8122  0011B2  0100               	movlb	0	; () banked
  8123  0011B4  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8124  0011B6  D012               	goto	l4138
  8125                           
  8126                           ; BSR set to: 0
  8127  0011B8  0EFF               	movlw	255
  8128  0011BA  0100               	movlb	0	; () banked
  8129  0011BC  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8130  0011BE  0EFF               	movlw	255
  8131  0011C0  0100               	movlb	0	; () banked
  8132  0011C2  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8133  0011C4  0EFF               	movlw	255
  8134  0011C6  0100               	movlb	0	; () banked
  8135  0011C8  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8136  0011CA  0E01               	movlw	1
  8137  0011CC  0100               	movlb	0	; () banked
  8138  0011CE  2779               	addwf	___ftadd@f2& (0+255),f,b
  8139  0011D0  0E00               	movlw	0
  8140  0011D2  0100               	movlb	0	; () banked
  8141  0011D4  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8142  0011D6  0E00               	movlw	0
  8143  0011D8  0100               	movlb	0	; () banked
  8144  0011DA  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8145  0011DC                     l4138:
  8146                           
  8147                           ; BSR set to: 0
  8148  0011DC  0E00               	movlw	0
  8149  0011DE  0100               	movlb	0	; () banked
  8150  0011E0  6F7F               	movwf	___ftadd@sign& (0+255),b
  8151                           
  8152                           ; BSR set to: 0
  8153  0011E2  0100               	movlb	0	; () banked
  8154  0011E4  5176               	movf	___ftadd@f1& (0+255),w,b
  8155  0011E6  0100               	movlb	0	; () banked
  8156  0011E8  2779               	addwf	___ftadd@f2& (0+255),f,b
  8157  0011EA  0100               	movlb	0	; () banked
  8158  0011EC  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8159  0011EE  0100               	movlb	0	; () banked
  8160  0011F0  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8161  0011F2  0100               	movlb	0	; () banked
  8162  0011F4  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8163  0011F6  0100               	movlb	0	; () banked
  8164  0011F8  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8165                           
  8166                           ; BSR set to: 0
  8167  0011FA  0100               	movlb	0	; () banked
  8168  0011FC  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8169  0011FE  D015               	goto	l4148
  8170                           
  8171                           ; BSR set to: 0
  8172  001200  0EFF               	movlw	255
  8173  001202  0100               	movlb	0	; () banked
  8174  001204  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8175  001206  0EFF               	movlw	255
  8176  001208  0100               	movlb	0	; () banked
  8177  00120A  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8178  00120C  0EFF               	movlw	255
  8179  00120E  0100               	movlb	0	; () banked
  8180  001210  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8181  001212  0E01               	movlw	1
  8182  001214  0100               	movlb	0	; () banked
  8183  001216  2779               	addwf	___ftadd@f2& (0+255),f,b
  8184  001218  0E00               	movlw	0
  8185  00121A  0100               	movlb	0	; () banked
  8186  00121C  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8187  00121E  0E00               	movlw	0
  8188  001220  0100               	movlb	0	; () banked
  8189  001222  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8190                           
  8191                           ; BSR set to: 0
  8192  001224  0E01               	movlw	1
  8193  001226  0100               	movlb	0	; () banked
  8194  001228  6F7F               	movwf	___ftadd@sign& (0+255),b
  8195  00122A                     l4148:
  8196                           
  8197                           ; BSR set to: 0
  8198  00122A  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8199  00122E  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8200  001232  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8201  001236  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8202  00123A  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  8203  00123E  EC01  F00D         	call	___ftpack	;wreg free
  8204  001242  C019  F076         	movff	?___ftpack,?___ftadd
  8205  001246  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  8206  00124A  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  8207  00124E                     l926:
  8208  00124E  0012               	return	
  8209  001250                     __end_of___ftadd:
  8210                           	opt stack 0
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           intcon	equ	0xFF2
  8218                           indf0	equ	0xFEF
  8219                           postinc0	equ	0xFEE
  8220                           fsr0h	equ	0xFEA
  8221                           fsr0l	equ	0xFE9
  8222                           wreg	equ	0xFE8
  8223                           postinc1	equ	0xFE6
  8224                           postdec1	equ	0xFE5
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function ___ftpack *****************
  8234 ;; Defined at:
  8235 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  arg             3   24[COMRAM] unsigned um
  8238 ;;  exp             1   27[COMRAM] unsigned char 
  8239 ;;  sign            1   28[COMRAM] unsigned char 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  3   24[COMRAM] float 
  8244 ;; Registers used:
  8245 ;;		wreg, status,2, status,0
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8251 ;;      Params:         5       0       0       0       0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8253 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8254 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8255 ;;Total ram usage:        8 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    4
  8258 ;; This function calls:
  8259 ;;		Nothing
  8260 ;; This function is called by:
  8261 ;;		___ftadd
  8262 ;;		___ftmul
  8263 ;;		___lbtoft
  8264 ;;		___lltoft
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text36
  8269  001A02                     __ptext36:
  8270                           	opt stack 0
  8271  001A02                     ___ftpack:
  8272                           	opt stack 21
  8273                           
  8274                           ;incstack = 0
  8275  001A02  501C               	movf	___ftpack@exp,w,c
  8276  001A04  B4D8               	btfsc	status,2,c
  8277  001A06  D005               	goto	l4028
  8278  001A08  5019               	movf	___ftpack@arg,w,c
  8279  001A0A  101A               	iorwf	___ftpack@arg+1,w,c
  8280  001A0C  101B               	iorwf	___ftpack@arg+2,w,c
  8281  001A0E  A4D8               	btfss	status,2,c
  8282  001A10  D00C               	goto	l4034
  8283  001A12                     l4028:
  8284  001A12  0E00               	movlw	0
  8285  001A14  6E19               	movwf	?___ftpack,c
  8286  001A16  0E00               	movlw	0
  8287  001A18  6E1A               	movwf	?___ftpack+1,c
  8288  001A1A  0E00               	movlw	0
  8289  001A1C  6E1B               	movwf	?___ftpack+2,c
  8290  001A1E  D044               	goto	l888
  8291  001A20                     l4032:
  8292  001A20  2A1C               	incf	___ftpack@exp,f,c
  8293  001A22  90D8               	bcf	status,0,c
  8294  001A24  321B               	rrcf	___ftpack@arg+2,f,c
  8295  001A26  321A               	rrcf	___ftpack@arg+1,f,c
  8296  001A28  3219               	rrcf	___ftpack@arg,f,c
  8297  001A2A                     l4034:
  8298  001A2A  0E00               	movlw	0
  8299  001A2C  1419               	andwf	___ftpack@arg,w,c
  8300  001A2E  6E1E               	movwf	??___ftpack& (0+255),c
  8301  001A30  0E00               	movlw	0
  8302  001A32  141A               	andwf	___ftpack@arg+1,w,c
  8303  001A34  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8304  001A36  0EFE               	movlw	254
  8305  001A38  141B               	andwf	___ftpack@arg+2,w,c
  8306  001A3A  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8307  001A3C  501E               	movf	??___ftpack,w,c
  8308  001A3E  101F               	iorwf	??___ftpack+1,w,c
  8309  001A40  1020               	iorwf	??___ftpack+2,w,c
  8310  001A42  B4D8               	btfsc	status,2,c
  8311  001A44  D00C               	goto	l4040
  8312  001A46  D7EC               	goto	l4032
  8313  001A48                     l4036:
  8314  001A48  2A1C               	incf	___ftpack@exp,f,c
  8315  001A4A  0E01               	movlw	1
  8316  001A4C  2619               	addwf	___ftpack@arg,f,c
  8317  001A4E  0E00               	movlw	0
  8318  001A50  221A               	addwfc	___ftpack@arg+1,f,c
  8319  001A52  0E00               	movlw	0
  8320  001A54  221B               	addwfc	___ftpack@arg+2,f,c
  8321  001A56  90D8               	bcf	status,0,c
  8322  001A58  321B               	rrcf	___ftpack@arg+2,f,c
  8323  001A5A  321A               	rrcf	___ftpack@arg+1,f,c
  8324  001A5C  3219               	rrcf	___ftpack@arg,f,c
  8325  001A5E                     l4040:
  8326  001A5E  0E00               	movlw	0
  8327  001A60  1419               	andwf	___ftpack@arg,w,c
  8328  001A62  6E1E               	movwf	??___ftpack& (0+255),c
  8329  001A64  0E00               	movlw	0
  8330  001A66  141A               	andwf	___ftpack@arg+1,w,c
  8331  001A68  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8332  001A6A  0EFF               	movlw	255
  8333  001A6C  141B               	andwf	___ftpack@arg+2,w,c
  8334  001A6E  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8335  001A70  501E               	movf	??___ftpack,w,c
  8336  001A72  101F               	iorwf	??___ftpack+1,w,c
  8337  001A74  1020               	iorwf	??___ftpack+2,w,c
  8338  001A76  B4D8               	btfsc	status,2,c
  8339  001A78  D006               	goto	l4044
  8340  001A7A  D7E6               	goto	l4036
  8341  001A7C                     l4042:
  8342  001A7C  061C               	decf	___ftpack@exp,f,c
  8343  001A7E  90D8               	bcf	status,0,c
  8344  001A80  3619               	rlcf	___ftpack@arg,f,c
  8345  001A82  361A               	rlcf	___ftpack@arg+1,f,c
  8346  001A84  361B               	rlcf	___ftpack@arg+2,f,c
  8347  001A86                     l4044:
  8348  001A86  AE1A               	btfss	___ftpack@arg+1,7,c
  8349  001A88  D7F9               	goto	l4042
  8350  001A8A  A01C               	btfss	___ftpack@exp,0,c
  8351  001A8C  9E1A               	bcf	___ftpack@arg+1,7,c
  8352  001A8E  90D8               	bcf	status,0,c
  8353  001A90  321C               	rrcf	___ftpack@exp,f,c
  8354  001A92  501C               	movf	___ftpack@exp,w,c
  8355  001A94  121B               	iorwf	___ftpack@arg+2,f,c
  8356  001A96  501D               	movf	___ftpack@sign,w,c
  8357  001A98  A4D8               	btfss	status,2,c
  8358  001A9A  8E1B               	bsf	___ftpack@arg+2,7,c
  8359  001A9C  C019  F019         	movff	___ftpack@arg,?___ftpack
  8360  001AA0  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8361  001AA4  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8362  001AA8                     l888:
  8363  001AA8  0012               	return	
  8364  001AAA                     __end_of___ftpack:
  8365                           	opt stack 0
  8366                           tblptru	equ	0xFF8
  8367                           tblptrh	equ	0xFF7
  8368                           tblptrl	equ	0xFF6
  8369                           tablat	equ	0xFF5
  8370                           prodh	equ	0xFF4
  8371                           prodl	equ	0xFF3
  8372                           intcon	equ	0xFF2
  8373                           indf0	equ	0xFEF
  8374                           postinc0	equ	0xFEE
  8375                           fsr0h	equ	0xFEA
  8376                           fsr0l	equ	0xFE9
  8377                           wreg	equ	0xFE8
  8378                           postinc1	equ	0xFE6
  8379                           postdec1	equ	0xFE5
  8380                           fsr1l	equ	0xFE1
  8381                           indf2	equ	0xFDF
  8382                           postinc2	equ	0xFDE
  8383                           postdec2	equ	0xFDD
  8384                           fsr2h	equ	0xFDA
  8385                           fsr2l	equ	0xFD9
  8386                           status	equ	0xFD8
  8387                           
  8388 ;; *************** function ___ftneg *****************
  8389 ;; Defined at:
  8390 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  f1              3   24[COMRAM] float 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;		None
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  3   24[COMRAM] float 
  8397 ;; Registers used:
  8398 ;;		wreg, status,2, status,0
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8404 ;;      Params:         3       0       0       0       0       0       0       0       0
  8405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8407 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8408 ;;Total ram usage:        3 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:    4
  8411 ;; This function calls:
  8412 ;;		Nothing
  8413 ;; This function is called by:
  8414 ;;		_sprintf
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           	psect	text37
  8419  002590                     __ptext37:
  8420                           	opt stack 0
  8421  002590                     ___ftneg:
  8422                           	opt stack 23
  8423                           
  8424                           ;incstack = 0
  8425  002590  0E7F               	movlw	127
  8426  002592  141B               	andwf	___ftneg@f1+2,w,c
  8427  002594  101A               	iorwf	___ftneg@f1+1,w,c
  8428  002596  1019               	iorwf	___ftneg@f1,w,c
  8429  002598  B4D8               	btfsc	status,2,c
  8430  00259A  D006               	goto	l999
  8431  00259C  0E00               	movlw	0
  8432  00259E  1A19               	xorwf	___ftneg@f1,f,c
  8433  0025A0  0E00               	movlw	0
  8434  0025A2  1A1A               	xorwf	___ftneg@f1+1,f,c
  8435  0025A4  0E80               	movlw	128
  8436  0025A6  1A1B               	xorwf	___ftneg@f1+2,f,c
  8437  0025A8                     l999:
  8438  0025A8  C019  F019         	movff	___ftneg@f1,?___ftneg
  8439  0025AC  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  8440  0025B0  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  8441  0025B4  0012               	return	
  8442  0025B6                     __end_of___ftneg:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodh	equ	0xFF4
  8449                           prodl	equ	0xFF3
  8450                           intcon	equ	0xFF2
  8451                           indf0	equ	0xFEF
  8452                           postinc0	equ	0xFEE
  8453                           fsr0h	equ	0xFEA
  8454                           fsr0l	equ	0xFE9
  8455                           wreg	equ	0xFE8
  8456                           postinc1	equ	0xFE6
  8457                           postdec1	equ	0xFE5
  8458                           fsr1l	equ	0xFE1
  8459                           indf2	equ	0xFDF
  8460                           postinc2	equ	0xFDE
  8461                           postdec2	equ	0xFDD
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466 ;; *************** function ___ftge *****************
  8467 ;; Defined at:
  8468 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  ff1             3   24[COMRAM] float 
  8471 ;;  ff2             3   27[COMRAM] float 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;		None
  8474 ;; Return value:  Size  Location     Type
  8475 ;;		None               void
  8476 ;; Registers used:
  8477 ;;		wreg, status,2, status,0
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8483 ;;      Params:         6       0       0       0       0       0       0       0       0
  8484 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8485 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8486 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8487 ;;Total ram usage:        9 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    4
  8490 ;; This function calls:
  8491 ;;		Nothing
  8492 ;; This function is called by:
  8493 ;;		_sprintf
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text38
  8498  001DAE                     __ptext38:
  8499                           	opt stack 0
  8500  001DAE                     ___ftge:
  8501                           	opt stack 23
  8502                           
  8503                           ;incstack = 0
  8504  001DAE  AE1B               	btfss	___ftge@ff1+2,7,c
  8505  001DB0  D016               	goto	l4558
  8506  001DB2  C019  F01F         	movff	___ftge@ff1,??___ftge
  8507  001DB6  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  8508  001DBA  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  8509  001DBE  1E1F               	comf	??___ftge,f,c
  8510  001DC0  1E20               	comf	??___ftge+1,f,c
  8511  001DC2  1E21               	comf	??___ftge+2,f,c
  8512  001DC4  2A1F               	incf	??___ftge,f,c
  8513  001DC6  0E00               	movlw	0
  8514  001DC8  2220               	addwfc	??___ftge+1,f,c
  8515  001DCA  2221               	addwfc	??___ftge+2,f,c
  8516  001DCC  0E00               	movlw	0
  8517  001DCE  241F               	addwf	??___ftge,w,c
  8518  001DD0  6E19               	movwf	___ftge@ff1,c
  8519  001DD2  0E00               	movlw	0
  8520  001DD4  2020               	addwfc	??___ftge+1,w,c
  8521  001DD6  6E1A               	movwf	___ftge@ff1+1,c
  8522  001DD8  0E80               	movlw	128
  8523  001DDA  2021               	addwfc	??___ftge+2,w,c
  8524  001DDC  6E1B               	movwf	___ftge@ff1+2,c
  8525  001DDE                     l4558:
  8526  001DDE  AE1E               	btfss	___ftge@ff2+2,7,c
  8527  001DE0  D016               	goto	l4562
  8528  001DE2  C01C  F01F         	movff	___ftge@ff2,??___ftge
  8529  001DE6  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  8530  001DEA  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  8531  001DEE  1E1F               	comf	??___ftge,f,c
  8532  001DF0  1E20               	comf	??___ftge+1,f,c
  8533  001DF2  1E21               	comf	??___ftge+2,f,c
  8534  001DF4  2A1F               	incf	??___ftge,f,c
  8535  001DF6  0E00               	movlw	0
  8536  001DF8  2220               	addwfc	??___ftge+1,f,c
  8537  001DFA  2221               	addwfc	??___ftge+2,f,c
  8538  001DFC  0E00               	movlw	0
  8539  001DFE  241F               	addwf	??___ftge,w,c
  8540  001E00  6E1C               	movwf	___ftge@ff2,c
  8541  001E02  0E00               	movlw	0
  8542  001E04  2020               	addwfc	??___ftge+1,w,c
  8543  001E06  6E1D               	movwf	___ftge@ff2+1,c
  8544  001E08  0E80               	movlw	128
  8545  001E0A  2021               	addwfc	??___ftge+2,w,c
  8546  001E0C  6E1E               	movwf	___ftge@ff2+2,c
  8547  001E0E                     l4562:
  8548  001E0E  0E00               	movlw	0
  8549  001E10  1A19               	xorwf	___ftge@ff1,f,c
  8550  001E12  0E00               	movlw	0
  8551  001E14  1A1A               	xorwf	___ftge@ff1+1,f,c
  8552  001E16  0E80               	movlw	128
  8553  001E18  1A1B               	xorwf	___ftge@ff1+2,f,c
  8554  001E1A  0E00               	movlw	0
  8555  001E1C  1A1C               	xorwf	___ftge@ff2,f,c
  8556  001E1E  0E00               	movlw	0
  8557  001E20  1A1D               	xorwf	___ftge@ff2+1,f,c
  8558  001E22  0E80               	movlw	128
  8559  001E24  1A1E               	xorwf	___ftge@ff2+2,f,c
  8560  001E26  501C               	movf	___ftge@ff2,w,c
  8561  001E28  5C19               	subwf	___ftge@ff1,w,c
  8562  001E2A  501D               	movf	___ftge@ff2+1,w,c
  8563  001E2C  581A               	subwfb	___ftge@ff1+1,w,c
  8564  001E2E  501E               	movf	___ftge@ff2+2,w,c
  8565  001E30  581B               	subwfb	___ftge@ff1+2,w,c
  8566  001E32  B0D8               	btfsc	status,0,c
  8567  001E34  D002               	goto	l4568
  8568  001E36  90D8               	bcf	status,0,c
  8569  001E38  D001               	goto	l983
  8570  001E3A                     l4568:
  8571  001E3A  80D8               	bsf	status,0,c
  8572  001E3C                     l983:
  8573  001E3C  0012               	return	
  8574  001E3E                     __end_of___ftge:
  8575                           	opt stack 0
  8576                           tblptru	equ	0xFF8
  8577                           tblptrh	equ	0xFF7
  8578                           tblptrl	equ	0xFF6
  8579                           tablat	equ	0xFF5
  8580                           prodh	equ	0xFF4
  8581                           prodl	equ	0xFF3
  8582                           intcon	equ	0xFF2
  8583                           indf0	equ	0xFEF
  8584                           postinc0	equ	0xFEE
  8585                           fsr0h	equ	0xFEA
  8586                           fsr0l	equ	0xFE9
  8587                           wreg	equ	0xFE8
  8588                           postinc1	equ	0xFE6
  8589                           postdec1	equ	0xFE5
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _Lcd_Write_String *****************
  8599 ;; Defined at:
  8600 ;;		line 90 in file "lcd.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  a               2   28[COMRAM] PTR unsigned char 
  8603 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  8604 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_15(2), STR_14(2), 
  8605 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  i               2   32[COMRAM] int 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8617 ;;      Params:         2       0       0       0       0       0       0       0       0
  8618 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8619 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8620 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8621 ;;Total ram usage:        6 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    6
  8624 ;; This function calls:
  8625 ;;		_Lcd_Write_Char
  8626 ;; This function is called by:
  8627 ;;		_Inicializa_Driveby
  8628 ;;		_Comando_Tablet
  8629 ;;		_Lcd_Write_Integer
  8630 ;;		_main
  8631 ;;		_Lcd_Write_Float
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text39
  8636  001FC2                     __ptext39:
  8637                           	opt stack 0
  8638  001FC2                     _Lcd_Write_String:
  8639                           	opt stack 24
  8640                           
  8641                           ;lcd.c: 91: int i;
  8642                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  8643                           
  8644                           ;incstack = 0
  8645  001FC2  0E00               	movlw	0
  8646  001FC4  6E22               	movwf	Lcd_Write_String@i+1,c
  8647  001FC6  0E00               	movlw	0
  8648  001FC8  6E21               	movwf	Lcd_Write_String@i,c
  8649  001FCA  D01C               	goto	l4900
  8650  001FCC                     l4896:
  8651                           
  8652                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  8653  001FCC  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  8654  001FD0  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  8655  001FD4  5021               	movf	Lcd_Write_String@i,w,c
  8656  001FD6  261F               	addwf	??_Lcd_Write_String,f,c
  8657  001FD8  5022               	movf	Lcd_Write_String@i+1,w,c
  8658  001FDA  2220               	addwfc	??_Lcd_Write_String+1,f,c
  8659  001FDC  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  8660  001FE0  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  8661  001FE4  6AF8               	clrf	tblptru,c
  8662  001FE6  0E07               	movlw	(high __ramtop+-1)
  8663  001FE8  64F7               	cpfsgt	tblptrh,c
  8664  001FEA  D003               	bra	u5237
  8665  001FEC  0008               	tblrd		*
  8666  001FEE  50F5               	movf	tablat,w,c
  8667  001FF0  D005               	bra	u5230
  8668  001FF2                     u5237:
  8669  001FF2  CFF6 FFE9          	movff	tblptrl,fsr0l
  8670  001FF6  CFF7 FFEA          	movff	tblptrh,fsr0h
  8671  001FFA  50EF               	movf	indf0,w,c
  8672  001FFC                     u5230:
  8673  001FFC  EC38  F012         	call	_Lcd_Write_Char
  8674  002000  4A21               	infsnz	Lcd_Write_String@i,f,c
  8675  002002  2A22               	incf	Lcd_Write_String@i+1,f,c
  8676  002004                     l4900:
  8677  002004  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  8678  002008  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  8679  00200C  5021               	movf	Lcd_Write_String@i,w,c
  8680  00200E  261F               	addwf	??_Lcd_Write_String,f,c
  8681  002010  5022               	movf	Lcd_Write_String@i+1,w,c
  8682  002012  2220               	addwfc	??_Lcd_Write_String+1,f,c
  8683  002014  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  8684  002018  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  8685  00201C  6AF8               	clrf	tblptru,c
  8686  00201E  0E07               	movlw	(high __ramtop+-1)
  8687  002020  64F7               	cpfsgt	tblptrh,c
  8688  002022  D003               	bra	u5247
  8689  002024  0008               	tblrd		*
  8690  002026  50F5               	movf	tablat,w,c
  8691  002028  D005               	bra	u5240
  8692  00202A                     u5247:
  8693  00202A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8694  00202E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8695  002032  50EF               	movf	indf0,w,c
  8696  002034                     u5240:
  8697  002034  0900               	iorlw	0
  8698  002036  B4D8               	btfsc	status,2,c
  8699  002038  0012               	return	
  8700  00203A  D7C8               	goto	l4896
  8701  00203C                     __end_of_Lcd_Write_String:
  8702                           	opt stack 0
  8703                           tblptru	equ	0xFF8
  8704                           tblptrh	equ	0xFF7
  8705                           tblptrl	equ	0xFF6
  8706                           tablat	equ	0xFF5
  8707                           prodh	equ	0xFF4
  8708                           prodl	equ	0xFF3
  8709                           intcon	equ	0xFF2
  8710                           indf0	equ	0xFEF
  8711                           postinc0	equ	0xFEE
  8712                           fsr0h	equ	0xFEA
  8713                           fsr0l	equ	0xFE9
  8714                           wreg	equ	0xFE8
  8715                           postinc1	equ	0xFE6
  8716                           postdec1	equ	0xFE5
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           fsr2h	equ	0xFDA
  8722                           fsr2l	equ	0xFD9
  8723                           status	equ	0xFD8
  8724                           
  8725 ;; *************** function _Lcd_Write_Char *****************
  8726 ;; Defined at:
  8727 ;;		line 75 in file "lcd.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;  a               1    wreg     unsigned char 
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;  a               1   27[COMRAM] unsigned char 
  8732 ;;  y               1   26[COMRAM] unsigned char 
  8733 ;;  temp            1   25[COMRAM] unsigned char 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;		None               void
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0
  8744 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8746 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8747 ;;Total ram usage:        3 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    5
  8750 ;; This function calls:
  8751 ;;		_Lcd_Port
  8752 ;; This function is called by:
  8753 ;;		_Lcd_Write_String
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           	psect	text40
  8758  002470                     __ptext40:
  8759                           	opt stack 0
  8760  002470                     _Lcd_Write_Char:
  8761                           	opt stack 24
  8762                           
  8763                           ;incstack = 0
  8764                           ;Lcd_Write_Char@a stored from wreg
  8765  002470  6E1C               	movwf	Lcd_Write_Char@a,c
  8766                           
  8767                           ;lcd.c: 76: char temp, y;
  8768                           ;lcd.c: 77: temp = a & 0x0F;
  8769  002472  501C               	movf	Lcd_Write_Char@a,w,c
  8770  002474  0B0F               	andlw	15
  8771  002476  6E1A               	movwf	Lcd_Write_Char@temp,c
  8772                           
  8773                           ;lcd.c: 78: y = a & 0xF0;
  8774  002478  501C               	movf	Lcd_Write_Char@a,w,c
  8775  00247A  0BF0               	andlw	240
  8776  00247C  6E1B               	movwf	Lcd_Write_Char@y,c
  8777                           
  8778                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  8779  00247E  8084               	bsf	3972,0,c	;volatile
  8780                           
  8781                           ;lcd.c: 80: Lcd_Port(y >> 4);
  8782  002480  381B               	swapf	Lcd_Write_Char@y,w,c
  8783  002482  0B0F               	andlw	15
  8784  002484  EC89  F012         	call	_Lcd_Port
  8785                           
  8786                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  8787  002488  8484               	bsf	3972,2,c	;volatile
  8788                           
  8789                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8790  00248A  0E0D               	movlw	13
  8791  00248C                     u5517:
  8792  00248C  2EE8               	decfsz	wreg,f,c
  8793  00248E  D7FE               	goto	u5517
  8794  002490  F000               	nop	
  8795                           
  8796                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  8797  002492  9484               	bcf	3972,2,c	;volatile
  8798                           
  8799                           ;lcd.c: 84: Lcd_Port(temp);
  8800  002494  501A               	movf	Lcd_Write_Char@temp,w,c
  8801  002496  EC89  F012         	call	_Lcd_Port
  8802                           
  8803                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  8804  00249A  8484               	bsf	3972,2,c	;volatile
  8805                           
  8806                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8807  00249C  0E0D               	movlw	13
  8808  00249E                     u5527:
  8809  00249E  2EE8               	decfsz	wreg,f,c
  8810  0024A0  D7FE               	goto	u5527
  8811  0024A2  F000               	nop	
  8812                           
  8813                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  8814  0024A4  9484               	bcf	3972,2,c	;volatile
  8815  0024A6  0012               	return	
  8816  0024A8                     __end_of_Lcd_Write_Char:
  8817                           	opt stack 0
  8818                           tblptru	equ	0xFF8
  8819                           tblptrh	equ	0xFF7
  8820                           tblptrl	equ	0xFF6
  8821                           tablat	equ	0xFF5
  8822                           prodh	equ	0xFF4
  8823                           prodl	equ	0xFF3
  8824                           intcon	equ	0xFF2
  8825                           indf0	equ	0xFEF
  8826                           postinc0	equ	0xFEE
  8827                           fsr0h	equ	0xFEA
  8828                           fsr0l	equ	0xFE9
  8829                           wreg	equ	0xFE8
  8830                           postinc1	equ	0xFE6
  8831                           postdec1	equ	0xFE5
  8832                           fsr1l	equ	0xFE1
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function _Lcd_Set_Cursor *****************
  8841 ;; Defined at:
  8842 ;;		line 40 in file "lcd.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  a               1    wreg     unsigned char 
  8845 ;;  b               1   27[COMRAM] unsigned char 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  a               1   28[COMRAM] unsigned char 
  8848 ;;  temp            1   31[COMRAM] unsigned char 
  8849 ;;  y               1   30[COMRAM] unsigned char 
  8850 ;;  z               1   29[COMRAM] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;		None               void
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8860 ;;      Params:         1       0       0       0       0       0       0       0       0
  8861 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8863 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8864 ;;Total ram usage:        5 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    6
  8867 ;; This function calls:
  8868 ;;		_Lcd_Cmd
  8869 ;; This function is called by:
  8870 ;;		_Inicializa_Driveby
  8871 ;;		_Comando_Tablet
  8872 ;;		_main
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	text41
  8877  002252                     __ptext41:
  8878                           	opt stack 0
  8879  002252                     _Lcd_Set_Cursor:
  8880                           	opt stack 24
  8881                           
  8882                           ;incstack = 0
  8883                           ;Lcd_Set_Cursor@a stored from wreg
  8884  002252  6E1D               	movwf	Lcd_Set_Cursor@a,c
  8885                           
  8886                           ;lcd.c: 41: char temp, z, y;
  8887                           ;lcd.c: 42: if (a == 1) {
  8888  002254  041D               	decf	Lcd_Set_Cursor@a,w,c
  8889  002256  A4D8               	btfss	status,2,c
  8890  002258  D010               	goto	l5000
  8891                           
  8892                           ;lcd.c: 43: temp = 0x80 + b - 1;
  8893  00225A  501C               	movf	Lcd_Set_Cursor@b,w,c
  8894  00225C  0F7F               	addlw	127
  8895  00225E  6E20               	movwf	Lcd_Set_Cursor@temp,c
  8896                           
  8897                           ;lcd.c: 44: z = temp >> 4;
  8898  002260  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  8899  002262  0B0F               	andlw	15
  8900  002264  6E1E               	movwf	Lcd_Set_Cursor@z,c
  8901                           
  8902                           ;lcd.c: 45: y = temp & 0x0F;
  8903  002266  5020               	movf	Lcd_Set_Cursor@temp,w,c
  8904  002268  0B0F               	andlw	15
  8905  00226A  6E1F               	movwf	Lcd_Set_Cursor@y,c
  8906                           
  8907                           ;lcd.c: 46: Lcd_Cmd(z);
  8908  00226C  501E               	movf	Lcd_Set_Cursor@z,w,c
  8909  00226E  ECED  F012         	call	_Lcd_Cmd
  8910                           
  8911                           ;lcd.c: 47: Lcd_Cmd(y);
  8912  002272  501F               	movf	Lcd_Set_Cursor@y,w,c
  8913  002274  ECED  F012         	call	_Lcd_Cmd
  8914                           
  8915                           ;lcd.c: 48: } else if (a == 2) {
  8916  002278  D013               	goto	l250
  8917  00227A                     l5000:
  8918  00227A  501D               	movf	Lcd_Set_Cursor@a,w,c
  8919  00227C  0A02               	xorlw	2
  8920  00227E  A4D8               	btfss	status,2,c
  8921  002280  D00F               	goto	l250
  8922                           
  8923                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  8924  002282  501C               	movf	Lcd_Set_Cursor@b,w,c
  8925  002284  0FBF               	addlw	191
  8926  002286  6E20               	movwf	Lcd_Set_Cursor@temp,c
  8927                           
  8928                           ;lcd.c: 50: z = temp >> 4;
  8929  002288  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  8930  00228A  0B0F               	andlw	15
  8931  00228C  6E1E               	movwf	Lcd_Set_Cursor@z,c
  8932                           
  8933                           ;lcd.c: 51: y = temp & 0x0F;
  8934  00228E  5020               	movf	Lcd_Set_Cursor@temp,w,c
  8935  002290  0B0F               	andlw	15
  8936  002292  6E1F               	movwf	Lcd_Set_Cursor@y,c
  8937                           
  8938                           ;lcd.c: 52: Lcd_Cmd(z);
  8939  002294  501E               	movf	Lcd_Set_Cursor@z,w,c
  8940  002296  ECED  F012         	call	_Lcd_Cmd
  8941                           
  8942                           ;lcd.c: 53: Lcd_Cmd(y);
  8943  00229A  501F               	movf	Lcd_Set_Cursor@y,w,c
  8944  00229C  ECED  F012         	call	_Lcd_Cmd
  8945  0022A0                     l250:
  8946  0022A0  0012               	return	
  8947  0022A2                     __end_of_Lcd_Set_Cursor:
  8948                           	opt stack 0
  8949                           tblptru	equ	0xFF8
  8950                           tblptrh	equ	0xFF7
  8951                           tblptrl	equ	0xFF6
  8952                           tablat	equ	0xFF5
  8953                           prodh	equ	0xFF4
  8954                           prodl	equ	0xFF3
  8955                           intcon	equ	0xFF2
  8956                           indf0	equ	0xFEF
  8957                           postinc0	equ	0xFEE
  8958                           fsr0h	equ	0xFEA
  8959                           fsr0l	equ	0xFE9
  8960                           wreg	equ	0xFE8
  8961                           postinc1	equ	0xFE6
  8962                           postdec1	equ	0xFE5
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _Lcd_Clear *****************
  8972 ;; Defined at:
  8973 ;;		line 35 in file "lcd.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg, status,2, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8989 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8990 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8991 ;;Total ram usage:        0 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    6
  8994 ;; This function calls:
  8995 ;;		_Lcd_Cmd
  8996 ;; This function is called by:
  8997 ;;		_Inicializa_Driveby
  8998 ;;		_Comando_Tablet
  8999 ;;		_main
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text42
  9004  0026C2                     __ptext42:
  9005                           	opt stack 0
  9006  0026C2                     _Lcd_Clear:
  9007                           	opt stack 24
  9008                           
  9009                           ;lcd.c: 36: Lcd_Cmd(0);
  9010                           
  9011                           ;incstack = 0
  9012  0026C2  0E00               	movlw	0
  9013  0026C4  ECED  F012         	call	_Lcd_Cmd
  9014                           
  9015                           ;lcd.c: 37: Lcd_Cmd(1);
  9016  0026C8  0E01               	movlw	1
  9017  0026CA  ECED  F012         	call	_Lcd_Cmd
  9018  0026CE  0012               	return	
  9019  0026D0                     __end_of_Lcd_Clear:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           prodh	equ	0xFF4
  9026                           prodl	equ	0xFF3
  9027                           intcon	equ	0xFF2
  9028                           indf0	equ	0xFEF
  9029                           postinc0	equ	0xFEE
  9030                           fsr0h	equ	0xFEA
  9031                           fsr0l	equ	0xFE9
  9032                           wreg	equ	0xFE8
  9033                           postinc1	equ	0xFE6
  9034                           postdec1	equ	0xFE5
  9035                           fsr1l	equ	0xFE1
  9036                           indf2	equ	0xFDF
  9037                           postinc2	equ	0xFDE
  9038                           postdec2	equ	0xFDD
  9039                           fsr2h	equ	0xFDA
  9040                           fsr2l	equ	0xFD9
  9041                           status	equ	0xFD8
  9042                           
  9043 ;; *************** function _Lcd_Cmd *****************
  9044 ;; Defined at:
  9045 ;;		line 27 in file "lcd.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;  a               1    wreg     unsigned char 
  9048 ;; Auto vars:     Size  Location     Type
  9049 ;;  a               1   26[COMRAM] unsigned char 
  9050 ;; Return value:  Size  Location     Type
  9051 ;;		None               void
  9052 ;; Registers used:
  9053 ;;		wreg, status,2, cstack
  9054 ;; Tracked objects:
  9055 ;;		On entry : 0/0
  9056 ;;		On exit  : 0/0
  9057 ;;		Unchanged: 0/0
  9058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9059 ;;      Params:         0       0       0       0       0       0       0       0       0
  9060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9061 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9062 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9063 ;;Total ram usage:        2 bytes
  9064 ;; Hardware stack levels used:    1
  9065 ;; Hardware stack levels required when called:    5
  9066 ;; This function calls:
  9067 ;;		_Lcd_Port
  9068 ;; This function is called by:
  9069 ;;		_Lcd_Clear
  9070 ;;		_Lcd_Set_Cursor
  9071 ;;		_Lcd_Init
  9072 ;;		_Lcd_Shift_Right
  9073 ;;		_Lcd_Shift_Left
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text43
  9078  0025DA                     __ptext43:
  9079                           	opt stack 0
  9080  0025DA                     _Lcd_Cmd:
  9081                           	opt stack 24
  9082                           
  9083                           ;incstack = 0
  9084                           ;Lcd_Cmd@a stored from wreg
  9085  0025DA  6E1B               	movwf	Lcd_Cmd@a,c
  9086                           
  9087                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9088  0025DC  9084               	bcf	3972,0,c	;volatile
  9089                           
  9090                           ;lcd.c: 29: Lcd_Port(a);
  9091  0025DE  501B               	movf	Lcd_Cmd@a,w,c
  9092  0025E0  EC89  F012         	call	_Lcd_Port
  9093                           
  9094                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9095  0025E4  8484               	bsf	3972,2,c	;volatile
  9096                           
  9097                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9098  0025E6  0E06               	movlw	6
  9099  0025E8  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9100  0025EA  0E30               	movlw	48
  9101  0025EC                     u5537:
  9102  0025EC  2EE8               	decfsz	wreg,f,c
  9103  0025EE  D7FE               	goto	u5537
  9104  0025F0  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9105  0025F2  D7FC               	goto	u5537
  9106  0025F4  D000               	nop2	
  9107                           
  9108                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9109  0025F6  9484               	bcf	3972,2,c	;volatile
  9110  0025F8  0012               	return	
  9111  0025FA                     __end_of_Lcd_Cmd:
  9112                           	opt stack 0
  9113                           tblptru	equ	0xFF8
  9114                           tblptrh	equ	0xFF7
  9115                           tblptrl	equ	0xFF6
  9116                           tablat	equ	0xFF5
  9117                           prodh	equ	0xFF4
  9118                           prodl	equ	0xFF3
  9119                           intcon	equ	0xFF2
  9120                           indf0	equ	0xFEF
  9121                           postinc0	equ	0xFEE
  9122                           fsr0h	equ	0xFEA
  9123                           fsr0l	equ	0xFE9
  9124                           wreg	equ	0xFE8
  9125                           postinc1	equ	0xFE6
  9126                           postdec1	equ	0xFE5
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           postinc2	equ	0xFDE
  9130                           postdec2	equ	0xFDD
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           
  9135 ;; *************** function _Lcd_Port *****************
  9136 ;; Defined at:
  9137 ;;		line 6 in file "lcd.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  a               1    wreg     unsigned char 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  a               1   24[COMRAM] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0
  9152 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9154 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9155 ;;Total ram usage:        1 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    4
  9158 ;; This function calls:
  9159 ;;		Nothing
  9160 ;; This function is called by:
  9161 ;;		_Lcd_Cmd
  9162 ;;		_Lcd_Init
  9163 ;;		_Lcd_Write_Char
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text44
  9168  002512                     __ptext44:
  9169                           	opt stack 0
  9170  002512                     _Lcd_Port:
  9171                           	opt stack 24
  9172                           
  9173                           ;incstack = 0
  9174                           ;Lcd_Port@a stored from wreg
  9175  002512  6E19               	movwf	Lcd_Port@a,c
  9176                           
  9177                           ;lcd.c: 7: if (a & 1)
  9178  002514  A019               	btfss	Lcd_Port@a,0,c
  9179  002516  D002               	goto	l230
  9180                           
  9181                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9182  002518  8883               	bsf	3971,4,c	;volatile
  9183  00251A  D001               	goto	l4064
  9184  00251C                     l230:
  9185                           
  9186                           ;lcd.c: 9: else
  9187                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9188  00251C  9883               	bcf	3971,4,c	;volatile
  9189  00251E                     l4064:
  9190                           
  9191                           ;lcd.c: 12: if (a & 2)
  9192  00251E  A219               	btfss	Lcd_Port@a,1,c
  9193  002520  D002               	goto	l232
  9194                           
  9195                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9196  002522  8A83               	bsf	3971,5,c	;volatile
  9197  002524  D001               	goto	l4068
  9198  002526                     l232:
  9199                           
  9200                           ;lcd.c: 14: else
  9201                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9202  002526  9A83               	bcf	3971,5,c	;volatile
  9203  002528                     l4068:
  9204                           
  9205                           ;lcd.c: 17: if (a & 4)
  9206  002528  A419               	btfss	Lcd_Port@a,2,c
  9207  00252A  D002               	goto	l234
  9208                           
  9209                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9210  00252C  8C83               	bsf	3971,6,c	;volatile
  9211  00252E  D001               	goto	l4072
  9212  002530                     l234:
  9213                           
  9214                           ;lcd.c: 19: else
  9215                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9216  002530  9C83               	bcf	3971,6,c	;volatile
  9217  002532                     l4072:
  9218                           
  9219                           ;lcd.c: 22: if (a & 8)
  9220  002532  A619               	btfss	Lcd_Port@a,3,c
  9221  002534  D002               	goto	l236
  9222                           
  9223                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9224  002536  8E83               	bsf	3971,7,c	;volatile
  9225  002538  D001               	goto	l238
  9226  00253A                     l236:
  9227                           
  9228                           ;lcd.c: 24: else
  9229                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9230  00253A  9E83               	bcf	3971,7,c	;volatile
  9231  00253C                     l238:
  9232  00253C  0012               	return	
  9233  00253E                     __end_of_Lcd_Port:
  9234                           	opt stack 0
  9235                           tblptru	equ	0xFF8
  9236                           tblptrh	equ	0xFF7
  9237                           tblptrl	equ	0xFF6
  9238                           tablat	equ	0xFF5
  9239                           prodh	equ	0xFF4
  9240                           prodl	equ	0xFF3
  9241                           intcon	equ	0xFF2
  9242                           indf0	equ	0xFEF
  9243                           postinc0	equ	0xFEE
  9244                           fsr0h	equ	0xFEA
  9245                           fsr0l	equ	0xFE9
  9246                           wreg	equ	0xFE8
  9247                           postinc1	equ	0xFE6
  9248                           postdec1	equ	0xFE5
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           postdec2	equ	0xFDD
  9253                           fsr2h	equ	0xFDA
  9254                           fsr2l	equ	0xFD9
  9255                           status	equ	0xFD8
  9256                           
  9257 ;; *************** function _TMRO_USART *****************
  9258 ;; Defined at:
  9259 ;;		line 83 in file "robot.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;		None               void
  9266 ;; Registers used:
  9267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9273 ;;      Params:         0       0       0       0       0       0       0       0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9275 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9276 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9277 ;;Total ram usage:       14 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    3
  9280 ;; This function calls:
  9281 ;;		_ReadUSART
  9282 ;;		i2_Lcd_Clear
  9283 ;;		i2_Lcd_Set_Cursor
  9284 ;;		i2_Lcd_Write_String
  9285 ;; This function is called by:
  9286 ;;		Interrupt level 2
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	intcode
  9291  000008                     __pintcode:
  9292                           	opt stack 0
  9293  000008                     _TMRO_USART:
  9294                           	opt stack 21
  9295                           
  9296                           ;incstack = 0
  9297  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
  9298  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
  9299  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
  9300  000014  ED2A  F00C         	call	int_func,f	;refresh shadow registers
  9301                           pclatu	equ	0xFFB
  9302                           pclath	equ	0xFFA
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           indf0	equ	0xFEF
  9311                           postinc0	equ	0xFEE
  9312                           fsr0h	equ	0xFEA
  9313                           fsr0l	equ	0xFE9
  9314                           wreg	equ	0xFE8
  9315                           postinc1	equ	0xFE6
  9316                           postdec1	equ	0xFE5
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325                           	psect	intcode_body
  9326  001854                     __pintcode_body:
  9327                           	opt stack 21
  9328  001854                     int_func:
  9329                           	opt stack 21
  9330  001854  0006               	pop		; remove dummy address from shadow register refresh
  9331  001856  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
  9332  00185A  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
  9333  00185E  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
  9334  001862  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
  9335  001866  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
  9336  00186A  CFF3 F013          	movff	prodl,??_TMRO_USART+8
  9337  00186E  CFF4 F014          	movff	prodh,??_TMRO_USART+9
  9338  001872  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
  9339  001876  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
  9340  00187A  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
  9341  00187E  CFF5 F018          	movff	tablat,??_TMRO_USART+13
  9342                           
  9343                           ;robot.c: 88: if (PIR1bits.RCIF) {
  9344  001882  AA9E               	btfss	3998,5,c	;volatile
  9345  001884  D032               	goto	i2l347
  9346                           
  9347                           ;robot.c: 98: BluetoothDato[cad] = ReadUSART();
  9348  001886  503D               	movf	_cad,w,c
  9349  001888  0D01               	mullw	1
  9350  00188A  0101               	movlb	1	; () banked
  9351  00188C  0E28               	movlw	low _BluetoothDato
  9352  00188E  24F3               	addwf	prodl,w,c
  9353  001890  6ED9               	movwf	fsr2l,c
  9354  001892  0101               	movlb	1	; () banked
  9355  001894  0E01               	movlw	high _BluetoothDato
  9356  001896  20F4               	addwfc	prodh,w,c
  9357  001898  6EDA               	movwf	fsr2h,c
  9358  00189A  EC1C  F013         	call	_ReadUSART	;wreg free
  9359  00189E  6EDF               	movwf	indf2,c
  9360                           
  9361                           ;robot.c: 99: if (BluetoothDato[cad] == '#') {
  9362  0018A0  503D               	movf	_cad,w,c
  9363  0018A2  0D01               	mullw	1
  9364  0018A4  0101               	movlb	1	; () banked
  9365  0018A6  0E28               	movlw	low _BluetoothDato
  9366  0018A8  24F3               	addwf	prodl,w,c
  9367  0018AA  6ED9               	movwf	fsr2l,c
  9368  0018AC  0101               	movlb	1	; () banked
  9369  0018AE  0E01               	movlw	high _BluetoothDato
  9370  0018B0  20F4               	addwfc	prodh,w,c
  9371  0018B2  6EDA               	movwf	fsr2h,c
  9372  0018B4  0E23               	movlw	35
  9373  0018B6  62DF               	cpfseq	indf2,c
  9374  0018B8  D013               	goto	i2l3944
  9375                           
  9376                           ; BSR set to: 1
  9377                           ;robot.c: 100: if (ComanTFlag == 0) {
  9378  0018BA  6632               	tstfsz	_ComanTFlag,c
  9379  0018BC  D007               	goto	i2l3940
  9380                           
  9381                           ; BSR set to: 1
  9382                           ;robot.c: 101: EntTrama = 1;
  9383  0018BE  0E01               	movlw	1
  9384  0018C0  6E35               	movwf	_EntTrama,c
  9385                           
  9386                           ;robot.c: 102: FinComandT = 0;
  9387  0018C2  0E00               	movlw	0
  9388  0018C4  6E37               	movwf	_FinComandT,c
  9389                           
  9390                           ;robot.c: 103: ComanTFlag = 1;
  9391  0018C6  0E01               	movlw	1
  9392  0018C8  6E32               	movwf	_ComanTFlag,c
  9393  0018CA  D00D               	goto	i2u373_40
  9394  0018CC                     i2l3940:
  9395                           
  9396                           ; BSR set to: 1
  9397                           ;robot.c: 106: else if (ComanTFlag == 1) {
  9398  0018CC  0432               	decf	_ComanTFlag,w,c
  9399  0018CE  A4D8               	btfss	status,2,c
  9400  0018D0  D01C               	goto	i2l3956
  9401                           
  9402                           ; BSR set to: 1
  9403                           ;robot.c: 107: ComanTFlag = 0;
  9404  0018D2  0E00               	movlw	0
  9405  0018D4  6E32               	movwf	_ComanTFlag,c
  9406                           
  9407                           ;robot.c: 108: FinComandT = 1;
  9408  0018D6  0E01               	movlw	1
  9409  0018D8  6E37               	movwf	_FinComandT,c
  9410                           
  9411                           ;robot.c: 109: EntTrama = 0;
  9412  0018DA  0E00               	movlw	0
  9413  0018DC  6E35               	movwf	_EntTrama,c
  9414  0018DE  D015               	goto	i2l3956
  9415  0018E0                     i2l3944:
  9416                           
  9417                           ; BSR set to: 1
  9418                           ;robot.c: 123: else if (EntTrama == 1)
  9419  0018E0  0435               	decf	_EntTrama,w,c
  9420  0018E2  A4D8               	btfss	status,2,c
  9421  0018E4  D012               	goto	i2l3956
  9422  0018E6                     i2u373_40:
  9423                           
  9424                           ; BSR set to: 1
  9425                           ;robot.c: 124: cad++;
  9426  0018E6  2A3D               	incf	_cad,f,c
  9427  0018E8  D010               	goto	i2l3956
  9428  0018EA                     i2l347:
  9429                           
  9430                           ;robot.c: 128: else if(PIR1bits.TMR2IF){
  9431  0018EA  A29E               	btfss	3998,1,c	;volatile
  9432  0018EC  D00E               	goto	i2l3956
  9433                           
  9434                           ;robot.c: 129: Lcd_Clear();
  9435  0018EE  EC68  F013         	call	i2_Lcd_Clear	;wreg free
  9436                           
  9437                           ;robot.c: 130: Lcd_Set_Cursor(1,1);
  9438  0018F2  0E01               	movlw	1
  9439  0018F4  6E04               	movwf	i2Lcd_Set_Cursor@b,c
  9440  0018F6  0E01               	movlw	1
  9441  0018F8  EC51  F011         	call	i2_Lcd_Set_Cursor
  9442                           
  9443                           ;robot.c: 131: Lcd_Write_String("Interruption TMR2");
  9444  0018FC  0E7F               	movlw	high STR_19
  9445  0018FE  6E06               	movwf	i2Lcd_Write_String@a+1,c
  9446  001900  0E41               	movlw	low STR_19
  9447  001902  6E05               	movwf	i2Lcd_Write_String@a,c
  9448  001904  EC1E  F010         	call	i2_Lcd_Write_String	;wreg free
  9449                           
  9450                           ;robot.c: 132: PIE1bits.TMR2IE = 0;
  9451  001908  929D               	bcf	3997,1,c	;volatile
  9452  00190A                     i2l3956:
  9453                           
  9454                           ;robot.c: 133: }
  9455                           ;robot.c: 134: PIR1bits.TMR2IF=0;
  9456  00190A  929E               	bcf	3998,1,c	;volatile
  9457                           
  9458                           ;robot.c: 135: PIR1bits.RCIF=0;
  9459  00190C  9A9E               	bcf	3998,5,c	;volatile
  9460  00190E  C018  FFF5         	movff	??_TMRO_USART+13,tablat
  9461  001912  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
  9462  001916  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
  9463  00191A  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
  9464  00191E  C014  FFF4         	movff	??_TMRO_USART+9,prodh
  9465  001922  C013  FFF3         	movff	??_TMRO_USART+8,prodl
  9466  001926  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
  9467  00192A  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
  9468  00192E  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
  9469  001932  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
  9470  001936  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
  9471  00193A  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
  9472  00193E  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
  9473  001942  C00B  FFFA         	movff	??_TMRO_USART,pclath
  9474  001946  0011               	retfie		f
  9475  001948                     __end_of_TMRO_USART:
  9476                           	opt stack 0
  9477                           pclatu	equ	0xFFB
  9478                           pclath	equ	0xFFA
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           intcon	equ	0xFF2
  9486                           indf0	equ	0xFEF
  9487                           postinc0	equ	0xFEE
  9488                           fsr0h	equ	0xFEA
  9489                           fsr0l	equ	0xFE9
  9490                           wreg	equ	0xFE8
  9491                           postinc1	equ	0xFE6
  9492                           postdec1	equ	0xFE5
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function i2_Lcd_Write_String *****************
  9503 ;; Defined at:
  9504 ;;		line 90 in file "lcd.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  a               2    4[COMRAM] PTR unsigned char 
  9507 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9508 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_15(2), STR_14(2), 
  9509 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  Lcd_Write_St    2    8[COMRAM] int 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;		None               void
  9514 ;; Registers used:
  9515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9521 ;;      Params:         2       0       0       0       0       0       0       0       0
  9522 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9523 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9524 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9525 ;;Total ram usage:        6 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    2
  9528 ;; This function calls:
  9529 ;;		i2_Lcd_Write_Char
  9530 ;; This function is called by:
  9531 ;;		_TMRO_USART
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text46
  9536  00203C                     __ptext46:
  9537                           	opt stack 0
  9538  00203C                     i2_Lcd_Write_String:
  9539                           	opt stack 21
  9540                           
  9541                           ;lcd.c: 91: int i;
  9542                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9543                           
  9544                           ;incstack = 0
  9545  00203C  0E00               	movlw	0
  9546  00203E  6E0A               	movwf	i2Lcd_Write_String@i+1,c
  9547  002040  0E00               	movlw	0
  9548  002042  6E09               	movwf	i2Lcd_Write_String@i,c
  9549  002044  D01C               	goto	i2l3862
  9550  002046                     i2l3858:
  9551                           
  9552                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9553  002046  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
  9554  00204A  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
  9555  00204E  5009               	movf	i2Lcd_Write_String@i,w,c
  9556  002050  2607               	addwf	??i2_Lcd_Write_String,f,c
  9557  002052  500A               	movf	i2Lcd_Write_String@i+1,w,c
  9558  002054  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
  9559  002056  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
  9560  00205A  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
  9561  00205E  6AF8               	clrf	tblptru,c
  9562  002060  0E07               	movlw	(high __ramtop+-1)
  9563  002062  64F7               	cpfsgt	tblptrh,c
  9564  002064  D003               	bra	i2u359_47
  9565  002066  0008               	tblrd		*
  9566  002068  50F5               	movf	tablat,w,c
  9567  00206A  D005               	bra	i2u359_40
  9568  00206C                     i2u359_47:
  9569  00206C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9570  002070  CFF7 FFEA          	movff	tblptrh,fsr0h
  9571  002074  50EF               	movf	indf0,w,c
  9572  002076                     i2u359_40:
  9573  002076  EC54  F012         	call	i2_Lcd_Write_Char
  9574  00207A  4A09               	infsnz	i2Lcd_Write_String@i,f,c
  9575  00207C  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
  9576  00207E                     i2l3862:
  9577  00207E  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
  9578  002082  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
  9579  002086  5009               	movf	i2Lcd_Write_String@i,w,c
  9580  002088  2607               	addwf	??i2_Lcd_Write_String,f,c
  9581  00208A  500A               	movf	i2Lcd_Write_String@i+1,w,c
  9582  00208C  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
  9583  00208E  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
  9584  002092  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
  9585  002096  6AF8               	clrf	tblptru,c
  9586  002098  0E07               	movlw	(high __ramtop+-1)
  9587  00209A  64F7               	cpfsgt	tblptrh,c
  9588  00209C  D003               	bra	i2u360_47
  9589  00209E  0008               	tblrd		*
  9590  0020A0  50F5               	movf	tablat,w,c
  9591  0020A2  D005               	bra	i2u360_40
  9592  0020A4                     i2u360_47:
  9593  0020A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  9594  0020A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  9595  0020AC  50EF               	movf	indf0,w,c
  9596  0020AE                     i2u360_40:
  9597  0020AE  0900               	iorlw	0
  9598  0020B0  B4D8               	btfsc	status,2,c
  9599  0020B2  0012               	return	
  9600  0020B4  D7C8               	goto	i2l3858
  9601  0020B6                     __end_ofi2_Lcd_Write_String:
  9602                           	opt stack 0
  9603                           pclatu	equ	0xFFB
  9604                           pclath	equ	0xFFA
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           intcon	equ	0xFF2
  9612                           indf0	equ	0xFEF
  9613                           postinc0	equ	0xFEE
  9614                           fsr0h	equ	0xFEA
  9615                           fsr0l	equ	0xFE9
  9616                           wreg	equ	0xFE8
  9617                           postinc1	equ	0xFE6
  9618                           postdec1	equ	0xFE5
  9619                           fsr1h	equ	0xFE2
  9620                           fsr1l	equ	0xFE1
  9621                           indf2	equ	0xFDF
  9622                           postinc2	equ	0xFDE
  9623                           postdec2	equ	0xFDD
  9624                           fsr2h	equ	0xFDA
  9625                           fsr2l	equ	0xFD9
  9626                           status	equ	0xFD8
  9627                           
  9628 ;; *************** function i2_Lcd_Write_Char *****************
  9629 ;; Defined at:
  9630 ;;		line 75 in file "lcd.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;  a               1    wreg     unsigned char 
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  a               1    3[COMRAM] unsigned char 
  9635 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
  9636 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
  9637 ;; Return value:  Size  Location     Type
  9638 ;;		None               void
  9639 ;; Registers used:
  9640 ;;		wreg, status,2, status,0, cstack
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0
  9647 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9649 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9650 ;;Total ram usage:        3 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    1
  9653 ;; This function calls:
  9654 ;;		i2_Lcd_Port
  9655 ;; This function is called by:
  9656 ;;		i2_Lcd_Write_String
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text47
  9661  0024A8                     __ptext47:
  9662                           	opt stack 0
  9663  0024A8                     i2_Lcd_Write_Char:
  9664                           	opt stack 21
  9665                           
  9666                           ;incstack = 0
  9667                           ;i2Lcd_Write_Char@a stored from wreg
  9668  0024A8  6E04               	movwf	i2Lcd_Write_Char@a,c
  9669                           
  9670                           ;lcd.c: 76: char temp, y;
  9671                           ;lcd.c: 77: temp = a & 0x0F;
  9672  0024AA  5004               	movf	i2Lcd_Write_Char@a,w,c
  9673  0024AC  0B0F               	andlw	15
  9674  0024AE  6E02               	movwf	i2Lcd_Write_Char@temp,c
  9675                           
  9676                           ;lcd.c: 78: y = a & 0xF0;
  9677  0024B0  5004               	movf	i2Lcd_Write_Char@a,w,c
  9678  0024B2  0BF0               	andlw	240
  9679  0024B4  6E03               	movwf	i2Lcd_Write_Char@y,c
  9680                           
  9681                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9682  0024B6  8084               	bsf	3972,0,c	;volatile
  9683                           
  9684                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9685  0024B8  3803               	swapf	i2Lcd_Write_Char@y,w,c
  9686  0024BA  0B0F               	andlw	15
  9687  0024BC  EC9F  F012         	call	i2_Lcd_Port
  9688                           
  9689                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9690  0024C0  8484               	bsf	3972,2,c	;volatile
  9691                           
  9692                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9693  0024C2  0E0D               	movlw	13
  9694  0024C4                     i2u554_47:
  9695  0024C4  2EE8               	decfsz	wreg,f,c
  9696  0024C6  D7FE               	goto	i2u554_47
  9697  0024C8  F000               	nop	
  9698                           
  9699                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9700  0024CA  9484               	bcf	3972,2,c	;volatile
  9701                           
  9702                           ;lcd.c: 84: Lcd_Port(temp);
  9703  0024CC  5002               	movf	i2Lcd_Write_Char@temp,w,c
  9704  0024CE  EC9F  F012         	call	i2_Lcd_Port
  9705                           
  9706                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9707  0024D2  8484               	bsf	3972,2,c	;volatile
  9708                           
  9709                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9710  0024D4  0E0D               	movlw	13
  9711  0024D6                     i2u555_47:
  9712  0024D6  2EE8               	decfsz	wreg,f,c
  9713  0024D8  D7FE               	goto	i2u555_47
  9714  0024DA  F000               	nop	
  9715                           
  9716                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9717  0024DC  9484               	bcf	3972,2,c	;volatile
  9718  0024DE  0012               	return	
  9719  0024E0                     __end_ofi2_Lcd_Write_Char:
  9720                           	opt stack 0
  9721                           pclatu	equ	0xFFB
  9722                           pclath	equ	0xFFA
  9723                           tblptru	equ	0xFF8
  9724                           tblptrh	equ	0xFF7
  9725                           tblptrl	equ	0xFF6
  9726                           tablat	equ	0xFF5
  9727                           prodh	equ	0xFF4
  9728                           prodl	equ	0xFF3
  9729                           intcon	equ	0xFF2
  9730                           indf0	equ	0xFEF
  9731                           postinc0	equ	0xFEE
  9732                           fsr0h	equ	0xFEA
  9733                           fsr0l	equ	0xFE9
  9734                           wreg	equ	0xFE8
  9735                           postinc1	equ	0xFE6
  9736                           postdec1	equ	0xFE5
  9737                           fsr1h	equ	0xFE2
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           fsr2h	equ	0xFDA
  9743                           fsr2l	equ	0xFD9
  9744                           status	equ	0xFD8
  9745                           
  9746 ;; *************** function i2_Lcd_Set_Cursor *****************
  9747 ;; Defined at:
  9748 ;;		line 40 in file "lcd.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;  a               1    wreg     unsigned char 
  9751 ;;  b               1    3[COMRAM] unsigned char 
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;  a               1    4[COMRAM] unsigned char 
  9754 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
  9755 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
  9756 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
  9757 ;; Return value:  Size  Location     Type
  9758 ;;		None               void
  9759 ;; Registers used:
  9760 ;;		wreg, status,2, status,0, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9766 ;;      Params:         1       0       0       0       0       0       0       0       0
  9767 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9768 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9769 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9770 ;;Total ram usage:        5 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    2
  9773 ;; This function calls:
  9774 ;;		i2_Lcd_Cmd
  9775 ;; This function is called by:
  9776 ;;		_TMRO_USART
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           	psect	text48
  9781  0022A2                     __ptext48:
  9782                           	opt stack 0
  9783  0022A2                     i2_Lcd_Set_Cursor:
  9784                           	opt stack 21
  9785                           
  9786                           ;incstack = 0
  9787                           ;i2Lcd_Set_Cursor@a stored from wreg
  9788  0022A2  6E05               	movwf	i2Lcd_Set_Cursor@a,c
  9789                           
  9790                           ;lcd.c: 41: char temp, z, y;
  9791                           ;lcd.c: 42: if (a == 1) {
  9792  0022A4  0405               	decf	i2Lcd_Set_Cursor@a,w,c
  9793  0022A6  A4D8               	btfss	status,2,c
  9794  0022A8  D010               	goto	i2l3848
  9795                           
  9796                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9797  0022AA  5004               	movf	i2Lcd_Set_Cursor@b,w,c
  9798  0022AC  0F7F               	addlw	127
  9799  0022AE  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
  9800                           
  9801                           ;lcd.c: 44: z = temp >> 4;
  9802  0022B0  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
  9803  0022B2  0B0F               	andlw	15
  9804  0022B4  6E06               	movwf	i2Lcd_Set_Cursor@z,c
  9805                           
  9806                           ;lcd.c: 45: y = temp & 0x0F;
  9807  0022B6  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
  9808  0022B8  0B0F               	andlw	15
  9809  0022BA  6E07               	movwf	i2Lcd_Set_Cursor@y,c
  9810                           
  9811                           ;lcd.c: 46: Lcd_Cmd(z);
  9812  0022BC  5006               	movf	i2Lcd_Set_Cursor@z,w,c
  9813  0022BE  ECFD  F012         	call	i2_Lcd_Cmd
  9814                           
  9815                           ;lcd.c: 47: Lcd_Cmd(y);
  9816  0022C2  5007               	movf	i2Lcd_Set_Cursor@y,w,c
  9817  0022C4  ECFD  F012         	call	i2_Lcd_Cmd
  9818                           
  9819                           ;lcd.c: 48: } else if (a == 2) {
  9820  0022C8  D013               	goto	i2l250
  9821  0022CA                     i2l3848:
  9822  0022CA  5005               	movf	i2Lcd_Set_Cursor@a,w,c
  9823  0022CC  0A02               	xorlw	2
  9824  0022CE  A4D8               	btfss	status,2,c
  9825  0022D0  D00F               	goto	i2l250
  9826                           
  9827                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9828  0022D2  5004               	movf	i2Lcd_Set_Cursor@b,w,c
  9829  0022D4  0FBF               	addlw	191
  9830  0022D6  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
  9831                           
  9832                           ;lcd.c: 50: z = temp >> 4;
  9833  0022D8  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
  9834  0022DA  0B0F               	andlw	15
  9835  0022DC  6E06               	movwf	i2Lcd_Set_Cursor@z,c
  9836                           
  9837                           ;lcd.c: 51: y = temp & 0x0F;
  9838  0022DE  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
  9839  0022E0  0B0F               	andlw	15
  9840  0022E2  6E07               	movwf	i2Lcd_Set_Cursor@y,c
  9841                           
  9842                           ;lcd.c: 52: Lcd_Cmd(z);
  9843  0022E4  5006               	movf	i2Lcd_Set_Cursor@z,w,c
  9844  0022E6  ECFD  F012         	call	i2_Lcd_Cmd
  9845                           
  9846                           ;lcd.c: 53: Lcd_Cmd(y);
  9847  0022EA  5007               	movf	i2Lcd_Set_Cursor@y,w,c
  9848  0022EC  ECFD  F012         	call	i2_Lcd_Cmd
  9849  0022F0                     i2l250:
  9850  0022F0  0012               	return	
  9851  0022F2                     __end_ofi2_Lcd_Set_Cursor:
  9852                           	opt stack 0
  9853                           pclatu	equ	0xFFB
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           indf0	equ	0xFEF
  9863                           postinc0	equ	0xFEE
  9864                           fsr0h	equ	0xFEA
  9865                           fsr0l	equ	0xFE9
  9866                           wreg	equ	0xFE8
  9867                           postinc1	equ	0xFE6
  9868                           postdec1	equ	0xFE5
  9869                           fsr1h	equ	0xFE2
  9870                           fsr1l	equ	0xFE1
  9871                           indf2	equ	0xFDF
  9872                           postinc2	equ	0xFDE
  9873                           postdec2	equ	0xFDD
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function i2_Lcd_Clear *****************
  9879 ;; Defined at:
  9880 ;;		line 35 in file "lcd.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg, status,2, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9897 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9898 ;;Total ram usage:        0 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    2
  9901 ;; This function calls:
  9902 ;;		i2_Lcd_Cmd
  9903 ;; This function is called by:
  9904 ;;		_TMRO_USART
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text49
  9909  0026D0                     __ptext49:
  9910                           	opt stack 0
  9911  0026D0                     i2_Lcd_Clear:
  9912                           	opt stack 21
  9913                           
  9914                           ;lcd.c: 36: Lcd_Cmd(0);
  9915                           
  9916                           ;incstack = 0
  9917  0026D0  0E00               	movlw	0
  9918  0026D2  ECFD  F012         	call	i2_Lcd_Cmd
  9919                           
  9920                           ;lcd.c: 37: Lcd_Cmd(1);
  9921  0026D6  0E01               	movlw	1
  9922  0026D8  ECFD  F012         	call	i2_Lcd_Cmd
  9923  0026DC  0012               	return	
  9924  0026DE                     __end_ofi2_Lcd_Clear:
  9925                           	opt stack 0
  9926                           pclatu	equ	0xFFB
  9927                           pclath	equ	0xFFA
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           indf0	equ	0xFEF
  9936                           postinc0	equ	0xFEE
  9937                           fsr0h	equ	0xFEA
  9938                           fsr0l	equ	0xFE9
  9939                           wreg	equ	0xFE8
  9940                           postinc1	equ	0xFE6
  9941                           postdec1	equ	0xFE5
  9942                           fsr1h	equ	0xFE2
  9943                           fsr1l	equ	0xFE1
  9944                           indf2	equ	0xFDF
  9945                           postinc2	equ	0xFDE
  9946                           postdec2	equ	0xFDD
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           
  9951 ;; *************** function i2_Lcd_Cmd *****************
  9952 ;; Defined at:
  9953 ;;		line 27 in file "lcd.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  a               1    wreg     unsigned char 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;  a               1    2[COMRAM] unsigned char 
  9958 ;; Return value:  Size  Location     Type
  9959 ;;		None               void
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, cstack
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9967 ;;      Params:         0       0       0       0       0       0       0       0       0
  9968 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9969 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9970 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9971 ;;Total ram usage:        2 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    1
  9974 ;; This function calls:
  9975 ;;		i2_Lcd_Port
  9976 ;; This function is called by:
  9977 ;;		i2_Lcd_Clear
  9978 ;;		i2_Lcd_Set_Cursor
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           	psect	text50
  9983  0025FA                     __ptext50:
  9984                           	opt stack 0
  9985  0025FA                     i2_Lcd_Cmd:
  9986                           	opt stack 21
  9987                           
  9988                           ;incstack = 0
  9989                           ;i2Lcd_Cmd@a stored from wreg
  9990  0025FA  6E03               	movwf	i2Lcd_Cmd@a,c
  9991                           
  9992                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9993  0025FC  9084               	bcf	3972,0,c	;volatile
  9994                           
  9995                           ;lcd.c: 29: Lcd_Port(a);
  9996  0025FE  5003               	movf	i2Lcd_Cmd@a,w,c
  9997  002600  EC9F  F012         	call	i2_Lcd_Port
  9998                           
  9999                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10000  002604  8484               	bsf	3972,2,c	;volatile
 10001                           
 10002                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10003  002606  0E06               	movlw	6
 10004  002608  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10005  00260A  0E30               	movlw	48
 10006  00260C                     i2u556_47:
 10007  00260C  2EE8               	decfsz	wreg,f,c
 10008  00260E  D7FE               	goto	i2u556_47
 10009  002610  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10010  002612  D7FC               	goto	i2u556_47
 10011  002614  D000               	nop2	
 10012                           
 10013                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10014  002616  9484               	bcf	3972,2,c	;volatile
 10015  002618  0012               	return	
 10016  00261A                     __end_ofi2_Lcd_Cmd:
 10017                           	opt stack 0
 10018                           pclatu	equ	0xFFB
 10019                           pclath	equ	0xFFA
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           postinc1	equ	0xFE6
 10033                           postdec1	equ	0xFE5
 10034                           fsr1h	equ	0xFE2
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           fsr2h	equ	0xFDA
 10040                           fsr2l	equ	0xFD9
 10041                           status	equ	0xFD8
 10042                           
 10043 ;; *************** function i2_Lcd_Port *****************
 10044 ;; Defined at:
 10045 ;;		line 6 in file "lcd.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;  a               1    wreg     unsigned char 
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;  a               1    0[COMRAM] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0
 10060 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10062 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10063 ;;Total ram usage:        1 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; This function calls:
 10066 ;;		Nothing
 10067 ;; This function is called by:
 10068 ;;		i2_Lcd_Cmd
 10069 ;;		i2_Lcd_Write_Char
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           	psect	text51
 10074  00253E                     __ptext51:
 10075                           	opt stack 0
 10076  00253E                     i2_Lcd_Port:
 10077                           	opt stack 21
 10078                           
 10079                           ;incstack = 0
 10080                           ;i2Lcd_Port@a stored from wreg
 10081  00253E  6E01               	movwf	i2Lcd_Port@a,c
 10082                           
 10083                           ;lcd.c: 7: if (a & 1)
 10084  002540  A001               	btfss	i2Lcd_Port@a,0,c
 10085  002542  D002               	goto	i2l230
 10086                           
 10087                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10088  002544  8883               	bsf	3971,4,c	;volatile
 10089  002546  D001               	goto	i2l3526
 10090  002548                     i2l230:
 10091                           
 10092                           ;lcd.c: 9: else
 10093                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10094  002548  9883               	bcf	3971,4,c	;volatile
 10095  00254A                     i2l3526:
 10096                           
 10097                           ;lcd.c: 12: if (a & 2)
 10098  00254A  A201               	btfss	i2Lcd_Port@a,1,c
 10099  00254C  D002               	goto	i2l232
 10100                           
 10101                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10102  00254E  8A83               	bsf	3971,5,c	;volatile
 10103  002550  D001               	goto	i2l3530
 10104  002552                     i2l232:
 10105                           
 10106                           ;lcd.c: 14: else
 10107                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10108  002552  9A83               	bcf	3971,5,c	;volatile
 10109  002554                     i2l3530:
 10110                           
 10111                           ;lcd.c: 17: if (a & 4)
 10112  002554  A401               	btfss	i2Lcd_Port@a,2,c
 10113  002556  D002               	goto	i2l234
 10114                           
 10115                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10116  002558  8C83               	bsf	3971,6,c	;volatile
 10117  00255A  D001               	goto	i2l3534
 10118  00255C                     i2l234:
 10119                           
 10120                           ;lcd.c: 19: else
 10121                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10122  00255C  9C83               	bcf	3971,6,c	;volatile
 10123  00255E                     i2l3534:
 10124                           
 10125                           ;lcd.c: 22: if (a & 8)
 10126  00255E  A601               	btfss	i2Lcd_Port@a,3,c
 10127  002560  D002               	goto	i2l236
 10128                           
 10129                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10130  002562  8E83               	bsf	3971,7,c	;volatile
 10131  002564  D001               	goto	i2l238
 10132  002566                     i2l236:
 10133                           
 10134                           ;lcd.c: 24: else
 10135                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10136  002566  9E83               	bcf	3971,7,c	;volatile
 10137  002568                     i2l238:
 10138  002568  0012               	return	
 10139  00256A                     __end_ofi2_Lcd_Port:
 10140                           	opt stack 0
 10141                           pclatu	equ	0xFFB
 10142                           pclath	equ	0xFFA
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           indf0	equ	0xFEF
 10151                           postinc0	equ	0xFEE
 10152                           fsr0h	equ	0xFEA
 10153                           fsr0l	equ	0xFE9
 10154                           wreg	equ	0xFE8
 10155                           postinc1	equ	0xFE6
 10156                           postdec1	equ	0xFE5
 10157                           fsr1h	equ	0xFE2
 10158                           fsr1l	equ	0xFE1
 10159                           indf2	equ	0xFDF
 10160                           postinc2	equ	0xFDE
 10161                           postdec2	equ	0xFDD
 10162                           fsr2h	equ	0xFDA
 10163                           fsr2l	equ	0xFD9
 10164                           status	equ	0xFD8
 10165                           
 10166 ;; *************** function _ReadUSART *****************
 10167 ;; Defined at:
 10168 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  data            1    0[COMRAM] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  1    wreg      unsigned char 
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10182 ;;      Params:         0       0       0       0       0       0       0       0       0
 10183 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10185 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10186 ;;Total ram usage:        1 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; This function calls:
 10189 ;;		Nothing
 10190 ;; This function is called by:
 10191 ;;		_TMRO_USART
 10192 ;; This function uses a non-reentrant model
 10193 ;;
 10194                           
 10195                           	psect	text52
 10196  002638                     __ptext52:
 10197                           	opt stack 0
 10198  002638                     _ReadUSART:
 10199                           	opt stack 23
 10200                           
 10201                           ;incstack = 0
 10202  002638  0EF2               	movlw	242
 10203  00263A  163C               	andwf	_USART_Status,f,c
 10204  00263C  ACAB               	btfss	4011,6,c	;volatile
 10205  00263E  D003               	goto	i2l547
 10206  002640  903C               	bcf	_USART_Status,0,c
 10207  002642  B0AB               	btfsc	4011,0,c	;volatile
 10208  002644  803C               	bsf	_USART_Status,0,c
 10209  002646                     i2l547:
 10210  002646  B4AB               	btfsc	4011,2,c	;volatile
 10211  002648  843C               	bsf	_USART_Status,2,c
 10212  00264A  B2AB               	btfsc	4011,1,c	;volatile
 10213  00264C  863C               	bsf	_USART_Status,3,c
 10214  00264E  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 10215  002652  5001               	movf	ReadUSART@data,w,c
 10216  002654  0012               	return	
 10217  002656                     __end_of_ReadUSART:
 10218                           	opt stack 0
 10219                           pclatu	equ	0xFFB
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           indf0	equ	0xFEF
 10229                           postinc0	equ	0xFEE
 10230                           fsr0h	equ	0xFEA
 10231                           fsr0l	equ	0xFE9
 10232                           wreg	equ	0xFE8
 10233                           postinc1	equ	0xFE6
 10234                           postdec1	equ	0xFE5
 10235                           fsr1h	equ	0xFE2
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           postdec2	equ	0xFDD
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           pclatu	equ	0xFFB
 10244                           pclath	equ	0xFFA
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           indf0	equ	0xFEF
 10253                           postinc0	equ	0xFEE
 10254                           fsr0h	equ	0xFEA
 10255                           fsr0l	equ	0xFE9
 10256                           wreg	equ	0xFE8
 10257                           postinc1	equ	0xFE6
 10258                           postdec1	equ	0xFE5
 10259                           fsr1h	equ	0xFE2
 10260                           fsr1l	equ	0xFE1
 10261                           indf2	equ	0xFDF
 10262                           postinc2	equ	0xFDE
 10263                           postdec2	equ	0xFDD
 10264                           fsr2h	equ	0xFDA
 10265                           fsr2l	equ	0xFD9
 10266                           status	equ	0xFD8
 10267                           
 10268                           	psect	rparam
 10269  0000                     pclatu	equ	0xFFB
 10270                           pclath	equ	0xFFA
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           indf0	equ	0xFEF
 10279                           postinc0	equ	0xFEE
 10280                           fsr0h	equ	0xFEA
 10281                           fsr0l	equ	0xFE9
 10282                           wreg	equ	0xFE8
 10283                           postinc1	equ	0xFE6
 10284                           postdec1	equ	0xFE5
 10285                           fsr1h	equ	0xFE2
 10286                           fsr1l	equ	0xFE1
 10287                           indf2	equ	0xFDF
 10288                           postinc2	equ	0xFDE
 10289                           postdec2	equ	0xFDD
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8


Data Sizes:
    Strings     189
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1197$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _UART1_Init->_OpenUSART
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  115384
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5167
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  106859
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                          _PWM_init1
                     _clrBufferUSART
                   _putcBluetoothInt
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   47962
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7499
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   48626
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47202
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10922
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10643
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4565
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     631
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1129
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _clrBufferUSART
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 25 14:02:19 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
                           l54 246E                             l68 1E94                  _InicioComando 0038  
                 ___awdiv@sign 0024            ___wmul@multiplicand 0029                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                   ___ftadd@exp1 0081                   ___ftadd@exp2 0080  
                 ___ftadd@sign 007F      __size_ofi2_Lcd_Write_Char 0038                            l230 251C  
                          l206 26BC                            l232 2526                            l234 2530  
                          l250 22A0                            l236 253A                            l238 253C  
                          l185 2504                            l419 0D4C                            l533 215E  
                          l534 2160                            l535 216A                            l536 216C  
                          l529 214A                            l466 0584                            l538 218E  
                          l931 109E                            l940 1188                            l925 103C  
                          l926 124E                            l847 1626                            l856 1616  
                          l929 1076                            l949 11B2                            l965 1852  
                          l974 1842                            l983 1E3C                            l967 17C2  
                          l888 1AA8                            l968 17EA                            l989 13A6  
                          l999 25A8                   __CFG_CPB$OFF 000000                            _PR2 000FCB  
                 __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000                            _cad 003D  
                 ___awmod@sign 001E                            prod 000FF3                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l1009 14F0  
                         l1048 1F34                           l1058 21E4                           l4102 1094  
                         l4022 268C                           l5000 227A                           l4040 1A5E  
                         l4032 1A20                           l4120 111E                           l4112 10D6  
                         l4042 1A7C                           l4034 1A2A                           l4130 116A  
                         l4122 112A                           l4044 1A86                           l4036 1A48  
                         l4028 1A12                           l4132 117E                           l4124 1136  
                         l4220 1BAA                           l5100 1636                           l4118 110A  
                         l4222 1BB2                           l4214 1B94                           l4302 24F2  
                         l4072 2532                           l4064 251E                           l4240 1BEA  
                         l4232 1BD2                           l4224 1BB6                           l4208 1B74  
                         l5112 166E                           l4138 11DC                           l4090 104A  
                         l5106 1652                           l4068 2528                           l4148 122A  
                         l4236 1BDC                           l4260 1D6C                           l4252 1D42  
                         l4164 12A6                           l4324 214C                           l4316 213E  
                         l5124 16A6                           l4502 154A                           l4262 1D74  
                         l4182 1312                           l4158 1272                           l4414 0B16  
                         l5142 170E                           l5118 168A                           l5150 172A  
                         l4096 1084                           l4600 145E                           l4264 1D78  
                         l4272 1D96                           l4256 1D5E                           l4192 135C  
                         l4432 0D22                           l4408 0A60                           l5152 174E  
                         l4610 149C                           l4442 176E                           l4178 12F4  
                         l4426 0C60                           l4418 0B26                           l4282 1C94  
                         l5074 19B2                           l4612 14B4                           l4604 147A  
                         l4524 15BC                           l4516 158C                           l4276 1DA4  
                         l4268 1D8C                           l4188 133E                           l4700 00A0  
                         l4292 1CEA                           l5252 1C3A                           l4614 14BA  
                         l4630 1EF2                           l4534 15DE                           l5246 1C2C  
                         l4640 1F26                           l4632 1EF6                           l4544 1606  
                         l4480 181A                           l4448 1788                           l4288 1CD2  
                         l5272 1C74                           l4562 1E0E                           l4618 14E0  
                         l4650 21AE                           l4546 1612                           l4538 15EE  
                         l4394 0F82                           l4386 0EAA                           l4810 0554  
                         l4802 052C                           l4730 01E2                           l4714 011A  
                         l4298 1D14                           l4900 2004                           l4628 1EE6  
                         l4652 21B2                           l4476 180A                           l4804 053A  
                         l4558 1DDE                           l4582 13D0                           l4662 21FC  
                         l4486 1832                           l4742 0270                           l4568 1E3A  
                         l4656 21D6                           l4648 21A2                           l4664 2208  
                         l4496 151E                           l4488 183E                           l4840 06FC  
                         l4824 05B6                           l4816 0588                           l4770 03B6  
                         l4754 031E                           l4746 02B6                           l4738 024A  
                         l4674 234C                           l4828 0608                           l4692 0052  
                         l4846 0716                           l4838 06EE                           l4774 041E  
                         l4758 0344                           l4694 0060                           l4686 0030  
                         l4678 237E                           l4880 082C                           l4872 07E8  
                         l4848 0722                           l4858 079C                           l4794 0494  
                         l4890 090A                           l4698 0066                           l4788 046A  
                         l4886 08D4                           l4878 0818                           l4982 1E9E  
                         l4896 1FCC                           l4888 08E8                           l4978 1E7A  
                         STR_1 7FB7                           STR_2 7F63                           STR_3 7FD9  
                         STR_4 7FD9                           STR_5 7FB4                           STR_6 7F72  
                         STR_7 7F80                           STR_8 7F9C                           STR_9 7F8E  
              __end_of_BT_Init 1B50                           u4131 1264                           u4310 1CC8  
                         u4151 1286                           _PIE1 000F9D                           u4160 1292  
                         u4340 1D0A                           u4317 1CBE                           u5230 1FFC  
                         u5240 2034                           u4610 1820                           u4347 1D00  
                         u4700 15F4                           u5237 1FF2                           u4541 1764  
                         u5165 0774                           u4630 1510                           u5247 202A  
                         u5271 1AC0                           u3921 0FE8                           u4561 177E  
                         u5265 23CE                           u4810 1482                           u4650 153C  
                         u3931 1008                           u4635 1506                           u5507 24F8  
                         u5517 248C                           u5527 249E                           u4655 1532  
                         u5537 25EC                           u4761 13C0                           u5457 20C2  
                         u5467 20D8                           u4780 13FC                           u5477 20EE  
                         u5487 196A                           u4960 016A                           u4785 13F2  
                         u4945 00F4                           u5497 19A2                           u4965 015E  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1BF4  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1210 0098                   _sprintf$2151 0095                __end_of_Lcd_Cmd 25FA  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 23FE                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1BF4                __end_of___ftadd 1250  
                        STR_10 7FF1                          STR_11 7F53                          STR_12 7FF8  
                        STR_20 7FEA                          STR_13 7F51                          STR_21 7FC3  
                        STR_14 7FFA                          STR_15 7FFC                          STR_16 7FE2  
                        STR_17 7FCE                          STR_18 7FAA                          STR_19 7F41  
              __end_of___awmod 1DAE                __end_of___ftneg 25B6                __end_of___lldiv 1F46  
              __end_of___ftmul 13A8                ___awdiv@divisor 0021                __end_of___llmod 21F6  
              __end_of___ftsub 23C4                __end_of___fttol 14F2                          _T2CON 000FCA  
                  _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000             ?_Lcd_Write_Integer 00B8  
                        i2l230 2548                          i2l232 2552                          i2l234 255C  
                        i2l250 22F0                          i2l236 2566                          i2l238 2568  
                        i2l347 18EA                          i2l547 2646                ___awdiv@counter 0023  
                        _RCREG 000FAE                          _RCSTA 000FAB                          _SPBRG 000FAF  
                        _PORTA 000F80                          _PORTB 000F81                          _PORTE 000F84  
                __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD                          _TXSTA 000FAC  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086                  __CFG_WRT3$OFF 000000  
                 ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
           __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000                    ?i2_Lcd_Port 0001  
              __end_of_dpowers 7EF3                          _array 0114            ??_Lcd_Write_Integer 0030  
                        _scale 0918                  ___ftpack@sign 001D                          tablat 000FF5  
                        status 000FD8                __end_of_sprintf 0918                 __CFG_ICPRT$OFF 000000  
                   Pause_seg@i 001F                     Pause_seg@x 001E               i2_Lcd_Set_Cursor 22A2  
                  ?_TMRO_USART 0001               __end_of_Lcd_Init 2128                 WriteUSART@data 0019  
             __end_of_Lcd_Port 253E             __size_of_PWM_init1 001E                __initialization 22F2  
                 __end_of_main 1C8A      __end_of_Lcd_Write_Integer 2438    __size_of_Inicializa_Driveby 00BA  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 26A4                         ??_main 0030  
                ___fttol@sign1 007C               __end_of_Pause_ms 2512             __size_of_Lcd_Clear 000E  
                __activetblptr 000002             ??_putcBluetoothInt 0030           __size_of__tdiv_to_l_ 0100  
                    ??_BT_Init 0027               ___llmod@dividend 0026                         ?_scale 006C  
                       _CCPR1L 000FBE               ___awdiv@dividend 001F                putSTRINGU1@dato 001B  
              putSTRINGU1@cont 0022               __end_of___ftpack 1AAA               __end_of___lbtoft 25DA  
              putSTRINGU1@last 0021                clrBufferUSART@i 0019            __size_of_UART1_Init 0010  
             __end_of___lltoft 2252                         i2l3530 2554                         i2l3534 255E  
                       i2l3526 254A                         i2l3940 18CC                         i2l3862 207E  
                       i2l3848 22CA                         i2l3944 18E0                         _INTCON 000FF2  
                       i2l3858 2046                         i2l3956 190A             __size_of_ReadUSART 001E  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
      __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000               __end_of__powers_ 7F41  
                       _Timer1 003B             __size_of_OpenUSART 0068  __size_of_SendBlueToothCommand 0016  
                 ?i2_Lcd_Clear 0001                         ___ftge 1DAE             __size_of_Pause_seg 0048  
            __end_ofi2_Lcd_Cmd 261A                         ___wmul 256A                   ?_putSTRINGU1 001B  
                    ??___awdiv 0023                      ??___ftadd 007C                 _PWM_DutyCycle1 1F46  
               __CFG_STVREN$ON 000000                      ??___awmod 001D                      ??___ftneg 001C  
                    ??___lldiv 0021                      ??___ftmul 002D                      ??___llmod 002E  
                    ??___ftsub 0030                      ??___fttol 0077            __size_ofi2_Lcd_Port 002C  
          i2Lcd_Write_String@a 0005            i2Lcd_Write_String@i 0009                         _packet 0046  
                       _lenght 0042                         _fround 0D4E                         clear_0 22F8  
                       clear_1 2304                         clear_2 2310                 sprintf@vd_1212 00A0  
             ___awdiv@quotient 0025                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 24A8          ___ftmul@f3_as_product 0067                   __mediumconst 7ECA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 1940              __end_of_PWM_init1 2638               __end_of_putcTxU1 26C2  
                    ??_sprintf 008F        __size_of_Comando_Tablet 012C                Lcd_Set_Cursor@a 001D  
              Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F                Lcd_Set_Cursor@z 001E  
                   __accesstop 0060        __end_of__initialization 2336                __CFG_PBADEN$OFF 000000  
                   ___ftadd@f1 0076                     ___ftadd@f2 0079                     ___ftge@ff1 0019  
                   ___ftge@ff2 001C              __end_of_Lcd_Clear 26D0                     ___ftneg@f1 0019  
                   ___lbtoft@c 0024         __end_of_PWM_DutyCycle1 1FC2                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 2680                 __pcstackCOMRAM 0001  
                 __pidataBANK0 266C     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 2438                  __end_of_scale 0D4E    __size_ofi2_Lcd_Write_String 007A  
            __end_of_ReadUSART 2656              __end_of_SetDCPWM1 23FE              i2Lcd_Write_Char@a 0004  
            i2Lcd_Write_Char@y 0003                 _Lcd_Set_Cursor 2252                     __div_to_l_ 14F2  
                    ?_Lcd_Init 0001                  ReadUSART@data 0001                      ?_Lcd_Port 0001  
            __end_of_OpenUSART 2190                  UART1_Init@bdr 001F                __div_to_l_@exp1 0028  
              __div_to_l_@cntr 0027                   sprintf@integ 00A8              __end_of_Pause_seg 2388  
                      ??_scale 0030                __div_to_l_@quot 0023           i2Lcd_Write_Char@temp 0002  
                   __pbssBANK0 00CE                     __pbssBANK1 0100              Comando_Tablet@sum 0170  
                    ?_OpenPWM1 0001                  __div_to_l_@f1 0019                  __div_to_l_@f2 001C  
                    ?_Pause_ms 0019         __end_of_clrBufferUSART 2470                ?_PWM_DutyCycle1 0001  
                      ?___ftge 0019                   ??_UART1_Init 001F                        ?___wmul 0027  
          Inicializa_Driveby@i 0028                        _CCP1CON 000FBD           i2Lcd_Set_Cursor@temp 0008  
  SendBlueToothCommand@command 0023                        ?_fround 006C      __size_of_Lcd_Write_String 007A  
                    ?___ftpack 0019                      ?___lbtoft 0021         __end_of_Lcd_Set_Cursor 22A2  
                    ?___lltoft 0021               putSTRINGU1@total 001D       __end_ofi2_Lcd_Set_Cursor 22F2  
                      _BT_Init 1AAA                        _SBUSART 003A                     ??_Lcd_Init 001C  
                 ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019             __end_of_UART1_Init 26B4  
              __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 2470                        _Lcd_Cmd 25DA  
                      _Comando 0033                        _Med_lsb 00D0                        _Med_msb 00D2  
                   ??_OpenPWM1 0019                     ??_Pause_ms 001B                   ??_TMRO_USART 000B  
            __end_of__npowers_ 7F1A                        __Hparam 0000                     _scale$2150 006F  
                      __Lparam 0000                ?_clrBufferUSART 0001                    ?_WriteUSART 0001  
              __size_of___ftge 0090                        ___awdiv 1B50                        ___ftadd 0FD0  
                      ___awmod 1D1E                      ?_putcTxU1 0001                        ___ftneg 2590  
                      ___lldiv 1EC4                __size_of___wmul 0026                        ___ftmul 1250  
                      ___llmod 2190                        ___ftsub 2388                        ___fttol 13A8  
           __end_ofi2_Lcd_Port 256A           __size_ofi2_Lcd_Clear 000E                        __pcinit 22F2  
                   ??___ftpack 001E                     ??___lbtoft 0024           __size_of_putSTRINGU1 0094  
              __size_of_fround 0282                   BT_Init@F5669 00EC                        __ramtop 0800  
              ?_Lcd_Set_Cursor 001C                     ??___lltoft 0025                        __ptext0 1BF4  
                      __ptext1 20B6                        __ptext2 1948                        __ptext3 1AAA  
                      __ptext4 2656                        __ptext5 1C8A                        __ptext6 26B4  
                      __ptext7 2340                        __ptext8 24E0                        __ptext9 1628  
                      _comando 00D8                    ?__div_to_l_ 0019                        _countup 00FE  
                      _dpowers 7ECB                      _T2CONbits 000FCA               ___awmod@dividend 0019  
           __end_of_TMRO_USART 1948                 _Comando_Tablet 1628                        _sprintf 001C  
       __end_of_Lcd_Write_Char 24A8                 __pintcode_body 1854           end_of_initialization 2336  
                  _TramaTablet 0100      __size_of_putcBluetoothInt 0086                  __Lmediumconst 7ECA  
                      int_func 1854       __end_ofi2_Lcd_Write_Char 24E0                ___lldiv@divisor 001D  
              ___lldiv@counter 0025                      _RCSTAbits 000FAB     __end_of_Inicializa_Driveby 1A02  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                      Lcd_Port@a 0019  
                   ??_putcTxU1 001A                     _num_med_hi 0043                 __tdiv_to_l_@f1 0019  
               __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F                      i2_Lcd_Cmd 25FA  
                    _PORTDbits 000F83                      _PORTEbits 000F84         __end_of_Comando_Tablet 1754  
 __end_of_SendBlueToothCommand 266C                      _TRISCbits 000F94            __size_of_WriteUSART 0012  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 001D              Lcd_Write_String@i 0021  
                    _PWM_init1 261A                      _TXSTAbits 000FAC            __size_of__div_to_l_ 0136  
                  ___ftmul@exp 0066                      _Lcd_Clear 26C2                 __end_of___ftge 1E3E  
               __end_of___wmul 2590               _Lcd_Write_String 1FC2                     ?i2_Lcd_Cmd 0001  
               __end_of_fround 0FD0            start_initialization 22F2                      Pause_ms@i 001C  
                    Pause_ms@x 0019                ?_Comando_Tablet 0001                      _ReadUSART 2638  
                    _SetDCPWM1 23C4                SetDCPWM1@DCycle 001D            __end_of__tdiv_to_l_ 1854  
                    _DutyCycle 00CE              __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C  
                   ?_PWM_init1 0001                      _OpenUSART 2128               ??_PWM_DutyCycle1 0082  
                    _Pause_seg 2340                ___llmod@divisor 002A                ___llmod@counter 002E  
            __size_of_OpenPWM1 0012              __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001  
                     ??___ftge 001F     __end_ofi2_Lcd_Write_String 20B6                       ??___wmul 002B  
                  __pdataBANK0 00EC               __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C  
              Lcd_Write_Char@y 001B                       ??_fround 0030                 _num_med_medium 0045  
                   fround@prec 0075              __size_of___ftpack 00A8              __size_of___lbtoft 0024  
            __size_of___lltoft 005C                    __pbssCOMRAM 0030                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019            __end_of__stringdata 7FFE  
           ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1E3E                     ?_OpenUSART 0019  
                     ?_Lcd_Cmd 0001                    sprintf@_val 00AD                    sprintf@flag 00A6  
             ??_clrBufferUSART 0019                     ?_Pause_seg 0001                    sprintf@fval 00B4  
                  sprintf@prec 00AB                      _cleanBfer 003E                   ??_WriteUSART 0019  
             ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 2656                      __pintcode 0008  
                __pmediumconst 7ECA                       ?___awdiv 001F                       ?___ftadd 0076  
                     ?___awmod 0019                       ?___ftneg 0019                       ?___lldiv 0019  
                     ?___ftmul 0060                       ?___llmod 0026                       ?___ftsub 0082  
                    __npowers_ 7EF3                       ?___fttol 0073              putcTxU1@character 001A  
                  ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E                    __tdiv_to_l_ 1754  
                    _contador2 0040                   ??__div_to_l_ 001F      SendBlueToothCommand@total 0025  
                 _TamanhoTrama 00D4                       ?_sprintf 0088                 __size_of_scale 0436  
           __end_of_WriteUSART 2692                    ??_PWM_init1 001A   PWM_DutyCycle1@percentageDuty 0088  
                _ComandoTablet 0034                 ___wmul@product 002B              ?i2_Lcd_Write_Char 0001  
                     _PIE1bits 000F9D                       Lcd_Cmd@a 001B                       i2u360_40 20AE  
                     i2u360_47 20A4                       _PIR1bits 000F9E             __end_of__div_to_l_ 1628  
                     i2u373_40 18E6                       i2u359_40 2076             ??i2_Lcd_Write_Char 0002  
                     i2u359_47 206C                       i2u554_47 24C4                       i2u555_47 24D6  
        ?_SendBlueToothCommand 0023                       i2u556_47 260C                  ??i2_Lcd_Clear 0004  
                  ??_Lcd_Clear 001C               __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F  
                   _ADCON1bits 000FC1                    __stringdata 7F41              ___wmul@multiplier 0027  
                     _CheckSum 0030               ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001  
           _Inicializa_Driveby 1948                    ??_SetDCPWM1 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 20B6                       _Lcd_Port 2512                      copy_data0 232A  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 203C                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 2692                       _Pause_ms 24E0  
                     __Hrparam 0000                       __Lrparam 0000               __size_of___awdiv 00A4  
             __size_of___ftadd 0280               __size_of___awmod 0090           ??_Inicializa_Driveby 0027  
             PWM_DutyCycle1@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1A02  
                     ___lbtoft 25B6                    _fround$2148 0072                    _fround$2149 006F  
                     ___lltoft 21F6            __end_ofi2_Lcd_Clear 26DE          __CFG_FOSC$INTOSCIO_EC 000000  
          __end_of_putSTRINGU1 1D1E                     sprintf@exp 00B2                 OpenPWM1@period 0019  
                     __ptext10 1E3E                       __ptext11 2680                       __ptext20 23FE  
                     __ptext12 26A4                       __ptext21 001C                       __ptext13 2128  
                     __ptext30 21F6                       __ptext22 0918                       __ptext14 2438  
                     __ptext31 2190                       __ptext23 0D4E                       __ptext15 261A  
                     __ptext40 2470                       __ptext32 1EC4                       __ptext24 256A  
                     __ptext16 2692                       __ptext41 2252                       __ptext33 13A8  
                     __ptext25 1250                       __ptext17 1F46                       __ptext50 25FA  
                     __ptext42 26C2                       __ptext34 2388                       __ptext26 1D1E  
                     __ptext18 25B6                       __ptext51 253E                       __ptext43 25DA  
                     __ptext35 0FD0                       __ptext27 1B50                       __ptext19 23C4  
                     __ptext52 2638                       __ptext44 2512                       __ptext36 1A02  
                     __ptext28 1754                       __ptext37 2590                       __ptext29 14F2  
                     __ptext46 203C                       __ptext38 1DAE                       __ptext47 24A8  
                     __ptext39 1FC2                       __ptext48 22A2                       __ptext49 26D0  
                     __powers_ 7F1A                PWM_init1@period 001A                       _contador 003F  
             __size_of_sprintf 08FC                  __size_of_main 0096         ??_SendBlueToothCommand 0027  
                     _putcTxU1 26B4                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 1EC4          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 203C  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 26D0                     _UART1_Init 26A4  
                  _putSTRINGU1 1C8A           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
                 ?__tdiv_to_l_ 0019                    _num_med_low 0044                       sprintf@c 00B7  
                     sprintf@f 008A               ___lldiv@quotient 0021             Lcd_Write_Integer@a 00B8  
           Lcd_Write_Integer@s 00BA                     i2_Lcd_Port 253E                   _USART_Status 003C  
                   _TMRO_USART 0008  
