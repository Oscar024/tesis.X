

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Sep 12 14:11:38 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    87  0000                     
    88                           	psect	idataCOMRAM
    89  0034FE                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _countup
    93  0034FE  0001               	dw	1
    94                           
    95                           	psect	idataBANK1
    96  0034AC                     __pidataBANK1:
    97                           	opt stack 0
    98                           
    99                           ;initializer for BT_Init@F5671
   100  0034AC  41                 	db	65
   101  0034AD  54                 	db	84
   102  0034AE  2B                 	db	43
   103  0034AF  4E                 	db	78
   104  0034B0  41                 	db	65
   105  0034B1  4D                 	db	77
   106  0034B2  45                 	db	69
   107  0034B3  3D                 	db	61
   108  0034B4  72                 	db	114
   109  0034B5  6F                 	db	111
   110  0034B6  62                 	db	98
   111  0034B7  6F                 	db	111
   112  0034B8  74                 	db	116
   113  0034B9  0D                 	db	13
   114  0034BA  0A                 	db	10
   115  0034BB  00                 	db	0
   116  0034BC  00                 	db	0
   117  0034BD  00                 	db	0
   118                           
   119                           	psect	mediumconst
   120  007EAC                     __pmediumconst:
   121                           	opt stack 0
   122  007EAC  00                 	db	0
   123  007EAD                     _dpowers:
   124                           	opt stack 0
   125  007EAD  0001               	dw	1
   126  007EAF  0000               	dw	0
   127  007EB1  000A               	dw	10
   128  007EB3  0000               	dw	0
   129  007EB5  0064               	dw	100
   130  007EB7  0000               	dw	0
   131  007EB9  03E8               	dw	1000
   132  007EBB  0000               	dw	0
   133  007EBD  2710               	dw	10000
   134  007EBF  0000               	dw	0
   135  007EC1  86A0               	dw	34464
   136  007EC3  0001               	dw	1
   137  007EC5  4240               	dw	16960
   138  007EC7  000F               	dw	15
   139  007EC9  9680               	dw	38528
   140  007ECB  0098               	dw	152
   141  007ECD  E100               	dw	57600
   142  007ECF  05F5               	dw	1525
   143  007ED1  CA00               	dw	51712
   144  007ED3  3B9A               	dw	15258
   145  007ED5                     __end_of_dpowers:
   146                           	opt stack 0
   147  007ED5                     __npowers_:
   148                           	opt stack 0
   149  007ED5  00                 	db	0
   150  007ED6  80                 	db	128
   151  007ED7  3F                 	db	63
   152  007ED8  CD                 	db	205
   153  007ED9  CC                 	db	204
   154  007EDA  3D                 	db	61
   155  007EDB  D7                 	db	215
   156  007EDC  23                 	db	35
   157  007EDD  3C                 	db	60
   158  007EDE  12                 	db	18
   159  007EDF  83                 	db	131
   160  007EE0  3A                 	db	58
   161  007EE1  B7                 	db	183
   162  007EE2  D1                 	db	209
   163  007EE3  38                 	db	56
   164  007EE4  C6                 	db	198
   165  007EE5  27                 	db	39
   166  007EE6  37                 	db	55
   167  007EE7  38                 	db	56
   168  007EE8  86                 	db	134
   169  007EE9  35                 	db	53
   170  007EEA  C0                 	db	192
   171  007EEB  D6                 	db	214
   172  007EEC  33                 	db	51
   173  007EED  CC                 	db	204
   174  007EEE  2B                 	db	43
   175  007EEF  32                 	db	50
   176  007EF0  70                 	db	112
   177  007EF1  89                 	db	137
   178  007EF2  30                 	db	48
   179  007EF3  E7                 	db	231
   180  007EF4  DB                 	db	219
   181  007EF5  2E                 	db	46
   182  007EF6  E5                 	db	229
   183  007EF7  3C                 	db	60
   184  007EF8  1E                 	db	30
   185  007EF9  42                 	db	66
   186  007EFA  A2                 	db	162
   187  007EFB  0D                 	db	13
   188  007EFC                     __end_of__npowers_:
   189                           	opt stack 0
   190  007EFC                     __powers_:
   191                           	opt stack 0
   192  007EFC  00                 	db	0
   193  007EFD  80                 	db	128
   194  007EFE  3F                 	db	63
   195  007EFF  00                 	db	0
   196  007F00  20                 	db	32
   197  007F01  41                 	db	65
   198  007F02  00                 	db	0
   199  007F03  C8                 	db	200
   200  007F04  42                 	db	66
   201  007F05  00                 	db	0
   202  007F06  7A                 	db	122
   203  007F07  44                 	db	68
   204  007F08  40                 	db	64
   205  007F09  1C                 	db	28
   206  007F0A  46                 	db	70
   207  007F0B  50                 	db	80
   208  007F0C  C3                 	db	195
   209  007F0D  47                 	db	71
   210  007F0E  24                 	db	36
   211  007F0F  74                 	db	116
   212  007F10  49                 	db	73
   213  007F11  97                 	db	151
   214  007F12  18                 	db	24
   215  007F13  4B                 	db	75
   216  007F14  BC                 	db	188
   217  007F15  BE                 	db	190
   218  007F16  4C                 	db	76
   219  007F17  6B                 	db	107
   220  007F18  6E                 	db	110
   221  007F19  4E                 	db	78
   222  007F1A  03                 	db	3
   223  007F1B  15                 	db	21
   224  007F1C  50                 	db	80
   225  007F1D  79                 	db	121
   226  007F1E  AD                 	db	173
   227  007F1F  60                 	db	96
   228  007F20  F3                 	db	243
   229  007F21  49                 	db	73
   230  007F22  71                 	db	113
   231  007F23                     __end_of__powers_:
   232                           	opt stack 0
   233  0000                     _ADCON1bits	set	4033
   234  0000                     _CCP1CON	set	4029
   235  0000                     _CCP2CON	set	4026
   236  0000                     _CCPR1L	set	4030
   237  0000                     _CCPR2L	set	4027
   238  0000                     _INTCON	set	4082
   239  0000                     _INTCON2bits	set	4081
   240  0000                     _INTCON3bits	set	4080
   241  0000                     _INTCONbits	set	4082
   242  0000                     _OSCCONbits	set	4051
   243  0000                     _PIE1	set	3997
   244  0000                     _PIE1bits	set	3997
   245  0000                     _PIR1bits	set	3998
   246  0000                     _PORTA	set	3968
   247  0000                     _PORTAbits	set	3968
   248  0000                     _PORTB	set	3969
   249  0000                     _PORTBbits	set	3969
   250  0000                     _PORTDbits	set	3971
   251  0000                     _PORTE	set	3972
   252  0000                     _PORTEbits	set	3972
   253  0000                     _PR2	set	4043
   254  0000                     _RCREG	set	4014
   255  0000                     _RCSTA	set	4011
   256  0000                     _RCSTAbits	set	4011
   257  0000                     _SPBRG	set	4015
   258  0000                     _SPBRGH	set	4016
   259  0000                     _T2CON	set	4042
   260  0000                     _T2CONbits	set	4042
   261  0000                     _TMR2	set	4044
   262  0000                     _TRISA	set	3986
   263  0000                     _TRISB	set	3987
   264  0000                     _TRISBbits	set	3987
   265  0000                     _TRISC	set	3988
   266  0000                     _TRISCbits	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _TXREG	set	4013
   270  0000                     _TXSTA	set	4012
   271  0000                     _TXSTAbits	set	4012
   272  007F23                     __stringdata:
   273                           	opt stack 0
   274  007F23                     STR_21:
   275  007F23  49                 	db	73	;'I'
   276  007F24  6E                 	db	110	;'n'
   277  007F25  74                 	db	116	;'t'
   278  007F26  65                 	db	101	;'e'
   279  007F27  72                 	db	114	;'r'
   280  007F28  72                 	db	114	;'r'
   281  007F29  75                 	db	117	;'u'
   282  007F2A  70                 	db	112	;'p'
   283  007F2B  74                 	db	116	;'t'
   284  007F2C  69                 	db	105	;'i'
   285  007F2D  6F                 	db	111	;'o'
   286  007F2E  6E                 	db	110	;'n'
   287  007F2F  20                 	db	32
   288  007F30  54                 	db	84	;'T'
   289  007F31  4D                 	db	77	;'M'
   290  007F32  52                 	db	82	;'R'
   291  007F33  32                 	db	50	;'2'
   292  007F34  00                 	db	0
   293  007F35                     STR_19:
   294  007F35  49                 	db	73	;'I'
   295  007F36  6E                 	db	110	;'n'
   296  007F37  74                 	db	116	;'t'
   297  007F38  65                 	db	101	;'e'
   298  007F39  72                 	db	114	;'r'
   299  007F3A  72                 	db	114	;'r'
   300  007F3B  75                 	db	117	;'u'
   301  007F3C  70                 	db	112	;'p'
   302  007F3D  74                 	db	116	;'t'
   303  007F3E  69                 	db	105	;'i'
   304  007F3F  6F                 	db	111	;'o'
   305  007F40  6E                 	db	110	;'n'
   306  007F41  20                 	db	32
   307  007F42  52                 	db	82	;'R'
   308  007F43  42                 	db	66	;'B'
   309  007F44  30                 	db	48	;'0'
   310  007F45  00                 	db	0
   311  007F46                     STR_20:
   312  007F46  49                 	db	73	;'I'
   313  007F47  6E                 	db	110	;'n'
   314  007F48  74                 	db	116	;'t'
   315  007F49  65                 	db	101	;'e'
   316  007F4A  72                 	db	114	;'r'
   317  007F4B  72                 	db	114	;'r'
   318  007F4C  75                 	db	117	;'u'
   319  007F4D  70                 	db	112	;'p'
   320  007F4E  74                 	db	116	;'t'
   321  007F4F  69                 	db	105	;'i'
   322  007F50  6F                 	db	111	;'o'
   323  007F51  6E                 	db	110	;'n'
   324  007F52  20                 	db	32
   325  007F53  52                 	db	82	;'R'
   326  007F54  42                 	db	66	;'B'
   327  007F55  31                 	db	49	;'1'
   328  007F56  00                 	db	0
   329  007F57                     STR_11:
   330  007F57  42                 	db	66	;'B'
   331  007F58  54                 	db	84	;'T'
   332  007F59  20                 	db	32
   333  007F5A  49                 	db	73	;'I'
   334  007F5B  4E                 	db	78	;'N'
   335  007F5C  49                 	db	73	;'I'
   336  007F5D  43                 	db	67	;'C'
   337  007F5E  49                 	db	73	;'I'
   338  007F5F  41                 	db	65	;'A'
   339  007F60  4C                 	db	76	;'L'
   340  007F61  49                 	db	73	;'I'
   341  007F62  5A                 	db	90	;'Z'
   342  007F63  41                 	db	65	;'A'
   343  007F64  44                 	db	68	;'D'
   344  007F65  4F                 	db	79	;'O'
   345  007F66  00                 	db	0
   346  007F67                     STR_2:
   347  007F67  41                 	db	65	;'A'
   348  007F68  54                 	db	84	;'T'
   349  007F69  2B                 	db	43
   350  007F6A  50                 	db	80	;'P'
   351  007F6B  53                 	db	83	;'S'
   352  007F6C  57                 	db	87	;'W'
   353  007F6D  44                 	db	68	;'D'
   354  007F6E  3D                 	db	61	;'='
   355  007F6F  30                 	db	48	;'0'
   356  007F70  30                 	db	48	;'0'
   357  007F71  30                 	db	48	;'0'
   358  007F72  30                 	db	48	;'0'
   359  007F73  0D                 	db	13
   360  007F74  0A                 	db	10
   361  007F75  00                 	db	0
   362  007F76  0A                 	db	10
   363  007F77  2B                 	db	43
   364  007F78  42                 	db	66	;'B'
   365  007F79  54                 	db	84	;'T'
   366  007F7A  53                 	db	83	;'S'
   367  007F7B  54                 	db	84	;'T'
   368  007F7C  41                 	db	65	;'A'
   369  007F7D  54                 	db	84	;'T'
   370  007F7E  45                 	db	69	;'E'
   371  007F7F  3A                 	db	58	;':'
   372  007F80  31                 	db	49	;'1'
   373  007F81  0D                 	db	13
   374  007F82  0A                 	db	10
   375  007F83  00                 	db	0
   376  007F84  0A                 	db	10
   377  007F85  2B                 	db	43
   378  007F86  42                 	db	66	;'B'
   379  007F87  54                 	db	84	;'T'
   380  007F88  53                 	db	83	;'S'
   381  007F89  54                 	db	84	;'T'
   382  007F8A  41                 	db	65	;'A'
   383  007F8B  54                 	db	84	;'T'
   384  007F8C  45                 	db	69	;'E'
   385  007F8D  3A                 	db	58	;':'
   386  007F8E  33                 	db	51	;'3'
   387  007F8F  0D                 	db	13
   388  007F90  0A                 	db	10
   389  007F91  00                 	db	0
   390  007F92  0A                 	db	10
   391  007F93  2B                 	db	43
   392  007F94  42                 	db	66	;'B'
   393  007F95  54                 	db	84	;'T'
   394  007F96  53                 	db	83	;'S'
   395  007F97  54                 	db	84	;'T'
   396  007F98  41                 	db	65	;'A'
   397  007F99  54                 	db	84	;'T'
   398  007F9A  45                 	db	69	;'E'
   399  007F9B  3A                 	db	58	;':'
   400  007F9C  34                 	db	52	;'4'
   401  007F9D  0D                 	db	13
   402  007F9E  0A                 	db	10
   403  007F9F  00                 	db	0
   404  007FA0  0A                 	db	10
   405  007FA1  43                 	db	67	;'C'
   406  007FA2  4F                 	db	79	;'O'
   407  007FA3  4E                 	db	78	;'N'
   408  007FA4  4E                 	db	78	;'N'
   409  007FA5  45                 	db	69	;'E'
   410  007FA6  43                 	db	67	;'C'
   411  007FA7  54                 	db	84	;'T'
   412  007FA8  3A                 	db	58	;':'
   413  007FA9  4F                 	db	79	;'O'
   414  007FAA  4B                 	db	75	;'K'
   415  007FAB  0D                 	db	13
   416  007FAC  0A                 	db	10
   417  007FAD  00                 	db	0
   418  007FAE                     STR_18:
   419  007FAE  49                 	db	73	;'I'
   420  007FAF  6E                 	db	110	;'n'
   421  007FB0  74                 	db	116	;'t'
   422  007FB1  65                 	db	101	;'e'
   423  007FB2  67                 	db	103	;'g'
   424  007FB3  65                 	db	101	;'e'
   425  007FB4  72                 	db	114	;'r'
   426  007FB5  20                 	db	32
   427  007FB6  3D                 	db	61	;'='
   428  007FB7  20                 	db	32
   429  007FB8  25                 	db	37
   430  007FB9  64                 	db	100	;'d'
   431  007FBA  00                 	db	0
   432  007FBB                     STR_1:
   433  007FBB  41                 	db	65	;'A'
   434  007FBC  54                 	db	84	;'T'
   435  007FBD  2B                 	db	43
   436  007FBE  52                 	db	82	;'R'
   437  007FBF  4F                 	db	79	;'O'
   438  007FC0  4C                 	db	76	;'L'
   439  007FC1  45                 	db	69	;'E'
   440  007FC2  3D                 	db	61	;'='
   441  007FC3  30                 	db	48	;'0'
   442  007FC4  0D                 	db	13
   443  007FC5  0A                 	db	10
   444  007FC6  00                 	db	0
   445  007FC7                     STR_23:
   446  007FC7  43                 	db	67	;'C'
   447  007FC8  4D                 	db	77	;'M'
   448  007FC9  44                 	db	68	;'D'
   449  007FCA  20                 	db	32
   450  007FCB  54                 	db	84	;'T'
   451  007FCC  41                 	db	65	;'A'
   452  007FCD  42                 	db	66	;'B'
   453  007FCE  4C                 	db	76	;'L'
   454  007FCF  45                 	db	69	;'E'
   455  007FD0  54                 	db	84	;'T'
   456  007FD1  00                 	db	0
   457  007FD2  46                 	db	70	;'F'
   458  007FD3  6C                 	db	108	;'l'
   459  007FD4  6F                 	db	111	;'o'
   460  007FD5  61                 	db	97	;'a'
   461  007FD6  74                 	db	116	;'t'
   462  007FD7  20                 	db	32
   463  007FD8  3D                 	db	61	;'='
   464  007FD9  20                 	db	32
   465  007FDA  25                 	db	37
   466  007FDB  66                 	db	102	;'f'
   467  007FDC  00                 	db	0
   468  007FDD                     STR_3:
   469  007FDD  41                 	db	65	;'A'
   470  007FDE  54                 	db	84	;'T'
   471  007FDF  2B                 	db	43
   472  007FE0  49                 	db	73	;'I'
   473  007FE1  4E                 	db	78	;'N'
   474  007FE2  51                 	db	81	;'Q'
   475  007FE3  0D                 	db	13
   476  007FE4  0A                 	db	10
   477  007FE5  00                 	db	0
   478  007FE6                     STR_16:
   479  007FE6  44                 	db	68	;'D'
   480  007FE7  65                 	db	101	;'e'
   481  007FE8  66                 	db	102	;'f'
   482  007FE9  61                 	db	97	;'a'
   483  007FEA  75                 	db	117	;'u'
   484  007FEB  6C                 	db	108	;'l'
   485  007FEC  74                 	db	116	;'t'
   486  007FED  00                 	db	0
   487  007FEE                     STR_22:
   488  007FEE  49                 	db	73	;'I'
   489  007FEF  6E                 	db	110	;'n'
   490  007FF0  69                 	db	105	;'i'
   491  007FF1  63                 	db	99	;'c'
   492  007FF2  69                 	db	105	;'i'
   493  007FF3  6F                 	db	111	;'o'
   494  007FF4  00                 	db	0
   495  007FF5                     STR_10:
   496  007FF5  49                 	db	73	;'I'
   497  007FF6  4E                 	db	78	;'N'
   498  007FF7  49                 	db	73	;'I'
   499  007FF8  43                 	db	67	;'C'
   500  007FF9  49                 	db	73	;'I'
   501  007FFA  4F                 	db	79	;'O'
   502  007FFB  00                 	db	0
   503  007FFC                     STR_14:
   504  007FFC  33                 	db	51	;'3'
   505  007FFD  00                 	db	0
   506  007FFE                     __end_of__stringdata:
   507                           	opt stack 0
   508                           
   509                           ; #config settings
   510  007FFE  00                 	db	0	; dummy byte at the end
   511  0000                     
   512                           	psect	cinit
   513  002EA2                     __pcinit:
   514                           	opt stack 0
   515  002EA2                     start_initialization:
   516                           	opt stack 0
   517  002EA2                     __initialization:
   518                           	opt stack 0
   519                           
   520                           ; Clear objects allocated to BANK1 (110 bytes)
   521  002EA2  EE01  F000         	lfsr	0,__pbssBANK1
   522  002EA6  0E6E               	movlw	110
   523  002EA8                     clear_0:
   524  002EA8  6AEE               	clrf	postinc0,c
   525  002EAA  06E8               	decf	wreg,f,c
   526  002EAC  E1FD               	bnz	clear_0
   527                           
   528                           ; Clear objects allocated to BANK0 (6 bytes)
   529  002EAE  0100               	movlb	0
   530  002EB0  6BEE               	clrf	(__pbssBANK0+5)& (0+255),b
   531  002EB2  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   532  002EB4  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   533  002EB6  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   534  002EB8  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   535  002EBA  6BE9               	clrf	__pbssBANK0& (0+255),b
   536                           
   537                           ; Clear objects allocated to COMRAM (28 bytes)
   538  002EBC  EE00  F042         	lfsr	0,__pbssCOMRAM
   539  002EC0  0E1C               	movlw	28
   540  002EC2                     clear_1:
   541  002EC2  6AEE               	clrf	postinc0,c
   542  002EC4  06E8               	decf	wreg,f,c
   543  002EC6  E1FD               	bnz	clear_1
   544                           
   545                           ; Initialize objects allocated to BANK1 (18 bytes)
   546                           ; load TBLPTR registers with __pidataBANK1
   547  002EC8  0EAC               	movlw	low __pidataBANK1
   548  002ECA  6EF6               	movwf	tblptrl,c
   549  002ECC  0E34               	movlw	high __pidataBANK1
   550  002ECE  6EF7               	movwf	tblptrh,c
   551  002ED0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   552  002ED2  6EF8               	movwf	tblptru,c
   553  002ED4  EE01  F06E         	lfsr	0,__pdataBANK1
   554  002ED8  EE10 F012          	lfsr	1,18
   555  002EDC                     copy_data0:
   556  002EDC  0009               	tblrd		*+
   557  002EDE  CFF5 FFEE          	movff	tablat,postinc0
   558  002EE2  50E5               	movf	postdec1,w,c
   559  002EE4  50E1               	movf	fsr1l,w,c
   560  002EE6  E1FA               	bnz	copy_data0
   561                           
   562                           ; Initialize objects allocated to COMRAM (2 bytes)
   563                           ; load TBLPTR registers with __pidataCOMRAM
   564  002EE8  0EFE               	movlw	low __pidataCOMRAM
   565  002EEA  6EF6               	movwf	tblptrl,c
   566  002EEC  0E34               	movlw	high __pidataCOMRAM
   567  002EEE  6EF7               	movwf	tblptrh,c
   568  002EF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   569  002EF2  6EF8               	movwf	tblptru,c
   570  002EF4  0009               	tblrd		*+	;fetch initializer
   571  002EF6  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   572  002EFA  0009               	tblrd		*+	;fetch initializer
   573  002EFC  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   574  002F00                     end_of_initialization:
   575                           	opt stack 0
   576  002F00                     __end_of__initialization:
   577                           	opt stack 0
   578  002F00  0100               	movlb	0
   579  002F02  EF67  F013         	goto	_main	;jump to C main() function
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           postdec1	equ	0xFE5
   587                           fsr1l	equ	0xFE1
   588                           
   589                           	psect	bssCOMRAM
   590  000042                     __pbssCOMRAM:
   591                           	opt stack 0
   592  000042                     _Med_lsb:
   593                           	opt stack 0
   594  000042                     	ds	2
   595  000044                     _Med_msb:
   596                           	opt stack 0
   597  000044                     	ds	2
   598  000046                     _TamanhoTrama:
   599                           	opt stack 0
   600  000046                     	ds	2
   601  000048                     _i:
   602                           	opt stack 0
   603  000048                     	ds	2
   604  00004A                     _CheckSum:
   605                           	opt stack 0
   606  00004A                     	ds	1
   607  00004B                     _ComanBFlag:
   608                           	opt stack 0
   609  00004B                     	ds	1
   610  00004C                     _ComanTFlag:
   611                           	opt stack 0
   612  00004C                     	ds	1
   613  00004D                     _Comando:
   614                           	opt stack 0
   615  00004D                     	ds	1
   616  00004E                     _ComandoTablet:
   617                           	opt stack 0
   618  00004E                     	ds	1
   619  00004F                     _EntTrama:
   620                           	opt stack 0
   621  00004F                     	ds	1
   622  000050                     _InicioComando:
   623                           	opt stack 0
   624  000050                     	ds	1
   625  000051                     _RXComandoTB:
   626                           	opt stack 0
   627  000051                     	ds	1
   628  000052                     _SBUSART:
   629                           	opt stack 0
   630  000052                     	ds	1
   631  000053                     _Timer1:
   632                           	opt stack 0
   633  000053                     	ds	1
   634  000054                     _USART_Status:
   635                           	opt stack 0
   636  000054                     	ds	1
   637  000055                     _cad:
   638                           	opt stack 0
   639  000055                     	ds	1
   640  000056                     _contador:
   641                           	opt stack 0
   642  000056                     	ds	1
   643  000057                     _contador2:
   644                           	opt stack 0
   645  000057                     	ds	1
   646  000058                     _j:
   647                           	opt stack 0
   648  000058                     	ds	1
   649  000059                     _lenght:
   650                           	opt stack 0
   651  000059                     	ds	1
   652  00005A                     _num_med_hi:
   653                           	opt stack 0
   654  00005A                     	ds	1
   655  00005B                     _num_med_low:
   656                           	opt stack 0
   657  00005B                     	ds	1
   658  00005C                     _num_med_medium:
   659                           	opt stack 0
   660  00005C                     	ds	1
   661  00005D                     _packet:
   662                           	opt stack 0
   663  00005D                     	ds	1
   664                           tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           tblptrl	equ	0xFF6
   667                           tablat	equ	0xFF5
   668                           postinc0	equ	0xFEE
   669                           wreg	equ	0xFE8
   670                           postdec1	equ	0xFE5
   671                           fsr1l	equ	0xFE1
   672                           
   673                           	psect	dataCOMRAM
   674  00005E                     __pdataCOMRAM:
   675                           	opt stack 0
   676  00005E                     _countup:
   677                           	opt stack 0
   678  00005E                     	ds	2
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	bssBANK0
   689  0000E9                     __pbssBANK0:
   690                           	opt stack 0
   691  0000E9                     _DutyCycle:
   692                           	opt stack 0
   693  0000E9                     	ds	2
   694  0000EB                     _FinComandB:
   695                           	opt stack 0
   696  0000EB                     	ds	1
   697  0000EC                     _FinComandT:
   698                           	opt stack 0
   699  0000EC                     	ds	1
   700  0000ED                     _cleanBfer:
   701                           	opt stack 0
   702  0000ED                     	ds	1
   703  0000EE                     _Timer2Config:
   704                           	opt stack 0
   705  0000EE                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	bssBANK1
   716  000100                     __pbssBANK1:
   717                           	opt stack 0
   718  000100                     _TramaTablet:
   719                           	opt stack 0
   720  000100                     	ds	20
   721  000114                     _array:
   722                           	opt stack 0
   723  000114                     	ds	20
   724  000128                     _BluetoothDato:
   725                           	opt stack 0
   726  000128                     	ds	50
   727  00015A                     _comando:
   728                           	opt stack 0
   729  00015A                     	ds	20
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	dataBANK1
   740  00016E                     __pdataBANK1:
   741                           	opt stack 0
   742  00016E                     BT_Init@F5671:
   743                           	opt stack 0
   744  00016E                     	ds	18
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	cstackBANK0
   755  000060                     __pcstackBANK0:
   756                           	opt stack 0
   757  000060                     ??_OpenPWM2:
   758  000060                     ?_getCNY70Value:
   759                           	opt stack 0
   760  000060                     ?___awmod:
   761                           	opt stack 0
   762  000060                     ?___ftpack:
   763                           	opt stack 0
   764  000060                     ?___ftneg:
   765                           	opt stack 0
   766  000060                     ?__tdiv_to_l_:
   767                           	opt stack 0
   768  000060                     ?__div_to_l_:
   769                           	opt stack 0
   770  000060                     ?___lldiv:
   771                           	opt stack 0
   772  000060                     Lcd_Port@a:
   773                           	opt stack 0
   774  000060                     OpenPWM1@period:
   775                           	opt stack 0
   776  000060                     WriteUSART@data:
   777                           	opt stack 0
   778  000060                     clrBufferUSART@i:
   779                           	opt stack 0
   780  000060                     Pause_ms@x:
   781                           	opt stack 0
   782  000060                     SetDCPWM1@dutycycle:
   783                           	opt stack 0
   784  000060                     SetDCPWM2@dutycycle:
   785                           	opt stack 0
   786  000060                     OpenUSART@spbrg:
   787                           	opt stack 0
   788  000060                     ___awmod@dividend:
   789                           	opt stack 0
   790  000060                     __div_to_l_@f1:
   791                           	opt stack 0
   792  000060                     ___ftpack@arg:
   793                           	opt stack 0
   794  000060                     __tdiv_to_l_@f1:
   795                           	opt stack 0
   796  000060                     ___ftge@ff1:
   797                           	opt stack 0
   798  000060                     ___ftneg@f1:
   799                           	opt stack 0
   800  000060                     ___lldiv@dividend:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x0
   804  000060                     	ds	1
   805  000061                     ??_Lcd_Cmd:
   806  000061                     putcTxU1@character:
   807                           	opt stack 0
   808  000061                     Lcd_Write_Char@temp:
   809                           	opt stack 0
   810  000061                     PWM_init1@period:
   811                           	opt stack 0
   812  000061                     OpenPWM2@period:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x1
   816  000061                     	ds	1
   817  000062                     ??_OpenUSART:
   818  000062                     ??_SetDCPWM1:
   819  000062                     ??_SetDCPWM2:
   820  000062                     ??_Pause_ms:
   821  000062                     Lcd_Cmd@a:
   822                           	opt stack 0
   823  000062                     Lcd_Write_Char@y:
   824                           	opt stack 0
   825  000062                     OpenPWM2@ccp2mx:
   826                           	opt stack 0
   827  000062                     putSTRINGU1@dato:
   828                           	opt stack 0
   829  000062                     ___awmod@divisor:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x2
   833  000062                     	ds	1
   834  000063                     ??_Lcd_Init:
   835  000063                     Lcd_Set_Cursor@b:
   836                           	opt stack 0
   837  000063                     Lcd_Write_Char@a:
   838                           	opt stack 0
   839  000063                     PWM_init2@period:
   840                           	opt stack 0
   841  000063                     ___ftpack@exp:
   842                           	opt stack 0
   843  000063                     Pause_ms@i:
   844                           	opt stack 0
   845  000063                     __div_to_l_@f2:
   846                           	opt stack 0
   847  000063                     __tdiv_to_l_@f2:
   848                           	opt stack 0
   849  000063                     ___ftge@ff2:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x3
   853  000063                     	ds	1
   854  000064                     Lcd_Set_Cursor@a:
   855                           	opt stack 0
   856  000064                     ___awmod@counter:
   857                           	opt stack 0
   858  000064                     ___ftpack@sign:
   859                           	opt stack 0
   860  000064                     putSTRINGU1@total:
   861                           	opt stack 0
   862  000064                     Lcd_Write_String@a:
   863                           	opt stack 0
   864  000064                     SetDCPWM1@DCycle:
   865                           	opt stack 0
   866  000064                     SetDCPWM2@DCycle:
   867                           	opt stack 0
   868  000064                     ___lldiv@divisor:
   869                           	opt stack 0
   870                           
   871                           ; 4 bytes @ 0x4
   872  000064                     	ds	1
   873  000065                     ??___ftpack:
   874  000065                     Pause_seg@x:
   875                           	opt stack 0
   876  000065                     Lcd_Set_Cursor@z:
   877                           	opt stack 0
   878  000065                     OpenUSART@config:
   879                           	opt stack 0
   880  000065                     ___awmod@sign:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x5
   884  000065                     	ds	1
   885  000066                     ??_putSTRINGU1:
   886  000066                     ??_Lcd_Write_String:
   887  000066                     ??__tdiv_to_l_:
   888  000066                     ??__div_to_l_:
   889  000066                     ??___ftge:
   890  000066                     ?___awdiv:
   891                           	opt stack 0
   892  000066                     Pause_seg@i:
   893                           	opt stack 0
   894  000066                     UART1_Init@bdr:
   895                           	opt stack 0
   896  000066                     Lcd_Set_Cursor@y:
   897                           	opt stack 0
   898  000066                     ___awdiv@dividend:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x6
   902  000066                     	ds	1
   903  000067                     Lcd_Set_Cursor@temp:
   904                           	opt stack 0
   905  000067                     putcBluetoothString@a:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x7
   909  000067                     	ds	1
   910  000068                     ?___lbtoft:
   911                           	opt stack 0
   912  000068                     ?___lltoft:
   913                           	opt stack 0
   914  000068                     putSTRINGU1@last:
   915                           	opt stack 0
   916  000068                     Lcd_Write_String@i:
   917                           	opt stack 0
   918  000068                     ___awdiv@divisor:
   919                           	opt stack 0
   920  000068                     ___lldiv@quotient:
   921                           	opt stack 0
   922  000068                     ___lltoft@c:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0x8
   926  000068                     	ds	1
   927  000069                     ??_putcBluetoothString:
   928  000069                     putSTRINGU1@cont:
   929                           	opt stack 0
   930  000069                     __tdiv_to_l_@quot:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x9
   934  000069                     	ds	1
   935  00006A                     ___awdiv@counter:
   936                           	opt stack 0
   937  00006A                     SendBlueToothCommand@command:
   938                           	opt stack 0
   939  00006A                     __div_to_l_@quot:
   940                           	opt stack 0
   941                           
   942                           ; 4 bytes @ 0xA
   943  00006A                     	ds	1
   944  00006B                     ___awdiv@sign:
   945                           	opt stack 0
   946  00006B                     ___lbtoft@c:
   947                           	opt stack 0
   948  00006B                     putcBluetoothString@i:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0xB
   952  00006B                     	ds	1
   953  00006C                     ??___lltoft:
   954  00006C                     ___lldiv@counter:
   955                           	opt stack 0
   956  00006C                     SendBlueToothCommand@total:
   957                           	opt stack 0
   958  00006C                     ___awdiv@quotient:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0xC
   962  00006C                     	ds	1
   963  00006D                     ?___llmod:
   964                           	opt stack 0
   965  00006D                     __tdiv_to_l_@cntr:
   966                           	opt stack 0
   967  00006D                     ___llmod@dividend:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0xD
   971  00006D                     	ds	1
   972  00006E                     ?___wmul:
   973                           	opt stack 0
   974  00006E                     __div_to_l_@cntr:
   975                           	opt stack 0
   976  00006E                     __tdiv_to_l_@exp1:
   977                           	opt stack 0
   978  00006E                     ___wmul@multiplier:
   979                           	opt stack 0
   980  00006E                     BT_Init@nameBT:
   981                           	opt stack 0
   982                           
   983                           ; 18 bytes @ 0xE
   984  00006E                     	ds	1
   985  00006F                     __div_to_l_@exp1:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0xF
   989  00006F                     	ds	1
   990  000070                     ___lltoft@exp:
   991                           	opt stack 0
   992  000070                     ___wmul@multiplicand:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x10
   996  000070                     	ds	1
   997  000071                     ___llmod@divisor:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x11
  1001  000071                     	ds	1
  1002  000072                     ___wmul@product:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x12
  1006  000072                     	ds	2
  1007  000074                     ?___ftmul:
  1008                           	opt stack 0
  1009  000074                     ___ftmul@f1:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x14
  1013  000074                     	ds	1
  1014  000075                     ___llmod@counter:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x15
  1018  000075                     	ds	2
  1019  000077                     ___ftmul@f2:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x17
  1023  000077                     	ds	3
  1024  00007A                     ??___ftmul:
  1025                           
  1026                           ; 0 bytes @ 0x1A
  1027  00007A                     	ds	3
  1028  00007D                     ___ftmul@exp:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x1D
  1032  00007D                     	ds	1
  1033  00007E                     ___ftmul@f3_as_product:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x1E
  1037  00007E                     	ds	2
  1038  000080                     ??_Inicializa_Driveby:
  1039                           
  1040                           ; 0 bytes @ 0x20
  1041  000080                     	ds	1
  1042  000081                     ___ftmul@cntr:
  1043                           	opt stack 0
  1044  000081                     Inicializa_Driveby@i:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x21
  1048  000081                     	ds	1
  1049  000082                     ___ftmul@sign:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x22
  1053  000082                     	ds	1
  1054  000083                     ?_fround:
  1055                           	opt stack 0
  1056  000083                     ?_scale:
  1057                           	opt stack 0
  1058                           
  1059                           ; 3 bytes @ 0x23
  1060  000083                     	ds	3
  1061  000086                     _fround$2759:
  1062                           	opt stack 0
  1063  000086                     _scale$2760:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x26
  1067  000086                     	ds	3
  1068  000089                     scale@scl:
  1069                           	opt stack 0
  1070  000089                     _fround$2758:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x29
  1074  000089                     	ds	1
  1075  00008A                     ?___fttol:
  1076                           	opt stack 0
  1077  00008A                     ___fttol@f1:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x2A
  1081  00008A                     	ds	2
  1082  00008C                     fround@prec:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x2C
  1086  00008C                     	ds	1
  1087  00008D                     ?___ftadd:
  1088                           	opt stack 0
  1089  00008D                     ___ftadd@f1:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x2D
  1093  00008D                     	ds	1
  1094  00008E                     ??___fttol:
  1095                           
  1096                           ; 0 bytes @ 0x2E
  1097  00008E                     	ds	2
  1098  000090                     ___ftadd@f2:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x30
  1102  000090                     	ds	3
  1103  000093                     ??___ftadd:
  1104  000093                     ___fttol@sign1:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x33
  1108  000093                     	ds	1
  1109  000094                     ___fttol@lval:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0x34
  1113  000094                     	ds	2
  1114  000096                     ___ftadd@sign:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x36
  1118  000096                     	ds	1
  1119  000097                     ___ftadd@exp2:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x37
  1123  000097                     	ds	1
  1124  000098                     ___ftadd@exp1:
  1125                           	opt stack 0
  1126  000098                     ___fttol@exp1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x38
  1130  000098                     	ds	1
  1131  000099                     ??_PWM_DutyCycle1:
  1132  000099                     ??_PWM_DutyCycle2:
  1133  000099                     ?___ftsub:
  1134                           	opt stack 0
  1135  000099                     ___ftsub@f1:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x39
  1139  000099                     	ds	3
  1140  00009C                     ___ftsub@f2:
  1141                           	opt stack 0
  1142                           
  1143                           ; 3 bytes @ 0x3C
  1144  00009C                     	ds	1
  1145  00009D                     PWM_DutyCycle1@DutyCycle:
  1146                           	opt stack 0
  1147  00009D                     PWM_DutyCycle2@DutyCycle:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x3D
  1151  00009D                     	ds	2
  1152  00009F                     ?_sprintf:
  1153                           	opt stack 0
  1154  00009F                     PWM_DutyCycle1@percentageDuty:
  1155                           	opt stack 0
  1156  00009F                     PWM_DutyCycle2@percentageDuty:
  1157                           	opt stack 0
  1158  00009F                     sprintf@sp:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x3F
  1162  00009F                     	ds	1
  1163  0000A0                     PWM_DutyCycle1@DC:
  1164                           	opt stack 0
  1165  0000A0                     PWM_DutyCycle2@DC:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x40
  1169  0000A0                     	ds	1
  1170  0000A1                     sprintf@f:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x41
  1174  0000A1                     	ds	5
  1175  0000A6                     ??_sprintf:
  1176                           
  1177                           ; 0 bytes @ 0x46
  1178  0000A6                     	ds	6
  1179  0000AC                     _sprintf$2761:
  1180                           	opt stack 0
  1181                           
  1182                           ; 3 bytes @ 0x4C
  1183  0000AC                     	ds	3
  1184  0000AF                     _sprintf$1736:
  1185                           	opt stack 0
  1186                           
  1187                           ; 4 bytes @ 0x4F
  1188  0000AF                     	ds	4
  1189  0000B3                     sprintf@vd:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x53
  1193  0000B3                     	ds	4
  1194  0000B7                     sprintf@vd_1738:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x57
  1198  0000B7                     	ds	4
  1199  0000BB                     sprintf@ap:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x5B
  1203  0000BB                     	ds	2
  1204  0000BD                     sprintf@flag:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x5D
  1208  0000BD                     	ds	2
  1209  0000BF                     sprintf@integ:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0x5F
  1213  0000BF                     	ds	3
  1214  0000C2                     sprintf@prec:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x62
  1218  0000C2                     	ds	2
  1219  0000C4                     sprintf@_val:
  1220                           	opt stack 0
  1221                           
  1222                           ; 5 bytes @ 0x64
  1223  0000C4                     	ds	5
  1224  0000C9                     sprintf@exp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x69
  1228  0000C9                     	ds	2
  1229  0000CB                     sprintf@fval:
  1230                           	opt stack 0
  1231                           
  1232                           ; 3 bytes @ 0x6B
  1233  0000CB                     	ds	3
  1234  0000CE                     sprintf@c:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x6E
  1238  0000CE                     	ds	1
  1239  0000CF                     putcBluetoothInt@a:
  1240                           	opt stack 0
  1241  0000CF                     Lcd_Write_Integer@a:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x6F
  1245  0000CF                     	ds	2
  1246  0000D1                     putcBluetoothInt@s:
  1247                           	opt stack 0
  1248  0000D1                     Lcd_Write_Integer@s:
  1249                           	opt stack 0
  1250                           
  1251                           ; 20 bytes @ 0x71
  1252  0000D1                     	ds	20
  1253  0000E5                     putcBluetoothInt@i:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x85
  1257  0000E5                     	ds	2
  1258  0000E7                     Comando_Tablet@sensed:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x87
  1262  0000E7                     	ds	2
  1263  0000E9                     tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           postdec1	equ	0xFE5
  1270                           fsr1l	equ	0xFE1
  1271                           
  1272                           ; 0 bytes @ 0x89
  1273                           
  1274                           	psect	cstackCOMRAM
  1275  000001                     __pcstackCOMRAM:
  1276                           	opt stack 0
  1277  000001                     ?i2___ftpack:
  1278                           	opt stack 0
  1279  000001                     ReadUSART@data:
  1280                           	opt stack 0
  1281  000001                     i2Lcd_Port@a:
  1282                           	opt stack 0
  1283  000001                     i2SetDCPWM1@dutycycle:
  1284                           	opt stack 0
  1285  000001                     i2SetDCPWM2@dutycycle:
  1286                           	opt stack 0
  1287  000001                     i2___ftpack@arg:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x0
  1291  000001                     	ds	1
  1292  000002                     ??i2_Lcd_Cmd:
  1293  000002                     i2Lcd_Write_Char@temp:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x1
  1297  000002                     	ds	1
  1298  000003                     ??i2_SetDCPWM1:
  1299  000003                     ??i2_SetDCPWM2:
  1300  000003                     i2Lcd_Cmd@a:
  1301                           	opt stack 0
  1302  000003                     i2Lcd_Write_Char@y:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x2
  1306  000003                     	ds	1
  1307  000004                     i2Lcd_Set_Cursor@b:
  1308                           	opt stack 0
  1309  000004                     i2Lcd_Write_Char@a:
  1310                           	opt stack 0
  1311  000004                     i2___ftpack@exp:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x3
  1315  000004                     	ds	1
  1316  000005                     i2Lcd_Set_Cursor@a:
  1317                           	opt stack 0
  1318  000005                     i2___ftpack@sign:
  1319                           	opt stack 0
  1320  000005                     i2Lcd_Write_String@a:
  1321                           	opt stack 0
  1322  000005                     i2SetDCPWM1@DCycle:
  1323                           	opt stack 0
  1324  000005                     i2SetDCPWM2@DCycle:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x4
  1328  000005                     	ds	1
  1329  000006                     ??i2___ftpack:
  1330  000006                     i2Lcd_Set_Cursor@z:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x5
  1334  000006                     	ds	1
  1335  000007                     ??i2_Lcd_Write_String:
  1336  000007                     i2Lcd_Set_Cursor@y:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x6
  1340  000007                     	ds	1
  1341  000008                     i2Lcd_Set_Cursor@temp:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x7
  1345  000008                     	ds	1
  1346  000009                     ?i2___lbtoft:
  1347                           	opt stack 0
  1348  000009                     i2Lcd_Write_String@i:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x8
  1352  000009                     	ds	3
  1353  00000C                     i2___lbtoft@c:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0xB
  1357  00000C                     	ds	1
  1358  00000D                     ?i2___ftmul:
  1359                           	opt stack 0
  1360  00000D                     i2___ftmul@f1:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0xC
  1364  00000D                     	ds	3
  1365  000010                     i2___ftmul@f2:
  1366                           	opt stack 0
  1367                           
  1368                           ; 3 bytes @ 0xF
  1369  000010                     	ds	3
  1370  000013                     ??i2___ftmul:
  1371                           
  1372                           ; 0 bytes @ 0x12
  1373  000013                     	ds	3
  1374  000016                     i2___ftmul@exp:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x15
  1378  000016                     	ds	1
  1379  000017                     i2___ftmul@f3_as_product:
  1380                           	opt stack 0
  1381                           
  1382                           ; 3 bytes @ 0x16
  1383  000017                     	ds	3
  1384  00001A                     i2___ftmul@cntr:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x19
  1388  00001A                     	ds	1
  1389  00001B                     i2___ftmul@sign:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x1A
  1393  00001B                     	ds	1
  1394  00001C                     ?i2___fttol:
  1395                           	opt stack 0
  1396  00001C                     i2___fttol@f1:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x1B
  1400  00001C                     	ds	4
  1401  000020                     ??i2___fttol:
  1402                           
  1403                           ; 0 bytes @ 0x1F
  1404  000020                     	ds	5
  1405  000025                     i2___fttol@sign1:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x24
  1409  000025                     	ds	1
  1410  000026                     i2___fttol@lval:
  1411                           	opt stack 0
  1412                           
  1413                           ; 4 bytes @ 0x25
  1414  000026                     	ds	4
  1415  00002A                     i2___fttol@exp1:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x29
  1419  00002A                     	ds	1
  1420  00002B                     ??i2_PWM_DutyCycle1:
  1421  00002B                     ??i2_PWM_DutyCycle2:
  1422                           
  1423                           ; 0 bytes @ 0x2A
  1424  00002B                     	ds	4
  1425  00002F                     i2PWM_DutyCycle1@DutyCycle:
  1426                           	opt stack 0
  1427  00002F                     i2PWM_DutyCycle2@DutyCycle:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2E
  1431  00002F                     	ds	2
  1432  000031                     i2PWM_DutyCycle1@percentageDuty:
  1433                           	opt stack 0
  1434  000031                     i2PWM_DutyCycle2@percentageDuty:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x30
  1438  000031                     	ds	1
  1439  000032                     i2PWM_DutyCycle1@DC:
  1440                           	opt stack 0
  1441  000032                     i2PWM_DutyCycle2@DC:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x31
  1445  000032                     	ds	2
  1446  000034                     ??_TMRO_USART:
  1447                           
  1448                           ; 0 bytes @ 0x33
  1449  000034                     	ds	14
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1l	equ	0xFE1
  1458                           
  1459 ;;
  1460 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1461 ;;
  1462 ;; *************** function _main *****************
  1463 ;; Defined at:
  1464 ;;		line 144 in file "robot.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2  395[COMRAM] int 
  1471 ;; Registers used:
  1472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels required when called:   10
  1484 ;; This function calls:
  1485 ;;		_Comando_Tablet
  1486 ;;		_Inicializa_Driveby
  1487 ;;		_Lcd_Clear
  1488 ;;		_Lcd_Init
  1489 ;;		_Lcd_Set_Cursor
  1490 ;;		_Lcd_Write_String
  1491 ;;		_UART1_Init
  1492 ;;		_clrBufferUSART
  1493 ;; This function is called by:
  1494 ;;		Startup code after reset
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text0
  1499  0026CE                     __ptext0:
  1500                           	opt stack 0
  1501  0026CE                     _main:
  1502                           	opt stack 21
  1503                           
  1504                           ;robot.c: 146: INTCON =0X00;
  1505                           
  1506                           ;incstack = 0
  1507  0026CE  0E00               	movlw	0
  1508  0026D0  6EF2               	movwf	intcon,c	;volatile
  1509                           
  1510                           ;robot.c: 147: TRISD = 0x00;
  1511  0026D2  0E00               	movlw	0
  1512  0026D4  6E95               	movwf	3989,c	;volatile
  1513                           
  1514                           ;robot.c: 148: TRISE = 0x00;
  1515  0026D6  0E00               	movlw	0
  1516  0026D8  6E96               	movwf	3990,c	;volatile
  1517                           
  1518                           ;robot.c: 149: PORTEbits.RE1=0;
  1519  0026DA  9284               	bcf	3972,1,c	;volatile
  1520                           
  1521                           ;robot.c: 150: ADCON1bits.PCFG=0b1111;
  1522  0026DC  80C1               	bsf	4033,0,c	;volatile
  1523  0026DE  82C1               	bsf	4033,1,c	;volatile
  1524  0026E0  84C1               	bsf	4033,2,c	;volatile
  1525  0026E2  86C1               	bsf	4033,3,c	;volatile
  1526                           
  1527                           ;robot.c: 151: Lcd_Init();
  1528  0026E4  EC70  F016         	call	_Lcd_Init	;wreg free
  1529                           
  1530                           ;robot.c: 152: Lcd_Clear();
  1531  0026E8  EC71  F01A         	call	_Lcd_Clear	;wreg free
  1532                           
  1533                           ;robot.c: 153: Lcd_Set_Cursor(1,1);
  1534  0026EC  0E01               	movlw	1
  1535  0026EE  0100               	movlb	0	; () banked
  1536  0026F0  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1537  0026F2  0E01               	movlw	1
  1538  0026F4  ECAC  F016         	call	_Lcd_Set_Cursor
  1539                           
  1540                           ;robot.c: 154: Lcd_Write_String("Inicio");
  1541  0026F8  0E7F               	movlw	high STR_22
  1542  0026FA  0100               	movlb	0	; () banked
  1543  0026FC  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1544  0026FE  0EEE               	movlw	low STR_22
  1545  002700  0100               	movlb	0	; () banked
  1546  002702  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1547  002704  EC65  F014         	call	_Lcd_Write_String	;wreg free
  1548                           
  1549                           ;robot.c: 155: Inicializa_Driveby();
  1550  002708  EC43  F00F         	call	_Inicializa_Driveby	;wreg free
  1551                           
  1552                           ;robot.c: 156: PORTAbits.RA2 = 1;
  1553  00270C  8480               	bsf	3968,2,c	;volatile
  1554  00270E                     l4806:
  1555                           
  1556                           ;robot.c: 160: {
  1557                           ;robot.c: 163: if (cleanBfer == 1) {
  1558  00270E  0100               	movlb	0	; () banked
  1559  002710  05ED               	decf	_cleanBfer& (0+255),w,b
  1560  002712  A4D8               	btfss	status,2,c
  1561  002714  D005               	goto	l4812
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;robot.c: 164: clrBufferUSART();
  1565  002716  EC8D  F018         	call	_clrBufferUSART	;wreg free
  1566                           
  1567                           ;robot.c: 165: cleanBfer = 0;
  1568  00271A  0E00               	movlw	0
  1569  00271C  0100               	movlb	0	; () banked
  1570  00271E  6FED               	movwf	_cleanBfer& (0+255),b
  1571  002720                     l4812:
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;robot.c: 166: }
  1575                           ;robot.c: 167: if (FinComandT == 1) {
  1576  002720  0100               	movlb	0	; () banked
  1577  002722  05EC               	decf	_FinComandT& (0+255),w,b
  1578  002724  A4D8               	btfss	status,2,c
  1579  002726  D01E               	goto	l4832
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;robot.c: 168: Lcd_Clear();
  1583  002728  EC71  F01A         	call	_Lcd_Clear	;wreg free
  1584                           
  1585                           ;robot.c: 169: Lcd_Set_Cursor(2,1);
  1586  00272C  0E01               	movlw	1
  1587  00272E  0100               	movlb	0	; () banked
  1588  002730  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1589  002732  0E02               	movlw	2
  1590  002734  ECAC  F016         	call	_Lcd_Set_Cursor
  1591                           
  1592                           ;robot.c: 170: Lcd_Write_String("CMD TABLET");
  1593  002738  0E7F               	movlw	high STR_23
  1594  00273A  0100               	movlb	0	; () banked
  1595  00273C  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1596  00273E  0EC7               	movlw	low STR_23
  1597  002740  0100               	movlb	0	; () banked
  1598  002742  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1599  002744  EC65  F014         	call	_Lcd_Write_String	;wreg free
  1600                           
  1601                           ;robot.c: 171: FinComandT = 0;
  1602  002748  0E00               	movlw	0
  1603  00274A  0100               	movlb	0	; () banked
  1604  00274C  6FEC               	movwf	_FinComandT& (0+255),b
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;robot.c: 172: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1608  00274E  0E4F               	movlw	79
  1609  002750  16AB               	andwf	4011,f,c	;volatile
  1610                           
  1611                           ; BSR set to: 0
  1612  002752  9AAC               	bcf	4012,5,c	;volatile
  1613                           
  1614                           ; BSR set to: 0
  1615  002754  0ECF               	movlw	207
  1616  002756  169D               	andwf	3997,f,c	;volatile
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;robot.c: 173: Comando_Tablet();
  1620  002758  ECC1  F00C         	call	_Comando_Tablet	;wreg free
  1621                           
  1622                           ;robot.c: 174: UART1_Init(51);
  1623  00275C  0E33               	movlw	51
  1624  00275E  EC37  F01A         	call	_UART1_Init
  1625                           
  1626                           ;robot.c: 176: }
  1627  002762  D7D5               	goto	l4806
  1628  002764                     l4832:
  1629                           
  1630                           ;robot.c: 177: else if (FinComandB == 1) {
  1631  002764  0100               	movlb	0	; () banked
  1632  002766  05EB               	decf	_FinComandB& (0+255),w,b
  1633  002768  A4D8               	btfss	status,2,c
  1634  00276A  D7D1               	goto	l4806
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;robot.c: 182: FinComandB = 0;
  1638  00276C  0E00               	movlw	0
  1639  00276E  0100               	movlb	0	; () banked
  1640  002770  6FEB               	movwf	_FinComandB& (0+255),b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;robot.c: 183: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1644  002772  0E4F               	movlw	79
  1645  002774  16AB               	andwf	4011,f,c	;volatile
  1646                           
  1647                           ; BSR set to: 0
  1648  002776  9AAC               	bcf	4012,5,c	;volatile
  1649                           
  1650                           ; BSR set to: 0
  1651  002778  0ECF               	movlw	207
  1652  00277A  169D               	andwf	3997,f,c	;volatile
  1653  00277C  D7C8               	goto	l4806
  1654  00277E                     __end_of_main:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           intcon	equ	0xFF2
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1l	equ	0xFE1
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _Lcd_Init *****************
  1668 ;; Defined at:
  1669 ;;		line 57 in file "lcd.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;		None               void
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1683 ;;      Params:         0       0       0       0       0       0       0       0       0
  1684 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1685 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1686 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1687 ;;Total ram usage:        1 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    6
  1690 ;; This function calls:
  1691 ;;		_Lcd_Cmd
  1692 ;;		_Lcd_Port
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text1
  1699  002CE0                     __ptext1:
  1700                           	opt stack 0
  1701  002CE0                     _Lcd_Init:
  1702                           	opt stack 24
  1703                           
  1704                           ;lcd.c: 58: Lcd_Port(0x00);
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;incstack = 0
  1708  002CE0  0E00               	movlw	0
  1709  002CE2  EC5D  F019         	call	_Lcd_Port
  1710                           
  1711                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1712  002CE6  0E1A               	movlw	26
  1713  002CE8  0100               	movlb	0	; () banked
  1714  002CEA  6F63               	movwf	??_Lcd_Init& (0+255),b
  1715  002CEC  0EF8               	movlw	248
  1716  002CEE                     u5247:
  1717  002CEE  2EE8               	decfsz	wreg,f,c
  1718  002CF0  D7FE               	goto	u5247
  1719  002CF2  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1720  002CF4  D7FC               	goto	u5247
  1721  002CF6  D000               	nop2	
  1722                           
  1723                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1724  002CF8  0E03               	movlw	3
  1725  002CFA  ECE6  F019         	call	_Lcd_Cmd
  1726                           
  1727                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1728  002CFE  0E07               	movlw	7
  1729  002D00  0100               	movlb	0	; () banked
  1730  002D02  6F63               	movwf	??_Lcd_Init& (0+255),b
  1731  002D04  0E7D               	movlw	125
  1732  002D06                     u5257:
  1733  002D06  2EE8               	decfsz	wreg,f,c
  1734  002D08  D7FE               	goto	u5257
  1735  002D0A  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1736  002D0C  D7FC               	goto	u5257
  1737  002D0E  F000               	nop	
  1738                           
  1739                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1740  002D10  0E03               	movlw	3
  1741  002D12  ECE6  F019         	call	_Lcd_Cmd
  1742                           
  1743                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1744  002D16  0E0F               	movlw	15
  1745  002D18  0100               	movlb	0	; () banked
  1746  002D1A  6F63               	movwf	??_Lcd_Init& (0+255),b
  1747  002D1C  0E48               	movlw	72
  1748  002D1E                     u5267:
  1749  002D1E  2EE8               	decfsz	wreg,f,c
  1750  002D20  D7FE               	goto	u5267
  1751  002D22  2F63               	decfsz	??_Lcd_Init& (0+255),f,b
  1752  002D24  D7FC               	goto	u5267
  1753                           
  1754                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1755  002D26  0E03               	movlw	3
  1756  002D28  ECE6  F019         	call	_Lcd_Cmd
  1757                           
  1758                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1759  002D2C  0E02               	movlw	2
  1760  002D2E  ECE6  F019         	call	_Lcd_Cmd
  1761                           
  1762                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1763  002D32  0E02               	movlw	2
  1764  002D34  ECE6  F019         	call	_Lcd_Cmd
  1765                           
  1766                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1767  002D38  0E08               	movlw	8
  1768  002D3A  ECE6  F019         	call	_Lcd_Cmd
  1769                           
  1770                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1771  002D3E  0E00               	movlw	0
  1772  002D40  ECE6  F019         	call	_Lcd_Cmd
  1773                           
  1774                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1775  002D44  0E0C               	movlw	12
  1776  002D46  ECE6  F019         	call	_Lcd_Cmd
  1777                           
  1778                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1779  002D4A  0E00               	movlw	0
  1780  002D4C  ECE6  F019         	call	_Lcd_Cmd
  1781                           
  1782                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1783  002D50  0E06               	movlw	6
  1784  002D52  ECE6  F019         	call	_Lcd_Cmd
  1785  002D56  0012               	return	
  1786  002D58                     __end_of_Lcd_Init:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           intcon	equ	0xFF2
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postdec1	equ	0xFE5
  1796                           fsr1l	equ	0xFE1
  1797                           status	equ	0xFD8
  1798                           
  1799 ;; *************** function _Inicializa_Driveby *****************
  1800 ;; Defined at:
  1801 ;;		line 62 in file "Funciones_Db.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  i               2   33[BANK0 ] int 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;		None               void
  1808 ;; Registers used:
  1809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0
  1816 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1817 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1818 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1819 ;;Total ram usage:        3 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    9
  1822 ;; This function calls:
  1823 ;;		_BT_Init
  1824 ;;		_Lcd_Clear
  1825 ;;		_Lcd_Set_Cursor
  1826 ;;		_Lcd_Write_String
  1827 ;;		_PWM_init1
  1828 ;;		_PWM_init2
  1829 ;;		_Pause_seg
  1830 ;;		_clrBufferUSART
  1831 ;;		_external_interrupt_init
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text2
  1838  001E86                     __ptext2:
  1839                           	opt stack 0
  1840  001E86                     _Inicializa_Driveby:
  1841                           	opt stack 21
  1842                           
  1843                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1844                           
  1845                           ;incstack = 0
  1846  001E86  0E00               	movlw	0
  1847  001E88  6E95               	movwf	3989,c	;volatile
  1848  001E8A  CF95 FF94          	movff	3989,3988	;volatile
  1849  001E8E  CF94 FF93          	movff	3988,3987	;volatile
  1850  001E92  CF93 FF92          	movff	3987,3986	;volatile
  1851                           
  1852                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1853  001E96  0EC0               	movlw	192
  1854  001E98  6EF2               	movwf	intcon,c	;volatile
  1855                           
  1856                           ;Funciones_Db.c: 67: int i = 0;
  1857  001E9A  0E00               	movlw	0
  1858  001E9C  0100               	movlb	0	; () banked
  1859  001E9E  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  1860  001EA0  0E00               	movlw	0
  1861  001EA2  0100               	movlb	0	; () banked
  1862  001EA4  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1866  001EA6  0E34               	movlw	52
  1867  001EA8  0100               	movlb	0	; () banked
  1868  001EAA  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  1869  001EAC  0EF2               	movlw	242
  1870  001EAE                     u5277:
  1871  001EAE  2EE8               	decfsz	wreg,f,c
  1872  001EB0  D7FE               	goto	u5277
  1873  001EB2  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  1874  001EB4  D7FC               	goto	u5277
  1875                           
  1876                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1877  001EB6  88D3               	bsf	4051,4,c	;volatile
  1878  001EB8  8AD3               	bsf	4051,5,c	;volatile
  1879  001EBA  8CD3               	bsf	4051,6,c	;volatile
  1880                           
  1881                           ;Funciones_Db.c: 74: TRISA = 0;
  1882  001EBC  0E00               	movlw	0
  1883  001EBE  6E92               	movwf	3986,c	;volatile
  1884                           
  1885                           ;Funciones_Db.c: 75: PORTA = 0;
  1886  001EC0  0E00               	movlw	0
  1887  001EC2  6E80               	movwf	3968,c	;volatile
  1888                           
  1889                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  1890  001EC4  8E94               	bsf	3988,7,c	;volatile
  1891                           
  1892                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  1893  001EC6  9C94               	bcf	3988,6,c	;volatile
  1894                           
  1895                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  1896  001EC8  0E00               	movlw	0
  1897  001ECA  0100               	movlb	0	; () banked
  1898  001ECC  6F82               	movwf	(Inicializa_Driveby@i+1)& (0+255),b
  1899  001ECE  0E01               	movlw	1
  1900  001ED0  0100               	movlb	0	; () banked
  1901  001ED2  6F81               	movwf	Inicializa_Driveby@i& (0+255),b
  1902  001ED4                     
  1903                           ; BSR set to: 0
  1904  001ED4  0100               	movlb	0	; () banked
  1905  001ED6  5182               	movf	(Inicializa_Driveby@i+1)& (0+255),w,b
  1906  001ED8  0A80               	xorlw	128
  1907  001EDA  0F80               	addlw	-128
  1908  001EDC  0E33               	movlw	51
  1909  001EDE  B4D8               	btfsc	status,2,c
  1910  001EE0  5D81               	subwf	Inicializa_Driveby@i& (0+255),w,b
  1911  001EE2  B0D8               	btfsc	status,0,c
  1912  001EE4  D00D               	goto	l4502
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1916                           
  1917                           ; BSR set to: 0
  1918                           
  1919                           ; BSR set to: 0
  1920  001EE6  0E1A               	movlw	26
  1921  001EE8  0100               	movlb	0	; () banked
  1922  001EEA  6F80               	movwf	??_Inicializa_Driveby& (0+255),b
  1923  001EEC  0EF8               	movlw	248
  1924  001EEE                     u5287:
  1925  001EEE  2EE8               	decfsz	wreg,f,c
  1926  001EF0  D7FE               	goto	u5287
  1927  001EF2  2F80               	decfsz	??_Inicializa_Driveby& (0+255),f,b
  1928  001EF4  D7FC               	goto	u5287
  1929  001EF6  D000               	nop2	
  1930  001EF8  0100               	movlb	0	; () banked
  1931  001EFA  4B81               	infsnz	Inicializa_Driveby@i& (0+255),f,b
  1932  001EFC  2B82               	incf	(Inicializa_Driveby@i+1)& (0+255),f,b
  1933  001EFE  D7EA               	goto	L1
  1934  001F00                     l4502:
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;Funciones_Db.c: 80: PORTE = 0;
  1938  001F00  0E00               	movlw	0
  1939  001F02  6E84               	movwf	3972,c	;volatile
  1940                           
  1941                           ;Funciones_Db.c: 81: PORTB = 0;
  1942  001F04  0E00               	movlw	0
  1943  001F06  6E81               	movwf	3969,c	;volatile
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  1947  001F08  8093               	bsf	3987,0,c	;volatile
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  1951  001F0A  8293               	bsf	3987,1,c	;volatile
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  1955  001F0C  8493               	bsf	3987,2,c	;volatile
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  1959  001F0E  8693               	bsf	3987,3,c	;volatile
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  1963  001F10  8893               	bsf	3987,4,c	;volatile
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;Funciones_Db.c: 87: external_interrupt_init();
  1967  001F12  EC5F  F01A         	call	_external_interrupt_init	;wreg free
  1968                           
  1969                           ;Funciones_Db.c: 88: Lcd_Clear();
  1970  001F16  EC71  F01A         	call	_Lcd_Clear	;wreg free
  1971                           
  1972                           ;Funciones_Db.c: 89: Lcd_Set_Cursor(2, 1);
  1973  001F1A  0E01               	movlw	1
  1974  001F1C  0100               	movlb	0	; () banked
  1975  001F1E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1976  001F20  0E02               	movlw	2
  1977  001F22  ECAC  F016         	call	_Lcd_Set_Cursor
  1978                           
  1979                           ;Funciones_Db.c: 90: Lcd_Write_String("INICIO");
  1980  001F26  0E7F               	movlw	high STR_10
  1981  001F28  0100               	movlb	0	; () banked
  1982  001F2A  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  1983  001F2C  0EF5               	movlw	low STR_10
  1984  001F2E  0100               	movlb	0	; () banked
  1985  001F30  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  1986  001F32  EC65  F014         	call	_Lcd_Write_String	;wreg free
  1987                           
  1988                           ;Funciones_Db.c: 92: BT_Init();
  1989  001F36  ECDC  F011         	call	_BT_Init	;wreg free
  1990                           
  1991                           ;Funciones_Db.c: 93: Lcd_Clear();
  1992  001F3A  EC71  F01A         	call	_Lcd_Clear	;wreg free
  1993                           
  1994                           ;Funciones_Db.c: 94: Lcd_Set_Cursor(1, 1);
  1995  001F3E  0E01               	movlw	1
  1996  001F40  0100               	movlb	0	; () banked
  1997  001F42  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  1998  001F44  0E01               	movlw	1
  1999  001F46  ECAC  F016         	call	_Lcd_Set_Cursor
  2000                           
  2001                           ;Funciones_Db.c: 95: Lcd_Write_String("BT INICIALIZADO");
  2002  001F4A  0E7F               	movlw	high STR_11
  2003  001F4C  0100               	movlb	0	; () banked
  2004  001F4E  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2005  001F50  0E57               	movlw	low STR_11
  2006  001F52  0100               	movlb	0	; () banked
  2007  001F54  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  2008  001F56  EC65  F014         	call	_Lcd_Write_String	;wreg free
  2009                           
  2010                           ;Funciones_Db.c: 97: Pause_seg(7);
  2011  001F5A  0E07               	movlw	7
  2012  001F5C  EC83  F017         	call	_Pause_seg
  2013                           
  2014                           ;Funciones_Db.c: 98: cad = 0;
  2015  001F60  0E00               	movlw	0
  2016  001F62  6E55               	movwf	_cad,c
  2017                           
  2018                           ;Funciones_Db.c: 99: clrBufferUSART();
  2019  001F64  EC8D  F018         	call	_clrBufferUSART	;wreg free
  2020                           
  2021                           ;Funciones_Db.c: 102: PWM_init1(0xff);
  2022  001F68  0EFF               	movlw	255
  2023  001F6A  ECD3  F019         	call	_PWM_init1
  2024                           
  2025                           ;Funciones_Db.c: 103: PWM_init2(0xff);
  2026  001F6E  0EFF               	movlw	255
  2027  001F70  ECC0  F019         	call	_PWM_init2
  2028                           
  2029                           ;Funciones_Db.c: 104: return;
  2030  001F74  0012               	return	
  2031  001F76                     __end_of_Inicializa_Driveby:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           intcon	equ	0xFF2
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           postdec1	equ	0xFE5
  2041                           fsr1l	equ	0xFE1
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _external_interrupt_init *****************
  2045 ;; Defined at:
  2046 ;;		line 107 in file "Funciones_Db.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		None
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    4
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_Inicializa_Driveby
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text3
  2075  0034BE                     __ptext3:
  2076                           	opt stack 0
  2077  0034BE                     _external_interrupt_init:
  2078                           	opt stack 25
  2079                           
  2080                           ;Funciones_Db.c: 110: TRISBbits.TRISB0 = 1;
  2081                           
  2082                           ;incstack = 0
  2083  0034BE  8093               	bsf	3987,0,c	;volatile
  2084                           
  2085                           ;Funciones_Db.c: 111: INTCONbits.INT0E = 1;
  2086  0034C0  88F2               	bsf	intcon,4,c	;volatile
  2087                           
  2088                           ;Funciones_Db.c: 112: INTCON2bits.INTEDG0 = 0;
  2089  0034C2  9CF1               	bcf	intcon2,6,c	;volatile
  2090                           
  2091                           ;Funciones_Db.c: 113: INTCONbits.INT0F = 0;
  2092  0034C4  92F2               	bcf	intcon,1,c	;volatile
  2093                           
  2094                           ;Funciones_Db.c: 115: TRISBbits.TRISB1 = 1;
  2095  0034C6  8293               	bsf	3987,1,c	;volatile
  2096                           
  2097                           ;Funciones_Db.c: 116: INTCON3bits.INT1E = 1;
  2098  0034C8  86F0               	bsf	intcon3,3,c	;volatile
  2099                           
  2100                           ;Funciones_Db.c: 117: INTCON2bits.INTEDG1 = 0;
  2101  0034CA  9AF1               	bcf	intcon2,5,c	;volatile
  2102                           
  2103                           ;Funciones_Db.c: 118: INTCON3bits.INT1F = 0;
  2104  0034CC  90F0               	bcf	intcon3,0,c	;volatile
  2105                           
  2106                           ;Funciones_Db.c: 119: return;
  2107  0034CE  0012               	return	
  2108  0034D0                     __end_of_external_interrupt_init:
  2109                           	opt stack 0
  2110                           tblptru	equ	0xFF8
  2111                           tblptrh	equ	0xFF7
  2112                           tblptrl	equ	0xFF6
  2113                           tablat	equ	0xFF5
  2114                           intcon	equ	0xFF2
  2115                           intcon2	equ	0xFF1
  2116                           intcon3	equ	0xFF0
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _PWM_init2 *****************
  2124 ;; Defined at:
  2125 ;;		line 42 in file "pwm.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  period          1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  period          1    3[BANK0 ] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;		None               void
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2139 ;;      Params:         0       0       0       0       0       0       0       0       0
  2140 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2142 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2143 ;;Total ram usage:        1 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    5
  2146 ;; This function calls:
  2147 ;;		_OpenPWM2
  2148 ;; This function is called by:
  2149 ;;		_Inicializa_Driveby
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text4
  2154  003380                     __ptext4:
  2155                           	opt stack 0
  2156  003380                     _PWM_init2:
  2157                           	opt stack 24
  2158                           
  2159                           ;incstack = 0
  2160                           ;PWM_init2@period stored from wreg
  2161  003380  0100               	movlb	0	; () banked
  2162  003382  6F63               	movwf	PWM_init2@period& (0+255),b
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;pwm.c: 43: Timer2Config = 0b11111110;
  2166  003384  0EFE               	movlw	254
  2167  003386  0100               	movlb	0	; () banked
  2168  003388  6FEE               	movwf	_Timer2Config& (0+255),b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  2172  00338A  0100               	movlb	0	; () banked
  2173  00338C  51EE               	movf	_Timer2Config& (0+255),w,b
  2174  00338E  0BFB               	andlw	251
  2175  003390  6ECA               	movwf	4042,c	;volatile
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;pwm.c: 47: TMR2 = 0;
  2179  003392  0E00               	movlw	0
  2180  003394  6ECC               	movwf	4044,c	;volatile
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  2184  003396  929E               	bcf	3998,1,c	;volatile
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  2188  003398  929D               	bcf	3997,1,c	;volatile
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  2192  00339A  84CA               	bsf	4042,2,c	;volatile
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;pwm.c: 51: OpenPWM2(period);
  2196  00339C  0100               	movlb	0	; () banked
  2197  00339E  5163               	movf	PWM_init2@period& (0+255),w,b
  2198  0033A0  EC6B  F018         	call	_OpenPWM2
  2199                           
  2200                           ;pwm.c: 53: return;
  2201  0033A4  0012               	return	
  2202  0033A6                     __end_of_PWM_init2:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           intcon	equ	0xFF2
  2209                           intcon2	equ	0xFF1
  2210                           intcon3	equ	0xFF0
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function _OpenPWM2 *****************
  2218 ;; Defined at:
  2219 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  period          1    wreg     unsigned char 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  period          1    1[BANK0 ] unsigned char 
  2224 ;;  ccp2mx          1    2[BANK0 ] unsigned char 
  2225 ;;  pmmode          1    0        unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0
  2236 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2237 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2238 ;;      Totals:         0       3       0       0       0       0       0       0       0
  2239 ;;Total ram usage:        3 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    4
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_PWM_init2
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text5
  2250  0030D6                     __ptext5:
  2251                           	opt stack 0
  2252  0030D6                     _OpenPWM2:
  2253                           	opt stack 24
  2254                           
  2255                           ;incstack = 0
  2256                           ;OpenPWM2@period stored from wreg
  2257  0030D6  0100               	movlb	0	; () banked
  2258  0030D8  6F61               	movwf	OpenPWM2@period& (0+255),b
  2259                           
  2260                           ; BSR set to: 0
  2261  0030DA  0E0C               	movlw	12
  2262  0030DC  6EBA               	movwf	4026,c	;volatile
  2263                           
  2264                           ; BSR set to: 0
  2265  0030DE  0E05               	movlw	5
  2266  0030E0  6EF6               	movwf	tblptrl,c
  2267  0030E2                     	if	1	;There is more than 1 active tblptr byte
  2268  0030E2  0E00               	movlw	0
  2269  0030E4  6EF7               	movwf	tblptrh,c
  2270  0030E6                     	endif
  2271  0030E6                     	if	1	;There are 3 active tblptr bytes
  2272  0030E6  0E30               	movlw	48
  2273  0030E8  6EF8               	movwf	tblptru,c
  2274  0030EA                     	endif
  2275  0030EA  0008               	tblrd		*
  2276  0030EC  CFF5 F060          	movff	tablat,??_OpenPWM2
  2277  0030F0  0100               	movlb	0	; () banked
  2278  0030F2  A160               	btfss	??_OpenPWM2& (0+255),0,b
  2279  0030F4  D003               	goto	l3990
  2280                           
  2281                           ; BSR set to: 0
  2282  0030F6  0100               	movlb	0	; () banked
  2283  0030F8  6962               	setf	OpenPWM2@ccp2mx& (0+255),b
  2284  0030FA  D003               	goto	l589
  2285  0030FC                     l3990:
  2286                           
  2287                           ; BSR set to: 0
  2288  0030FC  0E00               	movlw	0
  2289  0030FE  0100               	movlb	0	; () banked
  2290  003100  6F62               	movwf	OpenPWM2@ccp2mx& (0+255),b
  2291  003102                     l589:
  2292                           
  2293                           ; BSR set to: 0
  2294  003102  0100               	movlb	0	; () banked
  2295  003104  5162               	movf	OpenPWM2@ccp2mx& (0+255),w,b
  2296  003106  B4D8               	btfsc	status,2,c
  2297  003108  D002               	goto	l590
  2298                           
  2299                           ; BSR set to: 0
  2300  00310A  9294               	bcf	3988,1,c	;volatile
  2301  00310C  D001               	goto	l591
  2302  00310E                     l590:
  2303                           
  2304                           ; BSR set to: 0
  2305  00310E  9693               	bcf	3987,3,c	;volatile
  2306  003110                     l591:
  2307                           
  2308                           ; BSR set to: 0
  2309  003110  94CA               	bcf	4042,2,c	;volatile
  2310  003112  C061  FFCB         	movff	OpenPWM2@period,4043	;volatile
  2311  003116  84CA               	bsf	4042,2,c	;volatile
  2312                           
  2313                           ; BSR set to: 0
  2314  003118  0012               	return	
  2315  00311A                     __end_of_OpenPWM2:
  2316                           	opt stack 0
  2317                           tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           intcon	equ	0xFF2
  2322                           intcon2	equ	0xFF1
  2323                           intcon3	equ	0xFF0
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1l	equ	0xFE1
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function _PWM_init1 *****************
  2331 ;; Defined at:
  2332 ;;		line 20 in file "pwm.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  period          1    wreg     unsigned char 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  period          1    1[BANK0 ] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2346 ;;      Params:         0       0       0       0       0       0       0       0       0
  2347 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2349 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2350 ;;Total ram usage:        1 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    5
  2353 ;; This function calls:
  2354 ;;		_OpenPWM1
  2355 ;; This function is called by:
  2356 ;;		_Inicializa_Driveby
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text6
  2361  0033A6                     __ptext6:
  2362                           	opt stack 0
  2363  0033A6                     _PWM_init1:
  2364                           	opt stack 24
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;incstack = 0
  2368                           ;PWM_init1@period stored from wreg
  2369  0033A6  0100               	movlb	0	; () banked
  2370  0033A8  6F61               	movwf	PWM_init1@period& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;pwm.c: 21: Timer2Config = 0b11111110;
  2374  0033AA  0EFE               	movlw	254
  2375  0033AC  0100               	movlb	0	; () banked
  2376  0033AE  6FEE               	movwf	_Timer2Config& (0+255),b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  2380  0033B0  0100               	movlb	0	; () banked
  2381  0033B2  51EE               	movf	_Timer2Config& (0+255),w,b
  2382  0033B4  0BFB               	andlw	251
  2383  0033B6  6ECA               	movwf	4042,c	;volatile
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;pwm.c: 25: TMR2 = 0;
  2387  0033B8  0E00               	movlw	0
  2388  0033BA  6ECC               	movwf	4044,c	;volatile
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  2392  0033BC  929E               	bcf	3998,1,c	;volatile
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  2396  0033BE  929D               	bcf	3997,1,c	;volatile
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  2400  0033C0  84CA               	bsf	4042,2,c	;volatile
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;pwm.c: 29: OpenPWM1(period);
  2404  0033C2  0100               	movlb	0	; () banked
  2405  0033C4  5161               	movf	PWM_init1@period& (0+255),w,b
  2406  0033C6  EC42  F01A         	call	_OpenPWM1
  2407                           
  2408                           ;pwm.c: 31: return;
  2409  0033CA  0012               	return	
  2410  0033CC                     __end_of_PWM_init1:
  2411                           	opt stack 0
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           intcon	equ	0xFF2
  2417                           intcon2	equ	0xFF1
  2418                           intcon3	equ	0xFF0
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _OpenPWM1 *****************
  2426 ;; Defined at:
  2427 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  period          1    wreg     unsigned char 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  period          1    0[BANK0 ] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2441 ;;      Params:         0       0       0       0       0       0       0       0       0
  2442 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2444 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2445 ;;Total ram usage:        1 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    4
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_PWM_init1
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text7
  2456  003484                     __ptext7:
  2457                           	opt stack 0
  2458  003484                     _OpenPWM1:
  2459                           	opt stack 24
  2460                           
  2461                           ;incstack = 0
  2462                           ;OpenPWM1@period stored from wreg
  2463  003484  0100               	movlb	0	; () banked
  2464  003486  6F60               	movwf	OpenPWM1@period& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467  003488  0E0C               	movlw	12
  2468  00348A  12BD               	iorwf	4029,f,c	;volatile
  2469                           
  2470                           ; BSR set to: 0
  2471  00348C  9494               	bcf	3988,2,c	;volatile
  2472                           
  2473                           ; BSR set to: 0
  2474  00348E  94CA               	bcf	4042,2,c	;volatile
  2475                           
  2476                           ; BSR set to: 0
  2477  003490  C060  FFCB         	movff	OpenPWM1@period,4043	;volatile
  2478                           
  2479                           ; BSR set to: 0
  2480  003494  84CA               	bsf	4042,2,c	;volatile
  2481                           
  2482                           ; BSR set to: 0
  2483  003496  0012               	return	
  2484  003498                     __end_of_OpenPWM1:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           intcon	equ	0xFF2
  2491                           intcon2	equ	0xFF1
  2492                           intcon3	equ	0xFF0
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           fsr1l	equ	0xFE1
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _BT_Init *****************
  2500 ;; Defined at:
  2501 ;;		line 16 in file "Bluetooth.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  nameBT         18   14[BANK0 ] unsigned char [18]
  2506 ;; Return value:  Size  Location     Type
  2507 ;;		None               void
  2508 ;; Registers used:
  2509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2515 ;;      Params:         0       0       0       0       0       0       0       0       0
  2516 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2518 ;;      Totals:         0      18       0       0       0       0       0       0       0
  2519 ;;Total ram usage:       18 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    8
  2522 ;; This function calls:
  2523 ;;		_Pause_seg
  2524 ;;		_SendBlueToothCommand
  2525 ;;		_UART1_Init
  2526 ;; This function is called by:
  2527 ;;		_Inicializa_Driveby
  2528 ;;		_EstadoBluetooth
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text8
  2533  0023B8                     __ptext8:
  2534                           	opt stack 0
  2535  0023B8                     _BT_Init:
  2536                           	opt stack 21
  2537                           
  2538                           ;Bluetooth.c: 18: UART1_Init(51);
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;incstack = 0
  2542  0023B8  0E33               	movlw	51
  2543  0023BA  EC37  F01A         	call	_UART1_Init
  2544                           
  2545                           ;Bluetooth.c: 21: Pause_seg(1);
  2546  0023BE  0E01               	movlw	1
  2547  0023C0  EC83  F017         	call	_Pause_seg
  2548                           
  2549                           ;Bluetooth.c: 22: char nameBT[18] = {
  2550                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  2551                           ;Bluetooth.c: 24: };
  2552  0023C4  EE21  F06E         	lfsr	2,BT_Init@F5671
  2553  0023C8  EE10  F06E         	lfsr	1,BT_Init@nameBT
  2554  0023CC  0E12               	movlw	18
  2555  0023CE                     u4241:
  2556  0023CE  CFDE FFE6          	movff	postinc2,postinc1
  2557  0023D2  2EE8               	decfsz	wreg,f,c
  2558  0023D4  D7FC               	goto	u4241
  2559                           
  2560                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  2561  0023D6  0E7F               	movlw	high STR_1
  2562  0023D8  0100               	movlb	0	; () banked
  2563  0023DA  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2564  0023DC  0EBB               	movlw	low STR_1
  2565  0023DE  0100               	movlb	0	; () banked
  2566  0023E0  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2567  0023E2  0E00               	movlw	0
  2568  0023E4  0100               	movlb	0	; () banked
  2569  0023E6  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2570  0023E8  0E0B               	movlw	11
  2571  0023EA  0100               	movlb	0	; () banked
  2572  0023EC  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2573  0023EE  EC2A  F01A         	call	_SendBlueToothCommand	;wreg free
  2574                           
  2575                           ;Bluetooth.c: 29: Pause_seg(1);
  2576  0023F2  0E01               	movlw	1
  2577  0023F4  EC83  F017         	call	_Pause_seg
  2578                           
  2579                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  2580  0023F8  0100               	movlb	0	; () banked
  2581  0023FA  0E00               	movlw	high BT_Init@nameBT
  2582  0023FC  0100               	movlb	0	; () banked
  2583  0023FE  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2584  002400  0100               	movlb	0	; () banked
  2585  002402  0E6E               	movlw	low BT_Init@nameBT
  2586  002404  0100               	movlb	0	; () banked
  2587  002406  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2588  002408  0E00               	movlw	0
  2589  00240A  0100               	movlb	0	; () banked
  2590  00240C  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2591  00240E  0E12               	movlw	18
  2592  002410  0100               	movlb	0	; () banked
  2593  002412  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2594  002414  EC2A  F01A         	call	_SendBlueToothCommand	;wreg free
  2595                           
  2596                           ;Bluetooth.c: 33: Pause_seg(2);
  2597  002418  0E02               	movlw	2
  2598  00241A  EC83  F017         	call	_Pause_seg
  2599                           
  2600                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  2601  00241E  0E7F               	movlw	high STR_2
  2602  002420  0100               	movlb	0	; () banked
  2603  002422  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2604  002424  0E67               	movlw	low STR_2
  2605  002426  0100               	movlb	0	; () banked
  2606  002428  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2607  00242A  0E00               	movlw	0
  2608  00242C  0100               	movlb	0	; () banked
  2609  00242E  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2610  002430  0E0E               	movlw	14
  2611  002432  0100               	movlb	0	; () banked
  2612  002434  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2613  002436  EC2A  F01A         	call	_SendBlueToothCommand	;wreg free
  2614                           
  2615                           ;Bluetooth.c: 36: Pause_seg(2);
  2616  00243A  0E02               	movlw	2
  2617  00243C  EC83  F017         	call	_Pause_seg
  2618                           
  2619                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  2620  002440  0E7F               	movlw	high STR_3
  2621  002442  0100               	movlb	0	; () banked
  2622  002444  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2623  002446  0EDD               	movlw	low STR_3
  2624  002448  0100               	movlb	0	; () banked
  2625  00244A  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2626  00244C  0E00               	movlw	0
  2627  00244E  0100               	movlb	0	; () banked
  2628  002450  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2629  002452  0E08               	movlw	8
  2630  002454  0100               	movlb	0	; () banked
  2631  002456  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2632  002458  EC2A  F01A         	call	_SendBlueToothCommand	;wreg free
  2633                           
  2634                           ;Bluetooth.c: 41: Pause_seg(2);
  2635  00245C  0E02               	movlw	2
  2636  00245E  EC83  F017         	call	_Pause_seg
  2637                           
  2638                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  2639  002462  0E7F               	movlw	high STR_3
  2640  002464  0100               	movlb	0	; () banked
  2641  002466  6F6B               	movwf	(SendBlueToothCommand@command+1)& (0+255),b
  2642  002468  0EDD               	movlw	low STR_3
  2643  00246A  0100               	movlb	0	; () banked
  2644  00246C  6F6A               	movwf	SendBlueToothCommand@command& (0+255),b
  2645  00246E  0E00               	movlw	0
  2646  002470  0100               	movlb	0	; () banked
  2647  002472  6F6D               	movwf	(SendBlueToothCommand@total+1)& (0+255),b
  2648  002474  0E08               	movlw	8
  2649  002476  0100               	movlb	0	; () banked
  2650  002478  6F6C               	movwf	SendBlueToothCommand@total& (0+255),b
  2651  00247A  EC2A  F01A         	call	_SendBlueToothCommand	;wreg free
  2652                           
  2653                           ;Bluetooth.c: 44: Pause_seg(2);
  2654  00247E  0E02               	movlw	2
  2655  002480  EC83  F017         	call	_Pause_seg
  2656                           
  2657                           ;Bluetooth.c: 45: return;
  2658  002484  0012               	return	
  2659  002486                     __end_of_BT_Init:
  2660                           	opt stack 0
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           intcon	equ	0xFF2
  2666                           intcon2	equ	0xFF1
  2667                           intcon3	equ	0xFF0
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           postinc1	equ	0xFE6
  2671                           postdec1	equ	0xFE5
  2672                           fsr1l	equ	0xFE1
  2673                           postinc2	equ	0xFDE
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _SendBlueToothCommand *****************
  2677 ;; Defined at:
  2678 ;;		line 48 in file "Bluetooth.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  command         2   10[BANK0 ] PTR const unsigned char 
  2681 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2682 ;;		 -> BT_Init@nameBT(18), 
  2683 ;;  total           2   12[BANK0 ] unsigned int 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;		None               void
  2688 ;; Registers used:
  2689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2695 ;;      Params:         0       4       0       0       0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2698 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2699 ;;Total ram usage:        4 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    7
  2702 ;; This function calls:
  2703 ;;		_putSTRINGU1
  2704 ;; This function is called by:
  2705 ;;		_BT_Init
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text9
  2710  003454                     __ptext9:
  2711                           	opt stack 0
  2712  003454                     _SendBlueToothCommand:
  2713                           	opt stack 21
  2714                           
  2715                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  2716                           
  2717                           ;incstack = 0
  2718  003454  0100               	movlb	0	; () banked
  2719  003456  C06B  F063         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  2720  00345A  0100               	movlb	0	; () banked
  2721  00345C  C06A  F062         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  2722  003460  C06C  F064         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  2723  003464  C06D  F065         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  2724  003468  EC08  F013         	call	_putSTRINGU1	;wreg free
  2725                           
  2726                           ;Bluetooth.c: 50: return;
  2727  00346C  0012               	return	
  2728  00346E                     __end_of_SendBlueToothCommand:
  2729                           	opt stack 0
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           intcon	equ	0xFF2
  2735                           intcon2	equ	0xFF1
  2736                           intcon3	equ	0xFF0
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postinc1	equ	0xFE6
  2740                           postdec1	equ	0xFE5
  2741                           fsr1l	equ	0xFE1
  2742                           postinc2	equ	0xFDE
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function _putSTRINGU1 *****************
  2746 ;; Defined at:
  2747 ;;		line 18 in file "UART1.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  dato            2    2[BANK0 ] PTR const unsigned char 
  2750 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2751 ;;		 -> BT_Init@nameBT(18), 
  2752 ;;  total           2    4[BANK0 ] unsigned int 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  cont            1    9[BANK0 ] unsigned char 
  2755 ;;  last            1    8[BANK0 ] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;		None               void
  2758 ;; Registers used:
  2759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2765 ;;      Params:         0       4       0       0       0       0       0       0       0
  2766 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2767 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2768 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2769 ;;Total ram usage:        8 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    6
  2772 ;; This function calls:
  2773 ;;		_putcTxU1
  2774 ;; This function is called by:
  2775 ;;		_SendBlueToothCommand
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text10
  2780  002610                     __ptext10:
  2781                           	opt stack 0
  2782  002610                     _putSTRINGU1:
  2783                           	opt stack 21
  2784                           
  2785                           ;UART1.c: 19: unsigned char cont,last;
  2786                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2787                           
  2788                           ;incstack = 0
  2789  002610  0E00               	movlw	0
  2790  002612  0100               	movlb	0	; () banked
  2791  002614  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2792  002616  0E00               	movlw	0
  2793  002618  0100               	movlb	0	; () banked
  2794  00261A  6F68               	movwf	putSTRINGU1@last& (0+255),b
  2795  00261C  D025               	goto	l3346
  2796  00261E                     l3340:
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2800  00261E  0100               	movlb	0	; () banked
  2801  002620  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2802  002622  0D01               	mullw	1
  2803  002624  0100               	movlb	0	; () banked
  2804  002626  C062  F066         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2805  00262A  0100               	movlb	0	; () banked
  2806  00262C  C063  F067         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2807  002630  50F3               	movf	prodl,w,c
  2808  002632  0100               	movlb	0	; () banked
  2809  002634  2766               	addwf	??_putSTRINGU1& (0+255),f,b
  2810  002636  50F4               	movf	prodh,w,c
  2811  002638  0100               	movlb	0	; () banked
  2812  00263A  2367               	addwfc	(??_putSTRINGU1+1)& (0+255),f,b
  2813  00263C  C066  FFF6         	movff	??_putSTRINGU1,tblptrl
  2814  002640  C067  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2815  002644  6AF8               	clrf	tblptru,c
  2816  002646  0E07               	movlw	(high __ramtop+-1)
  2817  002648  64F7               	cpfsgt	tblptrh,c
  2818  00264A  D003               	bra	u3147
  2819  00264C  0008               	tblrd		*
  2820  00264E  50F5               	movf	tablat,w,c
  2821  002650  D005               	bra	u3140
  2822  002652                     u3147:
  2823  002652  CFF6 FFE9          	movff	tblptrl,fsr0l
  2824  002656  CFF7 FFEA          	movff	tblptrh,fsr0h
  2825  00265A  50EF               	movf	indf0,w,c
  2826  00265C                     u3140:
  2827  00265C  0900               	iorlw	0
  2828  00265E  A4D8               	btfss	status,2,c
  2829  002660  C069  F068         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2830  002664  0100               	movlb	0	; () banked
  2831  002666  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  2832  002668                     l3346:
  2833                           
  2834                           ; BSR set to: 0
  2835  002668  0100               	movlb	0	; () banked
  2836  00266A  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2837  00266C  0100               	movlb	0	; () banked
  2838  00266E  6F66               	movwf	??_putSTRINGU1& (0+255),b
  2839  002670  6B67               	clrf	(??_putSTRINGU1+1)& (0+255),b
  2840  002672  0100               	movlb	0	; () banked
  2841  002674  5164               	movf	putSTRINGU1@total& (0+255),w,b
  2842  002676  0100               	movlb	0	; () banked
  2843  002678  5D66               	subwf	??_putSTRINGU1& (0+255),w,b
  2844  00267A  0100               	movlb	0	; () banked
  2845  00267C  5165               	movf	(putSTRINGU1@total+1)& (0+255),w,b
  2846  00267E  0100               	movlb	0	; () banked
  2847  002680  5967               	subwfb	(??_putSTRINGU1+1)& (0+255),w,b
  2848  002682  A0D8               	btfss	status,0,c
  2849  002684  D7CC               	goto	l3340
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;UART1.c: 23: }
  2853                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2854                           
  2855                           ; BSR set to: 0
  2856  002686  0E00               	movlw	0
  2857  002688  0100               	movlb	0	; () banked
  2858  00268A  6F69               	movwf	putSTRINGU1@cont& (0+255),b
  2859  00268C  D019               	goto	l3356
  2860  00268E                     l3350:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;UART1.c: 26: putcTxU1(*dato++);
  2864  00268E  0100               	movlb	0	; () banked
  2865  002690  C062  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2866  002694  0100               	movlb	0	; () banked
  2867  002696  C063  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2868  00269A  6AF8               	clrf	tblptru,c
  2869  00269C  0E07               	movlw	(high __ramtop+-1)
  2870  00269E  64F7               	cpfsgt	tblptrh,c
  2871  0026A0  D003               	bra	u3177
  2872  0026A2  0008               	tblrd		*
  2873  0026A4  50F5               	movf	tablat,w,c
  2874  0026A6  D005               	bra	u3170
  2875  0026A8                     u3177:
  2876  0026A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  2877  0026AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  2878  0026B0  50EF               	movf	indf0,w,c
  2879  0026B2                     u3170:
  2880  0026B2  EC68  F01A         	call	_putcTxU1
  2881  0026B6  0100               	movlb	0	; () banked
  2882  0026B8  4B62               	infsnz	putSTRINGU1@dato& (0+255),f,b
  2883  0026BA  2B63               	incf	(putSTRINGU1@dato+1)& (0+255),f,b
  2884                           
  2885                           ; BSR set to: 0
  2886  0026BC  0100               	movlb	0	; () banked
  2887  0026BE  2B69               	incf	putSTRINGU1@cont& (0+255),f,b
  2888  0026C0                     l3356:
  2889                           
  2890                           ; BSR set to: 0
  2891  0026C0  0100               	movlb	0	; () banked
  2892  0026C2  5169               	movf	putSTRINGU1@cont& (0+255),w,b
  2893  0026C4  0100               	movlb	0	; () banked
  2894  0026C6  5D68               	subwf	putSTRINGU1@last& (0+255),w,b
  2895  0026C8  A0D8               	btfss	status,0,c
  2896                           
  2897                           ; BSR set to: 0
  2898                           
  2899                           ; BSR set to: 0
  2900  0026CA  0012               	return	
  2901  0026CC  D7E0               	goto	l3350
  2902  0026CE                     __end_of_putSTRINGU1:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon2	equ	0xFF1
  2912                           intcon3	equ	0xFF0
  2913                           indf0	equ	0xFEF
  2914                           postinc0	equ	0xFEE
  2915                           fsr0h	equ	0xFEA
  2916                           fsr0l	equ	0xFE9
  2917                           wreg	equ	0xFE8
  2918                           postinc1	equ	0xFE6
  2919                           postdec1	equ	0xFE5
  2920                           fsr1l	equ	0xFE1
  2921                           postinc2	equ	0xFDE
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _putcTxU1 *****************
  2925 ;; Defined at:
  2926 ;;		line 12 in file "UART1.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  character       1    wreg     unsigned char 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  character       1    1[BANK0 ] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;		None               void
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0
  2941 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2943 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2944 ;;Total ram usage:        1 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    5
  2947 ;; This function calls:
  2948 ;;		_WriteUSART
  2949 ;; This function is called by:
  2950 ;;		_putSTRINGU1
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text11
  2955  0034D0                     __ptext11:
  2956                           	opt stack 0
  2957  0034D0                     _putcTxU1:
  2958                           	opt stack 21
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;incstack = 0
  2962                           ;putcTxU1@character stored from wreg
  2963  0034D0  0100               	movlb	0	; () banked
  2964  0034D2  6F61               	movwf	putcTxU1@character& (0+255),b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;UART1.c: 14: WriteUSART(character);
  2968  0034D4  0100               	movlb	0	; () banked
  2969  0034D6  5161               	movf	putcTxU1@character& (0+255),w,b
  2970  0034D8  EC4C  F01A         	call	_WriteUSART
  2971  0034DC                     l229:
  2972  0034DC  B2AC               	btfsc	4012,1,c	;volatile
  2973  0034DE  0012               	return	
  2974  0034E0  D7FD               	goto	l229
  2975  0034E2                     __end_of_putcTxU1:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           intcon2	equ	0xFF1
  2985                           intcon3	equ	0xFF0
  2986                           indf0	equ	0xFEF
  2987                           postinc0	equ	0xFEE
  2988                           fsr0h	equ	0xFEA
  2989                           fsr0l	equ	0xFE9
  2990                           wreg	equ	0xFE8
  2991                           postinc1	equ	0xFE6
  2992                           postdec1	equ	0xFE5
  2993                           fsr1l	equ	0xFE1
  2994                           postinc2	equ	0xFDE
  2995                           status	equ	0xFD8
  2996                           
  2997 ;; *************** function _Pause_seg *****************
  2998 ;; Defined at:
  2999 ;;		line 18 in file "Retardos.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  x               1    wreg     unsigned char 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  x               1    5[BANK0 ] unsigned char 
  3004 ;;  i               1    6[BANK0 ] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;		None               void
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0
  3015 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3017 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3018 ;;Total ram usage:        2 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    5
  3021 ;; This function calls:
  3022 ;;		_Pause_ms
  3023 ;; This function is called by:
  3024 ;;		_BT_Init
  3025 ;;		_Inicializa_Driveby
  3026 ;;		_EstadoBluetooth
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text12
  3031  002F06                     __ptext12:
  3032                           	opt stack 0
  3033  002F06                     _Pause_seg:
  3034                           	opt stack 24
  3035                           
  3036                           ;incstack = 0
  3037                           ;Pause_seg@x stored from wreg
  3038  002F06  0100               	movlb	0	; () banked
  3039  002F08  6F65               	movwf	Pause_seg@x& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;Retardos.c: 19: unsigned char i=0;
  3043  002F0A  0E00               	movlw	0
  3044  002F0C  0100               	movlb	0	; () banked
  3045  002F0E  6F66               	movwf	Pause_seg@i& (0+255),b
  3046                           
  3047                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  3048  002F10  0E00               	movlw	0
  3049  002F12  0100               	movlb	0	; () banked
  3050  002F14  6F66               	movwf	Pause_seg@i& (0+255),b
  3051  002F16  D022               	goto	l3736
  3052  002F18                     l3732:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  3056  002F18  0E00               	movlw	0
  3057  002F1A  0100               	movlb	0	; () banked
  3058  002F1C  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3059  002F1E  0EFA               	movlw	250
  3060  002F20  0100               	movlb	0	; () banked
  3061  002F22  6F60               	movwf	Pause_ms@x& (0+255),b
  3062  002F24  EC25  F018         	call	_Pause_ms	;wreg free
  3063  002F28  0E00               	movlw	0
  3064  002F2A  0100               	movlb	0	; () banked
  3065  002F2C  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3066  002F2E  0EFA               	movlw	250
  3067  002F30  0100               	movlb	0	; () banked
  3068  002F32  6F60               	movwf	Pause_ms@x& (0+255),b
  3069  002F34  EC25  F018         	call	_Pause_ms	;wreg free
  3070                           
  3071                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  3072  002F38  0E00               	movlw	0
  3073  002F3A  0100               	movlb	0	; () banked
  3074  002F3C  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3075  002F3E  0EFA               	movlw	250
  3076  002F40  0100               	movlb	0	; () banked
  3077  002F42  6F60               	movwf	Pause_ms@x& (0+255),b
  3078  002F44  EC25  F018         	call	_Pause_ms	;wreg free
  3079  002F48  0E00               	movlw	0
  3080  002F4A  0100               	movlb	0	; () banked
  3081  002F4C  6F61               	movwf	(Pause_ms@x+1)& (0+255),b
  3082  002F4E  0EFA               	movlw	250
  3083  002F50  0100               	movlb	0	; () banked
  3084  002F52  6F60               	movwf	Pause_ms@x& (0+255),b
  3085  002F54  EC25  F018         	call	_Pause_ms	;wreg free
  3086  002F58  0100               	movlb	0	; () banked
  3087  002F5A  2B66               	incf	Pause_seg@i& (0+255),f,b
  3088  002F5C                     l3736:
  3089                           
  3090                           ; BSR set to: 0
  3091  002F5C  0100               	movlb	0	; () banked
  3092  002F5E  5166               	movf	Pause_seg@i& (0+255),w,b
  3093  002F60  0100               	movlb	0	; () banked
  3094  002F62  5D65               	subwf	Pause_seg@x& (0+255),w,b
  3095  002F64  A0D8               	btfss	status,0,c
  3096                           
  3097                           ; BSR set to: 0
  3098                           
  3099                           ; BSR set to: 0
  3100  002F66  0012               	return	
  3101  002F68  D7D7               	goto	l3732
  3102  002F6A                     __end_of_Pause_seg:
  3103                           	opt stack 0
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon	equ	0xFF2
  3111                           intcon2	equ	0xFF1
  3112                           intcon3	equ	0xFF0
  3113                           indf0	equ	0xFEF
  3114                           postinc0	equ	0xFEE
  3115                           fsr0h	equ	0xFEA
  3116                           fsr0l	equ	0xFE9
  3117                           wreg	equ	0xFE8
  3118                           postinc1	equ	0xFE6
  3119                           postdec1	equ	0xFE5
  3120                           fsr1l	equ	0xFE1
  3121                           postinc2	equ	0xFDE
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _Pause_ms *****************
  3125 ;; Defined at:
  3126 ;;		line 11 in file "Retardos.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  x               2    0[BANK0 ] unsigned int 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  i               2    3[BANK0 ] unsigned int 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3140 ;;      Params:         0       2       0       0       0       0       0       0       0
  3141 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3142 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3143 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3144 ;;Total ram usage:        5 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    4
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_Pause_seg
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text13
  3155  00304A                     __ptext13:
  3156                           	opt stack 0
  3157  00304A                     _Pause_ms:
  3158                           	opt stack 24
  3159                           
  3160                           ;Retardos.c: 12: unsigned int i=0;
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  00304A  0E00               	movlw	0
  3165  00304C  0100               	movlb	0	; () banked
  3166  00304E  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3167  003050  0E00               	movlw	0
  3168  003052  0100               	movlb	0	; () banked
  3169  003054  6F63               	movwf	Pause_ms@i& (0+255),b
  3170                           
  3171                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  3172  003056  0E00               	movlw	0
  3173  003058  0100               	movlb	0	; () banked
  3174  00305A  6F64               	movwf	(Pause_ms@i+1)& (0+255),b
  3175  00305C  0E00               	movlw	0
  3176  00305E  0100               	movlb	0	; () banked
  3177  003060  6F63               	movwf	Pause_ms@i& (0+255),b
  3178  003062  D00B               	goto	l208
  3179  003064                     l3360:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  3183  003064  0E03               	movlw	3
  3184  003066  0100               	movlb	0	; () banked
  3185  003068  6F62               	movwf	??_Pause_ms& (0+255),b
  3186  00306A  0E98               	movlw	152
  3187  00306C                     u5297:
  3188  00306C  2EE8               	decfsz	wreg,f,c
  3189  00306E  D7FE               	goto	u5297
  3190  003070  2F62               	decfsz	??_Pause_ms& (0+255),f,b
  3191  003072  D7FC               	goto	u5297
  3192  003074  0100               	movlb	0	; () banked
  3193  003076  4B63               	infsnz	Pause_ms@i& (0+255),f,b
  3194  003078  2B64               	incf	(Pause_ms@i+1)& (0+255),f,b
  3195  00307A                     l208:
  3196                           
  3197                           ; BSR set to: 0
  3198  00307A  0100               	movlb	0	; () banked
  3199  00307C  5163               	movf	Pause_ms@i& (0+255),w,b
  3200  00307E  0100               	movlb	0	; () banked
  3201  003080  5D60               	subwf	Pause_ms@x& (0+255),w,b
  3202  003082  0100               	movlb	0	; () banked
  3203  003084  5164               	movf	(Pause_ms@i+1)& (0+255),w,b
  3204  003086  0100               	movlb	0	; () banked
  3205  003088  5961               	subwfb	(Pause_ms@x+1)& (0+255),w,b
  3206  00308A  A0D8               	btfss	status,0,c
  3207                           
  3208                           ; BSR set to: 0
  3209                           
  3210                           ; BSR set to: 0
  3211  00308C  0012               	return	
  3212  00308E  D7EA               	goto	l3360
  3213  003090                     __end_of_Pause_ms:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           intcon3	equ	0xFF0
  3224                           indf0	equ	0xFEF
  3225                           postinc0	equ	0xFEE
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           postinc1	equ	0xFE6
  3230                           postdec1	equ	0xFE5
  3231                           fsr1l	equ	0xFE1
  3232                           postinc2	equ	0xFDE
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _Comando_Tablet *****************
  3236 ;; Defined at:
  3237 ;;		line 123 in file "Funciones_Db.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  sensed          2  135[BANK0 ] int 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        2 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    9
  3258 ;; This function calls:
  3259 ;;		_Lcd_Clear
  3260 ;;		_Lcd_Set_Cursor
  3261 ;;		_Lcd_Write_Integer
  3262 ;;		_Lcd_Write_String
  3263 ;;		_PWM_DutyCycle1
  3264 ;;		_PWM_DutyCycle2
  3265 ;;		_clrBufferUSART
  3266 ;;		_getCNY70Value
  3267 ;;		_putcBluetoothInt
  3268 ;;		_putcBluetoothString
  3269 ;; This function is called by:
  3270 ;;		_main
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text14
  3275  001982                     __ptext14:
  3276                           	opt stack 0
  3277  001982                     _Comando_Tablet:
  3278                           	opt stack 21
  3279                           
  3280                           ;Funciones_Db.c: 125: int sensed=0;
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;incstack = 0
  3284  001982  0E00               	movlw	0
  3285  001984  0100               	movlb	0	; () banked
  3286  001986  6FE8               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  3287  001988  0E00               	movlw	0
  3288  00198A  0100               	movlb	0	; () banked
  3289  00198C  6FE7               	movwf	Comando_Tablet@sensed& (0+255),b
  3290                           
  3291                           ;Funciones_Db.c: 126: switch (BluetoothDato[1]) {
  3292  00198E  D092               	goto	l4592
  3293  001990                     l4542:
  3294                           
  3295                           ;Funciones_Db.c: 128: Lcd_Clear();
  3296  001990  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3297                           
  3298                           ;Funciones_Db.c: 129: Lcd_Set_Cursor(1, 1);
  3299  001994  0E01               	movlw	1
  3300  001996  0100               	movlb	0	; () banked
  3301  001998  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3302  00199A  0E01               	movlw	1
  3303  00199C  ECAC  F016         	call	_Lcd_Set_Cursor
  3304                           
  3305                           ;Funciones_Db.c: 130: Lcd_Write_String("1");
  3306  0019A0  0E7F               	movlw	high (STR_20+15)
  3307  0019A2  0100               	movlb	0	; () banked
  3308  0019A4  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3309  0019A6  0E55               	movlw	low (STR_20+15)
  3310  0019A8  0100               	movlb	0	; () banked
  3311  0019AA  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3312  0019AC  EC65  F014         	call	_Lcd_Write_String	;wreg free
  3313                           
  3314                           ;Funciones_Db.c: 131: break;
  3315  0019B0  D093               	goto	l4594
  3316  0019B2                     l4548:
  3317                           
  3318                           ;Funciones_Db.c: 133: Lcd_Clear();
  3319  0019B2  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3320                           
  3321                           ;Funciones_Db.c: 134: Lcd_Set_Cursor(1, 1);
  3322  0019B6  0E01               	movlw	1
  3323  0019B8  0100               	movlb	0	; () banked
  3324  0019BA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3325  0019BC  0E01               	movlw	1
  3326  0019BE  ECAC  F016         	call	_Lcd_Set_Cursor
  3327                           
  3328                           ;Funciones_Db.c: 135: Lcd_Write_String("2");
  3329  0019C2  0E7F               	movlw	high (STR_21+16)
  3330  0019C4  0100               	movlb	0	; () banked
  3331  0019C6  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3332  0019C8  0E33               	movlw	low (STR_21+16)
  3333  0019CA  0100               	movlb	0	; () banked
  3334  0019CC  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3335  0019CE  EC65  F014         	call	_Lcd_Write_String	;wreg free
  3336                           
  3337                           ;Funciones_Db.c: 136: break;
  3338  0019D2  D082               	goto	l4594
  3339  0019D4                     l4554:
  3340                           
  3341                           ;Funciones_Db.c: 139: Lcd_Clear();
  3342  0019D4  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3343                           
  3344                           ;Funciones_Db.c: 140: Lcd_Set_Cursor(1, 1);
  3345  0019D8  0E01               	movlw	1
  3346  0019DA  0100               	movlb	0	; () banked
  3347  0019DC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3348  0019DE  0E01               	movlw	1
  3349  0019E0  ECAC  F016         	call	_Lcd_Set_Cursor
  3350                           
  3351                           ;Funciones_Db.c: 142: Lcd_Write_String("3");
  3352  0019E4  0E7F               	movlw	high STR_14
  3353  0019E6  0100               	movlb	0	; () banked
  3354  0019E8  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3355  0019EA  0EFC               	movlw	low STR_14
  3356  0019EC  0100               	movlb	0	; () banked
  3357  0019EE  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3358  0019F0  EC65  F014         	call	_Lcd_Write_String	;wreg free
  3359                           
  3360                           ;Funciones_Db.c: 143: break;
  3361  0019F4  D071               	goto	l4594
  3362  0019F6                     l194:
  3363                           
  3364                           ; BSR set to: 1
  3365                           ;Funciones_Db.c: 148: PORTAbits.RA1 = ~ PORTAbits.RA1;
  3366  0019F6  7280               	btg	3968,1,c	;volatile
  3367                           
  3368                           ; BSR set to: 1
  3369                           ;Funciones_Db.c: 149: sensed = getCNY70Value();
  3370  0019F8  EC43  F012         	call	_getCNY70Value	;wreg free
  3371  0019FC  0100               	movlb	0	; () banked
  3372  0019FE  C060  F0E7         	movff	?_getCNY70Value,Comando_Tablet@sensed
  3373  001A02  0100               	movlb	0	; () banked
  3374  001A04  C061  F0E8         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  3375                           
  3376                           ;Funciones_Db.c: 150: Lcd_Clear();
  3377  001A08  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3378                           
  3379                           ;Funciones_Db.c: 151: Lcd_Set_Cursor(1,1);
  3380  001A0C  0E01               	movlw	1
  3381  001A0E  0100               	movlb	0	; () banked
  3382  001A10  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3383  001A12  0E01               	movlw	1
  3384  001A14  ECAC  F016         	call	_Lcd_Set_Cursor
  3385                           
  3386                           ;Funciones_Db.c: 152: Lcd_Write_Integer(sensed);
  3387  001A18  C0E7  F0CF         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  3388  001A1C  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  3389  001A20  ECAF  F018         	call	_Lcd_Write_Integer	;wreg free
  3390                           
  3391                           ;Funciones_Db.c: 153: putcBluetoothInt(sensed);
  3392  001A24  C0E7  F0CF         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  3393  001A28  C0E8  F0D0         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  3394  001A2C  ECF5  F014         	call	_putcBluetoothInt	;wreg free
  3395                           
  3396                           ;Funciones_Db.c: 154: putcBluetoothString("\n");
  3397  001A30  0E7F               	movlw	high (STR_2+13)
  3398  001A32  0100               	movlb	0	; () banked
  3399  001A34  6F68               	movwf	(putcBluetoothString@a+1)& (0+255),b
  3400  001A36  0E74               	movlw	low (STR_2+13)
  3401  001A38  0100               	movlb	0	; () banked
  3402  001A3A  6F67               	movwf	putcBluetoothString@a& (0+255),b
  3403  001A3C  ECB1  F014         	call	_putcBluetoothString	;wreg free
  3404                           
  3405                           ;Funciones_Db.c: 155: break;
  3406  001A40  D04B               	goto	l4594
  3407  001A42                     l195:
  3408                           
  3409                           ; BSR set to: 1
  3410                           ;Funciones_Db.c: 157: PORTAbits.RA0 = ~ PORTAbits.RA0;
  3411  001A42  7080               	btg	3968,0,c	;volatile
  3412                           
  3413                           ; BSR set to: 1
  3414                           ;Funciones_Db.c: 158: Lcd_Clear();
  3415  001A44  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3416                           
  3417                           ;Funciones_Db.c: 159: Lcd_Set_Cursor(1, 1);
  3418  001A48  0E01               	movlw	1
  3419  001A4A  0100               	movlb	0	; () banked
  3420  001A4C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3421  001A4E  0E01               	movlw	1
  3422  001A50  ECAC  F016         	call	_Lcd_Set_Cursor
  3423                           
  3424                           ;Funciones_Db.c: 160: Lcd_Write_Integer(BluetoothDato[3]);
  3425  001A54  0101               	movlb	1	; () banked
  3426  001A56  0100               	movlb	0	; () banked
  3427  001A58  C12B  F0CF         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  3428  001A5C  0100               	movlb	0	; () banked
  3429  001A5E  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3430  001A60  ECAF  F018         	call	_Lcd_Write_Integer	;wreg free
  3431                           
  3432                           ;Funciones_Db.c: 161: Lcd_Set_Cursor(2, 1);
  3433  001A64  0E01               	movlw	1
  3434  001A66  0100               	movlb	0	; () banked
  3435  001A68  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3436  001A6A  0E02               	movlw	2
  3437  001A6C  ECAC  F016         	call	_Lcd_Set_Cursor
  3438                           
  3439                           ;Funciones_Db.c: 162: Lcd_Write_Integer(BluetoothDato[4]);
  3440  001A70  0101               	movlb	1	; () banked
  3441  001A72  0100               	movlb	0	; () banked
  3442  001A74  C12C  F0CF         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  3443  001A78  0100               	movlb	0	; () banked
  3444  001A7A  6BD0               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  3445  001A7C  ECAF  F018         	call	_Lcd_Write_Integer	;wreg free
  3446                           
  3447                           ;Funciones_Db.c: 165: PWM_DutyCycle1(BluetoothDato[3]);
  3448  001A80  0101               	movlb	1	; () banked
  3449  001A82  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  3450  001A84  ECF5  F015         	call	_PWM_DutyCycle1
  3451                           
  3452                           ;Funciones_Db.c: 166: PWM_DutyCycle2(BluetoothDato[4]);
  3453  001A88  0101               	movlb	1	; () banked
  3454  001A8A  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  3455  001A8C  ECB7  F015         	call	_PWM_DutyCycle2
  3456                           
  3457                           ;Funciones_Db.c: 167: break;
  3458  001A90  D023               	goto	l4594
  3459  001A92                     l4584:
  3460                           
  3461                           ;Funciones_Db.c: 169: Lcd_Clear();
  3462  001A92  EC71  F01A         	call	_Lcd_Clear	;wreg free
  3463                           
  3464                           ;Funciones_Db.c: 170: Lcd_Set_Cursor(1, 1);
  3465  001A96  0E01               	movlw	1
  3466  001A98  0100               	movlb	0	; () banked
  3467  001A9A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  3468  001A9C  0E01               	movlw	1
  3469  001A9E  ECAC  F016         	call	_Lcd_Set_Cursor
  3470                           
  3471                           ;Funciones_Db.c: 171: Lcd_Write_String("Default");
  3472  001AA2  0E7F               	movlw	high STR_16
  3473  001AA4  0100               	movlb	0	; () banked
  3474  001AA6  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  3475  001AA8  0EE6               	movlw	low STR_16
  3476  001AAA  0100               	movlb	0	; () banked
  3477  001AAC  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  3478  001AAE  EC65  F014         	call	_Lcd_Write_String	;wreg free
  3479                           
  3480                           ;Funciones_Db.c: 172: break;
  3481  001AB2  D012               	goto	l4594
  3482  001AB4                     l4592:
  3483  001AB4  0101               	movlb	1	; () banked
  3484  001AB6  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  3485                           
  3486                           ; Switch size 1, requested type "space"
  3487                           ; Number of cases is 5, Range of values is 1 to 5
  3488                           ; switch strategies available:
  3489                           ; Name         Instructions Cycles
  3490                           ; simple_byte           16     9 (average)
  3491                           ;	Chosen strategy is simple_byte
  3492  001AB8  0A01               	xorlw	1	; case 1
  3493  001ABA  B4D8               	btfsc	status,2,c
  3494  001ABC  D769               	goto	l4542
  3495  001ABE  0A03               	xorlw	3	; case 2
  3496  001AC0  B4D8               	btfsc	status,2,c
  3497  001AC2  D777               	goto	l4548
  3498  001AC4  0A01               	xorlw	1	; case 3
  3499  001AC6  B4D8               	btfsc	status,2,c
  3500  001AC8  D785               	goto	l4554
  3501  001ACA  0A07               	xorlw	7	; case 4
  3502  001ACC  B4D8               	btfsc	status,2,c
  3503  001ACE  D793               	goto	l194
  3504  001AD0  0A01               	xorlw	1	; case 5
  3505  001AD2  B4D8               	btfsc	status,2,c
  3506  001AD4  D7B6               	goto	l195
  3507  001AD6  D7DD               	goto	l4584
  3508  001AD8                     l4594:
  3509                           
  3510                           ;Funciones_Db.c: 174: clrBufferUSART();
  3511  001AD8  EC8D  F018         	call	_clrBufferUSART	;wreg free
  3512                           
  3513                           ;Funciones_Db.c: 175: return;
  3514  001ADC  0012               	return	
  3515  001ADE                     __end_of_Comando_Tablet:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           intcon2	equ	0xFF1
  3525                           intcon3	equ	0xFF0
  3526                           indf0	equ	0xFEF
  3527                           postinc0	equ	0xFEE
  3528                           fsr0h	equ	0xFEA
  3529                           fsr0l	equ	0xFE9
  3530                           wreg	equ	0xFE8
  3531                           postinc1	equ	0xFE6
  3532                           postdec1	equ	0xFE5
  3533                           fsr1l	equ	0xFE1
  3534                           postinc2	equ	0xFDE
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _putcBluetoothString *****************
  3538 ;; Defined at:
  3539 ;;		line 90 in file "Bluetooth.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  a               2    7[BANK0 ] PTR unsigned char 
  3542 ;;		 -> STR_15(2), 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  i               2   11[BANK0 ] int 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;		None               void
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3554 ;;      Params:         0       2       0       0       0       0       0       0       0
  3555 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3556 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3557 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3558 ;;Total ram usage:        6 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    6
  3561 ;; This function calls:
  3562 ;;		_UART1_Init
  3563 ;;		_WriteUSART
  3564 ;; This function is called by:
  3565 ;;		_Comando_Tablet
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text15
  3570  002962                     __ptext15:
  3571                           	opt stack 0
  3572  002962                     _putcBluetoothString:
  3573                           	opt stack 23
  3574                           
  3575                           ;Bluetooth.c: 92: int i;
  3576                           ;Bluetooth.c: 93: UART1_Init(51);
  3577                           
  3578                           ;incstack = 0
  3579  002962  0E33               	movlw	51
  3580  002964  EC37  F01A         	call	_UART1_Init
  3581                           
  3582                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  3583  002968  0E00               	movlw	0
  3584  00296A  0100               	movlb	0	; () banked
  3585  00296C  6F6C               	movwf	(putcBluetoothString@i+1)& (0+255),b
  3586  00296E  0E00               	movlw	0
  3587  002970  0100               	movlb	0	; () banked
  3588  002972  6F6B               	movwf	putcBluetoothString@i& (0+255),b
  3589  002974  D01C               	goto	l4102
  3590  002976                     l4098:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  3594  002976  0100               	movlb	0	; () banked
  3595  002978  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3596  00297C  0100               	movlb	0	; () banked
  3597  00297E  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3598  002982  0100               	movlb	0	; () banked
  3599  002984  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3600  002986  0100               	movlb	0	; () banked
  3601  002988  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3602  00298A  0100               	movlb	0	; () banked
  3603  00298C  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3604  00298E  0100               	movlb	0	; () banked
  3605  002990  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3606  002992  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3607  002996  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3608  00299A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3609  00299A  6AF8               	clrf	tblptru,c
  3610  00299C                     	endif
  3611  00299C                     	if	0	;tblptru may be non-zero
  3612  00299C                     	endif
  3613  00299C  0008               	tblrd		*
  3614  00299E  50F5               	movf	tablat,w,c
  3615  0029A0  EC4C  F01A         	call	_WriteUSART
  3616  0029A4                     l59:
  3617  0029A4  A2AC               	btfss	4012,1,c	;volatile
  3618  0029A6  D7FE               	goto	l59
  3619  0029A8  0100               	movlb	0	; () banked
  3620  0029AA  4B6B               	infsnz	putcBluetoothString@i& (0+255),f,b
  3621  0029AC  2B6C               	incf	(putcBluetoothString@i+1)& (0+255),f,b
  3622  0029AE                     l4102:
  3623                           
  3624                           ; BSR set to: 0
  3625  0029AE  0100               	movlb	0	; () banked
  3626  0029B0  C067  F069         	movff	putcBluetoothString@a,??_putcBluetoothString
  3627  0029B4  0100               	movlb	0	; () banked
  3628  0029B6  C068  F06A         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  3629  0029BA  0100               	movlb	0	; () banked
  3630  0029BC  516B               	movf	putcBluetoothString@i& (0+255),w,b
  3631  0029BE  0100               	movlb	0	; () banked
  3632  0029C0  2769               	addwf	??_putcBluetoothString& (0+255),f,b
  3633  0029C2  0100               	movlb	0	; () banked
  3634  0029C4  516C               	movf	(putcBluetoothString@i+1)& (0+255),w,b
  3635  0029C6  0100               	movlb	0	; () banked
  3636  0029C8  236A               	addwfc	(??_putcBluetoothString+1)& (0+255),f,b
  3637  0029CA  C069  FFF6         	movff	??_putcBluetoothString,tblptrl
  3638  0029CE  C06A  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  3639  0029D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3640  0029D2  6AF8               	clrf	tblptru,c
  3641  0029D4                     	endif
  3642  0029D4                     	if	0	;tblptru may be non-zero
  3643  0029D4                     	endif
  3644  0029D4  0008               	tblrd		*
  3645  0029D6  50F5               	movf	tablat,w,c
  3646  0029D8  0900               	iorlw	0
  3647  0029DA  A4D8               	btfss	status,2,c
  3648  0029DC  D7CC               	goto	l4098
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;Bluetooth.c: 98: }
  3652                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3653                           
  3654                           ; BSR set to: 0
  3655  0029DE  0E4F               	movlw	79
  3656  0029E0  16AB               	andwf	4011,f,c	;volatile
  3657                           
  3658                           ; BSR set to: 0
  3659  0029E2  9AAC               	bcf	4012,5,c	;volatile
  3660  0029E4  0ECF               	movlw	207
  3661  0029E6  169D               	andwf	3997,f,c	;volatile
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;Bluetooth.c: 100: return;
  3667  0029E8  0012               	return	
  3668  0029EA                     __end_of_putcBluetoothString:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           intcon2	equ	0xFF1
  3678                           intcon3	equ	0xFF0
  3679                           indf0	equ	0xFEF
  3680                           postinc0	equ	0xFEE
  3681                           fsr0h	equ	0xFEA
  3682                           fsr0l	equ	0xFE9
  3683                           wreg	equ	0xFE8
  3684                           postinc1	equ	0xFE6
  3685                           postdec1	equ	0xFE5
  3686                           fsr1l	equ	0xFE1
  3687                           postinc2	equ	0xFDE
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _putcBluetoothInt *****************
  3691 ;; Defined at:
  3692 ;;		line 102 in file "Bluetooth.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  a               2  111[BANK0 ] int 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  s              20  113[BANK0 ] unsigned char [20]
  3697 ;;  i               2  133[BANK0 ] int 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;		None               void
  3700 ;; Registers used:
  3701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3707 ;;      Params:         0       2       0       0       0       0       0       0       0
  3708 ;;      Locals:         0      22       0       0       0       0       0       0       0
  3709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3710 ;;      Totals:         0      24       0       0       0       0       0       0       0
  3711 ;;Total ram usage:       24 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    8
  3714 ;; This function calls:
  3715 ;;		_UART1_Init
  3716 ;;		_WriteUSART
  3717 ;;		_sprintf
  3718 ;; This function is called by:
  3719 ;;		_Comando_Tablet
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text16
  3724  0029EA                     __ptext16:
  3725                           	opt stack 0
  3726  0029EA                     _putcBluetoothInt:
  3727                           	opt stack 21
  3728                           
  3729                           ;Bluetooth.c: 104: int i;
  3730                           ;Bluetooth.c: 105: unsigned char s[20];
  3731                           ;Bluetooth.c: 106: UART1_Init(51);
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;incstack = 0
  3735  0029EA  0E33               	movlw	51
  3736  0029EC  EC37  F01A         	call	_UART1_Init
  3737                           
  3738                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  3739  0029F0  0100               	movlb	0	; () banked
  3740  0029F2  0E00               	movlw	high putcBluetoothInt@s
  3741  0029F4  0100               	movlb	0	; () banked
  3742  0029F6  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  3743  0029F8  0100               	movlb	0	; () banked
  3744  0029FA  0ED1               	movlw	low putcBluetoothInt@s
  3745  0029FC  0100               	movlb	0	; () banked
  3746  0029FE  6F9F               	movwf	sprintf@sp& (0+255),b
  3747  002A00  0E7F               	movlw	high (STR_18+10)
  3748  002A02  0100               	movlb	0	; () banked
  3749  002A04  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  3750  002A06  0EB8               	movlw	low (STR_18+10)
  3751  002A08  0100               	movlb	0	; () banked
  3752  002A0A  6FA1               	movwf	sprintf@f& (0+255),b
  3753  002A0C  C0CF  F0A3         	movff	putcBluetoothInt@a,?_sprintf+4
  3754  002A10  C0D0  F0A4         	movff	putcBluetoothInt@a+1,?_sprintf+5
  3755  002A14  EC0E  F000         	call	_sprintf	;wreg free
  3756                           
  3757                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  3758  002A18  0E00               	movlw	0
  3759  002A1A  0100               	movlb	0	; () banked
  3760  002A1C  6FE6               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  3761  002A1E  0E00               	movlw	0
  3762  002A20  0100               	movlb	0	; () banked
  3763  002A22  6FE5               	movwf	putcBluetoothInt@i& (0+255),b
  3764  002A24  D012               	goto	l4120
  3765  002A26                     l4116:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  3769  002A26  0100               	movlb	0	; () banked
  3770  002A28  0ED1               	movlw	low putcBluetoothInt@s
  3771  002A2A  0100               	movlb	0	; () banked
  3772  002A2C  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3773  002A2E  6ED9               	movwf	fsr2l,c
  3774  002A30  0100               	movlb	0	; () banked
  3775  002A32  0E00               	movlw	high putcBluetoothInt@s
  3776  002A34  0100               	movlb	0	; () banked
  3777  002A36  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3778  002A38  6EDA               	movwf	fsr2h,c
  3779  002A3A  50DF               	movf	indf2,w,c
  3780  002A3C  EC4C  F01A         	call	_WriteUSART
  3781  002A40                     l68:
  3782  002A40  A2AC               	btfss	4012,1,c	;volatile
  3783  002A42  D7FE               	goto	l68
  3784  002A44  0100               	movlb	0	; () banked
  3785  002A46  4BE5               	infsnz	putcBluetoothInt@i& (0+255),f,b
  3786  002A48  2BE6               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  3787  002A4A                     l4120:
  3788                           
  3789                           ; BSR set to: 0
  3790  002A4A  0100               	movlb	0	; () banked
  3791  002A4C  0ED1               	movlw	low putcBluetoothInt@s
  3792  002A4E  0100               	movlb	0	; () banked
  3793  002A50  25E5               	addwf	putcBluetoothInt@i& (0+255),w,b
  3794  002A52  6ED9               	movwf	fsr2l,c
  3795  002A54  0100               	movlb	0	; () banked
  3796  002A56  0E00               	movlw	high putcBluetoothInt@s
  3797  002A58  0100               	movlb	0	; () banked
  3798  002A5A  21E6               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  3799  002A5C  6EDA               	movwf	fsr2h,c
  3800  002A5E  50DF               	movf	indf2,w,c
  3801  002A60  A4D8               	btfss	status,2,c
  3802  002A62  D7E1               	goto	l4116
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;Bluetooth.c: 112: }
  3806                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  3807                           
  3808                           ; BSR set to: 0
  3809  002A64  0E4F               	movlw	79
  3810  002A66  16AB               	andwf	4011,f,c	;volatile
  3811                           
  3812                           ; BSR set to: 0
  3813  002A68  9AAC               	bcf	4012,5,c	;volatile
  3814  002A6A  0ECF               	movlw	207
  3815  002A6C  169D               	andwf	3997,f,c	;volatile
  3816                           
  3817                           ; BSR set to: 0
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;Bluetooth.c: 114: return;
  3821  002A6E  0012               	return	
  3822  002A70                     __end_of_putcBluetoothInt:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           intcon2	equ	0xFF1
  3832                           intcon3	equ	0xFF0
  3833                           indf0	equ	0xFEF
  3834                           postinc0	equ	0xFEE
  3835                           fsr0h	equ	0xFEA
  3836                           fsr0l	equ	0xFE9
  3837                           wreg	equ	0xFE8
  3838                           postinc1	equ	0xFE6
  3839                           postdec1	equ	0xFE5
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _WriteUSART *****************
  3848 ;; Defined at:
  3849 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  data            1    wreg     unsigned char 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  data            1    0[BANK0 ] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;		None               void
  3856 ;; Registers used:
  3857 ;;		wreg
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0
  3864 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3866 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3867 ;;Total ram usage:        1 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    4
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_putcBluetoothString
  3874 ;;		_putcBluetoothInt
  3875 ;;		_putcTxU1
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text17
  3880  003498                     __ptext17:
  3881                           	opt stack 0
  3882  003498                     _WriteUSART:
  3883                           	opt stack 21
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;incstack = 0
  3887                           ;WriteUSART@data stored from wreg
  3888  003498  0100               	movlb	0	; () banked
  3889  00349A  6F60               	movwf	WriteUSART@data& (0+255),b
  3890                           
  3891                           ; BSR set to: 0
  3892  00349C  ACAC               	btfss	4012,6,c	;volatile
  3893  00349E  D003               	goto	l3080
  3894                           
  3895                           ; BSR set to: 0
  3896  0034A0  90AC               	bcf	4012,0,c	;volatile
  3897  0034A2  B254               	btfsc	_USART_Status,1,c
  3898                           
  3899                           ; BSR set to: 0
  3900  0034A4  80AC               	bsf	4012,0,c	;volatile
  3901  0034A6                     l3080:
  3902                           
  3903                           ; BSR set to: 0
  3904  0034A6  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
  3905                           
  3906                           ; BSR set to: 0
  3907  0034AA  0012               	return	
  3908  0034AC                     __end_of_WriteUSART:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           intcon3	equ	0xFF0
  3919                           indf0	equ	0xFEF
  3920                           postinc0	equ	0xFEE
  3921                           fsr0h	equ	0xFEA
  3922                           fsr0l	equ	0xFE9
  3923                           wreg	equ	0xFE8
  3924                           postinc1	equ	0xFE6
  3925                           postdec1	equ	0xFE5
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _UART1_Init *****************
  3934 ;; Defined at:
  3935 ;;		line 5 in file "UART1.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  bdr             1    wreg     unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  bdr             1    6[BANK0 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        1 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    5
  3956 ;; This function calls:
  3957 ;;		_OpenUSART
  3958 ;; This function is called by:
  3959 ;;		_BT_Init
  3960 ;;		_putcBluetoothString
  3961 ;;		_putcBluetoothInt
  3962 ;;		_main
  3963 ;;		_EstadoBluetooth
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text18
  3968  00346E                     __ptext18:
  3969                           	opt stack 0
  3970  00346E                     _UART1_Init:
  3971                           	opt stack 25
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;incstack = 0
  3975                           ;UART1_Init@bdr stored from wreg
  3976  00346E  0100               	movlb	0	; () banked
  3977  003470  6F66               	movwf	UART1_Init@bdr& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3981  003472  0100               	movlb	0	; () banked
  3982  003474  C066  F060         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3983  003478  0100               	movlb	0	; () banked
  3984  00347A  6B61               	clrf	(OpenUSART@spbrg+1)& (0+255),b
  3985  00347C  0E7C               	movlw	124
  3986  00347E  EC38  F015         	call	_OpenUSART
  3987  003482  0012               	return	
  3988  003484                     __end_of_UART1_Init:
  3989                           	opt stack 0
  3990                           tblptru	equ	0xFF8
  3991                           tblptrh	equ	0xFF7
  3992                           tblptrl	equ	0xFF6
  3993                           tablat	equ	0xFF5
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           intcon	equ	0xFF2
  3997                           intcon2	equ	0xFF1
  3998                           intcon3	equ	0xFF0
  3999                           indf0	equ	0xFEF
  4000                           postinc0	equ	0xFEE
  4001                           fsr0h	equ	0xFEA
  4002                           fsr0l	equ	0xFE9
  4003                           wreg	equ	0xFE8
  4004                           postinc1	equ	0xFE6
  4005                           postdec1	equ	0xFE5
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _OpenUSART *****************
  4014 ;; Defined at:
  4015 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  config          1    wreg     unsigned char 
  4018 ;;  spbrg           2    0[BANK0 ] unsigned int 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  config          1    5[BANK0 ] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, status,2
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4030 ;;      Params:         0       2       0       0       0       0       0       0       0
  4031 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4032 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4033 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4034 ;;Total ram usage:        6 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    4
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_UART1_Init
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text19
  4045  002A70                     __ptext19:
  4046                           	opt stack 0
  4047  002A70                     _OpenUSART:
  4048                           	opt stack 25
  4049                           
  4050                           ;incstack = 0
  4051                           ;OpenUSART@config stored from wreg
  4052  002A70  0100               	movlb	0	; () banked
  4053  002A72  6F65               	movwf	OpenUSART@config& (0+255),b
  4054                           
  4055                           ; BSR set to: 0
  4056  002A74  0E00               	movlw	0
  4057  002A76  6EAC               	movwf	4012,c	;volatile
  4058  002A78  0E00               	movlw	0
  4059  002A7A  6EAB               	movwf	4011,c	;volatile
  4060                           
  4061                           ; BSR set to: 0
  4062  002A7C  0100               	movlb	0	; () banked
  4063  002A7E  B165               	btfsc	OpenUSART@config& (0+255),0,b
  4064                           
  4065                           ; BSR set to: 0
  4066  002A80  88AC               	bsf	4012,4,c	;volatile
  4067                           
  4068                           ; BSR set to: 0
  4069                           
  4070                           ; BSR set to: 0
  4071  002A82  0100               	movlb	0	; () banked
  4072  002A84  A365               	btfss	OpenUSART@config& (0+255),1,b
  4073  002A86  D002               	goto	l3374
  4074                           
  4075                           ; BSR set to: 0
  4076  002A88  8CAC               	bsf	4012,6,c	;volatile
  4077  002A8A  8CAB               	bsf	4011,6,c	;volatile
  4078  002A8C                     l3374:
  4079                           
  4080                           ; BSR set to: 0
  4081  002A8C  0100               	movlb	0	; () banked
  4082  002A8E  B565               	btfsc	OpenUSART@config& (0+255),2,b
  4083                           
  4084                           ; BSR set to: 0
  4085  002A90  8EAC               	bsf	4012,7,c	;volatile
  4086                           
  4087                           ; BSR set to: 0
  4088                           
  4089                           ; BSR set to: 0
  4090  002A92  0100               	movlb	0	; () banked
  4091  002A94  A765               	btfss	OpenUSART@config& (0+255),3,b
  4092  002A96  D002               	goto	l623
  4093                           
  4094                           ; BSR set to: 0
  4095  002A98  88AB               	bsf	4011,4,c	;volatile
  4096  002A9A  D001               	goto	l3382
  4097  002A9C                     l623:
  4098                           
  4099                           ; BSR set to: 0
  4100  002A9C  8AAB               	bsf	4011,5,c	;volatile
  4101  002A9E                     l3382:
  4102                           
  4103                           ; BSR set to: 0
  4104  002A9E  0100               	movlb	0	; () banked
  4105  002AA0  B965               	btfsc	OpenUSART@config& (0+255),4,b
  4106                           
  4107                           ; BSR set to: 0
  4108  002AA2  84AC               	bsf	4012,2,c	;volatile
  4109                           
  4110                           ; BSR set to: 0
  4111  002AA4  989E               	bcf	3998,4,c	;volatile
  4112                           
  4113                           ; BSR set to: 0
  4114  002AA6  0100               	movlb	0	; () banked
  4115  002AA8  BB65               	btfsc	OpenUSART@config& (0+255),5,b
  4116                           
  4117                           ; BSR set to: 0
  4118  002AAA  86AB               	bsf	4011,3,c	;volatile
  4119                           
  4120                           ; BSR set to: 0
  4121                           
  4122                           ; BSR set to: 0
  4123  002AAC  0100               	movlb	0	; () banked
  4124  002AAE  AD65               	btfss	OpenUSART@config& (0+255),6,b
  4125  002AB0  D002               	goto	l627
  4126                           
  4127                           ; BSR set to: 0
  4128  002AB2  8A9D               	bsf	3997,5,c	;volatile
  4129  002AB4  D001               	goto	l628
  4130  002AB6                     l627:
  4131                           
  4132                           ; BSR set to: 0
  4133  002AB6  9A9D               	bcf	3997,5,c	;volatile
  4134  002AB8                     l628:
  4135                           
  4136                           ; BSR set to: 0
  4137  002AB8  9A9E               	bcf	3998,5,c	;volatile
  4138                           
  4139                           ; BSR set to: 0
  4140  002ABA  0100               	movlb	0	; () banked
  4141  002ABC  AF65               	btfss	OpenUSART@config& (0+255),7,b
  4142  002ABE  D002               	goto	l629
  4143                           
  4144                           ; BSR set to: 0
  4145  002AC0  889D               	bsf	3997,4,c	;volatile
  4146  002AC2  D001               	goto	l630
  4147  002AC4                     l629:
  4148                           
  4149                           ; BSR set to: 0
  4150  002AC4  989D               	bcf	3997,4,c	;volatile
  4151  002AC6                     l630:
  4152                           
  4153                           ; BSR set to: 0
  4154  002AC6  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4155                           
  4156                           ; BSR set to: 0
  4157  002ACA  0100               	movlb	0	; () banked
  4158  002ACC  C061  F062         	movff	OpenUSART@spbrg+1,??_OpenUSART
  4159  002AD0  C062  F063         	movff	??_OpenUSART,??_OpenUSART+1
  4160  002AD4  0100               	movlb	0	; () banked
  4161  002AD6  6B64               	clrf	(??_OpenUSART+2)& (0+255),b
  4162  002AD8  0100               	movlb	0	; () banked
  4163  002ADA  5163               	movf	(??_OpenUSART+1)& (0+255),w,b
  4164  002ADC  6EB0               	movwf	4016,c	;volatile
  4165                           
  4166                           ; BSR set to: 0
  4167  002ADE  8AAC               	bsf	4012,5,c	;volatile
  4168                           
  4169                           ; BSR set to: 0
  4170  002AE0  8EAB               	bsf	4011,7,c	;volatile
  4171                           
  4172                           ; BSR set to: 0
  4173  002AE2  9C94               	bcf	3988,6,c	;volatile
  4174                           
  4175                           ; BSR set to: 0
  4176  002AE4  8E94               	bsf	3988,7,c	;volatile
  4177                           
  4178                           ; BSR set to: 0
  4179  002AE6  B8AC               	btfsc	4012,4,c	;volatile
  4180                           
  4181                           ; BSR set to: 0
  4182  002AE8  BEAC               	btfsc	4012,7,c	;volatile
  4183  002AEA  D001               	goto	l632
  4184                           
  4185                           ; BSR set to: 0
  4186  002AEC  8C94               	bsf	3988,6,c	;volatile
  4187  002AEE                     l632:
  4188                           
  4189                           ; BSR set to: 0
  4190  002AEE  0012               	return	
  4191  002AF0                     __end_of_OpenUSART:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           intcon3	equ	0xFF0
  4202                           indf0	equ	0xFEF
  4203                           postinc0	equ	0xFEE
  4204                           fsr0h	equ	0xFEA
  4205                           fsr0l	equ	0xFE9
  4206                           wreg	equ	0xFE8
  4207                           postinc1	equ	0xFE6
  4208                           postdec1	equ	0xFE5
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _getCNY70Value *****************
  4217 ;; Defined at:
  4218 ;;		line 3 in file "cny70.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2    0[BANK0 ] int 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4232 ;;      Params:         0       2       0       0       0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4235 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4236 ;;Total ram usage:        2 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    4
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_Comando_Tablet
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text20
  4247  002486                     __ptext20:
  4248                           	opt stack 0
  4249  002486                     _getCNY70Value:
  4250                           	opt stack 25
  4251                           
  4252                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;incstack = 0
  4256  002486  B081               	btfsc	3969,0,c	;volatile
  4257  002488  A281               	btfss	3969,1,c	;volatile
  4258  00248A  D005               	goto	l446
  4259  00248C  A481               	btfss	3969,2,c	;volatile
  4260  00248E  A681               	btfss	3969,3,c	;volatile
  4261  002490  D002               	goto	l446
  4262  002492  B881               	btfsc	3969,4,c	;volatile
  4263  002494  D054               	goto	l4304
  4264  002496                     l446:
  4265                           
  4266                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4267  002496  B081               	btfsc	3969,0,c	;volatile
  4268  002498  B281               	btfsc	3969,1,c	;volatile
  4269  00249A  D005               	goto	l449
  4270  00249C  B481               	btfsc	3969,2,c	;volatile
  4271  00249E  A681               	btfss	3969,3,c	;volatile
  4272  0024A0  D002               	goto	l449
  4273  0024A2  B881               	btfsc	3969,4,c	;volatile
  4274  0024A4  D03A               	goto	u4720
  4275  0024A6                     l449:
  4276                           
  4277                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4278  0024A6  A081               	btfss	3969,0,c	;volatile
  4279  0024A8  A281               	btfss	3969,1,c	;volatile
  4280  0024AA  D00A               	goto	l451
  4281  0024AC  B481               	btfsc	3969,2,c	;volatile
  4282  0024AE  A681               	btfss	3969,3,c	;volatile
  4283  0024B0  D007               	goto	l451
  4284  0024B2  A881               	btfss	3969,4,c	;volatile
  4285  0024B4  D005               	goto	l451
  4286  0024B6                     
  4287                           ;cny70.c: 10: return -2;
  4288  0024B6  0EFF               	movlw	255
  4289  0024B8  0100               	movlb	0	; () banked
  4290  0024BA  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4291  0024BC  0EFE               	movlw	254
  4292  0024BE  D043               	goto	L5
  4293  0024C0                     l451:
  4294                           
  4295                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4296  0024C0  B081               	btfsc	3969,0,c	;volatile
  4297  0024C2  A281               	btfss	3969,1,c	;volatile
  4298  0024C4  D005               	goto	l453
  4299  0024C6  B481               	btfsc	3969,2,c	;volatile
  4300  0024C8  B681               	btfsc	3969,3,c	;volatile
  4301  0024CA  D002               	goto	l453
  4302  0024CC  B881               	btfsc	3969,4,c	;volatile
  4303  0024CE  D032               	goto	u4770
  4304  0024D0                     l453:
  4305                           
  4306                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  4307  0024D0  B081               	btfsc	3969,0,c	;volatile
  4308  0024D2  A281               	btfss	3969,1,c	;volatile
  4309  0024D4  D005               	goto	l455
  4310  0024D6  B481               	btfsc	3969,2,c	;volatile
  4311  0024D8  A681               	btfss	3969,3,c	;volatile
  4312  0024DA  D002               	goto	l455
  4313  0024DC  A881               	btfss	3969,4,c	;volatile
  4314  0024DE  D008               	goto	u4620
  4315  0024E0                     l455:
  4316                           
  4317                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  4318  0024E0  B081               	btfsc	3969,0,c	;volatile
  4319  0024E2  A281               	btfss	3969,1,c	;volatile
  4320  0024E4  D00A               	goto	l457
  4321  0024E6  B481               	btfsc	3969,2,c	;volatile
  4322  0024E8  B681               	btfsc	3969,3,c	;volatile
  4323  0024EA  D007               	goto	l457
  4324  0024EC  B881               	btfsc	3969,4,c	;volatile
  4325  0024EE  D005               	goto	l457
  4326  0024F0                     u4620:
  4327                           
  4328                           ;cny70.c: 16: return 2;
  4329  0024F0  0E00               	movlw	0
  4330  0024F2  0100               	movlb	0	; () banked
  4331  0024F4  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4332  0024F6  0E02               	movlw	2
  4333  0024F8  D026               	goto	L5
  4334  0024FA                     l457:
  4335                           
  4336                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4337  0024FA  A081               	btfss	3969,0,c	;volatile
  4338  0024FC  B281               	btfsc	3969,1,c	;volatile
  4339  0024FE  D005               	goto	l459
  4340  002500  B481               	btfsc	3969,2,c	;volatile
  4341  002502  A681               	btfss	3969,3,c	;volatile
  4342  002504  D002               	goto	l459
  4343  002506  B881               	btfsc	3969,4,c	;volatile
  4344  002508  D7D6               	goto	L6
  4345  00250A                     l459:
  4346                           
  4347                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  4348  00250A  B081               	btfsc	3969,0,c	;volatile
  4349  00250C  B281               	btfsc	3969,1,c	;volatile
  4350  00250E  D00A               	goto	l461
  4351  002510  A481               	btfss	3969,2,c	;volatile
  4352  002512  A681               	btfss	3969,3,c	;volatile
  4353  002514  D007               	goto	l461
  4354  002516  A881               	btfss	3969,4,c	;volatile
  4355  002518  D005               	goto	l461
  4356  00251A                     u4720:
  4357                           
  4358                           ;cny70.c: 20: return -1;
  4359  00251A  0100               	movlb	0	; () banked
  4360  00251C  6960               	setf	?_getCNY70Value& (0+255),b
  4361  00251E  0100               	movlb	0	; () banked
  4362  002520  6961               	setf	(?_getCNY70Value+1)& (0+255),b
  4363  002522  D013               	goto	l447
  4364  002524                     l461:
  4365                           
  4366                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  4367  002524  B081               	btfsc	3969,0,c	;volatile
  4368  002526  A281               	btfss	3969,1,c	;volatile
  4369  002528  D00A               	goto	l4304
  4370  00252A  A481               	btfss	3969,2,c	;volatile
  4371  00252C  B681               	btfsc	3969,3,c	;volatile
  4372  00252E  D007               	goto	l4304
  4373  002530  A881               	btfss	3969,4,c	;volatile
  4374  002532  D005               	goto	l4304
  4375  002534                     u4770:
  4376                           
  4377                           ;cny70.c: 22: return 1;
  4378  002534  0E00               	movlw	0
  4379  002536  0100               	movlb	0	; () banked
  4380  002538  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4381  00253A  0E01               	movlw	1
  4382  00253C  D004               	goto	L5
  4383  00253E                     l4304:
  4384                           
  4385                           ;cny70.c: 23: else
  4386                           ;cny70.c: 24: return 0;
  4387  00253E  0E00               	movlw	0
  4388  002540  0100               	movlb	0	; () banked
  4389  002542  6F61               	movwf	(?_getCNY70Value+1)& (0+255),b
  4390  002544  0E00               	movlw	0
  4391  002546                     L5:
  4392  002546  0100               	movlb	0	; () banked
  4393  002548  6F60               	movwf	?_getCNY70Value& (0+255),b
  4394  00254A                     l447:
  4395                           
  4396                           ; BSR set to: 0
  4397  00254A  0012               	return	
  4398  00254C                     __end_of_getCNY70Value:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           intcon2	equ	0xFF1
  4408                           intcon3	equ	0xFF0
  4409                           indf0	equ	0xFEF
  4410                           postinc0	equ	0xFEE
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           postinc1	equ	0xFE6
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _clrBufferUSART *****************
  4424 ;; Defined at:
  4425 ;;		line 68 in file "Bluetooth.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  i               2    0[BANK0 ] int 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0
  4440 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4442 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4443 ;;Total ram usage:        2 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    4
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_Inicializa_Driveby
  4450 ;;		_Comando_Tablet
  4451 ;;		_main
  4452 ;;		_CheckTX
  4453 ;;		_EstadoBluetooth
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text21
  4458  00311A                     __ptext21:
  4459                           	opt stack 0
  4460  00311A                     _clrBufferUSART:
  4461                           	opt stack 26
  4462                           
  4463                           ;Bluetooth.c: 69: int i;
  4464                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;incstack = 0
  4468  00311A  0E00               	movlw	0
  4469  00311C  0100               	movlb	0	; () banked
  4470  00311E  6F61               	movwf	(clrBufferUSART@i+1)& (0+255),b
  4471  003120  0E00               	movlw	0
  4472  003122  0100               	movlb	0	; () banked
  4473  003124  6F60               	movwf	clrBufferUSART@i& (0+255),b
  4474  003126                     
  4475                           ; BSR set to: 0
  4476  003126  0100               	movlb	0	; () banked
  4477  003128  5161               	movf	(clrBufferUSART@i+1)& (0+255),w,b
  4478  00312A  0A80               	xorlw	128
  4479  00312C  0F80               	addlw	-128
  4480  00312E  0E14               	movlw	20
  4481  003130  B4D8               	btfsc	status,2,c
  4482  003132  5D60               	subwf	clrBufferUSART@i& (0+255),w,b
  4483  003134  B0D8               	btfsc	status,0,c
  4484  003136  D012               	goto	l54
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  4488                           
  4489                           ; BSR set to: 0
  4490                           
  4491                           ; BSR set to: 0
  4492  003138  0101               	movlb	1	; () banked
  4493  00313A  0E28               	movlw	low _BluetoothDato
  4494  00313C  0100               	movlb	0	; () banked
  4495  00313E  2560               	addwf	clrBufferUSART@i& (0+255),w,b
  4496  003140  6ED9               	movwf	fsr2l,c
  4497  003142  0101               	movlb	1	; () banked
  4498  003144  0E01               	movlw	high _BluetoothDato
  4499  003146  0100               	movlb	0	; () banked
  4500  003148  2161               	addwfc	(clrBufferUSART@i+1)& (0+255),w,b
  4501  00314A  6EDA               	movwf	fsr2h,c
  4502  00314C  0E00               	movlw	0
  4503  00314E  6EDF               	movwf	indf2,c
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;Bluetooth.c: 72: cad = 0;
  4507  003150  0E00               	movlw	0
  4508  003152  6E55               	movwf	_cad,c
  4509                           
  4510                           ; BSR set to: 0
  4511  003154  0100               	movlb	0	; () banked
  4512  003156  4B60               	infsnz	clrBufferUSART@i& (0+255),f,b
  4513  003158  2B61               	incf	(clrBufferUSART@i+1)& (0+255),f,b
  4514  00315A  D7E5               	goto	L7
  4515  00315C                     l54:
  4516                           
  4517                           ; BSR set to: 0
  4518  00315C  0012               	return	
  4519  00315E                     __end_of_clrBufferUSART:
  4520                           	opt stack 0
  4521                           tblptru	equ	0xFF8
  4522                           tblptrh	equ	0xFF7
  4523                           tblptrl	equ	0xFF6
  4524                           tablat	equ	0xFF5
  4525                           prodh	equ	0xFF4
  4526                           prodl	equ	0xFF3
  4527                           intcon	equ	0xFF2
  4528                           intcon2	equ	0xFF1
  4529                           intcon3	equ	0xFF0
  4530                           indf0	equ	0xFEF
  4531                           postinc0	equ	0xFEE
  4532                           fsr0h	equ	0xFEA
  4533                           fsr0l	equ	0xFE9
  4534                           wreg	equ	0xFE8
  4535                           postinc1	equ	0xFE6
  4536                           postdec1	equ	0xFE5
  4537                           fsr1l	equ	0xFE1
  4538                           indf2	equ	0xFDF
  4539                           postinc2	equ	0xFDE
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _PWM_DutyCycle2 *****************
  4545 ;; Defined at:
  4546 ;;		line 55 in file "pwm.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  percentageDu    1    wreg     unsigned char 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4551 ;;  DC              2   64[BANK0 ] unsigned int 
  4552 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg, status,2, status,0, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0
  4563 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4564 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4565 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4566 ;;Total ram usage:        9 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    6
  4569 ;; This function calls:
  4570 ;;		_SetDCPWM2
  4571 ;;		___ftmul
  4572 ;;		___fttol
  4573 ;;		___lbtoft
  4574 ;; This function is called by:
  4575 ;;		_Comando_Tablet
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text22
  4580  002B6E                     __ptext22:
  4581                           	opt stack 0
  4582  002B6E                     _PWM_DutyCycle2:
  4583                           	opt stack 23
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;incstack = 0
  4587                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  4588  002B6E  0100               	movlb	0	; () banked
  4589  002B70  6F9F               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  4593  002B72  0E00               	movlw	0
  4594  002B74  0100               	movlb	0	; () banked
  4595  002B76  6FA1               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  4596  002B78  0E00               	movlw	0
  4597  002B7A  0100               	movlb	0	; () banked
  4598  002B7C  6FA0               	movwf	PWM_DutyCycle2@DC& (0+255),b
  4599  002B7E  0E00               	movlw	0
  4600  002B80  0100               	movlb	0	; () banked
  4601  002B82  6F9E               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  4602  002B84  0E00               	movlw	0
  4603  002B86  0100               	movlb	0	; () banked
  4604  002B88  6F9D               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  4608  002B8A  0EAE               	movlw	174
  4609  002B8C  0100               	movlb	0	; () banked
  4610  002B8E  6F77               	movwf	___ftmul@f2& (0+255),b
  4611  002B90  0E23               	movlw	35
  4612  002B92  0100               	movlb	0	; () banked
  4613  002B94  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4614  002B96  0E41               	movlw	65
  4615  002B98  0100               	movlb	0	; () banked
  4616  002B9A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4617  002B9C  0100               	movlb	0	; () banked
  4618  002B9E  519F               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  4619  002BA0  EC78  F019         	call	___lbtoft
  4620  002BA4  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4621  002BA8  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4622  002BAC  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4623  002BB0  EC0F  F00C         	call	___ftmul	;wreg free
  4624  002BB4  C074  F08A         	movff	?___ftmul,___fttol@f1
  4625  002BB8  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4626  002BBC  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4627  002BC0  EC19  F00E         	call	___fttol	;wreg free
  4628  002BC4  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle2
  4629  002BC8  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  4630  002BCC  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  4631  002BD0  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  4632  002BD4  C099  F0A0         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  4633  002BD8  C09A  F0A1         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  4634                           
  4635                           ;pwm.c: 60: SetDCPWM2(DC);
  4636  002BDC  C0A0  F060         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  4637  002BE0  C0A1  F061         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  4638  002BE4  ECDD  F017         	call	_SetDCPWM2	;wreg free
  4639                           
  4640                           ;pwm.c: 61: return;
  4641  002BE8  0012               	return	
  4642  002BEA                     __end_of_PWM_DutyCycle2:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           intcon2	equ	0xFF1
  4652                           intcon3	equ	0xFF0
  4653                           indf0	equ	0xFEF
  4654                           postinc0	equ	0xFEE
  4655                           fsr0h	equ	0xFEA
  4656                           fsr0l	equ	0xFE9
  4657                           wreg	equ	0xFE8
  4658                           postinc1	equ	0xFE6
  4659                           postdec1	equ	0xFE5
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           fsr2h	equ	0xFDA
  4664                           fsr2l	equ	0xFD9
  4665                           status	equ	0xFD8
  4666                           
  4667 ;; *************** function _SetDCPWM2 *****************
  4668 ;; Defined at:
  4669 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  4674 ;; Return value:  Size  Location     Type
  4675 ;;		None               void
  4676 ;; Registers used:
  4677 ;;		wreg, status,2, status,0
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4683 ;;      Params:         0       2       0       0       0       0       0       0       0
  4684 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4685 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4686 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4687 ;;Total ram usage:        6 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    4
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_PWM_DutyCycle2
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text23
  4698  002FBA                     __ptext23:
  4699                           	opt stack 0
  4700  002FBA                     _SetDCPWM2:
  4701                           	opt stack 24
  4702                           
  4703                           ;incstack = 0
  4704  002FBA  0100               	movlb	0	; () banked
  4705  002FBC  C060  F062         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4706  002FC0  0100               	movlb	0	; () banked
  4707  002FC2  C061  F063         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4708  002FC6  0E06               	movlw	6
  4709  002FC8                     u4125:
  4710  002FC8  90D8               	bcf	status,0,c
  4711  002FCA  0100               	movlb	0	; () banked
  4712  002FCC  3762               	rlcf	??_SetDCPWM2& (0+255),f,b
  4713  002FCE  3763               	rlcf	(??_SetDCPWM2+1)& (0+255),f,b
  4714  002FD0  2EE8               	decfsz	wreg,f,c
  4715  002FD2  D7FA               	goto	u4125
  4716  002FD4  C062  F064         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4717  002FD8  C063  F065         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4718                           
  4719                           ; BSR set to: 0
  4720  002FDC  C065  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4721  002FE0  C064  F062         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4722  002FE4  0100               	movlb	0	; () banked
  4723  002FE6  90D8               	bcf	status,0,c
  4724  002FE8  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4725  002FEA  0100               	movlb	0	; () banked
  4726  002FEC  90D8               	bcf	status,0,c
  4727  002FEE  3362               	rrcf	??_SetDCPWM2& (0+255),f,b
  4728  002FF0  0E30               	movlw	48
  4729  002FF2  0100               	movlb	0	; () banked
  4730  002FF4  1762               	andwf	??_SetDCPWM2& (0+255),f,b
  4731  002FF6  50BA               	movf	4026,w,c	;volatile
  4732  002FF8  0BCF               	andlw	207
  4733  002FFA  0100               	movlb	0	; () banked
  4734  002FFC  1162               	iorwf	??_SetDCPWM2& (0+255),w,b
  4735  002FFE  6EBA               	movwf	4026,c	;volatile
  4736                           
  4737                           ; BSR set to: 0
  4738  003000  0012               	return	
  4739  003002                     __end_of_SetDCPWM2:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon2	equ	0xFF1
  4749                           intcon3	equ	0xFF0
  4750                           indf0	equ	0xFEF
  4751                           postinc0	equ	0xFEE
  4752                           fsr0h	equ	0xFEA
  4753                           fsr0l	equ	0xFE9
  4754                           wreg	equ	0xFE8
  4755                           postinc1	equ	0xFE6
  4756                           postdec1	equ	0xFE5
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _PWM_DutyCycle1 *****************
  4765 ;; Defined at:
  4766 ;;		line 33 in file "pwm.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  percentageDu    1    wreg     unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  percentageDu    1   63[BANK0 ] unsigned char 
  4771 ;;  DC              2   64[BANK0 ] unsigned int 
  4772 ;;  DutyCycle       2   61[BANK0 ] unsigned int 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;		None               void
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0
  4783 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4784 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4785 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4786 ;;Total ram usage:        9 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    6
  4789 ;; This function calls:
  4790 ;;		_SetDCPWM1
  4791 ;;		___ftmul
  4792 ;;		___fttol
  4793 ;;		___lbtoft
  4794 ;; This function is called by:
  4795 ;;		_Comando_Tablet
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text24
  4800  002BEA                     __ptext24:
  4801                           	opt stack 0
  4802  002BEA                     _PWM_DutyCycle1:
  4803                           	opt stack 23
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;incstack = 0
  4807                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4808  002BEA  0100               	movlb	0	; () banked
  4809  002BEC  6F9F               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4813  002BEE  0E00               	movlw	0
  4814  002BF0  0100               	movlb	0	; () banked
  4815  002BF2  6FA1               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4816  002BF4  0E00               	movlw	0
  4817  002BF6  0100               	movlb	0	; () banked
  4818  002BF8  6FA0               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4819  002BFA  0E00               	movlw	0
  4820  002BFC  0100               	movlb	0	; () banked
  4821  002BFE  6F9E               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4822  002C00  0E00               	movlw	0
  4823  002C02  0100               	movlb	0	; () banked
  4824  002C04  6F9D               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4828  002C06  0EAE               	movlw	174
  4829  002C08  0100               	movlb	0	; () banked
  4830  002C0A  6F77               	movwf	___ftmul@f2& (0+255),b
  4831  002C0C  0E23               	movlw	35
  4832  002C0E  0100               	movlb	0	; () banked
  4833  002C10  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  4834  002C12  0E41               	movlw	65
  4835  002C14  0100               	movlb	0	; () banked
  4836  002C16  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  4837  002C18  0100               	movlb	0	; () banked
  4838  002C1A  519F               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4839  002C1C  EC78  F019         	call	___lbtoft
  4840  002C20  C068  F074         	movff	?___lbtoft,___ftmul@f1
  4841  002C24  C069  F075         	movff	?___lbtoft+1,___ftmul@f1+1
  4842  002C28  C06A  F076         	movff	?___lbtoft+2,___ftmul@f1+2
  4843  002C2C  EC0F  F00C         	call	___ftmul	;wreg free
  4844  002C30  C074  F08A         	movff	?___ftmul,___fttol@f1
  4845  002C34  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  4846  002C38  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  4847  002C3C  EC19  F00E         	call	___fttol	;wreg free
  4848  002C40  C08A  F099         	movff	?___fttol,??_PWM_DutyCycle1
  4849  002C44  C08B  F09A         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4850  002C48  C08C  F09B         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4851  002C4C  C08D  F09C         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4852  002C50  C099  F0A0         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4853  002C54  C09A  F0A1         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4854                           
  4855                           ;pwm.c: 38: SetDCPWM1(DC);
  4856  002C58  C0A0  F060         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4857  002C5C  C0A1  F061         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4858  002C60  EC01  F018         	call	_SetDCPWM1	;wreg free
  4859                           
  4860                           ;pwm.c: 39: return;
  4861  002C64  0012               	return	
  4862  002C66                     __end_of_PWM_DutyCycle1:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon2	equ	0xFF1
  4872                           intcon3	equ	0xFF0
  4873                           indf0	equ	0xFEF
  4874                           postinc0	equ	0xFEE
  4875                           fsr0h	equ	0xFEA
  4876                           fsr0l	equ	0xFE9
  4877                           wreg	equ	0xFE8
  4878                           postinc1	equ	0xFE6
  4879                           postdec1	equ	0xFE5
  4880                           fsr1l	equ	0xFE1
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function ___lbtoft *****************
  4888 ;; Defined at:
  4889 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  c               1    wreg     unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  c               1   11[BANK0 ] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  3    8[BANK0 ] float 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4903 ;;      Params:         0       3       0       0       0       0       0       0       0
  4904 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4906 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4907 ;;Total ram usage:        4 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    5
  4910 ;; This function calls:
  4911 ;;		___ftpack
  4912 ;; This function is called by:
  4913 ;;		_PWM_DutyCycle1
  4914 ;;		_PWM_DutyCycle2
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text25
  4919  0032F0                     __ptext25:
  4920                           	opt stack 0
  4921  0032F0                     ___lbtoft:
  4922                           	opt stack 23
  4923                           
  4924                           ;incstack = 0
  4925                           ;___lbtoft@c stored from wreg
  4926  0032F0  0100               	movlb	0	; () banked
  4927  0032F2  6F6B               	movwf	___lbtoft@c& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930  0032F4  0100               	movlb	0	; () banked
  4931  0032F6  516B               	movf	___lbtoft@c& (0+255),w,b
  4932  0032F8  0100               	movlb	0	; () banked
  4933  0032FA  6F60               	movwf	___ftpack@arg& (0+255),b
  4934  0032FC  0100               	movlb	0	; () banked
  4935  0032FE  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  4936  003300  0100               	movlb	0	; () banked
  4937  003302  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  4938  003304  0E8E               	movlw	142
  4939  003306  0100               	movlb	0	; () banked
  4940  003308  6F63               	movwf	___ftpack@exp& (0+255),b
  4941  00330A  0E00               	movlw	0
  4942  00330C  0100               	movlb	0	; () banked
  4943  00330E  6F64               	movwf	___ftpack@sign& (0+255),b
  4944  003310  ECBE  F00E         	call	___ftpack	;wreg free
  4945  003314  C060  F068         	movff	?___ftpack,?___lbtoft
  4946  003318  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  4947  00331C  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  4948  003320  0012               	return	
  4949  003322                     __end_of___lbtoft:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           intcon2	equ	0xFF1
  4959                           intcon3	equ	0xFF0
  4960                           indf0	equ	0xFEF
  4961                           postinc0	equ	0xFEE
  4962                           fsr0h	equ	0xFEA
  4963                           fsr0l	equ	0xFE9
  4964                           wreg	equ	0xFE8
  4965                           postinc1	equ	0xFE6
  4966                           postdec1	equ	0xFE5
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _SetDCPWM1 *****************
  4975 ;; Defined at:
  4976 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  4981 ;; Return value:  Size  Location     Type
  4982 ;;		None               void
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4990 ;;      Params:         0       2       0       0       0       0       0       0       0
  4991 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4992 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4993 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4994 ;;Total ram usage:        6 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    4
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_PWM_DutyCycle1
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text26
  5005  003002                     __ptext26:
  5006                           	opt stack 0
  5007  003002                     _SetDCPWM1:
  5008                           	opt stack 24
  5009                           
  5010                           ;incstack = 0
  5011  003002  0100               	movlb	0	; () banked
  5012  003004  C060  F062         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  5013  003008  0100               	movlb	0	; () banked
  5014  00300A  C061  F063         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  5015  00300E  0E06               	movlw	6
  5016  003010                     u4095:
  5017  003010  90D8               	bcf	status,0,c
  5018  003012  0100               	movlb	0	; () banked
  5019  003014  3762               	rlcf	??_SetDCPWM1& (0+255),f,b
  5020  003016  3763               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  5021  003018  2EE8               	decfsz	wreg,f,c
  5022  00301A  D7FA               	goto	u4095
  5023  00301C  C062  F064         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  5024  003020  C063  F065         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  5025                           
  5026                           ; BSR set to: 0
  5027  003024  C065  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  5028  003028  C064  F062         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  5029  00302C  0100               	movlb	0	; () banked
  5030  00302E  90D8               	bcf	status,0,c
  5031  003030  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5032  003032  0100               	movlb	0	; () banked
  5033  003034  90D8               	bcf	status,0,c
  5034  003036  3362               	rrcf	??_SetDCPWM1& (0+255),f,b
  5035  003038  0E30               	movlw	48
  5036  00303A  0100               	movlb	0	; () banked
  5037  00303C  1762               	andwf	??_SetDCPWM1& (0+255),f,b
  5038  00303E  50BD               	movf	4029,w,c	;volatile
  5039  003040  0BCF               	andlw	207
  5040  003042  0100               	movlb	0	; () banked
  5041  003044  1162               	iorwf	??_SetDCPWM1& (0+255),w,b
  5042  003046  6EBD               	movwf	4029,c	;volatile
  5043                           
  5044                           ; BSR set to: 0
  5045  003048  0012               	return	
  5046  00304A                     __end_of_SetDCPWM1:
  5047                           	opt stack 0
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           intcon2	equ	0xFF1
  5056                           intcon3	equ	0xFF0
  5057                           indf0	equ	0xFEF
  5058                           postinc0	equ	0xFEE
  5059                           fsr0h	equ	0xFEA
  5060                           fsr0l	equ	0xFE9
  5061                           wreg	equ	0xFE8
  5062                           postinc1	equ	0xFE6
  5063                           postdec1	equ	0xFE5
  5064                           fsr1l	equ	0xFE1
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _Lcd_Write_Integer *****************
  5072 ;; Defined at:
  5073 ;;		line 113 in file "lcd.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  a               2  111[BANK0 ] int 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  s              20  113[BANK0 ] unsigned char [20]
  5078 ;; Return value:  Size  Location     Type
  5079 ;;		None               void
  5080 ;; Registers used:
  5081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5087 ;;      Params:         0       2       0       0       0       0       0       0       0
  5088 ;;      Locals:         0      20       0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5090 ;;      Totals:         0      22       0       0       0       0       0       0       0
  5091 ;;Total ram usage:       22 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    8
  5094 ;; This function calls:
  5095 ;;		_Lcd_Write_String
  5096 ;;		_sprintf
  5097 ;; This function is called by:
  5098 ;;		_Comando_Tablet
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text27
  5103  00315E                     __ptext27:
  5104                           	opt stack 0
  5105  00315E                     _Lcd_Write_Integer:
  5106                           	opt stack 21
  5107                           
  5108                           ;lcd.c: 114: unsigned char s[20];
  5109                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;incstack = 0
  5113  00315E  0100               	movlb	0	; () banked
  5114  003160  0E00               	movlw	high Lcd_Write_Integer@s
  5115  003162  0100               	movlb	0	; () banked
  5116  003164  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  5117  003166  0100               	movlb	0	; () banked
  5118  003168  0ED1               	movlw	low Lcd_Write_Integer@s
  5119  00316A  0100               	movlb	0	; () banked
  5120  00316C  6F9F               	movwf	sprintf@sp& (0+255),b
  5121  00316E  0E7F               	movlw	high STR_18
  5122  003170  0100               	movlb	0	; () banked
  5123  003172  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  5124  003174  0EAE               	movlw	low STR_18
  5125  003176  0100               	movlb	0	; () banked
  5126  003178  6FA1               	movwf	sprintf@f& (0+255),b
  5127  00317A  C0CF  F0A3         	movff	Lcd_Write_Integer@a,?_sprintf+4
  5128  00317E  C0D0  F0A4         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  5129  003182  EC0E  F000         	call	_sprintf	;wreg free
  5130                           
  5131                           ;lcd.c: 117: Lcd_Write_String(s);
  5132  003186  0100               	movlb	0	; () banked
  5133  003188  0E00               	movlw	high Lcd_Write_Integer@s
  5134  00318A  0100               	movlb	0	; () banked
  5135  00318C  6F65               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  5136  00318E  0100               	movlb	0	; () banked
  5137  003190  0ED1               	movlw	low Lcd_Write_Integer@s
  5138  003192  0100               	movlb	0	; () banked
  5139  003194  6F64               	movwf	Lcd_Write_String@a& (0+255),b
  5140  003196  EC65  F014         	call	_Lcd_Write_String	;wreg free
  5141  00319A  0012               	return	
  5142  00319C                     __end_of_Lcd_Write_Integer:
  5143                           	opt stack 0
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           intcon	equ	0xFF2
  5151                           intcon2	equ	0xFF1
  5152                           intcon3	equ	0xFF0
  5153                           indf0	equ	0xFEF
  5154                           postinc0	equ	0xFEE
  5155                           fsr0h	equ	0xFEA
  5156                           fsr0l	equ	0xFE9
  5157                           wreg	equ	0xFE8
  5158                           postinc1	equ	0xFE6
  5159                           postdec1	equ	0xFE5
  5160                           fsr1l	equ	0xFE1
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           fsr2h	equ	0xFDA
  5164                           fsr2l	equ	0xFD9
  5165                           status	equ	0xFD8
  5166                           
  5167 ;; *************** function _sprintf *****************
  5168 ;; Defined at:
  5169 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  5172 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  5173 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  5174 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  vd              4   83[BANK0 ] unsigned long 
  5177 ;;  vd              4   87[BANK0 ] unsigned long 
  5178 ;;  _val            5  100[BANK0 ] struct .
  5179 ;;  fval            3  107[BANK0 ] struct .
  5180 ;;  integ           3   95[BANK0 ] struct .
  5181 ;;  ival            3    0        struct .
  5182 ;;  exp             2  105[BANK0 ] int 
  5183 ;;  prec            2   98[BANK0 ] int 
  5184 ;;  flag            2   93[BANK0 ] unsigned short 
  5185 ;;  ap              2   91[BANK0 ] PTR void [1]
  5186 ;;		 -> ?_sprintf(2), 
  5187 ;;  width           2    0        int 
  5188 ;;  c               1  110[BANK0 ] char 
  5189 ;;  d               1    0        unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  2   63[BANK0 ] int 
  5192 ;; Registers used:
  5193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5199 ;;      Params:         0       7       0       0       0       0       0       0       0
  5200 ;;      Locals:         0      35       0       0       0       0       0       0       0
  5201 ;;      Temps:          0       6       0       0       0       0       0       0       0
  5202 ;;      Totals:         0      48       0       0       0       0       0       0       0
  5203 ;;Total ram usage:       48 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    7
  5206 ;; This function calls:
  5207 ;;		___awdiv
  5208 ;;		___ftadd
  5209 ;;		___ftge
  5210 ;;		___ftmul
  5211 ;;		___ftneg
  5212 ;;		___ftsub
  5213 ;;		___fttol
  5214 ;;		___lldiv
  5215 ;;		___llmod
  5216 ;;		___lltoft
  5217 ;;		___wmul
  5218 ;;		__div_to_l_
  5219 ;;		__tdiv_to_l_
  5220 ;;		_fround
  5221 ;;		_scale
  5222 ;; This function is called by:
  5223 ;;		_putcBluetoothInt
  5224 ;;		_Lcd_Write_Integer
  5225 ;;		_Lcd_Write_Float
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text28
  5230  00001C                     __ptext28:
  5231                           	opt stack 0
  5232  00001C                     _sprintf:
  5233                           	opt stack 21
  5234                           
  5235                           ;doprnt.c: 494: va_list ap;
  5236                           ;doprnt.c: 499: signed char c;
  5237                           ;doprnt.c: 501: int width;
  5238                           ;doprnt.c: 504: int prec;
  5239                           ;doprnt.c: 508: unsigned short flag;
  5240                           ;doprnt.c: 515: char d;
  5241                           ;doprnt.c: 516: double fval, integ;
  5242                           ;doprnt.c: 517: int exp;
  5243                           ;doprnt.c: 518: double ival;
  5244                           ;doprnt.c: 519: union {
  5245                           ;doprnt.c: 520: unsigned long _val;
  5246                           ;doprnt.c: 521: struct {
  5247                           ;doprnt.c: 522: const char * _cp;
  5248                           ;doprnt.c: 523: unsigned _len;
  5249                           ;doprnt.c: 524: } _str;
  5250                           ;doprnt.c: 525: } _val;
  5251                           ;doprnt.c: 542: *ap = __va_start();
  5252                           
  5253                           ;incstack = 0
  5254  00001C  0100               	movlb	0	; () banked
  5255  00001E  0E00               	movlw	high (?_sprintf+4)
  5256  000020  0100               	movlb	0	; () banked
  5257  000022  6FBC               	movwf	(sprintf@ap+1)& (0+255),b
  5258  000024  0100               	movlb	0	; () banked
  5259  000026  0EA3               	movlw	low (?_sprintf+4)
  5260  000028  0100               	movlb	0	; () banked
  5261  00002A  6FBB               	movwf	sprintf@ap& (0+255),b
  5262                           
  5263                           ;doprnt.c: 545: while(c = *f++) {
  5264  00002C  EFB4  F004         	goto	l3946
  5265  000030                     l3744:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;doprnt.c: 547: if(c != '%')
  5269  000030  0100               	movlb	0	; () banked
  5270  000032  51CE               	movf	sprintf@c& (0+255),w,b
  5271  000034  0A25               	xorlw	37
  5272  000036  B4D8               	btfsc	status,2,c
  5273  000038  D00C               	goto	l3750
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 549: {
  5277                           ;doprnt.c: 550: ((*sp++ = (c)));
  5278  00003A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5279  00003E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5280  000042  0100               	movlb	0	; () banked
  5281  000044  C0CE  FFDF         	movff	sprintf@c,indf2
  5282                           
  5283                           ; BSR set to: 0
  5284  000048  0100               	movlb	0	; () banked
  5285  00004A  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  5286  00004C  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  5287                           
  5288                           ;doprnt.c: 551: continue;
  5289  00004E  EFB4  F004         	goto	l3946
  5290  000052                     l3750:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;doprnt.c: 552: }
  5294                           ;doprnt.c: 557: flag = 0;
  5295  000052  0E00               	movlw	0
  5296  000054  0100               	movlb	0	; () banked
  5297  000056  6FBE               	movwf	(sprintf@flag+1)& (0+255),b
  5298  000058  0E00               	movlw	0
  5299  00005A  0100               	movlb	0	; () banked
  5300  00005C  6FBD               	movwf	sprintf@flag& (0+255),b
  5301                           
  5302                           ;doprnt.c: 644: switch(c = *f++) {
  5303  00005E  D003               	goto	l3756
  5304  000060                     l3752:
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 672: flag |= 0x400;
  5308  000060  0100               	movlb	0	; () banked
  5309  000062  85BE               	bsf	(sprintf@flag+1)& (0+255),2,b
  5310                           
  5311                           ;doprnt.c: 673: break;
  5312  000064  D01E               	goto	l3758
  5313  000066                     l3756:
  5314                           
  5315                           ; BSR set to: 0
  5316  000066  0100               	movlb	0	; () banked
  5317  000068  C0A1  FFF6         	movff	sprintf@f,tblptrl
  5318  00006C  0100               	movlb	0	; () banked
  5319  00006E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  5320  000072  0100               	movlb	0	; () banked
  5321  000074  4BA1               	infsnz	sprintf@f& (0+255),f,b
  5322  000076  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  5323  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5324  000078  6AF8               	clrf	tblptru,c
  5325  00007A                     	endif
  5326  00007A                     	if	0	;tblptru may be non-zero
  5327  00007A                     	endif
  5328  00007A  0008               	tblrd		*
  5329  00007C  0100               	movlb	0	; () banked
  5330  00007E  CFF5 F0CE          	movff	tablat,sprintf@c
  5331  000082  0100               	movlb	0	; () banked
  5332  000084  51CE               	movf	sprintf@c& (0+255),w,b
  5333                           
  5334                           ; Switch size 1, requested type "space"
  5335                           ; Number of cases is 4, Range of values is 0 to 105
  5336                           ; switch strategies available:
  5337                           ; Name         Instructions Cycles
  5338                           ; simple_byte           13     7 (average)
  5339                           ;	Chosen strategy is simple_byte
  5340  000086  0A00               	xorlw	0	; case 0
  5341  000088  B4D8               	btfsc	status,2,c
  5342  00008A  EFC6  F004         	goto	l3948
  5343  00008E  0A64               	xorlw	100	; case 100
  5344  000090  B4D8               	btfsc	status,2,c
  5345  000092  D007               	goto	l3758
  5346  000094  0A02               	xorlw	2	; case 102
  5347  000096  B4D8               	btfsc	status,2,c
  5348  000098  D7E3               	goto	l3752
  5349  00009A  0A0F               	xorlw	15	; case 105
  5350  00009C  A4D8               	btfss	status,2,c
  5351  00009E  EFB4  F004         	goto	l3946
  5352  0000A2                     l3758:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;doprnt.c: 834: if(flag & (0x700)) {
  5356  0000A2  0E07               	movlw	7
  5357  0000A4  0100               	movlb	0	; () banked
  5358  0000A6  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5359  0000A8  B4D8               	btfsc	status,2,c
  5360  0000AA  D36D               	goto	l3906
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;doprnt.c: 838: prec = 6;
  5364  0000AC  0E00               	movlw	0
  5365  0000AE  0100               	movlb	0	; () banked
  5366  0000B0  6FC3               	movwf	(sprintf@prec+1)& (0+255),b
  5367  0000B2  0E06               	movlw	6
  5368  0000B4  0100               	movlb	0	; () banked
  5369  0000B6  6FC2               	movwf	sprintf@prec& (0+255),b
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5373  0000B8  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  5374  0000BC  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  5375  0000C0  0100               	movlb	0	; () banked
  5376  0000C2  CFDE F0CB          	movff	postinc2,sprintf@fval
  5377  0000C6  0100               	movlb	0	; () banked
  5378  0000C8  CFDE F0CC          	movff	postinc2,sprintf@fval+1
  5379  0000CC  0100               	movlb	0	; () banked
  5380  0000CE  CFDD F0CD          	movff	postdec2,sprintf@fval+2
  5381                           
  5382                           ; BSR set to: 0
  5383  0000D2  0E03               	movlw	3
  5384  0000D4  0100               	movlb	0	; () banked
  5385  0000D6  27BB               	addwf	sprintf@ap& (0+255),f,b
  5386  0000D8  0E00               	movlw	0
  5387  0000DA  0100               	movlb	0	; () banked
  5388  0000DC  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;doprnt.c: 840: if(fval < 0.0) {
  5392  0000DE  0100               	movlb	0	; () banked
  5393  0000E0  51CD               	movf	(sprintf@fval+2)& (0+255),w,b
  5394  0000E2  0A80               	xorlw	128
  5395  0000E4  0F80               	addlw	128
  5396  0000E6  E107               	bnz	u3775
  5397  0000E8  0E00               	movlw	0
  5398  0000EA  0100               	movlb	0	; () banked
  5399  0000EC  5DCC               	subwf	(sprintf@fval+1)& (0+255),w,b
  5400  0000EE  E103               	bnz	u3775
  5401  0000F0  0E00               	movlw	0
  5402  0000F2  0100               	movlb	0	; () banked
  5403  0000F4  5DCB               	subwf	sprintf@fval& (0+255),w,b
  5404  0000F6                     u3775:
  5405  0000F6  B0D8               	btfsc	status,0,c
  5406  0000F8  D011               	goto	l3772
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 841: fval = -fval;
  5410  0000FA  C0CB  F060         	movff	sprintf@fval,___ftneg@f1
  5411  0000FE  C0CC  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  5412  000102  C0CD  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  5413  000106  EC91  F019         	call	___ftneg	;wreg free
  5414  00010A  C060  F0CB         	movff	?___ftneg,sprintf@fval
  5415  00010E  C061  F0CC         	movff	?___ftneg+1,sprintf@fval+1
  5416  000112  C062  F0CD         	movff	?___ftneg+2,sprintf@fval+2
  5417                           
  5418                           ;doprnt.c: 842: flag |= 0x03;
  5419  000116  0E03               	movlw	3
  5420  000118  0100               	movlb	0	; () banked
  5421  00011A  13BD               	iorwf	sprintf@flag& (0+255),f,b
  5422  00011C                     l3772:
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;doprnt.c: 843: }
  5426                           ;doprnt.c: 844: exp = 0;
  5427  00011C  0E00               	movlw	0
  5428  00011E  0100               	movlb	0	; () banked
  5429  000120  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5430  000122  0E00               	movlw	0
  5431  000124  0100               	movlb	0	; () banked
  5432  000126  6FC9               	movwf	sprintf@exp& (0+255),b
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 845: if( fval!=0) {
  5436  000128  0E7F               	movlw	127
  5437  00012A  0100               	movlb	0	; () banked
  5438  00012C  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5439  00012E  0100               	movlb	0	; () banked
  5440  000130  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5441  000132  0100               	movlb	0	; () banked
  5442  000134  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5443  000136  B4D8               	btfsc	status,2,c
  5444  000138  D0AA               	goto	l3800
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5448  00013A  0E82               	movlw	130
  5449  00013C  0100               	movlb	0	; () banked
  5450  00013E  6FA6               	movwf	??_sprintf& (0+255),b
  5451  000140  0EFF               	movlw	255
  5452  000142  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5453  000144  0100               	movlb	0	; () banked
  5454  000146  C0CB  F0A8         	movff	sprintf@fval,??_sprintf+2
  5455  00014A  0100               	movlb	0	; () banked
  5456  00014C  C0CC  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  5457  000150  0100               	movlb	0	; () banked
  5458  000152  C0CD  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  5459  000156  0100               	movlb	0	; () banked
  5460  000158  C0CE  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  5461  00015C  0E10               	movlw	16
  5462  00015E  D006               	goto	u3790
  5463  000160                     u3795:
  5464  000160  0100               	movlb	0	; () banked
  5465  000162  90D8               	bcf	status,0,c
  5466  000164  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  5467  000166  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  5468  000168  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  5469  00016A  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  5470  00016C                     u3790:
  5471  00016C  2EE8               	decfsz	wreg,f,c
  5472  00016E  D7F8               	goto	u3795
  5473  000170  0100               	movlb	0	; () banked
  5474  000172  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  5475  000174  0100               	movlb	0	; () banked
  5476  000176  25A6               	addwf	??_sprintf& (0+255),w,b
  5477  000178  0100               	movlb	0	; () banked
  5478  00017A  6FC9               	movwf	sprintf@exp& (0+255),b
  5479  00017C  0E00               	movlw	0
  5480  00017E  0100               	movlb	0	; () banked
  5481  000180  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  5482  000182  0100               	movlb	0	; () banked
  5483  000184  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 847: exp--;
  5487  000186  0100               	movlb	0	; () banked
  5488  000188  07C9               	decf	sprintf@exp& (0+255),f,b
  5489  00018A  A0D8               	btfss	status,0,c
  5490  00018C  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 848: exp *= 3;
  5494  00018E  C0C9  F06E         	movff	sprintf@exp,___wmul@multiplier
  5495  000192  C0CA  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  5496  000196  0E00               	movlw	0
  5497  000198  0100               	movlb	0	; () banked
  5498  00019A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5499  00019C  0E03               	movlw	3
  5500  00019E  0100               	movlb	0	; () banked
  5501  0001A0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  5502  0001A2  EC42  F019         	call	___wmul	;wreg free
  5503  0001A6  0100               	movlb	0	; () banked
  5504  0001A8  C06E  F0C9         	movff	?___wmul,sprintf@exp
  5505  0001AC  0100               	movlb	0	; () banked
  5506  0001AE  C06F  F0CA         	movff	?___wmul+1,sprintf@exp+1
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;doprnt.c: 849: exp /= 10;
  5510  0001B2  C0C9  F066         	movff	sprintf@exp,___awdiv@dividend
  5511  0001B6  C0CA  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  5512  0001BA  0E00               	movlw	0
  5513  0001BC  0100               	movlb	0	; () banked
  5514  0001BE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  5515  0001C0  0E0A               	movlw	10
  5516  0001C2  0100               	movlb	0	; () banked
  5517  0001C4  6F68               	movwf	___awdiv@divisor& (0+255),b
  5518  0001C6  EC2D  F010         	call	___awdiv	;wreg free
  5519  0001CA  0100               	movlb	0	; () banked
  5520  0001CC  C066  F0C9         	movff	?___awdiv,sprintf@exp
  5521  0001D0  0100               	movlb	0	; () banked
  5522  0001D2  C067  F0CA         	movff	?___awdiv+1,sprintf@exp+1
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;doprnt.c: 850: if(exp < 0)
  5526  0001D6  0100               	movlb	0	; () banked
  5527  0001D8  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5528  0001DA  0A80               	xorlw	128
  5529  0001DC  6EF3               	movwf	prodl,c
  5530  0001DE  0E80               	movlw	128
  5531  0001E0  5CF3               	subwf	prodl,w,c
  5532  0001E2  0E00               	movlw	0
  5533  0001E4  B4D8               	btfsc	status,2,c
  5534  0001E6  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5535  0001E8  B0D8               	btfsc	status,0,c
  5536  0001EA  D004               	goto	l3788
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;doprnt.c: 851: exp--;
  5540  0001EC  0100               	movlb	0	; () banked
  5541  0001EE  07C9               	decf	sprintf@exp& (0+255),f,b
  5542  0001F0  A0D8               	btfss	status,0,c
  5543  0001F2  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5544  0001F4                     l3788:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;doprnt.c: 855: integ = scale(-exp);
  5548  0001F4  0100               	movlb	0	; () banked
  5549  0001F6  51C9               	movf	sprintf@exp& (0+255),w,b
  5550  0001F8  0800               	sublw	0
  5551  0001FA  ECCD  F004         	call	_scale
  5552  0001FE  C083  F0BF         	movff	?_scale,sprintf@integ
  5553  000202  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5554  000206  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5555                           
  5556                           ;doprnt.c: 856: integ *= fval;
  5557  00020A  C0BF  F074         	movff	sprintf@integ,___ftmul@f1
  5558  00020E  C0C0  F075         	movff	sprintf@integ+1,___ftmul@f1+1
  5559  000212  C0C1  F076         	movff	sprintf@integ+2,___ftmul@f1+2
  5560  000216  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  5561  00021A  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  5562  00021E  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  5563  000222  EC0F  F00C         	call	___ftmul	;wreg free
  5564  000226  C074  F0BF         	movff	?___ftmul,sprintf@integ
  5565  00022A  C075  F0C0         	movff	?___ftmul+1,sprintf@integ+1
  5566  00022E  C076  F0C1         	movff	?___ftmul+2,sprintf@integ+2
  5567                           
  5568                           ;doprnt.c: 857: if(integ < 1.0)
  5569  000232  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5570  000236  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5571  00023A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5572  00023E  0E00               	movlw	0
  5573  000240  0100               	movlb	0	; () banked
  5574  000242  6F63               	movwf	___ftge@ff2& (0+255),b
  5575  000244  0E80               	movlw	128
  5576  000246  0100               	movlb	0	; () banked
  5577  000248  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5578  00024A  0E3F               	movlw	63
  5579  00024C  0100               	movlb	0	; () banked
  5580  00024E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5581  000250  EC08  F011         	call	___ftge	;wreg free
  5582  000254  B0D8               	btfsc	status,0,c
  5583  000256  D005               	goto	l3796
  5584                           
  5585                           ;doprnt.c: 858: exp--;
  5586  000258  0100               	movlb	0	; () banked
  5587  00025A  07C9               	decf	sprintf@exp& (0+255),f,b
  5588  00025C  A0D8               	btfss	status,0,c
  5589  00025E  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  5590  000260  D016               	goto	l3800
  5591  000262                     l3796:
  5592                           
  5593                           ;doprnt.c: 859: else if(integ >= 10.0)
  5594  000262  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5595  000266  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5596  00026A  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5597  00026E  0E00               	movlw	0
  5598  000270  0100               	movlb	0	; () banked
  5599  000272  6F63               	movwf	___ftge@ff2& (0+255),b
  5600  000274  0E20               	movlw	32
  5601  000276  0100               	movlb	0	; () banked
  5602  000278  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5603  00027A  0E41               	movlw	65
  5604  00027C  0100               	movlb	0	; () banked
  5605  00027E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5606  000280  EC08  F011         	call	___ftge	;wreg free
  5607  000284  A0D8               	btfss	status,0,c
  5608  000286  D003               	goto	l3800
  5609                           
  5610                           ;doprnt.c: 860: exp++;
  5611  000288  0100               	movlb	0	; () banked
  5612  00028A  4BC9               	infsnz	sprintf@exp& (0+255),f,b
  5613  00028C  2BCA               	incf	(sprintf@exp+1)& (0+255),f,b
  5614  00028E                     l3800:
  5615                           
  5616                           ;doprnt.c: 861: }
  5617                           ;doprnt.c: 1121: if(prec <= 12)
  5618  00028E  0100               	movlb	0	; () banked
  5619  000290  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  5620  000292  0A80               	xorlw	128
  5621  000294  6EF3               	movwf	prodl,c
  5622  000296  0E80               	movlw	128
  5623  000298  5CF3               	subwf	prodl,w,c
  5624  00029A  0E0D               	movlw	13
  5625  00029C  B4D8               	btfsc	status,2,c
  5626  00029E  5DC2               	subwf	sprintf@prec& (0+255),w,b
  5627  0002A0  B0D8               	btfsc	status,0,c
  5628  0002A2  D018               	goto	l3804
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;doprnt.c: 1122: fval += fround(prec);
  5632  0002A4  C0CB  F08D         	movff	sprintf@fval,___ftadd@f1
  5633  0002A8  C0CC  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  5634  0002AC  C0CD  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  5635  0002B0  0100               	movlb	0	; () banked
  5636  0002B2  51C2               	movf	sprintf@prec& (0+255),w,b
  5637  0002B4  EC8B  F007         	call	_fround
  5638  0002B8  C083  F090         	movff	?_fround,___ftadd@f2
  5639  0002BC  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  5640  0002C0  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  5641  0002C4  EC15  F009         	call	___ftadd	;wreg free
  5642  0002C8  C08D  F0CB         	movff	?___ftadd,sprintf@fval
  5643  0002CC  C08E  F0CC         	movff	?___ftadd+1,sprintf@fval+1
  5644  0002D0  C08F  F0CD         	movff	?___ftadd+2,sprintf@fval+2
  5645  0002D4                     l3804:
  5646                           
  5647                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5648  0002D4  0100               	movlb	0	; () banked
  5649  0002D6  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5650  0002D8  0A80               	xorlw	128
  5651  0002DA  6EF3               	movwf	prodl,c
  5652  0002DC  0E80               	movlw	128
  5653  0002DE  5CF3               	subwf	prodl,w,c
  5654  0002E0  0E0A               	movlw	10
  5655  0002E2  B4D8               	btfsc	status,2,c
  5656  0002E4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5657  0002E6  B0D8               	btfsc	status,0,c
  5658  0002E8  D029               	goto	l3812
  5659                           
  5660                           ; BSR set to: 0
  5661  0002EA  0E7F               	movlw	127
  5662  0002EC  0100               	movlb	0	; () banked
  5663  0002EE  15CD               	andwf	(sprintf@fval+2)& (0+255),w,b
  5664  0002F0  0100               	movlb	0	; () banked
  5665  0002F2  11CC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5666  0002F4  0100               	movlb	0	; () banked
  5667  0002F6  11CB               	iorwf	sprintf@fval& (0+255),w,b
  5668  0002F8  B4D8               	btfsc	status,2,c
  5669  0002FA  D06F               	goto	l3828
  5670                           
  5671                           ; BSR set to: 0
  5672  0002FC  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5673  000300  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5674  000304  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5675  000308  EC19  F00E         	call	___fttol	;wreg free
  5676  00030C  C08A  F0A6         	movff	?___fttol,??_sprintf
  5677  000310  C08B  F0A7         	movff	?___fttol+1,??_sprintf+1
  5678  000314  C08C  F0A8         	movff	?___fttol+2,??_sprintf+2
  5679  000318  C08D  F0A9         	movff	?___fttol+3,??_sprintf+3
  5680  00031C  0100               	movlb	0	; () banked
  5681  00031E  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  5682  000320  11A6               	iorwf	??_sprintf& (0+255),w,b
  5683  000322  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5684  000324  11A8               	iorwf	(??_sprintf+2)& (0+255),w,b
  5685  000326  A4D8               	btfss	status,2,c
  5686  000328  D058               	goto	l3828
  5687                           
  5688                           ; BSR set to: 0
  5689  00032A  0100               	movlb	0	; () banked
  5690  00032C  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  5691  00032E  0A80               	xorlw	128
  5692  000330  0F80               	addlw	-128
  5693  000332  0E02               	movlw	2
  5694  000334  B4D8               	btfsc	status,2,c
  5695  000336  5DC9               	subwf	sprintf@exp& (0+255),w,b
  5696  000338  A0D8               	btfss	status,0,c
  5697  00033A  D04F               	goto	l3828
  5698  00033C                     l3812:
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;doprnt.c: 1129: if(integ < 4.294967296){
  5702  00033C  C0BF  F060         	movff	sprintf@integ,___ftge@ff1
  5703  000340  C0C0  F061         	movff	sprintf@integ+1,___ftge@ff1+1
  5704  000344  C0C1  F062         	movff	sprintf@integ+2,___ftge@ff1+2
  5705  000348  0E70               	movlw	112
  5706  00034A  0100               	movlb	0	; () banked
  5707  00034C  6F63               	movwf	___ftge@ff2& (0+255),b
  5708  00034E  0E89               	movlw	137
  5709  000350  0100               	movlb	0	; () banked
  5710  000352  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5711  000354  0E40               	movlw	64
  5712  000356  0100               	movlb	0	; () banked
  5713  000358  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5714  00035A  EC08  F011         	call	___ftge	;wreg free
  5715  00035E  B0D8               	btfsc	status,0,c
  5716  000360  D003               	goto	l3816
  5717                           
  5718                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5719  000362  0100               	movlb	0	; () banked
  5720  000364  0EF7               	movlw	247
  5721  000366  D002               	goto	L8
  5722  000368                     l3816:
  5723                           
  5724                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5725  000368  0100               	movlb	0	; () banked
  5726  00036A  0EF8               	movlw	248
  5727  00036C                     L8:
  5728  00036C  0100               	movlb	0	; () banked
  5729  00036E  27C9               	addwf	sprintf@exp& (0+255),f,b
  5730  000370  0EFF               	movlw	255
  5731  000372  0100               	movlb	0	; () banked
  5732  000374  23CA               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;doprnt.c: 1133: }
  5736                           ;doprnt.c: 1134: integ = scale(exp);
  5737                           
  5738                           ; BSR set to: 0
  5739  000376  0100               	movlb	0	; () banked
  5740  000378  51C9               	movf	sprintf@exp& (0+255),w,b
  5741  00037A  ECCD  F004         	call	_scale
  5742  00037E  C083  F0BF         	movff	?_scale,sprintf@integ
  5743  000382  C084  F0C0         	movff	?_scale+1,sprintf@integ+1
  5744  000386  C085  F0C1         	movff	?_scale+2,sprintf@integ+2
  5745                           
  5746                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5747  00038A  C0CB  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  5748  00038E  C0CC  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5749  000392  C0CD  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5750  000396  C0BF  F063         	movff	sprintf@integ,__tdiv_to_l_@f2
  5751  00039A  C0C0  F064         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5752  00039E  C0C1  F065         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5753  0003A2  EC44  F00B         	call	__tdiv_to_l_	;wreg free
  5754  0003A6  C060  F0AF         	movff	?__tdiv_to_l_,_sprintf$1736
  5755  0003AA  C061  F0B0         	movff	?__tdiv_to_l_+1,_sprintf$1736+1
  5756  0003AE  C062  F0B1         	movff	?__tdiv_to_l_+2,_sprintf$1736+2
  5757  0003B2  C063  F0B2         	movff	?__tdiv_to_l_+3,_sprintf$1736+3
  5758  0003B6  C0AF  F0C4         	movff	_sprintf$1736,sprintf@_val
  5759  0003BA  C0B0  F0C5         	movff	_sprintf$1736+1,sprintf@_val+1
  5760  0003BE  C0B1  F0C6         	movff	_sprintf$1736+2,sprintf@_val+2
  5761  0003C2  C0B2  F0C7         	movff	_sprintf$1736+3,sprintf@_val+3
  5762                           
  5763                           ;doprnt.c: 1138: fval = 0.0;
  5764  0003C6  0E00               	movlw	0
  5765  0003C8  0100               	movlb	0	; () banked
  5766  0003CA  6FCB               	movwf	sprintf@fval& (0+255),b
  5767  0003CC  0E00               	movlw	0
  5768  0003CE  0100               	movlb	0	; () banked
  5769  0003D0  6FCC               	movwf	(sprintf@fval+1)& (0+255),b
  5770  0003D2  0E00               	movlw	0
  5771  0003D4  0100               	movlb	0	; () banked
  5772  0003D6  6FCD               	movwf	(sprintf@fval+2)& (0+255),b
  5773                           
  5774                           ;doprnt.c: 1139: } else {
  5775  0003D8  D034               	goto	l3832
  5776  0003DA                     l3828:
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5780  0003DA  C0CB  F08A         	movff	sprintf@fval,___fttol@f1
  5781  0003DE  C0CC  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  5782  0003E2  C0CD  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  5783  0003E6  EC19  F00E         	call	___fttol	;wreg free
  5784  0003EA  C08A  F0C4         	movff	?___fttol,sprintf@_val
  5785  0003EE  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  5786  0003F2  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  5787  0003F6  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  5788                           
  5789                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5790  0003FA  C0CB  F099         	movff	sprintf@fval,___ftsub@f1
  5791  0003FE  C0CC  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  5792  000402  C0CD  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  5793  000406  C0C4  F068         	movff	sprintf@_val,___lltoft@c
  5794  00040A  C0C5  F069         	movff	sprintf@_val+1,___lltoft@c+1
  5795  00040E  C0C6  F06A         	movff	sprintf@_val+2,___lltoft@c+2
  5796  000412  C0C7  F06B         	movff	sprintf@_val+3,___lltoft@c+3
  5797  000416  EC78  F015         	call	___lltoft	;wreg free
  5798  00041A  C068  F09C         	movff	?___lltoft,___ftsub@f2
  5799  00041E  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  5800  000422  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  5801  000426  ECCE  F018         	call	___ftsub	;wreg free
  5802  00042A  C099  F0CB         	movff	?___ftsub,sprintf@fval
  5803  00042E  C09A  F0CC         	movff	?___ftsub+1,sprintf@fval+1
  5804  000432  C09B  F0CD         	movff	?___ftsub+2,sprintf@fval+2
  5805                           
  5806                           ;doprnt.c: 1142: exp = 0;
  5807  000436  0E00               	movlw	0
  5808  000438  0100               	movlb	0	; () banked
  5809  00043A  6FCA               	movwf	(sprintf@exp+1)& (0+255),b
  5810  00043C  0E00               	movlw	0
  5811  00043E  0100               	movlb	0	; () banked
  5812  000440  6FC9               	movwf	sprintf@exp& (0+255),b
  5813  000442                     l3832:
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;doprnt.c: 1143: }
  5817                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5818  000442  0E01               	movlw	1
  5819  000444  0100               	movlb	0	; () banked
  5820  000446  6FCE               	movwf	sprintf@c& (0+255),b
  5821  000448                     
  5822                           ; BSR set to: 0
  5823  000448  0100               	movlb	0	; () banked
  5824  00044A  51CE               	movf	sprintf@c& (0+255),w,b
  5825  00044C  0A0A               	xorlw	10
  5826  00044E  B4D8               	btfsc	status,2,c
  5827  000450  D021               	goto	l3846
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5831                           
  5832                           ; BSR set to: 0
  5833                           
  5834                           ; BSR set to: 0
  5835  000452  0100               	movlb	0	; () banked
  5836  000454  51CE               	movf	sprintf@c& (0+255),w,b
  5837  000456  0D04               	mullw	4
  5838  000458  0EAD               	movlw	low _dpowers
  5839  00045A  24F3               	addwf	prodl,w,c
  5840  00045C  6EF6               	movwf	tblptrl,c
  5841  00045E  0E7E               	movlw	high _dpowers
  5842  000460  20F4               	addwfc	prodh,w,c
  5843  000462  6EF7               	movwf	tblptrh,c
  5844  000464                     	if	1	;There are 3 active tblptr bytes
  5845  000464  6AF8               	clrf	tblptru,c
  5846  000466  0E00               	movlw	low (__mediumconst shr (0+16))
  5847  000468  22F8               	addwfc	tblptru,f,c
  5848  00046A                     	endif
  5849  00046A  0009               	tblrd		*+
  5850  00046C  50F5               	movf	tablat,w,c
  5851  00046E  0100               	movlb	0	; () banked
  5852  000470  5DC4               	subwf	sprintf@_val& (0+255),w,b
  5853  000472  0009               	tblrd		*+
  5854  000474  50F5               	movf	tablat,w,c
  5855  000476  0100               	movlb	0	; () banked
  5856  000478  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5857  00047A  0009               	tblrd		*+
  5858  00047C  50F5               	movf	tablat,w,c
  5859  00047E  0100               	movlb	0	; () banked
  5860  000480  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5861  000482  0009               	tblrd		*+
  5862  000484  50F5               	movf	tablat,w,c
  5863  000486  0100               	movlb	0	; () banked
  5864  000488  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5865  00048A  A0D8               	btfss	status,0,c
  5866  00048C  D003               	goto	l3846
  5867                           
  5868                           ; BSR set to: 0
  5869                           
  5870                           ; BSR set to: 0
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;doprnt.c: 1147: break;
  5874  00048E  0100               	movlb	0	; () banked
  5875  000490  2BCE               	incf	sprintf@c& (0+255),f,b
  5876  000492  D7DA               	goto	L9
  5877  000494                     l3846:
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;doprnt.c: 1184: {
  5881                           ;doprnt.c: 1197: if(flag & 0x03)
  5882  000494  0E03               	movlw	3
  5883  000496  0100               	movlb	0	; () banked
  5884  000498  15BD               	andwf	sprintf@flag& (0+255),w,b
  5885  00049A  0100               	movlb	0	; () banked
  5886  00049C  6FA6               	movwf	??_sprintf& (0+255),b
  5887  00049E  0E00               	movlw	0
  5888  0004A0  0100               	movlb	0	; () banked
  5889  0004A2  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  5890  0004A4  0100               	movlb	0	; () banked
  5891  0004A6  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5892  0004A8  0100               	movlb	0	; () banked
  5893  0004AA  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  5894  0004AC  11A6               	iorwf	??_sprintf& (0+255),w,b
  5895  0004AE  B4D8               	btfsc	status,2,c
  5896  0004B0  D05D               	goto	l3860
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5900  0004B2  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5901  0004B6  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5902  0004BA  0E2D               	movlw	45
  5903  0004BC  D053               	goto	L10
  5904  0004BE                     l3852:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;doprnt.c: 1209: {
  5908                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5909  0004BE  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  5910  0004C2  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  5911  0004C6  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  5912  0004CA  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  5913  0004CE  0100               	movlb	0	; () banked
  5914  0004D0  51CE               	movf	sprintf@c& (0+255),w,b
  5915  0004D2  0D04               	mullw	4
  5916  0004D4  0EAD               	movlw	low _dpowers
  5917  0004D6  24F3               	addwf	prodl,w,c
  5918  0004D8  6EF6               	movwf	tblptrl,c
  5919  0004DA  0E7E               	movlw	high _dpowers
  5920  0004DC  20F4               	addwfc	prodh,w,c
  5921  0004DE  6EF7               	movwf	tblptrh,c
  5922  0004E0                     	if	1	;There are 3 active tblptr bytes
  5923  0004E0  6AF8               	clrf	tblptru,c
  5924  0004E2  0E00               	movlw	low (__mediumconst shr (0+16))
  5925  0004E4  22F8               	addwfc	tblptru,f,c
  5926  0004E6                     	endif
  5927  0004E6  0009               	tblrd		*+
  5928  0004E8  0100               	movlb	0	; () banked
  5929  0004EA  CFF5 F064          	movff	tablat,___lldiv@divisor
  5930  0004EE  0009               	tblrd		*+
  5931  0004F0  0100               	movlb	0	; () banked
  5932  0004F2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  5933  0004F6  0009               	tblrd		*+
  5934  0004F8  0100               	movlb	0	; () banked
  5935  0004FA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  5936  0004FE  000A               	tblrd		*-
  5937  000500  0100               	movlb	0	; () banked
  5938  000502  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  5939  000506  EC9E  F010         	call	___lldiv	;wreg free
  5940  00050A  C060  F0B3         	movff	?___lldiv,sprintf@vd
  5941  00050E  C061  F0B4         	movff	?___lldiv+1,sprintf@vd+1
  5942  000512  C062  F0B5         	movff	?___lldiv+2,sprintf@vd+2
  5943  000516  C063  F0B6         	movff	?___lldiv+3,sprintf@vd+3
  5944                           
  5945                           ;doprnt.c: 1211: vd %= 10;
  5946  00051A  C0B3  F06D         	movff	sprintf@vd,___llmod@dividend
  5947  00051E  C0B4  F06E         	movff	sprintf@vd+1,___llmod@dividend+1
  5948  000522  C0B5  F06F         	movff	sprintf@vd+2,___llmod@dividend+2
  5949  000526  C0B6  F070         	movff	sprintf@vd+3,___llmod@dividend+3
  5950  00052A  0E0A               	movlw	10
  5951  00052C  0100               	movlb	0	; () banked
  5952  00052E  6F71               	movwf	___llmod@divisor& (0+255),b
  5953  000530  0E00               	movlw	0
  5954  000532  0100               	movlb	0	; () banked
  5955  000534  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  5956  000536  0E00               	movlw	0
  5957  000538  0100               	movlb	0	; () banked
  5958  00053A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  5959  00053C  0E00               	movlw	0
  5960  00053E  0100               	movlb	0	; () banked
  5961  000540  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  5962  000542  EC13  F014         	call	___llmod	;wreg free
  5963  000546  C06D  F0B3         	movff	?___llmod,sprintf@vd
  5964  00054A  C06E  F0B4         	movff	?___llmod+1,sprintf@vd+1
  5965  00054E  C06F  F0B5         	movff	?___llmod+2,sprintf@vd+2
  5966  000552  C070  F0B6         	movff	?___llmod+3,sprintf@vd+3
  5967                           
  5968                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5969  000556  0100               	movlb	0	; () banked
  5970  000558  51B3               	movf	sprintf@vd& (0+255),w,b
  5971  00055A  0F30               	addlw	48
  5972  00055C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5973  000560  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5974  000564                     L10:
  5975  000564  6EDF               	movwf	indf2,c
  5976                           
  5977                           ; BSR set to: 0
  5978  000566  0100               	movlb	0	; () banked
  5979  000568  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  5980  00056A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  5981  00056C                     l3860:
  5982                           
  5983                           ; BSR set to: 0
  5984  00056C  0100               	movlb	0	; () banked
  5985  00056E  07CE               	decf	sprintf@c& (0+255),f,b
  5986  000570  0100               	movlb	0	; () banked
  5987  000572  29CE               	incf	sprintf@c& (0+255),w,b
  5988  000574  B4D8               	btfsc	status,2,c
  5989  000576  D00E               	goto	l3868
  5990  000578  D7A2               	goto	l3852
  5991  00057A                     l3862:
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5995  00057A  C09F  FFD9         	movff	sprintf@sp,fsr2l
  5996  00057E  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  5997  000582  0E30               	movlw	48
  5998  000584  6EDF               	movwf	indf2,c
  5999                           
  6000                           ; BSR set to: 0
  6001  000586  0100               	movlb	0	; () banked
  6002  000588  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6003  00058A  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;doprnt.c: 1218: exp--;
  6007  00058C  0100               	movlb	0	; () banked
  6008  00058E  07C9               	decf	sprintf@exp& (0+255),f,b
  6009  000590  A0D8               	btfss	status,0,c
  6010  000592  07CA               	decf	(sprintf@exp+1)& (0+255),f,b
  6011  000594                     l3868:
  6012                           
  6013                           ; BSR set to: 0
  6014  000594  0100               	movlb	0	; () banked
  6015  000596  51CA               	movf	(sprintf@exp+1)& (0+255),w,b
  6016  000598  0A80               	xorlw	128
  6017  00059A  6EF3               	movwf	prodl,c
  6018  00059C  0E80               	movlw	128
  6019  00059E  5CF3               	subwf	prodl,w,c
  6020  0005A0  0E01               	movlw	1
  6021  0005A2  B4D8               	btfsc	status,2,c
  6022  0005A4  5DC9               	subwf	sprintf@exp& (0+255),w,b
  6023  0005A6  B0D8               	btfsc	status,0,c
  6024  0005A8  D7E8               	goto	l3862
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;doprnt.c: 1219: }
  6028                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6029                           
  6030                           ; BSR set to: 0
  6031  0005AA  0100               	movlb	0	; () banked
  6032  0005AC  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6033  0005AE  0A80               	xorlw	128
  6034  0005B0  0F80               	addlw	-128
  6035  0005B2  0E09               	movlw	9
  6036  0005B4  B4D8               	btfsc	status,2,c
  6037  0005B6  5DC2               	subwf	sprintf@prec& (0+255),w,b
  6038  0005B8  A0D8               	btfss	status,0,c
  6039  0005BA  D004               	goto	l536
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6043  0005BC  0E08               	movlw	8
  6044  0005BE  0100               	movlb	0	; () banked
  6045  0005C0  6FCE               	movwf	sprintf@c& (0+255),b
  6046  0005C2  D002               	goto	l3874
  6047  0005C4                     l536:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;doprnt.c: 1222: else
  6051                           ;doprnt.c: 1223: c = prec;
  6052  0005C4  C0C2  F0CE         	movff	sprintf@prec,sprintf@c
  6053  0005C8                     l3874:
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;doprnt.c: 1224: prec -= c;
  6057  0005C8  0100               	movlb	0	; () banked
  6058  0005CA  51CE               	movf	sprintf@c& (0+255),w,b
  6059  0005CC  0100               	movlb	0	; () banked
  6060  0005CE  5FC2               	subwf	sprintf@prec& (0+255),f,b
  6061  0005D0  0E00               	movlw	0
  6062  0005D2  0100               	movlb	0	; () banked
  6063  0005D4  BFCE               	btfsc	sprintf@c& (0+255),7,b
  6064  0005D6  0EFF               	movlw	255
  6065  0005D8  0100               	movlb	0	; () banked
  6066  0005DA  5BC3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;doprnt.c: 1228: if(c)
  6070  0005DC  0100               	movlb	0	; () banked
  6071  0005DE  51CE               	movf	sprintf@c& (0+255),w,b
  6072  0005E0  B4D8               	btfsc	status,2,c
  6073  0005E2  D009               	goto	l3882
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  6077  0005E4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6078  0005E8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6079  0005EC  0E2E               	movlw	46
  6080  0005EE  6EDF               	movwf	indf2,c
  6081                           
  6082                           ; BSR set to: 0
  6083  0005F0  0100               	movlb	0	; () banked
  6084  0005F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6085  0005F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6086  0005F6                     l3882:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6090  0005F6  0100               	movlb	0	; () banked
  6091  0005F8  51CE               	movf	sprintf@c& (0+255),w,b
  6092  0005FA  ECCD  F004         	call	_scale
  6093  0005FE  C083  F0AC         	movff	?_scale,_sprintf$2761
  6094  000602  C084  F0AD         	movff	?_scale+1,_sprintf$2761+1
  6095  000606  C085  F0AE         	movff	?_scale+2,_sprintf$2761+2
  6096                           
  6097                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  6098  00060A  C0CB  F077         	movff	sprintf@fval,___ftmul@f2
  6099  00060E  C0CC  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  6100  000612  C0CD  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  6101  000616  C0AC  F074         	movff	_sprintf$2761,___ftmul@f1
  6102  00061A  C0AD  F075         	movff	_sprintf$2761+1,___ftmul@f1+1
  6103  00061E  C0AE  F076         	movff	_sprintf$2761+2,___ftmul@f1+2
  6104  000622  EC0F  F00C         	call	___ftmul	;wreg free
  6105  000626  C074  F08A         	movff	?___ftmul,___fttol@f1
  6106  00062A  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  6107  00062E  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  6108  000632  EC19  F00E         	call	___fttol	;wreg free
  6109  000636  C08A  F0C4         	movff	?___fttol,sprintf@_val
  6110  00063A  C08B  F0C5         	movff	?___fttol+1,sprintf@_val+1
  6111  00063E  C08C  F0C6         	movff	?___fttol+2,sprintf@_val+2
  6112  000642  C08D  F0C7         	movff	?___fttol+3,sprintf@_val+3
  6113                           
  6114                           ;doprnt.c: 1237: while(c--) {
  6115  000646  D085               	goto	l3896
  6116  000648                     l3886:
  6117                           
  6118                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  6119  000648  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6120  00064C  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6121  000650  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6122  000654  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6123  000658  0100               	movlb	0	; () banked
  6124  00065A  51CE               	movf	sprintf@c& (0+255),w,b
  6125  00065C  0D04               	mullw	4
  6126  00065E  0EAD               	movlw	low _dpowers
  6127  000660  24F3               	addwf	prodl,w,c
  6128  000662  6EF6               	movwf	tblptrl,c
  6129  000664  0E7E               	movlw	high _dpowers
  6130  000666  20F4               	addwfc	prodh,w,c
  6131  000668  6EF7               	movwf	tblptrh,c
  6132  00066A                     	if	1	;There are 3 active tblptr bytes
  6133  00066A  6AF8               	clrf	tblptru,c
  6134  00066C  0E00               	movlw	low (__mediumconst shr (0+16))
  6135  00066E  22F8               	addwfc	tblptru,f,c
  6136  000670                     	endif
  6137  000670  0009               	tblrd		*+
  6138  000672  0100               	movlb	0	; () banked
  6139  000674  CFF5 F064          	movff	tablat,___lldiv@divisor
  6140  000678  0009               	tblrd		*+
  6141  00067A  0100               	movlb	0	; () banked
  6142  00067C  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6143  000680  0009               	tblrd		*+
  6144  000682  0100               	movlb	0	; () banked
  6145  000684  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6146  000688  000A               	tblrd		*-
  6147  00068A  0100               	movlb	0	; () banked
  6148  00068C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6149  000690  EC9E  F010         	call	___lldiv	;wreg free
  6150  000694  C060  F0B7         	movff	?___lldiv,sprintf@vd_1738
  6151  000698  C061  F0B8         	movff	?___lldiv+1,sprintf@vd_1738+1
  6152  00069C  C062  F0B9         	movff	?___lldiv+2,sprintf@vd_1738+2
  6153  0006A0  C063  F0BA         	movff	?___lldiv+3,sprintf@vd_1738+3
  6154                           
  6155                           ;doprnt.c: 1239: vd %= 10;
  6156  0006A4  C0B7  F06D         	movff	sprintf@vd_1738,___llmod@dividend
  6157  0006A8  C0B8  F06E         	movff	sprintf@vd_1738+1,___llmod@dividend+1
  6158  0006AC  C0B9  F06F         	movff	sprintf@vd_1738+2,___llmod@dividend+2
  6159  0006B0  C0BA  F070         	movff	sprintf@vd_1738+3,___llmod@dividend+3
  6160  0006B4  0E0A               	movlw	10
  6161  0006B6  0100               	movlb	0	; () banked
  6162  0006B8  6F71               	movwf	___llmod@divisor& (0+255),b
  6163  0006BA  0E00               	movlw	0
  6164  0006BC  0100               	movlb	0	; () banked
  6165  0006BE  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6166  0006C0  0E00               	movlw	0
  6167  0006C2  0100               	movlb	0	; () banked
  6168  0006C4  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6169  0006C6  0E00               	movlw	0
  6170  0006C8  0100               	movlb	0	; () banked
  6171  0006CA  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6172  0006CC  EC13  F014         	call	___llmod	;wreg free
  6173  0006D0  C06D  F0B7         	movff	?___llmod,sprintf@vd_1738
  6174  0006D4  C06E  F0B8         	movff	?___llmod+1,sprintf@vd_1738+1
  6175  0006D8  C06F  F0B9         	movff	?___llmod+2,sprintf@vd_1738+2
  6176  0006DC  C070  F0BA         	movff	?___llmod+3,sprintf@vd_1738+3
  6177                           
  6178                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  6179  0006E0  0100               	movlb	0	; () banked
  6180  0006E2  51B7               	movf	sprintf@vd_1738& (0+255),w,b
  6181  0006E4  0F30               	addlw	48
  6182  0006E6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6183  0006EA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6184  0006EE  6EDF               	movwf	indf2,c
  6185                           
  6186                           ; BSR set to: 0
  6187  0006F0  0100               	movlb	0	; () banked
  6188  0006F2  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6189  0006F4  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  6193  0006F6  C0C4  F06D         	movff	sprintf@_val,___llmod@dividend
  6194  0006FA  C0C5  F06E         	movff	sprintf@_val+1,___llmod@dividend+1
  6195  0006FE  C0C6  F06F         	movff	sprintf@_val+2,___llmod@dividend+2
  6196  000702  C0C7  F070         	movff	sprintf@_val+3,___llmod@dividend+3
  6197  000706  0100               	movlb	0	; () banked
  6198  000708  51CE               	movf	sprintf@c& (0+255),w,b
  6199  00070A  0D04               	mullw	4
  6200  00070C  0EAD               	movlw	low _dpowers
  6201  00070E  24F3               	addwf	prodl,w,c
  6202  000710  6EF6               	movwf	tblptrl,c
  6203  000712  0E7E               	movlw	high _dpowers
  6204  000714  20F4               	addwfc	prodh,w,c
  6205  000716  6EF7               	movwf	tblptrh,c
  6206  000718                     	if	1	;There are 3 active tblptr bytes
  6207  000718  6AF8               	clrf	tblptru,c
  6208  00071A  0E00               	movlw	low (__mediumconst shr (0+16))
  6209  00071C  22F8               	addwfc	tblptru,f,c
  6210  00071E                     	endif
  6211  00071E  0009               	tblrd		*+
  6212  000720  0100               	movlb	0	; () banked
  6213  000722  CFF5 F071          	movff	tablat,___llmod@divisor
  6214  000726  0009               	tblrd		*+
  6215  000728  0100               	movlb	0	; () banked
  6216  00072A  CFF5 F072          	movff	tablat,___llmod@divisor+1
  6217  00072E  0009               	tblrd		*+
  6218  000730  0100               	movlb	0	; () banked
  6219  000732  CFF5 F073          	movff	tablat,___llmod@divisor+2
  6220  000736  000A               	tblrd		*-
  6221  000738  0100               	movlb	0	; () banked
  6222  00073A  CFF5 F074          	movff	tablat,___llmod@divisor+3
  6223  00073E  EC13  F014         	call	___llmod	;wreg free
  6224  000742  C06D  F0C4         	movff	?___llmod,sprintf@_val
  6225  000746  C06E  F0C5         	movff	?___llmod+1,sprintf@_val+1
  6226  00074A  C06F  F0C6         	movff	?___llmod+2,sprintf@_val+2
  6227  00074E  C070  F0C7         	movff	?___llmod+3,sprintf@_val+3
  6228  000752                     l3896:
  6229  000752  0100               	movlb	0	; () banked
  6230  000754  07CE               	decf	sprintf@c& (0+255),f,b
  6231  000756  0100               	movlb	0	; () banked
  6232  000758  29CE               	incf	sprintf@c& (0+255),w,b
  6233  00075A  B4D8               	btfsc	status,2,c
  6234  00075C  D00E               	goto	l3904
  6235  00075E  D774               	goto	l3886
  6236  000760                     l3898:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  6240  000760  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6241  000764  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6242  000768  0E30               	movlw	48
  6243  00076A  6EDF               	movwf	indf2,c
  6244                           
  6245                           ; BSR set to: 0
  6246  00076C  0100               	movlb	0	; () banked
  6247  00076E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6248  000770  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;doprnt.c: 1246: prec--;
  6252  000772  0100               	movlb	0	; () banked
  6253  000774  07C2               	decf	sprintf@prec& (0+255),f,b
  6254  000776  A0D8               	btfss	status,0,c
  6255  000778  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6256  00077A                     l3904:
  6257                           
  6258                           ; BSR set to: 0
  6259  00077A  0100               	movlb	0	; () banked
  6260  00077C  51C3               	movf	(sprintf@prec+1)& (0+255),w,b
  6261  00077E  11C2               	iorwf	sprintf@prec& (0+255),w,b
  6262  000780  B4D8               	btfsc	status,2,c
  6263  000782  D0F2               	goto	l3946
  6264  000784  D7ED               	goto	l3898
  6265  000786                     l3906:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;doprnt.c: 1255: }
  6269                           ;doprnt.c: 1262: {
  6270                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6271  000786  C0BB  FFD9         	movff	sprintf@ap,fsr2l
  6272  00078A  C0BC  FFDA         	movff	sprintf@ap+1,fsr2h
  6273  00078E  0100               	movlb	0	; () banked
  6274  000790  CFDE F0C4          	movff	postinc2,sprintf@_val
  6275  000794  0100               	movlb	0	; () banked
  6276  000796  CFDD F0C5          	movff	postdec2,sprintf@_val+1
  6277  00079A  0100               	movlb	0	; () banked
  6278  00079C  0E00               	movlw	0
  6279  00079E  0100               	movlb	0	; () banked
  6280  0007A0  BFC5               	btfsc	(sprintf@_val+1)& (0+255),7,b
  6281  0007A2  0EFF               	movlw	-1
  6282  0007A4  0100               	movlb	0	; () banked
  6283  0007A6  6FC6               	movwf	(sprintf@_val+2)& (0+255),b
  6284  0007A8  0100               	movlb	0	; () banked
  6285  0007AA  6FC7               	movwf	(sprintf@_val+3)& (0+255),b
  6286                           
  6287                           ; BSR set to: 0
  6288  0007AC  0E02               	movlw	2
  6289  0007AE  0100               	movlb	0	; () banked
  6290  0007B0  27BB               	addwf	sprintf@ap& (0+255),f,b
  6291  0007B2  0E00               	movlw	0
  6292  0007B4  0100               	movlb	0	; () banked
  6293  0007B6  23BC               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  6297  0007B8  0100               	movlb	0	; () banked
  6298  0007BA  51C7               	movf	(sprintf@_val+3)& (0+255),w,b
  6299  0007BC  0A80               	xorlw	128
  6300  0007BE  0F80               	addlw	128
  6301  0007C0  E10B               	bnz	u3995
  6302  0007C2  0E00               	movlw	0
  6303  0007C4  0100               	movlb	0	; () banked
  6304  0007C6  5DC6               	subwf	(sprintf@_val+2)& (0+255),w,b
  6305  0007C8  E107               	bnz	u3995
  6306  0007CA  0E00               	movlw	0
  6307  0007CC  0100               	movlb	0	; () banked
  6308  0007CE  5DC5               	subwf	(sprintf@_val+1)& (0+255),w,b
  6309  0007D0  E103               	bnz	u3995
  6310  0007D2  0E00               	movlw	0
  6311  0007D4  0100               	movlb	0	; () banked
  6312  0007D6  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6313  0007D8                     u3995:
  6314  0007D8  B0D8               	btfsc	status,0,c
  6315  0007DA  D012               	goto	l3916
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;doprnt.c: 1271: flag |= 0x03;
  6319  0007DC  0E03               	movlw	3
  6320  0007DE  0100               	movlb	0	; () banked
  6321  0007E0  13BD               	iorwf	sprintf@flag& (0+255),f,b
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;doprnt.c: 1272: _val._val = -_val._val;
  6325  0007E2  0100               	movlb	0	; () banked
  6326  0007E4  1FC7               	comf	(sprintf@_val+3)& (0+255),f,b
  6327  0007E6  0100               	movlb	0	; () banked
  6328  0007E8  1FC6               	comf	(sprintf@_val+2)& (0+255),f,b
  6329  0007EA  0100               	movlb	0	; () banked
  6330  0007EC  1FC5               	comf	(sprintf@_val+1)& (0+255),f,b
  6331  0007EE  0100               	movlb	0	; () banked
  6332  0007F0  6DC4               	negf	sprintf@_val& (0+255),b
  6333  0007F2  0E00               	movlw	0
  6334  0007F4  0100               	movlb	0	; () banked
  6335  0007F6  23C5               	addwfc	(sprintf@_val+1)& (0+255),f,b
  6336  0007F8  0100               	movlb	0	; () banked
  6337  0007FA  23C6               	addwfc	(sprintf@_val+2)& (0+255),f,b
  6338  0007FC  0100               	movlb	0	; () banked
  6339  0007FE  23C7               	addwfc	(sprintf@_val+3)& (0+255),f,b
  6340  000800                     l3916:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;doprnt.c: 1273: }
  6344                           ;doprnt.c: 1275: }
  6345                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6346  000800  0E01               	movlw	1
  6347  000802  0100               	movlb	0	; () banked
  6348  000804  6FCE               	movwf	sprintf@c& (0+255),b
  6349  000806                     
  6350                           ; BSR set to: 0
  6351  000806  0100               	movlb	0	; () banked
  6352  000808  51CE               	movf	sprintf@c& (0+255),w,b
  6353  00080A  0A0A               	xorlw	10
  6354  00080C  B4D8               	btfsc	status,2,c
  6355  00080E  D021               	goto	l3930
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  6359                           
  6360                           ; BSR set to: 0
  6361                           
  6362                           ; BSR set to: 0
  6363  000810  0100               	movlb	0	; () banked
  6364  000812  51CE               	movf	sprintf@c& (0+255),w,b
  6365  000814  0D04               	mullw	4
  6366  000816  0EAD               	movlw	low _dpowers
  6367  000818  24F3               	addwf	prodl,w,c
  6368  00081A  6EF6               	movwf	tblptrl,c
  6369  00081C  0E7E               	movlw	high _dpowers
  6370  00081E  20F4               	addwfc	prodh,w,c
  6371  000820  6EF7               	movwf	tblptrh,c
  6372  000822                     	if	1	;There are 3 active tblptr bytes
  6373  000822  6AF8               	clrf	tblptru,c
  6374  000824  0E00               	movlw	low (__mediumconst shr (0+16))
  6375  000826  22F8               	addwfc	tblptru,f,c
  6376  000828                     	endif
  6377  000828  0009               	tblrd		*+
  6378  00082A  50F5               	movf	tablat,w,c
  6379  00082C  0100               	movlb	0	; () banked
  6380  00082E  5DC4               	subwf	sprintf@_val& (0+255),w,b
  6381  000830  0009               	tblrd		*+
  6382  000832  50F5               	movf	tablat,w,c
  6383  000834  0100               	movlb	0	; () banked
  6384  000836  59C5               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6385  000838  0009               	tblrd		*+
  6386  00083A  50F5               	movf	tablat,w,c
  6387  00083C  0100               	movlb	0	; () banked
  6388  00083E  59C6               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6389  000840  0009               	tblrd		*+
  6390  000842  50F5               	movf	tablat,w,c
  6391  000844  0100               	movlb	0	; () banked
  6392  000846  59C7               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6393  000848  A0D8               	btfss	status,0,c
  6394  00084A  D003               	goto	l3930
  6395                           
  6396                           ; BSR set to: 0
  6397                           
  6398                           ; BSR set to: 0
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;doprnt.c: 1316: break;
  6402  00084C  0100               	movlb	0	; () banked
  6403  00084E  2BCE               	incf	sprintf@c& (0+255),f,b
  6404  000850  D7DA               	goto	L11
  6405  000852                     l3930:
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;doprnt.c: 1431: {
  6409                           ;doprnt.c: 1447: if(flag & 0x03)
  6410  000852  0E03               	movlw	3
  6411  000854  0100               	movlb	0	; () banked
  6412  000856  15BD               	andwf	sprintf@flag& (0+255),w,b
  6413  000858  0100               	movlb	0	; () banked
  6414  00085A  6FA6               	movwf	??_sprintf& (0+255),b
  6415  00085C  0E00               	movlw	0
  6416  00085E  0100               	movlb	0	; () banked
  6417  000860  15BE               	andwf	(sprintf@flag+1)& (0+255),w,b
  6418  000862  0100               	movlb	0	; () banked
  6419  000864  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  6420  000866  0100               	movlb	0	; () banked
  6421  000868  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  6422  00086A  11A6               	iorwf	??_sprintf& (0+255),w,b
  6423  00086C  B4D8               	btfsc	status,2,c
  6424  00086E  D009               	goto	l3936
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6428  000870  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6429  000874  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6430  000878  0E2D               	movlw	45
  6431  00087A  6EDF               	movwf	indf2,c
  6432                           
  6433                           ; BSR set to: 0
  6434  00087C  0100               	movlb	0	; () banked
  6435  00087E  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6436  000880  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6437  000882                     l3936:
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;doprnt.c: 1478: }
  6441                           ;doprnt.c: 1481: prec = c;
  6442  000882  0100               	movlb	0	; () banked
  6443  000884  51CE               	movf	sprintf@c& (0+255),w,b
  6444  000886  0100               	movlb	0	; () banked
  6445  000888  6FC2               	movwf	sprintf@prec& (0+255),b
  6446  00088A  0100               	movlb	0	; () banked
  6447  00088C  6BC3               	clrf	(sprintf@prec+1)& (0+255),b
  6448  00088E  0100               	movlb	0	; () banked
  6449  000890  BFC2               	btfsc	sprintf@prec& (0+255),7,b
  6450  000892  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6451                           
  6452                           ;doprnt.c: 1483: while(prec--) {
  6453  000894  D05F               	goto	l3944
  6454  000896                     l3938:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;doprnt.c: 1487: {
  6458                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6459  000896  0100               	movlb	0	; () banked
  6460  000898  C0C2  F0A6         	movff	sprintf@prec,??_sprintf
  6461  00089C  0100               	movlb	0	; () banked
  6462  00089E  C0C3  F0A7         	movff	sprintf@prec+1,??_sprintf+1
  6463  0008A2  0100               	movlb	0	; () banked
  6464  0008A4  90D8               	bcf	status,0,c
  6465  0008A6  37A6               	rlcf	??_sprintf& (0+255),f,b
  6466  0008A8  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6467  0008AA  0100               	movlb	0	; () banked
  6468  0008AC  90D8               	bcf	status,0,c
  6469  0008AE  37A6               	rlcf	??_sprintf& (0+255),f,b
  6470  0008B0  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  6471  0008B2  0EAD               	movlw	low _dpowers
  6472  0008B4  0100               	movlb	0	; () banked
  6473  0008B6  25A6               	addwf	??_sprintf& (0+255),w,b
  6474  0008B8  6EF6               	movwf	tblptrl,c
  6475  0008BA  0E7E               	movlw	high _dpowers
  6476  0008BC  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  6477  0008BE  6EF7               	movwf	tblptrh,c
  6478  0008C0                     	if	1	;There are 3 active tblptr bytes
  6479  0008C0  6AF8               	clrf	tblptru,c
  6480  0008C2  0E00               	movlw	low (__mediumconst shr (0+16))
  6481  0008C4  22F8               	addwfc	tblptru,f,c
  6482  0008C6                     	endif
  6483  0008C6  0009               	tblrd		*+
  6484  0008C8  0100               	movlb	0	; () banked
  6485  0008CA  CFF5 F064          	movff	tablat,___lldiv@divisor
  6486  0008CE  0009               	tblrd		*+
  6487  0008D0  0100               	movlb	0	; () banked
  6488  0008D2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  6489  0008D6  0009               	tblrd		*+
  6490  0008D8  0100               	movlb	0	; () banked
  6491  0008DA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  6492  0008DE  000A               	tblrd		*-
  6493  0008E0  0100               	movlb	0	; () banked
  6494  0008E2  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  6495  0008E6  C0C4  F060         	movff	sprintf@_val,___lldiv@dividend
  6496  0008EA  C0C5  F061         	movff	sprintf@_val+1,___lldiv@dividend+1
  6497  0008EE  C0C6  F062         	movff	sprintf@_val+2,___lldiv@dividend+2
  6498  0008F2  C0C7  F063         	movff	sprintf@_val+3,___lldiv@dividend+3
  6499  0008F6  EC9E  F010         	call	___lldiv	;wreg free
  6500  0008FA  C060  F06D         	movff	?___lldiv,___llmod@dividend
  6501  0008FE  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  6502  000902  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  6503  000906  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  6504  00090A  0E0A               	movlw	10
  6505  00090C  0100               	movlb	0	; () banked
  6506  00090E  6F71               	movwf	___llmod@divisor& (0+255),b
  6507  000910  0E00               	movlw	0
  6508  000912  0100               	movlb	0	; () banked
  6509  000914  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  6510  000916  0E00               	movlw	0
  6511  000918  0100               	movlb	0	; () banked
  6512  00091A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  6513  00091C  0E00               	movlw	0
  6514  00091E  0100               	movlb	0	; () banked
  6515  000920  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  6516  000922  EC13  F014         	call	___llmod	;wreg free
  6517  000926  C06D  F0A8         	movff	?___llmod,??_sprintf+2
  6518  00092A  C06E  F0A9         	movff	?___llmod+1,??_sprintf+3
  6519  00092E  C06F  F0AA         	movff	?___llmod+2,??_sprintf+4
  6520  000932  C070  F0AB         	movff	?___llmod+3,??_sprintf+5
  6521  000936  0100               	movlb	0	; () banked
  6522  000938  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  6523  00093A  0F30               	addlw	48
  6524  00093C  0100               	movlb	0	; () banked
  6525  00093E  6FCE               	movwf	sprintf@c& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;doprnt.c: 1532: }
  6529                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6530  000940  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6531  000944  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6532  000948  0100               	movlb	0	; () banked
  6533  00094A  C0CE  FFDF         	movff	sprintf@c,indf2
  6534                           
  6535                           ; BSR set to: 0
  6536  00094E  0100               	movlb	0	; () banked
  6537  000950  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  6538  000952  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  6539  000954                     l3944:
  6540                           
  6541                           ; BSR set to: 0
  6542  000954  0100               	movlb	0	; () banked
  6543  000956  07C2               	decf	sprintf@prec& (0+255),f,b
  6544  000958  A0D8               	btfss	status,0,c
  6545  00095A  07C3               	decf	(sprintf@prec+1)& (0+255),f,b
  6546  00095C  0100               	movlb	0	; () banked
  6547  00095E  29C2               	incf	sprintf@prec& (0+255),w,b
  6548  000960  B4D8               	btfsc	status,2,c
  6549  000962  29C3               	incf	(sprintf@prec+1)& (0+255),w,b
  6550  000964  A4D8               	btfss	status,2,c
  6551  000966  D797               	goto	l3938
  6552  000968                     l3946:
  6553                           
  6554                           ; BSR set to: 0
  6555  000968  0100               	movlb	0	; () banked
  6556  00096A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  6557  00096E  0100               	movlb	0	; () banked
  6558  000970  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  6559  000974  0100               	movlb	0	; () banked
  6560  000976  4BA1               	infsnz	sprintf@f& (0+255),f,b
  6561  000978  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  6562  00097A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6563  00097A  6AF8               	clrf	tblptru,c
  6564  00097C                     	endif
  6565  00097C                     	if	0	;tblptru may be non-zero
  6566  00097C                     	endif
  6567  00097C  0008               	tblrd		*
  6568  00097E  0100               	movlb	0	; () banked
  6569  000980  CFF5 F0CE          	movff	tablat,sprintf@c
  6570  000984  0100               	movlb	0	; () banked
  6571  000986  67CE               	tstfsz	sprintf@c& (0+255),b
  6572  000988  EF18  F000         	goto	l3744
  6573  00098C                     l3948:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;doprnt.c: 1547: *sp = 0;
  6577  00098C  C09F  FFD9         	movff	sprintf@sp,fsr2l
  6578  000990  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  6579  000994  0E00               	movlw	0
  6580  000996  6EDF               	movwf	indf2,c
  6581                           
  6582                           ; BSR set to: 0
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;doprnt.c: 1549: return 0;
  6586                           ;	Return value of _sprintf is never used
  6587  000998  0012               	return	
  6588  00099A                     __end_of_sprintf:
  6589                           	opt stack 0
  6590                           tblptru	equ	0xFF8
  6591                           tblptrh	equ	0xFF7
  6592                           tblptrl	equ	0xFF6
  6593                           tablat	equ	0xFF5
  6594                           prodh	equ	0xFF4
  6595                           prodl	equ	0xFF3
  6596                           intcon	equ	0xFF2
  6597                           intcon2	equ	0xFF1
  6598                           intcon3	equ	0xFF0
  6599                           indf0	equ	0xFEF
  6600                           postinc0	equ	0xFEE
  6601                           fsr0h	equ	0xFEA
  6602                           fsr0l	equ	0xFE9
  6603                           wreg	equ	0xFE8
  6604                           postinc1	equ	0xFE6
  6605                           postdec1	equ	0xFE5
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _scale *****************
  6615 ;; Defined at:
  6616 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  scl             1    wreg     char 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  scl             1   41[BANK0 ] char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  3   35[BANK0 ] char 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6630 ;;      Params:         0       3       0       0       0       0       0       0       0
  6631 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6633 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6634 ;;Total ram usage:        7 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    6
  6637 ;; This function calls:
  6638 ;;		___awdiv
  6639 ;;		___awmod
  6640 ;;		___ftmul
  6641 ;;		___wmul
  6642 ;; This function is called by:
  6643 ;;		_sprintf
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text29
  6648  00099A                     __ptext29:
  6649                           	opt stack 0
  6650  00099A                     _scale:
  6651                           	opt stack 21
  6652                           
  6653                           ; BSR set to: 0
  6654                           ;incstack = 0
  6655                           ;scale@scl stored from wreg
  6656  00099A  0100               	movlb	0	; () banked
  6657  00099C  6F89               	movwf	scale@scl& (0+255),b
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;doprnt.c: 428: if(scl < 0) {
  6661  00099E  0100               	movlb	0	; () banked
  6662  0009A0  AF89               	btfss	scale@scl& (0+255),7,b
  6663  0009A2  D152               	goto	l3476
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;doprnt.c: 429: scl = -scl;
  6667  0009A4  0100               	movlb	0	; () banked
  6668  0009A6  6D89               	negf	scale@scl& (0+255),b
  6669                           
  6670                           ;doprnt.c: 430: if(scl>=110)
  6671  0009A8  0100               	movlb	0	; () banked
  6672  0009AA  5189               	movf	scale@scl& (0+255),w,b
  6673  0009AC  0A80               	xorlw	128
  6674  0009AE  0F12               	addlw	-238
  6675  0009B0  A0D8               	btfss	status,0,c
  6676  0009B2  D0C9               	goto	l3466
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6680  0009B4  0E00               	movlw	0
  6681  0009B6  0100               	movlb	0	; () banked
  6682  0009B8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6683  0009BA  0E03               	movlw	3
  6684  0009BC  0100               	movlb	0	; () banked
  6685  0009BE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6686  0009C0  0E00               	movlw	0
  6687  0009C2  0100               	movlb	0	; () banked
  6688  0009C4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6689  0009C6  0E0A               	movlw	10
  6690  0009C8  0100               	movlb	0	; () banked
  6691  0009CA  6F68               	movwf	___awdiv@divisor& (0+255),b
  6692  0009CC  0E00               	movlw	0
  6693  0009CE  0100               	movlb	0	; () banked
  6694  0009D0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6695  0009D2  0E64               	movlw	100
  6696  0009D4  0100               	movlb	0	; () banked
  6697  0009D6  6F62               	movwf	___awmod@divisor& (0+255),b
  6698  0009D8  0100               	movlb	0	; () banked
  6699  0009DA  5189               	movf	scale@scl& (0+255),w,b
  6700  0009DC  0100               	movlb	0	; () banked
  6701  0009DE  6F60               	movwf	___awmod@dividend& (0+255),b
  6702  0009E0  0100               	movlb	0	; () banked
  6703  0009E2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6704  0009E4  0100               	movlb	0	; () banked
  6705  0009E6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6706  0009E8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6707  0009EA  ECA6  F012         	call	___awmod	;wreg free
  6708  0009EE  0100               	movlb	0	; () banked
  6709  0009F0  C060  F066         	movff	?___awmod,___awdiv@dividend
  6710  0009F4  0100               	movlb	0	; () banked
  6711  0009F6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  6712  0009FA  EC2D  F010         	call	___awdiv	;wreg free
  6713  0009FE  0E09               	movlw	9
  6714  000A00  0100               	movlb	0	; () banked
  6715  000A02  2566               	addwf	?___awdiv& (0+255),w,b
  6716  000A04  0100               	movlb	0	; () banked
  6717  000A06  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6718  000A08  0E00               	movlw	0
  6719  000A0A  0100               	movlb	0	; () banked
  6720  000A0C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6721  000A0E  0100               	movlb	0	; () banked
  6722  000A10  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6723  000A12  EC42  F019         	call	___wmul	;wreg free
  6724  000A16  0ED5               	movlw	low __npowers_
  6725  000A18  0100               	movlb	0	; () banked
  6726  000A1A  256E               	addwf	?___wmul& (0+255),w,b
  6727  000A1C  6EF6               	movwf	tblptrl,c
  6728  000A1E  0E7E               	movlw	high __npowers_
  6729  000A20  0100               	movlb	0	; () banked
  6730  000A22  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6731  000A24  6EF7               	movwf	tblptrh,c
  6732  000A26                     	if	1	;There are 3 active tblptr bytes
  6733  000A26  6AF8               	clrf	tblptru,c
  6734  000A28  0E00               	movlw	low (__mediumconst shr (0+16))
  6735  000A2A  22F8               	addwfc	tblptru,f,c
  6736  000A2C                     	endif
  6737  000A2C  0009               	tblrd		*+
  6738  000A2E  0100               	movlb	0	; () banked
  6739  000A30  CFF5 F077          	movff	tablat,___ftmul@f2
  6740  000A34  0009               	tblrd		*+
  6741  000A36  0100               	movlb	0	; () banked
  6742  000A38  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6743  000A3C  000A               	tblrd		*-
  6744  000A3E  0100               	movlb	0	; () banked
  6745  000A40  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6746  000A44  0E00               	movlw	0
  6747  000A46  0100               	movlb	0	; () banked
  6748  000A48  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6749  000A4A  0E64               	movlw	100
  6750  000A4C  0100               	movlb	0	; () banked
  6751  000A4E  6F68               	movwf	___awdiv@divisor& (0+255),b
  6752  000A50  0100               	movlb	0	; () banked
  6753  000A52  5189               	movf	scale@scl& (0+255),w,b
  6754  000A54  0100               	movlb	0	; () banked
  6755  000A56  6F66               	movwf	___awdiv@dividend& (0+255),b
  6756  000A58  0100               	movlb	0	; () banked
  6757  000A5A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  6758  000A5C  0100               	movlb	0	; () banked
  6759  000A5E  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  6760  000A60  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6761  000A62  EC2D  F010         	call	___awdiv	;wreg free
  6762  000A66  0E12               	movlw	18
  6763  000A68  0100               	movlb	0	; () banked
  6764  000A6A  2566               	addwf	?___awdiv& (0+255),w,b
  6765  000A6C  0100               	movlb	0	; () banked
  6766  000A6E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6767  000A70  0E00               	movlw	0
  6768  000A72  0100               	movlb	0	; () banked
  6769  000A74  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6770  000A76  0100               	movlb	0	; () banked
  6771  000A78  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6772  000A7A  0E00               	movlw	0
  6773  000A7C  0100               	movlb	0	; () banked
  6774  000A7E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6775  000A80  0E03               	movlw	3
  6776  000A82  0100               	movlb	0	; () banked
  6777  000A84  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6778  000A86  EC42  F019         	call	___wmul	;wreg free
  6779  000A8A  0ED5               	movlw	low __npowers_
  6780  000A8C  0100               	movlb	0	; () banked
  6781  000A8E  256E               	addwf	?___wmul& (0+255),w,b
  6782  000A90  6EF6               	movwf	tblptrl,c
  6783  000A92  0E7E               	movlw	high __npowers_
  6784  000A94  0100               	movlb	0	; () banked
  6785  000A96  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6786  000A98  6EF7               	movwf	tblptrh,c
  6787  000A9A                     	if	1	;There are 3 active tblptr bytes
  6788  000A9A  6AF8               	clrf	tblptru,c
  6789  000A9C  0E00               	movlw	low (__mediumconst shr (0+16))
  6790  000A9E  22F8               	addwfc	tblptru,f,c
  6791  000AA0                     	endif
  6792  000AA0  0009               	tblrd		*+
  6793  000AA2  0100               	movlb	0	; () banked
  6794  000AA4  CFF5 F074          	movff	tablat,___ftmul@f1
  6795  000AA8  0009               	tblrd		*+
  6796  000AAA  0100               	movlb	0	; () banked
  6797  000AAC  CFF5 F075          	movff	tablat,___ftmul@f1+1
  6798  000AB0  000A               	tblrd		*-
  6799  000AB2  0100               	movlb	0	; () banked
  6800  000AB4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  6801  000AB8  EC0F  F00C         	call	___ftmul	;wreg free
  6802  000ABC  C074  F086         	movff	?___ftmul,_scale$2760
  6803  000AC0  C075  F087         	movff	?___ftmul+1,_scale$2760+1
  6804  000AC4  C076  F088         	movff	?___ftmul+2,_scale$2760+2
  6805                           
  6806                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6807  000AC8  C086  F074         	movff	_scale$2760,___ftmul@f1
  6808  000ACC  C087  F075         	movff	_scale$2760+1,___ftmul@f1+1
  6809  000AD0  C088  F076         	movff	_scale$2760+2,___ftmul@f1+2
  6810  000AD4  0E00               	movlw	0
  6811  000AD6  0100               	movlb	0	; () banked
  6812  000AD8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6813  000ADA  0E03               	movlw	3
  6814  000ADC  0100               	movlb	0	; () banked
  6815  000ADE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6816  000AE0  0E00               	movlw	0
  6817  000AE2  0100               	movlb	0	; () banked
  6818  000AE4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6819  000AE6  0E0A               	movlw	10
  6820  000AE8  0100               	movlb	0	; () banked
  6821  000AEA  6F62               	movwf	___awmod@divisor& (0+255),b
  6822  000AEC  0100               	movlb	0	; () banked
  6823  000AEE  5189               	movf	scale@scl& (0+255),w,b
  6824  000AF0  0100               	movlb	0	; () banked
  6825  000AF2  6F60               	movwf	___awmod@dividend& (0+255),b
  6826  000AF4  0100               	movlb	0	; () banked
  6827  000AF6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6828  000AF8  0100               	movlb	0	; () banked
  6829  000AFA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6830  000AFC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6831  000AFE  ECA6  F012         	call	___awmod	;wreg free
  6832  000B02  0100               	movlb	0	; () banked
  6833  000B04  C060  F06E         	movff	?___awmod,___wmul@multiplier
  6834  000B08  0100               	movlb	0	; () banked
  6835  000B0A  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  6836  000B0E  EC42  F019         	call	___wmul	;wreg free
  6837  000B12  0ED5               	movlw	low __npowers_
  6838  000B14  0100               	movlb	0	; () banked
  6839  000B16  256E               	addwf	?___wmul& (0+255),w,b
  6840  000B18  6EF6               	movwf	tblptrl,c
  6841  000B1A  0E7E               	movlw	high __npowers_
  6842  000B1C  0100               	movlb	0	; () banked
  6843  000B1E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6844  000B20  6EF7               	movwf	tblptrh,c
  6845  000B22                     	if	1	;There are 3 active tblptr bytes
  6846  000B22  6AF8               	clrf	tblptru,c
  6847  000B24  0E00               	movlw	low (__mediumconst shr (0+16))
  6848  000B26  22F8               	addwfc	tblptru,f,c
  6849  000B28                     	endif
  6850  000B28  0009               	tblrd		*+
  6851  000B2A  0100               	movlb	0	; () banked
  6852  000B2C  CFF5 F077          	movff	tablat,___ftmul@f2
  6853  000B30  0009               	tblrd		*+
  6854  000B32  0100               	movlb	0	; () banked
  6855  000B34  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6856  000B38  000A               	tblrd		*-
  6857  000B3A  0100               	movlb	0	; () banked
  6858  000B3C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6859  000B40  EC0F  F00C         	call	___ftmul	;wreg free
  6860  000B44  D1C8               	goto	L15
  6861  000B46                     l3466:
  6862                           
  6863                           ;doprnt.c: 432: else if(scl > 10)
  6864  000B46  0100               	movlb	0	; () banked
  6865  000B48  5189               	movf	scale@scl& (0+255),w,b
  6866  000B4A  0A80               	xorlw	128
  6867  000B4C  0F75               	addlw	-139
  6868  000B4E  A0D8               	btfss	status,0,c
  6869  000B50  D073               	goto	l3472
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6873  000B52  0E00               	movlw	0
  6874  000B54  0100               	movlb	0	; () banked
  6875  000B56  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  6876  000B58  0E0A               	movlw	10
  6877  000B5A  0100               	movlb	0	; () banked
  6878  000B5C  6F68               	movwf	___awdiv@divisor& (0+255),b
  6879  000B5E  0100               	movlb	0	; () banked
  6880  000B60  5189               	movf	scale@scl& (0+255),w,b
  6881  000B62  0100               	movlb	0	; () banked
  6882  000B64  6F66               	movwf	___awdiv@dividend& (0+255),b
  6883  000B66  0100               	movlb	0	; () banked
  6884  000B68  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  6885  000B6A  0100               	movlb	0	; () banked
  6886  000B6C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  6887  000B6E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6888  000B70  EC2D  F010         	call	___awdiv	;wreg free
  6889  000B74  0E09               	movlw	9
  6890  000B76  0100               	movlb	0	; () banked
  6891  000B78  2566               	addwf	?___awdiv& (0+255),w,b
  6892  000B7A  0100               	movlb	0	; () banked
  6893  000B7C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  6894  000B7E  0E00               	movlw	0
  6895  000B80  0100               	movlb	0	; () banked
  6896  000B82  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  6897  000B84  0100               	movlb	0	; () banked
  6898  000B86  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  6899  000B88  0E00               	movlw	0
  6900  000B8A  0100               	movlb	0	; () banked
  6901  000B8C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6902  000B8E  0E03               	movlw	3
  6903  000B90  0100               	movlb	0	; () banked
  6904  000B92  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6905  000B94  EC42  F019         	call	___wmul	;wreg free
  6906  000B98  0ED5               	movlw	low __npowers_
  6907  000B9A  0100               	movlb	0	; () banked
  6908  000B9C  256E               	addwf	?___wmul& (0+255),w,b
  6909  000B9E  6EF6               	movwf	tblptrl,c
  6910  000BA0  0E7E               	movlw	high __npowers_
  6911  000BA2  0100               	movlb	0	; () banked
  6912  000BA4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6913  000BA6  6EF7               	movwf	tblptrh,c
  6914  000BA8                     	if	1	;There are 3 active tblptr bytes
  6915  000BA8  6AF8               	clrf	tblptru,c
  6916  000BAA  0E00               	movlw	low (__mediumconst shr (0+16))
  6917  000BAC  22F8               	addwfc	tblptru,f,c
  6918  000BAE                     	endif
  6919  000BAE  0009               	tblrd		*+
  6920  000BB0  0100               	movlb	0	; () banked
  6921  000BB2  CFF5 F074          	movff	tablat,___ftmul@f1
  6922  000BB6  0009               	tblrd		*+
  6923  000BB8  0100               	movlb	0	; () banked
  6924  000BBA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  6925  000BBE  000A               	tblrd		*-
  6926  000BC0  0100               	movlb	0	; () banked
  6927  000BC2  CFF5 F076          	movff	tablat,___ftmul@f1+2
  6928  000BC6  0E00               	movlw	0
  6929  000BC8  0100               	movlb	0	; () banked
  6930  000BCA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6931  000BCC  0E03               	movlw	3
  6932  000BCE  0100               	movlb	0	; () banked
  6933  000BD0  6F70               	movwf	___wmul@multiplicand& (0+255),b
  6934  000BD2  0E00               	movlw	0
  6935  000BD4  0100               	movlb	0	; () banked
  6936  000BD6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6937  000BD8  0E0A               	movlw	10
  6938  000BDA  0100               	movlb	0	; () banked
  6939  000BDC  6F62               	movwf	___awmod@divisor& (0+255),b
  6940  000BDE  0100               	movlb	0	; () banked
  6941  000BE0  5189               	movf	scale@scl& (0+255),w,b
  6942  000BE2  0100               	movlb	0	; () banked
  6943  000BE4  6F60               	movwf	___awmod@dividend& (0+255),b
  6944  000BE6  0100               	movlb	0	; () banked
  6945  000BE8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6946  000BEA  0100               	movlb	0	; () banked
  6947  000BEC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  6948  000BEE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  6949  000BF0  ECA6  F012         	call	___awmod	;wreg free
  6950  000BF4  0100               	movlb	0	; () banked
  6951  000BF6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  6952  000BFA  0100               	movlb	0	; () banked
  6953  000BFC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  6954  000C00  EC42  F019         	call	___wmul	;wreg free
  6955  000C04  0ED5               	movlw	low __npowers_
  6956  000C06  0100               	movlb	0	; () banked
  6957  000C08  256E               	addwf	?___wmul& (0+255),w,b
  6958  000C0A  6EF6               	movwf	tblptrl,c
  6959  000C0C  0E7E               	movlw	high __npowers_
  6960  000C0E  0100               	movlb	0	; () banked
  6961  000C10  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  6962  000C12  6EF7               	movwf	tblptrh,c
  6963  000C14                     	if	1	;There are 3 active tblptr bytes
  6964  000C14  6AF8               	clrf	tblptru,c
  6965  000C16  0E00               	movlw	low (__mediumconst shr (0+16))
  6966  000C18  22F8               	addwfc	tblptru,f,c
  6967  000C1A                     	endif
  6968  000C1A  0009               	tblrd		*+
  6969  000C1C  0100               	movlb	0	; () banked
  6970  000C1E  CFF5 F077          	movff	tablat,___ftmul@f2
  6971  000C22  0009               	tblrd		*+
  6972  000C24  0100               	movlb	0	; () banked
  6973  000C26  CFF5 F078          	movff	tablat,___ftmul@f2+1
  6974  000C2A  000A               	tblrd		*-
  6975  000C2C  0100               	movlb	0	; () banked
  6976  000C2E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  6977  000C32  EC0F  F00C         	call	___ftmul	;wreg free
  6978  000C36  D14F               	goto	L15
  6979  000C38                     l3472:
  6980                           
  6981                           ;doprnt.c: 434: return _npowers_[scl];
  6982  000C38  0100               	movlb	0	; () banked
  6983  000C3A  5189               	movf	scale@scl& (0+255),w,b
  6984  000C3C  0D03               	mullw	3
  6985  000C3E  0ED5               	movlw	low __npowers_
  6986  000C40  24F3               	addwf	prodl,w,c
  6987  000C42  6EF6               	movwf	tblptrl,c
  6988  000C44  0E7E               	movlw	high __npowers_
  6989  000C46  D155               	goto	L14
  6990  000C48                     l3476:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;doprnt.c: 435: }
  6994                           ;doprnt.c: 436: if(scl>=110)
  6995  000C48  0100               	movlb	0	; () banked
  6996  000C4A  5189               	movf	scale@scl& (0+255),w,b
  6997  000C4C  0A80               	xorlw	128
  6998  000C4E  0F12               	addlw	-238
  6999  000C50  A0D8               	btfss	status,0,c
  7000  000C52  D0C9               	goto	l3484
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7004  000C54  0E00               	movlw	0
  7005  000C56  0100               	movlb	0	; () banked
  7006  000C58  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7007  000C5A  0E03               	movlw	3
  7008  000C5C  0100               	movlb	0	; () banked
  7009  000C5E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7010  000C60  0E00               	movlw	0
  7011  000C62  0100               	movlb	0	; () banked
  7012  000C64  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7013  000C66  0E0A               	movlw	10
  7014  000C68  0100               	movlb	0	; () banked
  7015  000C6A  6F68               	movwf	___awdiv@divisor& (0+255),b
  7016  000C6C  0E00               	movlw	0
  7017  000C6E  0100               	movlb	0	; () banked
  7018  000C70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7019  000C72  0E64               	movlw	100
  7020  000C74  0100               	movlb	0	; () banked
  7021  000C76  6F62               	movwf	___awmod@divisor& (0+255),b
  7022  000C78  0100               	movlb	0	; () banked
  7023  000C7A  5189               	movf	scale@scl& (0+255),w,b
  7024  000C7C  0100               	movlb	0	; () banked
  7025  000C7E  6F60               	movwf	___awmod@dividend& (0+255),b
  7026  000C80  0100               	movlb	0	; () banked
  7027  000C82  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7028  000C84  0100               	movlb	0	; () banked
  7029  000C86  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7030  000C88  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7031  000C8A  ECA6  F012         	call	___awmod	;wreg free
  7032  000C8E  0100               	movlb	0	; () banked
  7033  000C90  C060  F066         	movff	?___awmod,___awdiv@dividend
  7034  000C94  0100               	movlb	0	; () banked
  7035  000C96  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7036  000C9A  EC2D  F010         	call	___awdiv	;wreg free
  7037  000C9E  0E09               	movlw	9
  7038  000CA0  0100               	movlb	0	; () banked
  7039  000CA2  2566               	addwf	?___awdiv& (0+255),w,b
  7040  000CA4  0100               	movlb	0	; () banked
  7041  000CA6  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7042  000CA8  0E00               	movlw	0
  7043  000CAA  0100               	movlb	0	; () banked
  7044  000CAC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7045  000CAE  0100               	movlb	0	; () banked
  7046  000CB0  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7047  000CB2  EC42  F019         	call	___wmul	;wreg free
  7048  000CB6  0EFC               	movlw	low __powers_
  7049  000CB8  0100               	movlb	0	; () banked
  7050  000CBA  256E               	addwf	?___wmul& (0+255),w,b
  7051  000CBC  6EF6               	movwf	tblptrl,c
  7052  000CBE  0E7E               	movlw	high __powers_
  7053  000CC0  0100               	movlb	0	; () banked
  7054  000CC2  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7055  000CC4  6EF7               	movwf	tblptrh,c
  7056  000CC6                     	if	1	;There are 3 active tblptr bytes
  7057  000CC6  6AF8               	clrf	tblptru,c
  7058  000CC8  0E00               	movlw	low (__mediumconst shr (0+16))
  7059  000CCA  22F8               	addwfc	tblptru,f,c
  7060  000CCC                     	endif
  7061  000CCC  0009               	tblrd		*+
  7062  000CCE  0100               	movlb	0	; () banked
  7063  000CD0  CFF5 F077          	movff	tablat,___ftmul@f2
  7064  000CD4  0009               	tblrd		*+
  7065  000CD6  0100               	movlb	0	; () banked
  7066  000CD8  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7067  000CDC  000A               	tblrd		*-
  7068  000CDE  0100               	movlb	0	; () banked
  7069  000CE0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7070  000CE4  0E00               	movlw	0
  7071  000CE6  0100               	movlb	0	; () banked
  7072  000CE8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7073  000CEA  0E64               	movlw	100
  7074  000CEC  0100               	movlb	0	; () banked
  7075  000CEE  6F68               	movwf	___awdiv@divisor& (0+255),b
  7076  000CF0  0100               	movlb	0	; () banked
  7077  000CF2  5189               	movf	scale@scl& (0+255),w,b
  7078  000CF4  0100               	movlb	0	; () banked
  7079  000CF6  6F66               	movwf	___awdiv@dividend& (0+255),b
  7080  000CF8  0100               	movlb	0	; () banked
  7081  000CFA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7082  000CFC  0100               	movlb	0	; () banked
  7083  000CFE  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7084  000D00  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7085  000D02  EC2D  F010         	call	___awdiv	;wreg free
  7086  000D06  0E12               	movlw	18
  7087  000D08  0100               	movlb	0	; () banked
  7088  000D0A  2566               	addwf	?___awdiv& (0+255),w,b
  7089  000D0C  0100               	movlb	0	; () banked
  7090  000D0E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7091  000D10  0E00               	movlw	0
  7092  000D12  0100               	movlb	0	; () banked
  7093  000D14  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7094  000D16  0100               	movlb	0	; () banked
  7095  000D18  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7096  000D1A  0E00               	movlw	0
  7097  000D1C  0100               	movlb	0	; () banked
  7098  000D1E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7099  000D20  0E03               	movlw	3
  7100  000D22  0100               	movlb	0	; () banked
  7101  000D24  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7102  000D26  EC42  F019         	call	___wmul	;wreg free
  7103  000D2A  0EFC               	movlw	low __powers_
  7104  000D2C  0100               	movlb	0	; () banked
  7105  000D2E  256E               	addwf	?___wmul& (0+255),w,b
  7106  000D30  6EF6               	movwf	tblptrl,c
  7107  000D32  0E7E               	movlw	high __powers_
  7108  000D34  0100               	movlb	0	; () banked
  7109  000D36  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7110  000D38  6EF7               	movwf	tblptrh,c
  7111  000D3A                     	if	1	;There are 3 active tblptr bytes
  7112  000D3A  6AF8               	clrf	tblptru,c
  7113  000D3C  0E00               	movlw	low (__mediumconst shr (0+16))
  7114  000D3E  22F8               	addwfc	tblptru,f,c
  7115  000D40                     	endif
  7116  000D40  0009               	tblrd		*+
  7117  000D42  0100               	movlb	0	; () banked
  7118  000D44  CFF5 F074          	movff	tablat,___ftmul@f1
  7119  000D48  0009               	tblrd		*+
  7120  000D4A  0100               	movlb	0	; () banked
  7121  000D4C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7122  000D50  000A               	tblrd		*-
  7123  000D52  0100               	movlb	0	; () banked
  7124  000D54  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7125  000D58  EC0F  F00C         	call	___ftmul	;wreg free
  7126  000D5C  C074  F086         	movff	?___ftmul,_scale$2760
  7127  000D60  C075  F087         	movff	?___ftmul+1,_scale$2760+1
  7128  000D64  C076  F088         	movff	?___ftmul+2,_scale$2760+2
  7129                           
  7130                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7131  000D68  C086  F074         	movff	_scale$2760,___ftmul@f1
  7132  000D6C  C087  F075         	movff	_scale$2760+1,___ftmul@f1+1
  7133  000D70  C088  F076         	movff	_scale$2760+2,___ftmul@f1+2
  7134  000D74  0E00               	movlw	0
  7135  000D76  0100               	movlb	0	; () banked
  7136  000D78  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7137  000D7A  0E03               	movlw	3
  7138  000D7C  0100               	movlb	0	; () banked
  7139  000D7E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7140  000D80  0E00               	movlw	0
  7141  000D82  0100               	movlb	0	; () banked
  7142  000D84  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7143  000D86  0E0A               	movlw	10
  7144  000D88  0100               	movlb	0	; () banked
  7145  000D8A  6F62               	movwf	___awmod@divisor& (0+255),b
  7146  000D8C  0100               	movlb	0	; () banked
  7147  000D8E  5189               	movf	scale@scl& (0+255),w,b
  7148  000D90  0100               	movlb	0	; () banked
  7149  000D92  6F60               	movwf	___awmod@dividend& (0+255),b
  7150  000D94  0100               	movlb	0	; () banked
  7151  000D96  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7152  000D98  0100               	movlb	0	; () banked
  7153  000D9A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7154  000D9C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7155  000D9E  ECA6  F012         	call	___awmod	;wreg free
  7156  000DA2  0100               	movlb	0	; () banked
  7157  000DA4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7158  000DA8  0100               	movlb	0	; () banked
  7159  000DAA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7160  000DAE  EC42  F019         	call	___wmul	;wreg free
  7161  000DB2  0EFC               	movlw	low __powers_
  7162  000DB4  0100               	movlb	0	; () banked
  7163  000DB6  256E               	addwf	?___wmul& (0+255),w,b
  7164  000DB8  6EF6               	movwf	tblptrl,c
  7165  000DBA  0E7E               	movlw	high __powers_
  7166  000DBC  0100               	movlb	0	; () banked
  7167  000DBE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7168  000DC0  6EF7               	movwf	tblptrh,c
  7169  000DC2                     	if	1	;There are 3 active tblptr bytes
  7170  000DC2  6AF8               	clrf	tblptru,c
  7171  000DC4  0E00               	movlw	low (__mediumconst shr (0+16))
  7172  000DC6  22F8               	addwfc	tblptru,f,c
  7173  000DC8                     	endif
  7174  000DC8  0009               	tblrd		*+
  7175  000DCA  0100               	movlb	0	; () banked
  7176  000DCC  CFF5 F077          	movff	tablat,___ftmul@f2
  7177  000DD0  0009               	tblrd		*+
  7178  000DD2  0100               	movlb	0	; () banked
  7179  000DD4  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7180  000DD8  000A               	tblrd		*-
  7181  000DDA  0100               	movlb	0	; () banked
  7182  000DDC  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7183  000DE0  EC0F  F00C         	call	___ftmul	;wreg free
  7184  000DE4  D078               	goto	L15
  7185  000DE6                     l3484:
  7186                           
  7187                           ;doprnt.c: 438: else if(scl > 10)
  7188  000DE6  0100               	movlb	0	; () banked
  7189  000DE8  5189               	movf	scale@scl& (0+255),w,b
  7190  000DEA  0A80               	xorlw	128
  7191  000DEC  0F75               	addlw	-139
  7192  000DEE  A0D8               	btfss	status,0,c
  7193  000DF0  D079               	goto	l3490
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7197  000DF2  0E00               	movlw	0
  7198  000DF4  0100               	movlb	0	; () banked
  7199  000DF6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7200  000DF8  0E0A               	movlw	10
  7201  000DFA  0100               	movlb	0	; () banked
  7202  000DFC  6F68               	movwf	___awdiv@divisor& (0+255),b
  7203  000DFE  0100               	movlb	0	; () banked
  7204  000E00  5189               	movf	scale@scl& (0+255),w,b
  7205  000E02  0100               	movlb	0	; () banked
  7206  000E04  6F66               	movwf	___awdiv@dividend& (0+255),b
  7207  000E06  0100               	movlb	0	; () banked
  7208  000E08  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7209  000E0A  0100               	movlb	0	; () banked
  7210  000E0C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  7211  000E0E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7212  000E10  EC2D  F010         	call	___awdiv	;wreg free
  7213  000E14  0E09               	movlw	9
  7214  000E16  0100               	movlb	0	; () banked
  7215  000E18  2566               	addwf	?___awdiv& (0+255),w,b
  7216  000E1A  0100               	movlb	0	; () banked
  7217  000E1C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7218  000E1E  0E00               	movlw	0
  7219  000E20  0100               	movlb	0	; () banked
  7220  000E22  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7221  000E24  0100               	movlb	0	; () banked
  7222  000E26  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7223  000E28  0E00               	movlw	0
  7224  000E2A  0100               	movlb	0	; () banked
  7225  000E2C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7226  000E2E  0E03               	movlw	3
  7227  000E30  0100               	movlb	0	; () banked
  7228  000E32  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7229  000E34  EC42  F019         	call	___wmul	;wreg free
  7230  000E38  0EFC               	movlw	low __powers_
  7231  000E3A  0100               	movlb	0	; () banked
  7232  000E3C  256E               	addwf	?___wmul& (0+255),w,b
  7233  000E3E  6EF6               	movwf	tblptrl,c
  7234  000E40  0E7E               	movlw	high __powers_
  7235  000E42  0100               	movlb	0	; () banked
  7236  000E44  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7237  000E46  6EF7               	movwf	tblptrh,c
  7238  000E48                     	if	1	;There are 3 active tblptr bytes
  7239  000E48  6AF8               	clrf	tblptru,c
  7240  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
  7241  000E4C  22F8               	addwfc	tblptru,f,c
  7242  000E4E                     	endif
  7243  000E4E  0009               	tblrd		*+
  7244  000E50  0100               	movlb	0	; () banked
  7245  000E52  CFF5 F074          	movff	tablat,___ftmul@f1
  7246  000E56  0009               	tblrd		*+
  7247  000E58  0100               	movlb	0	; () banked
  7248  000E5A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7249  000E5E  000A               	tblrd		*-
  7250  000E60  0100               	movlb	0	; () banked
  7251  000E62  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7252  000E66  0E00               	movlw	0
  7253  000E68  0100               	movlb	0	; () banked
  7254  000E6A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7255  000E6C  0E03               	movlw	3
  7256  000E6E  0100               	movlb	0	; () banked
  7257  000E70  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7258  000E72  0E00               	movlw	0
  7259  000E74  0100               	movlb	0	; () banked
  7260  000E76  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7261  000E78  0E0A               	movlw	10
  7262  000E7A  0100               	movlb	0	; () banked
  7263  000E7C  6F62               	movwf	___awmod@divisor& (0+255),b
  7264  000E7E  0100               	movlb	0	; () banked
  7265  000E80  5189               	movf	scale@scl& (0+255),w,b
  7266  000E82  0100               	movlb	0	; () banked
  7267  000E84  6F60               	movwf	___awmod@dividend& (0+255),b
  7268  000E86  0100               	movlb	0	; () banked
  7269  000E88  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7270  000E8A  0100               	movlb	0	; () banked
  7271  000E8C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  7272  000E8E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  7273  000E90  ECA6  F012         	call	___awmod	;wreg free
  7274  000E94  0100               	movlb	0	; () banked
  7275  000E96  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7276  000E9A  0100               	movlb	0	; () banked
  7277  000E9C  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7278  000EA0  EC42  F019         	call	___wmul	;wreg free
  7279  000EA4  0EFC               	movlw	low __powers_
  7280  000EA6  0100               	movlb	0	; () banked
  7281  000EA8  256E               	addwf	?___wmul& (0+255),w,b
  7282  000EAA  6EF6               	movwf	tblptrl,c
  7283  000EAC  0E7E               	movlw	high __powers_
  7284  000EAE  0100               	movlb	0	; () banked
  7285  000EB0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7286  000EB2  6EF7               	movwf	tblptrh,c
  7287  000EB4                     	if	1	;There are 3 active tblptr bytes
  7288  000EB4  6AF8               	clrf	tblptru,c
  7289  000EB6  0E00               	movlw	low (__mediumconst shr (0+16))
  7290  000EB8  22F8               	addwfc	tblptru,f,c
  7291  000EBA                     	endif
  7292  000EBA  0009               	tblrd		*+
  7293  000EBC  0100               	movlb	0	; () banked
  7294  000EBE  CFF5 F077          	movff	tablat,___ftmul@f2
  7295  000EC2  0009               	tblrd		*+
  7296  000EC4  0100               	movlb	0	; () banked
  7297  000EC6  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7298  000ECA  000A               	tblrd		*-
  7299  000ECC  0100               	movlb	0	; () banked
  7300  000ECE  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7301  000ED2  EC0F  F00C         	call	___ftmul	;wreg free
  7302  000ED6                     L15:
  7303  000ED6  C074  F083         	movff	?___ftmul,?_scale
  7304  000EDA  C075  F084         	movff	?___ftmul+1,?_scale+1
  7305  000EDE  C076  F085         	movff	?___ftmul+2,?_scale+2
  7306  000EE2  D018               	goto	l489
  7307  000EE4                     l3490:
  7308                           
  7309                           ;doprnt.c: 440: return _powers_[scl];
  7310  000EE4  0100               	movlb	0	; () banked
  7311  000EE6  5189               	movf	scale@scl& (0+255),w,b
  7312  000EE8  0D03               	mullw	3
  7313  000EEA  0EFC               	movlw	low __powers_
  7314  000EEC  24F3               	addwf	prodl,w,c
  7315  000EEE  6EF6               	movwf	tblptrl,c
  7316  000EF0  0E7E               	movlw	high __powers_
  7317  000EF2                     L14:
  7318  000EF2  20F4               	addwfc	prodh,w,c
  7319  000EF4  6EF7               	movwf	tblptrh,c
  7320  000EF6                     	if	1	;There are 3 active tblptr bytes
  7321  000EF6  6AF8               	clrf	tblptru,c
  7322  000EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  7323  000EFA  22F8               	addwfc	tblptru,f,c
  7324  000EFC                     	endif
  7325  000EFC  0009               	tblrd		*+
  7326  000EFE  0100               	movlb	0	; () banked
  7327  000F00  CFF5 F083          	movff	tablat,?_scale
  7328  000F04  0009               	tblrd		*+
  7329  000F06  0100               	movlb	0	; () banked
  7330  000F08  CFF5 F084          	movff	tablat,?_scale+1
  7331  000F0C  000A               	tblrd		*-
  7332  000F0E  0100               	movlb	0	; () banked
  7333  000F10  CFF5 F085          	movff	tablat,?_scale+2
  7334  000F14                     l489:
  7335  000F14  0012               	return	
  7336  000F16                     __end_of_scale:
  7337                           	opt stack 0
  7338                           tblptru	equ	0xFF8
  7339                           tblptrh	equ	0xFF7
  7340                           tblptrl	equ	0xFF6
  7341                           tablat	equ	0xFF5
  7342                           prodh	equ	0xFF4
  7343                           prodl	equ	0xFF3
  7344                           intcon	equ	0xFF2
  7345                           intcon2	equ	0xFF1
  7346                           intcon3	equ	0xFF0
  7347                           indf0	equ	0xFEF
  7348                           postinc0	equ	0xFEE
  7349                           fsr0h	equ	0xFEA
  7350                           fsr0l	equ	0xFE9
  7351                           wreg	equ	0xFE8
  7352                           postinc1	equ	0xFE6
  7353                           postdec1	equ	0xFE5
  7354                           fsr1l	equ	0xFE1
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _fround *****************
  7363 ;; Defined at:
  7364 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  prec            1    wreg     unsigned char 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  prec            1   44[BANK0 ] unsigned char 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  3   35[BANK0 ] unsigned char 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7378 ;;      Params:         0       3       0       0       0       0       0       0       0
  7379 ;;      Locals:         0       7       0       0       0       0       0       0       0
  7380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7381 ;;      Totals:         0      10       0       0       0       0       0       0       0
  7382 ;;Total ram usage:       10 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    6
  7385 ;; This function calls:
  7386 ;;		___awdiv
  7387 ;;		___awmod
  7388 ;;		___ftmul
  7389 ;;		___wmul
  7390 ;; This function is called by:
  7391 ;;		_sprintf
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text30
  7396  000F16                     __ptext30:
  7397                           	opt stack 0
  7398  000F16                     _fround:
  7399                           	opt stack 21
  7400                           
  7401                           ;incstack = 0
  7402                           ;fround@prec stored from wreg
  7403  000F16  0100               	movlb	0	; () banked
  7404  000F18  6F8C               	movwf	fround@prec& (0+255),b
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;doprnt.c: 413: if(prec>=110)
  7408  000F1A  0E6D               	movlw	109
  7409  000F1C  0100               	movlb	0	; () banked
  7410  000F1E  658C               	cpfsgt	fround@prec& (0+255),b
  7411  000F20  D0D4               	goto	l3444
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7415  000F22  0E00               	movlw	0
  7416  000F24  0100               	movlb	0	; () banked
  7417  000F26  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7418  000F28  0E03               	movlw	3
  7419  000F2A  0100               	movlb	0	; () banked
  7420  000F2C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7421  000F2E  0E00               	movlw	0
  7422  000F30  0100               	movlb	0	; () banked
  7423  000F32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7424  000F34  0E0A               	movlw	10
  7425  000F36  0100               	movlb	0	; () banked
  7426  000F38  6F68               	movwf	___awdiv@divisor& (0+255),b
  7427  000F3A  0E00               	movlw	0
  7428  000F3C  0100               	movlb	0	; () banked
  7429  000F3E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7430  000F40  0E64               	movlw	100
  7431  000F42  0100               	movlb	0	; () banked
  7432  000F44  6F62               	movwf	___awmod@divisor& (0+255),b
  7433  000F46  0100               	movlb	0	; () banked
  7434  000F48  C08C  F060         	movff	fround@prec,___awmod@dividend
  7435  000F4C  0100               	movlb	0	; () banked
  7436  000F4E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7437  000F50  ECA6  F012         	call	___awmod	;wreg free
  7438  000F54  0100               	movlb	0	; () banked
  7439  000F56  C060  F066         	movff	?___awmod,___awdiv@dividend
  7440  000F5A  0100               	movlb	0	; () banked
  7441  000F5C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  7442  000F60  EC2D  F010         	call	___awdiv	;wreg free
  7443  000F64  0E09               	movlw	9
  7444  000F66  0100               	movlb	0	; () banked
  7445  000F68  2566               	addwf	?___awdiv& (0+255),w,b
  7446  000F6A  0100               	movlb	0	; () banked
  7447  000F6C  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7448  000F6E  0E00               	movlw	0
  7449  000F70  0100               	movlb	0	; () banked
  7450  000F72  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7451  000F74  0100               	movlb	0	; () banked
  7452  000F76  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7453  000F78  EC42  F019         	call	___wmul	;wreg free
  7454  000F7C  0ED5               	movlw	low __npowers_
  7455  000F7E  0100               	movlb	0	; () banked
  7456  000F80  256E               	addwf	?___wmul& (0+255),w,b
  7457  000F82  6EF6               	movwf	tblptrl,c
  7458  000F84  0E7E               	movlw	high __npowers_
  7459  000F86  0100               	movlb	0	; () banked
  7460  000F88  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7461  000F8A  6EF7               	movwf	tblptrh,c
  7462  000F8C                     	if	1	;There are 3 active tblptr bytes
  7463  000F8C  6AF8               	clrf	tblptru,c
  7464  000F8E  0E00               	movlw	low (__mediumconst shr (0+16))
  7465  000F90  22F8               	addwfc	tblptru,f,c
  7466  000F92                     	endif
  7467  000F92  0009               	tblrd		*+
  7468  000F94  0100               	movlb	0	; () banked
  7469  000F96  CFF5 F077          	movff	tablat,___ftmul@f2
  7470  000F9A  0009               	tblrd		*+
  7471  000F9C  0100               	movlb	0	; () banked
  7472  000F9E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7473  000FA2  000A               	tblrd		*-
  7474  000FA4  0100               	movlb	0	; () banked
  7475  000FA6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7476  000FAA  0E00               	movlw	0
  7477  000FAC  0100               	movlb	0	; () banked
  7478  000FAE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7479  000FB0  0E64               	movlw	100
  7480  000FB2  0100               	movlb	0	; () banked
  7481  000FB4  6F68               	movwf	___awdiv@divisor& (0+255),b
  7482  000FB6  0100               	movlb	0	; () banked
  7483  000FB8  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7484  000FBC  0100               	movlb	0	; () banked
  7485  000FBE  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7486  000FC0  EC2D  F010         	call	___awdiv	;wreg free
  7487  000FC4  0E12               	movlw	18
  7488  000FC6  0100               	movlb	0	; () banked
  7489  000FC8  2566               	addwf	?___awdiv& (0+255),w,b
  7490  000FCA  0100               	movlb	0	; () banked
  7491  000FCC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7492  000FCE  0E00               	movlw	0
  7493  000FD0  0100               	movlb	0	; () banked
  7494  000FD2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7495  000FD4  0100               	movlb	0	; () banked
  7496  000FD6  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7497  000FD8  0E00               	movlw	0
  7498  000FDA  0100               	movlb	0	; () banked
  7499  000FDC  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7500  000FDE  0E03               	movlw	3
  7501  000FE0  0100               	movlb	0	; () banked
  7502  000FE2  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7503  000FE4  EC42  F019         	call	___wmul	;wreg free
  7504  000FE8  0ED5               	movlw	low __npowers_
  7505  000FEA  0100               	movlb	0	; () banked
  7506  000FEC  256E               	addwf	?___wmul& (0+255),w,b
  7507  000FEE  6EF6               	movwf	tblptrl,c
  7508  000FF0  0E7E               	movlw	high __npowers_
  7509  000FF2  0100               	movlb	0	; () banked
  7510  000FF4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7511  000FF6  6EF7               	movwf	tblptrh,c
  7512  000FF8                     	if	1	;There are 3 active tblptr bytes
  7513  000FF8  6AF8               	clrf	tblptru,c
  7514  000FFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7515  000FFC  22F8               	addwfc	tblptru,f,c
  7516  000FFE                     	endif
  7517  000FFE  0009               	tblrd		*+
  7518  001000  0100               	movlb	0	; () banked
  7519  001002  CFF5 F074          	movff	tablat,___ftmul@f1
  7520  001006  0009               	tblrd		*+
  7521  001008  0100               	movlb	0	; () banked
  7522  00100A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7523  00100E  000A               	tblrd		*-
  7524  001010  0100               	movlb	0	; () banked
  7525  001012  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7526  001016  EC0F  F00C         	call	___ftmul	;wreg free
  7527  00101A  C074  F089         	movff	?___ftmul,_fround$2758
  7528  00101E  C075  F08A         	movff	?___ftmul+1,_fround$2758+1
  7529  001022  C076  F08B         	movff	?___ftmul+2,_fround$2758+2
  7530                           
  7531                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7532  001026  0E00               	movlw	0
  7533  001028  0100               	movlb	0	; () banked
  7534  00102A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7535  00102C  0E03               	movlw	3
  7536  00102E  0100               	movlb	0	; () banked
  7537  001030  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7538  001032  0E00               	movlw	0
  7539  001034  0100               	movlb	0	; () banked
  7540  001036  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7541  001038  0E0A               	movlw	10
  7542  00103A  0100               	movlb	0	; () banked
  7543  00103C  6F62               	movwf	___awmod@divisor& (0+255),b
  7544  00103E  0100               	movlb	0	; () banked
  7545  001040  C08C  F060         	movff	fround@prec,___awmod@dividend
  7546  001044  0100               	movlb	0	; () banked
  7547  001046  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7548  001048  ECA6  F012         	call	___awmod	;wreg free
  7549  00104C  0100               	movlb	0	; () banked
  7550  00104E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7551  001052  0100               	movlb	0	; () banked
  7552  001054  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7553  001058  EC42  F019         	call	___wmul	;wreg free
  7554  00105C  0ED5               	movlw	low __npowers_
  7555  00105E  0100               	movlb	0	; () banked
  7556  001060  256E               	addwf	?___wmul& (0+255),w,b
  7557  001062  6EF6               	movwf	tblptrl,c
  7558  001064  0E7E               	movlw	high __npowers_
  7559  001066  0100               	movlb	0	; () banked
  7560  001068  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7561  00106A  6EF7               	movwf	tblptrh,c
  7562  00106C                     	if	1	;There are 3 active tblptr bytes
  7563  00106C  6AF8               	clrf	tblptru,c
  7564  00106E  0E00               	movlw	low (__mediumconst shr (0+16))
  7565  001070  22F8               	addwfc	tblptru,f,c
  7566  001072                     	endif
  7567  001072  0009               	tblrd		*+
  7568  001074  0100               	movlb	0	; () banked
  7569  001076  CFF5 F077          	movff	tablat,___ftmul@f2
  7570  00107A  0009               	tblrd		*+
  7571  00107C  0100               	movlb	0	; () banked
  7572  00107E  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7573  001082  000A               	tblrd		*-
  7574  001084  0100               	movlb	0	; () banked
  7575  001086  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7576  00108A  C089  F074         	movff	_fround$2758,___ftmul@f1
  7577  00108E  C08A  F075         	movff	_fround$2758+1,___ftmul@f1+1
  7578  001092  C08B  F076         	movff	_fround$2758+2,___ftmul@f1+2
  7579  001096  EC0F  F00C         	call	___ftmul	;wreg free
  7580  00109A  C074  F086         	movff	?___ftmul,_fround$2759
  7581  00109E  C075  F087         	movff	?___ftmul+1,_fround$2759+1
  7582  0010A2  C076  F088         	movff	?___ftmul+2,_fround$2759+2
  7583                           
  7584                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7585  0010A6  C086  F074         	movff	_fround$2759,___ftmul@f1
  7586  0010AA  C087  F075         	movff	_fround$2759+1,___ftmul@f1+1
  7587  0010AE  C088  F076         	movff	_fround$2759+2,___ftmul@f1+2
  7588  0010B2  0E00               	movlw	0
  7589  0010B4  0100               	movlb	0	; () banked
  7590  0010B6  6F77               	movwf	___ftmul@f2& (0+255),b
  7591  0010B8  0E00               	movlw	0
  7592  0010BA  0100               	movlb	0	; () banked
  7593  0010BC  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7594  0010BE  0E3F               	movlw	63
  7595  0010C0  0100               	movlb	0	; () banked
  7596  0010C2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7597  0010C4  EC0F  F00C         	call	___ftmul	;wreg free
  7598  0010C8  D0A9               	goto	L17
  7599  0010CA                     l3444:
  7600                           
  7601                           ;doprnt.c: 415: else if(prec > 10)
  7602  0010CA  0E0A               	movlw	10
  7603  0010CC  0100               	movlb	0	; () banked
  7604  0010CE  658C               	cpfsgt	fround@prec& (0+255),b
  7605  0010D0  D082               	goto	l3452
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7609  0010D2  0E00               	movlw	0
  7610  0010D4  0100               	movlb	0	; () banked
  7611  0010D6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7612  0010D8  0E03               	movlw	3
  7613  0010DA  0100               	movlb	0	; () banked
  7614  0010DC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7615  0010DE  0E00               	movlw	0
  7616  0010E0  0100               	movlb	0	; () banked
  7617  0010E2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  7618  0010E4  0E0A               	movlw	10
  7619  0010E6  0100               	movlb	0	; () banked
  7620  0010E8  6F62               	movwf	___awmod@divisor& (0+255),b
  7621  0010EA  0100               	movlb	0	; () banked
  7622  0010EC  C08C  F060         	movff	fround@prec,___awmod@dividend
  7623  0010F0  0100               	movlb	0	; () banked
  7624  0010F2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  7625  0010F4  ECA6  F012         	call	___awmod	;wreg free
  7626  0010F8  0100               	movlb	0	; () banked
  7627  0010FA  C060  F06E         	movff	?___awmod,___wmul@multiplier
  7628  0010FE  0100               	movlb	0	; () banked
  7629  001100  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  7630  001104  EC42  F019         	call	___wmul	;wreg free
  7631  001108  0ED5               	movlw	low __npowers_
  7632  00110A  0100               	movlb	0	; () banked
  7633  00110C  256E               	addwf	?___wmul& (0+255),w,b
  7634  00110E  6EF6               	movwf	tblptrl,c
  7635  001110  0E7E               	movlw	high __npowers_
  7636  001112  0100               	movlb	0	; () banked
  7637  001114  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7638  001116  6EF7               	movwf	tblptrh,c
  7639  001118                     	if	1	;There are 3 active tblptr bytes
  7640  001118  6AF8               	clrf	tblptru,c
  7641  00111A  0E00               	movlw	low (__mediumconst shr (0+16))
  7642  00111C  22F8               	addwfc	tblptru,f,c
  7643  00111E                     	endif
  7644  00111E  0009               	tblrd		*+
  7645  001120  0100               	movlb	0	; () banked
  7646  001122  CFF5 F077          	movff	tablat,___ftmul@f2
  7647  001126  0009               	tblrd		*+
  7648  001128  0100               	movlb	0	; () banked
  7649  00112A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  7650  00112E  000A               	tblrd		*-
  7651  001130  0100               	movlb	0	; () banked
  7652  001132  CFF5 F079          	movff	tablat,___ftmul@f2+2
  7653  001136  0E00               	movlw	0
  7654  001138  0100               	movlb	0	; () banked
  7655  00113A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  7656  00113C  0E0A               	movlw	10
  7657  00113E  0100               	movlb	0	; () banked
  7658  001140  6F68               	movwf	___awdiv@divisor& (0+255),b
  7659  001142  0100               	movlb	0	; () banked
  7660  001144  C08C  F066         	movff	fround@prec,___awdiv@dividend
  7661  001148  0100               	movlb	0	; () banked
  7662  00114A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  7663  00114C  EC2D  F010         	call	___awdiv	;wreg free
  7664  001150  0E09               	movlw	9
  7665  001152  0100               	movlb	0	; () banked
  7666  001154  2566               	addwf	?___awdiv& (0+255),w,b
  7667  001156  0100               	movlb	0	; () banked
  7668  001158  6F6E               	movwf	___wmul@multiplier& (0+255),b
  7669  00115A  0E00               	movlw	0
  7670  00115C  0100               	movlb	0	; () banked
  7671  00115E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  7672  001160  0100               	movlb	0	; () banked
  7673  001162  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7674  001164  0E00               	movlw	0
  7675  001166  0100               	movlb	0	; () banked
  7676  001168  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7677  00116A  0E03               	movlw	3
  7678  00116C  0100               	movlb	0	; () banked
  7679  00116E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  7680  001170  EC42  F019         	call	___wmul	;wreg free
  7681  001174  0ED5               	movlw	low __npowers_
  7682  001176  0100               	movlb	0	; () banked
  7683  001178  256E               	addwf	?___wmul& (0+255),w,b
  7684  00117A  6EF6               	movwf	tblptrl,c
  7685  00117C  0E7E               	movlw	high __npowers_
  7686  00117E  0100               	movlb	0	; () banked
  7687  001180  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  7688  001182  6EF7               	movwf	tblptrh,c
  7689  001184                     	if	1	;There are 3 active tblptr bytes
  7690  001184  6AF8               	clrf	tblptru,c
  7691  001186  0E00               	movlw	low (__mediumconst shr (0+16))
  7692  001188  22F8               	addwfc	tblptru,f,c
  7693  00118A                     	endif
  7694  00118A  0009               	tblrd		*+
  7695  00118C  0100               	movlb	0	; () banked
  7696  00118E  CFF5 F074          	movff	tablat,___ftmul@f1
  7697  001192  0009               	tblrd		*+
  7698  001194  0100               	movlb	0	; () banked
  7699  001196  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7700  00119A  000A               	tblrd		*-
  7701  00119C  0100               	movlb	0	; () banked
  7702  00119E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7703  0011A2  EC0F  F00C         	call	___ftmul	;wreg free
  7704  0011A6  C074  F089         	movff	?___ftmul,_fround$2758
  7705  0011AA  C075  F08A         	movff	?___ftmul+1,_fround$2758+1
  7706  0011AE  C076  F08B         	movff	?___ftmul+2,_fround$2758+2
  7707                           
  7708                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7709  0011B2  C089  F074         	movff	_fround$2758,___ftmul@f1
  7710  0011B6  C08A  F075         	movff	_fround$2758+1,___ftmul@f1+1
  7711  0011BA  C08B  F076         	movff	_fround$2758+2,___ftmul@f1+2
  7712  0011BE  0E00               	movlw	0
  7713  0011C0  0100               	movlb	0	; () banked
  7714  0011C2  6F77               	movwf	___ftmul@f2& (0+255),b
  7715  0011C4  0E00               	movlw	0
  7716  0011C6  0100               	movlb	0	; () banked
  7717  0011C8  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7718  0011CA  0E3F               	movlw	63
  7719  0011CC  0100               	movlb	0	; () banked
  7720  0011CE  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7721  0011D0  EC0F  F00C         	call	___ftmul	;wreg free
  7722  0011D4  D023               	goto	L17
  7723  0011D6                     l3452:
  7724                           
  7725                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7726  0011D6  0100               	movlb	0	; () banked
  7727  0011D8  518C               	movf	fround@prec& (0+255),w,b
  7728  0011DA  0D03               	mullw	3
  7729  0011DC  0ED5               	movlw	low __npowers_
  7730  0011DE  24F3               	addwf	prodl,w,c
  7731  0011E0  6EF6               	movwf	tblptrl,c
  7732  0011E2  0E7E               	movlw	high __npowers_
  7733  0011E4  20F4               	addwfc	prodh,w,c
  7734  0011E6  6EF7               	movwf	tblptrh,c
  7735  0011E8                     	if	1	;There are 3 active tblptr bytes
  7736  0011E8  6AF8               	clrf	tblptru,c
  7737  0011EA  0E00               	movlw	low (__mediumconst shr (0+16))
  7738  0011EC  22F8               	addwfc	tblptru,f,c
  7739  0011EE                     	endif
  7740  0011EE  0009               	tblrd		*+
  7741  0011F0  0100               	movlb	0	; () banked
  7742  0011F2  CFF5 F074          	movff	tablat,___ftmul@f1
  7743  0011F6  0009               	tblrd		*+
  7744  0011F8  0100               	movlb	0	; () banked
  7745  0011FA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  7746  0011FE  000A               	tblrd		*-
  7747  001200  0100               	movlb	0	; () banked
  7748  001202  CFF5 F076          	movff	tablat,___ftmul@f1+2
  7749  001206  0E00               	movlw	0
  7750  001208  0100               	movlb	0	; () banked
  7751  00120A  6F77               	movwf	___ftmul@f2& (0+255),b
  7752  00120C  0E00               	movlw	0
  7753  00120E  0100               	movlb	0	; () banked
  7754  001210  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  7755  001212  0E3F               	movlw	63
  7756  001214  0100               	movlb	0	; () banked
  7757  001216  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  7758  001218  EC0F  F00C         	call	___ftmul	;wreg free
  7759  00121C                     L17:
  7760  00121C  C074  F083         	movff	?___ftmul,?_fround
  7761  001220  C075  F084         	movff	?___ftmul+1,?_fround+1
  7762  001224  C076  F085         	movff	?___ftmul+2,?_fround+2
  7763  001228  0012               	return	
  7764  00122A                     __end_of_fround:
  7765                           	opt stack 0
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon2	equ	0xFF1
  7774                           intcon3	equ	0xFF0
  7775                           indf0	equ	0xFEF
  7776                           postinc0	equ	0xFEE
  7777                           fsr0h	equ	0xFEA
  7778                           fsr0l	equ	0xFE9
  7779                           wreg	equ	0xFE8
  7780                           postinc1	equ	0xFE6
  7781                           postdec1	equ	0xFE5
  7782                           fsr1l	equ	0xFE1
  7783                           indf2	equ	0xFDF
  7784                           postinc2	equ	0xFDE
  7785                           postdec2	equ	0xFDD
  7786                           fsr2h	equ	0xFDA
  7787                           fsr2l	equ	0xFD9
  7788                           status	equ	0xFD8
  7789                           
  7790 ;; *************** function ___wmul *****************
  7791 ;; Defined at:
  7792 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  7793 ;; Parameters:    Size  Location     Type
  7794 ;;  multiplier      2   14[BANK0 ] unsigned int 
  7795 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  product         2   18[BANK0 ] unsigned int 
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  2   14[BANK0 ] unsigned int 
  7800 ;; Registers used:
  7801 ;;		wreg, status,2, status,0, prodl, prodh
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7807 ;;      Params:         0       4       0       0       0       0       0       0       0
  7808 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7810 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7811 ;;Total ram usage:        6 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    4
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_fround
  7818 ;;		_scale
  7819 ;;		_sprintf
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           	psect	text31
  7824  003284                     __ptext31:
  7825                           	opt stack 0
  7826  003284                     ___wmul:
  7827                           	opt stack 22
  7828                           
  7829                           ;incstack = 0
  7830  003284  0100               	movlb	0	; () banked
  7831  003286  516E               	movf	___wmul@multiplier& (0+255),w,b
  7832  003288  0100               	movlb	0	; () banked
  7833  00328A  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7834  00328C  CFF3 F072          	movff	prodl,___wmul@product
  7835  003290  CFF4 F073          	movff	prodh,___wmul@product+1
  7836  003294  0100               	movlb	0	; () banked
  7837  003296  516E               	movf	___wmul@multiplier& (0+255),w,b
  7838  003298  0100               	movlb	0	; () banked
  7839  00329A  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7840  00329C  50F3               	movf	prodl,w,c
  7841  00329E  0100               	movlb	0	; () banked
  7842  0032A0  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7843  0032A2  0100               	movlb	0	; () banked
  7844  0032A4  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7845  0032A6  0100               	movlb	0	; () banked
  7846  0032A8  0370               	mulwf	___wmul@multiplicand& (0+255),b
  7847  0032AA  50F3               	movf	prodl,w,c
  7848  0032AC  0100               	movlb	0	; () banked
  7849  0032AE  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  7850                           
  7851                           ; BSR set to: 0
  7852  0032B0  C072  F06E         	movff	___wmul@product,?___wmul
  7853  0032B4  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  7854                           
  7855                           ; BSR set to: 0
  7856                           
  7857                           ; BSR set to: 0
  7858  0032B8  0012               	return	
  7859  0032BA                     __end_of___wmul:
  7860                           	opt stack 0
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           intcon	equ	0xFF2
  7868                           intcon2	equ	0xFF1
  7869                           intcon3	equ	0xFF0
  7870                           indf0	equ	0xFEF
  7871                           postinc0	equ	0xFEE
  7872                           fsr0h	equ	0xFEA
  7873                           fsr0l	equ	0xFE9
  7874                           wreg	equ	0xFE8
  7875                           postinc1	equ	0xFE6
  7876                           postdec1	equ	0xFE5
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function ___ftmul *****************
  7886 ;; Defined at:
  7887 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  f1              3   20[BANK0 ] float 
  7890 ;;  f2              3   23[BANK0 ] float 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  7893 ;;  sign            1   34[BANK0 ] unsigned char 
  7894 ;;  cntr            1   33[BANK0 ] unsigned char 
  7895 ;;  exp             1   29[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  3   20[BANK0 ] float 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7905 ;;      Params:         0       6       0       0       0       0       0       0       0
  7906 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7907 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7908 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7909 ;;Total ram usage:       15 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    5
  7912 ;; This function calls:
  7913 ;;		___ftpack
  7914 ;; This function is called by:
  7915 ;;		_PWM_DutyCycle1
  7916 ;;		_PWM_DutyCycle2
  7917 ;;		_fround
  7918 ;;		_scale
  7919 ;;		_sprintf
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text32
  7924  00181E                     __ptext32:
  7925                           	opt stack 0
  7926  00181E                     ___ftmul:
  7927                           	opt stack 21
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;incstack = 0
  7931  00181E  0100               	movlb	0	; () banked
  7932  001820  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  7933  001824  0100               	movlb	0	; () banked
  7934  001826  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  7935  001828  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  7936  00182A  0100               	movlb	0	; () banked
  7937  00182C  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7938  00182E  0100               	movlb	0	; () banked
  7939  001830  377A               	rlcf	??___ftmul& (0+255),f,b
  7940  001832  E301               	bnc	u2961
  7941  001834  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  7942  001836                     u2961:
  7943  001836  0100               	movlb	0	; () banked
  7944  001838  517A               	movf	??___ftmul& (0+255),w,b
  7945  00183A  0100               	movlb	0	; () banked
  7946  00183C  6F7D               	movwf	___ftmul@exp& (0+255),b
  7947  00183E  0100               	movlb	0	; () banked
  7948  001840  677D               	tstfsz	___ftmul@exp& (0+255),b
  7949  001842  D001               	goto	l3216
  7950  001844  D013               	goto	u2990
  7951  001846                     l3216:
  7952                           
  7953                           ; BSR set to: 0
  7954  001846  0100               	movlb	0	; () banked
  7955  001848  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  7956  00184C  0100               	movlb	0	; () banked
  7957  00184E  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  7958  001850  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  7959  001852  0100               	movlb	0	; () banked
  7960  001854  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7961  001856  0100               	movlb	0	; () banked
  7962  001858  377A               	rlcf	??___ftmul& (0+255),f,b
  7963  00185A  E301               	bnc	u2981
  7964  00185C  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  7965  00185E                     u2981:
  7966  00185E  0100               	movlb	0	; () banked
  7967  001860  517A               	movf	??___ftmul& (0+255),w,b
  7968  001862  0100               	movlb	0	; () banked
  7969  001864  6F82               	movwf	___ftmul@sign& (0+255),b
  7970  001866  0100               	movlb	0	; () banked
  7971  001868  6782               	tstfsz	___ftmul@sign& (0+255),b
  7972  00186A  D00A               	goto	l3222
  7973  00186C                     u2990:
  7974                           
  7975                           ; BSR set to: 0
  7976  00186C  0E00               	movlw	0
  7977  00186E  0100               	movlb	0	; () banked
  7978  001870  6F74               	movwf	?___ftmul& (0+255),b
  7979  001872  0E00               	movlw	0
  7980  001874  0100               	movlb	0	; () banked
  7981  001876  6F75               	movwf	(?___ftmul+1)& (0+255),b
  7982  001878  0E00               	movlw	0
  7983  00187A  0100               	movlb	0	; () banked
  7984  00187C  6F76               	movwf	(?___ftmul+2)& (0+255),b
  7985  00187E  D080               	goto	l1083
  7986  001880                     l3222:
  7987                           
  7988                           ; BSR set to: 0
  7989  001880  0100               	movlb	0	; () banked
  7990  001882  5182               	movf	___ftmul@sign& (0+255),w,b
  7991  001884  0F7B               	addlw	123
  7992  001886  0100               	movlb	0	; () banked
  7993  001888  277D               	addwf	___ftmul@exp& (0+255),f,b
  7994                           
  7995                           ; BSR set to: 0
  7996  00188A  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  7997  00188E  0100               	movlb	0	; () banked
  7998  001890  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  7999  001892  0100               	movlb	0	; () banked
  8000  001894  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  8001  001896  0E80               	movlw	128
  8002  001898  0100               	movlb	0	; () banked
  8003  00189A  1782               	andwf	___ftmul@sign& (0+255),f,b
  8004                           
  8005                           ; BSR set to: 0
  8006  00189C  0100               	movlb	0	; () banked
  8007  00189E  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8008                           
  8009                           ; BSR set to: 0
  8010  0018A0  0100               	movlb	0	; () banked
  8011  0018A2  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8012                           
  8013                           ; BSR set to: 0
  8014  0018A4  0EFF               	movlw	255
  8015  0018A6  0100               	movlb	0	; () banked
  8016  0018A8  1777               	andwf	___ftmul@f2& (0+255),f,b
  8017  0018AA  0EFF               	movlw	255
  8018  0018AC  0100               	movlb	0	; () banked
  8019  0018AE  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8020  0018B0  0E00               	movlw	0
  8021  0018B2  0100               	movlb	0	; () banked
  8022  0018B4  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8023                           
  8024                           ; BSR set to: 0
  8025  0018B6  0E00               	movlw	0
  8026  0018B8  0100               	movlb	0	; () banked
  8027  0018BA  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  8028  0018BC  0E00               	movlw	0
  8029  0018BE  0100               	movlb	0	; () banked
  8030  0018C0  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8031  0018C2  0E00               	movlw	0
  8032  0018C4  0100               	movlb	0	; () banked
  8033  0018C6  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8034                           
  8035                           ; BSR set to: 0
  8036  0018C8  0E07               	movlw	7
  8037  0018CA  0100               	movlb	0	; () banked
  8038  0018CC  6F81               	movwf	___ftmul@cntr& (0+255),b
  8039  0018CE                     l3236:
  8040                           
  8041                           ; BSR set to: 0
  8042  0018CE  0100               	movlb	0	; () banked
  8043  0018D0  A174               	btfss	___ftmul@f1& (0+255),0,b
  8044  0018D2  D00C               	goto	l3240
  8045                           
  8046                           ; BSR set to: 0
  8047  0018D4  0100               	movlb	0	; () banked
  8048  0018D6  5177               	movf	___ftmul@f2& (0+255),w,b
  8049  0018D8  0100               	movlb	0	; () banked
  8050  0018DA  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8051  0018DC  0100               	movlb	0	; () banked
  8052  0018DE  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8053  0018E0  0100               	movlb	0	; () banked
  8054  0018E2  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8055  0018E4  0100               	movlb	0	; () banked
  8056  0018E6  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8057  0018E8  0100               	movlb	0	; () banked
  8058  0018EA  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8059  0018EC                     l3240:
  8060                           
  8061                           ; BSR set to: 0
  8062  0018EC  0100               	movlb	0	; () banked
  8063  0018EE  90D8               	bcf	status,0,c
  8064  0018F0  0100               	movlb	0	; () banked
  8065  0018F2  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8066  0018F4  0100               	movlb	0	; () banked
  8067  0018F6  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8068  0018F8  0100               	movlb	0	; () banked
  8069  0018FA  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8070  0018FC  0100               	movlb	0	; () banked
  8071  0018FE  90D8               	bcf	status,0,c
  8072  001900  0100               	movlb	0	; () banked
  8073  001902  3777               	rlcf	___ftmul@f2& (0+255),f,b
  8074  001904  0100               	movlb	0	; () banked
  8075  001906  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8076  001908  0100               	movlb	0	; () banked
  8077  00190A  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8078                           
  8079                           ; BSR set to: 0
  8080  00190C  0100               	movlb	0	; () banked
  8081  00190E  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8082  001910  D7DE               	goto	l3236
  8083                           
  8084                           ; BSR set to: 0
  8085                           
  8086                           ; BSR set to: 0
  8087  001912  0E09               	movlw	9
  8088  001914  0100               	movlb	0	; () banked
  8089  001916  6F81               	movwf	___ftmul@cntr& (0+255),b
  8090  001918                     l3246:
  8091                           
  8092                           ; BSR set to: 0
  8093  001918  0100               	movlb	0	; () banked
  8094  00191A  A174               	btfss	___ftmul@f1& (0+255),0,b
  8095  00191C  D00C               	goto	l3250
  8096                           
  8097                           ; BSR set to: 0
  8098  00191E  0100               	movlb	0	; () banked
  8099  001920  5177               	movf	___ftmul@f2& (0+255),w,b
  8100  001922  0100               	movlb	0	; () banked
  8101  001924  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8102  001926  0100               	movlb	0	; () banked
  8103  001928  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  8104  00192A  0100               	movlb	0	; () banked
  8105  00192C  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8106  00192E  0100               	movlb	0	; () banked
  8107  001930  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  8108  001932  0100               	movlb	0	; () banked
  8109  001934  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8110  001936                     l3250:
  8111                           
  8112                           ; BSR set to: 0
  8113  001936  0100               	movlb	0	; () banked
  8114  001938  90D8               	bcf	status,0,c
  8115  00193A  0100               	movlb	0	; () banked
  8116  00193C  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8117  00193E  0100               	movlb	0	; () banked
  8118  001940  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8119  001942  0100               	movlb	0	; () banked
  8120  001944  3374               	rrcf	___ftmul@f1& (0+255),f,b
  8121  001946  0100               	movlb	0	; () banked
  8122  001948  90D8               	bcf	status,0,c
  8123  00194A  0100               	movlb	0	; () banked
  8124  00194C  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8125  00194E  0100               	movlb	0	; () banked
  8126  001950  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8127  001952  0100               	movlb	0	; () banked
  8128  001954  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8129                           
  8130                           ; BSR set to: 0
  8131  001956  0100               	movlb	0	; () banked
  8132  001958  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  8133  00195A  D7DE               	goto	l3246
  8134                           
  8135                           ; BSR set to: 0
  8136                           
  8137                           ; BSR set to: 0
  8138  00195C  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  8139  001960  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8140  001964  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8141  001968  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  8142  00196C  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  8143  001970  ECBE  F00E         	call	___ftpack	;wreg free
  8144  001974  C060  F074         	movff	?___ftpack,?___ftmul
  8145  001978  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  8146  00197C  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  8147  001980                     l1083:
  8148  001980  0012               	return	
  8149  001982                     __end_of___ftmul:
  8150                           	opt stack 0
  8151                           tblptru	equ	0xFF8
  8152                           tblptrh	equ	0xFF7
  8153                           tblptrl	equ	0xFF6
  8154                           tablat	equ	0xFF5
  8155                           prodh	equ	0xFF4
  8156                           prodl	equ	0xFF3
  8157                           intcon	equ	0xFF2
  8158                           intcon2	equ	0xFF1
  8159                           intcon3	equ	0xFF0
  8160                           indf0	equ	0xFEF
  8161                           postinc0	equ	0xFEE
  8162                           fsr0h	equ	0xFEA
  8163                           fsr0l	equ	0xFE9
  8164                           wreg	equ	0xFE8
  8165                           postinc1	equ	0xFE6
  8166                           postdec1	equ	0xFE5
  8167                           fsr1l	equ	0xFE1
  8168                           indf2	equ	0xFDF
  8169                           postinc2	equ	0xFDE
  8170                           postdec2	equ	0xFDD
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function ___awmod *****************
  8176 ;; Defined at:
  8177 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  dividend        2    0[BANK0 ] int 
  8180 ;;  divisor         2    2[BANK0 ] int 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  sign            1    5[BANK0 ] unsigned char 
  8183 ;;  counter         1    4[BANK0 ] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;                  2    0[BANK0 ] int 
  8186 ;; Registers used:
  8187 ;;		wreg, status,2, status,0, prodl
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8193 ;;      Params:         0       4       0       0       0       0       0       0       0
  8194 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8196 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8197 ;;Total ram usage:        6 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    4
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		_fround
  8204 ;;		_scale
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text33
  8209  00254C                     __ptext33:
  8210                           	opt stack 0
  8211  00254C                     ___awmod:
  8212                           	opt stack 22
  8213                           
  8214                           ;incstack = 0
  8215  00254C  0E00               	movlw	0
  8216  00254E  0100               	movlb	0	; () banked
  8217  002550  6F65               	movwf	___awmod@sign& (0+255),b
  8218                           
  8219                           ; BSR set to: 0
  8220  002552  0100               	movlb	0	; () banked
  8221  002554  5161               	movf	(___awmod@dividend+1)& (0+255),w,b
  8222  002556  0A80               	xorlw	128
  8223  002558  6EF3               	movwf	prodl,c
  8224  00255A  0E80               	movlw	128
  8225  00255C  5CF3               	subwf	prodl,w,c
  8226  00255E  0E00               	movlw	0
  8227  002560  B4D8               	btfsc	status,2,c
  8228  002562  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8229  002564  B0D8               	btfsc	status,0,c
  8230  002566  D009               	goto	l3310
  8231                           
  8232                           ; BSR set to: 0
  8233  002568  0100               	movlb	0	; () banked
  8234  00256A  6D60               	negf	___awmod@dividend& (0+255),b
  8235  00256C  0100               	movlb	0	; () banked
  8236  00256E  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8237  002570  B0D8               	btfsc	status,0,c
  8238  002572  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8239                           
  8240                           ; BSR set to: 0
  8241  002574  0E01               	movlw	1
  8242  002576  0100               	movlb	0	; () banked
  8243  002578  6F65               	movwf	___awmod@sign& (0+255),b
  8244  00257A                     l3310:
  8245                           
  8246                           ; BSR set to: 0
  8247  00257A  0100               	movlb	0	; () banked
  8248  00257C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8249  00257E  0A80               	xorlw	128
  8250  002580  6EF3               	movwf	prodl,c
  8251  002582  0E80               	movlw	128
  8252  002584  5CF3               	subwf	prodl,w,c
  8253  002586  0E00               	movlw	0
  8254  002588  B4D8               	btfsc	status,2,c
  8255  00258A  5D62               	subwf	___awmod@divisor& (0+255),w,b
  8256  00258C  B0D8               	btfsc	status,0,c
  8257  00258E  D006               	goto	l3314
  8258                           
  8259                           ; BSR set to: 0
  8260  002590  0100               	movlb	0	; () banked
  8261  002592  6D62               	negf	___awmod@divisor& (0+255),b
  8262  002594  0100               	movlb	0	; () banked
  8263  002596  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  8264  002598  B0D8               	btfsc	status,0,c
  8265  00259A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  8266  00259C                     l3314:
  8267                           
  8268                           ; BSR set to: 0
  8269  00259C  0100               	movlb	0	; () banked
  8270  00259E  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8271  0025A0  1162               	iorwf	___awmod@divisor& (0+255),w,b
  8272  0025A2  B4D8               	btfsc	status,2,c
  8273  0025A4  D026               	goto	l3330
  8274                           
  8275                           ; BSR set to: 0
  8276  0025A6  0E01               	movlw	1
  8277  0025A8  0100               	movlb	0	; () banked
  8278  0025AA  6F64               	movwf	___awmod@counter& (0+255),b
  8279  0025AC  D006               	goto	l3320
  8280  0025AE                     l3318:
  8281                           
  8282                           ; BSR set to: 0
  8283  0025AE  0100               	movlb	0	; () banked
  8284  0025B0  90D8               	bcf	status,0,c
  8285  0025B2  3762               	rlcf	___awmod@divisor& (0+255),f,b
  8286  0025B4  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8287  0025B6  0100               	movlb	0	; () banked
  8288  0025B8  2B64               	incf	___awmod@counter& (0+255),f,b
  8289  0025BA                     l3320:
  8290                           
  8291                           ; BSR set to: 0
  8292  0025BA  0100               	movlb	0	; () banked
  8293  0025BC  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8294  0025BE  D7F7               	goto	l3318
  8295  0025C0                     l3322:
  8296                           
  8297                           ; BSR set to: 0
  8298  0025C0  0100               	movlb	0	; () banked
  8299  0025C2  5162               	movf	___awmod@divisor& (0+255),w,b
  8300  0025C4  0100               	movlb	0	; () banked
  8301  0025C6  5D60               	subwf	___awmod@dividend& (0+255),w,b
  8302  0025C8  0100               	movlb	0	; () banked
  8303  0025CA  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8304  0025CC  0100               	movlb	0	; () banked
  8305  0025CE  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8306  0025D0  A0D8               	btfss	status,0,c
  8307  0025D2  D008               	goto	l3326
  8308                           
  8309                           ; BSR set to: 0
  8310  0025D4  0100               	movlb	0	; () banked
  8311  0025D6  5162               	movf	___awmod@divisor& (0+255),w,b
  8312  0025D8  0100               	movlb	0	; () banked
  8313  0025DA  5F60               	subwf	___awmod@dividend& (0+255),f,b
  8314  0025DC  0100               	movlb	0	; () banked
  8315  0025DE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  8316  0025E0  0100               	movlb	0	; () banked
  8317  0025E2  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8318  0025E4                     l3326:
  8319                           
  8320                           ; BSR set to: 0
  8321  0025E4  0100               	movlb	0	; () banked
  8322  0025E6  90D8               	bcf	status,0,c
  8323  0025E8  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8324  0025EA  3362               	rrcf	___awmod@divisor& (0+255),f,b
  8325                           
  8326                           ; BSR set to: 0
  8327  0025EC  0100               	movlb	0	; () banked
  8328  0025EE  2F64               	decfsz	___awmod@counter& (0+255),f,b
  8329  0025F0  D7E7               	goto	l3322
  8330  0025F2                     l3330:
  8331                           
  8332                           ; BSR set to: 0
  8333  0025F2  0100               	movlb	0	; () banked
  8334  0025F4  5165               	movf	___awmod@sign& (0+255),w,b
  8335  0025F6  B4D8               	btfsc	status,2,c
  8336  0025F8  D006               	goto	l3334
  8337                           
  8338                           ; BSR set to: 0
  8339  0025FA  0100               	movlb	0	; () banked
  8340  0025FC  6D60               	negf	___awmod@dividend& (0+255),b
  8341  0025FE  0100               	movlb	0	; () banked
  8342  002600  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  8343  002602  B0D8               	btfsc	status,0,c
  8344  002604  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  8345  002606                     l3334:
  8346                           
  8347                           ; BSR set to: 0
  8348  002606  C060  F060         	movff	___awmod@dividend,?___awmod
  8349  00260A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  8350                           
  8351                           ; BSR set to: 0
  8352                           
  8353                           ; BSR set to: 0
  8354  00260E  0012               	return	
  8355  002610                     __end_of___awmod:
  8356                           	opt stack 0
  8357                           tblptru	equ	0xFF8
  8358                           tblptrh	equ	0xFF7
  8359                           tblptrl	equ	0xFF6
  8360                           tablat	equ	0xFF5
  8361                           prodh	equ	0xFF4
  8362                           prodl	equ	0xFF3
  8363                           intcon	equ	0xFF2
  8364                           intcon2	equ	0xFF1
  8365                           intcon3	equ	0xFF0
  8366                           indf0	equ	0xFEF
  8367                           postinc0	equ	0xFEE
  8368                           fsr0h	equ	0xFEA
  8369                           fsr0l	equ	0xFE9
  8370                           wreg	equ	0xFE8
  8371                           postinc1	equ	0xFE6
  8372                           postdec1	equ	0xFE5
  8373                           fsr1l	equ	0xFE1
  8374                           indf2	equ	0xFDF
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           fsr2h	equ	0xFDA
  8378                           fsr2l	equ	0xFD9
  8379                           status	equ	0xFD8
  8380                           
  8381 ;; *************** function ___awdiv *****************
  8382 ;; Defined at:
  8383 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;  dividend        2    6[BANK0 ] int 
  8386 ;;  divisor         2    8[BANK0 ] int 
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  quotient        2   12[BANK0 ] int 
  8389 ;;  sign            1   11[BANK0 ] unsigned char 
  8390 ;;  counter         1   10[BANK0 ] unsigned char 
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  2    6[BANK0 ] int 
  8393 ;; Registers used:
  8394 ;;		wreg, status,2, status,0, prodl
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8400 ;;      Params:         0       4       0       0       0       0       0       0       0
  8401 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8403 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8404 ;;Total ram usage:        8 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; Hardware stack levels required when called:    4
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		_fround
  8411 ;;		_scale
  8412 ;;		_sprintf
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           	psect	text34
  8417  00205A                     __ptext34:
  8418                           	opt stack 0
  8419  00205A                     ___awdiv:
  8420                           	opt stack 22
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;incstack = 0
  8424  00205A  0E00               	movlw	0
  8425  00205C  0100               	movlb	0	; () banked
  8426  00205E  6F6B               	movwf	___awdiv@sign& (0+255),b
  8427                           
  8428                           ; BSR set to: 0
  8429  002060  0100               	movlb	0	; () banked
  8430  002062  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8431  002064  0A80               	xorlw	128
  8432  002066  6EF3               	movwf	prodl,c
  8433  002068  0E80               	movlw	128
  8434  00206A  5CF3               	subwf	prodl,w,c
  8435  00206C  0E00               	movlw	0
  8436  00206E  B4D8               	btfsc	status,2,c
  8437  002070  5D68               	subwf	___awdiv@divisor& (0+255),w,b
  8438  002072  B0D8               	btfsc	status,0,c
  8439  002074  D009               	goto	l3266
  8440                           
  8441                           ; BSR set to: 0
  8442  002076  0100               	movlb	0	; () banked
  8443  002078  6D68               	negf	___awdiv@divisor& (0+255),b
  8444  00207A  0100               	movlb	0	; () banked
  8445  00207C  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8446  00207E  B0D8               	btfsc	status,0,c
  8447  002080  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8448                           
  8449                           ; BSR set to: 0
  8450  002082  0E01               	movlw	1
  8451  002084  0100               	movlb	0	; () banked
  8452  002086  6F6B               	movwf	___awdiv@sign& (0+255),b
  8453  002088                     l3266:
  8454                           
  8455                           ; BSR set to: 0
  8456  002088  0100               	movlb	0	; () banked
  8457  00208A  5167               	movf	(___awdiv@dividend+1)& (0+255),w,b
  8458  00208C  0A80               	xorlw	128
  8459  00208E  6EF3               	movwf	prodl,c
  8460  002090  0E80               	movlw	128
  8461  002092  5CF3               	subwf	prodl,w,c
  8462  002094  0E00               	movlw	0
  8463  002096  B4D8               	btfsc	status,2,c
  8464  002098  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8465  00209A  B0D8               	btfsc	status,0,c
  8466  00209C  D009               	goto	l3272
  8467                           
  8468                           ; BSR set to: 0
  8469  00209E  0100               	movlb	0	; () banked
  8470  0020A0  6D66               	negf	___awdiv@dividend& (0+255),b
  8471  0020A2  0100               	movlb	0	; () banked
  8472  0020A4  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8473  0020A6  B0D8               	btfsc	status,0,c
  8474  0020A8  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8475                           
  8476                           ; BSR set to: 0
  8477  0020AA  0E01               	movlw	1
  8478  0020AC  0100               	movlb	0	; () banked
  8479  0020AE  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  8480  0020B0                     l3272:
  8481                           
  8482                           ; BSR set to: 0
  8483  0020B0  0E00               	movlw	0
  8484  0020B2  0100               	movlb	0	; () banked
  8485  0020B4  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8486  0020B6  0E00               	movlw	0
  8487  0020B8  0100               	movlb	0	; () banked
  8488  0020BA  6F6C               	movwf	___awdiv@quotient& (0+255),b
  8489                           
  8490                           ; BSR set to: 0
  8491  0020BC  0100               	movlb	0	; () banked
  8492  0020BE  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8493  0020C0  1168               	iorwf	___awdiv@divisor& (0+255),w,b
  8494  0020C2  B4D8               	btfsc	status,2,c
  8495  0020C4  D02C               	goto	l3294
  8496                           
  8497                           ; BSR set to: 0
  8498  0020C6  0E01               	movlw	1
  8499  0020C8  0100               	movlb	0	; () banked
  8500  0020CA  6F6A               	movwf	___awdiv@counter& (0+255),b
  8501  0020CC  D006               	goto	l3280
  8502  0020CE                     l3278:
  8503                           
  8504                           ; BSR set to: 0
  8505  0020CE  0100               	movlb	0	; () banked
  8506  0020D0  90D8               	bcf	status,0,c
  8507  0020D2  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  8508  0020D4  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8509  0020D6  0100               	movlb	0	; () banked
  8510  0020D8  2B6A               	incf	___awdiv@counter& (0+255),f,b
  8511  0020DA                     l3280:
  8512                           
  8513                           ; BSR set to: 0
  8514  0020DA  0100               	movlb	0	; () banked
  8515  0020DC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8516  0020DE  D7F7               	goto	l3278
  8517  0020E0                     l3282:
  8518                           
  8519                           ; BSR set to: 0
  8520  0020E0  0100               	movlb	0	; () banked
  8521  0020E2  90D8               	bcf	status,0,c
  8522  0020E4  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  8523  0020E6  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8524                           
  8525                           ; BSR set to: 0
  8526  0020E8  0100               	movlb	0	; () banked
  8527  0020EA  5168               	movf	___awdiv@divisor& (0+255),w,b
  8528  0020EC  0100               	movlb	0	; () banked
  8529  0020EE  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  8530  0020F0  0100               	movlb	0	; () banked
  8531  0020F2  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8532  0020F4  0100               	movlb	0	; () banked
  8533  0020F6  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8534  0020F8  A0D8               	btfss	status,0,c
  8535  0020FA  D00A               	goto	l3290
  8536                           
  8537                           ; BSR set to: 0
  8538  0020FC  0100               	movlb	0	; () banked
  8539  0020FE  5168               	movf	___awdiv@divisor& (0+255),w,b
  8540  002100  0100               	movlb	0	; () banked
  8541  002102  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  8542  002104  0100               	movlb	0	; () banked
  8543  002106  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8544  002108  0100               	movlb	0	; () banked
  8545  00210A  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8546                           
  8547                           ; BSR set to: 0
  8548  00210C  0100               	movlb	0	; () banked
  8549  00210E  816C               	bsf	___awdiv@quotient& (0+255),0,b
  8550  002110                     l3290:
  8551                           
  8552                           ; BSR set to: 0
  8553  002110  0100               	movlb	0	; () banked
  8554  002112  90D8               	bcf	status,0,c
  8555  002114  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8556  002116  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  8557                           
  8558                           ; BSR set to: 0
  8559  002118  0100               	movlb	0	; () banked
  8560  00211A  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  8561  00211C  D7E1               	goto	l3282
  8562  00211E                     l3294:
  8563                           
  8564                           ; BSR set to: 0
  8565  00211E  0100               	movlb	0	; () banked
  8566  002120  516B               	movf	___awdiv@sign& (0+255),w,b
  8567  002122  B4D8               	btfsc	status,2,c
  8568  002124  D006               	goto	l3298
  8569                           
  8570                           ; BSR set to: 0
  8571  002126  0100               	movlb	0	; () banked
  8572  002128  6D6C               	negf	___awdiv@quotient& (0+255),b
  8573  00212A  0100               	movlb	0	; () banked
  8574  00212C  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8575  00212E  B0D8               	btfsc	status,0,c
  8576  002130  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8577  002132                     l3298:
  8578                           
  8579                           ; BSR set to: 0
  8580  002132  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  8581  002136  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  00213A  0012               	return	
  8587  00213C                     __end_of___awdiv:
  8588                           	opt stack 0
  8589                           tblptru	equ	0xFF8
  8590                           tblptrh	equ	0xFF7
  8591                           tblptrl	equ	0xFF6
  8592                           tablat	equ	0xFF5
  8593                           prodh	equ	0xFF4
  8594                           prodl	equ	0xFF3
  8595                           intcon	equ	0xFF2
  8596                           intcon2	equ	0xFF1
  8597                           intcon3	equ	0xFF0
  8598                           indf0	equ	0xFEF
  8599                           postinc0	equ	0xFEE
  8600                           fsr0h	equ	0xFEA
  8601                           fsr0l	equ	0xFE9
  8602                           wreg	equ	0xFE8
  8603                           postinc1	equ	0xFE6
  8604                           postdec1	equ	0xFE5
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function __tdiv_to_l_ *****************
  8614 ;; Defined at:
  8615 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  f1              3    0[BANK0 ] float 
  8618 ;;  f2              3    3[BANK0 ] float 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  quot            4    9[BANK0 ] unsigned long 
  8621 ;;  exp1            1   14[BANK0 ] unsigned char 
  8622 ;;  cntr            1   13[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  4    0[BANK0 ] unsigned long 
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8632 ;;      Params:         0       6       0       0       0       0       0       0       0
  8633 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8634 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8635 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8636 ;;Total ram usage:       15 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		Nothing
  8641 ;; This function is called by:
  8642 ;;		_sprintf
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text35
  8647  001688                     __ptext35:
  8648                           	opt stack 0
  8649  001688                     __tdiv_to_l_:
  8650                           	opt stack 23
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;incstack = 0
  8654  001688  0100               	movlb	0	; () banked
  8655  00168A  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8656  00168E  0100               	movlb	0	; () banked
  8657  001690  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8658  001692  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8659  001694  0100               	movlb	0	; () banked
  8660  001696  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8661  001698  0100               	movlb	0	; () banked
  8662  00169A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8663  00169C  E301               	bnc	u3371
  8664  00169E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8665  0016A0                     u3371:
  8666  0016A0  0100               	movlb	0	; () banked
  8667  0016A2  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8668  0016A4  0100               	movlb	0	; () banked
  8669  0016A6  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8670  0016A8  0100               	movlb	0	; () banked
  8671  0016AA  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  8672  0016AC  D001               	goto	l3500
  8673  0016AE  D092               	goto	u3440
  8674  0016B0                     l3500:
  8675                           
  8676                           ; BSR set to: 0
  8677  0016B0  0100               	movlb	0	; () banked
  8678  0016B2  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8679  0016B6  0100               	movlb	0	; () banked
  8680  0016B8  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8681  0016BA  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8682  0016BC  0100               	movlb	0	; () banked
  8683  0016BE  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8684  0016C0  0100               	movlb	0	; () banked
  8685  0016C2  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8686  0016C4  E301               	bnc	u3391
  8687  0016C6  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8688  0016C8                     u3391:
  8689  0016C8  0100               	movlb	0	; () banked
  8690  0016CA  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  8691  0016CC  0100               	movlb	0	; () banked
  8692  0016CE  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8693  0016D0  0100               	movlb	0	; () banked
  8694  0016D2  676D               	tstfsz	__tdiv_to_l_@cntr& (0+255),b
  8695  0016D4  D001               	goto	l3506
  8696  0016D6  D07E               	goto	u3440
  8697  0016D8                     l3506:
  8698                           
  8699                           ; BSR set to: 0
  8700  0016D8  0100               	movlb	0	; () banked
  8701  0016DA  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8702                           
  8703                           ; BSR set to: 0
  8704  0016DC  0EFF               	movlw	255
  8705  0016DE  0100               	movlb	0	; () banked
  8706  0016E0  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8707  0016E2  0EFF               	movlw	255
  8708  0016E4  0100               	movlb	0	; () banked
  8709  0016E6  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8710  0016E8  0E00               	movlw	0
  8711  0016EA  0100               	movlb	0	; () banked
  8712  0016EC  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8713  0016EE  0100               	movlb	0	; () banked
  8714  0016F0  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8715                           
  8716                           ; BSR set to: 0
  8717  0016F2  0EFF               	movlw	255
  8718  0016F4  0100               	movlb	0	; () banked
  8719  0016F6  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8720  0016F8  0EFF               	movlw	255
  8721  0016FA  0100               	movlb	0	; () banked
  8722  0016FC  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8723  0016FE  0E00               	movlw	0
  8724  001700  0100               	movlb	0	; () banked
  8725  001702  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8726                           
  8727                           ; BSR set to: 0
  8728  001704  0E00               	movlw	0
  8729  001706  0100               	movlb	0	; () banked
  8730  001708  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  8731  00170A  0E00               	movlw	0
  8732  00170C  0100               	movlb	0	; () banked
  8733  00170E  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8734  001710  0E00               	movlw	0
  8735  001712  0100               	movlb	0	; () banked
  8736  001714  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8737  001716  0E00               	movlw	0
  8738  001718  0100               	movlb	0	; () banked
  8739  00171A  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8740                           
  8741                           ; BSR set to: 0
  8742  00171C  0E7F               	movlw	127
  8743  00171E  0100               	movlb	0	; () banked
  8744  001720  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8745                           
  8746                           ; BSR set to: 0
  8747  001722  0100               	movlb	0	; () banked
  8748  001724  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8749  001726  0F98               	addlw	152
  8750  001728  0100               	movlb	0	; () banked
  8751  00172A  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8752                           
  8753                           ; BSR set to: 0
  8754  00172C  0E18               	movlw	24
  8755  00172E  0100               	movlb	0	; () banked
  8756  001730  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8757  001732                     l1061:
  8758                           
  8759                           ; BSR set to: 0
  8760  001732  0100               	movlb	0	; () banked
  8761  001734  90D8               	bcf	status,0,c
  8762  001736  0100               	movlb	0	; () banked
  8763  001738  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8764  00173A  0100               	movlb	0	; () banked
  8765  00173C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8766  00173E  0100               	movlb	0	; () banked
  8767  001740  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8768  001742  0100               	movlb	0	; () banked
  8769  001744  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8770                           
  8771                           ; BSR set to: 0
  8772  001746  0100               	movlb	0	; () banked
  8773  001748  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8774  00174A  0100               	movlb	0	; () banked
  8775  00174C  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8776  00174E  0100               	movlb	0	; () banked
  8777  001750  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8778  001752  0100               	movlb	0	; () banked
  8779  001754  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8780  001756  0100               	movlb	0	; () banked
  8781  001758  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8782  00175A  0100               	movlb	0	; () banked
  8783  00175C  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8784  00175E  A0D8               	btfss	status,0,c
  8785  001760  D00E               	goto	l1062
  8786                           
  8787                           ; BSR set to: 0
  8788  001762  0100               	movlb	0	; () banked
  8789  001764  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8790  001766  0100               	movlb	0	; () banked
  8791  001768  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8792  00176A  0100               	movlb	0	; () banked
  8793  00176C  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8794  00176E  0100               	movlb	0	; () banked
  8795  001770  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8796  001772  0100               	movlb	0	; () banked
  8797  001774  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8798  001776  0100               	movlb	0	; () banked
  8799  001778  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8800                           
  8801                           ; BSR set to: 0
  8802  00177A  0100               	movlb	0	; () banked
  8803  00177C  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8804  00177E                     l1062:
  8805                           
  8806                           ; BSR set to: 0
  8807  00177E  0100               	movlb	0	; () banked
  8808  001780  90D8               	bcf	status,0,c
  8809  001782  0100               	movlb	0	; () banked
  8810  001784  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8811  001786  0100               	movlb	0	; () banked
  8812  001788  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8813  00178A  0100               	movlb	0	; () banked
  8814  00178C  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8815                           
  8816                           ; BSR set to: 0
  8817  00178E  0100               	movlb	0	; () banked
  8818  001790  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8819  001792  D7CF               	goto	l1061
  8820                           
  8821                           ; BSR set to: 0
  8822  001794  0100               	movlb	0	; () banked
  8823  001796  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8824  001798  D019               	goto	l3538
  8825                           
  8826                           ; BSR set to: 0
  8827  00179A  0100               	movlb	0	; () banked
  8828  00179C  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8829  00179E  0A80               	xorlw	128
  8830  0017A0  0100               	movlb	0	; () banked
  8831  0017A2  6F66               	movwf	??__tdiv_to_l_& (0+255),b
  8832  0017A4  0EE9               	movlw	233
  8833  0017A6  0A80               	xorlw	128
  8834  0017A8  0100               	movlb	0	; () banked
  8835  0017AA  5D66               	subwf	??__tdiv_to_l_& (0+255),w,b
  8836  0017AC  A0D8               	btfss	status,0,c
  8837  0017AE  D012               	goto	u3440
  8838  0017B0                     l3534:
  8839                           
  8840                           ; BSR set to: 0
  8841  0017B0  0100               	movlb	0	; () banked
  8842  0017B2  90D8               	bcf	status,0,c
  8843  0017B4  0100               	movlb	0	; () banked
  8844  0017B6  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8845  0017B8  0100               	movlb	0	; () banked
  8846  0017BA  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8847  0017BC  0100               	movlb	0	; () banked
  8848  0017BE  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8849  0017C0  0100               	movlb	0	; () banked
  8850  0017C2  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8851                           
  8852                           ; BSR set to: 0
  8853  0017C4  0100               	movlb	0	; () banked
  8854  0017C6  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8855  0017C8  D7F3               	goto	l3534
  8856  0017CA  D020               	goto	l1068
  8857  0017CC                     l3538:
  8858                           
  8859                           ; BSR set to: 0
  8860  0017CC  0E17               	movlw	23
  8861  0017CE  0100               	movlb	0	; () banked
  8862  0017D0  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8863  0017D2  D019               	goto	l3546
  8864  0017D4                     u3440:
  8865                           
  8866                           ; BSR set to: 0
  8867  0017D4  0E00               	movlw	0
  8868  0017D6  0100               	movlb	0	; () banked
  8869  0017D8  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  8870  0017DA  0E00               	movlw	0
  8871  0017DC  0100               	movlb	0	; () banked
  8872  0017DE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8873  0017E0  0E00               	movlw	0
  8874  0017E2  0100               	movlb	0	; () banked
  8875  0017E4  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8876  0017E6  0E00               	movlw	0
  8877  0017E8  0100               	movlb	0	; () banked
  8878  0017EA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8879  0017EC  D017               	goto	l1059
  8880  0017EE                     l3544:
  8881                           
  8882                           ; BSR set to: 0
  8883  0017EE  0100               	movlb	0	; () banked
  8884  0017F0  90D8               	bcf	status,0,c
  8885  0017F2  0100               	movlb	0	; () banked
  8886  0017F4  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8887  0017F6  0100               	movlb	0	; () banked
  8888  0017F8  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8889  0017FA  0100               	movlb	0	; () banked
  8890  0017FC  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8891  0017FE  0100               	movlb	0	; () banked
  8892  001800  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8893  001802  0100               	movlb	0	; () banked
  8894  001804  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8895  001806                     l3546:
  8896                           
  8897                           ; BSR set to: 0
  8898  001806  0100               	movlb	0	; () banked
  8899  001808  676E               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
  8900  00180A  D7F1               	goto	l3544
  8901  00180C                     l1068:
  8902                           
  8903                           ; BSR set to: 0
  8904  00180C  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8905  001810  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8906  001814  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8907  001818  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8908  00181C                     l1059:
  8909                           
  8910                           ; BSR set to: 0
  8911  00181C  0012               	return	
  8912  00181E                     __end_of__tdiv_to_l_:
  8913                           	opt stack 0
  8914                           tblptru	equ	0xFF8
  8915                           tblptrh	equ	0xFF7
  8916                           tblptrl	equ	0xFF6
  8917                           tablat	equ	0xFF5
  8918                           prodh	equ	0xFF4
  8919                           prodl	equ	0xFF3
  8920                           intcon	equ	0xFF2
  8921                           intcon2	equ	0xFF1
  8922                           intcon3	equ	0xFF0
  8923                           indf0	equ	0xFEF
  8924                           postinc0	equ	0xFEE
  8925                           fsr0h	equ	0xFEA
  8926                           fsr0l	equ	0xFE9
  8927                           wreg	equ	0xFE8
  8928                           postinc1	equ	0xFE6
  8929                           postdec1	equ	0xFE5
  8930                           fsr1l	equ	0xFE1
  8931                           indf2	equ	0xFDF
  8932                           postinc2	equ	0xFDE
  8933                           postdec2	equ	0xFDD
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function __div_to_l_ *****************
  8939 ;; Defined at:
  8940 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  f1              3    0[BANK0 ] unsigned long 
  8943 ;;  f2              3    3[BANK0 ] unsigned long 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  quot            4   10[BANK0 ] unsigned long 
  8946 ;;  exp1            1   15[BANK0 ] unsigned char 
  8947 ;;  cntr            1   14[BANK0 ] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  4    0[BANK0 ] unsigned long 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8957 ;;      Params:         0       6       0       0       0       0       0       0       0
  8958 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8959 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8960 ;;      Totals:         0      16       0       0       0       0       0       0       0
  8961 ;;Total ram usage:       16 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    4
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_sprintf
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text36
  8972  0014AA                     __ptext36:
  8973                           	opt stack 0
  8974  0014AA                     __div_to_l_:
  8975                           	opt stack 23
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;incstack = 0
  8979  0014AA  0100               	movlb	0	; () banked
  8980  0014AC  C060  F066         	movff	__div_to_l_@f1,??__div_to_l_
  8981  0014B0  0100               	movlb	0	; () banked
  8982  0014B2  C061  F067         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  8983  0014B6  0100               	movlb	0	; () banked
  8984  0014B8  C062  F068         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  8985  0014BC  0100               	movlb	0	; () banked
  8986  0014BE  C063  F069         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  8987  0014C2  0E18               	movlw	24
  8988  0014C4  D006               	goto	u3460
  8989  0014C6                     u3465:
  8990  0014C6  0100               	movlb	0	; () banked
  8991  0014C8  90D8               	bcf	status,0,c
  8992  0014CA  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  8993  0014CC  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  8994  0014CE  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  8995  0014D0  3366               	rrcf	??__div_to_l_& (0+255),f,b
  8996  0014D2                     u3460:
  8997  0014D2  2EE8               	decfsz	wreg,f,c
  8998  0014D4  D7F8               	goto	u3465
  8999  0014D6  0100               	movlb	0	; () banked
  9000  0014D8  5166               	movf	??__div_to_l_& (0+255),w,b
  9001  0014DA  0100               	movlb	0	; () banked
  9002  0014DC  6F6F               	movwf	__div_to_l_@exp1& (0+255),b
  9003  0014DE  0100               	movlb	0	; () banked
  9004  0014E0  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9005  0014E2  D001               	goto	l3554
  9006  0014E4  D0AC               	goto	u3530
  9007  0014E6                     l3554:
  9008                           
  9009                           ; BSR set to: 0
  9010  0014E6  0100               	movlb	0	; () banked
  9011  0014E8  C063  F066         	movff	__div_to_l_@f2,??__div_to_l_
  9012  0014EC  0100               	movlb	0	; () banked
  9013  0014EE  C064  F067         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  9014  0014F2  0100               	movlb	0	; () banked
  9015  0014F4  C065  F068         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  9016  0014F8  0100               	movlb	0	; () banked
  9017  0014FA  C066  F069         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  9018  0014FE  0E18               	movlw	24
  9019  001500  D006               	goto	u3480
  9020  001502                     u3485:
  9021  001502  0100               	movlb	0	; () banked
  9022  001504  90D8               	bcf	status,0,c
  9023  001506  3369               	rrcf	(??__div_to_l_+3)& (0+255),f,b
  9024  001508  3368               	rrcf	(??__div_to_l_+2)& (0+255),f,b
  9025  00150A  3367               	rrcf	(??__div_to_l_+1)& (0+255),f,b
  9026  00150C  3366               	rrcf	??__div_to_l_& (0+255),f,b
  9027  00150E                     u3480:
  9028  00150E  2EE8               	decfsz	wreg,f,c
  9029  001510  D7F8               	goto	u3485
  9030  001512  0100               	movlb	0	; () banked
  9031  001514  5166               	movf	??__div_to_l_& (0+255),w,b
  9032  001516  0100               	movlb	0	; () banked
  9033  001518  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9034  00151A  0100               	movlb	0	; () banked
  9035  00151C  676E               	tstfsz	__div_to_l_@cntr& (0+255),b
  9036  00151E  D001               	goto	l3560
  9037  001520  D08E               	goto	u3530
  9038  001522                     l3560:
  9039                           
  9040                           ; BSR set to: 0
  9041  001522  0100               	movlb	0	; () banked
  9042  001524  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  9043                           
  9044                           ; BSR set to: 0
  9045  001526  0EFF               	movlw	255
  9046  001528  0100               	movlb	0	; () banked
  9047  00152A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  9048  00152C  0EFF               	movlw	255
  9049  00152E  0100               	movlb	0	; () banked
  9050  001530  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  9051  001532  0EFF               	movlw	255
  9052  001534  0100               	movlb	0	; () banked
  9053  001536  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  9054  001538  0E00               	movlw	0
  9055  00153A  0100               	movlb	0	; () banked
  9056  00153C  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  9057                           
  9058                           ; BSR set to: 0
  9059  00153E  0100               	movlb	0	; () banked
  9060  001540  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  9061  001542  0EFF               	movlw	255
  9062  001544  0100               	movlb	0	; () banked
  9063  001546  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  9064  001548  0EFF               	movlw	255
  9065  00154A  0100               	movlb	0	; () banked
  9066  00154C  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  9067  00154E  0EFF               	movlw	255
  9068  001550  0100               	movlb	0	; () banked
  9069  001552  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  9070  001554  0E00               	movlw	0
  9071  001556  0100               	movlb	0	; () banked
  9072  001558  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  9073                           
  9074                           ; BSR set to: 0
  9075  00155A  0E00               	movlw	0
  9076  00155C  0100               	movlb	0	; () banked
  9077  00155E  6F6A               	movwf	__div_to_l_@quot& (0+255),b
  9078  001560  0E00               	movlw	0
  9079  001562  0100               	movlb	0	; () banked
  9080  001564  6F6B               	movwf	(__div_to_l_@quot+1)& (0+255),b
  9081  001566  0E00               	movlw	0
  9082  001568  0100               	movlb	0	; () banked
  9083  00156A  6F6C               	movwf	(__div_to_l_@quot+2)& (0+255),b
  9084  00156C  0E00               	movlw	0
  9085  00156E  0100               	movlb	0	; () banked
  9086  001570  6F6D               	movwf	(__div_to_l_@quot+3)& (0+255),b
  9087                           
  9088                           ; BSR set to: 0
  9089  001572  0E7F               	movlw	127
  9090  001574  0100               	movlb	0	; () banked
  9091  001576  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9092                           
  9093                           ; BSR set to: 0
  9094  001578  0100               	movlb	0	; () banked
  9095  00157A  516E               	movf	__div_to_l_@cntr& (0+255),w,b
  9096  00157C  0FA0               	addlw	160
  9097  00157E  0100               	movlb	0	; () banked
  9098  001580  5F6F               	subwf	__div_to_l_@exp1& (0+255),f,b
  9099                           
  9100                           ; BSR set to: 0
  9101  001582  0E20               	movlw	32
  9102  001584  0100               	movlb	0	; () banked
  9103  001586  6F6E               	movwf	__div_to_l_@cntr& (0+255),b
  9104  001588                     l3574:
  9105                           
  9106                           ; BSR set to: 0
  9107  001588  0100               	movlb	0	; () banked
  9108  00158A  90D8               	bcf	status,0,c
  9109  00158C  0100               	movlb	0	; () banked
  9110  00158E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9111  001590  0100               	movlb	0	; () banked
  9112  001592  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9113  001594  0100               	movlb	0	; () banked
  9114  001596  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9115  001598  0100               	movlb	0	; () banked
  9116  00159A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9117                           
  9118                           ; BSR set to: 0
  9119  00159C  0100               	movlb	0	; () banked
  9120  00159E  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9121  0015A0  0100               	movlb	0	; () banked
  9122  0015A2  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  9123  0015A4  0100               	movlb	0	; () banked
  9124  0015A6  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9125  0015A8  0100               	movlb	0	; () banked
  9126  0015AA  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9127  0015AC  0100               	movlb	0	; () banked
  9128  0015AE  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9129  0015B0  0100               	movlb	0	; () banked
  9130  0015B2  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9131  0015B4  0100               	movlb	0	; () banked
  9132  0015B6  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9133  0015B8  0100               	movlb	0	; () banked
  9134  0015BA  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9135  0015BC  A0D8               	btfss	status,0,c
  9136  0015BE  D012               	goto	l3582
  9137                           
  9138                           ; BSR set to: 0
  9139  0015C0  0100               	movlb	0	; () banked
  9140  0015C2  5163               	movf	__div_to_l_@f2& (0+255),w,b
  9141  0015C4  0100               	movlb	0	; () banked
  9142  0015C6  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  9143  0015C8  0100               	movlb	0	; () banked
  9144  0015CA  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9145  0015CC  0100               	movlb	0	; () banked
  9146  0015CE  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9147  0015D0  0100               	movlb	0	; () banked
  9148  0015D2  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9149  0015D4  0100               	movlb	0	; () banked
  9150  0015D6  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9151  0015D8  0100               	movlb	0	; () banked
  9152  0015DA  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9153  0015DC  0100               	movlb	0	; () banked
  9154  0015DE  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9155                           
  9156                           ; BSR set to: 0
  9157  0015E0  0100               	movlb	0	; () banked
  9158  0015E2  816A               	bsf	__div_to_l_@quot& (0+255),0,b
  9159  0015E4                     l3582:
  9160                           
  9161                           ; BSR set to: 0
  9162  0015E4  0100               	movlb	0	; () banked
  9163  0015E6  90D8               	bcf	status,0,c
  9164  0015E8  0100               	movlb	0	; () banked
  9165  0015EA  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  9166  0015EC  0100               	movlb	0	; () banked
  9167  0015EE  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9168  0015F0  0100               	movlb	0	; () banked
  9169  0015F2  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9170  0015F4  0100               	movlb	0	; () banked
  9171  0015F6  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9172                           
  9173                           ; BSR set to: 0
  9174  0015F8  0100               	movlb	0	; () banked
  9175  0015FA  2F6E               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9176  0015FC  D7C5               	goto	l3574
  9177                           
  9178                           ; BSR set to: 0
  9179  0015FE  0100               	movlb	0	; () banked
  9180  001600  AF6F               	btfss	__div_to_l_@exp1& (0+255),7,b
  9181  001602  D019               	goto	l3596
  9182                           
  9183                           ; BSR set to: 0
  9184  001604  0100               	movlb	0	; () banked
  9185  001606  516F               	movf	__div_to_l_@exp1& (0+255),w,b
  9186  001608  0A80               	xorlw	128
  9187  00160A  0100               	movlb	0	; () banked
  9188  00160C  6F66               	movwf	??__div_to_l_& (0+255),b
  9189  00160E  0EE1               	movlw	225
  9190  001610  0A80               	xorlw	128
  9191  001612  0100               	movlb	0	; () banked
  9192  001614  5D66               	subwf	??__div_to_l_& (0+255),w,b
  9193  001616  A0D8               	btfss	status,0,c
  9194  001618  D012               	goto	u3530
  9195  00161A                     l3592:
  9196                           
  9197                           ; BSR set to: 0
  9198  00161A  0100               	movlb	0	; () banked
  9199  00161C  90D8               	bcf	status,0,c
  9200  00161E  0100               	movlb	0	; () banked
  9201  001620  336D               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9202  001622  0100               	movlb	0	; () banked
  9203  001624  336C               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9204  001626  0100               	movlb	0	; () banked
  9205  001628  336B               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9206  00162A  0100               	movlb	0	; () banked
  9207  00162C  336A               	rrcf	__div_to_l_@quot& (0+255),f,b
  9208                           
  9209                           ; BSR set to: 0
  9210  00162E  0100               	movlb	0	; () banked
  9211  001630  3F6F               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9212  001632  D7F3               	goto	l3592
  9213  001634  D020               	goto	l950
  9214  001636                     l3596:
  9215                           
  9216                           ; BSR set to: 0
  9217  001636  0E1F               	movlw	31
  9218  001638  0100               	movlb	0	; () banked
  9219  00163A  656F               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9220  00163C  D019               	goto	l3604
  9221  00163E                     u3530:
  9222                           
  9223                           ; BSR set to: 0
  9224  00163E  0E00               	movlw	0
  9225  001640  0100               	movlb	0	; () banked
  9226  001642  6F60               	movwf	?__div_to_l_& (0+255),b
  9227  001644  0E00               	movlw	0
  9228  001646  0100               	movlb	0	; () banked
  9229  001648  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  9230  00164A  0E00               	movlw	0
  9231  00164C  0100               	movlb	0	; () banked
  9232  00164E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  9233  001650  0E00               	movlw	0
  9234  001652  0100               	movlb	0	; () banked
  9235  001654  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  9236  001656  D017               	goto	l941
  9237  001658                     l3602:
  9238                           
  9239                           ; BSR set to: 0
  9240  001658  0100               	movlb	0	; () banked
  9241  00165A  90D8               	bcf	status,0,c
  9242  00165C  0100               	movlb	0	; () banked
  9243  00165E  376A               	rlcf	__div_to_l_@quot& (0+255),f,b
  9244  001660  0100               	movlb	0	; () banked
  9245  001662  376B               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9246  001664  0100               	movlb	0	; () banked
  9247  001666  376C               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9248  001668  0100               	movlb	0	; () banked
  9249  00166A  376D               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9250  00166C  0100               	movlb	0	; () banked
  9251  00166E  076F               	decf	__div_to_l_@exp1& (0+255),f,b
  9252  001670                     l3604:
  9253                           
  9254                           ; BSR set to: 0
  9255  001670  0100               	movlb	0	; () banked
  9256  001672  676F               	tstfsz	__div_to_l_@exp1& (0+255),b
  9257  001674  D7F1               	goto	l3602
  9258  001676                     l950:
  9259                           
  9260                           ; BSR set to: 0
  9261  001676  C06A  F060         	movff	__div_to_l_@quot,?__div_to_l_
  9262  00167A  C06B  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9263  00167E  C06C  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9264  001682  C06D  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9265  001686                     l941:
  9266                           
  9267                           ; BSR set to: 0
  9268  001686  0012               	return	
  9269  001688                     __end_of__div_to_l_:
  9270                           	opt stack 0
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           intcon	equ	0xFF2
  9278                           intcon2	equ	0xFF1
  9279                           intcon3	equ	0xFF0
  9280                           indf0	equ	0xFEF
  9281                           postinc0	equ	0xFEE
  9282                           fsr0h	equ	0xFEA
  9283                           fsr0l	equ	0xFE9
  9284                           wreg	equ	0xFE8
  9285                           postinc1	equ	0xFE6
  9286                           postdec1	equ	0xFE5
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function ___lltoft *****************
  9296 ;; Defined at:
  9297 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  c               4    8[BANK0 ] unsigned long 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  exp             1   16[BANK0 ] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  3    8[BANK0 ] float 
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0, cstack
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9311 ;;      Params:         0       4       0       0       0       0       0       0       0
  9312 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9313 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9314 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9315 ;;Total ram usage:        9 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; Hardware stack levels required when called:    5
  9318 ;; This function calls:
  9319 ;;		___ftpack
  9320 ;; This function is called by:
  9321 ;;		_sprintf
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text37
  9326  002AF0                     __ptext37:
  9327                           	opt stack 0
  9328  002AF0                     ___lltoft:
  9329                           	opt stack 22
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;incstack = 0
  9333  002AF0  0E8E               	movlw	142
  9334  002AF2  0100               	movlb	0	; () banked
  9335  002AF4  6F70               	movwf	___lltoft@exp& (0+255),b
  9336  002AF6  D00C               	goto	l3722
  9337  002AF8                     l3720:
  9338                           
  9339                           ; BSR set to: 0
  9340  002AF8  0100               	movlb	0	; () banked
  9341  002AFA  90D8               	bcf	status,0,c
  9342  002AFC  0100               	movlb	0	; () banked
  9343  002AFE  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9344  002B00  0100               	movlb	0	; () banked
  9345  002B02  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9346  002B04  0100               	movlb	0	; () banked
  9347  002B06  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9348  002B08  0100               	movlb	0	; () banked
  9349  002B0A  3368               	rrcf	___lltoft@c& (0+255),f,b
  9350  002B0C  0100               	movlb	0	; () banked
  9351  002B0E  2B70               	incf	___lltoft@exp& (0+255),f,b
  9352  002B10                     l3722:
  9353                           
  9354                           ; BSR set to: 0
  9355  002B10  0E00               	movlw	0
  9356  002B12  0100               	movlb	0	; () banked
  9357  002B14  1568               	andwf	___lltoft@c& (0+255),w,b
  9358  002B16  0100               	movlb	0	; () banked
  9359  002B18  6F6C               	movwf	??___lltoft& (0+255),b
  9360  002B1A  0E00               	movlw	0
  9361  002B1C  0100               	movlb	0	; () banked
  9362  002B1E  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  9363  002B20  0100               	movlb	0	; () banked
  9364  002B22  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  9365  002B24  0E00               	movlw	0
  9366  002B26  0100               	movlb	0	; () banked
  9367  002B28  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  9368  002B2A  0100               	movlb	0	; () banked
  9369  002B2C  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  9370  002B2E  0EFF               	movlw	255
  9371  002B30  0100               	movlb	0	; () banked
  9372  002B32  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  9373  002B34  0100               	movlb	0	; () banked
  9374  002B36  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  9375  002B38  0100               	movlb	0	; () banked
  9376  002B3A  516F               	movf	(??___lltoft+3)& (0+255),w,b
  9377  002B3C  116C               	iorwf	??___lltoft& (0+255),w,b
  9378  002B3E  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  9379  002B40  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  9380  002B42  A4D8               	btfss	status,2,c
  9381  002B44  D7D9               	goto	l3720
  9382                           
  9383                           ; BSR set to: 0
  9384                           
  9385                           ; BSR set to: 0
  9386  002B46  C068  F060         	movff	___lltoft@c,___ftpack@arg
  9387  002B4A  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  9388  002B4E  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  9389  002B52  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  9390  002B56  0E00               	movlw	0
  9391  002B58  0100               	movlb	0	; () banked
  9392  002B5A  6F64               	movwf	___ftpack@sign& (0+255),b
  9393  002B5C  ECBE  F00E         	call	___ftpack	;wreg free
  9394  002B60  C060  F068         	movff	?___ftpack,?___lltoft
  9395  002B64  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  9396  002B68  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  9397  002B6C  0012               	return	
  9398  002B6E                     __end_of___lltoft:
  9399                           	opt stack 0
  9400                           tblptru	equ	0xFF8
  9401                           tblptrh	equ	0xFF7
  9402                           tblptrl	equ	0xFF6
  9403                           tablat	equ	0xFF5
  9404                           prodh	equ	0xFF4
  9405                           prodl	equ	0xFF3
  9406                           intcon	equ	0xFF2
  9407                           intcon2	equ	0xFF1
  9408                           intcon3	equ	0xFF0
  9409                           indf0	equ	0xFEF
  9410                           postinc0	equ	0xFEE
  9411                           fsr0h	equ	0xFEA
  9412                           fsr0l	equ	0xFE9
  9413                           wreg	equ	0xFE8
  9414                           postinc1	equ	0xFE6
  9415                           postdec1	equ	0xFE5
  9416                           fsr1l	equ	0xFE1
  9417                           indf2	equ	0xFDF
  9418                           postinc2	equ	0xFDE
  9419                           postdec2	equ	0xFDD
  9420                           fsr2h	equ	0xFDA
  9421                           fsr2l	equ	0xFD9
  9422                           status	equ	0xFD8
  9423                           
  9424 ;; *************** function ___llmod *****************
  9425 ;; Defined at:
  9426 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;  dividend        4   13[BANK0 ] unsigned long 
  9429 ;;  divisor         4   17[BANK0 ] unsigned long 
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  counter         1   21[BANK0 ] unsigned char 
  9432 ;; Return value:  Size  Location     Type
  9433 ;;                  4   13[BANK0 ] unsigned long 
  9434 ;; Registers used:
  9435 ;;		wreg, status,2, status,0
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9441 ;;      Params:         0       8       0       0       0       0       0       0       0
  9442 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9444 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9445 ;;Total ram usage:        9 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    4
  9448 ;; This function calls:
  9449 ;;		Nothing
  9450 ;; This function is called by:
  9451 ;;		_sprintf
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text38
  9456  002826                     __ptext38:
  9457                           	opt stack 0
  9458  002826                     ___llmod:
  9459                           	opt stack 23
  9460                           
  9461                           ;incstack = 0
  9462  002826  0100               	movlb	0	; () banked
  9463  002828  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9464  00282A  1171               	iorwf	___llmod@divisor& (0+255),w,b
  9465  00282C  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9466  00282E  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9467  002830  B4D8               	btfsc	status,2,c
  9468  002832  D042               	goto	l1152
  9469                           
  9470                           ; BSR set to: 0
  9471  002834  0E01               	movlw	1
  9472  002836  0100               	movlb	0	; () banked
  9473  002838  6F75               	movwf	___llmod@counter& (0+255),b
  9474  00283A  D00C               	goto	l3708
  9475  00283C                     l3706:
  9476                           
  9477                           ; BSR set to: 0
  9478  00283C  0100               	movlb	0	; () banked
  9479  00283E  90D8               	bcf	status,0,c
  9480  002840  0100               	movlb	0	; () banked
  9481  002842  3771               	rlcf	___llmod@divisor& (0+255),f,b
  9482  002844  0100               	movlb	0	; () banked
  9483  002846  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9484  002848  0100               	movlb	0	; () banked
  9485  00284A  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9486  00284C  0100               	movlb	0	; () banked
  9487  00284E  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9488  002850  0100               	movlb	0	; () banked
  9489  002852  2B75               	incf	___llmod@counter& (0+255),f,b
  9490  002854                     l3708:
  9491                           
  9492                           ; BSR set to: 0
  9493  002854  0100               	movlb	0	; () banked
  9494  002856  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9495  002858  D7F1               	goto	l3706
  9496  00285A                     l3710:
  9497                           
  9498                           ; BSR set to: 0
  9499  00285A  0100               	movlb	0	; () banked
  9500  00285C  5171               	movf	___llmod@divisor& (0+255),w,b
  9501  00285E  0100               	movlb	0	; () banked
  9502  002860  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  9503  002862  0100               	movlb	0	; () banked
  9504  002864  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9505  002866  0100               	movlb	0	; () banked
  9506  002868  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9507  00286A  0100               	movlb	0	; () banked
  9508  00286C  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9509  00286E  0100               	movlb	0	; () banked
  9510  002870  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9511  002872  0100               	movlb	0	; () banked
  9512  002874  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9513  002876  0100               	movlb	0	; () banked
  9514  002878  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9515  00287A  A0D8               	btfss	status,0,c
  9516  00287C  D010               	goto	l3714
  9517                           
  9518                           ; BSR set to: 0
  9519  00287E  0100               	movlb	0	; () banked
  9520  002880  5171               	movf	___llmod@divisor& (0+255),w,b
  9521  002882  0100               	movlb	0	; () banked
  9522  002884  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  9523  002886  0100               	movlb	0	; () banked
  9524  002888  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  9525  00288A  0100               	movlb	0	; () banked
  9526  00288C  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9527  00288E  0100               	movlb	0	; () banked
  9528  002890  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  9529  002892  0100               	movlb	0	; () banked
  9530  002894  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9531  002896  0100               	movlb	0	; () banked
  9532  002898  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  9533  00289A  0100               	movlb	0	; () banked
  9534  00289C  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9535  00289E                     l3714:
  9536                           
  9537                           ; BSR set to: 0
  9538  00289E  0100               	movlb	0	; () banked
  9539  0028A0  90D8               	bcf	status,0,c
  9540  0028A2  0100               	movlb	0	; () banked
  9541  0028A4  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9542  0028A6  0100               	movlb	0	; () banked
  9543  0028A8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9544  0028AA  0100               	movlb	0	; () banked
  9545  0028AC  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9546  0028AE  0100               	movlb	0	; () banked
  9547  0028B0  3371               	rrcf	___llmod@divisor& (0+255),f,b
  9548                           
  9549                           ; BSR set to: 0
  9550  0028B2  0100               	movlb	0	; () banked
  9551  0028B4  2F75               	decfsz	___llmod@counter& (0+255),f,b
  9552  0028B6  D7D1               	goto	l3710
  9553  0028B8                     l1152:
  9554                           
  9555                           ; BSR set to: 0
  9556  0028B8  C06D  F06D         	movff	___llmod@dividend,?___llmod
  9557  0028BC  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  9558  0028C0  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  9559  0028C4  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  9560                           
  9561                           ; BSR set to: 0
  9562  0028C8  0012               	return	
  9563  0028CA                     __end_of___llmod:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           intcon3	equ	0xFF0
  9574                           indf0	equ	0xFEF
  9575                           postinc0	equ	0xFEE
  9576                           fsr0h	equ	0xFEA
  9577                           fsr0l	equ	0xFE9
  9578                           wreg	equ	0xFE8
  9579                           postinc1	equ	0xFE6
  9580                           postdec1	equ	0xFE5
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           postdec2	equ	0xFDD
  9585                           fsr2h	equ	0xFDA
  9586                           fsr2l	equ	0xFD9
  9587                           status	equ	0xFD8
  9588                           
  9589 ;; *************** function ___lldiv *****************
  9590 ;; Defined at:
  9591 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;  dividend        4    0[BANK0 ] unsigned long 
  9594 ;;  divisor         4    4[BANK0 ] unsigned long 
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;  quotient        4    8[BANK0 ] unsigned long 
  9597 ;;  counter         1   12[BANK0 ] unsigned char 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  4    0[BANK0 ] unsigned long 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9607 ;;      Params:         0       8       0       0       0       0       0       0       0
  9608 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9610 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9611 ;;Total ram usage:       13 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    4
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_sprintf
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text39
  9622  00213C                     __ptext39:
  9623                           	opt stack 0
  9624  00213C                     ___lldiv:
  9625                           	opt stack 23
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;incstack = 0
  9629  00213C  0E00               	movlw	0
  9630  00213E  0100               	movlb	0	; () banked
  9631  002140  6F68               	movwf	___lldiv@quotient& (0+255),b
  9632  002142  0E00               	movlw	0
  9633  002144  0100               	movlb	0	; () banked
  9634  002146  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  9635  002148  0E00               	movlw	0
  9636  00214A  0100               	movlb	0	; () banked
  9637  00214C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9638  00214E  0E00               	movlw	0
  9639  002150  0100               	movlb	0	; () banked
  9640  002152  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9641                           
  9642                           ; BSR set to: 0
  9643  002154  0100               	movlb	0	; () banked
  9644  002156  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9645  002158  1164               	iorwf	___lldiv@divisor& (0+255),w,b
  9646  00215A  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  9647  00215C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  9648  00215E  B4D8               	btfsc	status,2,c
  9649  002160  D04E               	goto	l1142
  9650                           
  9651                           ; BSR set to: 0
  9652  002162  0E01               	movlw	1
  9653  002164  0100               	movlb	0	; () banked
  9654  002166  6F6C               	movwf	___lldiv@counter& (0+255),b
  9655  002168  D00C               	goto	l3688
  9656  00216A                     l3686:
  9657                           
  9658                           ; BSR set to: 0
  9659  00216A  0100               	movlb	0	; () banked
  9660  00216C  90D8               	bcf	status,0,c
  9661  00216E  0100               	movlb	0	; () banked
  9662  002170  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  9663  002172  0100               	movlb	0	; () banked
  9664  002174  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  9665  002176  0100               	movlb	0	; () banked
  9666  002178  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  9667  00217A  0100               	movlb	0	; () banked
  9668  00217C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  9669  00217E  0100               	movlb	0	; () banked
  9670  002180  2B6C               	incf	___lldiv@counter& (0+255),f,b
  9671  002182                     l3688:
  9672                           
  9673                           ; BSR set to: 0
  9674  002182  0100               	movlb	0	; () banked
  9675  002184  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  9676  002186  D7F1               	goto	l3686
  9677  002188                     l3690:
  9678                           
  9679                           ; BSR set to: 0
  9680  002188  0100               	movlb	0	; () banked
  9681  00218A  90D8               	bcf	status,0,c
  9682  00218C  0100               	movlb	0	; () banked
  9683  00218E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  9684  002190  0100               	movlb	0	; () banked
  9685  002192  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  9686  002194  0100               	movlb	0	; () banked
  9687  002196  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  9688  002198  0100               	movlb	0	; () banked
  9689  00219A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  9690                           
  9691                           ; BSR set to: 0
  9692  00219C  0100               	movlb	0	; () banked
  9693  00219E  5164               	movf	___lldiv@divisor& (0+255),w,b
  9694  0021A0  0100               	movlb	0	; () banked
  9695  0021A2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  9696  0021A4  0100               	movlb	0	; () banked
  9697  0021A6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9698  0021A8  0100               	movlb	0	; () banked
  9699  0021AA  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  9700  0021AC  0100               	movlb	0	; () banked
  9701  0021AE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9702  0021B0  0100               	movlb	0	; () banked
  9703  0021B2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  9704  0021B4  0100               	movlb	0	; () banked
  9705  0021B6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9706  0021B8  0100               	movlb	0	; () banked
  9707  0021BA  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  9708  0021BC  A0D8               	btfss	status,0,c
  9709  0021BE  D012               	goto	l3698
  9710                           
  9711                           ; BSR set to: 0
  9712  0021C0  0100               	movlb	0	; () banked
  9713  0021C2  5164               	movf	___lldiv@divisor& (0+255),w,b
  9714  0021C4  0100               	movlb	0	; () banked
  9715  0021C6  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  9716  0021C8  0100               	movlb	0	; () banked
  9717  0021CA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  9718  0021CC  0100               	movlb	0	; () banked
  9719  0021CE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  9720  0021D0  0100               	movlb	0	; () banked
  9721  0021D2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  9722  0021D4  0100               	movlb	0	; () banked
  9723  0021D6  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  9724  0021D8  0100               	movlb	0	; () banked
  9725  0021DA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  9726  0021DC  0100               	movlb	0	; () banked
  9727  0021DE  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  9728                           
  9729                           ; BSR set to: 0
  9730  0021E0  0100               	movlb	0	; () banked
  9731  0021E2  8168               	bsf	___lldiv@quotient& (0+255),0,b
  9732  0021E4                     l3698:
  9733                           
  9734                           ; BSR set to: 0
  9735  0021E4  0100               	movlb	0	; () banked
  9736  0021E6  90D8               	bcf	status,0,c
  9737  0021E8  0100               	movlb	0	; () banked
  9738  0021EA  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  9739  0021EC  0100               	movlb	0	; () banked
  9740  0021EE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  9741  0021F0  0100               	movlb	0	; () banked
  9742  0021F2  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  9743  0021F4  0100               	movlb	0	; () banked
  9744  0021F6  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  9745                           
  9746                           ; BSR set to: 0
  9747  0021F8  0100               	movlb	0	; () banked
  9748  0021FA  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  9749  0021FC  D7C5               	goto	l3690
  9750  0021FE                     l1142:
  9751                           
  9752                           ; BSR set to: 0
  9753  0021FE  C068  F060         	movff	___lldiv@quotient,?___lldiv
  9754  002202  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  9755  002206  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  9756  00220A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  9757                           
  9758                           ; BSR set to: 0
  9759  00220E  0012               	return	
  9760  002210                     __end_of___lldiv:
  9761                           	opt stack 0
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           intcon2	equ	0xFF1
  9770                           intcon3	equ	0xFF0
  9771                           indf0	equ	0xFEF
  9772                           postinc0	equ	0xFEE
  9773                           fsr0h	equ	0xFEA
  9774                           fsr0l	equ	0xFE9
  9775                           wreg	equ	0xFE8
  9776                           postinc1	equ	0xFE6
  9777                           postdec1	equ	0xFE5
  9778                           fsr1l	equ	0xFE1
  9779                           indf2	equ	0xFDF
  9780                           postinc2	equ	0xFDE
  9781                           postdec2	equ	0xFDD
  9782                           fsr2h	equ	0xFDA
  9783                           fsr2l	equ	0xFD9
  9784                           status	equ	0xFD8
  9785                           
  9786 ;; *************** function ___fttol *****************
  9787 ;; Defined at:
  9788 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;  f1              3   42[BANK0 ] float 
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;  lval            4   52[BANK0 ] unsigned long 
  9793 ;;  exp1            1   56[BANK0 ] unsigned char 
  9794 ;;  sign1           1   51[BANK0 ] unsigned char 
  9795 ;; Return value:  Size  Location     Type
  9796 ;;                  4   42[BANK0 ] long 
  9797 ;; Registers used:
  9798 ;;		wreg, status,2, status,0
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9804 ;;      Params:         0       4       0       0       0       0       0       0       0
  9805 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9806 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9807 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9808 ;;Total ram usage:       15 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; Hardware stack levels required when called:    4
  9811 ;; This function calls:
  9812 ;;		Nothing
  9813 ;; This function is called by:
  9814 ;;		_PWM_DutyCycle1
  9815 ;;		_PWM_DutyCycle2
  9816 ;;		_sprintf
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text40
  9821  001C32                     __ptext40:
  9822                           	opt stack 0
  9823  001C32                     ___fttol:
  9824                           	opt stack 23
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;incstack = 0
  9828  001C32  0100               	movlb	0	; () banked
  9829  001C34  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  9830  001C38  0100               	movlb	0	; () banked
  9831  001C3A  6B8F               	clrf	(??___fttol+1)& (0+255),b
  9832  001C3C  6B90               	clrf	(??___fttol+2)& (0+255),b
  9833  001C3E  0100               	movlb	0	; () banked
  9834  001C40  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9835  001C42  0100               	movlb	0	; () banked
  9836  001C44  378E               	rlcf	??___fttol& (0+255),f,b
  9837  001C46  E301               	bnc	u3591
  9838  001C48  818F               	bsf	(??___fttol+1)& (0+255),0,b
  9839  001C4A                     u3591:
  9840  001C4A  0100               	movlb	0	; () banked
  9841  001C4C  518E               	movf	??___fttol& (0+255),w,b
  9842  001C4E  0100               	movlb	0	; () banked
  9843  001C50  6F98               	movwf	___fttol@exp1& (0+255),b
  9844  001C52  0100               	movlb	0	; () banked
  9845  001C54  6798               	tstfsz	___fttol@exp1& (0+255),b
  9846  001C56  D001               	goto	l3640
  9847  001C58  D059               	goto	u3640
  9848  001C5A                     l3640:
  9849                           
  9850                           ; BSR set to: 0
  9851  001C5A  0E17               	movlw	23
  9852  001C5C  0100               	movlb	0	; () banked
  9853  001C5E  6F8E               	movwf	??___fttol& (0+255),b
  9854  001C60  0100               	movlb	0	; () banked
  9855  001C62  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  9856  001C66  0100               	movlb	0	; () banked
  9857  001C68  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  9858  001C6C  0100               	movlb	0	; () banked
  9859  001C6E  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  9860  001C72  0100               	movlb	0	; () banked
  9861  001C74  298E               	incf	??___fttol& (0+255),w,b
  9862  001C76  0100               	movlb	0	; () banked
  9863  001C78  6F92               	movwf	(??___fttol+4)& (0+255),b
  9864  001C7A  D005               	goto	u3610
  9865  001C7C                     u3615:
  9866  001C7C  0100               	movlb	0	; () banked
  9867  001C7E  90D8               	bcf	status,0,c
  9868  001C80  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  9869  001C82  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  9870  001C84  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  9871  001C86                     u3610:
  9872  001C86  0100               	movlb	0	; () banked
  9873  001C88  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  9874  001C8A  D7F8               	goto	u3615
  9875  001C8C  0100               	movlb	0	; () banked
  9876  001C8E  518F               	movf	(??___fttol+1)& (0+255),w,b
  9877  001C90  0100               	movlb	0	; () banked
  9878  001C92  6F93               	movwf	___fttol@sign1& (0+255),b
  9879                           
  9880                           ; BSR set to: 0
  9881  001C94  0100               	movlb	0	; () banked
  9882  001C96  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  9883                           
  9884                           ; BSR set to: 0
  9885  001C98  0EFF               	movlw	255
  9886  001C9A  0100               	movlb	0	; () banked
  9887  001C9C  178A               	andwf	___fttol@f1& (0+255),f,b
  9888  001C9E  0EFF               	movlw	255
  9889  001CA0  0100               	movlb	0	; () banked
  9890  001CA2  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  9891  001CA4  0E00               	movlw	0
  9892  001CA6  0100               	movlb	0	; () banked
  9893  001CA8  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  9894                           
  9895                           ; BSR set to: 0
  9896  001CAA  0100               	movlb	0	; () banked
  9897  001CAC  518A               	movf	___fttol@f1& (0+255),w,b
  9898  001CAE  0100               	movlb	0	; () banked
  9899  001CB0  6F94               	movwf	___fttol@lval& (0+255),b
  9900  001CB2  0100               	movlb	0	; () banked
  9901  001CB4  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  9902  001CB6  0100               	movlb	0	; () banked
  9903  001CB8  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  9904  001CBA  0100               	movlb	0	; () banked
  9905  001CBC  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  9906  001CBE  0100               	movlb	0	; () banked
  9907  001CC0  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  9908  001CC2  0100               	movlb	0	; () banked
  9909  001CC4  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  9910                           
  9911                           ; BSR set to: 0
  9912  001CC6  0E8E               	movlw	142
  9913  001CC8  0100               	movlb	0	; () banked
  9914  001CCA  5F98               	subwf	___fttol@exp1& (0+255),f,b
  9915                           
  9916                           ; BSR set to: 0
  9917  001CCC  0100               	movlb	0	; () banked
  9918  001CCE  AF98               	btfss	___fttol@exp1& (0+255),7,b
  9919  001CD0  D019               	goto	l3662
  9920                           
  9921                           ; BSR set to: 0
  9922  001CD2  0100               	movlb	0	; () banked
  9923  001CD4  5198               	movf	___fttol@exp1& (0+255),w,b
  9924  001CD6  0A80               	xorlw	128
  9925  001CD8  0100               	movlb	0	; () banked
  9926  001CDA  6F8E               	movwf	??___fttol& (0+255),b
  9927  001CDC  0EF1               	movlw	241
  9928  001CDE  0A80               	xorlw	128
  9929  001CE0  0100               	movlb	0	; () banked
  9930  001CE2  5D8E               	subwf	??___fttol& (0+255),w,b
  9931  001CE4  A0D8               	btfss	status,0,c
  9932  001CE6  D012               	goto	u3640
  9933  001CE8                     l3658:
  9934                           
  9935                           ; BSR set to: 0
  9936  001CE8  0100               	movlb	0	; () banked
  9937  001CEA  90D8               	bcf	status,0,c
  9938  001CEC  0100               	movlb	0	; () banked
  9939  001CEE  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9940  001CF0  0100               	movlb	0	; () banked
  9941  001CF2  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9942  001CF4  0100               	movlb	0	; () banked
  9943  001CF6  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9944  001CF8  0100               	movlb	0	; () banked
  9945  001CFA  3394               	rrcf	___fttol@lval& (0+255),f,b
  9946                           
  9947                           ; BSR set to: 0
  9948  001CFC  0100               	movlb	0	; () banked
  9949  001CFE  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  9950  001D00  D7F3               	goto	l3658
  9951  001D02  D020               	goto	l3672
  9952  001D04                     l3662:
  9953                           
  9954                           ; BSR set to: 0
  9955  001D04  0E17               	movlw	23
  9956  001D06  0100               	movlb	0	; () banked
  9957  001D08  6598               	cpfsgt	___fttol@exp1& (0+255),b
  9958  001D0A  D019               	goto	l3670
  9959  001D0C                     u3640:
  9960                           
  9961                           ; BSR set to: 0
  9962  001D0C  0E00               	movlw	0
  9963  001D0E  0100               	movlb	0	; () banked
  9964  001D10  6F8A               	movwf	?___fttol& (0+255),b
  9965  001D12  0E00               	movlw	0
  9966  001D14  0100               	movlb	0	; () banked
  9967  001D16  6F8B               	movwf	(?___fttol+1)& (0+255),b
  9968  001D18  0E00               	movlw	0
  9969  001D1A  0100               	movlb	0	; () banked
  9970  001D1C  6F8C               	movwf	(?___fttol+2)& (0+255),b
  9971  001D1E  0E00               	movlw	0
  9972  001D20  0100               	movlb	0	; () banked
  9973  001D22  6F8D               	movwf	(?___fttol+3)& (0+255),b
  9974  001D24  D02A               	goto	l1103
  9975  001D26                     l3668:
  9976                           
  9977                           ; BSR set to: 0
  9978  001D26  0100               	movlb	0	; () banked
  9979  001D28  90D8               	bcf	status,0,c
  9980  001D2A  0100               	movlb	0	; () banked
  9981  001D2C  3794               	rlcf	___fttol@lval& (0+255),f,b
  9982  001D2E  0100               	movlb	0	; () banked
  9983  001D30  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9984  001D32  0100               	movlb	0	; () banked
  9985  001D34  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9986  001D36  0100               	movlb	0	; () banked
  9987  001D38  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9988  001D3A  0100               	movlb	0	; () banked
  9989  001D3C  0798               	decf	___fttol@exp1& (0+255),f,b
  9990  001D3E                     l3670:
  9991                           
  9992                           ; BSR set to: 0
  9993  001D3E  0100               	movlb	0	; () banked
  9994  001D40  6798               	tstfsz	___fttol@exp1& (0+255),b
  9995  001D42  D7F1               	goto	l3668
  9996  001D44                     l3672:
  9997                           
  9998                           ; BSR set to: 0
  9999  001D44  0100               	movlb	0	; () banked
 10000  001D46  5193               	movf	___fttol@sign1& (0+255),w,b
 10001  001D48  B4D8               	btfsc	status,2,c
 10002  001D4A  D00F               	goto	l3676
 10003                           
 10004                           ; BSR set to: 0
 10005  001D4C  0100               	movlb	0	; () banked
 10006  001D4E  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 10007  001D50  0100               	movlb	0	; () banked
 10008  001D52  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 10009  001D54  0100               	movlb	0	; () banked
 10010  001D56  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 10011  001D58  0100               	movlb	0	; () banked
 10012  001D5A  6D94               	negf	___fttol@lval& (0+255),b
 10013  001D5C  0E00               	movlw	0
 10014  001D5E  0100               	movlb	0	; () banked
 10015  001D60  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 10016  001D62  0100               	movlb	0	; () banked
 10017  001D64  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 10018  001D66  0100               	movlb	0	; () banked
 10019  001D68  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 10020  001D6A                     l3676:
 10021                           
 10022                           ; BSR set to: 0
 10023  001D6A  C094  F08A         	movff	___fttol@lval,?___fttol
 10024  001D6E  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 10025  001D72  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 10026  001D76  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 10027  001D7A                     l1103:
 10028                           
 10029                           ; BSR set to: 0
 10030  001D7A  0012               	return	
 10031  001D7C                     __end_of___fttol:
 10032                           	opt stack 0
 10033                           tblptru	equ	0xFF8
 10034                           tblptrh	equ	0xFF7
 10035                           tblptrl	equ	0xFF6
 10036                           tablat	equ	0xFF5
 10037                           prodh	equ	0xFF4
 10038                           prodl	equ	0xFF3
 10039                           intcon	equ	0xFF2
 10040                           intcon2	equ	0xFF1
 10041                           intcon3	equ	0xFF0
 10042                           indf0	equ	0xFEF
 10043                           postinc0	equ	0xFEE
 10044                           fsr0h	equ	0xFEA
 10045                           fsr0l	equ	0xFE9
 10046                           wreg	equ	0xFE8
 10047                           postinc1	equ	0xFE6
 10048                           postdec1	equ	0xFE5
 10049                           fsr1l	equ	0xFE1
 10050                           indf2	equ	0xFDF
 10051                           postinc2	equ	0xFDE
 10052                           postdec2	equ	0xFDD
 10053                           fsr2h	equ	0xFDA
 10054                           fsr2l	equ	0xFD9
 10055                           status	equ	0xFD8
 10056                           
 10057 ;; *************** function ___ftsub *****************
 10058 ;; Defined at:
 10059 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;  f1              3   57[BANK0 ] float 
 10062 ;;  f2              3   60[BANK0 ] float 
 10063 ;; Auto vars:     Size  Location     Type
 10064 ;;		None
 10065 ;; Return value:  Size  Location     Type
 10066 ;;                  3   57[BANK0 ] float 
 10067 ;; Registers used:
 10068 ;;		wreg, status,2, status,0, cstack
 10069 ;; Tracked objects:
 10070 ;;		On entry : 0/0
 10071 ;;		On exit  : 0/0
 10072 ;;		Unchanged: 0/0
 10073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10074 ;;      Params:         0       6       0       0       0       0       0       0       0
 10075 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10076 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10077 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10078 ;;Total ram usage:        6 bytes
 10079 ;; Hardware stack levels used:    1
 10080 ;; Hardware stack levels required when called:    6
 10081 ;; This function calls:
 10082 ;;		___ftadd
 10083 ;; This function is called by:
 10084 ;;		_sprintf
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088                           	psect	text41
 10089  00319C                     __ptext41:
 10090                           	opt stack 0
 10091  00319C                     ___ftsub:
 10092                           	opt stack 21
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;incstack = 0
 10096  00319C  0E00               	movlw	0
 10097  00319E  0100               	movlb	0	; () banked
 10098  0031A0  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
 10099  0031A2  0E00               	movlw	0
 10100  0031A4  0100               	movlb	0	; () banked
 10101  0031A6  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10102  0031A8  0E80               	movlw	128
 10103  0031AA  0100               	movlb	0	; () banked
 10104  0031AC  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10105                           
 10106                           ; BSR set to: 0
 10107  0031AE  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
 10108  0031B2  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
 10109  0031B6  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
 10110  0031BA  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
 10111  0031BE  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
 10112  0031C2  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
 10113  0031C6  EC15  F009         	call	___ftadd	;wreg free
 10114  0031CA  C08D  F099         	movff	?___ftadd,?___ftsub
 10115  0031CE  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
 10116  0031D2  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
 10117  0031D6  0012               	return	
 10118  0031D8                     __end_of___ftsub:
 10119                           	opt stack 0
 10120                           tblptru	equ	0xFF8
 10121                           tblptrh	equ	0xFF7
 10122                           tblptrl	equ	0xFF6
 10123                           tablat	equ	0xFF5
 10124                           prodh	equ	0xFF4
 10125                           prodl	equ	0xFF3
 10126                           intcon	equ	0xFF2
 10127                           intcon2	equ	0xFF1
 10128                           intcon3	equ	0xFF0
 10129                           indf0	equ	0xFEF
 10130                           postinc0	equ	0xFEE
 10131                           fsr0h	equ	0xFEA
 10132                           fsr0l	equ	0xFE9
 10133                           wreg	equ	0xFE8
 10134                           postinc1	equ	0xFE6
 10135                           postdec1	equ	0xFE5
 10136                           fsr1l	equ	0xFE1
 10137                           indf2	equ	0xFDF
 10138                           postinc2	equ	0xFDE
 10139                           postdec2	equ	0xFDD
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function ___ftadd *****************
 10145 ;; Defined at:
 10146 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  f1              3   45[BANK0 ] float 
 10149 ;;  f2              3   48[BANK0 ] float 
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;  exp1            1   56[BANK0 ] unsigned char 
 10152 ;;  exp2            1   55[BANK0 ] unsigned char 
 10153 ;;  sign            1   54[BANK0 ] unsigned char 
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  3   45[BANK0 ] float 
 10156 ;; Registers used:
 10157 ;;		wreg, status,2, status,0, cstack
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10163 ;;      Params:         0       6       0       0       0       0       0       0       0
 10164 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10165 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10166 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10167 ;;Total ram usage:       12 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; Hardware stack levels required when called:    5
 10170 ;; This function calls:
 10171 ;;		___ftpack
 10172 ;; This function is called by:
 10173 ;;		_sprintf
 10174 ;;		___ftsub
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           	psect	text42
 10179  00122A                     __ptext42:
 10180                           	opt stack 0
 10181  00122A                     ___ftadd:
 10182                           	opt stack 21
 10183                           
 10184                           ;incstack = 0
 10185  00122A  0100               	movlb	0	; () banked
 10186  00122C  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
 10187  001230  0100               	movlb	0	; () banked
 10188  001232  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10189  001234  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10190  001236  0100               	movlb	0	; () banked
 10191  001238  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10192  00123A  0100               	movlb	0	; () banked
 10193  00123C  3793               	rlcf	??___ftadd& (0+255),f,b
 10194  00123E  E301               	bnc	u2751
 10195  001240  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10196  001242                     u2751:
 10197  001242  0100               	movlb	0	; () banked
 10198  001244  5193               	movf	??___ftadd& (0+255),w,b
 10199  001246  0100               	movlb	0	; () banked
 10200  001248  6F98               	movwf	___ftadd@exp1& (0+255),b
 10201  00124A  0100               	movlb	0	; () banked
 10202  00124C  C092  F093         	movff	___ftadd@f2+2,??___ftadd
 10203  001250  0100               	movlb	0	; () banked
 10204  001252  6B94               	clrf	(??___ftadd+1)& (0+255),b
 10205  001254  6B95               	clrf	(??___ftadd+2)& (0+255),b
 10206  001256  0100               	movlb	0	; () banked
 10207  001258  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10208  00125A  0100               	movlb	0	; () banked
 10209  00125C  3793               	rlcf	??___ftadd& (0+255),f,b
 10210  00125E  E301               	bnc	u2761
 10211  001260  8194               	bsf	(??___ftadd+1)& (0+255),0,b
 10212  001262                     u2761:
 10213  001262  0100               	movlb	0	; () banked
 10214  001264  5193               	movf	??___ftadd& (0+255),w,b
 10215  001266  0100               	movlb	0	; () banked
 10216  001268  6F97               	movwf	___ftadd@exp2& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219  00126A  0100               	movlb	0	; () banked
 10220  00126C  5198               	movf	___ftadd@exp1& (0+255),w,b
 10221  00126E  B4D8               	btfsc	status,2,c
 10222  001270  D012               	goto	l1019
 10223                           
 10224                           ; BSR set to: 0
 10225  001272  0100               	movlb	0	; () banked
 10226  001274  5197               	movf	___ftadd@exp2& (0+255),w,b
 10227  001276  0100               	movlb	0	; () banked
 10228  001278  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10229  00127A  B0D8               	btfsc	status,0,c
 10230  00127C  D013               	goto	l3148
 10231                           
 10232                           ; BSR set to: 0
 10233  00127E  0100               	movlb	0	; () banked
 10234  001280  5198               	movf	___ftadd@exp1& (0+255),w,b
 10235  001282  0800               	sublw	0
 10236  001284  0100               	movlb	0	; () banked
 10237  001286  2597               	addwf	___ftadd@exp2& (0+255),w,b
 10238  001288  0100               	movlb	0	; () banked
 10239  00128A  6F93               	movwf	??___ftadd& (0+255),b
 10240  00128C  0E19               	movlw	25
 10241  00128E  0100               	movlb	0	; () banked
 10242  001290  5D93               	subwf	??___ftadd& (0+255),w,b
 10243  001292  A0D8               	btfss	status,0,c
 10244  001294  D007               	goto	l3148
 10245  001296                     l1019:
 10246                           
 10247                           ; BSR set to: 0
 10248  001296  C090  F08D         	movff	___ftadd@f2,?___ftadd
 10249  00129A  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
 10250  00129E  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
 10251  0012A2  D102               	goto	l1020
 10252  0012A4                     l3148:
 10253                           
 10254                           ; BSR set to: 0
 10255  0012A4  0100               	movlb	0	; () banked
 10256  0012A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10257  0012A8  B4D8               	btfsc	status,2,c
 10258  0012AA  D012               	goto	l1023
 10259                           
 10260                           ; BSR set to: 0
 10261  0012AC  0100               	movlb	0	; () banked
 10262  0012AE  5198               	movf	___ftadd@exp1& (0+255),w,b
 10263  0012B0  0100               	movlb	0	; () banked
 10264  0012B2  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10265  0012B4  B0D8               	btfsc	status,0,c
 10266  0012B6  D013               	goto	l3154
 10267                           
 10268                           ; BSR set to: 0
 10269  0012B8  0100               	movlb	0	; () banked
 10270  0012BA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10271  0012BC  0800               	sublw	0
 10272  0012BE  0100               	movlb	0	; () banked
 10273  0012C0  2598               	addwf	___ftadd@exp1& (0+255),w,b
 10274  0012C2  0100               	movlb	0	; () banked
 10275  0012C4  6F93               	movwf	??___ftadd& (0+255),b
 10276  0012C6  0E19               	movlw	25
 10277  0012C8  0100               	movlb	0	; () banked
 10278  0012CA  5D93               	subwf	??___ftadd& (0+255),w,b
 10279  0012CC  A0D8               	btfss	status,0,c
 10280  0012CE  D007               	goto	l3154
 10281  0012D0                     l1023:
 10282                           
 10283                           ; BSR set to: 0
 10284  0012D0  C08D  F08D         	movff	___ftadd@f1,?___ftadd
 10285  0012D4  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
 10286  0012D8  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
 10287  0012DC  D0E5               	goto	l1020
 10288  0012DE                     l3154:
 10289                           
 10290                           ; BSR set to: 0
 10291  0012DE  0E06               	movlw	6
 10292  0012E0  0100               	movlb	0	; () banked
 10293  0012E2  6F96               	movwf	___ftadd@sign& (0+255),b
 10294                           
 10295                           ; BSR set to: 0
 10296  0012E4  0100               	movlb	0	; () banked
 10297  0012E6  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10298  0012E8  D002               	goto	l3160
 10299                           
 10300                           ; BSR set to: 0
 10301  0012EA  0100               	movlb	0	; () banked
 10302  0012EC  8F96               	bsf	___ftadd@sign& (0+255),7,b
 10303  0012EE                     l3160:
 10304                           
 10305                           ; BSR set to: 0
 10306  0012EE  0100               	movlb	0	; () banked
 10307  0012F0  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10308  0012F2  D002               	goto	l1025
 10309                           
 10310                           ; BSR set to: 0
 10311  0012F4  0100               	movlb	0	; () banked
 10312  0012F6  8D96               	bsf	___ftadd@sign& (0+255),6,b
 10313  0012F8                     l1025:
 10314                           
 10315                           ; BSR set to: 0
 10316  0012F8  0100               	movlb	0	; () banked
 10317  0012FA  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10318                           
 10319                           ; BSR set to: 0
 10320  0012FC  0EFF               	movlw	255
 10321  0012FE  0100               	movlb	0	; () banked
 10322  001300  178D               	andwf	___ftadd@f1& (0+255),f,b
 10323  001302  0EFF               	movlw	255
 10324  001304  0100               	movlb	0	; () banked
 10325  001306  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10326  001308  0E00               	movlw	0
 10327  00130A  0100               	movlb	0	; () banked
 10328  00130C  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10329  00130E  0100               	movlb	0	; () banked
 10330  001310  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10331                           
 10332                           ; BSR set to: 0
 10333  001312  0EFF               	movlw	255
 10334  001314  0100               	movlb	0	; () banked
 10335  001316  1790               	andwf	___ftadd@f2& (0+255),f,b
 10336  001318  0EFF               	movlw	255
 10337  00131A  0100               	movlb	0	; () banked
 10338  00131C  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10339  00131E  0E00               	movlw	0
 10340  001320  0100               	movlb	0	; () banked
 10341  001322  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10342                           
 10343                           ; BSR set to: 0
 10344  001324  0100               	movlb	0	; () banked
 10345  001326  5197               	movf	___ftadd@exp2& (0+255),w,b
 10346  001328  0100               	movlb	0	; () banked
 10347  00132A  5D98               	subwf	___ftadd@exp1& (0+255),w,b
 10348  00132C  B0D8               	btfsc	status,0,c
 10349  00132E  D02A               	goto	l3180
 10350  001330                     l3170:
 10351                           
 10352                           ; BSR set to: 0
 10353  001330  0100               	movlb	0	; () banked
 10354  001332  90D8               	bcf	status,0,c
 10355  001334  0100               	movlb	0	; () banked
 10356  001336  3790               	rlcf	___ftadd@f2& (0+255),f,b
 10357  001338  0100               	movlb	0	; () banked
 10358  00133A  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10359  00133C  0100               	movlb	0	; () banked
 10360  00133E  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10361  001340  0100               	movlb	0	; () banked
 10362  001342  0797               	decf	___ftadd@exp2& (0+255),f,b
 10363                           
 10364                           ; BSR set to: 0
 10365  001344  0100               	movlb	0	; () banked
 10366  001346  5197               	movf	___ftadd@exp2& (0+255),w,b
 10367  001348  0100               	movlb	0	; () banked
 10368  00134A  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10369  00134C  B4D8               	btfsc	status,2,c
 10370  00134E  D014               	goto	l3178
 10371                           
 10372                           ; BSR set to: 0
 10373  001350  0100               	movlb	0	; () banked
 10374  001352  0796               	decf	___ftadd@sign& (0+255),f,b
 10375  001354  C096  F093         	movff	___ftadd@sign,??___ftadd
 10376  001358  0E07               	movlw	7
 10377  00135A  0100               	movlb	0	; () banked
 10378  00135C  1793               	andwf	??___ftadd& (0+255),f,b
 10379  00135E  B4D8               	btfsc	status,2,c
 10380  001360  D00B               	goto	l3178
 10381  001362  D7E6               	goto	l3170
 10382  001364                     l3176:
 10383                           
 10384                           ; BSR set to: 0
 10385  001364  0100               	movlb	0	; () banked
 10386  001366  90D8               	bcf	status,0,c
 10387  001368  0100               	movlb	0	; () banked
 10388  00136A  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10389  00136C  0100               	movlb	0	; () banked
 10390  00136E  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10391  001370  0100               	movlb	0	; () banked
 10392  001372  338D               	rrcf	___ftadd@f1& (0+255),f,b
 10393  001374  0100               	movlb	0	; () banked
 10394  001376  2B98               	incf	___ftadd@exp1& (0+255),f,b
 10395  001378                     l3178:
 10396                           
 10397                           ; BSR set to: 0
 10398  001378  0100               	movlb	0	; () banked
 10399  00137A  5197               	movf	___ftadd@exp2& (0+255),w,b
 10400  00137C  0100               	movlb	0	; () banked
 10401  00137E  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10402  001380  D7F1               	goto	l3176
 10403  001382  D02F               	goto	l1034
 10404  001384                     l3180:
 10405                           
 10406                           ; BSR set to: 0
 10407  001384  0100               	movlb	0	; () banked
 10408  001386  5198               	movf	___ftadd@exp1& (0+255),w,b
 10409  001388  0100               	movlb	0	; () banked
 10410  00138A  5D97               	subwf	___ftadd@exp2& (0+255),w,b
 10411  00138C  B0D8               	btfsc	status,0,c
 10412  00138E  D029               	goto	l1034
 10413  001390                     l3182:
 10414                           
 10415                           ; BSR set to: 0
 10416  001390  0100               	movlb	0	; () banked
 10417  001392  90D8               	bcf	status,0,c
 10418  001394  0100               	movlb	0	; () banked
 10419  001396  378D               	rlcf	___ftadd@f1& (0+255),f,b
 10420  001398  0100               	movlb	0	; () banked
 10421  00139A  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10422  00139C  0100               	movlb	0	; () banked
 10423  00139E  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10424  0013A0  0100               	movlb	0	; () banked
 10425  0013A2  0798               	decf	___ftadd@exp1& (0+255),f,b
 10426                           
 10427                           ; BSR set to: 0
 10428  0013A4  0100               	movlb	0	; () banked
 10429  0013A6  5197               	movf	___ftadd@exp2& (0+255),w,b
 10430  0013A8  0100               	movlb	0	; () banked
 10431  0013AA  1998               	xorwf	___ftadd@exp1& (0+255),w,b
 10432  0013AC  B4D8               	btfsc	status,2,c
 10433  0013AE  D014               	goto	l3190
 10434                           
 10435                           ; BSR set to: 0
 10436  0013B0  0100               	movlb	0	; () banked
 10437  0013B2  0796               	decf	___ftadd@sign& (0+255),f,b
 10438  0013B4  C096  F093         	movff	___ftadd@sign,??___ftadd
 10439  0013B8  0E07               	movlw	7
 10440  0013BA  0100               	movlb	0	; () banked
 10441  0013BC  1793               	andwf	??___ftadd& (0+255),f,b
 10442  0013BE  B4D8               	btfsc	status,2,c
 10443  0013C0  D00B               	goto	l3190
 10444  0013C2  D7E6               	goto	l3182
 10445  0013C4                     l3188:
 10446                           
 10447                           ; BSR set to: 0
 10448  0013C4  0100               	movlb	0	; () banked
 10449  0013C6  90D8               	bcf	status,0,c
 10450  0013C8  0100               	movlb	0	; () banked
 10451  0013CA  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10452  0013CC  0100               	movlb	0	; () banked
 10453  0013CE  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10454  0013D0  0100               	movlb	0	; () banked
 10455  0013D2  3390               	rrcf	___ftadd@f2& (0+255),f,b
 10456  0013D4  0100               	movlb	0	; () banked
 10457  0013D6  2B97               	incf	___ftadd@exp2& (0+255),f,b
 10458  0013D8                     l3190:
 10459                           
 10460                           ; BSR set to: 0
 10461  0013D8  0100               	movlb	0	; () banked
 10462  0013DA  5197               	movf	___ftadd@exp2& (0+255),w,b
 10463  0013DC  0100               	movlb	0	; () banked
 10464  0013DE  6398               	cpfseq	___ftadd@exp1& (0+255),b
 10465  0013E0  D7F1               	goto	l3188
 10466  0013E2                     l1034:
 10467                           
 10468                           ; BSR set to: 0
 10469  0013E2  0100               	movlb	0	; () banked
 10470  0013E4  AF96               	btfss	___ftadd@sign& (0+255),7,b
 10471  0013E6  D012               	goto	l1043
 10472                           
 10473                           ; BSR set to: 0
 10474  0013E8  0EFF               	movlw	255
 10475  0013EA  0100               	movlb	0	; () banked
 10476  0013EC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
 10477  0013EE  0EFF               	movlw	255
 10478  0013F0  0100               	movlb	0	; () banked
 10479  0013F2  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10480  0013F4  0EFF               	movlw	255
 10481  0013F6  0100               	movlb	0	; () banked
 10482  0013F8  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10483  0013FA  0E01               	movlw	1
 10484  0013FC  0100               	movlb	0	; () banked
 10485  0013FE  278D               	addwf	___ftadd@f1& (0+255),f,b
 10486  001400  0E00               	movlw	0
 10487  001402  0100               	movlb	0	; () banked
 10488  001404  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10489  001406  0E00               	movlw	0
 10490  001408  0100               	movlb	0	; () banked
 10491  00140A  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10492  00140C                     l1043:
 10493                           
 10494                           ; BSR set to: 0
 10495  00140C  0100               	movlb	0	; () banked
 10496  00140E  AD96               	btfss	___ftadd@sign& (0+255),6,b
 10497  001410  D012               	goto	l3196
 10498                           
 10499                           ; BSR set to: 0
 10500  001412  0EFF               	movlw	255
 10501  001414  0100               	movlb	0	; () banked
 10502  001416  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10503  001418  0EFF               	movlw	255
 10504  00141A  0100               	movlb	0	; () banked
 10505  00141C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10506  00141E  0EFF               	movlw	255
 10507  001420  0100               	movlb	0	; () banked
 10508  001422  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10509  001424  0E01               	movlw	1
 10510  001426  0100               	movlb	0	; () banked
 10511  001428  2790               	addwf	___ftadd@f2& (0+255),f,b
 10512  00142A  0E00               	movlw	0
 10513  00142C  0100               	movlb	0	; () banked
 10514  00142E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10515  001430  0E00               	movlw	0
 10516  001432  0100               	movlb	0	; () banked
 10517  001434  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10518  001436                     l3196:
 10519                           
 10520                           ; BSR set to: 0
 10521  001436  0E00               	movlw	0
 10522  001438  0100               	movlb	0	; () banked
 10523  00143A  6F96               	movwf	___ftadd@sign& (0+255),b
 10524                           
 10525                           ; BSR set to: 0
 10526  00143C  0100               	movlb	0	; () banked
 10527  00143E  518D               	movf	___ftadd@f1& (0+255),w,b
 10528  001440  0100               	movlb	0	; () banked
 10529  001442  2790               	addwf	___ftadd@f2& (0+255),f,b
 10530  001444  0100               	movlb	0	; () banked
 10531  001446  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
 10532  001448  0100               	movlb	0	; () banked
 10533  00144A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10534  00144C  0100               	movlb	0	; () banked
 10535  00144E  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
 10536  001450  0100               	movlb	0	; () banked
 10537  001452  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10538                           
 10539                           ; BSR set to: 0
 10540  001454  0100               	movlb	0	; () banked
 10541  001456  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10542  001458  D015               	goto	l3206
 10543                           
 10544                           ; BSR set to: 0
 10545  00145A  0EFF               	movlw	255
 10546  00145C  0100               	movlb	0	; () banked
 10547  00145E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
 10548  001460  0EFF               	movlw	255
 10549  001462  0100               	movlb	0	; () banked
 10550  001464  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10551  001466  0EFF               	movlw	255
 10552  001468  0100               	movlb	0	; () banked
 10553  00146A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10554  00146C  0E01               	movlw	1
 10555  00146E  0100               	movlb	0	; () banked
 10556  001470  2790               	addwf	___ftadd@f2& (0+255),f,b
 10557  001472  0E00               	movlw	0
 10558  001474  0100               	movlb	0	; () banked
 10559  001476  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10560  001478  0E00               	movlw	0
 10561  00147A  0100               	movlb	0	; () banked
 10562  00147C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10563                           
 10564                           ; BSR set to: 0
 10565  00147E  0E01               	movlw	1
 10566  001480  0100               	movlb	0	; () banked
 10567  001482  6F96               	movwf	___ftadd@sign& (0+255),b
 10568  001484                     l3206:
 10569                           
 10570                           ; BSR set to: 0
 10571  001484  C090  F060         	movff	___ftadd@f2,___ftpack@arg
 10572  001488  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10573  00148C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10574  001490  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
 10575  001494  C096  F064         	movff	___ftadd@sign,___ftpack@sign
 10576  001498  ECBE  F00E         	call	___ftpack	;wreg free
 10577  00149C  C060  F08D         	movff	?___ftpack,?___ftadd
 10578  0014A0  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
 10579  0014A4  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
 10580  0014A8                     l1020:
 10581  0014A8  0012               	return	
 10582  0014AA                     __end_of___ftadd:
 10583                           	opt stack 0
 10584                           tblptru	equ	0xFF8
 10585                           tblptrh	equ	0xFF7
 10586                           tblptrl	equ	0xFF6
 10587                           tablat	equ	0xFF5
 10588                           prodh	equ	0xFF4
 10589                           prodl	equ	0xFF3
 10590                           intcon	equ	0xFF2
 10591                           intcon2	equ	0xFF1
 10592                           intcon3	equ	0xFF0
 10593                           indf0	equ	0xFEF
 10594                           postinc0	equ	0xFEE
 10595                           fsr0h	equ	0xFEA
 10596                           fsr0l	equ	0xFE9
 10597                           wreg	equ	0xFE8
 10598                           postinc1	equ	0xFE6
 10599                           postdec1	equ	0xFE5
 10600                           fsr1l	equ	0xFE1
 10601                           indf2	equ	0xFDF
 10602                           postinc2	equ	0xFDE
 10603                           postdec2	equ	0xFDD
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function ___ftpack *****************
 10609 ;; Defined at:
 10610 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  arg             3    0[BANK0 ] unsigned um
 10613 ;;  exp             1    3[BANK0 ] unsigned char 
 10614 ;;  sign            1    4[BANK0 ] unsigned char 
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  3    0[BANK0 ] float 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2, status,0
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10626 ;;      Params:         0       5       0       0       0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10628 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10629 ;;      Totals:         0       8       0       0       0       0       0       0       0
 10630 ;;Total ram usage:        8 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    4
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		___ftadd
 10637 ;;		___ftmul
 10638 ;;		___lbtoft
 10639 ;;		___lltoft
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           	psect	text43
 10644  001D7C                     __ptext43:
 10645                           	opt stack 0
 10646  001D7C                     ___ftpack:
 10647                           	opt stack 21
 10648                           
 10649                           ;incstack = 0
 10650  001D7C  0100               	movlb	0	; () banked
 10651  001D7E  5163               	movf	___ftpack@exp& (0+255),w,b
 10652  001D80  B4D8               	btfsc	status,2,c
 10653  001D82  D008               	goto	l3086
 10654                           
 10655                           ; BSR set to: 0
 10656  001D84  0100               	movlb	0	; () banked
 10657  001D86  5160               	movf	___ftpack@arg& (0+255),w,b
 10658  001D88  0100               	movlb	0	; () banked
 10659  001D8A  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10660  001D8C  0100               	movlb	0	; () banked
 10661  001D8E  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10662  001D90  A4D8               	btfss	status,2,c
 10663  001D92  D014               	goto	l3092
 10664  001D94                     l3086:
 10665                           
 10666                           ; BSR set to: 0
 10667  001D94  0E00               	movlw	0
 10668  001D96  0100               	movlb	0	; () banked
 10669  001D98  6F60               	movwf	?___ftpack& (0+255),b
 10670  001D9A  0E00               	movlw	0
 10671  001D9C  0100               	movlb	0	; () banked
 10672  001D9E  6F61               	movwf	(?___ftpack+1)& (0+255),b
 10673  001DA0  0E00               	movlw	0
 10674  001DA2  0100               	movlb	0	; () banked
 10675  001DA4  6F62               	movwf	(?___ftpack+2)& (0+255),b
 10676  001DA6  D06E               	goto	l982
 10677  001DA8                     l3090:
 10678                           
 10679                           ; BSR set to: 0
 10680  001DA8  0100               	movlb	0	; () banked
 10681  001DAA  2B63               	incf	___ftpack@exp& (0+255),f,b
 10682  001DAC  0100               	movlb	0	; () banked
 10683  001DAE  90D8               	bcf	status,0,c
 10684  001DB0  0100               	movlb	0	; () banked
 10685  001DB2  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10686  001DB4  0100               	movlb	0	; () banked
 10687  001DB6  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10688  001DB8  0100               	movlb	0	; () banked
 10689  001DBA  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10690  001DBC                     l3092:
 10691                           
 10692                           ; BSR set to: 0
 10693  001DBC  0E00               	movlw	0
 10694  001DBE  0100               	movlb	0	; () banked
 10695  001DC0  1560               	andwf	___ftpack@arg& (0+255),w,b
 10696  001DC2  0100               	movlb	0	; () banked
 10697  001DC4  6F65               	movwf	??___ftpack& (0+255),b
 10698  001DC6  0E00               	movlw	0
 10699  001DC8  0100               	movlb	0	; () banked
 10700  001DCA  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10701  001DCC  0100               	movlb	0	; () banked
 10702  001DCE  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10703  001DD0  0EFE               	movlw	254
 10704  001DD2  0100               	movlb	0	; () banked
 10705  001DD4  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10706  001DD6  0100               	movlb	0	; () banked
 10707  001DD8  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10708  001DDA  0100               	movlb	0	; () banked
 10709  001DDC  5165               	movf	??___ftpack& (0+255),w,b
 10710  001DDE  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10711  001DE0  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10712  001DE2  B4D8               	btfsc	status,2,c
 10713  001DE4  D014               	goto	l3098
 10714  001DE6  D7E0               	goto	l3090
 10715  001DE8                     l3094:
 10716                           
 10717                           ; BSR set to: 0
 10718  001DE8  0100               	movlb	0	; () banked
 10719  001DEA  2B63               	incf	___ftpack@exp& (0+255),f,b
 10720                           
 10721                           ; BSR set to: 0
 10722  001DEC  0E01               	movlw	1
 10723  001DEE  0100               	movlb	0	; () banked
 10724  001DF0  2760               	addwf	___ftpack@arg& (0+255),f,b
 10725  001DF2  0E00               	movlw	0
 10726  001DF4  0100               	movlb	0	; () banked
 10727  001DF6  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10728  001DF8  0E00               	movlw	0
 10729  001DFA  0100               	movlb	0	; () banked
 10730  001DFC  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10731  001DFE  0100               	movlb	0	; () banked
 10732  001E00  90D8               	bcf	status,0,c
 10733  001E02  0100               	movlb	0	; () banked
 10734  001E04  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10735  001E06  0100               	movlb	0	; () banked
 10736  001E08  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10737  001E0A  0100               	movlb	0	; () banked
 10738  001E0C  3360               	rrcf	___ftpack@arg& (0+255),f,b
 10739  001E0E                     l3098:
 10740                           
 10741                           ; BSR set to: 0
 10742  001E0E  0E00               	movlw	0
 10743  001E10  0100               	movlb	0	; () banked
 10744  001E12  1560               	andwf	___ftpack@arg& (0+255),w,b
 10745  001E14  0100               	movlb	0	; () banked
 10746  001E16  6F65               	movwf	??___ftpack& (0+255),b
 10747  001E18  0E00               	movlw	0
 10748  001E1A  0100               	movlb	0	; () banked
 10749  001E1C  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10750  001E1E  0100               	movlb	0	; () banked
 10751  001E20  6F66               	movwf	(??___ftpack+1)& (0+255),b
 10752  001E22  0EFF               	movlw	255
 10753  001E24  0100               	movlb	0	; () banked
 10754  001E26  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10755  001E28  0100               	movlb	0	; () banked
 10756  001E2A  6F67               	movwf	(??___ftpack+2)& (0+255),b
 10757  001E2C  0100               	movlb	0	; () banked
 10758  001E2E  5165               	movf	??___ftpack& (0+255),w,b
 10759  001E30  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 10760  001E32  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 10761  001E34  B4D8               	btfsc	status,2,c
 10762  001E36  D00B               	goto	l3102
 10763  001E38  D7D7               	goto	l3094
 10764  001E3A                     l3100:
 10765                           
 10766                           ; BSR set to: 0
 10767  001E3A  0100               	movlb	0	; () banked
 10768  001E3C  0763               	decf	___ftpack@exp& (0+255),f,b
 10769  001E3E  0100               	movlb	0	; () banked
 10770  001E40  90D8               	bcf	status,0,c
 10771  001E42  0100               	movlb	0	; () banked
 10772  001E44  3760               	rlcf	___ftpack@arg& (0+255),f,b
 10773  001E46  0100               	movlb	0	; () banked
 10774  001E48  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10775  001E4A  0100               	movlb	0	; () banked
 10776  001E4C  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10777  001E4E                     l3102:
 10778                           
 10779                           ; BSR set to: 0
 10780  001E4E  0100               	movlb	0	; () banked
 10781  001E50  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
 10782  001E52  D7F3               	goto	l3100
 10783                           
 10784                           ; BSR set to: 0
 10785  001E54  0100               	movlb	0	; () banked
 10786  001E56  B163               	btfsc	___ftpack@exp& (0+255),0,b
 10787  001E58  D002               	goto	l3106
 10788                           
 10789                           ; BSR set to: 0
 10790  001E5A  0100               	movlb	0	; () banked
 10791  001E5C  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10792  001E5E                     l3106:
 10793                           
 10794                           ; BSR set to: 0
 10795  001E5E  0100               	movlb	0	; () banked
 10796  001E60  90D8               	bcf	status,0,c
 10797  001E62  3363               	rrcf	___ftpack@exp& (0+255),f,b
 10798  001E64  0100               	movlb	0	; () banked
 10799  001E66  5163               	movf	___ftpack@exp& (0+255),w,b
 10800  001E68  0100               	movlb	0	; () banked
 10801  001E6A  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10802                           
 10803                           ; BSR set to: 0
 10804  001E6C  0100               	movlb	0	; () banked
 10805  001E6E  5164               	movf	___ftpack@sign& (0+255),w,b
 10806  001E70  B4D8               	btfsc	status,2,c
 10807  001E72  D002               	goto	l3112
 10808                           
 10809                           ; BSR set to: 0
 10810  001E74  0100               	movlb	0	; () banked
 10811  001E76  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10812  001E78                     l3112:
 10813                           
 10814                           ; BSR set to: 0
 10815  001E78  C060  F060         	movff	___ftpack@arg,?___ftpack
 10816  001E7C  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 10817  001E80  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 10818  001E84                     l982:
 10819                           
 10820                           ; BSR set to: 0
 10821  001E84  0012               	return	
 10822  001E86                     __end_of___ftpack:
 10823                           	opt stack 0
 10824                           tblptru	equ	0xFF8
 10825                           tblptrh	equ	0xFF7
 10826                           tblptrl	equ	0xFF6
 10827                           tablat	equ	0xFF5
 10828                           prodh	equ	0xFF4
 10829                           prodl	equ	0xFF3
 10830                           intcon	equ	0xFF2
 10831                           intcon2	equ	0xFF1
 10832                           intcon3	equ	0xFF0
 10833                           indf0	equ	0xFEF
 10834                           postinc0	equ	0xFEE
 10835                           fsr0h	equ	0xFEA
 10836                           fsr0l	equ	0xFE9
 10837                           wreg	equ	0xFE8
 10838                           postinc1	equ	0xFE6
 10839                           postdec1	equ	0xFE5
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           fsr2h	equ	0xFDA
 10845                           fsr2l	equ	0xFD9
 10846                           status	equ	0xFD8
 10847                           
 10848 ;; *************** function ___ftneg *****************
 10849 ;; Defined at:
 10850 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  f1              3    0[BANK0 ] float 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;		None
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  3    0[BANK0 ] float 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10864 ;;      Params:         0       3       0       0       0       0       0       0       0
 10865 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10867 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10868 ;;Total ram usage:        3 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    4
 10871 ;; This function calls:
 10872 ;;		Nothing
 10873 ;; This function is called by:
 10874 ;;		_sprintf
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text44
 10879  003322                     __ptext44:
 10880                           	opt stack 0
 10881  003322                     ___ftneg:
 10882                           	opt stack 23
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;incstack = 0
 10886  003322  0E7F               	movlw	127
 10887  003324  0100               	movlb	0	; () banked
 10888  003326  1562               	andwf	(___ftneg@f1+2)& (0+255),w,b
 10889  003328  0100               	movlb	0	; () banked
 10890  00332A  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10891  00332C  0100               	movlb	0	; () banked
 10892  00332E  1160               	iorwf	___ftneg@f1& (0+255),w,b
 10893  003330  B4D8               	btfsc	status,2,c
 10894  003332  D009               	goto	l1093
 10895                           
 10896                           ; BSR set to: 0
 10897  003334  0E00               	movlw	0
 10898  003336  0100               	movlb	0	; () banked
 10899  003338  1B60               	xorwf	___ftneg@f1& (0+255),f,b
 10900  00333A  0E00               	movlw	0
 10901  00333C  0100               	movlb	0	; () banked
 10902  00333E  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10903  003340  0E80               	movlw	128
 10904  003342  0100               	movlb	0	; () banked
 10905  003344  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10906  003346                     l1093:
 10907                           
 10908                           ; BSR set to: 0
 10909  003346  C060  F060         	movff	___ftneg@f1,?___ftneg
 10910  00334A  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 10911  00334E  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 10912                           
 10913                           ; BSR set to: 0
 10914  003352  0012               	return	
 10915  003354                     __end_of___ftneg:
 10916                           	opt stack 0
 10917                           tblptru	equ	0xFF8
 10918                           tblptrh	equ	0xFF7
 10919                           tblptrl	equ	0xFF6
 10920                           tablat	equ	0xFF5
 10921                           prodh	equ	0xFF4
 10922                           prodl	equ	0xFF3
 10923                           intcon	equ	0xFF2
 10924                           intcon2	equ	0xFF1
 10925                           intcon3	equ	0xFF0
 10926                           indf0	equ	0xFEF
 10927                           postinc0	equ	0xFEE
 10928                           fsr0h	equ	0xFEA
 10929                           fsr0l	equ	0xFE9
 10930                           wreg	equ	0xFE8
 10931                           postinc1	equ	0xFE6
 10932                           postdec1	equ	0xFE5
 10933                           fsr1l	equ	0xFE1
 10934                           indf2	equ	0xFDF
 10935                           postinc2	equ	0xFDE
 10936                           postdec2	equ	0xFDD
 10937                           fsr2h	equ	0xFDA
 10938                           fsr2l	equ	0xFD9
 10939                           status	equ	0xFD8
 10940                           
 10941 ;; *************** function ___ftge *****************
 10942 ;; Defined at:
 10943 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  ff1             3    0[BANK0 ] float 
 10946 ;;  ff2             3    3[BANK0 ] float 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;		None
 10949 ;; Return value:  Size  Location     Type
 10950 ;;		None               void
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10958 ;;      Params:         0       6       0       0       0       0       0       0       0
 10959 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10960 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10961 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10962 ;;Total ram usage:        9 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    4
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_sprintf
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           	psect	text45
 10973  002210                     __ptext45:
 10974                           	opt stack 0
 10975  002210                     ___ftge:
 10976                           	opt stack 23
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;incstack = 0
 10980  002210  0100               	movlb	0	; () banked
 10981  002212  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10982  002214  D020               	goto	l3616
 10983                           
 10984                           ; BSR set to: 0
 10985  002216  0100               	movlb	0	; () banked
 10986  002218  C060  F066         	movff	___ftge@ff1,??___ftge
 10987  00221C  0100               	movlb	0	; () banked
 10988  00221E  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
 10989  002222  0100               	movlb	0	; () banked
 10990  002224  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
 10991  002228  0100               	movlb	0	; () banked
 10992  00222A  1F66               	comf	??___ftge& (0+255),f,b
 10993  00222C  1F67               	comf	(??___ftge+1)& (0+255),f,b
 10994  00222E  1F68               	comf	(??___ftge+2)& (0+255),f,b
 10995  002230  2B66               	incf	??___ftge& (0+255),f,b
 10996  002232  0E00               	movlw	0
 10997  002234  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 10998  002236  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 10999  002238  0E00               	movlw	0
 11000  00223A  0100               	movlb	0	; () banked
 11001  00223C  2566               	addwf	??___ftge& (0+255),w,b
 11002  00223E  0100               	movlb	0	; () banked
 11003  002240  6F60               	movwf	___ftge@ff1& (0+255),b
 11004  002242  0E00               	movlw	0
 11005  002244  0100               	movlb	0	; () banked
 11006  002246  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11007  002248  0100               	movlb	0	; () banked
 11008  00224A  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
 11009  00224C  0E80               	movlw	128
 11010  00224E  0100               	movlb	0	; () banked
 11011  002250  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11012  002252  0100               	movlb	0	; () banked
 11013  002254  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
 11014  002256                     l3616:
 11015                           
 11016                           ; BSR set to: 0
 11017  002256  0100               	movlb	0	; () banked
 11018  002258  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11019  00225A  D020               	goto	l3620
 11020                           
 11021                           ; BSR set to: 0
 11022  00225C  0100               	movlb	0	; () banked
 11023  00225E  C063  F066         	movff	___ftge@ff2,??___ftge
 11024  002262  0100               	movlb	0	; () banked
 11025  002264  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
 11026  002268  0100               	movlb	0	; () banked
 11027  00226A  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
 11028  00226E  0100               	movlb	0	; () banked
 11029  002270  1F66               	comf	??___ftge& (0+255),f,b
 11030  002272  1F67               	comf	(??___ftge+1)& (0+255),f,b
 11031  002274  1F68               	comf	(??___ftge+2)& (0+255),f,b
 11032  002276  2B66               	incf	??___ftge& (0+255),f,b
 11033  002278  0E00               	movlw	0
 11034  00227A  2367               	addwfc	(??___ftge+1)& (0+255),f,b
 11035  00227C  2368               	addwfc	(??___ftge+2)& (0+255),f,b
 11036  00227E  0E00               	movlw	0
 11037  002280  0100               	movlb	0	; () banked
 11038  002282  2566               	addwf	??___ftge& (0+255),w,b
 11039  002284  0100               	movlb	0	; () banked
 11040  002286  6F63               	movwf	___ftge@ff2& (0+255),b
 11041  002288  0E00               	movlw	0
 11042  00228A  0100               	movlb	0	; () banked
 11043  00228C  2167               	addwfc	(??___ftge+1)& (0+255),w,b
 11044  00228E  0100               	movlb	0	; () banked
 11045  002290  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
 11046  002292  0E80               	movlw	128
 11047  002294  0100               	movlb	0	; () banked
 11048  002296  2168               	addwfc	(??___ftge+2)& (0+255),w,b
 11049  002298  0100               	movlb	0	; () banked
 11050  00229A  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
 11051  00229C                     l3620:
 11052                           
 11053                           ; BSR set to: 0
 11054  00229C  0E00               	movlw	0
 11055  00229E  0100               	movlb	0	; () banked
 11056  0022A0  1B60               	xorwf	___ftge@ff1& (0+255),f,b
 11057  0022A2  0E00               	movlw	0
 11058  0022A4  0100               	movlb	0	; () banked
 11059  0022A6  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11060  0022A8  0E80               	movlw	128
 11061  0022AA  0100               	movlb	0	; () banked
 11062  0022AC  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11063                           
 11064                           ; BSR set to: 0
 11065  0022AE  0E00               	movlw	0
 11066  0022B0  0100               	movlb	0	; () banked
 11067  0022B2  1B63               	xorwf	___ftge@ff2& (0+255),f,b
 11068  0022B4  0E00               	movlw	0
 11069  0022B6  0100               	movlb	0	; () banked
 11070  0022B8  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11071  0022BA  0E80               	movlw	128
 11072  0022BC  0100               	movlb	0	; () banked
 11073  0022BE  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11074  0022C0  0100               	movlb	0	; () banked
 11075  0022C2  5163               	movf	___ftge@ff2& (0+255),w,b
 11076  0022C4  0100               	movlb	0	; () banked
 11077  0022C6  5D60               	subwf	___ftge@ff1& (0+255),w,b
 11078  0022C8  0100               	movlb	0	; () banked
 11079  0022CA  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
 11080  0022CC  0100               	movlb	0	; () banked
 11081  0022CE  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11082  0022D0  0100               	movlb	0	; () banked
 11083  0022D2  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
 11084  0022D4  0100               	movlb	0	; () banked
 11085  0022D6  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11086  0022D8  B0D8               	btfsc	status,0,c
 11087  0022DA  D002               	goto	l3626
 11088                           
 11089                           ; BSR set to: 0
 11090  0022DC  90D8               	bcf	status,0,c
 11091  0022DE  D001               	goto	l1077
 11092  0022E0                     l3626:
 11093                           
 11094                           ; BSR set to: 0
 11095  0022E0  80D8               	bsf	status,0,c
 11096  0022E2                     l1077:
 11097                           
 11098                           ; BSR set to: 0
 11099  0022E2  0012               	return	
 11100  0022E4                     __end_of___ftge:
 11101                           	opt stack 0
 11102                           tblptru	equ	0xFF8
 11103                           tblptrh	equ	0xFF7
 11104                           tblptrl	equ	0xFF6
 11105                           tablat	equ	0xFF5
 11106                           prodh	equ	0xFF4
 11107                           prodl	equ	0xFF3
 11108                           intcon	equ	0xFF2
 11109                           intcon2	equ	0xFF1
 11110                           intcon3	equ	0xFF0
 11111                           indf0	equ	0xFEF
 11112                           postinc0	equ	0xFEE
 11113                           fsr0h	equ	0xFEA
 11114                           fsr0l	equ	0xFE9
 11115                           wreg	equ	0xFE8
 11116                           postinc1	equ	0xFE6
 11117                           postdec1	equ	0xFE5
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           postdec2	equ	0xFDD
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _Lcd_Write_String *****************
 11127 ;; Defined at:
 11128 ;;		line 90 in file "lcd.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  a               2    4[BANK0 ] PTR unsigned char 
 11131 ;;		 -> STR_23(11), STR_22(7), STR_21(18), STR_20(17), 
 11132 ;;		 -> STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), STR_16(8), 
 11133 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(16), 
 11134 ;;		 -> STR_10(7), 
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;  i               2    8[BANK0 ] int 
 11137 ;; Return value:  Size  Location     Type
 11138 ;;		None               void
 11139 ;; Registers used:
 11140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11146 ;;      Params:         0       2       0       0       0       0       0       0       0
 11147 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11148 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11149 ;;      Totals:         0       6       0       0       0       0       0       0       0
 11150 ;;Total ram usage:        6 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    6
 11153 ;; This function calls:
 11154 ;;		_Lcd_Write_Char
 11155 ;; This function is called by:
 11156 ;;		_Inicializa_Driveby
 11157 ;;		_Comando_Tablet
 11158 ;;		_Lcd_Write_Integer
 11159 ;;		_main
 11160 ;;		_Lcd_Write_Float
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           	psect	text46
 11165  0028CA                     __ptext46:
 11166                           	opt stack 0
 11167  0028CA                     _Lcd_Write_String:
 11168                           	opt stack 24
 11169                           
 11170                           ;lcd.c: 91: int i;
 11171                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;incstack = 0
 11175  0028CA  0E00               	movlw	0
 11176  0028CC  0100               	movlb	0	; () banked
 11177  0028CE  6F69               	movwf	(Lcd_Write_String@i+1)& (0+255),b
 11178  0028D0  0E00               	movlw	0
 11179  0028D2  0100               	movlb	0	; () banked
 11180  0028D4  6F68               	movwf	Lcd_Write_String@i& (0+255),b
 11181  0028D6  D023               	goto	l3958
 11182  0028D8                     l3954:
 11183                           
 11184                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 11185  0028D8  0100               	movlb	0	; () banked
 11186  0028DA  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11187  0028DE  0100               	movlb	0	; () banked
 11188  0028E0  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11189  0028E4  0100               	movlb	0	; () banked
 11190  0028E6  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11191  0028E8  0100               	movlb	0	; () banked
 11192  0028EA  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11193  0028EC  0100               	movlb	0	; () banked
 11194  0028EE  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11195  0028F0  0100               	movlb	0	; () banked
 11196  0028F2  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11197  0028F4  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11198  0028F8  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11199  0028FC  6AF8               	clrf	tblptru,c
 11200  0028FE  0E07               	movlw	(high __ramtop+-1)
 11201  002900  64F7               	cpfsgt	tblptrh,c
 11202  002902  D003               	bra	u4067
 11203  002904  0008               	tblrd		*
 11204  002906  50F5               	movf	tablat,w,c
 11205  002908  D005               	bra	u4060
 11206  00290A                     u4067:
 11207  00290A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11208  00290E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11209  002912  50EF               	movf	indf0,w,c
 11210  002914                     u4060:
 11211  002914  EC48  F018         	call	_Lcd_Write_Char
 11212  002918  0100               	movlb	0	; () banked
 11213  00291A  4B68               	infsnz	Lcd_Write_String@i& (0+255),f,b
 11214  00291C  2B69               	incf	(Lcd_Write_String@i+1)& (0+255),f,b
 11215  00291E                     l3958:
 11216                           
 11217                           ; BSR set to: 0
 11218  00291E  0100               	movlb	0	; () banked
 11219  002920  C064  F066         	movff	Lcd_Write_String@a,??_Lcd_Write_String
 11220  002924  0100               	movlb	0	; () banked
 11221  002926  C065  F067         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
 11222  00292A  0100               	movlb	0	; () banked
 11223  00292C  5168               	movf	Lcd_Write_String@i& (0+255),w,b
 11224  00292E  0100               	movlb	0	; () banked
 11225  002930  2766               	addwf	??_Lcd_Write_String& (0+255),f,b
 11226  002932  0100               	movlb	0	; () banked
 11227  002934  5169               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
 11228  002936  0100               	movlb	0	; () banked
 11229  002938  2367               	addwfc	(??_Lcd_Write_String+1)& (0+255),f,b
 11230  00293A  C066  FFF6         	movff	??_Lcd_Write_String,tblptrl
 11231  00293E  C067  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 11232  002942  6AF8               	clrf	tblptru,c
 11233  002944  0E07               	movlw	(high __ramtop+-1)
 11234  002946  64F7               	cpfsgt	tblptrh,c
 11235  002948  D003               	bra	u4077
 11236  00294A  0008               	tblrd		*
 11237  00294C  50F5               	movf	tablat,w,c
 11238  00294E  D005               	bra	u4070
 11239  002950                     u4077:
 11240  002950  CFF6 FFE9          	movff	tblptrl,fsr0l
 11241  002954  CFF7 FFEA          	movff	tblptrh,fsr0h
 11242  002958  50EF               	movf	indf0,w,c
 11243  00295A                     u4070:
 11244  00295A  0900               	iorlw	0
 11245  00295C  B4D8               	btfsc	status,2,c
 11246  00295E  0012               	return	
 11247  002960  D7BB               	goto	l3954
 11248  002962                     __end_of_Lcd_Write_String:
 11249                           	opt stack 0
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           intcon2	equ	0xFF1
 11258                           intcon3	equ	0xFF0
 11259                           indf0	equ	0xFEF
 11260                           postinc0	equ	0xFEE
 11261                           fsr0h	equ	0xFEA
 11262                           fsr0l	equ	0xFE9
 11263                           wreg	equ	0xFE8
 11264                           postinc1	equ	0xFE6
 11265                           postdec1	equ	0xFE5
 11266                           fsr1l	equ	0xFE1
 11267                           indf2	equ	0xFDF
 11268                           postinc2	equ	0xFDE
 11269                           postdec2	equ	0xFDD
 11270                           fsr2h	equ	0xFDA
 11271                           fsr2l	equ	0xFD9
 11272                           status	equ	0xFD8
 11273                           
 11274 ;; *************** function _Lcd_Write_Char *****************
 11275 ;; Defined at:
 11276 ;;		line 75 in file "lcd.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  a               1    wreg     unsigned char 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;  a               1    3[BANK0 ] unsigned char 
 11281 ;;  y               1    2[BANK0 ] unsigned char 
 11282 ;;  temp            1    1[BANK0 ] unsigned char 
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, status,2, status,0, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0
 11293 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11294 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11295 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11296 ;;Total ram usage:        3 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    5
 11299 ;; This function calls:
 11300 ;;		_Lcd_Port
 11301 ;; This function is called by:
 11302 ;;		_Lcd_Write_String
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text47
 11307  003090                     __ptext47:
 11308                           	opt stack 0
 11309  003090                     _Lcd_Write_Char:
 11310                           	opt stack 24
 11311                           
 11312                           ;incstack = 0
 11313                           ;Lcd_Write_Char@a stored from wreg
 11314  003090  0100               	movlb	0	; () banked
 11315  003092  6F63               	movwf	Lcd_Write_Char@a& (0+255),b
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;lcd.c: 76: char temp, y;
 11319                           ;lcd.c: 77: temp = a & 0x0F;
 11320  003094  0100               	movlb	0	; () banked
 11321  003096  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11322  003098  0B0F               	andlw	15
 11323  00309A  0100               	movlb	0	; () banked
 11324  00309C  6F61               	movwf	Lcd_Write_Char@temp& (0+255),b
 11325                           
 11326                           ;lcd.c: 78: y = a & 0xF0;
 11327  00309E  0100               	movlb	0	; () banked
 11328  0030A0  5163               	movf	Lcd_Write_Char@a& (0+255),w,b
 11329  0030A2  0BF0               	andlw	240
 11330  0030A4  0100               	movlb	0	; () banked
 11331  0030A6  6F62               	movwf	Lcd_Write_Char@y& (0+255),b
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 11335  0030A8  8084               	bsf	3972,0,c	;volatile
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;lcd.c: 80: Lcd_Port(y >> 4);
 11339  0030AA  0100               	movlb	0	; () banked
 11340  0030AC  3962               	swapf	Lcd_Write_Char@y& (0+255),w,b
 11341  0030AE  0B0F               	andlw	15
 11342  0030B0  EC5D  F019         	call	_Lcd_Port
 11343                           
 11344                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 11345  0030B4  8484               	bsf	3972,2,c	;volatile
 11346                           
 11347                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11348  0030B6  0E0D               	movlw	13
 11349  0030B8                     u5307:
 11350  0030B8  2EE8               	decfsz	wreg,f,c
 11351  0030BA  D7FE               	goto	u5307
 11352  0030BC  F000               	nop	
 11353                           
 11354                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 11355  0030BE  9484               	bcf	3972,2,c	;volatile
 11356                           
 11357                           ;lcd.c: 84: Lcd_Port(temp);
 11358  0030C0  0100               	movlb	0	; () banked
 11359  0030C2  5161               	movf	Lcd_Write_Char@temp& (0+255),w,b
 11360  0030C4  EC5D  F019         	call	_Lcd_Port
 11361                           
 11362                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 11363  0030C8  8484               	bsf	3972,2,c	;volatile
 11364                           
 11365                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 11366  0030CA  0E0D               	movlw	13
 11367  0030CC                     u5317:
 11368  0030CC  2EE8               	decfsz	wreg,f,c
 11369  0030CE  D7FE               	goto	u5317
 11370  0030D0  F000               	nop	
 11371                           
 11372                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 11373  0030D2  9484               	bcf	3972,2,c	;volatile
 11374  0030D4  0012               	return	
 11375  0030D6                     __end_of_Lcd_Write_Char:
 11376                           	opt stack 0
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           intcon2	equ	0xFF1
 11385                           intcon3	equ	0xFF0
 11386                           indf0	equ	0xFEF
 11387                           postinc0	equ	0xFEE
 11388                           fsr0h	equ	0xFEA
 11389                           fsr0l	equ	0xFE9
 11390                           wreg	equ	0xFE8
 11391                           postinc1	equ	0xFE6
 11392                           postdec1	equ	0xFE5
 11393                           fsr1l	equ	0xFE1
 11394                           indf2	equ	0xFDF
 11395                           postinc2	equ	0xFDE
 11396                           postdec2	equ	0xFDD
 11397                           fsr2h	equ	0xFDA
 11398                           fsr2l	equ	0xFD9
 11399                           status	equ	0xFD8
 11400                           
 11401 ;; *************** function _Lcd_Set_Cursor *****************
 11402 ;; Defined at:
 11403 ;;		line 40 in file "lcd.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  a               1    wreg     unsigned char 
 11406 ;;  b               1    3[BANK0 ] unsigned char 
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  a               1    4[BANK0 ] unsigned char 
 11409 ;;  temp            1    7[BANK0 ] unsigned char 
 11410 ;;  y               1    6[BANK0 ] unsigned char 
 11411 ;;  z               1    5[BANK0 ] unsigned char 
 11412 ;; Return value:  Size  Location     Type
 11413 ;;		None               void
 11414 ;; Registers used:
 11415 ;;		wreg, status,2, status,0, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11421 ;;      Params:         0       1       0       0       0       0       0       0       0
 11422 ;;      Locals:         0       4       0       0       0       0       0       0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11424 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11425 ;;Total ram usage:        5 bytes
 11426 ;; Hardware stack levels used:    1
 11427 ;; Hardware stack levels required when called:    6
 11428 ;; This function calls:
 11429 ;;		_Lcd_Cmd
 11430 ;; This function is called by:
 11431 ;;		_Inicializa_Driveby
 11432 ;;		_Comando_Tablet
 11433 ;;		_main
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text48
 11438  002D58                     __ptext48:
 11439                           	opt stack 0
 11440  002D58                     _Lcd_Set_Cursor:
 11441                           	opt stack 24
 11442                           
 11443                           ;incstack = 0
 11444                           ;Lcd_Set_Cursor@a stored from wreg
 11445  002D58  0100               	movlb	0	; () banked
 11446  002D5A  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;lcd.c: 41: char temp, z, y;
 11450                           ;lcd.c: 42: if (a == 1) {
 11451  002D5C  0100               	movlb	0	; () banked
 11452  002D5E  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 11453  002D60  A4D8               	btfss	status,2,c
 11454  002D62  D018               	goto	l4140
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;lcd.c: 43: temp = 0x80 + b - 1;
 11458  002D64  0100               	movlb	0	; () banked
 11459  002D66  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11460  002D68  0F7F               	addlw	127
 11461  002D6A  0100               	movlb	0	; () banked
 11462  002D6C  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11463                           
 11464                           ;lcd.c: 44: z = temp >> 4;
 11465  002D6E  0100               	movlb	0	; () banked
 11466  002D70  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11467  002D72  0B0F               	andlw	15
 11468  002D74  0100               	movlb	0	; () banked
 11469  002D76  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11470                           
 11471                           ;lcd.c: 45: y = temp & 0x0F;
 11472  002D78  0100               	movlb	0	; () banked
 11473  002D7A  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11474  002D7C  0B0F               	andlw	15
 11475  002D7E  0100               	movlb	0	; () banked
 11476  002D80  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;lcd.c: 46: Lcd_Cmd(z);
 11480  002D82  0100               	movlb	0	; () banked
 11481  002D84  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11482  002D86  ECE6  F019         	call	_Lcd_Cmd
 11483                           
 11484                           ;lcd.c: 47: Lcd_Cmd(y);
 11485  002D8A  0100               	movlb	0	; () banked
 11486  002D8C  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11487  002D8E  ECE6  F019         	call	_Lcd_Cmd
 11488                           
 11489                           ;lcd.c: 48: } else if (a == 2) {
 11490  002D92  D01C               	goto	l273
 11491  002D94                     l4140:
 11492  002D94  0100               	movlb	0	; () banked
 11493  002D96  5164               	movf	Lcd_Set_Cursor@a& (0+255),w,b
 11494  002D98  0A02               	xorlw	2
 11495  002D9A  A4D8               	btfss	status,2,c
 11496  002D9C  D017               	goto	l273
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 11500  002D9E  0100               	movlb	0	; () banked
 11501  002DA0  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 11502  002DA2  0FBF               	addlw	191
 11503  002DA4  0100               	movlb	0	; () banked
 11504  002DA6  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 11505                           
 11506                           ;lcd.c: 50: z = temp >> 4;
 11507  002DA8  0100               	movlb	0	; () banked
 11508  002DAA  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 11509  002DAC  0B0F               	andlw	15
 11510  002DAE  0100               	movlb	0	; () banked
 11511  002DB0  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 11512                           
 11513                           ;lcd.c: 51: y = temp & 0x0F;
 11514  002DB2  0100               	movlb	0	; () banked
 11515  002DB4  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 11516  002DB6  0B0F               	andlw	15
 11517  002DB8  0100               	movlb	0	; () banked
 11518  002DBA  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;lcd.c: 52: Lcd_Cmd(z);
 11522  002DBC  0100               	movlb	0	; () banked
 11523  002DBE  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 11524  002DC0  ECE6  F019         	call	_Lcd_Cmd
 11525                           
 11526                           ;lcd.c: 53: Lcd_Cmd(y);
 11527  002DC4  0100               	movlb	0	; () banked
 11528  002DC6  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 11529  002DC8  ECE6  F019         	call	_Lcd_Cmd
 11530  002DCC                     l273:
 11531  002DCC  0012               	return	
 11532  002DCE                     __end_of_Lcd_Set_Cursor:
 11533                           	opt stack 0
 11534                           tblptru	equ	0xFF8
 11535                           tblptrh	equ	0xFF7
 11536                           tblptrl	equ	0xFF6
 11537                           tablat	equ	0xFF5
 11538                           prodh	equ	0xFF4
 11539                           prodl	equ	0xFF3
 11540                           intcon	equ	0xFF2
 11541                           intcon2	equ	0xFF1
 11542                           intcon3	equ	0xFF0
 11543                           indf0	equ	0xFEF
 11544                           postinc0	equ	0xFEE
 11545                           fsr0h	equ	0xFEA
 11546                           fsr0l	equ	0xFE9
 11547                           wreg	equ	0xFE8
 11548                           postinc1	equ	0xFE6
 11549                           postdec1	equ	0xFE5
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           postdec2	equ	0xFDD
 11554                           fsr2h	equ	0xFDA
 11555                           fsr2l	equ	0xFD9
 11556                           status	equ	0xFD8
 11557                           
 11558 ;; *************** function _Lcd_Clear *****************
 11559 ;; Defined at:
 11560 ;;		line 35 in file "lcd.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;		None               void
 11567 ;; Registers used:
 11568 ;;		wreg, status,2, cstack
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    6
 11581 ;; This function calls:
 11582 ;;		_Lcd_Cmd
 11583 ;; This function is called by:
 11584 ;;		_Inicializa_Driveby
 11585 ;;		_Comando_Tablet
 11586 ;;		_main
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           	psect	text49
 11591  0034E2                     __ptext49:
 11592                           	opt stack 0
 11593  0034E2                     _Lcd_Clear:
 11594                           	opt stack 24
 11595                           
 11596                           ;lcd.c: 36: Lcd_Cmd(0);
 11597                           
 11598                           ;incstack = 0
 11599  0034E2  0E00               	movlw	0
 11600  0034E4  ECE6  F019         	call	_Lcd_Cmd
 11601                           
 11602                           ;lcd.c: 37: Lcd_Cmd(1);
 11603  0034E8  0E01               	movlw	1
 11604  0034EA  ECE6  F019         	call	_Lcd_Cmd
 11605  0034EE  0012               	return	
 11606  0034F0                     __end_of_Lcd_Clear:
 11607                           	opt stack 0
 11608                           tblptru	equ	0xFF8
 11609                           tblptrh	equ	0xFF7
 11610                           tblptrl	equ	0xFF6
 11611                           tablat	equ	0xFF5
 11612                           prodh	equ	0xFF4
 11613                           prodl	equ	0xFF3
 11614                           intcon	equ	0xFF2
 11615                           intcon2	equ	0xFF1
 11616                           intcon3	equ	0xFF0
 11617                           indf0	equ	0xFEF
 11618                           postinc0	equ	0xFEE
 11619                           fsr0h	equ	0xFEA
 11620                           fsr0l	equ	0xFE9
 11621                           wreg	equ	0xFE8
 11622                           postinc1	equ	0xFE6
 11623                           postdec1	equ	0xFE5
 11624                           fsr1l	equ	0xFE1
 11625                           indf2	equ	0xFDF
 11626                           postinc2	equ	0xFDE
 11627                           postdec2	equ	0xFDD
 11628                           fsr2h	equ	0xFDA
 11629                           fsr2l	equ	0xFD9
 11630                           status	equ	0xFD8
 11631                           
 11632 ;; *************** function _Lcd_Cmd *****************
 11633 ;; Defined at:
 11634 ;;		line 27 in file "lcd.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;  a               1    wreg     unsigned char 
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  a               1    2[BANK0 ] unsigned char 
 11639 ;; Return value:  Size  Location     Type
 11640 ;;		None               void
 11641 ;; Registers used:
 11642 ;;		wreg, status,2, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0
 11649 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11650 ;;      Temps:          0       1       0       0       0       0       0       0       0
 11651 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11652 ;;Total ram usage:        2 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    5
 11655 ;; This function calls:
 11656 ;;		_Lcd_Port
 11657 ;; This function is called by:
 11658 ;;		_Lcd_Clear
 11659 ;;		_Lcd_Set_Cursor
 11660 ;;		_Lcd_Init
 11661 ;;		_Lcd_Shift_Right
 11662 ;;		_Lcd_Shift_Left
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           	psect	text50
 11667  0033CC                     __ptext50:
 11668                           	opt stack 0
 11669  0033CC                     _Lcd_Cmd:
 11670                           	opt stack 24
 11671                           
 11672                           ;incstack = 0
 11673                           ;Lcd_Cmd@a stored from wreg
 11674  0033CC  0100               	movlb	0	; () banked
 11675  0033CE  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 11679  0033D0  9084               	bcf	3972,0,c	;volatile
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;lcd.c: 29: Lcd_Port(a);
 11683  0033D2  0100               	movlb	0	; () banked
 11684  0033D4  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 11685  0033D6  EC5D  F019         	call	_Lcd_Port
 11686                           
 11687                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 11688  0033DA  8484               	bsf	3972,2,c	;volatile
 11689                           
 11690                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 11691  0033DC  0E06               	movlw	6
 11692  0033DE  0100               	movlb	0	; () banked
 11693  0033E0  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 11694  0033E2  0E30               	movlw	48
 11695  0033E4                     u5327:
 11696  0033E4  2EE8               	decfsz	wreg,f,c
 11697  0033E6  D7FE               	goto	u5327
 11698  0033E8  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 11699  0033EA  D7FC               	goto	u5327
 11700  0033EC  D000               	nop2	
 11701                           
 11702                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 11703  0033EE  9484               	bcf	3972,2,c	;volatile
 11704  0033F0  0012               	return	
 11705  0033F2                     __end_of_Lcd_Cmd:
 11706                           	opt stack 0
 11707                           tblptru	equ	0xFF8
 11708                           tblptrh	equ	0xFF7
 11709                           tblptrl	equ	0xFF6
 11710                           tablat	equ	0xFF5
 11711                           prodh	equ	0xFF4
 11712                           prodl	equ	0xFF3
 11713                           intcon	equ	0xFF2
 11714                           intcon2	equ	0xFF1
 11715                           intcon3	equ	0xFF0
 11716                           indf0	equ	0xFEF
 11717                           postinc0	equ	0xFEE
 11718                           fsr0h	equ	0xFEA
 11719                           fsr0l	equ	0xFE9
 11720                           wreg	equ	0xFE8
 11721                           postinc1	equ	0xFE6
 11722                           postdec1	equ	0xFE5
 11723                           fsr1l	equ	0xFE1
 11724                           indf2	equ	0xFDF
 11725                           postinc2	equ	0xFDE
 11726                           postdec2	equ	0xFDD
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731 ;; *************** function _Lcd_Port *****************
 11732 ;; Defined at:
 11733 ;;		line 6 in file "lcd.c"
 11734 ;; Parameters:    Size  Location     Type
 11735 ;;  a               1    wreg     unsigned char 
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  a               1    0[BANK0 ] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;		None               void
 11740 ;; Registers used:
 11741 ;;		wreg
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11747 ;;      Params:         0       0       0       0       0       0       0       0       0
 11748 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11750 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11751 ;;Total ram usage:        1 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    4
 11754 ;; This function calls:
 11755 ;;		Nothing
 11756 ;; This function is called by:
 11757 ;;		_Lcd_Cmd
 11758 ;;		_Lcd_Init
 11759 ;;		_Lcd_Write_Char
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text51
 11764  0032BA                     __ptext51:
 11765                           	opt stack 0
 11766  0032BA                     _Lcd_Port:
 11767                           	opt stack 24
 11768                           
 11769                           ;incstack = 0
 11770                           ;Lcd_Port@a stored from wreg
 11771  0032BA  0100               	movlb	0	; () banked
 11772  0032BC  6F60               	movwf	Lcd_Port@a& (0+255),b
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;lcd.c: 7: if (a & 1)
 11776  0032BE  0100               	movlb	0	; () banked
 11777  0032C0  A160               	btfss	Lcd_Port@a& (0+255),0,b
 11778  0032C2  D002               	goto	l253
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 11782  0032C4  8883               	bsf	3971,4,c	;volatile
 11783  0032C6  D001               	goto	l3122
 11784  0032C8                     l253:
 11785                           
 11786                           ; BSR set to: 0
 11787                           ;lcd.c: 9: else
 11788                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 11789  0032C8  9883               	bcf	3971,4,c	;volatile
 11790  0032CA                     l3122:
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;lcd.c: 12: if (a & 2)
 11794  0032CA  0100               	movlb	0	; () banked
 11795  0032CC  A360               	btfss	Lcd_Port@a& (0+255),1,b
 11796  0032CE  D002               	goto	l255
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 11800  0032D0  8A83               	bsf	3971,5,c	;volatile
 11801  0032D2  D001               	goto	l3126
 11802  0032D4                     l255:
 11803                           
 11804                           ; BSR set to: 0
 11805                           ;lcd.c: 14: else
 11806                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 11807  0032D4  9A83               	bcf	3971,5,c	;volatile
 11808  0032D6                     l3126:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;lcd.c: 17: if (a & 4)
 11812  0032D6  0100               	movlb	0	; () banked
 11813  0032D8  A560               	btfss	Lcd_Port@a& (0+255),2,b
 11814  0032DA  D002               	goto	l257
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 11818  0032DC  8C83               	bsf	3971,6,c	;volatile
 11819  0032DE  D001               	goto	l3130
 11820  0032E0                     l257:
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;lcd.c: 19: else
 11824                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 11825  0032E0  9C83               	bcf	3971,6,c	;volatile
 11826  0032E2                     l3130:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;lcd.c: 22: if (a & 8)
 11830  0032E2  0100               	movlb	0	; () banked
 11831  0032E4  A760               	btfss	Lcd_Port@a& (0+255),3,b
 11832  0032E6  D002               	goto	l259
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 11836  0032E8  8E83               	bsf	3971,7,c	;volatile
 11837  0032EA  D001               	goto	l261
 11838  0032EC                     l259:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;lcd.c: 24: else
 11842                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 11843  0032EC  9E83               	bcf	3971,7,c	;volatile
 11844  0032EE                     l261:
 11845                           
 11846                           ; BSR set to: 0
 11847  0032EE  0012               	return	
 11848  0032F0                     __end_of_Lcd_Port:
 11849                           	opt stack 0
 11850                           tblptru	equ	0xFF8
 11851                           tblptrh	equ	0xFF7
 11852                           tblptrl	equ	0xFF6
 11853                           tablat	equ	0xFF5
 11854                           prodh	equ	0xFF4
 11855                           prodl	equ	0xFF3
 11856                           intcon	equ	0xFF2
 11857                           intcon2	equ	0xFF1
 11858                           intcon3	equ	0xFF0
 11859                           indf0	equ	0xFEF
 11860                           postinc0	equ	0xFEE
 11861                           fsr0h	equ	0xFEA
 11862                           fsr0l	equ	0xFE9
 11863                           wreg	equ	0xFE8
 11864                           postinc1	equ	0xFE6
 11865                           postdec1	equ	0xFE5
 11866                           fsr1l	equ	0xFE1
 11867                           indf2	equ	0xFDF
 11868                           postinc2	equ	0xFDE
 11869                           postdec2	equ	0xFDD
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function _TMRO_USART *****************
 11875 ;; Defined at:
 11876 ;;		line 84 in file "robot.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;		None
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;		None
 11881 ;; Return value:  Size  Location     Type
 11882 ;;		None               void
 11883 ;; Registers used:
 11884 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11890 ;;      Params:         0       0       0       0       0       0       0       0       0
 11891 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11892 ;;      Temps:         14       0       0       0       0       0       0       0       0
 11893 ;;      Totals:        14       0       0       0       0       0       0       0       0
 11894 ;;Total ram usage:       14 bytes
 11895 ;; Hardware stack levels used:    1
 11896 ;; Hardware stack levels required when called:    3
 11897 ;; This function calls:
 11898 ;;		_ReadUSART
 11899 ;;		i2_Lcd_Clear
 11900 ;;		i2_Lcd_Set_Cursor
 11901 ;;		i2_Lcd_Write_String
 11902 ;;		i2_PWM_DutyCycle1
 11903 ;;		i2_PWM_DutyCycle2
 11904 ;; This function is called by:
 11905 ;;		Interrupt level 2
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           	psect	intcode
 11910  000008                     __pintcode:
 11911                           	opt stack 0
 11912  000008                     _TMRO_USART:
 11913                           	opt stack 21
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;incstack = 0
 11917  000008  CFFA F034          	movff	pclath,??_TMRO_USART
 11918  00000C  CFFB F035          	movff	pclatu,??_TMRO_USART+1
 11919  000010  CFE9 F036          	movff	fsr0l,??_TMRO_USART+2
 11920  000014  ED6F  F00D         	call	int_func,f	;refresh shadow registers
 11921                           pclatu	equ	0xFFB
 11922                           pclath	equ	0xFFA
 11923                           tblptru	equ	0xFF8
 11924                           tblptrh	equ	0xFF7
 11925                           tblptrl	equ	0xFF6
 11926                           tablat	equ	0xFF5
 11927                           prodh	equ	0xFF4
 11928                           prodl	equ	0xFF3
 11929                           intcon	equ	0xFF2
 11930                           intcon2	equ	0xFF1
 11931                           intcon3	equ	0xFF0
 11932                           indf0	equ	0xFEF
 11933                           postinc0	equ	0xFEE
 11934                           fsr0h	equ	0xFEA
 11935                           fsr0l	equ	0xFE9
 11936                           wreg	equ	0xFE8
 11937                           postinc1	equ	0xFE6
 11938                           postdec1	equ	0xFE5
 11939                           fsr1l	equ	0xFE1
 11940                           indf2	equ	0xFDF
 11941                           postinc2	equ	0xFDE
 11942                           postdec2	equ	0xFDD
 11943                           fsr2h	equ	0xFDA
 11944                           fsr2l	equ	0xFD9
 11945                           status	equ	0xFD8
 11946                           
 11947                           	psect	intcode_body
 11948  001ADE                     __pintcode_body:
 11949                           	opt stack 21
 11950  001ADE                     int_func:
 11951                           	opt stack 21
 11952  001ADE  0006               	pop		; remove dummy address from shadow register refresh
 11953  001AE0  CFEA F037          	movff	fsr0h,??_TMRO_USART+3
 11954  001AE4  CFE1 F038          	movff	fsr1l,??_TMRO_USART+4
 11955  001AE8  CFE2 F039          	movff	fsr1h,??_TMRO_USART+5
 11956  001AEC  CFD9 F03A          	movff	fsr2l,??_TMRO_USART+6
 11957  001AF0  CFDA F03B          	movff	fsr2h,??_TMRO_USART+7
 11958  001AF4  CFF3 F03C          	movff	prodl,??_TMRO_USART+8
 11959  001AF8  CFF4 F03D          	movff	prodh,??_TMRO_USART+9
 11960  001AFC  CFF6 F03E          	movff	tblptrl,??_TMRO_USART+10
 11961  001B00  CFF7 F03F          	movff	tblptrh,??_TMRO_USART+11
 11962  001B04  CFF8 F040          	movff	tblptru,??_TMRO_USART+12
 11963  001B08  CFF5 F041          	movff	tablat,??_TMRO_USART+13
 11964                           
 11965                           ;robot.c: 89: if (PIR1bits.RCIF) {
 11966  001B0C  AA9E               	btfss	3998,5,c	;volatile
 11967  001B0E  D034               	goto	i2l380
 11968                           
 11969                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 11970  001B10  5055               	movf	_cad,w,c
 11971  001B12  0D01               	mullw	1
 11972  001B14  0101               	movlb	1	; () banked
 11973  001B16  0E28               	movlw	low _BluetoothDato
 11974  001B18  24F3               	addwf	prodl,w,c
 11975  001B1A  6ED9               	movwf	fsr2l,c
 11976  001B1C  0101               	movlb	1	; () banked
 11977  001B1E  0E01               	movlw	high _BluetoothDato
 11978  001B20  20F4               	addwfc	prodh,w,c
 11979  001B22  6EDA               	movwf	fsr2h,c
 11980  001B24  EC1B  F01A         	call	_ReadUSART	;wreg free
 11981  001B28  6EDF               	movwf	indf2,c
 11982                           
 11983                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 11984  001B2A  5055               	movf	_cad,w,c
 11985  001B2C  0D01               	mullw	1
 11986  001B2E  0101               	movlb	1	; () banked
 11987  001B30  0E28               	movlw	low _BluetoothDato
 11988  001B32  24F3               	addwf	prodl,w,c
 11989  001B34  6ED9               	movwf	fsr2l,c
 11990  001B36  0101               	movlb	1	; () banked
 11991  001B38  0E01               	movlw	high _BluetoothDato
 11992  001B3A  20F4               	addwfc	prodh,w,c
 11993  001B3C  6EDA               	movwf	fsr2h,c
 11994  001B3E  0E23               	movlw	35
 11995  001B40  62DF               	cpfseq	indf2,c
 11996  001B42  D015               	goto	i2l4748
 11997                           
 11998                           ; BSR set to: 1
 11999                           ;robot.c: 93: if (ComanTFlag == 0) {
 12000  001B44  664C               	tstfsz	_ComanTFlag,c
 12001  001B46  D008               	goto	i2l4744
 12002                           
 12003                           ; BSR set to: 1
 12004                           ;robot.c: 94: EntTrama = 1;
 12005  001B48  0E01               	movlw	1
 12006  001B4A  6E4F               	movwf	_EntTrama,c
 12007                           
 12008                           ;robot.c: 95: FinComandT = 0;
 12009  001B4C  0E00               	movlw	0
 12010  001B4E  0100               	movlb	0	; () banked
 12011  001B50  6FEC               	movwf	_FinComandT& (0+255),b
 12012                           
 12013                           ;robot.c: 96: ComanTFlag = 1;
 12014  001B52  0E01               	movlw	1
 12015  001B54  6E4C               	movwf	_ComanTFlag,c
 12016  001B56  D00E               	goto	i2u517_40
 12017  001B58                     i2l4744:
 12018                           
 12019                           ;robot.c: 99: else if (ComanTFlag == 1) {
 12020  001B58  044C               	decf	_ComanTFlag,w,c
 12021  001B5A  A4D8               	btfss	status,2,c
 12022  001B5C  D049               	goto	i2l4780
 12023                           
 12024                           ;robot.c: 100: ComanTFlag = 0;
 12025  001B5E  0E00               	movlw	0
 12026  001B60  6E4C               	movwf	_ComanTFlag,c
 12027                           
 12028                           ;robot.c: 101: FinComandT = 1;
 12029  001B62  0E01               	movlw	1
 12030  001B64  0100               	movlb	0	; () banked
 12031  001B66  6FEC               	movwf	_FinComandT& (0+255),b
 12032                           
 12033                           ;robot.c: 102: EntTrama = 0;
 12034  001B68  0E00               	movlw	0
 12035  001B6A  6E4F               	movwf	_EntTrama,c
 12036  001B6C  D041               	goto	i2l4780
 12037  001B6E                     i2l4748:
 12038                           
 12039                           ;robot.c: 106: else if (EntTrama == 1)
 12040  001B6E  044F               	decf	_EntTrama,w,c
 12041  001B70  A4D8               	btfss	status,2,c
 12042  001B72  D03E               	goto	i2l4780
 12043  001B74                     i2u517_40:
 12044                           
 12045                           ;robot.c: 107: cad++;
 12046  001B74  2A55               	incf	_cad,f,c
 12047  001B76  D03C               	goto	i2l4780
 12048  001B78                     i2l380:
 12049                           
 12050                           ;robot.c: 111: else if(INTCONbits.INT0F == 1){
 12051  001B78  A2F2               	btfss	intcon,1,c	;volatile
 12052  001B7A  D014               	goto	i2l388
 12053                           
 12054                           ;robot.c: 112: Lcd_Clear();
 12055  001B7C  EC78  F01A         	call	i2_Lcd_Clear	;wreg free
 12056                           
 12057                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 12058  001B80  0E01               	movlw	1
 12059  001B82  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12060  001B84  0E01               	movlw	1
 12061  001B86  ECB5  F017         	call	i2_Lcd_Set_Cursor
 12062                           
 12063                           ;robot.c: 114: Lcd_Write_String("Interruption RB0");
 12064  001B8A  0E7F               	movlw	high STR_19
 12065  001B8C  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12066  001B8E  0E35               	movlw	low STR_19
 12067  001B90  6E05               	movwf	i2Lcd_Write_String@a,c
 12068  001B92  EC33  F016         	call	i2_Lcd_Write_String	;wreg free
 12069                           
 12070                           ;robot.c: 117: PWM_DutyCycle1(100);
 12071  001B96  0E64               	movlw	100
 12072  001B98  EC1C  F017         	call	i2_PWM_DutyCycle1
 12073                           
 12074                           ;robot.c: 118: PWM_DutyCycle2(0);
 12075  001B9C  0E00               	movlw	0
 12076  001B9E  ECE7  F016         	call	i2_PWM_DutyCycle2
 12077                           
 12078                           ;robot.c: 119: }
 12079  001BA2  D026               	goto	i2l4780
 12080  001BA4                     i2l388:
 12081                           
 12082                           ;robot.c: 121: else if(INTCON3bits.INT1F == 1){
 12083  001BA4  A0F0               	btfss	intcon3,0,c	;volatile
 12084  001BA6  D014               	goto	i2l390
 12085                           
 12086                           ;robot.c: 122: Lcd_Clear();
 12087  001BA8  EC78  F01A         	call	i2_Lcd_Clear	;wreg free
 12088                           
 12089                           ;robot.c: 123: Lcd_Set_Cursor(1,1);
 12090  001BAC  0E01               	movlw	1
 12091  001BAE  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12092  001BB0  0E01               	movlw	1
 12093  001BB2  ECB5  F017         	call	i2_Lcd_Set_Cursor
 12094                           
 12095                           ;robot.c: 124: Lcd_Write_String("Interruption RB1");
 12096  001BB6  0E7F               	movlw	high STR_20
 12097  001BB8  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12098  001BBA  0E46               	movlw	low STR_20
 12099  001BBC  6E05               	movwf	i2Lcd_Write_String@a,c
 12100  001BBE  EC33  F016         	call	i2_Lcd_Write_String	;wreg free
 12101                           
 12102                           ;robot.c: 127: PWM_DutyCycle1(0);
 12103  001BC2  0E00               	movlw	0
 12104  001BC4  EC1C  F017         	call	i2_PWM_DutyCycle1
 12105                           
 12106                           ;robot.c: 128: PWM_DutyCycle2(100);
 12107  001BC8  0E64               	movlw	100
 12108  001BCA  ECE7  F016         	call	i2_PWM_DutyCycle2
 12109                           
 12110                           ;robot.c: 129: }
 12111  001BCE  D010               	goto	i2l4780
 12112  001BD0                     i2l390:
 12113                           
 12114                           ;robot.c: 130: else if(PIR1bits.TMR2IF){
 12115  001BD0  A29E               	btfss	3998,1,c	;volatile
 12116  001BD2  D00E               	goto	i2l4780
 12117                           
 12118                           ;robot.c: 131: Lcd_Clear();
 12119  001BD4  EC78  F01A         	call	i2_Lcd_Clear	;wreg free
 12120                           
 12121                           ;robot.c: 132: Lcd_Set_Cursor(1,1);
 12122  001BD8  0E01               	movlw	1
 12123  001BDA  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 12124  001BDC  0E01               	movlw	1
 12125  001BDE  ECB5  F017         	call	i2_Lcd_Set_Cursor
 12126                           
 12127                           ;robot.c: 133: Lcd_Write_String("Interruption TMR2");
 12128  001BE2  0E7F               	movlw	high STR_21
 12129  001BE4  6E06               	movwf	i2Lcd_Write_String@a+1,c
 12130  001BE6  0E23               	movlw	low STR_21
 12131  001BE8  6E05               	movwf	i2Lcd_Write_String@a,c
 12132  001BEA  EC33  F016         	call	i2_Lcd_Write_String	;wreg free
 12133                           
 12134                           ;robot.c: 134: PIE1bits.TMR2IE = 0;
 12135  001BEE  929D               	bcf	3997,1,c	;volatile
 12136  001BF0                     i2l4780:
 12137                           
 12138                           ;robot.c: 135: }
 12139                           ;robot.c: 136: INTCON3bits.INT1F = 0;
 12140  001BF0  90F0               	bcf	intcon3,0,c	;volatile
 12141                           
 12142                           ;robot.c: 137: INTCONbits.INT0F = 0;
 12143  001BF2  92F2               	bcf	intcon,1,c	;volatile
 12144                           
 12145                           ;robot.c: 138: PIR1bits.TMR2IF=0;
 12146  001BF4  929E               	bcf	3998,1,c	;volatile
 12147                           
 12148                           ;robot.c: 139: PIR1bits.RCIF=0;
 12149  001BF6  9A9E               	bcf	3998,5,c	;volatile
 12150  001BF8  C041  FFF5         	movff	??_TMRO_USART+13,tablat
 12151  001BFC  C040  FFF8         	movff	??_TMRO_USART+12,tblptru
 12152  001C00  C03F  FFF7         	movff	??_TMRO_USART+11,tblptrh
 12153  001C04  C03E  FFF6         	movff	??_TMRO_USART+10,tblptrl
 12154  001C08  C03D  FFF4         	movff	??_TMRO_USART+9,prodh
 12155  001C0C  C03C  FFF3         	movff	??_TMRO_USART+8,prodl
 12156  001C10  C03B  FFDA         	movff	??_TMRO_USART+7,fsr2h
 12157  001C14  C03A  FFD9         	movff	??_TMRO_USART+6,fsr2l
 12158  001C18  C039  FFE2         	movff	??_TMRO_USART+5,fsr1h
 12159  001C1C  C038  FFE1         	movff	??_TMRO_USART+4,fsr1l
 12160  001C20  C037  FFEA         	movff	??_TMRO_USART+3,fsr0h
 12161  001C24  C036  FFE9         	movff	??_TMRO_USART+2,fsr0l
 12162  001C28  C035  FFFB         	movff	??_TMRO_USART+1,pclatu
 12163  001C2C  C034  FFFA         	movff	??_TMRO_USART,pclath
 12164  001C30  0011               	retfie		f
 12165  001C32                     __end_of_TMRO_USART:
 12166                           	opt stack 0
 12167                           pclatu	equ	0xFFB
 12168                           pclath	equ	0xFFA
 12169                           tblptru	equ	0xFF8
 12170                           tblptrh	equ	0xFF7
 12171                           tblptrl	equ	0xFF6
 12172                           tablat	equ	0xFF5
 12173                           prodh	equ	0xFF4
 12174                           prodl	equ	0xFF3
 12175                           intcon	equ	0xFF2
 12176                           intcon2	equ	0xFF1
 12177                           intcon3	equ	0xFF0
 12178                           indf0	equ	0xFEF
 12179                           postinc0	equ	0xFEE
 12180                           fsr0h	equ	0xFEA
 12181                           fsr0l	equ	0xFE9
 12182                           wreg	equ	0xFE8
 12183                           postinc1	equ	0xFE6
 12184                           postdec1	equ	0xFE5
 12185                           fsr1h	equ	0xFE2
 12186                           fsr1l	equ	0xFE1
 12187                           indf2	equ	0xFDF
 12188                           postinc2	equ	0xFDE
 12189                           postdec2	equ	0xFDD
 12190                           fsr2h	equ	0xFDA
 12191                           fsr2l	equ	0xFD9
 12192                           status	equ	0xFD8
 12193                           
 12194 ;; *************** function i2_PWM_DutyCycle2 *****************
 12195 ;; Defined at:
 12196 ;;		line 55 in file "pwm.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  percentageDu    1    wreg     unsigned char 
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12201 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12202 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;		None               void
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0, cstack
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12212 ;;      Params:         0       0       0       0       0       0       0       0       0
 12213 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12214 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12215 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12216 ;;Total ram usage:        9 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    2
 12219 ;; This function calls:
 12220 ;;		i2_SetDCPWM2
 12221 ;;		i2___ftmul
 12222 ;;		i2___fttol
 12223 ;;		i2___lbtoft
 12224 ;; This function is called by:
 12225 ;;		_TMRO_USART
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text53
 12230  002DCE                     __ptext53:
 12231                           	opt stack 0
 12232  002DCE                     i2_PWM_DutyCycle2:
 12233                           	opt stack 21
 12234                           
 12235                           ;incstack = 0
 12236                           ;i2PWM_DutyCycle2@percentageDuty stored from wreg
 12237  002DCE  6E31               	movwf	i2PWM_DutyCycle2@percentageDuty,c
 12238                           
 12239                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
 12240  002DD0  0E00               	movlw	0
 12241  002DD2  6E33               	movwf	i2PWM_DutyCycle2@DC+1,c
 12242  002DD4  0E00               	movlw	0
 12243  002DD6  6E32               	movwf	i2PWM_DutyCycle2@DC,c
 12244  002DD8  0E00               	movlw	0
 12245  002DDA  6E30               	movwf	i2PWM_DutyCycle2@DutyCycle+1,c
 12246  002DDC  0E00               	movlw	0
 12247  002DDE  6E2F               	movwf	i2PWM_DutyCycle2@DutyCycle,c
 12248                           
 12249                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
 12250  002DE0  0EAE               	movlw	174
 12251  002DE2  6E10               	movwf	i2___ftmul@f2,c
 12252  002DE4  0E23               	movlw	35
 12253  002DE6  6E11               	movwf	i2___ftmul@f2+1,c
 12254  002DE8  0E41               	movlw	65
 12255  002DEA  6E12               	movwf	i2___ftmul@f2+2,c
 12256  002DEC  5031               	movf	i2PWM_DutyCycle2@percentageDuty,w,c
 12257  002DEE  ECF9  F019         	call	i2___lbtoft
 12258  002DF2  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12259  002DF6  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12260  002DFA  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12261  002DFE  ECBB  F00F         	call	i2___ftmul	;wreg free
 12262  002E02  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12263  002E06  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12264  002E0A  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12265  002E0E  EC72  F011         	call	i2___fttol	;wreg free
 12266  002E12  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle2
 12267  002E16  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle2+1
 12268  002E1A  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle2+2
 12269  002E1E  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle2+3
 12270  002E22  C02B  F032         	movff	??i2_PWM_DutyCycle2,i2PWM_DutyCycle2@DC
 12271  002E26  C02C  F033         	movff	??i2_PWM_DutyCycle2+1,i2PWM_DutyCycle2@DC+1
 12272                           
 12273                           ;pwm.c: 60: SetDCPWM2(DC);
 12274  002E2A  C032  F001         	movff	i2PWM_DutyCycle2@DC,i2SetDCPWM2@dutycycle
 12275  002E2E  C033  F002         	movff	i2PWM_DutyCycle2@DC+1,i2SetDCPWM2@dutycycle+1
 12276  002E32  ECEC  F018         	call	i2_SetDCPWM2	;wreg free
 12277                           
 12278                           ;pwm.c: 61: return;
 12279  002E36  0012               	return	
 12280  002E38                     __end_ofi2_PWM_DutyCycle2:
 12281                           	opt stack 0
 12282                           pclatu	equ	0xFFB
 12283                           pclath	equ	0xFFA
 12284                           tblptru	equ	0xFF8
 12285                           tblptrh	equ	0xFF7
 12286                           tblptrl	equ	0xFF6
 12287                           tablat	equ	0xFF5
 12288                           prodh	equ	0xFF4
 12289                           prodl	equ	0xFF3
 12290                           intcon	equ	0xFF2
 12291                           intcon2	equ	0xFF1
 12292                           intcon3	equ	0xFF0
 12293                           indf0	equ	0xFEF
 12294                           postinc0	equ	0xFEE
 12295                           fsr0h	equ	0xFEA
 12296                           fsr0l	equ	0xFE9
 12297                           wreg	equ	0xFE8
 12298                           postinc1	equ	0xFE6
 12299                           postdec1	equ	0xFE5
 12300                           fsr1h	equ	0xFE2
 12301                           fsr1l	equ	0xFE1
 12302                           indf2	equ	0xFDF
 12303                           postinc2	equ	0xFDE
 12304                           postdec2	equ	0xFDD
 12305                           fsr2h	equ	0xFDA
 12306                           fsr2l	equ	0xFD9
 12307                           status	equ	0xFD8
 12308                           
 12309 ;; *************** function i2_SetDCPWM2 *****************
 12310 ;; Defined at:
 12311 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  dutycycle       2    0[COMRAM] unsigned int 
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  SetDCPWM2       2    4[COMRAM] struct PWMDC
 12316 ;; Return value:  Size  Location     Type
 12317 ;;		None               void
 12318 ;; Registers used:
 12319 ;;		wreg, status,2, status,0
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12325 ;;      Params:         2       0       0       0       0       0       0       0       0
 12326 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12327 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12328 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12329 ;;Total ram usage:        6 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; This function calls:
 12332 ;;		Nothing
 12333 ;; This function is called by:
 12334 ;;		i2_PWM_DutyCycle2
 12335 ;; This function uses a non-reentrant model
 12336 ;;
 12337                           
 12338                           	psect	text54
 12339  0031D8                     __ptext54:
 12340                           	opt stack 0
 12341  0031D8                     i2_SetDCPWM2:
 12342                           	opt stack 22
 12343                           
 12344                           ;incstack = 0
 12345  0031D8  C001  F003         	movff	i2SetDCPWM2@dutycycle,??i2_SetDCPWM2
 12346  0031DC  C002  F004         	movff	i2SetDCPWM2@dutycycle+1,??i2_SetDCPWM2+1
 12347  0031E0  0E06               	movlw	6
 12348  0031E2                     i2u479_45:
 12349  0031E2  90D8               	bcf	status,0,c
 12350  0031E4  3603               	rlcf	??i2_SetDCPWM2,f,c
 12351  0031E6  3604               	rlcf	??i2_SetDCPWM2+1,f,c
 12352  0031E8  2EE8               	decfsz	wreg,f,c
 12353  0031EA  D7FB               	goto	i2u479_45
 12354  0031EC  C003  F005         	movff	??i2_SetDCPWM2,i2SetDCPWM2@DCycle
 12355  0031F0  C004  F006         	movff	??i2_SetDCPWM2+1,i2SetDCPWM2@DCycle+1
 12356  0031F4  C006  FFBB         	movff	i2SetDCPWM2@DCycle+1,4027	;volatile
 12357  0031F8  C005  F003         	movff	i2SetDCPWM2@DCycle,??i2_SetDCPWM2
 12358  0031FC  90D8               	bcf	status,0,c
 12359  0031FE  3203               	rrcf	??i2_SetDCPWM2,f,c
 12360  003200  90D8               	bcf	status,0,c
 12361  003202  3203               	rrcf	??i2_SetDCPWM2,f,c
 12362  003204  0E30               	movlw	48
 12363  003206  1603               	andwf	??i2_SetDCPWM2,f,c
 12364  003208  50BA               	movf	4026,w,c	;volatile
 12365  00320A  0BCF               	andlw	207
 12366  00320C  1003               	iorwf	??i2_SetDCPWM2,w,c
 12367  00320E  6EBA               	movwf	4026,c	;volatile
 12368  003210  0012               	return	
 12369  003212                     __end_ofi2_SetDCPWM2:
 12370                           	opt stack 0
 12371                           pclatu	equ	0xFFB
 12372                           pclath	equ	0xFFA
 12373                           tblptru	equ	0xFF8
 12374                           tblptrh	equ	0xFF7
 12375                           tblptrl	equ	0xFF6
 12376                           tablat	equ	0xFF5
 12377                           prodh	equ	0xFF4
 12378                           prodl	equ	0xFF3
 12379                           intcon	equ	0xFF2
 12380                           intcon2	equ	0xFF1
 12381                           intcon3	equ	0xFF0
 12382                           indf0	equ	0xFEF
 12383                           postinc0	equ	0xFEE
 12384                           fsr0h	equ	0xFEA
 12385                           fsr0l	equ	0xFE9
 12386                           wreg	equ	0xFE8
 12387                           postinc1	equ	0xFE6
 12388                           postdec1	equ	0xFE5
 12389                           fsr1h	equ	0xFE2
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           postdec2	equ	0xFDD
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function i2_PWM_DutyCycle1 *****************
 12399 ;; Defined at:
 12400 ;;		line 33 in file "pwm.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  percentageDu    1    wreg     unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  percentageDu    1   48[COMRAM] unsigned char 
 12405 ;;  PWM_DutyCycl    2   49[COMRAM] unsigned int 
 12406 ;;  PWM_DutyCycl    2   46[COMRAM] unsigned int 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;		None               void
 12409 ;; Registers used:
 12410 ;;		wreg, status,2, status,0, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0
 12417 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12418 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12419 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12420 ;;Total ram usage:        9 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    2
 12423 ;; This function calls:
 12424 ;;		i2_SetDCPWM1
 12425 ;;		i2___ftmul
 12426 ;;		i2___fttol
 12427 ;;		i2___lbtoft
 12428 ;; This function is called by:
 12429 ;;		_TMRO_USART
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           	psect	text55
 12434  002E38                     __ptext55:
 12435                           	opt stack 0
 12436  002E38                     i2_PWM_DutyCycle1:
 12437                           	opt stack 21
 12438                           
 12439                           ;incstack = 0
 12440                           ;i2PWM_DutyCycle1@percentageDuty stored from wreg
 12441  002E38  6E31               	movwf	i2PWM_DutyCycle1@percentageDuty,c
 12442                           
 12443                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
 12444  002E3A  0E00               	movlw	0
 12445  002E3C  6E33               	movwf	i2PWM_DutyCycle1@DC+1,c
 12446  002E3E  0E00               	movlw	0
 12447  002E40  6E32               	movwf	i2PWM_DutyCycle1@DC,c
 12448  002E42  0E00               	movlw	0
 12449  002E44  6E30               	movwf	i2PWM_DutyCycle1@DutyCycle+1,c
 12450  002E46  0E00               	movlw	0
 12451  002E48  6E2F               	movwf	i2PWM_DutyCycle1@DutyCycle,c
 12452                           
 12453                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
 12454  002E4A  0EAE               	movlw	174
 12455  002E4C  6E10               	movwf	i2___ftmul@f2,c
 12456  002E4E  0E23               	movlw	35
 12457  002E50  6E11               	movwf	i2___ftmul@f2+1,c
 12458  002E52  0E41               	movlw	65
 12459  002E54  6E12               	movwf	i2___ftmul@f2+2,c
 12460  002E56  5031               	movf	i2PWM_DutyCycle1@percentageDuty,w,c
 12461  002E58  ECF9  F019         	call	i2___lbtoft
 12462  002E5C  C009  F00D         	movff	?i2___lbtoft,i2___ftmul@f1
 12463  002E60  C00A  F00E         	movff	?i2___lbtoft+1,i2___ftmul@f1+1
 12464  002E64  C00B  F00F         	movff	?i2___lbtoft+2,i2___ftmul@f1+2
 12465  002E68  ECBB  F00F         	call	i2___ftmul	;wreg free
 12466  002E6C  C00D  F01C         	movff	?i2___ftmul,i2___fttol@f1
 12467  002E70  C00E  F01D         	movff	?i2___ftmul+1,i2___fttol@f1+1
 12468  002E74  C00F  F01E         	movff	?i2___ftmul+2,i2___fttol@f1+2
 12469  002E78  EC72  F011         	call	i2___fttol	;wreg free
 12470  002E7C  C01C  F02B         	movff	?i2___fttol,??i2_PWM_DutyCycle1
 12471  002E80  C01D  F02C         	movff	?i2___fttol+1,??i2_PWM_DutyCycle1+1
 12472  002E84  C01E  F02D         	movff	?i2___fttol+2,??i2_PWM_DutyCycle1+2
 12473  002E88  C01F  F02E         	movff	?i2___fttol+3,??i2_PWM_DutyCycle1+3
 12474  002E8C  C02B  F032         	movff	??i2_PWM_DutyCycle1,i2PWM_DutyCycle1@DC
 12475  002E90  C02C  F033         	movff	??i2_PWM_DutyCycle1+1,i2PWM_DutyCycle1@DC+1
 12476                           
 12477                           ;pwm.c: 38: SetDCPWM1(DC);
 12478  002E94  C032  F001         	movff	i2PWM_DutyCycle1@DC,i2SetDCPWM1@dutycycle
 12479  002E98  C033  F002         	movff	i2PWM_DutyCycle1@DC+1,i2SetDCPWM1@dutycycle+1
 12480  002E9C  EC09  F019         	call	i2_SetDCPWM1	;wreg free
 12481                           
 12482                           ;pwm.c: 39: return;
 12483  002EA0  0012               	return	
 12484  002EA2                     __end_ofi2_PWM_DutyCycle1:
 12485                           	opt stack 0
 12486                           pclatu	equ	0xFFB
 12487                           pclath	equ	0xFFA
 12488                           tblptru	equ	0xFF8
 12489                           tblptrh	equ	0xFF7
 12490                           tblptrl	equ	0xFF6
 12491                           tablat	equ	0xFF5
 12492                           prodh	equ	0xFF4
 12493                           prodl	equ	0xFF3
 12494                           intcon	equ	0xFF2
 12495                           intcon2	equ	0xFF1
 12496                           intcon3	equ	0xFF0
 12497                           indf0	equ	0xFEF
 12498                           postinc0	equ	0xFEE
 12499                           fsr0h	equ	0xFEA
 12500                           fsr0l	equ	0xFE9
 12501                           wreg	equ	0xFE8
 12502                           postinc1	equ	0xFE6
 12503                           postdec1	equ	0xFE5
 12504                           fsr1h	equ	0xFE2
 12505                           fsr1l	equ	0xFE1
 12506                           indf2	equ	0xFDF
 12507                           postinc2	equ	0xFDE
 12508                           postdec2	equ	0xFDD
 12509                           fsr2h	equ	0xFDA
 12510                           fsr2l	equ	0xFD9
 12511                           status	equ	0xFD8
 12512                           
 12513 ;; *************** function i2___lbtoft *****************
 12514 ;; Defined at:
 12515 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  c               1    wreg     unsigned char 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  c               1   11[COMRAM] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  3    8[COMRAM] float 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12529 ;;      Params:         3       0       0       0       0       0       0       0       0
 12530 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12532 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12533 ;;Total ram usage:        4 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    1
 12536 ;; This function calls:
 12537 ;;		i2___ftpack
 12538 ;; This function is called by:
 12539 ;;		i2_PWM_DutyCycle1
 12540 ;;		i2_PWM_DutyCycle2
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           	psect	text56
 12545  0033F2                     __ptext56:
 12546                           	opt stack 0
 12547  0033F2                     i2___lbtoft:
 12548                           	opt stack 21
 12549                           
 12550                           ;incstack = 0
 12551                           ;i2___lbtoft@c stored from wreg
 12552  0033F2  6E0C               	movwf	i2___lbtoft@c,c
 12553  0033F4  500C               	movf	i2___lbtoft@c,w,c
 12554  0033F6  6E01               	movwf	i2___ftpack@arg,c
 12555  0033F8  6A02               	clrf	i2___ftpack@arg+1,c
 12556  0033FA  6A03               	clrf	i2___ftpack@arg+2,c
 12557  0033FC  0E8E               	movlw	142
 12558  0033FE  6E04               	movwf	i2___ftpack@exp,c
 12559  003400  0E00               	movlw	0
 12560  003402  6E05               	movwf	i2___ftpack@sign,c
 12561  003404  ECBF  F013         	call	i2___ftpack	;wreg free
 12562  003408  C001  F009         	movff	?i2___ftpack,?i2___lbtoft
 12563  00340C  C002  F00A         	movff	?i2___ftpack+1,?i2___lbtoft+1
 12564  003410  C003  F00B         	movff	?i2___ftpack+2,?i2___lbtoft+2
 12565  003414  0012               	return	
 12566  003416                     __end_ofi2___lbtoft:
 12567                           	opt stack 0
 12568                           pclatu	equ	0xFFB
 12569                           pclath	equ	0xFFA
 12570                           tblptru	equ	0xFF8
 12571                           tblptrh	equ	0xFF7
 12572                           tblptrl	equ	0xFF6
 12573                           tablat	equ	0xFF5
 12574                           prodh	equ	0xFF4
 12575                           prodl	equ	0xFF3
 12576                           intcon	equ	0xFF2
 12577                           intcon2	equ	0xFF1
 12578                           intcon3	equ	0xFF0
 12579                           indf0	equ	0xFEF
 12580                           postinc0	equ	0xFEE
 12581                           fsr0h	equ	0xFEA
 12582                           fsr0l	equ	0xFE9
 12583                           wreg	equ	0xFE8
 12584                           postinc1	equ	0xFE6
 12585                           postdec1	equ	0xFE5
 12586                           fsr1h	equ	0xFE2
 12587                           fsr1l	equ	0xFE1
 12588                           indf2	equ	0xFDF
 12589                           postinc2	equ	0xFDE
 12590                           postdec2	equ	0xFDD
 12591                           fsr2h	equ	0xFDA
 12592                           fsr2l	equ	0xFD9
 12593                           status	equ	0xFD8
 12594                           
 12595 ;; *************** function i2___fttol *****************
 12596 ;; Defined at:
 12597 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;  f1              3   27[COMRAM] float 
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  __fttol         4   37[COMRAM] unsigned long 
 12602 ;;  __fttol         1   41[COMRAM] unsigned char 
 12603 ;;  __fttol         1   36[COMRAM] unsigned char 
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  4   27[COMRAM] long 
 12606 ;; Registers used:
 12607 ;;		wreg, status,2, status,0
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12613 ;;      Params:         4       0       0       0       0       0       0       0       0
 12614 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12615 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12616 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12617 ;;Total ram usage:       15 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; This function calls:
 12620 ;;		Nothing
 12621 ;; This function is called by:
 12622 ;;		i2_PWM_DutyCycle1
 12623 ;;		i2_PWM_DutyCycle2
 12624 ;; This function uses a non-reentrant model
 12625 ;;
 12626                           
 12627                           	psect	text57
 12628  0022E4                     __ptext57:
 12629                           	opt stack 0
 12630  0022E4                     i2___fttol:
 12631                           	opt stack 22
 12632                           
 12633                           ;incstack = 0
 12634  0022E4  C01E  F020         	movff	i2___fttol@f1+2,??i2___fttol
 12635  0022E8  6A21               	clrf	(??i2___fttol+1)& (0+255),c
 12636  0022EA  6A22               	clrf	(??i2___fttol+2)& (0+255),c
 12637  0022EC  341D               	rlcf	i2___fttol@f1+1,w,c
 12638  0022EE  3620               	rlcf	??i2___fttol& (0+255),f,c
 12639  0022F0  E301               	bnc	u486_41
 12640  0022F2  8021               	bsf	(??i2___fttol+1)& (0+255),0,c
 12641  0022F4                     u486_41:
 12642  0022F4  5020               	movf	??i2___fttol,w,c
 12643  0022F6  6E2A               	movwf	i2___fttol@exp1,c
 12644  0022F8  662A               	tstfsz	i2___fttol@exp1& (0+255),c
 12645  0022FA  D001               	goto	i2l4420
 12646  0022FC  D038               	goto	i2u491_40
 12647  0022FE                     i2l4420:
 12648  0022FE  0E17               	movlw	23
 12649  002300  6E20               	movwf	??i2___fttol& (0+255),c
 12650  002302  C01C  F021         	movff	i2___fttol@f1,??i2___fttol+1
 12651  002306  C01D  F022         	movff	i2___fttol@f1+1,??i2___fttol+2
 12652  00230A  C01E  F023         	movff	i2___fttol@f1+2,??i2___fttol+3
 12653  00230E  2820               	incf	??i2___fttol,w,c
 12654  002310  6E24               	movwf	(??i2___fttol+4)& (0+255),c
 12655  002312  D004               	goto	i2u488_40
 12656  002314                     i2u488_45:
 12657  002314  90D8               	bcf	status,0,c
 12658  002316  3223               	rrcf	??i2___fttol+3,f,c
 12659  002318  3222               	rrcf	??i2___fttol+2,f,c
 12660  00231A  3221               	rrcf	??i2___fttol+1,f,c
 12661  00231C                     i2u488_40:
 12662  00231C  2E24               	decfsz	(??i2___fttol+4)& (0+255),f,c
 12663  00231E  D7FA               	goto	i2u488_45
 12664  002320  5021               	movf	??i2___fttol+1,w,c
 12665  002322  6E25               	movwf	i2___fttol@sign1,c
 12666  002324  8E1D               	bsf	i2___fttol@f1+1,7,c
 12667  002326  0EFF               	movlw	255
 12668  002328  161C               	andwf	i2___fttol@f1,f,c
 12669  00232A  0EFF               	movlw	255
 12670  00232C  161D               	andwf	i2___fttol@f1+1,f,c
 12671  00232E  0E00               	movlw	0
 12672  002330  161E               	andwf	i2___fttol@f1+2,f,c
 12673  002332  501C               	movf	i2___fttol@f1,w,c
 12674  002334  6E26               	movwf	i2___fttol@lval,c
 12675  002336  501D               	movf	i2___fttol@f1+1,w,c
 12676  002338  6E27               	movwf	i2___fttol@lval+1,c
 12677  00233A  501E               	movf	i2___fttol@f1+2,w,c
 12678  00233C  6E28               	movwf	i2___fttol@lval+2,c
 12679  00233E  6A29               	clrf	i2___fttol@lval+3,c
 12680  002340  0E8E               	movlw	142
 12681  002342  5E2A               	subwf	i2___fttol@exp1,f,c
 12682  002344  AE2A               	btfss	i2___fttol@exp1,7,c
 12683  002346  D010               	goto	i2l4442
 12684  002348  502A               	movf	i2___fttol@exp1,w,c
 12685  00234A  0A80               	xorlw	128
 12686  00234C  6E20               	movwf	??i2___fttol& (0+255),c
 12687  00234E  0EF1               	movlw	241
 12688  002350  0A80               	xorlw	128
 12689  002352  5C20               	subwf	??i2___fttol,w,c
 12690  002354  A0D8               	btfss	status,0,c
 12691  002356  D00B               	goto	i2u491_40
 12692  002358                     i2l4438:
 12693  002358  90D8               	bcf	status,0,c
 12694  00235A  3229               	rrcf	i2___fttol@lval+3,f,c
 12695  00235C  3228               	rrcf	i2___fttol@lval+2,f,c
 12696  00235E  3227               	rrcf	i2___fttol@lval+1,f,c
 12697  002360  3226               	rrcf	i2___fttol@lval,f,c
 12698  002362  3E2A               	incfsz	i2___fttol@exp1,f,c
 12699  002364  D7F9               	goto	i2l4438
 12700  002366  D014               	goto	i2l4452
 12701  002368                     i2l4442:
 12702  002368  0E17               	movlw	23
 12703  00236A  642A               	cpfsgt	i2___fttol@exp1,c
 12704  00236C  D00F               	goto	i2l4450
 12705  00236E                     i2u491_40:
 12706  00236E  0E00               	movlw	0
 12707  002370  6E1C               	movwf	?i2___fttol,c
 12708  002372  0E00               	movlw	0
 12709  002374  6E1D               	movwf	?i2___fttol+1,c
 12710  002376  0E00               	movlw	0
 12711  002378  6E1E               	movwf	?i2___fttol+2,c
 12712  00237A  0E00               	movlw	0
 12713  00237C  6E1F               	movwf	?i2___fttol+3,c
 12714  00237E  D01B               	goto	i2l1103
 12715  002380                     i2l4448:
 12716  002380  90D8               	bcf	status,0,c
 12717  002382  3626               	rlcf	i2___fttol@lval,f,c
 12718  002384  3627               	rlcf	i2___fttol@lval+1,f,c
 12719  002386  3628               	rlcf	i2___fttol@lval+2,f,c
 12720  002388  3629               	rlcf	i2___fttol@lval+3,f,c
 12721  00238A  062A               	decf	i2___fttol@exp1,f,c
 12722  00238C                     i2l4450:
 12723  00238C  662A               	tstfsz	i2___fttol@exp1,c
 12724  00238E  D7F8               	goto	i2l4448
 12725  002390                     i2l4452:
 12726  002390  5025               	movf	i2___fttol@sign1,w,c
 12727  002392  B4D8               	btfsc	status,2,c
 12728  002394  D008               	goto	i2l4456
 12729  002396  1E29               	comf	i2___fttol@lval+3,f,c
 12730  002398  1E28               	comf	i2___fttol@lval+2,f,c
 12731  00239A  1E27               	comf	i2___fttol@lval+1,f,c
 12732  00239C  6C26               	negf	i2___fttol@lval,c
 12733  00239E  0E00               	movlw	0
 12734  0023A0  2227               	addwfc	i2___fttol@lval+1,f,c
 12735  0023A2  2228               	addwfc	i2___fttol@lval+2,f,c
 12736  0023A4  2229               	addwfc	i2___fttol@lval+3,f,c
 12737  0023A6                     i2l4456:
 12738  0023A6  C026  F01C         	movff	i2___fttol@lval,?i2___fttol
 12739  0023AA  C027  F01D         	movff	i2___fttol@lval+1,?i2___fttol+1
 12740  0023AE  C028  F01E         	movff	i2___fttol@lval+2,?i2___fttol+2
 12741  0023B2  C029  F01F         	movff	i2___fttol@lval+3,?i2___fttol+3
 12742  0023B6                     i2l1103:
 12743  0023B6  0012               	return	
 12744  0023B8                     __end_ofi2___fttol:
 12745                           	opt stack 0
 12746                           pclatu	equ	0xFFB
 12747                           pclath	equ	0xFFA
 12748                           tblptru	equ	0xFF8
 12749                           tblptrh	equ	0xFF7
 12750                           tblptrl	equ	0xFF6
 12751                           tablat	equ	0xFF5
 12752                           prodh	equ	0xFF4
 12753                           prodl	equ	0xFF3
 12754                           intcon	equ	0xFF2
 12755                           intcon2	equ	0xFF1
 12756                           intcon3	equ	0xFF0
 12757                           indf0	equ	0xFEF
 12758                           postinc0	equ	0xFEE
 12759                           fsr0h	equ	0xFEA
 12760                           fsr0l	equ	0xFE9
 12761                           wreg	equ	0xFE8
 12762                           postinc1	equ	0xFE6
 12763                           postdec1	equ	0xFE5
 12764                           fsr1h	equ	0xFE2
 12765                           fsr1l	equ	0xFE1
 12766                           indf2	equ	0xFDF
 12767                           postinc2	equ	0xFDE
 12768                           postdec2	equ	0xFDD
 12769                           fsr2h	equ	0xFDA
 12770                           fsr2l	equ	0xFD9
 12771                           status	equ	0xFD8
 12772                           
 12773 ;; *************** function i2___ftmul *****************
 12774 ;; Defined at:
 12775 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;  f1              3   12[COMRAM] float 
 12778 ;;  f2              3   15[COMRAM] float 
 12779 ;; Auto vars:     Size  Location     Type
 12780 ;;  __ftmul         3   22[COMRAM] unsigned um
 12781 ;;  __ftmul         1   26[COMRAM] unsigned char 
 12782 ;;  __ftmul         1   25[COMRAM] unsigned char 
 12783 ;;  __ftmul         1   21[COMRAM] unsigned char 
 12784 ;; Return value:  Size  Location     Type
 12785 ;;                  3   12[COMRAM] float 
 12786 ;; Registers used:
 12787 ;;		wreg, status,2, status,0, cstack
 12788 ;; Tracked objects:
 12789 ;;		On entry : 0/0
 12790 ;;		On exit  : 0/0
 12791 ;;		Unchanged: 0/0
 12792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12793 ;;      Params:         6       0       0       0       0       0       0       0       0
 12794 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12795 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12796 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12797 ;;Total ram usage:       15 bytes
 12798 ;; Hardware stack levels used:    1
 12799 ;; Hardware stack levels required when called:    1
 12800 ;; This function calls:
 12801 ;;		i2___ftpack
 12802 ;; This function is called by:
 12803 ;;		i2_PWM_DutyCycle1
 12804 ;;		i2_PWM_DutyCycle2
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           	psect	text58
 12809  001F76                     __ptext58:
 12810                           	opt stack 0
 12811  001F76                     i2___ftmul:
 12812                           	opt stack 21
 12813                           
 12814                           ;incstack = 0
 12815  001F76  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
 12816  001F7A  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12817  001F7C  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12818  001F7E  340E               	rlcf	i2___ftmul@f1+1,w,c
 12819  001F80  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12820  001F82  E301               	bnc	u480_41
 12821  001F84  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12822  001F86                     u480_41:
 12823  001F86  5013               	movf	??i2___ftmul,w,c
 12824  001F88  6E16               	movwf	i2___ftmul@exp,c
 12825  001F8A  6616               	tstfsz	i2___ftmul@exp& (0+255),c
 12826  001F8C  D001               	goto	i2l4372
 12827  001F8E  D00C               	goto	i2u483_40
 12828  001F90                     i2l4372:
 12829  001F90  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
 12830  001F94  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12831  001F96  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12832  001F98  3411               	rlcf	i2___ftmul@f2+1,w,c
 12833  001F9A  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12834  001F9C  E301               	bnc	u482_41
 12835  001F9E  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12836  001FA0                     u482_41:
 12837  001FA0  5013               	movf	??i2___ftmul,w,c
 12838  001FA2  6E1B               	movwf	i2___ftmul@sign,c
 12839  001FA4  661B               	tstfsz	i2___ftmul@sign& (0+255),c
 12840  001FA6  D007               	goto	i2l4378
 12841  001FA8                     i2u483_40:
 12842  001FA8  0E00               	movlw	0
 12843  001FAA  6E0D               	movwf	?i2___ftmul,c
 12844  001FAC  0E00               	movlw	0
 12845  001FAE  6E0E               	movwf	?i2___ftmul+1,c
 12846  001FB0  0E00               	movlw	0
 12847  001FB2  6E0F               	movwf	?i2___ftmul+2,c
 12848  001FB4  D051               	goto	i2l1083
 12849  001FB6                     i2l4378:
 12850  001FB6  501B               	movf	i2___ftmul@sign,w,c
 12851  001FB8  0F7B               	addlw	123
 12852  001FBA  2616               	addwf	i2___ftmul@exp,f,c
 12853  001FBC  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 12854  001FC0  5012               	movf	i2___ftmul@f2+2,w,c
 12855  001FC2  1A1B               	xorwf	i2___ftmul@sign,f,c
 12856  001FC4  0E80               	movlw	128
 12857  001FC6  161B               	andwf	i2___ftmul@sign,f,c
 12858  001FC8  8E0E               	bsf	i2___ftmul@f1+1,7,c
 12859  001FCA  8E11               	bsf	i2___ftmul@f2+1,7,c
 12860  001FCC  0EFF               	movlw	255
 12861  001FCE  1610               	andwf	i2___ftmul@f2,f,c
 12862  001FD0  0EFF               	movlw	255
 12863  001FD2  1611               	andwf	i2___ftmul@f2+1,f,c
 12864  001FD4  0E00               	movlw	0
 12865  001FD6  1612               	andwf	i2___ftmul@f2+2,f,c
 12866  001FD8  0E00               	movlw	0
 12867  001FDA  6E17               	movwf	i2___ftmul@f3_as_product,c
 12868  001FDC  0E00               	movlw	0
 12869  001FDE  6E18               	movwf	i2___ftmul@f3_as_product+1,c
 12870  001FE0  0E00               	movlw	0
 12871  001FE2  6E19               	movwf	i2___ftmul@f3_as_product+2,c
 12872  001FE4  0E07               	movlw	7
 12873  001FE6  6E1A               	movwf	i2___ftmul@cntr,c
 12874  001FE8                     i2l4392:
 12875  001FE8  A00D               	btfss	i2___ftmul@f1,0,c
 12876  001FEA  D006               	goto	i2l4396
 12877  001FEC  5010               	movf	i2___ftmul@f2,w,c
 12878  001FEE  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12879  001FF0  5011               	movf	i2___ftmul@f2+1,w,c
 12880  001FF2  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12881  001FF4  5012               	movf	i2___ftmul@f2+2,w,c
 12882  001FF6  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12883  001FF8                     i2l4396:
 12884  001FF8  90D8               	bcf	status,0,c
 12885  001FFA  320F               	rrcf	i2___ftmul@f1+2,f,c
 12886  001FFC  320E               	rrcf	i2___ftmul@f1+1,f,c
 12887  001FFE  320D               	rrcf	i2___ftmul@f1,f,c
 12888  002000  90D8               	bcf	status,0,c
 12889  002002  3610               	rlcf	i2___ftmul@f2,f,c
 12890  002004  3611               	rlcf	i2___ftmul@f2+1,f,c
 12891  002006  3612               	rlcf	i2___ftmul@f2+2,f,c
 12892  002008  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12893  00200A  D7EE               	goto	i2l4392
 12894  00200C  0E09               	movlw	9
 12895  00200E  6E1A               	movwf	i2___ftmul@cntr,c
 12896  002010                     i2l4402:
 12897  002010  A00D               	btfss	i2___ftmul@f1,0,c
 12898  002012  D006               	goto	i2l4406
 12899  002014  5010               	movf	i2___ftmul@f2,w,c
 12900  002016  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12901  002018  5011               	movf	i2___ftmul@f2+1,w,c
 12902  00201A  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12903  00201C  5012               	movf	i2___ftmul@f2+2,w,c
 12904  00201E  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12905  002020                     i2l4406:
 12906  002020  90D8               	bcf	status,0,c
 12907  002022  320F               	rrcf	i2___ftmul@f1+2,f,c
 12908  002024  320E               	rrcf	i2___ftmul@f1+1,f,c
 12909  002026  320D               	rrcf	i2___ftmul@f1,f,c
 12910  002028  90D8               	bcf	status,0,c
 12911  00202A  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
 12912  00202C  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
 12913  00202E  3217               	rrcf	i2___ftmul@f3_as_product,f,c
 12914  002030  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12915  002032  D7EE               	goto	i2l4402
 12916  002034  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 12917  002038  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12918  00203C  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12919  002040  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 12920  002044  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 12921  002048  ECBF  F013         	call	i2___ftpack	;wreg free
 12922  00204C  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
 12923  002050  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
 12924  002054  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
 12925  002058                     i2l1083:
 12926  002058  0012               	return	
 12927  00205A                     __end_ofi2___ftmul:
 12928                           	opt stack 0
 12929                           pclatu	equ	0xFFB
 12930                           pclath	equ	0xFFA
 12931                           tblptru	equ	0xFF8
 12932                           tblptrh	equ	0xFF7
 12933                           tblptrl	equ	0xFF6
 12934                           tablat	equ	0xFF5
 12935                           prodh	equ	0xFF4
 12936                           prodl	equ	0xFF3
 12937                           intcon	equ	0xFF2
 12938                           intcon2	equ	0xFF1
 12939                           intcon3	equ	0xFF0
 12940                           indf0	equ	0xFEF
 12941                           postinc0	equ	0xFEE
 12942                           fsr0h	equ	0xFEA
 12943                           fsr0l	equ	0xFE9
 12944                           wreg	equ	0xFE8
 12945                           postinc1	equ	0xFE6
 12946                           postdec1	equ	0xFE5
 12947                           fsr1h	equ	0xFE2
 12948                           fsr1l	equ	0xFE1
 12949                           indf2	equ	0xFDF
 12950                           postinc2	equ	0xFDE
 12951                           postdec2	equ	0xFDD
 12952                           fsr2h	equ	0xFDA
 12953                           fsr2l	equ	0xFD9
 12954                           status	equ	0xFD8
 12955                           
 12956 ;; *************** function i2___ftpack *****************
 12957 ;; Defined at:
 12958 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;  arg             3    0[COMRAM] unsigned um
 12961 ;;  exp             1    3[COMRAM] unsigned char 
 12962 ;;  sign            1    4[COMRAM] unsigned char 
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;		None
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  3    0[COMRAM] float 
 12967 ;; Registers used:
 12968 ;;		wreg, status,2, status,0
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12974 ;;      Params:         5       0       0       0       0       0       0       0       0
 12975 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12976 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12977 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12978 ;;Total ram usage:        8 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		i2___ftmul
 12984 ;;		i2___lbtoft
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           	psect	text59
 12989  00277E                     __ptext59:
 12990                           	opt stack 0
 12991  00277E                     i2___ftpack:
 12992                           	opt stack 21
 12993                           
 12994                           ;incstack = 0
 12995  00277E  5004               	movf	i2___ftpack@exp,w,c
 12996  002780  B4D8               	btfsc	status,2,c
 12997  002782  D005               	goto	i2l4022
 12998  002784  5001               	movf	i2___ftpack@arg,w,c
 12999  002786  1002               	iorwf	i2___ftpack@arg+1,w,c
 13000  002788  1003               	iorwf	i2___ftpack@arg+2,w,c
 13001  00278A  A4D8               	btfss	status,2,c
 13002  00278C  D00C               	goto	i2l4028
 13003  00278E                     i2l4022:
 13004  00278E  0E00               	movlw	0
 13005  002790  6E01               	movwf	?i2___ftpack,c
 13006  002792  0E00               	movlw	0
 13007  002794  6E02               	movwf	?i2___ftpack+1,c
 13008  002796  0E00               	movlw	0
 13009  002798  6E03               	movwf	?i2___ftpack+2,c
 13010  00279A  D044               	goto	i2l982
 13011  00279C                     i2l4026:
 13012  00279C  2A04               	incf	i2___ftpack@exp,f,c
 13013  00279E  90D8               	bcf	status,0,c
 13014  0027A0  3203               	rrcf	i2___ftpack@arg+2,f,c
 13015  0027A2  3202               	rrcf	i2___ftpack@arg+1,f,c
 13016  0027A4  3201               	rrcf	i2___ftpack@arg,f,c
 13017  0027A6                     i2l4028:
 13018  0027A6  0E00               	movlw	0
 13019  0027A8  1401               	andwf	i2___ftpack@arg,w,c
 13020  0027AA  6E06               	movwf	??i2___ftpack& (0+255),c
 13021  0027AC  0E00               	movlw	0
 13022  0027AE  1402               	andwf	i2___ftpack@arg+1,w,c
 13023  0027B0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13024  0027B2  0EFE               	movlw	254
 13025  0027B4  1403               	andwf	i2___ftpack@arg+2,w,c
 13026  0027B6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13027  0027B8  5006               	movf	??i2___ftpack,w,c
 13028  0027BA  1007               	iorwf	??i2___ftpack+1,w,c
 13029  0027BC  1008               	iorwf	??i2___ftpack+2,w,c
 13030  0027BE  B4D8               	btfsc	status,2,c
 13031  0027C0  D00C               	goto	i2l4034
 13032  0027C2  D7EC               	goto	i2l4026
 13033  0027C4                     i2l4030:
 13034  0027C4  2A04               	incf	i2___ftpack@exp,f,c
 13035  0027C6  0E01               	movlw	1
 13036  0027C8  2601               	addwf	i2___ftpack@arg,f,c
 13037  0027CA  0E00               	movlw	0
 13038  0027CC  2202               	addwfc	i2___ftpack@arg+1,f,c
 13039  0027CE  0E00               	movlw	0
 13040  0027D0  2203               	addwfc	i2___ftpack@arg+2,f,c
 13041  0027D2  90D8               	bcf	status,0,c
 13042  0027D4  3203               	rrcf	i2___ftpack@arg+2,f,c
 13043  0027D6  3202               	rrcf	i2___ftpack@arg+1,f,c
 13044  0027D8  3201               	rrcf	i2___ftpack@arg,f,c
 13045  0027DA                     i2l4034:
 13046  0027DA  0E00               	movlw	0
 13047  0027DC  1401               	andwf	i2___ftpack@arg,w,c
 13048  0027DE  6E06               	movwf	??i2___ftpack& (0+255),c
 13049  0027E0  0E00               	movlw	0
 13050  0027E2  1402               	andwf	i2___ftpack@arg+1,w,c
 13051  0027E4  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13052  0027E6  0EFF               	movlw	255
 13053  0027E8  1403               	andwf	i2___ftpack@arg+2,w,c
 13054  0027EA  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13055  0027EC  5006               	movf	??i2___ftpack,w,c
 13056  0027EE  1007               	iorwf	??i2___ftpack+1,w,c
 13057  0027F0  1008               	iorwf	??i2___ftpack+2,w,c
 13058  0027F2  B4D8               	btfsc	status,2,c
 13059  0027F4  D006               	goto	i2l4038
 13060  0027F6  D7E6               	goto	i2l4030
 13061  0027F8                     i2l4036:
 13062  0027F8  0604               	decf	i2___ftpack@exp,f,c
 13063  0027FA  90D8               	bcf	status,0,c
 13064  0027FC  3601               	rlcf	i2___ftpack@arg,f,c
 13065  0027FE  3602               	rlcf	i2___ftpack@arg+1,f,c
 13066  002800  3603               	rlcf	i2___ftpack@arg+2,f,c
 13067  002802                     i2l4038:
 13068  002802  AE02               	btfss	i2___ftpack@arg+1,7,c
 13069  002804  D7F9               	goto	i2l4036
 13070  002806  A004               	btfss	i2___ftpack@exp,0,c
 13071  002808  9E02               	bcf	i2___ftpack@arg+1,7,c
 13072  00280A  90D8               	bcf	status,0,c
 13073  00280C  3204               	rrcf	i2___ftpack@exp,f,c
 13074  00280E  5004               	movf	i2___ftpack@exp,w,c
 13075  002810  1203               	iorwf	i2___ftpack@arg+2,f,c
 13076  002812  5005               	movf	i2___ftpack@sign,w,c
 13077  002814  A4D8               	btfss	status,2,c
 13078  002816  8E03               	bsf	i2___ftpack@arg+2,7,c
 13079  002818  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13080  00281C  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13081  002820  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13082  002824                     i2l982:
 13083  002824  0012               	return	
 13084  002826                     __end_ofi2___ftpack:
 13085                           	opt stack 0
 13086                           pclatu	equ	0xFFB
 13087                           pclath	equ	0xFFA
 13088                           tblptru	equ	0xFF8
 13089                           tblptrh	equ	0xFF7
 13090                           tblptrl	equ	0xFF6
 13091                           tablat	equ	0xFF5
 13092                           prodh	equ	0xFF4
 13093                           prodl	equ	0xFF3
 13094                           intcon	equ	0xFF2
 13095                           intcon2	equ	0xFF1
 13096                           intcon3	equ	0xFF0
 13097                           indf0	equ	0xFEF
 13098                           postinc0	equ	0xFEE
 13099                           fsr0h	equ	0xFEA
 13100                           fsr0l	equ	0xFE9
 13101                           wreg	equ	0xFE8
 13102                           postinc1	equ	0xFE6
 13103                           postdec1	equ	0xFE5
 13104                           fsr1h	equ	0xFE2
 13105                           fsr1l	equ	0xFE1
 13106                           indf2	equ	0xFDF
 13107                           postinc2	equ	0xFDE
 13108                           postdec2	equ	0xFDD
 13109                           fsr2h	equ	0xFDA
 13110                           fsr2l	equ	0xFD9
 13111                           status	equ	0xFD8
 13112                           
 13113 ;; *************** function i2_SetDCPWM1 *****************
 13114 ;; Defined at:
 13115 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;  dutycycle       2    0[COMRAM] unsigned int 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;  SetDCPWM1       2    4[COMRAM] struct PWMDC
 13120 ;; Return value:  Size  Location     Type
 13121 ;;		None               void
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13129 ;;      Params:         2       0       0       0       0       0       0       0       0
 13130 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13131 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13132 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13133 ;;Total ram usage:        6 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; This function calls:
 13136 ;;		Nothing
 13137 ;; This function is called by:
 13138 ;;		i2_PWM_DutyCycle1
 13139 ;; This function uses a non-reentrant model
 13140 ;;
 13141                           
 13142                           	psect	text60
 13143  003212                     __ptext60:
 13144                           	opt stack 0
 13145  003212                     i2_SetDCPWM1:
 13146                           	opt stack 22
 13147                           
 13148                           ;incstack = 0
 13149  003212  C001  F003         	movff	i2SetDCPWM1@dutycycle,??i2_SetDCPWM1
 13150  003216  C002  F004         	movff	i2SetDCPWM1@dutycycle+1,??i2_SetDCPWM1+1
 13151  00321A  0E06               	movlw	6
 13152  00321C                     i2u478_45:
 13153  00321C  90D8               	bcf	status,0,c
 13154  00321E  3603               	rlcf	??i2_SetDCPWM1,f,c
 13155  003220  3604               	rlcf	??i2_SetDCPWM1+1,f,c
 13156  003222  2EE8               	decfsz	wreg,f,c
 13157  003224  D7FB               	goto	i2u478_45
 13158  003226  C003  F005         	movff	??i2_SetDCPWM1,i2SetDCPWM1@DCycle
 13159  00322A  C004  F006         	movff	??i2_SetDCPWM1+1,i2SetDCPWM1@DCycle+1
 13160  00322E  C006  FFBE         	movff	i2SetDCPWM1@DCycle+1,4030	;volatile
 13161  003232  C005  F003         	movff	i2SetDCPWM1@DCycle,??i2_SetDCPWM1
 13162  003236  90D8               	bcf	status,0,c
 13163  003238  3203               	rrcf	??i2_SetDCPWM1,f,c
 13164  00323A  90D8               	bcf	status,0,c
 13165  00323C  3203               	rrcf	??i2_SetDCPWM1,f,c
 13166  00323E  0E30               	movlw	48
 13167  003240  1603               	andwf	??i2_SetDCPWM1,f,c
 13168  003242  50BD               	movf	4029,w,c	;volatile
 13169  003244  0BCF               	andlw	207
 13170  003246  1003               	iorwf	??i2_SetDCPWM1,w,c
 13171  003248  6EBD               	movwf	4029,c	;volatile
 13172  00324A  0012               	return	
 13173  00324C                     __end_ofi2_SetDCPWM1:
 13174                           	opt stack 0
 13175                           pclatu	equ	0xFFB
 13176                           pclath	equ	0xFFA
 13177                           tblptru	equ	0xFF8
 13178                           tblptrh	equ	0xFF7
 13179                           tblptrl	equ	0xFF6
 13180                           tablat	equ	0xFF5
 13181                           prodh	equ	0xFF4
 13182                           prodl	equ	0xFF3
 13183                           intcon	equ	0xFF2
 13184                           intcon2	equ	0xFF1
 13185                           intcon3	equ	0xFF0
 13186                           indf0	equ	0xFEF
 13187                           postinc0	equ	0xFEE
 13188                           fsr0h	equ	0xFEA
 13189                           fsr0l	equ	0xFE9
 13190                           wreg	equ	0xFE8
 13191                           postinc1	equ	0xFE6
 13192                           postdec1	equ	0xFE5
 13193                           fsr1h	equ	0xFE2
 13194                           fsr1l	equ	0xFE1
 13195                           indf2	equ	0xFDF
 13196                           postinc2	equ	0xFDE
 13197                           postdec2	equ	0xFDD
 13198                           fsr2h	equ	0xFDA
 13199                           fsr2l	equ	0xFD9
 13200                           status	equ	0xFD8
 13201                           
 13202 ;; *************** function i2_Lcd_Write_String *****************
 13203 ;; Defined at:
 13204 ;;		line 90 in file "lcd.c"
 13205 ;; Parameters:    Size  Location     Type
 13206 ;;  a               2    4[COMRAM] PTR unsigned char 
 13207 ;;		 -> STR_23(11), STR_22(7), STR_21(18), STR_20(17), 
 13208 ;;		 -> STR_19(17), Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), STR_16(8), 
 13209 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(16), 
 13210 ;;		 -> STR_10(7), 
 13211 ;; Auto vars:     Size  Location     Type
 13212 ;;  Lcd_Write_St    2    8[COMRAM] int 
 13213 ;; Return value:  Size  Location     Type
 13214 ;;		None               void
 13215 ;; Registers used:
 13216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13222 ;;      Params:         2       0       0       0       0       0       0       0       0
 13223 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13224 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13225 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13226 ;;Total ram usage:        6 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    2
 13229 ;; This function calls:
 13230 ;;		i2_Lcd_Write_Char
 13231 ;; This function is called by:
 13232 ;;		_TMRO_USART
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           	psect	text61
 13237  002C66                     __ptext61:
 13238                           	opt stack 0
 13239  002C66                     i2_Lcd_Write_String:
 13240                           	opt stack 21
 13241                           
 13242                           ;lcd.c: 91: int i;
 13243                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 13244                           
 13245                           ;incstack = 0
 13246  002C66  0E00               	movlw	0
 13247  002C68  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 13248  002C6A  0E00               	movlw	0
 13249  002C6C  6E09               	movwf	i2Lcd_Write_String@i,c
 13250  002C6E  D01C               	goto	i2l4666
 13251  002C70                     i2l4662:
 13252                           
 13253                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 13254  002C70  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13255  002C74  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13256  002C78  5009               	movf	i2Lcd_Write_String@i,w,c
 13257  002C7A  2607               	addwf	??i2_Lcd_Write_String,f,c
 13258  002C7C  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13259  002C7E  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13260  002C80  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13261  002C84  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13262  002C88  6AF8               	clrf	tblptru,c
 13263  002C8A  0E07               	movlw	(high __ramtop+-1)
 13264  002C8C  64F7               	cpfsgt	tblptrh,c
 13265  002C8E  D003               	bra	i2u505_47
 13266  002C90  0008               	tblrd		*
 13267  002C92  50F5               	movf	tablat,w,c
 13268  002C94  D005               	bra	i2u505_40
 13269  002C96                     i2u505_47:
 13270  002C96  CFF6 FFE9          	movff	tblptrl,fsr0l
 13271  002C9A  CFF7 FFEA          	movff	tblptrh,fsr0h
 13272  002C9E  50EF               	movf	indf0,w,c
 13273  002CA0                     i2u505_40:
 13274  002CA0  EC26  F019         	call	i2_Lcd_Write_Char
 13275  002CA4  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 13276  002CA6  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 13277  002CA8                     i2l4666:
 13278  002CA8  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 13279  002CAC  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 13280  002CB0  5009               	movf	i2Lcd_Write_String@i,w,c
 13281  002CB2  2607               	addwf	??i2_Lcd_Write_String,f,c
 13282  002CB4  500A               	movf	i2Lcd_Write_String@i+1,w,c
 13283  002CB6  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 13284  002CB8  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 13285  002CBC  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 13286  002CC0  6AF8               	clrf	tblptru,c
 13287  002CC2  0E07               	movlw	(high __ramtop+-1)
 13288  002CC4  64F7               	cpfsgt	tblptrh,c
 13289  002CC6  D003               	bra	i2u506_47
 13290  002CC8  0008               	tblrd		*
 13291  002CCA  50F5               	movf	tablat,w,c
 13292  002CCC  D005               	bra	i2u506_40
 13293  002CCE                     i2u506_47:
 13294  002CCE  CFF6 FFE9          	movff	tblptrl,fsr0l
 13295  002CD2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13296  002CD6  50EF               	movf	indf0,w,c
 13297  002CD8                     i2u506_40:
 13298  002CD8  0900               	iorlw	0
 13299  002CDA  B4D8               	btfsc	status,2,c
 13300  002CDC  0012               	return	
 13301  002CDE  D7C8               	goto	i2l4662
 13302  002CE0                     __end_ofi2_Lcd_Write_String:
 13303                           	opt stack 0
 13304                           pclatu	equ	0xFFB
 13305                           pclath	equ	0xFFA
 13306                           tblptru	equ	0xFF8
 13307                           tblptrh	equ	0xFF7
 13308                           tblptrl	equ	0xFF6
 13309                           tablat	equ	0xFF5
 13310                           prodh	equ	0xFF4
 13311                           prodl	equ	0xFF3
 13312                           intcon	equ	0xFF2
 13313                           intcon2	equ	0xFF1
 13314                           intcon3	equ	0xFF0
 13315                           indf0	equ	0xFEF
 13316                           postinc0	equ	0xFEE
 13317                           fsr0h	equ	0xFEA
 13318                           fsr0l	equ	0xFE9
 13319                           wreg	equ	0xFE8
 13320                           postinc1	equ	0xFE6
 13321                           postdec1	equ	0xFE5
 13322                           fsr1h	equ	0xFE2
 13323                           fsr1l	equ	0xFE1
 13324                           indf2	equ	0xFDF
 13325                           postinc2	equ	0xFDE
 13326                           postdec2	equ	0xFDD
 13327                           fsr2h	equ	0xFDA
 13328                           fsr2l	equ	0xFD9
 13329                           status	equ	0xFD8
 13330                           
 13331 ;; *************** function i2_Lcd_Write_Char *****************
 13332 ;; Defined at:
 13333 ;;		line 75 in file "lcd.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  a               1    wreg     unsigned char 
 13336 ;; Auto vars:     Size  Location     Type
 13337 ;;  a               1    3[COMRAM] unsigned char 
 13338 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 13339 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 13340 ;; Return value:  Size  Location     Type
 13341 ;;		None               void
 13342 ;; Registers used:
 13343 ;;		wreg, status,2, status,0, cstack
 13344 ;; Tracked objects:
 13345 ;;		On entry : 0/0
 13346 ;;		On exit  : 0/0
 13347 ;;		Unchanged: 0/0
 13348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13349 ;;      Params:         0       0       0       0       0       0       0       0       0
 13350 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13351 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13352 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13353 ;;Total ram usage:        3 bytes
 13354 ;; Hardware stack levels used:    1
 13355 ;; Hardware stack levels required when called:    1
 13356 ;; This function calls:
 13357 ;;		i2_Lcd_Port
 13358 ;; This function is called by:
 13359 ;;		i2_Lcd_Write_String
 13360 ;; This function uses a non-reentrant model
 13361 ;;
 13362                           
 13363                           	psect	text62
 13364  00324C                     __ptext62:
 13365                           	opt stack 0
 13366  00324C                     i2_Lcd_Write_Char:
 13367                           	opt stack 21
 13368                           
 13369                           ;incstack = 0
 13370                           ;i2Lcd_Write_Char@a stored from wreg
 13371  00324C  6E04               	movwf	i2Lcd_Write_Char@a,c
 13372                           
 13373                           ;lcd.c: 76: char temp, y;
 13374                           ;lcd.c: 77: temp = a & 0x0F;
 13375  00324E  5004               	movf	i2Lcd_Write_Char@a,w,c
 13376  003250  0B0F               	andlw	15
 13377  003252  6E02               	movwf	i2Lcd_Write_Char@temp,c
 13378                           
 13379                           ;lcd.c: 78: y = a & 0xF0;
 13380  003254  5004               	movf	i2Lcd_Write_Char@a,w,c
 13381  003256  0BF0               	andlw	240
 13382  003258  6E03               	movwf	i2Lcd_Write_Char@y,c
 13383                           
 13384                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 13385  00325A  8084               	bsf	3972,0,c	;volatile
 13386                           
 13387                           ;lcd.c: 80: Lcd_Port(y >> 4);
 13388  00325C  3803               	swapf	i2Lcd_Write_Char@y,w,c
 13389  00325E  0B0F               	andlw	15
 13390  003260  ECAA  F019         	call	i2_Lcd_Port
 13391                           
 13392                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 13393  003264  8484               	bsf	3972,2,c	;volatile
 13394                           
 13395                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13396  003266  0E0D               	movlw	13
 13397  003268                     i2u533_47:
 13398  003268  2EE8               	decfsz	wreg,f,c
 13399  00326A  D7FE               	goto	i2u533_47
 13400  00326C  F000               	nop	
 13401                           
 13402                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 13403  00326E  9484               	bcf	3972,2,c	;volatile
 13404                           
 13405                           ;lcd.c: 84: Lcd_Port(temp);
 13406  003270  5002               	movf	i2Lcd_Write_Char@temp,w,c
 13407  003272  ECAA  F019         	call	i2_Lcd_Port
 13408                           
 13409                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 13410  003276  8484               	bsf	3972,2,c	;volatile
 13411                           
 13412                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 13413  003278  0E0D               	movlw	13
 13414  00327A                     i2u534_47:
 13415  00327A  2EE8               	decfsz	wreg,f,c
 13416  00327C  D7FE               	goto	i2u534_47
 13417  00327E  F000               	nop	
 13418                           
 13419                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 13420  003280  9484               	bcf	3972,2,c	;volatile
 13421  003282  0012               	return	
 13422  003284                     __end_ofi2_Lcd_Write_Char:
 13423                           	opt stack 0
 13424                           pclatu	equ	0xFFB
 13425                           pclath	equ	0xFFA
 13426                           tblptru	equ	0xFF8
 13427                           tblptrh	equ	0xFF7
 13428                           tblptrl	equ	0xFF6
 13429                           tablat	equ	0xFF5
 13430                           prodh	equ	0xFF4
 13431                           prodl	equ	0xFF3
 13432                           intcon	equ	0xFF2
 13433                           intcon2	equ	0xFF1
 13434                           intcon3	equ	0xFF0
 13435                           indf0	equ	0xFEF
 13436                           postinc0	equ	0xFEE
 13437                           fsr0h	equ	0xFEA
 13438                           fsr0l	equ	0xFE9
 13439                           wreg	equ	0xFE8
 13440                           postinc1	equ	0xFE6
 13441                           postdec1	equ	0xFE5
 13442                           fsr1h	equ	0xFE2
 13443                           fsr1l	equ	0xFE1
 13444                           indf2	equ	0xFDF
 13445                           postinc2	equ	0xFDE
 13446                           postdec2	equ	0xFDD
 13447                           fsr2h	equ	0xFDA
 13448                           fsr2l	equ	0xFD9
 13449                           status	equ	0xFD8
 13450                           
 13451 ;; *************** function i2_Lcd_Set_Cursor *****************
 13452 ;; Defined at:
 13453 ;;		line 40 in file "lcd.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  a               1    wreg     unsigned char 
 13456 ;;  b               1    3[COMRAM] unsigned char 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;  a               1    4[COMRAM] unsigned char 
 13459 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 13460 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 13461 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 13462 ;; Return value:  Size  Location     Type
 13463 ;;		None               void
 13464 ;; Registers used:
 13465 ;;		wreg, status,2, status,0, cstack
 13466 ;; Tracked objects:
 13467 ;;		On entry : 0/0
 13468 ;;		On exit  : 0/0
 13469 ;;		Unchanged: 0/0
 13470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13471 ;;      Params:         1       0       0       0       0       0       0       0       0
 13472 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13473 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13474 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13475 ;;Total ram usage:        5 bytes
 13476 ;; Hardware stack levels used:    1
 13477 ;; Hardware stack levels required when called:    2
 13478 ;; This function calls:
 13479 ;;		i2_Lcd_Cmd
 13480 ;; This function is called by:
 13481 ;;		_TMRO_USART
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           	psect	text63
 13486  002F6A                     __ptext63:
 13487                           	opt stack 0
 13488  002F6A                     i2_Lcd_Set_Cursor:
 13489                           	opt stack 21
 13490                           
 13491                           ;incstack = 0
 13492                           ;i2Lcd_Set_Cursor@a stored from wreg
 13493  002F6A  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 13494                           
 13495                           ;lcd.c: 41: char temp, z, y;
 13496                           ;lcd.c: 42: if (a == 1) {
 13497  002F6C  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 13498  002F6E  A4D8               	btfss	status,2,c
 13499  002F70  D010               	goto	i2l4652
 13500                           
 13501                           ;lcd.c: 43: temp = 0x80 + b - 1;
 13502  002F72  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13503  002F74  0F7F               	addlw	127
 13504  002F76  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13505                           
 13506                           ;lcd.c: 44: z = temp >> 4;
 13507  002F78  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13508  002F7A  0B0F               	andlw	15
 13509  002F7C  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13510                           
 13511                           ;lcd.c: 45: y = temp & 0x0F;
 13512  002F7E  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13513  002F80  0B0F               	andlw	15
 13514  002F82  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13515                           
 13516                           ;lcd.c: 46: Lcd_Cmd(z);
 13517  002F84  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13518  002F86  EC0B  F01A         	call	i2_Lcd_Cmd
 13519                           
 13520                           ;lcd.c: 47: Lcd_Cmd(y);
 13521  002F8A  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13522  002F8C  EC0B  F01A         	call	i2_Lcd_Cmd
 13523                           
 13524                           ;lcd.c: 48: } else if (a == 2) {
 13525  002F90  D013               	goto	i2l273
 13526  002F92                     i2l4652:
 13527  002F92  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 13528  002F94  0A02               	xorlw	2
 13529  002F96  A4D8               	btfss	status,2,c
 13530  002F98  D00F               	goto	i2l273
 13531                           
 13532                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 13533  002F9A  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 13534  002F9C  0FBF               	addlw	191
 13535  002F9E  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 13536                           
 13537                           ;lcd.c: 50: z = temp >> 4;
 13538  002FA0  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 13539  002FA2  0B0F               	andlw	15
 13540  002FA4  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 13541                           
 13542                           ;lcd.c: 51: y = temp & 0x0F;
 13543  002FA6  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 13544  002FA8  0B0F               	andlw	15
 13545  002FAA  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 13546                           
 13547                           ;lcd.c: 52: Lcd_Cmd(z);
 13548  002FAC  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 13549  002FAE  EC0B  F01A         	call	i2_Lcd_Cmd
 13550                           
 13551                           ;lcd.c: 53: Lcd_Cmd(y);
 13552  002FB2  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 13553  002FB4  EC0B  F01A         	call	i2_Lcd_Cmd
 13554  002FB8                     i2l273:
 13555  002FB8  0012               	return	
 13556  002FBA                     __end_ofi2_Lcd_Set_Cursor:
 13557                           	opt stack 0
 13558                           pclatu	equ	0xFFB
 13559                           pclath	equ	0xFFA
 13560                           tblptru	equ	0xFF8
 13561                           tblptrh	equ	0xFF7
 13562                           tblptrl	equ	0xFF6
 13563                           tablat	equ	0xFF5
 13564                           prodh	equ	0xFF4
 13565                           prodl	equ	0xFF3
 13566                           intcon	equ	0xFF2
 13567                           intcon2	equ	0xFF1
 13568                           intcon3	equ	0xFF0
 13569                           indf0	equ	0xFEF
 13570                           postinc0	equ	0xFEE
 13571                           fsr0h	equ	0xFEA
 13572                           fsr0l	equ	0xFE9
 13573                           wreg	equ	0xFE8
 13574                           postinc1	equ	0xFE6
 13575                           postdec1	equ	0xFE5
 13576                           fsr1h	equ	0xFE2
 13577                           fsr1l	equ	0xFE1
 13578                           indf2	equ	0xFDF
 13579                           postinc2	equ	0xFDE
 13580                           postdec2	equ	0xFDD
 13581                           fsr2h	equ	0xFDA
 13582                           fsr2l	equ	0xFD9
 13583                           status	equ	0xFD8
 13584                           
 13585 ;; *************** function i2_Lcd_Clear *****************
 13586 ;; Defined at:
 13587 ;;		line 35 in file "lcd.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;		None
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;		None
 13592 ;; Return value:  Size  Location     Type
 13593 ;;		None               void
 13594 ;; Registers used:
 13595 ;;		wreg, status,2, cstack
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13601 ;;      Params:         0       0       0       0       0       0       0       0       0
 13602 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13603 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13604 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13605 ;;Total ram usage:        0 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    2
 13608 ;; This function calls:
 13609 ;;		i2_Lcd_Cmd
 13610 ;; This function is called by:
 13611 ;;		_TMRO_USART
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           	psect	text64
 13616  0034F0                     __ptext64:
 13617                           	opt stack 0
 13618  0034F0                     i2_Lcd_Clear:
 13619                           	opt stack 21
 13620                           
 13621                           ;lcd.c: 36: Lcd_Cmd(0);
 13622                           
 13623                           ;incstack = 0
 13624  0034F0  0E00               	movlw	0
 13625  0034F2  EC0B  F01A         	call	i2_Lcd_Cmd
 13626                           
 13627                           ;lcd.c: 37: Lcd_Cmd(1);
 13628  0034F6  0E01               	movlw	1
 13629  0034F8  EC0B  F01A         	call	i2_Lcd_Cmd
 13630  0034FC  0012               	return	
 13631  0034FE                     __end_ofi2_Lcd_Clear:
 13632                           	opt stack 0
 13633                           pclatu	equ	0xFFB
 13634                           pclath	equ	0xFFA
 13635                           tblptru	equ	0xFF8
 13636                           tblptrh	equ	0xFF7
 13637                           tblptrl	equ	0xFF6
 13638                           tablat	equ	0xFF5
 13639                           prodh	equ	0xFF4
 13640                           prodl	equ	0xFF3
 13641                           intcon	equ	0xFF2
 13642                           intcon2	equ	0xFF1
 13643                           intcon3	equ	0xFF0
 13644                           indf0	equ	0xFEF
 13645                           postinc0	equ	0xFEE
 13646                           fsr0h	equ	0xFEA
 13647                           fsr0l	equ	0xFE9
 13648                           wreg	equ	0xFE8
 13649                           postinc1	equ	0xFE6
 13650                           postdec1	equ	0xFE5
 13651                           fsr1h	equ	0xFE2
 13652                           fsr1l	equ	0xFE1
 13653                           indf2	equ	0xFDF
 13654                           postinc2	equ	0xFDE
 13655                           postdec2	equ	0xFDD
 13656                           fsr2h	equ	0xFDA
 13657                           fsr2l	equ	0xFD9
 13658                           status	equ	0xFD8
 13659                           
 13660 ;; *************** function i2_Lcd_Cmd *****************
 13661 ;; Defined at:
 13662 ;;		line 27 in file "lcd.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  a               1    wreg     unsigned char 
 13665 ;; Auto vars:     Size  Location     Type
 13666 ;;  a               1    2[COMRAM] unsigned char 
 13667 ;; Return value:  Size  Location     Type
 13668 ;;		None               void
 13669 ;; Registers used:
 13670 ;;		wreg, status,2, cstack
 13671 ;; Tracked objects:
 13672 ;;		On entry : 0/0
 13673 ;;		On exit  : 0/0
 13674 ;;		Unchanged: 0/0
 13675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13676 ;;      Params:         0       0       0       0       0       0       0       0       0
 13677 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13678 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13679 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13680 ;;Total ram usage:        2 bytes
 13681 ;; Hardware stack levels used:    1
 13682 ;; Hardware stack levels required when called:    1
 13683 ;; This function calls:
 13684 ;;		i2_Lcd_Port
 13685 ;; This function is called by:
 13686 ;;		i2_Lcd_Clear
 13687 ;;		i2_Lcd_Set_Cursor
 13688 ;; This function uses a non-reentrant model
 13689 ;;
 13690                           
 13691                           	psect	text65
 13692  003416                     __ptext65:
 13693                           	opt stack 0
 13694  003416                     i2_Lcd_Cmd:
 13695                           	opt stack 21
 13696                           
 13697                           ;incstack = 0
 13698                           ;i2Lcd_Cmd@a stored from wreg
 13699  003416  6E03               	movwf	i2Lcd_Cmd@a,c
 13700                           
 13701                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 13702  003418  9084               	bcf	3972,0,c	;volatile
 13703                           
 13704                           ;lcd.c: 29: Lcd_Port(a);
 13705  00341A  5003               	movf	i2Lcd_Cmd@a,w,c
 13706  00341C  ECAA  F019         	call	i2_Lcd_Port
 13707                           
 13708                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 13709  003420  8484               	bsf	3972,2,c	;volatile
 13710                           
 13711                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 13712  003422  0E06               	movlw	6
 13713  003424  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 13714  003426  0E30               	movlw	48
 13715  003428                     i2u535_47:
 13716  003428  2EE8               	decfsz	wreg,f,c
 13717  00342A  D7FE               	goto	i2u535_47
 13718  00342C  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 13719  00342E  D7FC               	goto	i2u535_47
 13720  003430  D000               	nop2	
 13721                           
 13722                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 13723  003432  9484               	bcf	3972,2,c	;volatile
 13724  003434  0012               	return	
 13725  003436                     __end_ofi2_Lcd_Cmd:
 13726                           	opt stack 0
 13727                           pclatu	equ	0xFFB
 13728                           pclath	equ	0xFFA
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           intcon2	equ	0xFF1
 13737                           intcon3	equ	0xFF0
 13738                           indf0	equ	0xFEF
 13739                           postinc0	equ	0xFEE
 13740                           fsr0h	equ	0xFEA
 13741                           fsr0l	equ	0xFE9
 13742                           wreg	equ	0xFE8
 13743                           postinc1	equ	0xFE6
 13744                           postdec1	equ	0xFE5
 13745                           fsr1h	equ	0xFE2
 13746                           fsr1l	equ	0xFE1
 13747                           indf2	equ	0xFDF
 13748                           postinc2	equ	0xFDE
 13749                           postdec2	equ	0xFDD
 13750                           fsr2h	equ	0xFDA
 13751                           fsr2l	equ	0xFD9
 13752                           status	equ	0xFD8
 13753                           
 13754 ;; *************** function i2_Lcd_Port *****************
 13755 ;; Defined at:
 13756 ;;		line 6 in file "lcd.c"
 13757 ;; Parameters:    Size  Location     Type
 13758 ;;  a               1    wreg     unsigned char 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  a               1    0[COMRAM] unsigned char 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;		None               void
 13763 ;; Registers used:
 13764 ;;		wreg
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13770 ;;      Params:         0       0       0       0       0       0       0       0       0
 13771 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13772 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13773 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13774 ;;Total ram usage:        1 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; This function calls:
 13777 ;;		Nothing
 13778 ;; This function is called by:
 13779 ;;		i2_Lcd_Cmd
 13780 ;;		i2_Lcd_Write_Char
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           	psect	text66
 13785  003354                     __ptext66:
 13786                           	opt stack 0
 13787  003354                     i2_Lcd_Port:
 13788                           	opt stack 21
 13789                           
 13790                           ;incstack = 0
 13791                           ;i2Lcd_Port@a stored from wreg
 13792  003354  6E01               	movwf	i2Lcd_Port@a,c
 13793                           
 13794                           ;lcd.c: 7: if (a & 1)
 13795  003356  A001               	btfss	i2Lcd_Port@a,0,c
 13796  003358  D002               	goto	i2l253
 13797                           
 13798                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 13799  00335A  8883               	bsf	3971,4,c	;volatile
 13800  00335C  D001               	goto	i2l4006
 13801  00335E                     i2l253:
 13802                           
 13803                           ;lcd.c: 9: else
 13804                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 13805  00335E  9883               	bcf	3971,4,c	;volatile
 13806  003360                     i2l4006:
 13807                           
 13808                           ;lcd.c: 12: if (a & 2)
 13809  003360  A201               	btfss	i2Lcd_Port@a,1,c
 13810  003362  D002               	goto	i2l255
 13811                           
 13812                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 13813  003364  8A83               	bsf	3971,5,c	;volatile
 13814  003366  D001               	goto	i2l4010
 13815  003368                     i2l255:
 13816                           
 13817                           ;lcd.c: 14: else
 13818                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 13819  003368  9A83               	bcf	3971,5,c	;volatile
 13820  00336A                     i2l4010:
 13821                           
 13822                           ;lcd.c: 17: if (a & 4)
 13823  00336A  A401               	btfss	i2Lcd_Port@a,2,c
 13824  00336C  D002               	goto	i2l257
 13825                           
 13826                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 13827  00336E  8C83               	bsf	3971,6,c	;volatile
 13828  003370  D001               	goto	i2l4014
 13829  003372                     i2l257:
 13830                           
 13831                           ;lcd.c: 19: else
 13832                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 13833  003372  9C83               	bcf	3971,6,c	;volatile
 13834  003374                     i2l4014:
 13835                           
 13836                           ;lcd.c: 22: if (a & 8)
 13837  003374  A601               	btfss	i2Lcd_Port@a,3,c
 13838  003376  D002               	goto	i2l259
 13839                           
 13840                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 13841  003378  8E83               	bsf	3971,7,c	;volatile
 13842  00337A  D001               	goto	i2l261
 13843  00337C                     i2l259:
 13844                           
 13845                           ;lcd.c: 24: else
 13846                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 13847  00337C  9E83               	bcf	3971,7,c	;volatile
 13848  00337E                     i2l261:
 13849  00337E  0012               	return	
 13850  003380                     __end_ofi2_Lcd_Port:
 13851                           	opt stack 0
 13852                           pclatu	equ	0xFFB
 13853                           pclath	equ	0xFFA
 13854                           tblptru	equ	0xFF8
 13855                           tblptrh	equ	0xFF7
 13856                           tblptrl	equ	0xFF6
 13857                           tablat	equ	0xFF5
 13858                           prodh	equ	0xFF4
 13859                           prodl	equ	0xFF3
 13860                           intcon	equ	0xFF2
 13861                           intcon2	equ	0xFF1
 13862                           intcon3	equ	0xFF0
 13863                           indf0	equ	0xFEF
 13864                           postinc0	equ	0xFEE
 13865                           fsr0h	equ	0xFEA
 13866                           fsr0l	equ	0xFE9
 13867                           wreg	equ	0xFE8
 13868                           postinc1	equ	0xFE6
 13869                           postdec1	equ	0xFE5
 13870                           fsr1h	equ	0xFE2
 13871                           fsr1l	equ	0xFE1
 13872                           indf2	equ	0xFDF
 13873                           postinc2	equ	0xFDE
 13874                           postdec2	equ	0xFDD
 13875                           fsr2h	equ	0xFDA
 13876                           fsr2l	equ	0xFD9
 13877                           status	equ	0xFD8
 13878                           
 13879 ;; *************** function _ReadUSART *****************
 13880 ;; Defined at:
 13881 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 13882 ;; Parameters:    Size  Location     Type
 13883 ;;		None
 13884 ;; Auto vars:     Size  Location     Type
 13885 ;;  data            1    0[COMRAM] unsigned char 
 13886 ;; Return value:  Size  Location     Type
 13887 ;;                  1    wreg      unsigned char 
 13888 ;; Registers used:
 13889 ;;		wreg, status,2, status,0
 13890 ;; Tracked objects:
 13891 ;;		On entry : 0/0
 13892 ;;		On exit  : 0/0
 13893 ;;		Unchanged: 0/0
 13894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13895 ;;      Params:         0       0       0       0       0       0       0       0       0
 13896 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13898 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13899 ;;Total ram usage:        1 bytes
 13900 ;; Hardware stack levels used:    1
 13901 ;; This function calls:
 13902 ;;		Nothing
 13903 ;; This function is called by:
 13904 ;;		_TMRO_USART
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           	psect	text67
 13909  003436                     __ptext67:
 13910                           	opt stack 0
 13911  003436                     _ReadUSART:
 13912                           	opt stack 23
 13913                           
 13914                           ;incstack = 0
 13915  003436  0EF2               	movlw	242
 13916  003438  1654               	andwf	_USART_Status,f,c
 13917  00343A  ACAB               	btfss	4011,6,c	;volatile
 13918  00343C  D003               	goto	i2l641
 13919  00343E  9054               	bcf	_USART_Status,0,c
 13920  003440  B0AB               	btfsc	4011,0,c	;volatile
 13921  003442  8054               	bsf	_USART_Status,0,c
 13922  003444                     i2l641:
 13923  003444  B4AB               	btfsc	4011,2,c	;volatile
 13924  003446  8454               	bsf	_USART_Status,2,c
 13925  003448  B2AB               	btfsc	4011,1,c	;volatile
 13926  00344A  8654               	bsf	_USART_Status,3,c
 13927  00344C  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 13928  003450  5001               	movf	ReadUSART@data,w,c
 13929  003452  0012               	return	
 13930  003454                     __end_of_ReadUSART:
 13931                           	opt stack 0
 13932                           pclatu	equ	0xFFB
 13933                           pclath	equ	0xFFA
 13934                           tblptru	equ	0xFF8
 13935                           tblptrh	equ	0xFF7
 13936                           tblptrl	equ	0xFF6
 13937                           tablat	equ	0xFF5
 13938                           prodh	equ	0xFF4
 13939                           prodl	equ	0xFF3
 13940                           intcon	equ	0xFF2
 13941                           intcon2	equ	0xFF1
 13942                           intcon3	equ	0xFF0
 13943                           indf0	equ	0xFEF
 13944                           postinc0	equ	0xFEE
 13945                           fsr0h	equ	0xFEA
 13946                           fsr0l	equ	0xFE9
 13947                           wreg	equ	0xFE8
 13948                           postinc1	equ	0xFE6
 13949                           postdec1	equ	0xFE5
 13950                           fsr1h	equ	0xFE2
 13951                           fsr1l	equ	0xFE1
 13952                           indf2	equ	0xFDF
 13953                           postinc2	equ	0xFDE
 13954                           postdec2	equ	0xFDD
 13955                           fsr2h	equ	0xFDA
 13956                           fsr2l	equ	0xFD9
 13957                           status	equ	0xFD8
 13958                           pclatu	equ	0xFFB
 13959                           pclath	equ	0xFFA
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           intcon2	equ	0xFF1
 13968                           intcon3	equ	0xFF0
 13969                           indf0	equ	0xFEF
 13970                           postinc0	equ	0xFEE
 13971                           fsr0h	equ	0xFEA
 13972                           fsr0l	equ	0xFE9
 13973                           wreg	equ	0xFE8
 13974                           postinc1	equ	0xFE6
 13975                           postdec1	equ	0xFE5
 13976                           fsr1h	equ	0xFE2
 13977                           fsr1l	equ	0xFE1
 13978                           indf2	equ	0xFDF
 13979                           postinc2	equ	0xFDE
 13980                           postdec2	equ	0xFDD
 13981                           fsr2h	equ	0xFDA
 13982                           fsr2l	equ	0xFD9
 13983                           status	equ	0xFD8
 13984                           
 13985                           	psect	rparam
 13986  0000                     pclatu	equ	0xFFB
 13987                           pclath	equ	0xFFA
 13988                           tblptru	equ	0xFF8
 13989                           tblptrh	equ	0xFF7
 13990                           tblptrl	equ	0xFF6
 13991                           tablat	equ	0xFF5
 13992                           prodh	equ	0xFF4
 13993                           prodl	equ	0xFF3
 13994                           intcon	equ	0xFF2
 13995                           intcon2	equ	0xFF1
 13996                           intcon3	equ	0xFF0
 13997                           indf0	equ	0xFEF
 13998                           postinc0	equ	0xFEE
 13999                           fsr0h	equ	0xFEA
 14000                           fsr0l	equ	0xFE9
 14001                           wreg	equ	0xFE8
 14002                           postinc1	equ	0xFE6
 14003                           postdec1	equ	0xFE5
 14004                           fsr1h	equ	0xFE2
 14005                           fsr1l	equ	0xFE1
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8


Data Sizes:
    Strings     219
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      95
    BANK0           160    137     143
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1723$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_23(CODE[11]), STR_22(CODE[7]), STR_21(CODE[18]), STR_20(CODE[17]), 
		 -> STR_19(CODE[17]), Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), 
		 -> STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK1[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_PWM_DutyCycle1
    _TMRO_USART->i2_PWM_DutyCycle2
    i2_PWM_DutyCycle2->i2___fttol
    i2_PWM_DutyCycle1->i2___fttol
    i2___lbtoft->i2___ftpack
    i2___fttol->i2___ftmul
    i2___ftmul->i2___lbtoft
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Comando_Tablet
    _Lcd_Init->_Lcd_Cmd
    _Inicializa_Driveby->_BT_Init
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothString->_UART1_Init
    _putcBluetoothInt->_sprintf
    _UART1_Init->_OpenUSART
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    ___lbtoft->___ftpack
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  113549
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    4627
                                             32 BANK0      3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _PWM_init1
                          _PWM_init2
                          _Pause_seg
                     _clrBufferUSART
            _external_interrupt_init
 ---------------------------------------------------------------------------------
 (2) _external_interrupt_init                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                              3 BANK0      1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                              1 BANK0      1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    1720
                                             14 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1039
                                             10 BANK0      4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     355
                                              2 BANK0      8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      44
                                              1 BANK0      1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     350
                                              5 BANK0      2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     303
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  106020
                                            135 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     482
                                              7 BANK0      6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   43823
                                            111 BANK0     24    22      2
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     306
                                              6 BANK0      1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     284
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7346
                                             57 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2070
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     133
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   44579
                                            111 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   43275
                                             63 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10248
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10050
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2207
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4524
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     574
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2181
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     572
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3521
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3246
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1022
                                              4 BANK0      6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1198
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    4189
                                             51 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
                   i2_PWM_DutyCycle1
                   i2_PWM_DutyCycle2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle2                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM2
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM2                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_PWM_DutyCycle1                                     9     9      0    1626
                                             42 COMRAM     9     9      0
                        i2_SetDCPWM1
                          i2___ftmul
                          i2___fttol
                         i2___lbtoft
 ---------------------------------------------------------------------------------
 (9) i2___lbtoft                                           4     1      3     387
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     304
                                             27 COMRAM    15    11      4
                          i2___ftmul (ARG)
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     795
                                             12 COMRAM    15     9      6
                         i2___ftpack
                         i2___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     365
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2_SetDCPWM1                                          6     4      2      93
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     346
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     458
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
     _external_interrupt_init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port
   i2_PWM_DutyCycle1
     i2_SetDCPWM1
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack
   i2_PWM_DutyCycle2
     i2_SetDCPWM2
     i2___ftmul
       i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___fttol
       i2___ftmul (ARG)
         i2___ftpack
         i2___lbtoft (ARG)
           i2___ftpack
       i2___lbtoft (ARG)
         i2___ftpack
     i2___lbtoft
       i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     89      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16E      20        0.0%
DATA                 0      0     16E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Sep 12 14:11:38 2017

                               _i 0048                                 _j 0058  
         __size_of_PWM_DutyCycle1 007C           __size_of_PWM_DutyCycle2 007C  
                              l54 315C                                l59 29A4  
                              l68 2A40                     _InicioComando 0050  
                    ___awdiv@sign 006B               ___wmul@multiplicand 0070  
                     __CFG_BORV$3 000000                        i2___ftpack 277E  
                      i2___lbtoft 33F2                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      ___ftadd@exp1 0098  
                    ___ftadd@exp2 0097                      ___ftadd@sign 0096  
       __size_ofi2_Lcd_Write_Char 0038                               l208 307A  
                             l261 32EE                               l253 32C8  
                             l229 34DC                               l255 32D4  
                             l257 32E0                               l273 2DCC  
                             l194 19F6                               l259 32EC  
                             l451 24C0                               l195 1A42  
                             l461 2524                               l453 24D0  
                             l446 2496                               l630 2AC6  
                             l455 24E0                               l447 254A  
                             l623 2A9C                               l536 05C4  
                             l632 2AEE                               l457 24FA  
                             l449 24A6                               l459 250A  
                             l627 2AB6                               l628 2AB8  
                             l629 2AC4                               l590 310E  
                             l591 3110                               l489 0F14  
                             l941 1686                               l589 3102  
                             l950 1676                               l982 1E84  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                      __CFG_BOR$OFF 000000  
                             _cad 0055                      ___awmod@sign 0065  
                             prod 000FF3                               wreg 000FE8  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                            l1020 14A8                              l1023 12D0  
                            l1103 1D7A                              l1025 12F8  
                            l1034 13E2                              l1043 140C  
                            l1019 1296                              l1061 1732  
                            l1142 21FE                              l1062 177E  
                            l1152 28B8                              l1059 181C  
                            l1083 1980                              l3100 1E3A  
                            l1068 180C                              l1077 22E2  
                            l1093 3346                              l3102 1E4E  
                            l3112 1E78                              l3130 32E2  
                            l3122 32CA                              l3106 1E5E  
                            l3126 32D6                              l3206 1484  
                            l3310 257A                              l3222 1880  
                            l4102 29AE                              l3160 12EE  
                            l3320 25BA                              l3240 18EC  
                            l3216 1846                              l3080 34A6  
                            l4120 2A4A                              l3090 1DA8  
                            l3170 1330                              l3154 12DE  
                            l3322 25C0                              l3330 25F2  
                            l3314 259C                              l3250 1936  
                            l4140 2D94                              l3092 1DBC  
                            l3180 1384                              l3148 12A4  
                            l3500 16B0                              l3236 18CE  
                            l4116 2A26                              l3340 261E  
                            l3094 1DE8                              l3086 1D94  
                            l3190 13D8                              l3182 1390  
                            l3334 2606                              l3326 25E4  
                            l3318 25AE                              l3246 1918  
                            l3350 268E                              l3176 1364  
                            l3280 20DA                              l3272 20B0  
                            l4304 253E                              l3360 3064  
                            l3098 1E0E                              l3178 1378  
                            l3602 1658                              l3506 16D8  
                            l3290 2110                              l3282 20E0  
                            l3266 2088                              l3346 2668  
                            l3620 229C                              l3196 1436  
                            l3188 13C4                              l3604 1670  
                            l3452 11D6                              l3444 10CA  
                            l3356 26C0                              l3710 285A  
                            l3534 17B0                              l3278 20CE  
                            l3294 211E                              l3382 2A9E  
                            l3374 2A8C                              l4502 1F00  
                            l3616 2256                              l3640 1C5A  
                            l3720 2AF8                              l3560 1522  
                            l3544 17EE                              l3472 0C38  
                            l3800 028E                              l3626 22E0  
                            l3714 289E                              l3706 283C  
                            l3722 2B10                              l3554 14E6  
                            l3546 1806                              l3538 17CC  
                            l3298 2132                              l3490 0EE4  
                            l3466 0B46                              l4098 2976  
                            l3708 2854                              l3484 0DE6  
                            l3476 0C48                              l3812 033C  
                            l3804 02D4                              l3732 2F18  
                            l3670 1D3E                              l3662 1D04  
                            l3582 15E4                              l3574 1588  
                            l3750 0052                              l4542 1990  
                            l3672 1D44                              l3592 161A  
                            l3904 077A                              l3832 0442  
                            l3816 0368                              l3752 0060  
                            l3744 0030                              l3736 2F5C  
                            l3658 1CE8                              l3690 2188  
                            l3930 0852                              l3906 0786  
                            l4554 19D4                              l3676 1D6A  
                            l3668 1D26                              l3596 1636  
                            l3916 0800                              l3852 04BE  
                            l3860 056C                              l3828 03DA  
                            l3772 011C                              l3756 0066  
                            l4548 19B2                              l4812 2720  
                            l3686 216A                              l3862 057A  
                            l3846 0494                              l3758 00A2  
                            l4806 270E                              l3688 2182  
                            l3944 0954                              l3936 0882  
                            l4584 1A92                              l4592 1AB4  
                            l4832 2764                              l3954 28D8  
                            l3698 21E4                              l3938 0896  
                            l3882 05F6                              l3874 05C8  
                            l3946 0968                              l4594 1AD8  
                            l3868 0594                              l3796 0262  
                            l3788 01F4                              l3948 098C  
                            l3958 291E                              l3886 0648  
                            l3990 30FC                              l3896 0752  
                            l3898 0760                              STR_1 7FBB  
                            STR_2 7F67                              STR_3 7FDD  
                            STR_4 7FDD                              STR_5 7FB8  
                            STR_6 7F76                              STR_7 7F84  
                            STR_8 7FA0                              STR_9 7F92  
                i2_PWM_DutyCycle1 2E38                  i2_PWM_DutyCycle2 2DCE  
                 __end_of_BT_Init 2486                              u3140 265C  
                            u3170 26B2                              u3147 2652  
                            u4060 2914                              u4125 2FC8  
                            u4070 295A                              _PIE1 000F9D  
                            u3440 17D4                              u3177 26A8  
                            u4241 23CE                              u3610 1C86  
                            u3530 163E                              u4067 290A  
                            u3371 16A0                              u3460 14D2  
                            u4077 2950                              u2751 1242  
                            u3615 1C7C                              u3391 16C8  
                            u4095 3010                              u3640 1D0C  
                            u3480 150E                              u2761 1262  
                            u3465 14C6                              u5307 30B8  
                            u4620 24F0                              u5317 30CC  
                            u3485 1502                              u5327 33E4  
                            u3591 1C4A                              u5247 2CEE  
                            u4720 251A                              u2961 1836  
                            u5257 2D06                              u5267 2D1E  
                            u2981 185E                              u5277 1EAE  
                            u2990 186C                              u3790 016C  
                            u3775 00F6                              u5287 1EEE  
                            u5297 306C                              u4770 2534  
                            u3795 0160                              u3995 07D8  
                            _TMR2 000FCC                 ?_Lcd_Write_String 0064  
                            _main 26CE                      ___ftpack@arg 0060  
                    ___ftpack@exp 0063                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                ??_Lcd_Write_String 0066  
                   __CFG_IESO$OFF 000000                        _FinComandB 00EB  
                      _FinComandT 00EC                      _sprintf$1736 00AF  
                 __end_of_Lcd_Cmd 33F2                      _sprintf$2761 00AC  
                    i2___lbtoft@c 000C                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0081                      i2___ftmul@f1 000D  
                    i2___ftmul@f2 0010                      ___ftmul@sign 0082  
                    i2___fttol@f1 001C                       ?_UART1_Init 0001  
                    ___fttol@exp1 0098                      ___fttol@lval 0094  
                      _ComanBFlag 004B           __size_of_clrBufferUSART 0044  
                   __CFG_PLLDIV$1 000000                        _ComanTFlag 004C  
               _Lcd_Write_Integer 315E                    __CFG_CCP2MX$ON 000000  
                           ?_main 0001                   __end_of___awdiv 213C  
                 __end_of___ftadd 14AA                             STR_10 7FF5  
                           STR_11 7F57                             STR_12 7F55  
                           STR_20 7F46                             STR_13 7F33  
                           STR_21 7F23                             STR_14 7FFC  
                           STR_22 7FEE                             STR_15 7F74  
                           STR_23 7FC7                             STR_16 7FE6  
                           STR_17 7FD2                             STR_18 7FAE  
                           STR_19 7F35                   __end_of___awmod 2610  
                 __end_of___ftneg 3354                   __end_of___lldiv 2210  
                 __end_of___ftmul 1982                   ___awdiv@divisor 0068  
                 __end_of___llmod 28CA                   __end_of___ftsub 31D8  
                 __end_of___fttol 1D7C                             _T2CON 000FCA  
                     _RXComandoTB 0051                    __CFG_DEBUG$OFF 000000  
              ?_Lcd_Write_Integer 00CF                             i2l261 337E  
                           i2l253 335E                             i2l255 3368  
                           i2l257 3372                             i2l273 2FB8  
                           i2l259 337C                             i2l380 1B78  
                           i2l390 1BD0                             i2l641 3444  
                           i2l388 1BA4                   ___awdiv@counter 006A  
                           i2l982 2824                             _RCREG 000FAE  
                           _RCSTA 000FAB                             _SPBRG 000FAF  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTE 000F84                     __CFG_USBDIV$2 000000  
         __size_of_Lcd_Set_Cursor 0076                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
         PWM_DutyCycle1@DutyCycle 009D                     __CFG_WRT3$OFF 000000  
                    ___lltoft@exp 0070                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                __size_ofi2_Lcd_Cmd 0020  
                  __CFG_EBTRB$OFF 000000                       ?i2_Lcd_Port 0001  
                 __end_of_dpowers 7ED5                             _array 0114  
             ??_Lcd_Write_Integer 00D1                             _scale 099A  
                   ___ftpack@sign 0064                             tablat 000FF5  
         PWM_DutyCycle2@DutyCycle 009D                             status 000FD8  
                 __end_of_sprintf 099A                    __CFG_ICPRT$OFF 000000  
                      Pause_seg@i 0066                        Pause_seg@x 0065  
              __size_ofi2___ftmul 00E4                __size_ofi2___fttol 00D4  
                i2_Lcd_Set_Cursor 2F6A                       ?_TMRO_USART 0001  
                __end_of_Lcd_Init 2D58                    WriteUSART@data 0060  
                __end_of_Lcd_Port 32F0                __size_of_PWM_init1 0026  
              __size_of_PWM_init2 0026                   __initialization 2EA2  
                    __end_of_main 277E                     i2___ftmul@exp 0016  
       __end_of_Lcd_Write_Integer 319C       __size_of_Inicializa_Driveby 00F0  
                     ?i2___ftpack 0001                       ?i2___lbtoft 0009  
               ?_putcBluetoothInt 00CF                  __end_of_OpenPWM1 3498  
                __end_of_OpenPWM2 311A                            ??_main 00E9  
                   ___fttol@sign1 0093                  __end_of_Pause_ms 3090  
              __size_of_Lcd_Clear 000E                     __activetblptr 000003  
              ??_putcBluetoothInt 00D1              __size_of__tdiv_to_l_ 0196  
              i2PWM_DutyCycle1@DC 0032                i2PWM_DutyCycle2@DC 0032  
                       ??_BT_Init 006E                  ___llmod@dividend 006D  
                          ?_scale 0083                            _CCPR1L 000FBE  
                          _CCPR2L 000FBB                  ___awdiv@dividend 0066  
                 putSTRINGU1@dato 0062                   putSTRINGU1@cont 0069  
                __end_of___ftpack 1E86                  __end_of___lbtoft 3322  
                 putSTRINGU1@last 0068                   clrBufferUSART@i 0060  
             __size_of_UART1_Init 0016                  __end_of___lltoft 2B6E  
                          i2l1103 23B6                            i2l1083 2058  
                          i2l4010 336A                            i2l4014 3374  
                          i2l4006 3360                            i2l4030 27C4  
                          i2l4022 278E                            i2l4034 27DA  
                          i2l4026 279C                            i2l4036 27F8  
                          i2l4028 27A6                            i2l4038 2802  
                          i2l4402 2010                            i2l4420 22FE  
                          i2l4406 2020                            i2l4450 238C  
                          i2l4442 2368                            i2l4372 1F90  
                          i2l4452 2390                            i2l4438 2358  
                          i2l4392 1FE8                            i2l4456 23A6  
                          i2l4448 2380                            i2l4378 1FB6  
                          i2l4652 2F92                            i2l4396 1FF8  
                          i2l4662 2C70                            i2l4744 1B58  
                          _INTCON 000FF2                            i2l4666 2CA8  
                          i2l4780 1BF0                            i2l4748 1B6E  
              __size_of_ReadUSART 001E              i2SetDCPWM1@dutycycle 0001  
                          u480_41 1F86                            u482_41 1FA0  
             _putcBluetoothString 2962                            u486_41 22F4  
                       ??_Lcd_Cmd 0061                            _SPBRGH 000FB0  
              __size_of_SetDCPWM1 0048                __size_of_SetDCPWM2 0048  
         __size_of_Lcd_Write_Char 0046                    __CFG_XINST$OFF 000000  
            i2SetDCPWM2@dutycycle 0001                  __end_of__powers_ 7F23  
                          _Timer1 0053                __size_of_OpenUSART 0080  
   __size_of_SendBlueToothCommand 001A                      ?i2_Lcd_Clear 0001  
                          ___ftge 2210                __size_of_Pause_seg 0064  
               __end_ofi2_Lcd_Cmd 3436                            ___wmul 3284  
                    ?_putSTRINGU1 0062                         ??___awdiv 006A  
                       ??___ftadd 0093                    _PWM_DutyCycle1 2BEA  
                  _PWM_DutyCycle2 2B6E                    __CFG_STVREN$ON 000000  
                       ??___awmod 0064                         ??___ftneg 0063  
                       ??___lldiv 0068                         ??___ftmul 007A  
                       ??___llmod 0075                         ??___ftsub 009F  
                       ??___fttol 008E               __size_ofi2_Lcd_Port 002C  
             i2Lcd_Write_String@a 0005               i2Lcd_Write_String@i 0009  
        ?_external_interrupt_init 0001                            _packet 005D  
                          _lenght 0059                            _fround 0F16  
                          clear_0 2EA8                            clear_1 2EC2  
                ___awdiv@quotient 006C              ?_putcBluetoothString 0067  
                  sprintf@vd_1738 00B7                   ___awmod@divisor 0062  
                 ___awmod@counter 0064                  i2_Lcd_Write_Char 324C  
           ___ftmul@f3_as_product 007E                      __pdataCOMRAM 005E  
               __end_ofi2___ftmul 205A                 __end_ofi2___fttol 23B8  
                    __mediumconst 7EAC                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
             __size_of_TMRO_USART 1C2A                      ?i2_SetDCPWM1 0001  
                    ?i2_SetDCPWM2 0001                 __end_of_PWM_init1 33CC  
               __end_of_PWM_init2 33A6                  __end_of_putcTxU1 34E2  
                       ??_sprintf 00A6           __size_of_Comando_Tablet 015C  
               i2SetDCPWM1@DCycle 0005                   Lcd_Set_Cursor@a 0064  
                 Lcd_Set_Cursor@b 0063                   Lcd_Set_Cursor@y 0066  
                 Lcd_Set_Cursor@z 0065                 i2SetDCPWM2@DCycle 0005  
                      __accesstop 0060           __end_of__initialization 2F00  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 008D  
                      ___ftadd@f2 0090               __size_ofi2___ftpack 00A8  
             __size_ofi2___lbtoft 0024                        ___ftge@ff1 0060  
                      ___ftge@ff2 0063      PWM_DutyCycle2@percentageDuty 009F  
               __end_of_Lcd_Clear 34F0                        ___ftneg@f1 0060  
                  i2___ftpack@arg 0001                    i2___ftpack@exp 0004  
                      ___lbtoft@c 006B            __end_of_PWM_DutyCycle1 2C66  
          __end_of_PWM_DutyCycle2 2BEA                        ___ftmul@f1 0074  
                      ___ftmul@f2 0077                        ___ftsub@f1 0099  
                      ___ftsub@f2 009C                        ___fttol@f1 008A  
                      _WriteUSART 3498                    __pcstackCOMRAM 0001  
                    __pidataBANK1 34AC        __size_of_Lcd_Write_Integer 003E  
                      ___lltoft@c 0068                    _clrBufferUSART 311A  
                  i2___ftmul@cntr 001A                     __end_of_scale 0F16  
                  i2___ftmul@sign 001B          __end_ofi2_PWM_DutyCycle1 2EA2  
        __end_ofi2_PWM_DutyCycle2 2E38             ??_putcBluetoothString 0069  
     __size_ofi2_Lcd_Write_String 007A                 __end_of_ReadUSART 3454  
                  i2___fttol@exp1 002A                    i2___fttol@lval 0026  
               __end_of_SetDCPWM1 304A                 __end_of_SetDCPWM2 3002  
               i2Lcd_Write_Char@a 0004                 i2Lcd_Write_Char@y 0003  
                  _Lcd_Set_Cursor 2D58                        __div_to_l_ 14AA  
                       ?_Lcd_Init 0001                     ReadUSART@data 0001  
            putcBluetoothString@a 0067              putcBluetoothString@i 006B  
                       ?_Lcd_Port 0001                 __end_of_OpenUSART 2AF0  
                   UART1_Init@bdr 0066                   __div_to_l_@exp1 006F  
                 __div_to_l_@cntr 006E                      sprintf@integ 00BF  
               __end_of_Pause_seg 2F6A                           ??_scale 0086  
                 __div_to_l_@quot 006A              i2Lcd_Write_Char@temp 0002  
                      __pbssBANK0 00E9                        __pbssBANK1 0100  
                       ?_OpenPWM1 0001                         ?_OpenPWM2 0001  
                   __div_to_l_@f1 0060                     __div_to_l_@f2 0063  
                       ?_Pause_ms 0060            __end_of_clrBufferUSART 315E  
                 ?_PWM_DutyCycle1 0001                   ?_PWM_DutyCycle2 0001  
                         ?___ftge 0060                      ??_UART1_Init 0066  
                         ?___wmul 006E               Inicializa_Driveby@i 0081  
          __size_of_getCNY70Value 00C6                           _CCP1CON 000FBD  
                         _CCP2CON 000FBA              i2Lcd_Set_Cursor@temp 0008  
     SendBlueToothCommand@command 006A                           ?_fround 0083  
       __size_of_Lcd_Write_String 0098                         ?___ftpack 0060  
                       ?___lbtoft 0068            __end_of_Lcd_Set_Cursor 2DCE  
                       ?___lltoft 0068                  putSTRINGU1@total 0064  
        __end_ofi2_Lcd_Set_Cursor 2FBA                           _BT_Init 23B8  
                         _SBUSART 0052                        ??_Lcd_Init 0063  
                    ??i2_Lcd_Port 0001                        ??_Lcd_Port 0060  
              __end_of_UART1_Init 3484                   __CFG_VREGEN$OFF 000000  
                  _Lcd_Write_Char 3090                           _Lcd_Cmd 33CC  
                         _Comando 004D                           _Med_lsb 0042  
                         _Med_msb 0044                        ??_OpenPWM1 0060  
                      ??_OpenPWM2 0060                        ??_Pause_ms 0062  
                    ??_TMRO_USART 0034                 __end_of__npowers_ 7EFC  
                         __Hparam 0000                        _scale$2760 0086  
                         __Lparam 0000                   ?_clrBufferUSART 0001  
                     ?_WriteUSART 0001                   __size_of___ftge 00D4  
                         ___awdiv 205A                           ___ftadd 122A  
                         ___awmod 254C                         ?_putcTxU1 0001  
                         ___ftneg 3322                           ___lldiv 213C  
                 __size_of___wmul 0036                           ___ftmul 181E  
                         ___llmod 2826                           ___ftsub 319C  
                         ___fttol 1C32                __end_ofi2_Lcd_Port 3380  
            __size_ofi2_Lcd_Clear 000E                           __pcinit 2EA2  
                    ??i2___ftpack 0006                      ??i2___lbtoft 000C  
                      ??___ftpack 0065                        ??___lbtoft 006B  
            __size_of_putSTRINGU1 00BE                   __size_of_fround 0314  
                    BT_Init@F5671 016E           i2___ftmul@f3_as_product 0017  
                         __ramtop 0800                   ?_Lcd_Set_Cursor 0063  
                      ??___lltoft 006C                           __ptext0 26CE  
                         __ptext1 2CE0                           __ptext2 1E86  
                         __ptext3 34BE                           __ptext4 3380  
                         __ptext5 30D6                           __ptext6 33A6  
                         __ptext7 3484                           __ptext8 23B8  
                         __ptext9 3454    i2PWM_DutyCycle1@percentageDuty 0031  
                         _comando 015A                       ?__div_to_l_ 0060  
                         _countup 005E                           _dpowers 7EAD  
                       _T2CONbits 000FCA                  ___awmod@dividend 0060  
              __end_of_TMRO_USART 1C32                    _Comando_Tablet 1982  
                         _sprintf 001C                     _getCNY70Value 2486  
          __end_of_Lcd_Write_Char 30D6                    __pintcode_body 1ADE  
            __size_ofi2_SetDCPWM1 003A              __size_ofi2_SetDCPWM2 003A  
            end_of_initialization 2F00                       _TramaTablet 0100  
       __size_of_putcBluetoothInt 0086                           int_func 1ADE  
        __end_ofi2_Lcd_Write_Char 3284                __end_ofi2___ftpack 2826  
              __end_ofi2___lbtoft 3416                   ___lldiv@divisor 0064  
       i2PWM_DutyCycle1@DutyCycle 002F                   ___lldiv@counter 006C  
                       _RCSTAbits 000FAB        __end_of_Inicializa_Driveby 1F76  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                         Lcd_Port@a 0060  
                      ??_putcTxU1 0061                        _num_med_hi 005A  
                  __tdiv_to_l_@f1 0060                    __tdiv_to_l_@f2 0063  
       i2PWM_DutyCycle2@DutyCycle 002F                     ??__tdiv_to_l_ 0066  
                       i2_Lcd_Cmd 3416                         _PORTAbits 000F80  
                       _PORTBbits 000F81                         _PORTDbits 000F83  
                       _PORTEbits 000F84            __end_of_Comando_Tablet 1ADE  
    __end_of_SendBlueToothCommand 346E                         _TRISBbits 000F93  
                       _TRISCbits 000F94                    ?_getCNY70Value 0060  
             __size_of_WriteUSART 0014  __size_of_external_interrupt_init 0012  
                       i2___ftmul 1F76                         i2___fttol 22E4  
                 ?_Lcd_Write_Char 0001                 Lcd_Write_String@a 0064  
               Lcd_Write_String@i 0068                         _PWM_init1 33A6  
                       _PWM_init2 3380                         _TXSTAbits 000FAC  
                 i2___ftpack@sign 0005               __size_of__div_to_l_ 01DE  
                     ___ftmul@exp 007D                         _Lcd_Clear 34E2  
                  __end_of___ftge 22E4                    __end_of___wmul 32BA  
                _Lcd_Write_String 28CA                 ?i2_PWM_DutyCycle1 0001  
               ?i2_PWM_DutyCycle2 0001                     __pidataCOMRAM 34FE  
                      ?i2_Lcd_Cmd 0001                    __end_of_fround 122A  
              ??i2_PWM_DutyCycle1 002B                ??i2_PWM_DutyCycle2 002B  
             start_initialization 2EA2                         Pause_ms@i 0063  
                       Pause_ms@x 0060                   ?_Comando_Tablet 0001  
                       _ReadUSART 3436                         _SetDCPWM1 3002  
                       _SetDCPWM2 2FBA                   SetDCPWM1@DCycle 0064  
             __end_of__tdiv_to_l_ 181E                   SetDCPWM2@DCycle 0064  
                 i2___fttol@sign1 0025                         _DutyCycle 00E9  
                      ?i2___ftmul 000D                        ?i2___fttol 001C  
               __size_of_Lcd_Init 0078                 __size_of_Lcd_Port 0036  
                      ?_PWM_init1 0001                        ?_PWM_init2 0001  
            Comando_Tablet@sensed 00E7                         _OpenUSART 2A70  
                ??_PWM_DutyCycle1 0099                  ??_PWM_DutyCycle2 0099  
                       _Pause_seg 2F06                   ___llmod@divisor 0071  
                 ___llmod@counter 0075       __end_of_putcBluetoothString 29EA  
               __size_of_OpenPWM1 0014                 __size_of_OpenPWM2 0044  
               __size_of_Pause_ms 0046                        ?_Lcd_Clear 0001  
                        ??___ftge 0066        __end_ofi2_Lcd_Write_String 2CE0  
                        ??___wmul 0072                       __pdataBANK1 016E  
                __CFG_LPT1OSC$OFF 000000                   Lcd_Write_Char@a 0063  
                 Lcd_Write_Char@y 0062                          ??_fround 0086  
                  _num_med_medium 005C                        fround@prec 008C  
               __size_of___ftpack 010A                 __size_of___lbtoft 0032  
               __size_of___lltoft 007E                       __pbssCOMRAM 0042  
                 ??_getCNY70Value 0062                        ?_ReadUSART 0001  
                        ?_BT_Init 0001                     __pcstackBANK0 0060  
               ?i2_Lcd_Set_Cursor 0004                        ?_SetDCPWM1 0060  
                      ?_SetDCPWM2 0060               __end_of__stringdata 7FFE  
              ??i2_Lcd_Set_Cursor 0005                  _putcBluetoothInt 29EA  
                      ?_OpenUSART 0060                          ?_Lcd_Cmd 0001  
                     sprintf@_val 00C4                       sprintf@flag 00BD  
                ??_clrBufferUSART 0060                        ?_Pause_seg 0001  
                     sprintf@fval 00CB                       sprintf@prec 00C2  
                       _cleanBfer 00ED                      ??_WriteUSART 0060  
                ??_Lcd_Set_Cursor 0064              _SendBlueToothCommand 3454  
                       __pintcode 0008                     __pmediumconst 7EAC  
                        ?___awdiv 0066                          ?___ftadd 008D  
                        ?___awmod 0060                          ?___ftneg 0060  
                        ?___lldiv 0060                          ?___ftmul 0074  
                        ?___llmod 006D                          ?___ftsub 0099  
                       __npowers_ 7ED5                          ?___fttol 008A  
               putcTxU1@character 0061                       ??i2_Lcd_Cmd 0002  
               __size_of_putcTxU1 0012                       __tdiv_to_l_ 1688  
                       _contador2 0057                      ??__div_to_l_ 0066  
       SendBlueToothCommand@total 006C           _external_interrupt_init 34BE  
                    _TamanhoTrama 0046                          ?_sprintf 009F  
                     ??i2___ftmul 0013                    __size_of_scale 057C  
                     ??i2___fttol 0020                __end_of_WriteUSART 34AC  
                     ??_PWM_init1 0061                       ??_PWM_init2 0063  
    PWM_DutyCycle1@percentageDuty 009F                     _ComandoTablet 004E  
                  ___wmul@product 0072                 ?i2_Lcd_Write_Char 0001  
                        _PIE1bits 000F9D                          Lcd_Cmd@a 0062  
                        i2u505_40 2CA0                          _PIR1bits 000F9E  
                        i2u505_47 2C96                __end_of__div_to_l_ 1688  
                        i2u506_40 2CD8                          i2u506_47 2CCE  
                        i2u517_40 1B74                          i2u533_47 3268  
                        i2u534_47 327A                ??i2_Lcd_Write_Char 0002  
                        i2u535_47 3428                          i2u483_40 1FA8  
                        i2u491_40 236E             ?_SendBlueToothCommand 006A  
                        i2u478_45 321C                          i2u479_45 31E2  
                        i2u488_40 231C                          i2u488_45 2314  
                   ??i2_Lcd_Clear 0004                       ??_Lcd_Clear 0063  
                __CFG_WDTPS$32768 000000                     ??_putSTRINGU1 0066  
                      _ADCON1bits 000FC1                       __stringdata 7F23  
               ___wmul@multiplier 006E                          _CheckSum 004A  
                ??_Lcd_Write_Char 0061                       ??_ReadUSART 0001  
              _Inicializa_Driveby 1E86                     ??i2_SetDCPWM1 0003  
                   ??i2_SetDCPWM2 0003                       ??_SetDCPWM1 0062  
                     ??_SetDCPWM2 0062                  __size_of_BT_Init 00CE  
                        _Lcd_Init 2CE0                          _Lcd_Port 32BA  
                     _INTCON2bits 000FF1                       _INTCON3bits 000FF0  
                       copy_data0 2EDC                          _EntTrama 004F  
             ?_Inicializa_Driveby 0001                     _BluetoothDato 0128  
        __end_of_Lcd_Write_String 2962                       ??_OpenUSART 0062  
              SetDCPWM1@dutycycle 0060                       ??_Pause_seg 0065  
                 OpenUSART@config 0065                  __size_of_Lcd_Cmd 0026  
                    _Timer2Config 00EE                          _OpenPWM1 3484  
                        _OpenPWM2 30D6                          _Pause_ms 304A  
                        __Hrparam 0000                          __Lrparam 0000  
              SetDCPWM2@dutycycle 0060                  __size_of___awdiv 00E2  
                __size_of___ftadd 0280                  __size_of___awmod 00C4  
            ??_Inicializa_Driveby 0080                  PWM_DutyCycle1@DC 00A0  
                PWM_DutyCycle2@DC 00A0                  __size_of___ftneg 0032  
                __size_of___lldiv 00D4                  __size_of___ftmul 0164  
                __size_of___llmod 00A4                  __size_of___ftsub 003C  
                __size_of___fttol 014A                  ??_Comando_Tablet 00E7  
                        ___ftpack 1D7C                          ___lbtoft 32F0  
                     _fround$2758 0089                       _fround$2759 0086  
                        ___lltoft 2AF0               __end_ofi2_Lcd_Clear 34FE  
                  OpenPWM2@ccp2mx 0062             __CFG_FOSC$INTOSCIO_EC 000000  
             __end_of_putSTRINGU1 26CE         ??_external_interrupt_init 0060  
                      sprintf@exp 00C9                    OpenPWM1@period 0060  
                  OpenPWM2@period 0061                          __ptext10 2610  
                        __ptext11 34D0                          __ptext20 2486  
                        __ptext12 2F06                          __ptext21 311A  
                        __ptext13 304A                          __ptext30 0F16  
                        __ptext22 2B6E                          __ptext14 1982  
                        __ptext31 3284                          __ptext23 2FBA  
                        __ptext15 2962                          __ptext40 1C32  
                        __ptext32 181E                          __ptext24 2BEA  
                        __ptext16 29EA                          __ptext41 319C  
                        __ptext33 254C                          __ptext25 32F0  
                        __ptext17 3498                          __ptext50 33CC  
                        __ptext42 122A                          __ptext34 205A  
                        __ptext26 3002                          __ptext18 346E  
                        __ptext51 32BA                          __ptext43 1D7C  
                        __ptext35 1688                          __ptext27 315E  
                        __ptext19 2A70                          __ptext60 3212  
                        __ptext44 3322                          __ptext36 14AA  
                        __ptext28 001C                          __ptext61 2C66  
                        __ptext53 2DCE                          __ptext45 2210  
                        __ptext37 2AF0                          __ptext29 099A  
                        __ptext62 324C                          __ptext54 31D8  
                        __ptext46 28CA                          __ptext38 2826  
                        __ptext63 2F6A                          __ptext55 2E38  
                        __ptext47 3090                          __ptext39 213C  
                        __ptext64 34F0                          __ptext56 33F2  
                        __ptext48 2D58                          __ptext65 3416  
                        __ptext57 22E4                          __ptext49 34E2  
                        __ptext66 3354                          __ptext58 1F76  
                        __ptext67 3436                          __ptext59 277E  
                        __powers_ 7EFC                   PWM_init1@period 0061  
                 PWM_init2@period 0063                          _contador 0056  
       __size_ofi2_PWM_DutyCycle1 006A         __size_ofi2_PWM_DutyCycle2 006A  
                __size_of_sprintf 097E               __end_ofi2_SetDCPWM1 324C  
             __end_ofi2_SetDCPWM2 3212                     __size_of_main 00B0  
          ??_SendBlueToothCommand 006E                          _putcTxU1 34D0  
                     i2Lcd_Port@a 0001                     BT_Init@nameBT 006E  
        __end_of_putcBluetoothInt 2A70             __CFG_CPUDIV$OSC1_PLL2 000000  
                      _INTCONbits 000FF2                i2_Lcd_Write_String 2C66  
                  OpenUSART@spbrg 0060                          scale@scl 0089  
               putcBluetoothInt@a 00CF                 putcBluetoothInt@i 00E5  
               putcBluetoothInt@s 00D1                Lcd_Write_Char@temp 0061  
                        intlevel2 0000                         sprintf@ap 00BB  
                __tdiv_to_l_@exp1 006E                         sprintf@vd 00B3  
                       sprintf@sp 009F                  __tdiv_to_l_@cntr 006D  
             ?i2_Lcd_Write_String 0005                  __tdiv_to_l_@quot 0069  
               i2Lcd_Set_Cursor@a 0005                 i2Lcd_Set_Cursor@b 0004  
               i2Lcd_Set_Cursor@y 0007                 i2Lcd_Set_Cursor@z 0006  
                ___lldiv@dividend 0060   __end_of_external_interrupt_init 34D0  
       __size_ofi2_Lcd_Set_Cursor 0050                        _OSCCONbits 000FD3  
                      i2Lcd_Cmd@a 0003                       i2_Lcd_Clear 34F0  
                      _UART1_Init 346E                       _putSTRINGU1 2610  
            ??i2_Lcd_Write_String 0007                Lcd_Set_Cursor@temp 0067  
    __size_of_putcBluetoothString 0088                      ?__tdiv_to_l_ 0060  
                     _num_med_low 005B                          sprintf@c 00CE  
                        sprintf@f 00A1                  ___lldiv@quotient 0068  
  i2PWM_DutyCycle2@percentageDuty 0031                       i2_SetDCPWM1 3212  
                     i2_SetDCPWM2 31D8                Lcd_Write_Integer@a 00CF  
              Lcd_Write_Integer@s 00D1             __end_of_getCNY70Value 254C  
                      i2_Lcd_Port 3354                      _USART_Status 0054  
                      _TMRO_USART 0008  
