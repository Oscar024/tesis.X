

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Aug 29 12:39:54 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK0
    79  002942                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for BT_Init@F5671
    83  002942  41                 	db	65
    84  002943  54                 	db	84
    85  002944  2B                 	db	43
    86  002945  4E                 	db	78
    87  002946  41                 	db	65
    88  002947  4D                 	db	77
    89  002948  45                 	db	69
    90  002949  3D                 	db	61
    91  00294A  72                 	db	114
    92  00294B  6F                 	db	111
    93  00294C  62                 	db	98
    94  00294D  6F                 	db	111
    95  00294E  74                 	db	116
    96  00294F  0D                 	db	13
    97  002950  0A                 	db	10
    98  002951  00                 	db	0
    99  002952  00                 	db	0
   100  002953  00                 	db	0
   101                           
   102                           ;initializer for _countup
   103  002954  0001               	dw	1
   104                           
   105                           	psect	mediumconst
   106  007ECC                     __pmediumconst:
   107                           	opt stack 0
   108  007ECC  00                 	db	0
   109  007ECD                     _dpowers:
   110                           	opt stack 0
   111  007ECD  0001               	dw	1
   112  007ECF  0000               	dw	0
   113  007ED1  000A               	dw	10
   114  007ED3  0000               	dw	0
   115  007ED5  0064               	dw	100
   116  007ED7  0000               	dw	0
   117  007ED9  03E8               	dw	1000
   118  007EDB  0000               	dw	0
   119  007EDD  2710               	dw	10000
   120  007EDF  0000               	dw	0
   121  007EE1  86A0               	dw	34464
   122  007EE3  0001               	dw	1
   123  007EE5  4240               	dw	16960
   124  007EE7  000F               	dw	15
   125  007EE9  9680               	dw	38528
   126  007EEB  0098               	dw	152
   127  007EED  E100               	dw	57600
   128  007EEF  05F5               	dw	1525
   129  007EF1  CA00               	dw	51712
   130  007EF3  3B9A               	dw	15258
   131  007EF5                     __end_of_dpowers:
   132                           	opt stack 0
   133  007EF5                     __npowers_:
   134                           	opt stack 0
   135  007EF5  00                 	db	0
   136  007EF6  80                 	db	128
   137  007EF7  3F                 	db	63
   138  007EF8  CD                 	db	205
   139  007EF9  CC                 	db	204
   140  007EFA  3D                 	db	61
   141  007EFB  D7                 	db	215
   142  007EFC  23                 	db	35
   143  007EFD  3C                 	db	60
   144  007EFE  12                 	db	18
   145  007EFF  83                 	db	131
   146  007F00  3A                 	db	58
   147  007F01  B7                 	db	183
   148  007F02  D1                 	db	209
   149  007F03  38                 	db	56
   150  007F04  C6                 	db	198
   151  007F05  27                 	db	39
   152  007F06  37                 	db	55
   153  007F07  38                 	db	56
   154  007F08  86                 	db	134
   155  007F09  35                 	db	53
   156  007F0A  C0                 	db	192
   157  007F0B  D6                 	db	214
   158  007F0C  33                 	db	51
   159  007F0D  CC                 	db	204
   160  007F0E  2B                 	db	43
   161  007F0F  32                 	db	50
   162  007F10  70                 	db	112
   163  007F11  89                 	db	137
   164  007F12  30                 	db	48
   165  007F13  E7                 	db	231
   166  007F14  DB                 	db	219
   167  007F15  2E                 	db	46
   168  007F16  E5                 	db	229
   169  007F17  3C                 	db	60
   170  007F18  1E                 	db	30
   171  007F19  42                 	db	66
   172  007F1A  A2                 	db	162
   173  007F1B  0D                 	db	13
   174  007F1C                     __end_of__npowers_:
   175                           	opt stack 0
   176  007F1C                     __powers_:
   177                           	opt stack 0
   178  007F1C  00                 	db	0
   179  007F1D  80                 	db	128
   180  007F1E  3F                 	db	63
   181  007F1F  00                 	db	0
   182  007F20  20                 	db	32
   183  007F21  41                 	db	65
   184  007F22  00                 	db	0
   185  007F23  C8                 	db	200
   186  007F24  42                 	db	66
   187  007F25  00                 	db	0
   188  007F26  7A                 	db	122
   189  007F27  44                 	db	68
   190  007F28  40                 	db	64
   191  007F29  1C                 	db	28
   192  007F2A  46                 	db	70
   193  007F2B  50                 	db	80
   194  007F2C  C3                 	db	195
   195  007F2D  47                 	db	71
   196  007F2E  24                 	db	36
   197  007F2F  74                 	db	116
   198  007F30  49                 	db	73
   199  007F31  97                 	db	151
   200  007F32  18                 	db	24
   201  007F33  4B                 	db	75
   202  007F34  BC                 	db	188
   203  007F35  BE                 	db	190
   204  007F36  4C                 	db	76
   205  007F37  6B                 	db	107
   206  007F38  6E                 	db	110
   207  007F39  4E                 	db	78
   208  007F3A  03                 	db	3
   209  007F3B  15                 	db	21
   210  007F3C  50                 	db	80
   211  007F3D  79                 	db	121
   212  007F3E  AD                 	db	173
   213  007F3F  60                 	db	96
   214  007F40  F3                 	db	243
   215  007F41  49                 	db	73
   216  007F42  71                 	db	113
   217  007F43                     __end_of__powers_:
   218                           	opt stack 0
   219  0000                     _ADCON1bits	set	4033
   220  0000                     _CCP1CON	set	4029
   221  0000                     _CCP2CON	set	4026
   222  0000                     _CCPR1L	set	4030
   223  0000                     _CCPR2L	set	4027
   224  0000                     _INTCON	set	4082
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _PIE1	set	3997
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTAbits	set	3968
   231  0000                     _PORTB	set	3969
   232  0000                     _PORTBbits	set	3969
   233  0000                     _PORTDbits	set	3971
   234  0000                     _PORTE	set	3972
   235  0000                     _PORTEbits	set	3972
   236  0000                     _PR2	set	4043
   237  0000                     _RCREG	set	4014
   238  0000                     _RCSTA	set	4011
   239  0000                     _RCSTAbits	set	4011
   240  0000                     _SPBRG	set	4015
   241  0000                     _SPBRGH	set	4016
   242  0000                     _T2CON	set	4042
   243  0000                     _T2CONbits	set	4042
   244  0000                     _TMR2	set	4044
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISBbits	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISCbits	set	3988
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISE	set	3990
   252  0000                     _TXREG	set	4013
   253  0000                     _TXSTA	set	4012
   254  0000                     _TXSTAbits	set	4012
   255  007F43                     __stringdata:
   256                           	opt stack 0
   257  007F43                     STR_19:
   258  007F43  49                 	db	73	;'I'
   259  007F44  6E                 	db	110	;'n'
   260  007F45  74                 	db	116	;'t'
   261  007F46  65                 	db	101	;'e'
   262  007F47  72                 	db	114	;'r'
   263  007F48  72                 	db	114	;'r'
   264  007F49  75                 	db	117	;'u'
   265  007F4A  70                 	db	112	;'p'
   266  007F4B  74                 	db	116	;'t'
   267  007F4C  69                 	db	105	;'i'
   268  007F4D  6F                 	db	111	;'o'
   269  007F4E  6E                 	db	110	;'n'
   270  007F4F  20                 	db	32
   271  007F50  54                 	db	84	;'T'
   272  007F51  4D                 	db	77	;'M'
   273  007F52  52                 	db	82	;'R'
   274  007F53  32                 	db	50	;'2'
   275  007F54  00                 	db	0
   276  007F55                     STR_11:
   277  007F55  42                 	db	66	;'B'
   278  007F56  54                 	db	84	;'T'
   279  007F57  20                 	db	32
   280  007F58  49                 	db	73	;'I'
   281  007F59  4E                 	db	78	;'N'
   282  007F5A  49                 	db	73	;'I'
   283  007F5B  43                 	db	67	;'C'
   284  007F5C  49                 	db	73	;'I'
   285  007F5D  41                 	db	65	;'A'
   286  007F5E  4C                 	db	76	;'L'
   287  007F5F  49                 	db	73	;'I'
   288  007F60  5A                 	db	90	;'Z'
   289  007F61  41                 	db	65	;'A'
   290  007F62  44                 	db	68	;'D'
   291  007F63  4F                 	db	79	;'O'
   292  007F64  00                 	db	0
   293  007F65                     STR_2:
   294  007F65  41                 	db	65	;'A'
   295  007F66  54                 	db	84	;'T'
   296  007F67  2B                 	db	43
   297  007F68  50                 	db	80	;'P'
   298  007F69  53                 	db	83	;'S'
   299  007F6A  57                 	db	87	;'W'
   300  007F6B  44                 	db	68	;'D'
   301  007F6C  3D                 	db	61	;'='
   302  007F6D  30                 	db	48	;'0'
   303  007F6E  30                 	db	48	;'0'
   304  007F6F  30                 	db	48	;'0'
   305  007F70  30                 	db	48	;'0'
   306  007F71  0D                 	db	13
   307  007F72  0A                 	db	10
   308  007F73  00                 	db	0
   309  007F74  0A                 	db	10
   310  007F75  2B                 	db	43
   311  007F76  42                 	db	66	;'B'
   312  007F77  54                 	db	84	;'T'
   313  007F78  53                 	db	83	;'S'
   314  007F79  54                 	db	84	;'T'
   315  007F7A  41                 	db	65	;'A'
   316  007F7B  54                 	db	84	;'T'
   317  007F7C  45                 	db	69	;'E'
   318  007F7D  3A                 	db	58	;':'
   319  007F7E  31                 	db	49	;'1'
   320  007F7F  0D                 	db	13
   321  007F80  0A                 	db	10
   322  007F81  00                 	db	0
   323  007F82  0A                 	db	10
   324  007F83  2B                 	db	43
   325  007F84  42                 	db	66	;'B'
   326  007F85  54                 	db	84	;'T'
   327  007F86  53                 	db	83	;'S'
   328  007F87  54                 	db	84	;'T'
   329  007F88  41                 	db	65	;'A'
   330  007F89  54                 	db	84	;'T'
   331  007F8A  45                 	db	69	;'E'
   332  007F8B  3A                 	db	58	;':'
   333  007F8C  33                 	db	51	;'3'
   334  007F8D  0D                 	db	13
   335  007F8E  0A                 	db	10
   336  007F8F  00                 	db	0
   337  007F90  0A                 	db	10
   338  007F91  2B                 	db	43
   339  007F92  42                 	db	66	;'B'
   340  007F93  54                 	db	84	;'T'
   341  007F94  53                 	db	83	;'S'
   342  007F95  54                 	db	84	;'T'
   343  007F96  41                 	db	65	;'A'
   344  007F97  54                 	db	84	;'T'
   345  007F98  45                 	db	69	;'E'
   346  007F99  3A                 	db	58	;':'
   347  007F9A  34                 	db	52	;'4'
   348  007F9B  0D                 	db	13
   349  007F9C  0A                 	db	10
   350  007F9D  00                 	db	0
   351  007F9E  0A                 	db	10
   352  007F9F  43                 	db	67	;'C'
   353  007FA0  4F                 	db	79	;'O'
   354  007FA1  4E                 	db	78	;'N'
   355  007FA2  4E                 	db	78	;'N'
   356  007FA3  45                 	db	69	;'E'
   357  007FA4  43                 	db	67	;'C'
   358  007FA5  54                 	db	84	;'T'
   359  007FA6  3A                 	db	58	;':'
   360  007FA7  4F                 	db	79	;'O'
   361  007FA8  4B                 	db	75	;'K'
   362  007FA9  0D                 	db	13
   363  007FAA  0A                 	db	10
   364  007FAB  00                 	db	0
   365  007FAC                     STR_18:
   366  007FAC  49                 	db	73	;'I'
   367  007FAD  6E                 	db	110	;'n'
   368  007FAE  74                 	db	116	;'t'
   369  007FAF  65                 	db	101	;'e'
   370  007FB0  67                 	db	103	;'g'
   371  007FB1  65                 	db	101	;'e'
   372  007FB2  72                 	db	114	;'r'
   373  007FB3  20                 	db	32
   374  007FB4  3D                 	db	61	;'='
   375  007FB5  20                 	db	32
   376  007FB6  25                 	db	37
   377  007FB7  64                 	db	100	;'d'
   378  007FB8  00                 	db	0
   379  007FB9                     STR_1:
   380  007FB9  41                 	db	65	;'A'
   381  007FBA  54                 	db	84	;'T'
   382  007FBB  2B                 	db	43
   383  007FBC  52                 	db	82	;'R'
   384  007FBD  4F                 	db	79	;'O'
   385  007FBE  4C                 	db	76	;'L'
   386  007FBF  45                 	db	69	;'E'
   387  007FC0  3D                 	db	61	;'='
   388  007FC1  30                 	db	48	;'0'
   389  007FC2  0D                 	db	13
   390  007FC3  0A                 	db	10
   391  007FC4  00                 	db	0
   392  007FC5                     STR_21:
   393  007FC5  43                 	db	67	;'C'
   394  007FC6  4D                 	db	77	;'M'
   395  007FC7  44                 	db	68	;'D'
   396  007FC8  20                 	db	32
   397  007FC9  54                 	db	84	;'T'
   398  007FCA  41                 	db	65	;'A'
   399  007FCB  42                 	db	66	;'B'
   400  007FCC  4C                 	db	76	;'L'
   401  007FCD  45                 	db	69	;'E'
   402  007FCE  54                 	db	84	;'T'
   403  007FCF  00                 	db	0
   404  007FD0  46                 	db	70	;'F'
   405  007FD1  6C                 	db	108	;'l'
   406  007FD2  6F                 	db	111	;'o'
   407  007FD3  61                 	db	97	;'a'
   408  007FD4  74                 	db	116	;'t'
   409  007FD5  20                 	db	32
   410  007FD6  3D                 	db	61	;'='
   411  007FD7  20                 	db	32
   412  007FD8  25                 	db	37
   413  007FD9  66                 	db	102	;'f'
   414  007FDA  00                 	db	0
   415  007FDB                     STR_3:
   416  007FDB  41                 	db	65	;'A'
   417  007FDC  54                 	db	84	;'T'
   418  007FDD  2B                 	db	43
   419  007FDE  49                 	db	73	;'I'
   420  007FDF  4E                 	db	78	;'N'
   421  007FE0  51                 	db	81	;'Q'
   422  007FE1  0D                 	db	13
   423  007FE2  0A                 	db	10
   424  007FE3  00                 	db	0
   425  007FE4                     STR_16:
   426  007FE4  44                 	db	68	;'D'
   427  007FE5  65                 	db	101	;'e'
   428  007FE6  66                 	db	102	;'f'
   429  007FE7  61                 	db	97	;'a'
   430  007FE8  75                 	db	117	;'u'
   431  007FE9  6C                 	db	108	;'l'
   432  007FEA  74                 	db	116	;'t'
   433  007FEB  00                 	db	0
   434  007FEC                     STR_20:
   435  007FEC  49                 	db	73	;'I'
   436  007FED  6E                 	db	110	;'n'
   437  007FEE  69                 	db	105	;'i'
   438  007FEF  63                 	db	99	;'c'
   439  007FF0  69                 	db	105	;'i'
   440  007FF1  6F                 	db	111	;'o'
   441  007FF2  00                 	db	0
   442  007FF3                     STR_10:
   443  007FF3  49                 	db	73	;'I'
   444  007FF4  4E                 	db	78	;'N'
   445  007FF5  49                 	db	73	;'I'
   446  007FF6  43                 	db	67	;'C'
   447  007FF7  49                 	db	73	;'I'
   448  007FF8  4F                 	db	79	;'O'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_12:
   451  007FFA  31                 	db	49	;'1'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_14:
   454  007FFC  33                 	db	51	;'3'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  00253A                     __pcinit:
   464                           	opt stack 0
   465  00253A                     start_initialization:
   466                           	opt stack 0
   467  00253A                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  00253A  EE01  F000         	lfsr	0,__pbssBANK1
   472  00253E  0E5A               	movlw	90
   473  002540                     clear_0:
   474  002540  6AEE               	clrf	postinc0,c
   475  002542  06E8               	decf	wreg,f,c
   476  002544  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (30 bytes)
   479  002546  EE00  F0CE         	lfsr	0,__pbssBANK0
   480  00254A  0E1E               	movlw	30
   481  00254C                     clear_1:
   482  00254C  6AEE               	clrf	postinc0,c
   483  00254E  06E8               	decf	wreg,f,c
   484  002550  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  002552  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  002556  0E18               	movlw	24
   489  002558                     clear_2:
   490  002558  6AEE               	clrf	postinc0,c
   491  00255A  06E8               	decf	wreg,f,c
   492  00255C  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  00255E  0E42               	movlw	low __pidataBANK0
   497  002560  6EF6               	movwf	tblptrl,c
   498  002562  0E29               	movlw	high __pidataBANK0
   499  002564  6EF7               	movwf	tblptrh,c
   500  002566  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  002568  6EF8               	movwf	tblptru,c
   502  00256A  EE00  F0EC         	lfsr	0,__pdataBANK0
   503  00256E  EE10 F014          	lfsr	1,20
   504  002572                     copy_data0:
   505  002572  0009               	tblrd		*+
   506  002574  CFF5 FFEE          	movff	tablat,postinc0
   507  002578  50E5               	movf	postdec1,w,c
   508  00257A  50E1               	movf	fsr1l,w,c
   509  00257C  E1FA               	bnz	copy_data0
   510  00257E                     end_of_initialization:
   511                           	opt stack 0
   512  00257E                     __end_of__initialization:
   513                           	opt stack 0
   514  00257E  0100               	movlb	0
   515  002580  EFAB  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000CE                     __pbssBANK0:
   611                           	opt stack 0
   612  0000CE                     _DutyCycle:
   613                           	opt stack 0
   614  0000CE                     	ds	2
   615  0000D0                     _Med_lsb:
   616                           	opt stack 0
   617  0000D0                     	ds	2
   618  0000D2                     _Med_msb:
   619                           	opt stack 0
   620  0000D2                     	ds	2
   621  0000D4                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000D4                     	ds	2
   624  0000D6                     _i:
   625                           	opt stack 0
   626  0000D6                     	ds	2
   627  0000D8                     _comando:
   628                           	opt stack 0
   629  0000D8                     	ds	20
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK0
   640  0000EC                     __pdataBANK0:
   641                           	opt stack 0
   642  0000EC                     BT_Init@F5671:
   643                           	opt stack 0
   644  0000EC                     	ds	18
   645  0000FE                     _countup:
   646                           	opt stack 0
   647  0000FE                     	ds	2
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK1
   658  000100                     __pbssBANK1:
   659                           	opt stack 0
   660  000100                     _TramaTablet:
   661                           	opt stack 0
   662  000100                     	ds	20
   663  000114                     _array:
   664                           	opt stack 0
   665  000114                     	ds	20
   666  000128                     _BluetoothDato:
   667                           	opt stack 0
   668  000128                     	ds	50
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  00015A                     __pcstackBANK1:
   680                           	opt stack 0
   681  00015A                     putcBluetoothInt@s:
   682                           	opt stack 0
   683                           
   684                           ; 20 bytes @ 0x0
   685  00015A                     	ds	20
   686  00016E                     putcBluetoothInt@i:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x14
   690  00016E                     	ds	2
   691  000170                     Comando_Tablet@sensed:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695  000170                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2454:
   750                           	opt stack 0
   751  00006F                     _scale$2455:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2453:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2456:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1428:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1430:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934  0000BA                     Lcd_Write_Integer@s:
   935                           	opt stack 0
   936                           
   937                           ; 20 bytes @ 0x5A
   938  0000BA                     	ds	20
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ReadUSART@data:
   952                           	opt stack 0
   953  000001                     i2Lcd_Port@a:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x0
   957  000001                     	ds	1
   958  000002                     ??i2_Lcd_Cmd:
   959  000002                     i2Lcd_Write_Char@temp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1
   963  000002                     	ds	1
   964  000003                     i2Lcd_Cmd@a:
   965                           	opt stack 0
   966  000003                     i2Lcd_Write_Char@y:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     i2Lcd_Set_Cursor@b:
   972                           	opt stack 0
   973  000004                     i2Lcd_Write_Char@a:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3
   977  000004                     	ds	1
   978  000005                     i2Lcd_Set_Cursor@a:
   979                           	opt stack 0
   980  000005                     i2Lcd_Write_String@a:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x4
   984  000005                     	ds	1
   985  000006                     i2Lcd_Set_Cursor@z:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x5
   989  000006                     	ds	1
   990  000007                     ??i2_Lcd_Write_String:
   991  000007                     i2Lcd_Set_Cursor@y:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x6
   995  000007                     	ds	1
   996  000008                     i2Lcd_Set_Cursor@temp:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x7
  1000  000008                     	ds	1
  1001  000009                     i2Lcd_Write_String@i:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  000009                     	ds	2
  1006  00000B                     ??_TMRO_USART:
  1007                           
  1008                           ; 0 bytes @ 0xA
  1009  00000B                     	ds	14
  1010  000019                     ??_OpenPWM2:
  1011  000019                     ?_getCNY70Value:
  1012                           	opt stack 0
  1013  000019                     ?___awmod:
  1014                           	opt stack 0
  1015  000019                     ?___ftpack:
  1016                           	opt stack 0
  1017  000019                     ?___ftneg:
  1018                           	opt stack 0
  1019  000019                     ?__tdiv_to_l_:
  1020                           	opt stack 0
  1021  000019                     ?__div_to_l_:
  1022                           	opt stack 0
  1023  000019                     ?___lldiv:
  1024                           	opt stack 0
  1025  000019                     Lcd_Port@a:
  1026                           	opt stack 0
  1027  000019                     OpenPWM1@period:
  1028                           	opt stack 0
  1029  000019                     WriteUSART@data:
  1030                           	opt stack 0
  1031  000019                     clrBufferUSART@i:
  1032                           	opt stack 0
  1033  000019                     Pause_ms@x:
  1034                           	opt stack 0
  1035  000019                     SetDCPWM1@dutycycle:
  1036                           	opt stack 0
  1037  000019                     SetDCPWM2@dutycycle:
  1038                           	opt stack 0
  1039  000019                     OpenUSART@spbrg:
  1040                           	opt stack 0
  1041  000019                     ___awmod@dividend:
  1042                           	opt stack 0
  1043  000019                     __div_to_l_@f1:
  1044                           	opt stack 0
  1045  000019                     ___ftpack@arg:
  1046                           	opt stack 0
  1047  000019                     __tdiv_to_l_@f1:
  1048                           	opt stack 0
  1049  000019                     ___ftge@ff1:
  1050                           	opt stack 0
  1051  000019                     ___ftneg@f1:
  1052                           	opt stack 0
  1053  000019                     ___lldiv@dividend:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x18
  1057  000019                     	ds	1
  1058  00001A                     ??_Lcd_Cmd:
  1059  00001A                     putcTxU1@character:
  1060                           	opt stack 0
  1061  00001A                     Lcd_Write_Char@temp:
  1062                           	opt stack 0
  1063  00001A                     PWM_init1@period:
  1064                           	opt stack 0
  1065  00001A                     OpenPWM2@period:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x19
  1069  00001A                     	ds	1
  1070  00001B                     ??_OpenUSART:
  1071  00001B                     ??_SetDCPWM1:
  1072  00001B                     ??_SetDCPWM2:
  1073  00001B                     ??_Pause_ms:
  1074  00001B                     Lcd_Cmd@a:
  1075                           	opt stack 0
  1076  00001B                     Lcd_Write_Char@y:
  1077                           	opt stack 0
  1078  00001B                     OpenPWM2@ccp2mx:
  1079                           	opt stack 0
  1080  00001B                     putSTRINGU1@dato:
  1081                           	opt stack 0
  1082  00001B                     ___awmod@divisor:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1A
  1086  00001B                     	ds	1
  1087  00001C                     ??_Lcd_Init:
  1088  00001C                     Lcd_Set_Cursor@b:
  1089                           	opt stack 0
  1090  00001C                     Lcd_Write_Char@a:
  1091                           	opt stack 0
  1092  00001C                     PWM_init2@period:
  1093                           	opt stack 0
  1094  00001C                     ___ftpack@exp:
  1095                           	opt stack 0
  1096  00001C                     Pause_ms@i:
  1097                           	opt stack 0
  1098  00001C                     __div_to_l_@f2:
  1099                           	opt stack 0
  1100  00001C                     __tdiv_to_l_@f2:
  1101                           	opt stack 0
  1102  00001C                     ___ftge@ff2:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x1B
  1106  00001C                     	ds	1
  1107  00001D                     Lcd_Set_Cursor@a:
  1108                           	opt stack 0
  1109  00001D                     ___awmod@counter:
  1110                           	opt stack 0
  1111  00001D                     ___ftpack@sign:
  1112                           	opt stack 0
  1113  00001D                     putSTRINGU1@total:
  1114                           	opt stack 0
  1115  00001D                     Lcd_Write_String@a:
  1116                           	opt stack 0
  1117  00001D                     SetDCPWM1@DCycle:
  1118                           	opt stack 0
  1119  00001D                     SetDCPWM2@DCycle:
  1120                           	opt stack 0
  1121  00001D                     ___lldiv@divisor:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1C
  1125  00001D                     	ds	1
  1126  00001E                     ??___ftpack:
  1127  00001E                     Pause_seg@x:
  1128                           	opt stack 0
  1129  00001E                     Lcd_Set_Cursor@z:
  1130                           	opt stack 0
  1131  00001E                     OpenUSART@config:
  1132                           	opt stack 0
  1133  00001E                     ___awmod@sign:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x1D
  1137  00001E                     	ds	1
  1138  00001F                     ??_putSTRINGU1:
  1139  00001F                     ??_Lcd_Write_String:
  1140  00001F                     ??__tdiv_to_l_:
  1141  00001F                     ??__div_to_l_:
  1142  00001F                     ??___ftge:
  1143  00001F                     ?___awdiv:
  1144                           	opt stack 0
  1145  00001F                     Pause_seg@i:
  1146                           	opt stack 0
  1147  00001F                     UART1_Init@bdr:
  1148                           	opt stack 0
  1149  00001F                     Lcd_Set_Cursor@y:
  1150                           	opt stack 0
  1151  00001F                     ___awdiv@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1E
  1155  00001F                     	ds	1
  1156  000020                     Lcd_Set_Cursor@temp:
  1157                           	opt stack 0
  1158  000020                     putcBluetoothString@a:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1F
  1162  000020                     	ds	1
  1163  000021                     ?___lbtoft:
  1164                           	opt stack 0
  1165  000021                     ?___lltoft:
  1166                           	opt stack 0
  1167  000021                     putSTRINGU1@last:
  1168                           	opt stack 0
  1169  000021                     Lcd_Write_String@i:
  1170                           	opt stack 0
  1171  000021                     ___awdiv@divisor:
  1172                           	opt stack 0
  1173  000021                     ___lldiv@quotient:
  1174                           	opt stack 0
  1175  000021                     ___lltoft@c:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x20
  1179  000021                     	ds	1
  1180  000022                     ??_putcBluetoothString:
  1181  000022                     putSTRINGU1@cont:
  1182                           	opt stack 0
  1183  000022                     __tdiv_to_l_@quot:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x21
  1187  000022                     	ds	1
  1188  000023                     ___awdiv@counter:
  1189                           	opt stack 0
  1190  000023                     SendBlueToothCommand@command:
  1191                           	opt stack 0
  1192  000023                     __div_to_l_@quot:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x22
  1196  000023                     	ds	1
  1197  000024                     ___awdiv@sign:
  1198                           	opt stack 0
  1199  000024                     ___lbtoft@c:
  1200                           	opt stack 0
  1201  000024                     putcBluetoothString@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x23
  1205  000024                     	ds	1
  1206  000025                     ??___lltoft:
  1207  000025                     ___lldiv@counter:
  1208                           	opt stack 0
  1209  000025                     SendBlueToothCommand@total:
  1210                           	opt stack 0
  1211  000025                     ___awdiv@quotient:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x24
  1215  000025                     	ds	1
  1216  000026                     ?___llmod:
  1217                           	opt stack 0
  1218  000026                     __tdiv_to_l_@cntr:
  1219                           	opt stack 0
  1220  000026                     ___llmod@dividend:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x25
  1224  000026                     	ds	1
  1225  000027                     ??_Inicializa_Driveby:
  1226  000027                     ?___wmul:
  1227                           	opt stack 0
  1228  000027                     __div_to_l_@cntr:
  1229                           	opt stack 0
  1230  000027                     __tdiv_to_l_@exp1:
  1231                           	opt stack 0
  1232  000027                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x26
  1236  000027                     	ds	1
  1237  000028                     __div_to_l_@exp1:
  1238                           	opt stack 0
  1239  000028                     Inicializa_Driveby@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x27
  1243  000028                     	ds	1
  1244  000029                     ___lltoft@exp:
  1245                           	opt stack 0
  1246  000029                     ___wmul@multiplicand:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x28
  1250  000029                     	ds	1
  1251  00002A                     ___llmod@divisor:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x29
  1255  00002A                     	ds	1
  1256  00002B                     ___wmul@product:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2A
  1260  00002B                     	ds	2
  1261  00002D                     ??___ftmul:
  1262                           
  1263                           ; 0 bytes @ 0x2C
  1264  00002D                     	ds	1
  1265  00002E                     ___llmod@counter:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x2D
  1269  00002E                     	ds	2
  1270  000030                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 0 bytes @ 0x2F
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 122 in file "robot.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2  382[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1299 ;;      Params:         0       0       0       0       0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   10
  1305 ;; This function calls:
  1306 ;;		_Comando_Tablet
  1307 ;;		_Inicializa_Driveby
  1308 ;;		_Lcd_Clear
  1309 ;;		_Lcd_Init
  1310 ;;		_Lcd_Set_Cursor
  1311 ;;		_Lcd_Write_String
  1312 ;;		_UART1_Init
  1313 ;;		_clrBufferUSART
  1314 ;; This function is called by:
  1315 ;;		Startup code after reset
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text0
  1320  001D56                     __ptext0:
  1321                           	opt stack 0
  1322  001D56                     _main:
  1323                           	opt stack 21
  1324                           
  1325                           ;robot.c: 124: INTCON =0X00;
  1326                           
  1327                           ;incstack = 0
  1328  001D56  0E00               	movlw	0
  1329  001D58  6EF2               	movwf	intcon,c	;volatile
  1330                           
  1331                           ;robot.c: 125: TRISD = 0x00;
  1332  001D5A  0E00               	movlw	0
  1333  001D5C  6E95               	movwf	3989,c	;volatile
  1334                           
  1335                           ;robot.c: 126: TRISE = 0x00;
  1336  001D5E  0E00               	movlw	0
  1337  001D60  6E96               	movwf	3990,c	;volatile
  1338                           
  1339                           ;robot.c: 127: PORTEbits.RE1=0;
  1340  001D62  9284               	bcf	3972,1,c	;volatile
  1341                           
  1342                           ;robot.c: 128: ADCON1bits.PCFG=0b1111;
  1343  001D64  80C1               	bsf	4033,0,c	;volatile
  1344  001D66  82C1               	bsf	4033,1,c	;volatile
  1345  001D68  84C1               	bsf	4033,2,c	;volatile
  1346  001D6A  86C1               	bsf	4033,3,c	;volatile
  1347                           
  1348                           ;robot.c: 129: Lcd_Init();
  1349  001D6C  EC4A  F011         	call	_Lcd_Init	;wreg free
  1350                           
  1351                           ;robot.c: 130: Lcd_Clear();
  1352  001D70  ECCC  F014         	call	_Lcd_Clear	;wreg free
  1353                           
  1354                           ;robot.c: 131: Lcd_Set_Cursor(1,1);
  1355  001D74  0E01               	movlw	1
  1356  001D76  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1357  001D78  0E01               	movlw	1
  1358  001D7A  EC4D  F012         	call	_Lcd_Set_Cursor
  1359                           
  1360                           ;robot.c: 132: Lcd_Write_String("Inicio");
  1361  001D7E  0E7F               	movlw	high STR_20
  1362  001D80  6E1E               	movwf	Lcd_Write_String@a+1,c
  1363  001D82  0EEC               	movlw	low STR_20
  1364  001D84  6E1D               	movwf	Lcd_Write_String@a,c
  1365  001D86  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  1366                           
  1367                           ;robot.c: 133: Inicializa_Driveby();
  1368  001D8A  ECF4  F00C         	call	_Inicializa_Driveby	;wreg free
  1369  001D8E                     l5881:
  1370                           
  1371                           ;robot.c: 138: {
  1372                           ;robot.c: 141: if (cleanBfer == 1) {
  1373  001D8E  043E               	decf	_cleanBfer,w,c
  1374  001D90  A4D8               	btfss	status,2,c
  1375  001D92  D004               	goto	l5887
  1376                           
  1377                           ;robot.c: 142: clrBufferUSART();
  1378  001D94  EC78  F013         	call	_clrBufferUSART	;wreg free
  1379                           
  1380                           ;robot.c: 143: cleanBfer = 0;
  1381  001D98  0E00               	movlw	0
  1382  001D9A  6E3E               	movwf	_cleanBfer,c
  1383  001D9C                     l5887:
  1384                           
  1385                           ;robot.c: 144: }
  1386                           ;robot.c: 145: if (FinComandT == 1) {
  1387  001D9C  0437               	decf	_FinComandT,w,c
  1388  001D9E  A4D8               	btfss	status,2,c
  1389  001DA0  D01A               	goto	l5907
  1390                           
  1391                           ;robot.c: 146: Lcd_Clear();
  1392  001DA2  ECCC  F014         	call	_Lcd_Clear	;wreg free
  1393                           
  1394                           ;robot.c: 147: Lcd_Set_Cursor(2,1);
  1395  001DA6  0E01               	movlw	1
  1396  001DA8  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1397  001DAA  0E02               	movlw	2
  1398  001DAC  EC4D  F012         	call	_Lcd_Set_Cursor
  1399                           
  1400                           ;robot.c: 148: Lcd_Write_String("CMD TABLET");
  1401  001DB0  0E7F               	movlw	high STR_21
  1402  001DB2  6E1E               	movwf	Lcd_Write_String@a+1,c
  1403  001DB4  0EC5               	movlw	low STR_21
  1404  001DB6  6E1D               	movwf	Lcd_Write_String@a,c
  1405  001DB8  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  1406                           
  1407                           ;robot.c: 149: FinComandT = 0;
  1408  001DBC  0E00               	movlw	0
  1409  001DBE  6E37               	movwf	_FinComandT,c
  1410                           
  1411                           ;robot.c: 150: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1412  001DC0  0E4F               	movlw	79
  1413  001DC2  16AB               	andwf	4011,f,c	;volatile
  1414  001DC4  9AAC               	bcf	4012,5,c	;volatile
  1415  001DC6  0ECF               	movlw	207
  1416  001DC8  169D               	andwf	3997,f,c	;volatile
  1417                           
  1418                           ;robot.c: 151: Comando_Tablet();
  1419  001DCA  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1420                           
  1421                           ;robot.c: 152: UART1_Init(51);
  1422  001DCE  0E33               	movlw	51
  1423  001DD0  ECBD  F014         	call	_UART1_Init
  1424                           
  1425                           ;robot.c: 154: }
  1426  001DD4  D7DC               	goto	l5881
  1427  001DD6                     l5907:
  1428                           
  1429                           ;robot.c: 155: else if (FinComandB == 1) {
  1430  001DD6  0436               	decf	_FinComandB,w,c
  1431  001DD8  A4D8               	btfss	status,2,c
  1432  001DDA  D7D9               	goto	l5881
  1433                           
  1434                           ;robot.c: 160: FinComandB = 0;
  1435  001DDC  0E00               	movlw	0
  1436  001DDE  6E36               	movwf	_FinComandB,c
  1437                           
  1438                           ;robot.c: 161: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1439  001DE0  0E4F               	movlw	79
  1440  001DE2  16AB               	andwf	4011,f,c	;volatile
  1441  001DE4  9AAC               	bcf	4012,5,c	;volatile
  1442  001DE6  0ECF               	movlw	207
  1443  001DE8  169D               	andwf	3997,f,c	;volatile
  1444  001DEA  D7D1               	goto	l5881
  1445  001DEC                     __end_of_main:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           intcon	equ	0xFF2
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _Lcd_Init *****************
  1459 ;; Defined at:
  1460 ;;		line 57 in file "lcd.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;		None               void
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1474 ;;      Params:         0       0       0       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1476 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1477 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1478 ;;Total ram usage:        1 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    6
  1481 ;; This function calls:
  1482 ;;		_Lcd_Cmd
  1483 ;;		_Lcd_Port
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text1
  1490  002294                     __ptext1:
  1491                           	opt stack 0
  1492  002294                     _Lcd_Init:
  1493                           	opt stack 24
  1494                           
  1495                           ;lcd.c: 58: Lcd_Port(0x00);
  1496                           
  1497                           ;incstack = 0
  1498  002294  0E00               	movlw	0
  1499  002296  ECE5  F013         	call	_Lcd_Port
  1500                           
  1501                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1502  00229A  0E1A               	movlw	26
  1503  00229C  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1504  00229E  0EF8               	movlw	248
  1505  0022A0                     u6947:
  1506  0022A0  2EE8               	decfsz	wreg,f,c
  1507  0022A2  D7FE               	goto	u6947
  1508  0022A4  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1509  0022A6  D7FC               	goto	u6947
  1510  0022A8  D000               	nop2	
  1511                           
  1512                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1513  0022AA  0E03               	movlw	3
  1514  0022AC  EC49  F014         	call	_Lcd_Cmd
  1515                           
  1516                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1517  0022B0  0E07               	movlw	7
  1518  0022B2  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1519  0022B4  0E7D               	movlw	125
  1520  0022B6                     u6957:
  1521  0022B6  2EE8               	decfsz	wreg,f,c
  1522  0022B8  D7FE               	goto	u6957
  1523  0022BA  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1524  0022BC  D7FC               	goto	u6957
  1525  0022BE  F000               	nop	
  1526                           
  1527                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1528  0022C0  0E03               	movlw	3
  1529  0022C2  EC49  F014         	call	_Lcd_Cmd
  1530                           
  1531                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1532  0022C6  0E0F               	movlw	15
  1533  0022C8  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1534  0022CA  0E48               	movlw	72
  1535  0022CC                     u6967:
  1536  0022CC  2EE8               	decfsz	wreg,f,c
  1537  0022CE  D7FE               	goto	u6967
  1538  0022D0  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1539  0022D2  D7FC               	goto	u6967
  1540                           
  1541                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1542  0022D4  0E03               	movlw	3
  1543  0022D6  EC49  F014         	call	_Lcd_Cmd
  1544                           
  1545                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1546  0022DA  0E02               	movlw	2
  1547  0022DC  EC49  F014         	call	_Lcd_Cmd
  1548                           
  1549                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1550  0022E0  0E02               	movlw	2
  1551  0022E2  EC49  F014         	call	_Lcd_Cmd
  1552                           
  1553                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1554  0022E6  0E08               	movlw	8
  1555  0022E8  EC49  F014         	call	_Lcd_Cmd
  1556                           
  1557                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1558  0022EC  0E00               	movlw	0
  1559  0022EE  EC49  F014         	call	_Lcd_Cmd
  1560                           
  1561                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1562  0022F2  0E0C               	movlw	12
  1563  0022F4  EC49  F014         	call	_Lcd_Cmd
  1564                           
  1565                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1566  0022F8  0E00               	movlw	0
  1567  0022FA  EC49  F014         	call	_Lcd_Cmd
  1568                           
  1569                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1570  0022FE  0E06               	movlw	6
  1571  002300  EC49  F014         	call	_Lcd_Cmd
  1572  002304  0012               	return	
  1573  002306                     __end_of_Lcd_Init:
  1574                           	opt stack 0
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           status	equ	0xFD8
  1585                           
  1586 ;; *************** function _Inicializa_Driveby *****************
  1587 ;; Defined at:
  1588 ;;		line 62 in file "Funciones_Db.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  i               2   39[COMRAM] int 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1604 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1605 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1606 ;;Total ram usage:        3 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    9
  1609 ;; This function calls:
  1610 ;;		_BT_Init
  1611 ;;		_Lcd_Clear
  1612 ;;		_Lcd_Set_Cursor
  1613 ;;		_Lcd_Write_String
  1614 ;;		_Pause_seg
  1615 ;;		_clrBufferUSART
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text2
  1622  0019E8                     __ptext2:
  1623                           	opt stack 0
  1624  0019E8                     _Inicializa_Driveby:
  1625                           	opt stack 21
  1626                           
  1627                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1628                           
  1629                           ;incstack = 0
  1630  0019E8  0E00               	movlw	0
  1631  0019EA  6E95               	movwf	3989,c	;volatile
  1632  0019EC  CF95 FF94          	movff	3989,3988	;volatile
  1633  0019F0  CF94 FF93          	movff	3988,3987	;volatile
  1634  0019F4  CF93 FF92          	movff	3987,3986	;volatile
  1635                           
  1636                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1637  0019F8  0EC0               	movlw	192
  1638  0019FA  6EF2               	movwf	intcon,c	;volatile
  1639                           
  1640                           ;Funciones_Db.c: 67: int i = 0;
  1641  0019FC  0E00               	movlw	0
  1642  0019FE  6E29               	movwf	Inicializa_Driveby@i+1,c
  1643  001A00  0E00               	movlw	0
  1644  001A02  6E28               	movwf	Inicializa_Driveby@i,c
  1645                           
  1646                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1647  001A04  0E34               	movlw	52
  1648  001A06  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1649  001A08  0EF2               	movlw	242
  1650  001A0A                     u6977:
  1651  001A0A  2EE8               	decfsz	wreg,f,c
  1652  001A0C  D7FE               	goto	u6977
  1653  001A0E  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1654  001A10  D7FC               	goto	u6977
  1655                           
  1656                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1657  001A12  88D3               	bsf	4051,4,c	;volatile
  1658  001A14  8AD3               	bsf	4051,5,c	;volatile
  1659  001A16  8CD3               	bsf	4051,6,c	;volatile
  1660                           
  1661                           ;Funciones_Db.c: 74: TRISA = 0;
  1662  001A18  0E00               	movlw	0
  1663  001A1A  6E92               	movwf	3986,c	;volatile
  1664                           
  1665                           ;Funciones_Db.c: 75: PORTA = 0;
  1666  001A1C  0E00               	movlw	0
  1667  001A1E  6E80               	movwf	3968,c	;volatile
  1668                           
  1669                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  1670  001A20  8E94               	bsf	3988,7,c	;volatile
  1671                           
  1672                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  1673  001A22  9C94               	bcf	3988,6,c	;volatile
  1674                           
  1675                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  1676  001A24  0E00               	movlw	0
  1677  001A26  6E29               	movwf	Inicializa_Driveby@i+1,c
  1678  001A28  0E01               	movlw	1
  1679  001A2A  6E28               	movwf	Inicializa_Driveby@i,c
  1680  001A2C  5029               	movf	Inicializa_Driveby@i+1,w,c
  1681  001A2E  0A80               	xorlw	128
  1682  001A30  0F80               	addlw	-128
  1683  001A32  0E33               	movlw	51
  1684  001A34  B4D8               	btfsc	status,2,c
  1685  001A36  5C28               	subwf	Inicializa_Driveby@i,w,c
  1686  001A38  B0D8               	btfsc	status,0,c
  1687  001A3A  D00B               	goto	l5711
  1688                           
  1689                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1690  001A3C  0E1A               	movlw	26
  1691  001A3E  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1692  001A40  0EF8               	movlw	248
  1693  001A42                     u6987:
  1694  001A42  2EE8               	decfsz	wreg,f,c
  1695  001A44  D7FE               	goto	u6987
  1696  001A46  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1697  001A48  D7FC               	goto	u6987
  1698  001A4A  D000               	nop2	
  1699  001A4C  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1700  001A4E  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1701  001A50  D7ED               	goto	L1
  1702  001A52                     l5711:
  1703                           
  1704                           ;Funciones_Db.c: 80: PORTE = 0;
  1705  001A52  0E00               	movlw	0
  1706  001A54  6E84               	movwf	3972,c	;volatile
  1707                           
  1708                           ;Funciones_Db.c: 81: PORTB = 0;
  1709  001A56  0E00               	movlw	0
  1710  001A58  6E81               	movwf	3969,c	;volatile
  1711                           
  1712                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  1713  001A5A  8093               	bsf	3987,0,c	;volatile
  1714                           
  1715                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  1716  001A5C  8293               	bsf	3987,1,c	;volatile
  1717                           
  1718                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  1719  001A5E  8493               	bsf	3987,2,c	;volatile
  1720                           
  1721                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  1722  001A60  8693               	bsf	3987,3,c	;volatile
  1723                           
  1724                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  1725  001A62  8893               	bsf	3987,4,c	;volatile
  1726                           
  1727                           ;Funciones_Db.c: 87: Lcd_Clear();
  1728  001A64  ECCC  F014         	call	_Lcd_Clear	;wreg free
  1729                           
  1730                           ;Funciones_Db.c: 88: Lcd_Set_Cursor(2, 1);
  1731  001A68  0E01               	movlw	1
  1732  001A6A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1733  001A6C  0E02               	movlw	2
  1734  001A6E  EC4D  F012         	call	_Lcd_Set_Cursor
  1735                           
  1736                           ;Funciones_Db.c: 89: Lcd_Write_String("INICIO");
  1737  001A72  0E7F               	movlw	high STR_10
  1738  001A74  6E1E               	movwf	Lcd_Write_String@a+1,c
  1739  001A76  0EF3               	movlw	low STR_10
  1740  001A78  6E1D               	movwf	Lcd_Write_String@a,c
  1741  001A7A  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  1742                           
  1743                           ;Funciones_Db.c: 91: BT_Init();
  1744  001A7E  EC06  F00E         	call	_BT_Init	;wreg free
  1745                           
  1746                           ;Funciones_Db.c: 92: Lcd_Clear();
  1747  001A82  ECCC  F014         	call	_Lcd_Clear	;wreg free
  1748                           
  1749                           ;Funciones_Db.c: 93: Lcd_Set_Cursor(1, 1);
  1750  001A86  0E01               	movlw	1
  1751  001A88  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1752  001A8A  0E01               	movlw	1
  1753  001A8C  EC4D  F012         	call	_Lcd_Set_Cursor
  1754                           
  1755                           ;Funciones_Db.c: 94: Lcd_Write_String("BT INICIALIZADO");
  1756  001A90  0E7F               	movlw	high STR_11
  1757  001A92  6E1E               	movwf	Lcd_Write_String@a+1,c
  1758  001A94  0E55               	movlw	low STR_11
  1759  001A96  6E1D               	movwf	Lcd_Write_String@a,c
  1760  001A98  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  1761                           
  1762                           ;Funciones_Db.c: 96: Pause_seg(7);
  1763  001A9C  0E07               	movlw	7
  1764  001A9E  ECC2  F012         	call	_Pause_seg
  1765                           
  1766                           ;Funciones_Db.c: 97: cad = 0;
  1767  001AA2  0E00               	movlw	0
  1768  001AA4  6E3D               	movwf	_cad,c
  1769                           
  1770                           ;Funciones_Db.c: 98: clrBufferUSART();
  1771  001AA6  EC78  F013         	call	_clrBufferUSART	;wreg free
  1772                           
  1773                           ;Funciones_Db.c: 99: return;
  1774  001AAA  0012               	return	
  1775  001AAC                     __end_of_Inicializa_Driveby:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           intcon	equ	0xFF2
  1782                           postinc0	equ	0xFEE
  1783                           wreg	equ	0xFE8
  1784                           postdec1	equ	0xFE5
  1785                           fsr1l	equ	0xFE1
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _BT_Init *****************
  1789 ;; Defined at:
  1790 ;;		line 16 in file "Bluetooth.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1804 ;;      Params:         0       0       0       0       0       0       0       0       0
  1805 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1807 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1808 ;;Total ram usage:       18 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    8
  1811 ;; This function calls:
  1812 ;;		_Pause_seg
  1813 ;;		_SendBlueToothCommand
  1814 ;;		_UART1_Init
  1815 ;; This function is called by:
  1816 ;;		_Inicializa_Driveby
  1817 ;;		_EstadoBluetooth
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text3
  1822  001C0C                     __ptext3:
  1823                           	opt stack 0
  1824  001C0C                     _BT_Init:
  1825                           	opt stack 21
  1826                           
  1827                           ;Bluetooth.c: 18: UART1_Init(51);
  1828                           
  1829                           ;incstack = 0
  1830  001C0C  0E33               	movlw	51
  1831  001C0E  ECBD  F014         	call	_UART1_Init
  1832                           
  1833                           ;Bluetooth.c: 21: Pause_seg(1);
  1834  001C12  0E01               	movlw	1
  1835  001C14  ECC2  F012         	call	_Pause_seg
  1836                           
  1837                           ;Bluetooth.c: 22: char nameBT[18] = {
  1838                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1839                           ;Bluetooth.c: 24: };
  1840  001C18  EE20  F0EC         	lfsr	2,BT_Init@F5671
  1841  001C1C  EE10  F060         	lfsr	1,BT_Init@nameBT
  1842  001C20  0E12               	movlw	18
  1843  001C22                     u6311:
  1844  001C22  CFDE FFE6          	movff	postinc2,postinc1
  1845  001C26  2EE8               	decfsz	wreg,f,c
  1846  001C28  D7FC               	goto	u6311
  1847                           
  1848                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1849  001C2A  0E7F               	movlw	high STR_1
  1850  001C2C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1851  001C2E  0EB9               	movlw	low STR_1
  1852  001C30  6E23               	movwf	SendBlueToothCommand@command,c
  1853  001C32  0E00               	movlw	0
  1854  001C34  6E26               	movwf	SendBlueToothCommand@total+1,c
  1855  001C36  0E0B               	movlw	11
  1856  001C38  6E25               	movwf	SendBlueToothCommand@total,c
  1857  001C3A  EC96  F014         	call	_SendBlueToothCommand	;wreg free
  1858                           
  1859                           ;Bluetooth.c: 29: Pause_seg(1);
  1860  001C3E  0E01               	movlw	1
  1861  001C40  ECC2  F012         	call	_Pause_seg
  1862                           
  1863                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1864  001C44  0100               	movlb	0	; () banked
  1865  001C46  0E00               	movlw	high BT_Init@nameBT
  1866  001C48  6E24               	movwf	SendBlueToothCommand@command+1,c
  1867  001C4A  0100               	movlb	0	; () banked
  1868  001C4C  0E60               	movlw	low BT_Init@nameBT
  1869  001C4E  6E23               	movwf	SendBlueToothCommand@command,c
  1870  001C50  0E00               	movlw	0
  1871  001C52  6E26               	movwf	SendBlueToothCommand@total+1,c
  1872  001C54  0E12               	movlw	18
  1873  001C56  6E25               	movwf	SendBlueToothCommand@total,c
  1874  001C58  EC96  F014         	call	_SendBlueToothCommand	;wreg free
  1875                           
  1876                           ;Bluetooth.c: 33: Pause_seg(2);
  1877  001C5C  0E02               	movlw	2
  1878  001C5E  ECC2  F012         	call	_Pause_seg
  1879                           
  1880                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1881  001C62  0E7F               	movlw	high STR_2
  1882  001C64  6E24               	movwf	SendBlueToothCommand@command+1,c
  1883  001C66  0E65               	movlw	low STR_2
  1884  001C68  6E23               	movwf	SendBlueToothCommand@command,c
  1885  001C6A  0E00               	movlw	0
  1886  001C6C  6E26               	movwf	SendBlueToothCommand@total+1,c
  1887  001C6E  0E0E               	movlw	14
  1888  001C70  6E25               	movwf	SendBlueToothCommand@total,c
  1889  001C72  EC96  F014         	call	_SendBlueToothCommand	;wreg free
  1890                           
  1891                           ;Bluetooth.c: 36: Pause_seg(2);
  1892  001C76  0E02               	movlw	2
  1893  001C78  ECC2  F012         	call	_Pause_seg
  1894                           
  1895                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1896  001C7C  0E7F               	movlw	high STR_3
  1897  001C7E  6E24               	movwf	SendBlueToothCommand@command+1,c
  1898  001C80  0EDB               	movlw	low STR_3
  1899  001C82  6E23               	movwf	SendBlueToothCommand@command,c
  1900  001C84  0E00               	movlw	0
  1901  001C86  6E26               	movwf	SendBlueToothCommand@total+1,c
  1902  001C88  0E08               	movlw	8
  1903  001C8A  6E25               	movwf	SendBlueToothCommand@total,c
  1904  001C8C  EC96  F014         	call	_SendBlueToothCommand	;wreg free
  1905                           
  1906                           ;Bluetooth.c: 41: Pause_seg(2);
  1907  001C90  0E02               	movlw	2
  1908  001C92  ECC2  F012         	call	_Pause_seg
  1909                           
  1910                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1911  001C96  0E7F               	movlw	high STR_3
  1912  001C98  6E24               	movwf	SendBlueToothCommand@command+1,c
  1913  001C9A  0EDB               	movlw	low STR_3
  1914  001C9C  6E23               	movwf	SendBlueToothCommand@command,c
  1915  001C9E  0E00               	movlw	0
  1916  001CA0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1917  001CA2  0E08               	movlw	8
  1918  001CA4  6E25               	movwf	SendBlueToothCommand@total,c
  1919  001CA6  EC96  F014         	call	_SendBlueToothCommand	;wreg free
  1920                           
  1921                           ;Bluetooth.c: 44: Pause_seg(2);
  1922  001CAA  0E02               	movlw	2
  1923  001CAC  ECC2  F012         	call	_Pause_seg
  1924                           
  1925                           ;Bluetooth.c: 45: return;
  1926  001CB0  0012               	return	
  1927  001CB2                     __end_of_BT_Init:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postinc1	equ	0xFE6
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           postinc2	equ	0xFDE
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _SendBlueToothCommand *****************
  1943 ;; Defined at:
  1944 ;;		line 48 in file "Bluetooth.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1947 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1948 ;;		 -> BT_Init@nameBT(18), 
  1949 ;;  total           2   36[COMRAM] unsigned int 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;		None               void
  1954 ;; Registers used:
  1955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1961 ;;      Params:         4       0       0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1964 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1965 ;;Total ram usage:        4 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    7
  1968 ;; This function calls:
  1969 ;;		_putSTRINGU1
  1970 ;; This function is called by:
  1971 ;;		_BT_Init
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text4
  1976  00292C                     __ptext4:
  1977                           	opt stack 0
  1978  00292C                     _SendBlueToothCommand:
  1979                           	opt stack 21
  1980                           
  1981                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1982                           
  1983                           ;incstack = 0
  1984  00292C  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1985  002930  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1986  002934  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1987  002938  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1988  00293C  ECF6  F00E         	call	_putSTRINGU1	;wreg free
  1989                           
  1990                           ;Bluetooth.c: 50: return;
  1991  002940  0012               	return	
  1992  002942                     __end_of_SendBlueToothCommand:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           intcon	equ	0xFF2
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postinc1	equ	0xFE6
  2002                           postdec1	equ	0xFE5
  2003                           fsr1l	equ	0xFE1
  2004                           postinc2	equ	0xFDE
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _putSTRINGU1 *****************
  2008 ;; Defined at:
  2009 ;;		line 18 in file "UART1.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  2012 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2013 ;;		 -> BT_Init@nameBT(18), 
  2014 ;;  total           2   28[COMRAM] unsigned int 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  cont            1   33[COMRAM] unsigned char 
  2017 ;;  last            1   32[COMRAM] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;		None               void
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2027 ;;      Params:         4       0       0       0       0       0       0       0       0
  2028 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2029 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2030 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2031 ;;Total ram usage:        8 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    6
  2034 ;; This function calls:
  2035 ;;		_putcTxU1
  2036 ;; This function is called by:
  2037 ;;		_SendBlueToothCommand
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text5
  2042  001DEC                     __ptext5:
  2043                           	opt stack 0
  2044  001DEC                     _putSTRINGU1:
  2045                           	opt stack 21
  2046                           
  2047                           ;UART1.c: 19: unsigned char cont,last;
  2048                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2049                           
  2050                           ;incstack = 0
  2051  001DEC  0E00               	movlw	0
  2052  001DEE  6E22               	movwf	putSTRINGU1@cont,c
  2053  001DF0  0E00               	movlw	0
  2054  001DF2  6E21               	movwf	putSTRINGU1@last,c
  2055  001DF4  D01F               	goto	l4743
  2056  001DF6                     l4737:
  2057                           
  2058                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2059  001DF6  5022               	movf	putSTRINGU1@cont,w,c
  2060  001DF8  0D01               	mullw	1
  2061  001DFA  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2062  001DFE  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2063  001E02  50F3               	movf	prodl,w,c
  2064  001E04  261F               	addwf	??_putSTRINGU1,f,c
  2065  001E06  50F4               	movf	prodh,w,c
  2066  001E08  2220               	addwfc	??_putSTRINGU1+1,f,c
  2067  001E0A  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2068  001E0E  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2069  001E12  6AF8               	clrf	tblptru,c
  2070  001E14  0E07               	movlw	(high __ramtop+-1)
  2071  001E16  64F7               	cpfsgt	tblptrh,c
  2072  001E18  D003               	bra	u5327
  2073  001E1A  0008               	tblrd		*
  2074  001E1C  50F5               	movf	tablat,w,c
  2075  001E1E  D005               	bra	u5320
  2076  001E20                     u5327:
  2077  001E20  CFF6 FFE9          	movff	tblptrl,fsr0l
  2078  001E24  CFF7 FFEA          	movff	tblptrh,fsr0h
  2079  001E28  50EF               	movf	indf0,w,c
  2080  001E2A                     u5320:
  2081  001E2A  0900               	iorlw	0
  2082  001E2C  A4D8               	btfss	status,2,c
  2083  001E2E  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2084  001E32  2A22               	incf	putSTRINGU1@cont,f,c
  2085  001E34                     l4743:
  2086  001E34  5022               	movf	putSTRINGU1@cont,w,c
  2087  001E36  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2088  001E38  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2089  001E3A  501D               	movf	putSTRINGU1@total,w,c
  2090  001E3C  5C1F               	subwf	??_putSTRINGU1,w,c
  2091  001E3E  501E               	movf	putSTRINGU1@total+1,w,c
  2092  001E40  5820               	subwfb	??_putSTRINGU1+1,w,c
  2093  001E42  A0D8               	btfss	status,0,c
  2094  001E44  D7D8               	goto	l4737
  2095                           
  2096                           ;UART1.c: 23: }
  2097                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2098  001E46  0E00               	movlw	0
  2099  001E48  6E22               	movwf	putSTRINGU1@cont,c
  2100  001E4A  D015               	goto	l4753
  2101  001E4C                     l4747:
  2102                           
  2103                           ;UART1.c: 26: putcTxU1(*dato++);
  2104  001E4C  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2105  001E50  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2106  001E54  6AF8               	clrf	tblptru,c
  2107  001E56  0E07               	movlw	(high __ramtop+-1)
  2108  001E58  64F7               	cpfsgt	tblptrh,c
  2109  001E5A  D003               	bra	u5357
  2110  001E5C  0008               	tblrd		*
  2111  001E5E  50F5               	movf	tablat,w,c
  2112  001E60  D005               	bra	u5350
  2113  001E62                     u5357:
  2114  001E62  CFF6 FFE9          	movff	tblptrl,fsr0l
  2115  001E66  CFF7 FFEA          	movff	tblptrh,fsr0h
  2116  001E6A  50EF               	movf	indf0,w,c
  2117  001E6C                     u5350:
  2118  001E6C  ECC5  F014         	call	_putcTxU1
  2119  001E70  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2120  001E72  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2121  001E74  2A22               	incf	putSTRINGU1@cont,f,c
  2122  001E76                     l4753:
  2123  001E76  5022               	movf	putSTRINGU1@cont,w,c
  2124  001E78  5C21               	subwf	putSTRINGU1@last,w,c
  2125  001E7A  A0D8               	btfss	status,0,c
  2126  001E7C  0012               	return	
  2127  001E7E  D7E6               	goto	l4747
  2128  001E80                     __end_of_putSTRINGU1:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           indf0	equ	0xFEF
  2138                           postinc0	equ	0xFEE
  2139                           fsr0h	equ	0xFEA
  2140                           fsr0l	equ	0xFE9
  2141                           wreg	equ	0xFE8
  2142                           postinc1	equ	0xFE6
  2143                           postdec1	equ	0xFE5
  2144                           fsr1l	equ	0xFE1
  2145                           postinc2	equ	0xFDE
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _putcTxU1 *****************
  2149 ;; Defined at:
  2150 ;;		line 12 in file "UART1.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  character       1    wreg     unsigned char 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  character       1   25[COMRAM] unsigned char 
  2155 ;; Return value:  Size  Location     Type
  2156 ;;		None               void
  2157 ;; Registers used:
  2158 ;;		wreg, status,2, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0
  2165 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2167 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2168 ;;Total ram usage:        1 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    5
  2171 ;; This function calls:
  2172 ;;		_WriteUSART
  2173 ;; This function is called by:
  2174 ;;		_putSTRINGU1
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text6
  2179  00298A                     __ptext6:
  2180                           	opt stack 0
  2181  00298A                     _putcTxU1:
  2182                           	opt stack 21
  2183                           
  2184                           ;incstack = 0
  2185                           ;putcTxU1@character stored from wreg
  2186  00298A  6E1A               	movwf	putcTxU1@character,c
  2187                           
  2188                           ;UART1.c: 14: WriteUSART(character);
  2189  00298C  501A               	movf	putcTxU1@character,w,c
  2190  00298E  ECAB  F014         	call	_WriteUSART
  2191  002992                     l230:
  2192  002992  B2AC               	btfsc	4012,1,c	;volatile
  2193  002994  0012               	return	
  2194  002996  D7FD               	goto	l230
  2195  002998                     __end_of_putcTxU1:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           intcon	equ	0xFF2
  2204                           indf0	equ	0xFEF
  2205                           postinc0	equ	0xFEE
  2206                           fsr0h	equ	0xFEA
  2207                           fsr0l	equ	0xFE9
  2208                           wreg	equ	0xFE8
  2209                           postinc1	equ	0xFE6
  2210                           postdec1	equ	0xFE5
  2211                           fsr1l	equ	0xFE1
  2212                           postinc2	equ	0xFDE
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _Pause_seg *****************
  2216 ;; Defined at:
  2217 ;;		line 18 in file "Retardos.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  x               1    wreg     unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  x               1   29[COMRAM] unsigned char 
  2222 ;;  i               1   30[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0
  2233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2235 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2236 ;;Total ram usage:        2 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    5
  2239 ;; This function calls:
  2240 ;;		_Pause_ms
  2241 ;; This function is called by:
  2242 ;;		_BT_Init
  2243 ;;		_Inicializa_Driveby
  2244 ;;		_EstadoBluetooth
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text7
  2249  002584                     __ptext7:
  2250                           	opt stack 0
  2251  002584                     _Pause_seg:
  2252                           	opt stack 24
  2253                           
  2254                           ;incstack = 0
  2255                           ;Pause_seg@x stored from wreg
  2256  002584  6E1E               	movwf	Pause_seg@x,c
  2257                           
  2258                           ;Retardos.c: 19: unsigned char i=0;
  2259  002586  0E00               	movlw	0
  2260  002588  6E1F               	movwf	Pause_seg@i,c
  2261                           
  2262                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2263  00258A  0E00               	movlw	0
  2264  00258C  6E1F               	movwf	Pause_seg@i,c
  2265  00258E  D019               	goto	l5133
  2266  002590                     l5129:
  2267                           
  2268                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2269  002590  0E00               	movlw	0
  2270  002592  6E1A               	movwf	Pause_ms@x+1,c
  2271  002594  0EFA               	movlw	250
  2272  002596  6E19               	movwf	Pause_ms@x,c
  2273  002598  ECCC  F013         	call	_Pause_ms	;wreg free
  2274  00259C  0E00               	movlw	0
  2275  00259E  6E1A               	movwf	Pause_ms@x+1,c
  2276  0025A0  0EFA               	movlw	250
  2277  0025A2  6E19               	movwf	Pause_ms@x,c
  2278  0025A4  ECCC  F013         	call	_Pause_ms	;wreg free
  2279                           
  2280                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2281  0025A8  0E00               	movlw	0
  2282  0025AA  6E1A               	movwf	Pause_ms@x+1,c
  2283  0025AC  0EFA               	movlw	250
  2284  0025AE  6E19               	movwf	Pause_ms@x,c
  2285  0025B0  ECCC  F013         	call	_Pause_ms	;wreg free
  2286  0025B4  0E00               	movlw	0
  2287  0025B6  6E1A               	movwf	Pause_ms@x+1,c
  2288  0025B8  0EFA               	movlw	250
  2289  0025BA  6E19               	movwf	Pause_ms@x,c
  2290  0025BC  ECCC  F013         	call	_Pause_ms	;wreg free
  2291  0025C0  2A1F               	incf	Pause_seg@i,f,c
  2292  0025C2                     l5133:
  2293  0025C2  501F               	movf	Pause_seg@i,w,c
  2294  0025C4  5C1E               	subwf	Pause_seg@x,w,c
  2295  0025C6  A0D8               	btfss	status,0,c
  2296  0025C8  0012               	return	
  2297  0025CA  D7E2               	goto	l5129
  2298  0025CC                     __end_of_Pause_seg:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           intcon	equ	0xFF2
  2307                           indf0	equ	0xFEF
  2308                           postinc0	equ	0xFEE
  2309                           fsr0h	equ	0xFEA
  2310                           fsr0l	equ	0xFE9
  2311                           wreg	equ	0xFE8
  2312                           postinc1	equ	0xFE6
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           postinc2	equ	0xFDE
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _Pause_ms *****************
  2319 ;; Defined at:
  2320 ;;		line 11 in file "Retardos.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  x               2   24[COMRAM] unsigned int 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  i               2   27[COMRAM] unsigned int 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2334 ;;      Params:         2       0       0       0       0       0       0       0       0
  2335 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2336 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2337 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2338 ;;Total ram usage:        5 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    4
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_Pause_seg
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  002798                     __ptext8:
  2350                           	opt stack 0
  2351  002798                     _Pause_ms:
  2352                           	opt stack 24
  2353                           
  2354                           ;Retardos.c: 12: unsigned int i=0;
  2355                           
  2356                           ;incstack = 0
  2357  002798  0E00               	movlw	0
  2358  00279A  6E1D               	movwf	Pause_ms@i+1,c
  2359  00279C  0E00               	movlw	0
  2360  00279E  6E1C               	movwf	Pause_ms@i,c
  2361                           
  2362                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2363  0027A0  0E00               	movlw	0
  2364  0027A2  6E1D               	movwf	Pause_ms@i+1,c
  2365  0027A4  0E00               	movlw	0
  2366  0027A6  6E1C               	movwf	Pause_ms@i,c
  2367  0027A8  D009               	goto	l209
  2368  0027AA                     l4757:
  2369                           
  2370                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2371  0027AA  0E03               	movlw	3
  2372  0027AC  6E1B               	movwf	??_Pause_ms& (0+255),c
  2373  0027AE  0E98               	movlw	152
  2374  0027B0                     u6997:
  2375  0027B0  2EE8               	decfsz	wreg,f,c
  2376  0027B2  D7FE               	goto	u6997
  2377  0027B4  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2378  0027B6  D7FC               	goto	u6997
  2379  0027B8  4A1C               	infsnz	Pause_ms@i,f,c
  2380  0027BA  2A1D               	incf	Pause_ms@i+1,f,c
  2381  0027BC                     l209:
  2382  0027BC  501C               	movf	Pause_ms@i,w,c
  2383  0027BE  5C19               	subwf	Pause_ms@x,w,c
  2384  0027C0  501D               	movf	Pause_ms@i+1,w,c
  2385  0027C2  581A               	subwfb	Pause_ms@x+1,w,c
  2386  0027C4  A0D8               	btfss	status,0,c
  2387  0027C6  0012               	return	
  2388  0027C8  D7F0               	goto	l4757
  2389  0027CA                     __end_of_Pause_ms:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           indf0	equ	0xFEF
  2399                           postinc0	equ	0xFEE
  2400                           fsr0h	equ	0xFEA
  2401                           fsr0l	equ	0xFE9
  2402                           wreg	equ	0xFE8
  2403                           postinc1	equ	0xFE6
  2404                           postdec1	equ	0xFE5
  2405                           fsr1l	equ	0xFE1
  2406                           postinc2	equ	0xFDE
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _Comando_Tablet *****************
  2410 ;; Defined at:
  2411 ;;		line 104 in file "Funciones_Db.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  sensed          2   22[BANK1 ] int 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2425 ;;      Params:         0       0       0       0       0       0       0       0       0
  2426 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2428 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2429 ;;Total ram usage:        2 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    9
  2432 ;; This function calls:
  2433 ;;		_Lcd_Clear
  2434 ;;		_Lcd_Set_Cursor
  2435 ;;		_Lcd_Write_Integer
  2436 ;;		_Lcd_Write_String
  2437 ;;		_PWM_DutyCycle1
  2438 ;;		_PWM_DutyCycle2
  2439 ;;		_PWM_init1
  2440 ;;		_PWM_init2
  2441 ;;		_clrBufferUSART
  2442 ;;		_getCNY70Value
  2443 ;;		_putcBluetoothInt
  2444 ;;		_putcBluetoothString
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text9
  2451  001580                     __ptext9:
  2452                           	opt stack 0
  2453  001580                     _Comando_Tablet:
  2454                           	opt stack 21
  2455                           
  2456                           ;Funciones_Db.c: 106: int sensed=0;
  2457                           
  2458                           ;incstack = 0
  2459  001580  0E00               	movlw	0
  2460  001582  0101               	movlb	1	; () banked
  2461  001584  6F71               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  2462  001586  0E00               	movlw	0
  2463  001588  0101               	movlb	1	; () banked
  2464  00158A  6F70               	movwf	Comando_Tablet@sensed& (0+255),b
  2465                           
  2466                           ;Funciones_Db.c: 107: switch (BluetoothDato[1]) {
  2467  00158C  D083               	goto	l5801
  2468  00158E                     l5747:
  2469                           
  2470                           ; BSR set to: 1
  2471                           ;Funciones_Db.c: 109: Lcd_Clear();
  2472  00158E  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2473                           
  2474                           ;Funciones_Db.c: 110: Lcd_Set_Cursor(1, 1);
  2475  001592  0E01               	movlw	1
  2476  001594  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2477  001596  0E01               	movlw	1
  2478  001598  EC4D  F012         	call	_Lcd_Set_Cursor
  2479                           
  2480                           ;Funciones_Db.c: 111: Lcd_Write_String("1");
  2481  00159C  0E7F               	movlw	high STR_12
  2482  00159E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2483  0015A0  0EFA               	movlw	low STR_12
  2484  0015A2  6E1D               	movwf	Lcd_Write_String@a,c
  2485  0015A4  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  2486                           
  2487                           ;Funciones_Db.c: 112: break;
  2488  0015A8  D087               	goto	l5803
  2489  0015AA                     l5753:
  2490                           
  2491                           ;Funciones_Db.c: 114: Lcd_Clear();
  2492  0015AA  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2493                           
  2494                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2495  0015AE  0E01               	movlw	1
  2496  0015B0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2497  0015B2  0E01               	movlw	1
  2498  0015B4  EC4D  F012         	call	_Lcd_Set_Cursor
  2499                           
  2500                           ;Funciones_Db.c: 116: Lcd_Write_String("2");
  2501  0015B8  0E7F               	movlw	high (STR_19+16)
  2502  0015BA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2503  0015BC  0E53               	movlw	low (STR_19+16)
  2504  0015BE  6E1D               	movwf	Lcd_Write_String@a,c
  2505  0015C0  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  2506                           
  2507                           ;Funciones_Db.c: 117: break;
  2508  0015C4  D079               	goto	l5803
  2509  0015C6                     l5759:
  2510                           
  2511                           ;Funciones_Db.c: 120: Lcd_Clear();
  2512  0015C6  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2513                           
  2514                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2515  0015CA  0E01               	movlw	1
  2516  0015CC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2517  0015CE  0E01               	movlw	1
  2518  0015D0  EC4D  F012         	call	_Lcd_Set_Cursor
  2519                           
  2520                           ;Funciones_Db.c: 123: Lcd_Write_String("3");
  2521  0015D4  0E7F               	movlw	high STR_14
  2522  0015D6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2523  0015D8  0EFC               	movlw	low STR_14
  2524  0015DA  6E1D               	movwf	Lcd_Write_String@a,c
  2525  0015DC  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  2526                           
  2527                           ;Funciones_Db.c: 124: break;
  2528  0015E0  D06B               	goto	l5803
  2529  0015E2                     l5765:
  2530                           
  2531                           ;Funciones_Db.c: 129: sensed = getCNY70Value();
  2532  0015E2  EC56  F00D         	call	_getCNY70Value	;wreg free
  2533  0015E6  C019  F170         	movff	?_getCNY70Value,Comando_Tablet@sensed
  2534  0015EA  C01A  F171         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  2535                           
  2536                           ;Funciones_Db.c: 130: Lcd_Clear();
  2537  0015EE  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2538                           
  2539                           ;Funciones_Db.c: 131: Lcd_Set_Cursor(1,1);
  2540  0015F2  0E01               	movlw	1
  2541  0015F4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2542  0015F6  0E01               	movlw	1
  2543  0015F8  EC4D  F012         	call	_Lcd_Set_Cursor
  2544                           
  2545                           ;Funciones_Db.c: 132: Lcd_Write_Integer(sensed);
  2546  0015FC  C170  F0B8         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  2547  001600  C171  F0B9         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  2548  001604  EC5B  F013         	call	_Lcd_Write_Integer	;wreg free
  2549                           
  2550                           ;Funciones_Db.c: 133: putcBluetoothInt(sensed);
  2551  001608  C170  F0B8         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  2552  00160C  C171  F0B9         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  2553  001610  ECD0  F00F         	call	_putcBluetoothInt	;wreg free
  2554                           
  2555                           ;Funciones_Db.c: 134: putcBluetoothString("\n");
  2556  001614  0E7F               	movlw	high (STR_2+13)
  2557  001616  6E21               	movwf	putcBluetoothString@a+1,c
  2558  001618  0E72               	movlw	low (STR_2+13)
  2559  00161A  6E20               	movwf	putcBluetoothString@a,c
  2560  00161C  EC83  F011         	call	_putcBluetoothString	;wreg free
  2561                           
  2562                           ;Funciones_Db.c: 135: break;
  2563  001620  D04B               	goto	l5803
  2564  001622                     l5775:
  2565                           
  2566                           ;Funciones_Db.c: 137: Lcd_Clear();
  2567  001622  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2568                           
  2569                           ;Funciones_Db.c: 138: Lcd_Set_Cursor(1, 1);
  2570  001626  0E01               	movlw	1
  2571  001628  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2572  00162A  0E01               	movlw	1
  2573  00162C  EC4D  F012         	call	_Lcd_Set_Cursor
  2574                           
  2575                           ;Funciones_Db.c: 139: Lcd_Write_Integer(BluetoothDato[3]);
  2576  001630  0101               	movlb	1	; () banked
  2577  001632  0100               	movlb	0	; () banked
  2578  001634  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2579  001638  0100               	movlb	0	; () banked
  2580  00163A  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2581  00163C  EC5B  F013         	call	_Lcd_Write_Integer	;wreg free
  2582                           
  2583                           ;Funciones_Db.c: 140: Lcd_Set_Cursor(2, 1);
  2584  001640  0E01               	movlw	1
  2585  001642  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2586  001644  0E02               	movlw	2
  2587  001646  EC4D  F012         	call	_Lcd_Set_Cursor
  2588                           
  2589                           ;Funciones_Db.c: 141: Lcd_Write_Integer(BluetoothDato[4]);
  2590  00164A  0101               	movlb	1	; () banked
  2591  00164C  0100               	movlb	0	; () banked
  2592  00164E  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2593  001652  0100               	movlb	0	; () banked
  2594  001654  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2595  001656  EC5B  F013         	call	_Lcd_Write_Integer	;wreg free
  2596                           
  2597                           ;Funciones_Db.c: 142: PWM_init1(0xff);
  2598  00165A  0EFF               	movlw	255
  2599  00165C  EC78  F014         	call	_PWM_init1
  2600                           
  2601                           ;Funciones_Db.c: 143: PWM_init2(0xff);
  2602  001660  0EFF               	movlw	255
  2603  001662  EC69  F014         	call	_PWM_init2
  2604                           
  2605                           ;Funciones_Db.c: 144: PWM_DutyCycle1(BluetoothDato[3]);
  2606  001666  0101               	movlb	1	; () banked
  2607  001668  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2608  00166A  EC92  F010         	call	_PWM_DutyCycle1
  2609                           
  2610                           ;Funciones_Db.c: 145: PWM_DutyCycle2(BluetoothDato[4]);
  2611  00166E  0101               	movlb	1	; () banked
  2612  001670  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2613  001672  EC54  F010         	call	_PWM_DutyCycle2
  2614                           
  2615                           ;Funciones_Db.c: 146: break;
  2616  001676  D020               	goto	l5803
  2617  001678                     l5793:
  2618                           
  2619                           ;Funciones_Db.c: 148: Lcd_Clear();
  2620  001678  ECCC  F014         	call	_Lcd_Clear	;wreg free
  2621                           
  2622                           ;Funciones_Db.c: 149: Lcd_Set_Cursor(1, 1);
  2623  00167C  0E01               	movlw	1
  2624  00167E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2625  001680  0E01               	movlw	1
  2626  001682  EC4D  F012         	call	_Lcd_Set_Cursor
  2627                           
  2628                           ;Funciones_Db.c: 150: Lcd_Write_String("Default");
  2629  001686  0E7F               	movlw	high STR_16
  2630  001688  6E1E               	movwf	Lcd_Write_String@a+1,c
  2631  00168A  0EE4               	movlw	low STR_16
  2632  00168C  6E1D               	movwf	Lcd_Write_String@a,c
  2633  00168E  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  2634                           
  2635                           ;Funciones_Db.c: 151: break;
  2636  001692  D012               	goto	l5803
  2637  001694                     l5801:
  2638  001694  0101               	movlb	1	; () banked
  2639  001696  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2640                           
  2641                           ; Switch size 1, requested type "space"
  2642                           ; Number of cases is 5, Range of values is 1 to 5
  2643                           ; switch strategies available:
  2644                           ; Name         Instructions Cycles
  2645                           ; simple_byte           16     9 (average)
  2646                           ;	Chosen strategy is simple_byte
  2647  001698  0A01               	xorlw	1	; case 1
  2648  00169A  B4D8               	btfsc	status,2,c
  2649  00169C  D778               	goto	l5747
  2650  00169E  0A03               	xorlw	3	; case 2
  2651  0016A0  B4D8               	btfsc	status,2,c
  2652  0016A2  D783               	goto	l5753
  2653  0016A4  0A01               	xorlw	1	; case 3
  2654  0016A6  B4D8               	btfsc	status,2,c
  2655  0016A8  D78E               	goto	l5759
  2656  0016AA  0A07               	xorlw	7	; case 4
  2657  0016AC  B4D8               	btfsc	status,2,c
  2658  0016AE  D799               	goto	l5765
  2659  0016B0  0A01               	xorlw	1	; case 5
  2660  0016B2  B4D8               	btfsc	status,2,c
  2661  0016B4  D7B6               	goto	l5775
  2662  0016B6  D7E0               	goto	l5793
  2663  0016B8                     l5803:
  2664                           
  2665                           ;Funciones_Db.c: 153: clrBufferUSART();
  2666  0016B8  EC78  F013         	call	_clrBufferUSART	;wreg free
  2667                           
  2668                           ;Funciones_Db.c: 154: return;
  2669  0016BC  0012               	return	
  2670  0016BE                     __end_of_Comando_Tablet:
  2671                           	opt stack 0
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           indf0	equ	0xFEF
  2680                           postinc0	equ	0xFEE
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           wreg	equ	0xFE8
  2684                           postinc1	equ	0xFE6
  2685                           postdec1	equ	0xFE5
  2686                           fsr1l	equ	0xFE1
  2687                           postinc2	equ	0xFDE
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _putcBluetoothString *****************
  2691 ;; Defined at:
  2692 ;;		line 90 in file "Bluetooth.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  a               2   31[COMRAM] PTR unsigned char 
  2695 ;;		 -> STR_15(2), 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  i               2   35[COMRAM] int 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;		None               void
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         2       0       0       0       0       0       0       0       0
  2708 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2709 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2710 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        6 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    6
  2714 ;; This function calls:
  2715 ;;		_UART1_Init
  2716 ;;		_WriteUSART
  2717 ;; This function is called by:
  2718 ;;		_Comando_Tablet
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text10
  2723  002306                     __ptext10:
  2724                           	opt stack 0
  2725  002306                     _putcBluetoothString:
  2726                           	opt stack 23
  2727                           
  2728                           ;Bluetooth.c: 92: int i;
  2729                           ;Bluetooth.c: 93: UART1_Init(51);
  2730                           
  2731                           ;incstack = 0
  2732  002306  0E33               	movlw	51
  2733  002308  ECBD  F014         	call	_UART1_Init
  2734                           
  2735                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2736  00230C  0E00               	movlw	0
  2737  00230E  6E25               	movwf	putcBluetoothString@i+1,c
  2738  002310  0E00               	movlw	0
  2739  002312  6E24               	movwf	putcBluetoothString@i,c
  2740  002314  D015               	goto	l5449
  2741  002316                     l5445:
  2742                           
  2743                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2744  002316  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2745  00231A  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2746  00231E  5024               	movf	putcBluetoothString@i,w,c
  2747  002320  2622               	addwf	??_putcBluetoothString,f,c
  2748  002322  5025               	movf	putcBluetoothString@i+1,w,c
  2749  002324  2223               	addwfc	??_putcBluetoothString+1,f,c
  2750  002326  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2751  00232A  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2752  00232E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2753  00232E  6AF8               	clrf	tblptru,c
  2754  002330                     	endif
  2755  002330                     	if	0	;tblptru may be non-zero
  2756  002330                     	endif
  2757  002330  0008               	tblrd		*
  2758  002332  50F5               	movf	tablat,w,c
  2759  002334  ECAB  F014         	call	_WriteUSART
  2760  002338                     l59:
  2761  002338  A2AC               	btfss	4012,1,c	;volatile
  2762  00233A  D7FE               	goto	l59
  2763  00233C  4A24               	infsnz	putcBluetoothString@i,f,c
  2764  00233E  2A25               	incf	putcBluetoothString@i+1,f,c
  2765  002340                     l5449:
  2766  002340  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2767  002344  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2768  002348  5024               	movf	putcBluetoothString@i,w,c
  2769  00234A  2622               	addwf	??_putcBluetoothString,f,c
  2770  00234C  5025               	movf	putcBluetoothString@i+1,w,c
  2771  00234E  2223               	addwfc	??_putcBluetoothString+1,f,c
  2772  002350  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2773  002354  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2774  002358                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2775  002358  6AF8               	clrf	tblptru,c
  2776  00235A                     	endif
  2777  00235A                     	if	0	;tblptru may be non-zero
  2778  00235A                     	endif
  2779  00235A  0008               	tblrd		*
  2780  00235C  50F5               	movf	tablat,w,c
  2781  00235E  0900               	iorlw	0
  2782  002360  A4D8               	btfss	status,2,c
  2783  002362  D7D9               	goto	l5445
  2784                           
  2785                           ;Bluetooth.c: 98: }
  2786                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2787  002364  0E4F               	movlw	79
  2788  002366  16AB               	andwf	4011,f,c	;volatile
  2789  002368  9AAC               	bcf	4012,5,c	;volatile
  2790  00236A  0ECF               	movlw	207
  2791  00236C  169D               	andwf	3997,f,c	;volatile
  2792                           
  2793                           ;Bluetooth.c: 100: return;
  2794  00236E  0012               	return	
  2795  002370                     __end_of_putcBluetoothString:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           indf0	equ	0xFEF
  2805                           postinc0	equ	0xFEE
  2806                           fsr0h	equ	0xFEA
  2807                           fsr0l	equ	0xFE9
  2808                           wreg	equ	0xFE8
  2809                           postinc1	equ	0xFE6
  2810                           postdec1	equ	0xFE5
  2811                           fsr1l	equ	0xFE1
  2812                           postinc2	equ	0xFDE
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _putcBluetoothInt *****************
  2816 ;; Defined at:
  2817 ;;		line 102 in file "Bluetooth.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  a               2   88[BANK0 ] int 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  s              20    0[BANK1 ] unsigned char [20]
  2822 ;;  i               2   20[BANK1 ] int 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;		None               void
  2825 ;; Registers used:
  2826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2832 ;;      Params:         0       2       0       0       0       0       0       0       0
  2833 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2835 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2836 ;;Total ram usage:       24 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    8
  2839 ;; This function calls:
  2840 ;;		_UART1_Init
  2841 ;;		_WriteUSART
  2842 ;;		_sprintf
  2843 ;; This function is called by:
  2844 ;;		_Comando_Tablet
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text11
  2849  001FA0                     __ptext11:
  2850                           	opt stack 0
  2851  001FA0                     _putcBluetoothInt:
  2852                           	opt stack 21
  2853                           
  2854                           ;Bluetooth.c: 104: int i;
  2855                           ;Bluetooth.c: 105: unsigned char s[20];
  2856                           ;Bluetooth.c: 106: UART1_Init(51);
  2857                           
  2858                           ;incstack = 0
  2859  001FA0  0E33               	movlw	51
  2860  001FA2  ECBD  F014         	call	_UART1_Init
  2861                           
  2862                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2863  001FA6  0101               	movlb	1	; () banked
  2864  001FA8  0E01               	movlw	high putcBluetoothInt@s
  2865  001FAA  0100               	movlb	0	; () banked
  2866  001FAC  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2867  001FAE  0101               	movlb	1	; () banked
  2868  001FB0  0E5A               	movlw	low putcBluetoothInt@s
  2869  001FB2  0100               	movlb	0	; () banked
  2870  001FB4  6F88               	movwf	sprintf@sp& (0+255),b
  2871  001FB6  0E7F               	movlw	high (STR_18+10)
  2872  001FB8  0100               	movlb	0	; () banked
  2873  001FBA  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2874  001FBC  0EB6               	movlw	low (STR_18+10)
  2875  001FBE  0100               	movlb	0	; () banked
  2876  001FC0  6F8A               	movwf	sprintf@f& (0+255),b
  2877  001FC2  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2878  001FC6  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2879  001FCA  EC0E  F000         	call	_sprintf	;wreg free
  2880                           
  2881                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2882  001FCE  0E00               	movlw	0
  2883  001FD0  0101               	movlb	1	; () banked
  2884  001FD2  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2885  001FD4  0E00               	movlw	0
  2886  001FD6  0101               	movlb	1	; () banked
  2887  001FD8  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2888  001FDA  D012               	goto	l5467
  2889  001FDC                     l5463:
  2890                           
  2891                           ; BSR set to: 1
  2892                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2893  001FDC  0101               	movlb	1	; () banked
  2894  001FDE  0E5A               	movlw	low putcBluetoothInt@s
  2895  001FE0  0101               	movlb	1	; () banked
  2896  001FE2  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2897  001FE4  6ED9               	movwf	fsr2l,c
  2898  001FE6  0101               	movlb	1	; () banked
  2899  001FE8  0E01               	movlw	high putcBluetoothInt@s
  2900  001FEA  0101               	movlb	1	; () banked
  2901  001FEC  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2902  001FEE  6EDA               	movwf	fsr2h,c
  2903  001FF0  50DF               	movf	indf2,w,c
  2904  001FF2  ECAB  F014         	call	_WriteUSART
  2905  001FF6                     l68:
  2906  001FF6  A2AC               	btfss	4012,1,c	;volatile
  2907  001FF8  D7FE               	goto	l68
  2908  001FFA  0101               	movlb	1	; () banked
  2909  001FFC  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2910  001FFE  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2911  002000                     l5467:
  2912                           
  2913                           ; BSR set to: 1
  2914  002000  0101               	movlb	1	; () banked
  2915  002002  0E5A               	movlw	low putcBluetoothInt@s
  2916  002004  0101               	movlb	1	; () banked
  2917  002006  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2918  002008  6ED9               	movwf	fsr2l,c
  2919  00200A  0101               	movlb	1	; () banked
  2920  00200C  0E01               	movlw	high putcBluetoothInt@s
  2921  00200E  0101               	movlb	1	; () banked
  2922  002010  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2923  002012  6EDA               	movwf	fsr2h,c
  2924  002014  50DF               	movf	indf2,w,c
  2925  002016  A4D8               	btfss	status,2,c
  2926  002018  D7E1               	goto	l5463
  2927                           
  2928                           ; BSR set to: 1
  2929                           ;Bluetooth.c: 112: }
  2930                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2931                           
  2932                           ; BSR set to: 1
  2933  00201A  0E4F               	movlw	79
  2934  00201C  16AB               	andwf	4011,f,c	;volatile
  2935                           
  2936                           ; BSR set to: 1
  2937  00201E  9AAC               	bcf	4012,5,c	;volatile
  2938  002020  0ECF               	movlw	207
  2939  002022  169D               	andwf	3997,f,c	;volatile
  2940                           
  2941                           ; BSR set to: 1
  2942                           
  2943                           ; BSR set to: 1
  2944                           ;Bluetooth.c: 114: return;
  2945  002024  0012               	return	
  2946  002026                     __end_of_putcBluetoothInt:
  2947                           	opt stack 0
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           indf0	equ	0xFEF
  2956                           postinc0	equ	0xFEE
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           postinc1	equ	0xFE6
  2961                           postdec1	equ	0xFE5
  2962                           fsr1l	equ	0xFE1
  2963                           indf2	equ	0xFDF
  2964                           postinc2	equ	0xFDE
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _WriteUSART *****************
  2970 ;; Defined at:
  2971 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  data            1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  data            1   24[COMRAM] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;		None               void
  2978 ;; Registers used:
  2979 ;;		wreg
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0
  2986 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2988 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    4
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_putcBluetoothString
  2996 ;;		_putcBluetoothInt
  2997 ;;		_putcTxU1
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text12
  3002  002956                     __ptext12:
  3003                           	opt stack 0
  3004  002956                     _WriteUSART:
  3005                           	opt stack 21
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;incstack = 0
  3009                           ;WriteUSART@data stored from wreg
  3010  002956  6E19               	movwf	WriteUSART@data,c
  3011  002958  ACAC               	btfss	4012,6,c	;volatile
  3012  00295A  D003               	goto	l4477
  3013  00295C  90AC               	bcf	4012,0,c	;volatile
  3014  00295E  B23C               	btfsc	_USART_Status,1,c
  3015  002960  80AC               	bsf	4012,0,c	;volatile
  3016  002962                     l4477:
  3017  002962  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3018  002966  0012               	return	
  3019  002968                     __end_of_WriteUSART:
  3020                           	opt stack 0
  3021                           tblptru	equ	0xFF8
  3022                           tblptrh	equ	0xFF7
  3023                           tblptrl	equ	0xFF6
  3024                           tablat	equ	0xFF5
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           intcon	equ	0xFF2
  3028                           indf0	equ	0xFEF
  3029                           postinc0	equ	0xFEE
  3030                           fsr0h	equ	0xFEA
  3031                           fsr0l	equ	0xFE9
  3032                           wreg	equ	0xFE8
  3033                           postinc1	equ	0xFE6
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _UART1_Init *****************
  3043 ;; Defined at:
  3044 ;;		line 5 in file "UART1.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  bdr             1    wreg     unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  bdr             1   30[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0
  3059 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3061 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    5
  3065 ;; This function calls:
  3066 ;;		_OpenUSART
  3067 ;; This function is called by:
  3068 ;;		_BT_Init
  3069 ;;		_putcBluetoothString
  3070 ;;		_putcBluetoothInt
  3071 ;;		_main
  3072 ;;		_EstadoBluetooth
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text13
  3077  00297A                     __ptext13:
  3078                           	opt stack 0
  3079  00297A                     _UART1_Init:
  3080                           	opt stack 25
  3081                           
  3082                           ;incstack = 0
  3083                           ;UART1_Init@bdr stored from wreg
  3084  00297A  6E1F               	movwf	UART1_Init@bdr,c
  3085                           
  3086                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3087  00297C  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3088  002980  6A1A               	clrf	OpenUSART@spbrg+1,c
  3089  002982  0E7C               	movlw	124
  3090  002984  ECB8  F011         	call	_OpenUSART
  3091  002988  0012               	return	
  3092  00298A                     __end_of_UART1_Init:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           indf0	equ	0xFEF
  3102                           postinc0	equ	0xFEE
  3103                           fsr0h	equ	0xFEA
  3104                           fsr0l	equ	0xFE9
  3105                           wreg	equ	0xFE8
  3106                           postinc1	equ	0xFE6
  3107                           postdec1	equ	0xFE5
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _OpenUSART *****************
  3116 ;; Defined at:
  3117 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  config          1    wreg     unsigned char 
  3120 ;;  spbrg           2   24[COMRAM] unsigned int 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  config          1   29[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;		None               void
  3125 ;; Registers used:
  3126 ;;		wreg, status,2
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3132 ;;      Params:         2       0       0       0       0       0       0       0       0
  3133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3134 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3135 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3136 ;;Total ram usage:        6 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    4
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_UART1_Init
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text14
  3147  002370                     __ptext14:
  3148                           	opt stack 0
  3149  002370                     _OpenUSART:
  3150                           	opt stack 25
  3151                           
  3152                           ;incstack = 0
  3153                           ;OpenUSART@config stored from wreg
  3154  002370  6E1E               	movwf	OpenUSART@config,c
  3155  002372  0E00               	movlw	0
  3156  002374  6EAC               	movwf	4012,c	;volatile
  3157  002376  0E00               	movlw	0
  3158  002378  6EAB               	movwf	4011,c	;volatile
  3159  00237A  B01E               	btfsc	OpenUSART@config,0,c
  3160  00237C  88AC               	bsf	4012,4,c	;volatile
  3161  00237E  A21E               	btfss	OpenUSART@config,1,c
  3162  002380  D002               	goto	l4771
  3163  002382  8CAC               	bsf	4012,6,c	;volatile
  3164  002384  8CAB               	bsf	4011,6,c	;volatile
  3165  002386                     l4771:
  3166  002386  B41E               	btfsc	OpenUSART@config,2,c
  3167  002388  8EAC               	bsf	4012,7,c	;volatile
  3168  00238A  A61E               	btfss	OpenUSART@config,3,c
  3169  00238C  D002               	goto	l610
  3170  00238E  88AB               	bsf	4011,4,c	;volatile
  3171  002390  D001               	goto	l4779
  3172  002392                     l610:
  3173  002392  8AAB               	bsf	4011,5,c	;volatile
  3174  002394                     l4779:
  3175  002394  B81E               	btfsc	OpenUSART@config,4,c
  3176  002396  84AC               	bsf	4012,2,c	;volatile
  3177  002398  989E               	bcf	3998,4,c	;volatile
  3178  00239A  BA1E               	btfsc	OpenUSART@config,5,c
  3179  00239C  86AB               	bsf	4011,3,c	;volatile
  3180  00239E  AC1E               	btfss	OpenUSART@config,6,c
  3181  0023A0  D002               	goto	l614
  3182  0023A2  8A9D               	bsf	3997,5,c	;volatile
  3183  0023A4  D001               	goto	l615
  3184  0023A6                     l614:
  3185  0023A6  9A9D               	bcf	3997,5,c	;volatile
  3186  0023A8                     l615:
  3187  0023A8  9A9E               	bcf	3998,5,c	;volatile
  3188  0023AA  AE1E               	btfss	OpenUSART@config,7,c
  3189  0023AC  D002               	goto	l616
  3190  0023AE  889D               	bsf	3997,4,c	;volatile
  3191  0023B0  D001               	goto	l617
  3192  0023B2                     l616:
  3193  0023B2  989D               	bcf	3997,4,c	;volatile
  3194  0023B4                     l617:
  3195  0023B4  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3196  0023B8  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3197  0023BC  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3198  0023C0  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3199  0023C2  501C               	movf	??_OpenUSART+1,w,c
  3200  0023C4  6EB0               	movwf	4016,c	;volatile
  3201  0023C6  8AAC               	bsf	4012,5,c	;volatile
  3202  0023C8  8EAB               	bsf	4011,7,c	;volatile
  3203  0023CA  9C94               	bcf	3988,6,c	;volatile
  3204  0023CC  8E94               	bsf	3988,7,c	;volatile
  3205  0023CE  B8AC               	btfsc	4012,4,c	;volatile
  3206  0023D0  BEAC               	btfsc	4012,7,c	;volatile
  3207  0023D2  D001               	goto	l619
  3208  0023D4  8C94               	bsf	3988,6,c	;volatile
  3209  0023D6                     l619:
  3210  0023D6  0012               	return	
  3211  0023D8                     __end_of_OpenUSART:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           indf0	equ	0xFEF
  3221                           postinc0	equ	0xFEE
  3222                           fsr0h	equ	0xFEA
  3223                           fsr0l	equ	0xFE9
  3224                           wreg	equ	0xFE8
  3225                           postinc1	equ	0xFE6
  3226                           postdec1	equ	0xFE5
  3227                           fsr1l	equ	0xFE1
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _getCNY70Value *****************
  3235 ;; Defined at:
  3236 ;;		line 3 in file "cny70.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2   24[COMRAM] int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3250 ;;      Params:         2       0       0       0       0       0       0       0       0
  3251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3253 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3254 ;;Total ram usage:        2 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    4
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_Comando_Tablet
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text15
  3265  001AAC                     __ptext15:
  3266                           	opt stack 0
  3267  001AAC                     _getCNY70Value:
  3268                           	opt stack 25
  3269                           
  3270                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  3271                           
  3272                           ;incstack = 0
  3273  001AAC  B081               	btfsc	3969,0,c	;volatile
  3274  001AAE  A281               	btfss	3969,1,c	;volatile
  3275  001AB0  D005               	goto	l433
  3276  001AB2  A481               	btfss	3969,2,c	;volatile
  3277  001AB4  A681               	btfss	3969,3,c	;volatile
  3278  001AB6  D002               	goto	l433
  3279  001AB8  B881               	btfsc	3969,4,c	;volatile
  3280  001ABA  D04F               	goto	l5617
  3281  001ABC                     l433:
  3282                           
  3283                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3284  001ABC  B081               	btfsc	3969,0,c	;volatile
  3285  001ABE  B281               	btfsc	3969,1,c	;volatile
  3286  001AC0  D005               	goto	l436
  3287  001AC2  B481               	btfsc	3969,2,c	;volatile
  3288  001AC4  A681               	btfss	3969,3,c	;volatile
  3289  001AC6  D002               	goto	l436
  3290  001AC8  B881               	btfsc	3969,4,c	;volatile
  3291  001ACA  D038               	goto	u6790
  3292  001ACC                     l436:
  3293                           
  3294                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3295  001ACC  A081               	btfss	3969,0,c	;volatile
  3296  001ACE  A281               	btfss	3969,1,c	;volatile
  3297  001AD0  D009               	goto	l438
  3298  001AD2  B481               	btfsc	3969,2,c	;volatile
  3299  001AD4  A681               	btfss	3969,3,c	;volatile
  3300  001AD6  D006               	goto	l438
  3301  001AD8  A881               	btfss	3969,4,c	;volatile
  3302  001ADA  D004               	goto	l438
  3303  001ADC                     
  3304                           ;cny70.c: 10: return -2;
  3305  001ADC  0EFF               	movlw	255
  3306  001ADE  6E1A               	movwf	?_getCNY70Value+1,c
  3307  001AE0  0EFE               	movlw	254
  3308  001AE2  D03E               	goto	L5
  3309  001AE4                     l438:
  3310                           
  3311                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3312  001AE4  B081               	btfsc	3969,0,c	;volatile
  3313  001AE6  A281               	btfss	3969,1,c	;volatile
  3314  001AE8  D005               	goto	l440
  3315  001AEA  B481               	btfsc	3969,2,c	;volatile
  3316  001AEC  B681               	btfsc	3969,3,c	;volatile
  3317  001AEE  D002               	goto	l440
  3318  001AF0  B881               	btfsc	3969,4,c	;volatile
  3319  001AF2  D02F               	goto	u6840
  3320  001AF4                     l440:
  3321                           
  3322                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  3323  001AF4  B081               	btfsc	3969,0,c	;volatile
  3324  001AF6  A281               	btfss	3969,1,c	;volatile
  3325  001AF8  D005               	goto	l442
  3326  001AFA  B481               	btfsc	3969,2,c	;volatile
  3327  001AFC  A681               	btfss	3969,3,c	;volatile
  3328  001AFE  D002               	goto	l442
  3329  001B00  A881               	btfss	3969,4,c	;volatile
  3330  001B02  D008               	goto	u6690
  3331  001B04                     l442:
  3332                           
  3333                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  3334  001B04  B081               	btfsc	3969,0,c	;volatile
  3335  001B06  A281               	btfss	3969,1,c	;volatile
  3336  001B08  D009               	goto	l444
  3337  001B0A  B481               	btfsc	3969,2,c	;volatile
  3338  001B0C  B681               	btfsc	3969,3,c	;volatile
  3339  001B0E  D006               	goto	l444
  3340  001B10  B881               	btfsc	3969,4,c	;volatile
  3341  001B12  D004               	goto	l444
  3342  001B14                     u6690:
  3343                           
  3344                           ;cny70.c: 16: return 2;
  3345  001B14  0E00               	movlw	0
  3346  001B16  6E1A               	movwf	?_getCNY70Value+1,c
  3347  001B18  0E02               	movlw	2
  3348  001B1A  D022               	goto	L5
  3349  001B1C                     l444:
  3350                           
  3351                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3352  001B1C  A081               	btfss	3969,0,c	;volatile
  3353  001B1E  B281               	btfsc	3969,1,c	;volatile
  3354  001B20  D005               	goto	l446
  3355  001B22  B481               	btfsc	3969,2,c	;volatile
  3356  001B24  A681               	btfss	3969,3,c	;volatile
  3357  001B26  D002               	goto	l446
  3358  001B28  B881               	btfsc	3969,4,c	;volatile
  3359  001B2A  D7D8               	goto	L6
  3360  001B2C                     l446:
  3361                           
  3362                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3363  001B2C  B081               	btfsc	3969,0,c	;volatile
  3364  001B2E  B281               	btfsc	3969,1,c	;volatile
  3365  001B30  D008               	goto	l448
  3366  001B32  A481               	btfss	3969,2,c	;volatile
  3367  001B34  A681               	btfss	3969,3,c	;volatile
  3368  001B36  D005               	goto	l448
  3369  001B38  A881               	btfss	3969,4,c	;volatile
  3370  001B3A  D003               	goto	l448
  3371  001B3C                     u6790:
  3372                           
  3373                           ;cny70.c: 20: return -1;
  3374  001B3C  6819               	setf	?_getCNY70Value,c
  3375  001B3E  681A               	setf	?_getCNY70Value+1,c
  3376  001B40  D010               	goto	l434
  3377  001B42                     l448:
  3378                           
  3379                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3380  001B42  B081               	btfsc	3969,0,c	;volatile
  3381  001B44  A281               	btfss	3969,1,c	;volatile
  3382  001B46  D009               	goto	l5617
  3383  001B48  A481               	btfss	3969,2,c	;volatile
  3384  001B4A  B681               	btfsc	3969,3,c	;volatile
  3385  001B4C  D006               	goto	l5617
  3386  001B4E  A881               	btfss	3969,4,c	;volatile
  3387  001B50  D004               	goto	l5617
  3388  001B52                     u6840:
  3389                           
  3390                           ;cny70.c: 22: return 1;
  3391  001B52  0E00               	movlw	0
  3392  001B54  6E1A               	movwf	?_getCNY70Value+1,c
  3393  001B56  0E01               	movlw	1
  3394  001B58  D003               	goto	L5
  3395  001B5A                     l5617:
  3396                           
  3397                           ;cny70.c: 23: else
  3398                           ;cny70.c: 24: return 0;
  3399  001B5A  0E00               	movlw	0
  3400  001B5C  6E1A               	movwf	?_getCNY70Value+1,c
  3401  001B5E  0E00               	movlw	0
  3402  001B60                     L5:
  3403  001B60  6E19               	movwf	?_getCNY70Value,c
  3404  001B62                     l434:
  3405  001B62  0012               	return	
  3406  001B64                     __end_of_getCNY70Value:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           indf0	equ	0xFEF
  3416                           postinc0	equ	0xFEE
  3417                           fsr0h	equ	0xFEA
  3418                           fsr0l	equ	0xFE9
  3419                           wreg	equ	0xFE8
  3420                           postinc1	equ	0xFE6
  3421                           postdec1	equ	0xFE5
  3422                           fsr1l	equ	0xFE1
  3423                           indf2	equ	0xFDF
  3424                           postinc2	equ	0xFDE
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function _clrBufferUSART *****************
  3430 ;; Defined at:
  3431 ;;		line 68 in file "Bluetooth.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  i               2   24[COMRAM] int 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;		None               void
  3438 ;; Registers used:
  3439 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0
  3446 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3448 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    4
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_Inicializa_Driveby
  3456 ;;		_Comando_Tablet
  3457 ;;		_main
  3458 ;;		_CheckTX
  3459 ;;		_EstadoBluetooth
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text16
  3464  0026F0                     __ptext16:
  3465                           	opt stack 0
  3466  0026F0                     _clrBufferUSART:
  3467                           	opt stack 26
  3468                           
  3469                           ;Bluetooth.c: 69: int i;
  3470                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3471                           
  3472                           ;incstack = 0
  3473  0026F0  0E00               	movlw	0
  3474  0026F2  6E1A               	movwf	clrBufferUSART@i+1,c
  3475  0026F4  0E00               	movlw	0
  3476  0026F6  6E19               	movwf	clrBufferUSART@i,c
  3477  0026F8  501A               	movf	clrBufferUSART@i+1,w,c
  3478  0026FA  0A80               	xorlw	128
  3479  0026FC  0F80               	addlw	-128
  3480  0026FE  0E14               	movlw	20
  3481  002700  B4D8               	btfsc	status,2,c
  3482  002702  5C19               	subwf	clrBufferUSART@i,w,c
  3483  002704  B0D8               	btfsc	status,0,c
  3484  002706  D00F               	goto	l54
  3485                           
  3486                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3487  002708  0101               	movlb	1	; () banked
  3488  00270A  0E28               	movlw	low _BluetoothDato
  3489  00270C  2419               	addwf	clrBufferUSART@i,w,c
  3490  00270E  6ED9               	movwf	fsr2l,c
  3491  002710  0101               	movlb	1	; () banked
  3492  002712  0E01               	movlw	high _BluetoothDato
  3493  002714  201A               	addwfc	clrBufferUSART@i+1,w,c
  3494  002716  6EDA               	movwf	fsr2h,c
  3495  002718  0E00               	movlw	0
  3496  00271A  6EDF               	movwf	indf2,c
  3497                           
  3498                           ; BSR set to: 1
  3499                           ;Bluetooth.c: 72: cad = 0;
  3500  00271C  0E00               	movlw	0
  3501  00271E  6E3D               	movwf	_cad,c
  3502                           
  3503                           ; BSR set to: 1
  3504  002720  4A19               	infsnz	clrBufferUSART@i,f,c
  3505  002722  2A1A               	incf	clrBufferUSART@i+1,f,c
  3506  002724  D7E9               	goto	L7
  3507  002726                     l54:
  3508  002726  0012               	return	
  3509  002728                     __end_of_clrBufferUSART:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           indf0	equ	0xFEF
  3519                           postinc0	equ	0xFEE
  3520                           fsr0h	equ	0xFEA
  3521                           fsr0l	equ	0xFE9
  3522                           wreg	equ	0xFE8
  3523                           postinc1	equ	0xFE6
  3524                           postdec1	equ	0xFE5
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _PWM_init2 *****************
  3533 ;; Defined at:
  3534 ;;		line 42 in file "pwm.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  period          1    wreg     unsigned char 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  period          1   27[COMRAM] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;		None               void
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3548 ;;      Params:         0       0       0       0       0       0       0       0       0
  3549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3551 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3552 ;;Total ram usage:        1 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    5
  3555 ;; This function calls:
  3556 ;;		_OpenPWM2
  3557 ;; This function is called by:
  3558 ;;		_Comando_Tablet
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text17
  3563  0028D2                     __ptext17:
  3564                           	opt stack 0
  3565  0028D2                     _PWM_init2:
  3566                           	opt stack 24
  3567                           
  3568                           ;incstack = 0
  3569                           ;PWM_init2@period stored from wreg
  3570  0028D2  6E1C               	movwf	PWM_init2@period,c
  3571                           
  3572                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3573  0028D4  0EFE               	movlw	254
  3574  0028D6  6E47               	movwf	_Timer2Config,c
  3575                           
  3576                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3577  0028D8  5047               	movf	_Timer2Config,w,c
  3578  0028DA  0BFB               	andlw	251
  3579  0028DC  6ECA               	movwf	4042,c	;volatile
  3580                           
  3581                           ;pwm.c: 47: TMR2 = 0;
  3582  0028DE  0E00               	movlw	0
  3583  0028E0  6ECC               	movwf	4044,c	;volatile
  3584                           
  3585                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3586  0028E2  929E               	bcf	3998,1,c	;volatile
  3587                           
  3588                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3589  0028E4  929D               	bcf	3997,1,c	;volatile
  3590                           
  3591                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3592  0028E6  84CA               	bsf	4042,2,c	;volatile
  3593                           
  3594                           ;pwm.c: 51: OpenPWM2(period);
  3595  0028E8  501C               	movf	PWM_init2@period,w,c
  3596  0028EA  EC04  F013         	call	_OpenPWM2
  3597                           
  3598                           ;pwm.c: 53: return;
  3599  0028EE  0012               	return	
  3600  0028F0                     __end_of_PWM_init2:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           indf0	equ	0xFEF
  3610                           postinc0	equ	0xFEE
  3611                           fsr0h	equ	0xFEA
  3612                           fsr0l	equ	0xFE9
  3613                           wreg	equ	0xFE8
  3614                           postinc1	equ	0xFE6
  3615                           postdec1	equ	0xFE5
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _OpenPWM2 *****************
  3624 ;; Defined at:
  3625 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  period          1    wreg     unsigned char 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  period          1   25[COMRAM] unsigned char 
  3630 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3631 ;;  pmmode          1    0        unsigned char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;		None               void
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3641 ;;      Params:         0       0       0       0       0       0       0       0       0
  3642 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3643 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3644 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3645 ;;Total ram usage:        3 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    4
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_PWM_init2
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text18
  3656  002608                     __ptext18:
  3657                           	opt stack 0
  3658  002608                     _OpenPWM2:
  3659                           	opt stack 24
  3660                           
  3661                           ;incstack = 0
  3662                           ;OpenPWM2@period stored from wreg
  3663  002608  6E1A               	movwf	OpenPWM2@period,c
  3664  00260A  0E0C               	movlw	12
  3665  00260C  6EBA               	movwf	4026,c	;volatile
  3666  00260E  0E05               	movlw	5
  3667  002610  6EF6               	movwf	tblptrl,c
  3668  002612                     	if	1	;There is more than 1 active tblptr byte
  3669  002612  0E00               	movlw	0
  3670  002614  6EF7               	movwf	tblptrh,c
  3671  002616                     	endif
  3672  002616                     	if	1	;There are 3 active tblptr bytes
  3673  002616  0E30               	movlw	48
  3674  002618  6EF8               	movwf	tblptru,c
  3675  00261A                     	endif
  3676  00261A  0008               	tblrd		*
  3677  00261C  CFF5 F019          	movff	tablat,??_OpenPWM2
  3678  002620  A019               	btfss	??_OpenPWM2,0,c
  3679  002622  D002               	goto	l5387
  3680  002624  681B               	setf	OpenPWM2@ccp2mx,c
  3681  002626  D002               	goto	l576
  3682  002628                     l5387:
  3683  002628  0E00               	movlw	0
  3684  00262A  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3685  00262C                     l576:
  3686  00262C  501B               	movf	OpenPWM2@ccp2mx,w,c
  3687  00262E  B4D8               	btfsc	status,2,c
  3688  002630  D002               	goto	l577
  3689  002632  9294               	bcf	3988,1,c	;volatile
  3690  002634  D001               	goto	l578
  3691  002636                     l577:
  3692  002636  9693               	bcf	3987,3,c	;volatile
  3693  002638                     l578:
  3694  002638  94CA               	bcf	4042,2,c	;volatile
  3695  00263A  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3696  00263E  84CA               	bsf	4042,2,c	;volatile
  3697  002640  0012               	return	
  3698  002642                     __end_of_OpenPWM2:
  3699                           	opt stack 0
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           intcon	equ	0xFF2
  3707                           indf0	equ	0xFEF
  3708                           postinc0	equ	0xFEE
  3709                           fsr0h	equ	0xFEA
  3710                           fsr0l	equ	0xFE9
  3711                           wreg	equ	0xFE8
  3712                           postinc1	equ	0xFE6
  3713                           postdec1	equ	0xFE5
  3714                           fsr1l	equ	0xFE1
  3715                           indf2	equ	0xFDF
  3716                           postinc2	equ	0xFDE
  3717                           fsr2h	equ	0xFDA
  3718                           fsr2l	equ	0xFD9
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _PWM_init1 *****************
  3722 ;; Defined at:
  3723 ;;		line 20 in file "pwm.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  period          1    wreg     unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  period          1   25[COMRAM] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;		None               void
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0
  3738 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3740 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3741 ;;Total ram usage:        1 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    5
  3744 ;; This function calls:
  3745 ;;		_OpenPWM1
  3746 ;; This function is called by:
  3747 ;;		_Comando_Tablet
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text19
  3752  0028F0                     __ptext19:
  3753                           	opt stack 0
  3754  0028F0                     _PWM_init1:
  3755                           	opt stack 24
  3756                           
  3757                           ;incstack = 0
  3758                           ;PWM_init1@period stored from wreg
  3759  0028F0  6E1A               	movwf	PWM_init1@period,c
  3760                           
  3761                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3762  0028F2  0EFE               	movlw	254
  3763  0028F4  6E47               	movwf	_Timer2Config,c
  3764                           
  3765                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3766  0028F6  5047               	movf	_Timer2Config,w,c
  3767  0028F8  0BFB               	andlw	251
  3768  0028FA  6ECA               	movwf	4042,c	;volatile
  3769                           
  3770                           ;pwm.c: 25: TMR2 = 0;
  3771  0028FC  0E00               	movlw	0
  3772  0028FE  6ECC               	movwf	4044,c	;volatile
  3773                           
  3774                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3775  002900  929E               	bcf	3998,1,c	;volatile
  3776                           
  3777                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3778  002902  929D               	bcf	3997,1,c	;volatile
  3779                           
  3780                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3781  002904  84CA               	bsf	4042,2,c	;volatile
  3782                           
  3783                           ;pwm.c: 29: OpenPWM1(period);
  3784  002906  501A               	movf	PWM_init1@period,w,c
  3785  002908  ECB4  F014         	call	_OpenPWM1
  3786                           
  3787                           ;pwm.c: 31: return;
  3788  00290C  0012               	return	
  3789  00290E                     __end_of_PWM_init1:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           intcon	equ	0xFF2
  3798                           indf0	equ	0xFEF
  3799                           postinc0	equ	0xFEE
  3800                           fsr0h	equ	0xFEA
  3801                           fsr0l	equ	0xFE9
  3802                           wreg	equ	0xFE8
  3803                           postinc1	equ	0xFE6
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           indf2	equ	0xFDF
  3807                           postinc2	equ	0xFDE
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _OpenPWM1 *****************
  3813 ;; Defined at:
  3814 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  period          1    wreg     unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  period          1   24[COMRAM] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3828 ;;      Params:         0       0       0       0       0       0       0       0       0
  3829 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3831 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3832 ;;Total ram usage:        1 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    4
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_PWM_init1
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text20
  3843  002968                     __ptext20:
  3844                           	opt stack 0
  3845  002968                     _OpenPWM1:
  3846                           	opt stack 24
  3847                           
  3848                           ;incstack = 0
  3849                           ;OpenPWM1@period stored from wreg
  3850  002968  6E19               	movwf	OpenPWM1@period,c
  3851  00296A  0E0C               	movlw	12
  3852  00296C  12BD               	iorwf	4029,f,c	;volatile
  3853  00296E  9494               	bcf	3988,2,c	;volatile
  3854  002970  94CA               	bcf	4042,2,c	;volatile
  3855  002972  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3856  002976  84CA               	bsf	4042,2,c	;volatile
  3857  002978  0012               	return	
  3858  00297A                     __end_of_OpenPWM1:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           indf0	equ	0xFEF
  3868                           postinc0	equ	0xFEE
  3869                           fsr0h	equ	0xFEA
  3870                           fsr0l	equ	0xFE9
  3871                           wreg	equ	0xFE8
  3872                           postinc1	equ	0xFE6
  3873                           postdec1	equ	0xFE5
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _PWM_DutyCycle2 *****************
  3882 ;; Defined at:
  3883 ;;		line 55 in file "pwm.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  percentageDu    1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3888 ;;  DC              2   41[BANK0 ] unsigned int 
  3889 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;		None               void
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0
  3900 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3901 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3902 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3903 ;;Total ram usage:        9 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    6
  3906 ;; This function calls:
  3907 ;;		_SetDCPWM2
  3908 ;;		___ftmul
  3909 ;;		___fttol
  3910 ;;		___lbtoft
  3911 ;; This function is called by:
  3912 ;;		_Comando_Tablet
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text21
  3917  0020A8                     __ptext21:
  3918                           	opt stack 0
  3919  0020A8                     _PWM_DutyCycle2:
  3920                           	opt stack 23
  3921                           
  3922                           ;incstack = 0
  3923                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3924  0020A8  0100               	movlb	0	; () banked
  3925  0020AA  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3929  0020AC  0E00               	movlw	0
  3930  0020AE  0100               	movlb	0	; () banked
  3931  0020B0  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3932  0020B2  0E00               	movlw	0
  3933  0020B4  0100               	movlb	0	; () banked
  3934  0020B6  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3935  0020B8  0E00               	movlw	0
  3936  0020BA  0100               	movlb	0	; () banked
  3937  0020BC  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3938  0020BE  0E00               	movlw	0
  3939  0020C0  0100               	movlb	0	; () banked
  3940  0020C2  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3944  0020C4  0EAE               	movlw	174
  3945  0020C6  0100               	movlb	0	; () banked
  3946  0020C8  6F63               	movwf	___ftmul@f2& (0+255),b
  3947  0020CA  0E23               	movlw	35
  3948  0020CC  0100               	movlb	0	; () banked
  3949  0020CE  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3950  0020D0  0E41               	movlw	65
  3951  0020D2  0100               	movlb	0	; () banked
  3952  0020D4  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3953  0020D6  0100               	movlb	0	; () banked
  3954  0020D8  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3955  0020DA  EC37  F014         	call	___lbtoft
  3956  0020DE  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3957  0020E2  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3958  0020E6  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3959  0020EA  EC6F  F009         	call	___ftmul	;wreg free
  3960  0020EE  C060  F073         	movff	?___ftmul,___fttol@f1
  3961  0020F2  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3962  0020F6  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3963  0020FA  EC1B  F00A         	call	___fttol	;wreg free
  3964  0020FE  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3965  002102  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3966  002106  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3967  00210A  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3968  00210E  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3969  002112  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3970                           
  3971                           ;pwm.c: 60: SetDCPWM2(DC);
  3972  002116  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3973  00211A  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3974  00211E  EC21  F013         	call	_SetDCPWM2	;wreg free
  3975                           
  3976                           ;pwm.c: 61: return;
  3977  002122  0012               	return	
  3978  002124                     __end_of_PWM_DutyCycle2:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           indf0	equ	0xFEF
  3988                           postinc0	equ	0xFEE
  3989                           fsr0h	equ	0xFEA
  3990                           fsr0l	equ	0xFE9
  3991                           wreg	equ	0xFE8
  3992                           postinc1	equ	0xFE6
  3993                           postdec1	equ	0xFE5
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _SetDCPWM2 *****************
  4002 ;; Defined at:
  4003 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4008 ;; Return value:  Size  Location     Type
  4009 ;;		None               void
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4017 ;;      Params:         2       0       0       0       0       0       0       0       0
  4018 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4019 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4020 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4021 ;;Total ram usage:        6 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    4
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_PWM_DutyCycle2
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text22
  4032  002642                     __ptext22:
  4033                           	opt stack 0
  4034  002642                     _SetDCPWM2:
  4035                           	opt stack 24
  4036                           
  4037                           ;incstack = 0
  4038  002642  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4039  002646  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4040  00264A  0E06               	movlw	6
  4041  00264C                     u6305:
  4042  00264C  90D8               	bcf	status,0,c
  4043  00264E  361B               	rlcf	??_SetDCPWM2,f,c
  4044  002650  361C               	rlcf	??_SetDCPWM2+1,f,c
  4045  002652  2EE8               	decfsz	wreg,f,c
  4046  002654  D7FB               	goto	u6305
  4047  002656  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4048  00265A  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4049  00265E  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4050  002662  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4051  002666  90D8               	bcf	status,0,c
  4052  002668  321B               	rrcf	??_SetDCPWM2,f,c
  4053  00266A  90D8               	bcf	status,0,c
  4054  00266C  321B               	rrcf	??_SetDCPWM2,f,c
  4055  00266E  0E30               	movlw	48
  4056  002670  161B               	andwf	??_SetDCPWM2,f,c
  4057  002672  50BA               	movf	4026,w,c	;volatile
  4058  002674  0BCF               	andlw	207
  4059  002676  101B               	iorwf	??_SetDCPWM2,w,c
  4060  002678  6EBA               	movwf	4026,c	;volatile
  4061  00267A  0012               	return	
  4062  00267C                     __end_of_SetDCPWM2:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           intcon	equ	0xFF2
  4071                           indf0	equ	0xFEF
  4072                           postinc0	equ	0xFEE
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           postinc1	equ	0xFE6
  4077                           postdec1	equ	0xFE5
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _PWM_DutyCycle1 *****************
  4086 ;; Defined at:
  4087 ;;		line 33 in file "pwm.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  percentageDu    1    wreg     unsigned char 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  4092 ;;  DC              2   41[BANK0 ] unsigned int 
  4093 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;		None               void
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4103 ;;      Params:         0       0       0       0       0       0       0       0       0
  4104 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4105 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4106 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4107 ;;Total ram usage:        9 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    6
  4110 ;; This function calls:
  4111 ;;		_SetDCPWM1
  4112 ;;		___ftmul
  4113 ;;		___fttol
  4114 ;;		___lbtoft
  4115 ;; This function is called by:
  4116 ;;		_Comando_Tablet
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text23
  4121  002124                     __ptext23:
  4122                           	opt stack 0
  4123  002124                     _PWM_DutyCycle1:
  4124                           	opt stack 23
  4125                           
  4126                           ;incstack = 0
  4127                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4128  002124  0100               	movlb	0	; () banked
  4129  002126  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4133  002128  0E00               	movlw	0
  4134  00212A  0100               	movlb	0	; () banked
  4135  00212C  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4136  00212E  0E00               	movlw	0
  4137  002130  0100               	movlb	0	; () banked
  4138  002132  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4139  002134  0E00               	movlw	0
  4140  002136  0100               	movlb	0	; () banked
  4141  002138  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4142  00213A  0E00               	movlw	0
  4143  00213C  0100               	movlb	0	; () banked
  4144  00213E  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4148  002140  0EAE               	movlw	174
  4149  002142  0100               	movlb	0	; () banked
  4150  002144  6F63               	movwf	___ftmul@f2& (0+255),b
  4151  002146  0E23               	movlw	35
  4152  002148  0100               	movlb	0	; () banked
  4153  00214A  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4154  00214C  0E41               	movlw	65
  4155  00214E  0100               	movlb	0	; () banked
  4156  002150  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4157  002152  0100               	movlb	0	; () banked
  4158  002154  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4159  002156  EC37  F014         	call	___lbtoft
  4160  00215A  C021  F060         	movff	?___lbtoft,___ftmul@f1
  4161  00215E  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  4162  002162  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  4163  002166  EC6F  F009         	call	___ftmul	;wreg free
  4164  00216A  C060  F073         	movff	?___ftmul,___fttol@f1
  4165  00216E  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  4166  002172  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  4167  002176  EC1B  F00A         	call	___fttol	;wreg free
  4168  00217A  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  4169  00217E  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4170  002182  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4171  002186  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4172  00218A  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4173  00218E  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4174                           
  4175                           ;pwm.c: 38: SetDCPWM1(DC);
  4176  002192  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4177  002196  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4178  00219A  EC3E  F013         	call	_SetDCPWM1	;wreg free
  4179                           
  4180                           ;pwm.c: 39: return;
  4181  00219E  0012               	return	
  4182  0021A0                     __end_of_PWM_DutyCycle1:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           intcon	equ	0xFF2
  4191                           indf0	equ	0xFEF
  4192                           postinc0	equ	0xFEE
  4193                           fsr0h	equ	0xFEA
  4194                           fsr0l	equ	0xFE9
  4195                           wreg	equ	0xFE8
  4196                           postinc1	equ	0xFE6
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           indf2	equ	0xFDF
  4200                           postinc2	equ	0xFDE
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function ___lbtoft *****************
  4206 ;; Defined at:
  4207 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  c               1    wreg     unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  c               1   35[COMRAM] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  3   32[COMRAM] float 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4221 ;;      Params:         3       0       0       0       0       0       0       0       0
  4222 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4224 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4225 ;;Total ram usage:        4 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    5
  4228 ;; This function calls:
  4229 ;;		___ftpack
  4230 ;; This function is called by:
  4231 ;;		_PWM_DutyCycle1
  4232 ;;		_PWM_DutyCycle2
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text24
  4237  00286E                     __ptext24:
  4238                           	opt stack 0
  4239  00286E                     ___lbtoft:
  4240                           	opt stack 23
  4241                           
  4242                           ;incstack = 0
  4243                           ;___lbtoft@c stored from wreg
  4244  00286E  6E24               	movwf	___lbtoft@c,c
  4245  002870  5024               	movf	___lbtoft@c,w,c
  4246  002872  6E19               	movwf	___ftpack@arg,c
  4247  002874  6A1A               	clrf	___ftpack@arg+1,c
  4248  002876  6A1B               	clrf	___ftpack@arg+2,c
  4249  002878  0E8E               	movlw	142
  4250  00287A  6E1C               	movwf	___ftpack@exp,c
  4251  00287C  0E00               	movlw	0
  4252  00287E  6E1D               	movwf	___ftpack@sign,c
  4253  002880  ECB2  F00D         	call	___ftpack	;wreg free
  4254  002884  C019  F021         	movff	?___ftpack,?___lbtoft
  4255  002888  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4256  00288C  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4257  002890  0012               	return	
  4258  002892                     __end_of___lbtoft:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodh	equ	0xFF4
  4265                           prodl	equ	0xFF3
  4266                           intcon	equ	0xFF2
  4267                           indf0	equ	0xFEF
  4268                           postinc0	equ	0xFEE
  4269                           fsr0h	equ	0xFEA
  4270                           fsr0l	equ	0xFE9
  4271                           wreg	equ	0xFE8
  4272                           postinc1	equ	0xFE6
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           fsr2h	equ	0xFDA
  4278                           fsr2l	equ	0xFD9
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function _SetDCPWM1 *****************
  4282 ;; Defined at:
  4283 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4288 ;; Return value:  Size  Location     Type
  4289 ;;		None               void
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4297 ;;      Params:         2       0       0       0       0       0       0       0       0
  4298 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4299 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4300 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4301 ;;Total ram usage:        6 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    4
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_PWM_DutyCycle1
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text25
  4312  00267C                     __ptext25:
  4313                           	opt stack 0
  4314  00267C                     _SetDCPWM1:
  4315                           	opt stack 24
  4316                           
  4317                           ;incstack = 0
  4318  00267C  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4319  002680  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4320  002684  0E06               	movlw	6
  4321  002686                     u6275:
  4322  002686  90D8               	bcf	status,0,c
  4323  002688  361B               	rlcf	??_SetDCPWM1,f,c
  4324  00268A  361C               	rlcf	??_SetDCPWM1+1,f,c
  4325  00268C  2EE8               	decfsz	wreg,f,c
  4326  00268E  D7FB               	goto	u6275
  4327  002690  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4328  002694  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4329  002698  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4330  00269C  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4331  0026A0  90D8               	bcf	status,0,c
  4332  0026A2  321B               	rrcf	??_SetDCPWM1,f,c
  4333  0026A4  90D8               	bcf	status,0,c
  4334  0026A6  321B               	rrcf	??_SetDCPWM1,f,c
  4335  0026A8  0E30               	movlw	48
  4336  0026AA  161B               	andwf	??_SetDCPWM1,f,c
  4337  0026AC  50BD               	movf	4029,w,c	;volatile
  4338  0026AE  0BCF               	andlw	207
  4339  0026B0  101B               	iorwf	??_SetDCPWM1,w,c
  4340  0026B2  6EBD               	movwf	4029,c	;volatile
  4341  0026B4  0012               	return	
  4342  0026B6                     __end_of_SetDCPWM1:
  4343                           	opt stack 0
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           indf0	equ	0xFEF
  4352                           postinc0	equ	0xFEE
  4353                           fsr0h	equ	0xFEA
  4354                           fsr0l	equ	0xFE9
  4355                           wreg	equ	0xFE8
  4356                           postinc1	equ	0xFE6
  4357                           postdec1	equ	0xFE5
  4358                           fsr1l	equ	0xFE1
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _Lcd_Write_Integer *****************
  4366 ;; Defined at:
  4367 ;;		line 113 in file "lcd.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  a               2   88[BANK0 ] int 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  s              20   90[BANK0 ] unsigned char [20]
  4372 ;; Return value:  Size  Location     Type
  4373 ;;		None               void
  4374 ;; Registers used:
  4375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4381 ;;      Params:         0       2       0       0       0       0       0       0       0
  4382 ;;      Locals:         0      20       0       0       0       0       0       0       0
  4383 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4384 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4385 ;;Total ram usage:       22 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    8
  4388 ;; This function calls:
  4389 ;;		_Lcd_Write_String
  4390 ;;		_sprintf
  4391 ;; This function is called by:
  4392 ;;		_Comando_Tablet
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text26
  4397  0026B6                     __ptext26:
  4398                           	opt stack 0
  4399  0026B6                     _Lcd_Write_Integer:
  4400                           	opt stack 21
  4401                           
  4402                           ;lcd.c: 114: unsigned char s[20];
  4403                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4404                           
  4405                           ;incstack = 0
  4406  0026B6  0100               	movlb	0	; () banked
  4407  0026B8  0E00               	movlw	high Lcd_Write_Integer@s
  4408  0026BA  0100               	movlb	0	; () banked
  4409  0026BC  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4410  0026BE  0100               	movlb	0	; () banked
  4411  0026C0  0EBA               	movlw	low Lcd_Write_Integer@s
  4412  0026C2  0100               	movlb	0	; () banked
  4413  0026C4  6F88               	movwf	sprintf@sp& (0+255),b
  4414  0026C6  0E7F               	movlw	high STR_18
  4415  0026C8  0100               	movlb	0	; () banked
  4416  0026CA  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4417  0026CC  0EAC               	movlw	low STR_18
  4418  0026CE  0100               	movlb	0	; () banked
  4419  0026D0  6F8A               	movwf	sprintf@f& (0+255),b
  4420  0026D2  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4421  0026D6  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4422  0026DA  EC0E  F000         	call	_sprintf	;wreg free
  4423                           
  4424                           ;lcd.c: 117: Lcd_Write_String(s);
  4425  0026DE  0100               	movlb	0	; () banked
  4426  0026E0  0E00               	movlw	high Lcd_Write_Integer@s
  4427  0026E2  6E1E               	movwf	Lcd_Write_String@a+1,c
  4428  0026E4  0100               	movlb	0	; () banked
  4429  0026E6  0EBA               	movlw	low Lcd_Write_Integer@s
  4430  0026E8  6E1D               	movwf	Lcd_Write_String@a,c
  4431  0026EA  ECD0  F010         	call	_Lcd_Write_String	;wreg free
  4432  0026EE  0012               	return	
  4433  0026F0                     __end_of_Lcd_Write_Integer:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           indf0	equ	0xFEF
  4443                           postinc0	equ	0xFEE
  4444                           fsr0h	equ	0xFEA
  4445                           fsr0l	equ	0xFE9
  4446                           wreg	equ	0xFE8
  4447                           postinc1	equ	0xFE6
  4448                           postdec1	equ	0xFE5
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _sprintf *****************
  4457 ;; Defined at:
  4458 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4461 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4462 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4463 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  vd              4   60[BANK0 ] unsigned long 
  4466 ;;  vd              4   64[BANK0 ] unsigned long 
  4467 ;;  _val            5   77[BANK0 ] struct .
  4468 ;;  fval            3   84[BANK0 ] struct .
  4469 ;;  integ           3   72[BANK0 ] struct .
  4470 ;;  ival            3    0        struct .
  4471 ;;  exp             2   82[BANK0 ] int 
  4472 ;;  prec            2   75[BANK0 ] int 
  4473 ;;  flag            2   70[BANK0 ] unsigned short 
  4474 ;;  ap              2   68[BANK0 ] PTR void [1]
  4475 ;;		 -> ?_sprintf(2), 
  4476 ;;  width           2    0        int 
  4477 ;;  c               1   87[BANK0 ] char 
  4478 ;;  d               1    0        unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  2   40[BANK0 ] int 
  4481 ;; Registers used:
  4482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4488 ;;      Params:         0       7       0       0       0       0       0       0       0
  4489 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4490 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4491 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4492 ;;Total ram usage:       48 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    7
  4495 ;; This function calls:
  4496 ;;		___awdiv
  4497 ;;		___ftadd
  4498 ;;		___ftge
  4499 ;;		___ftmul
  4500 ;;		___ftneg
  4501 ;;		___ftsub
  4502 ;;		___fttol
  4503 ;;		___lldiv
  4504 ;;		___llmod
  4505 ;;		___lltoft
  4506 ;;		___wmul
  4507 ;;		__div_to_l_
  4508 ;;		__tdiv_to_l_
  4509 ;;		_fround
  4510 ;;		_scale
  4511 ;; This function is called by:
  4512 ;;		_putcBluetoothInt
  4513 ;;		_Lcd_Write_Integer
  4514 ;;		_Lcd_Write_Float
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text27
  4519  00001C                     __ptext27:
  4520                           	opt stack 0
  4521  00001C                     _sprintf:
  4522                           	opt stack 21
  4523                           
  4524                           ;doprnt.c: 494: va_list ap;
  4525                           ;doprnt.c: 499: signed char c;
  4526                           ;doprnt.c: 501: int width;
  4527                           ;doprnt.c: 504: int prec;
  4528                           ;doprnt.c: 508: unsigned short flag;
  4529                           ;doprnt.c: 515: char d;
  4530                           ;doprnt.c: 516: double fval, integ;
  4531                           ;doprnt.c: 517: int exp;
  4532                           ;doprnt.c: 518: double ival;
  4533                           ;doprnt.c: 519: union {
  4534                           ;doprnt.c: 520: unsigned long _val;
  4535                           ;doprnt.c: 521: struct {
  4536                           ;doprnt.c: 522: const char * _cp;
  4537                           ;doprnt.c: 523: unsigned _len;
  4538                           ;doprnt.c: 524: } _str;
  4539                           ;doprnt.c: 525: } _val;
  4540                           ;doprnt.c: 542: *ap = __va_start();
  4541                           
  4542                           ;incstack = 0
  4543  00001C  0100               	movlb	0	; () banked
  4544  00001E  0E00               	movlw	high (?_sprintf+4)
  4545  000020  0100               	movlb	0	; () banked
  4546  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4547  000024  0100               	movlb	0	; () banked
  4548  000026  0E8C               	movlw	low (?_sprintf+4)
  4549  000028  0100               	movlb	0	; () banked
  4550  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4551                           
  4552                           ;doprnt.c: 545: while(c = *f++) {
  4553  00002C  EF87  F004         	goto	l5343
  4554  000030                     l5141:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;doprnt.c: 547: if(c != '%')
  4558  000030  0100               	movlb	0	; () banked
  4559  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4560  000034  0A25               	xorlw	37
  4561  000036  B4D8               	btfsc	status,2,c
  4562  000038  D00C               	goto	l5147
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;doprnt.c: 549: {
  4566                           ;doprnt.c: 550: ((*sp++ = (c)));
  4567  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4568  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4569  000042  0100               	movlb	0	; () banked
  4570  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4571                           
  4572                           ; BSR set to: 0
  4573  000048  0100               	movlb	0	; () banked
  4574  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4575  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4576                           
  4577                           ;doprnt.c: 551: continue;
  4578  00004E  EF87  F004         	goto	l5343
  4579  000052                     l5147:
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;doprnt.c: 552: }
  4583                           ;doprnt.c: 557: flag = 0;
  4584  000052  0E00               	movlw	0
  4585  000054  0100               	movlb	0	; () banked
  4586  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4587  000058  0E00               	movlw	0
  4588  00005A  0100               	movlb	0	; () banked
  4589  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4590                           
  4591                           ;doprnt.c: 644: switch(c = *f++) {
  4592  00005E  D003               	goto	l5153
  4593  000060                     l5149:
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;doprnt.c: 672: flag |= 0x400;
  4597  000060  0100               	movlb	0	; () banked
  4598  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4599                           
  4600                           ;doprnt.c: 673: break;
  4601  000064  D01E               	goto	l5155
  4602  000066                     l5153:
  4603                           
  4604                           ; BSR set to: 0
  4605  000066  0100               	movlb	0	; () banked
  4606  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4607  00006C  0100               	movlb	0	; () banked
  4608  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4609  000072  0100               	movlb	0	; () banked
  4610  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4611  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4612  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4613  000078  6AF8               	clrf	tblptru,c
  4614  00007A                     	endif
  4615  00007A                     	if	0	;tblptru may be non-zero
  4616  00007A                     	endif
  4617  00007A  0008               	tblrd		*
  4618  00007C  0100               	movlb	0	; () banked
  4619  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4620  000082  0100               	movlb	0	; () banked
  4621  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4622                           
  4623                           ; Switch size 1, requested type "space"
  4624                           ; Number of cases is 4, Range of values is 0 to 105
  4625                           ; switch strategies available:
  4626                           ; Name         Instructions Cycles
  4627                           ; simple_byte           13     7 (average)
  4628                           ;	Chosen strategy is simple_byte
  4629  000086  0A00               	xorlw	0	; case 0
  4630  000088  B4D8               	btfsc	status,2,c
  4631  00008A  EF99  F004         	goto	l5345
  4632  00008E  0A64               	xorlw	100	; case 100
  4633  000090  B4D8               	btfsc	status,2,c
  4634  000092  D007               	goto	l5155
  4635  000094  0A02               	xorlw	2	; case 102
  4636  000096  B4D8               	btfsc	status,2,c
  4637  000098  D7E3               	goto	l5149
  4638  00009A  0A0F               	xorlw	15	; case 105
  4639  00009C  A4D8               	btfss	status,2,c
  4640  00009E  EF87  F004         	goto	l5343
  4641  0000A2                     l5155:
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;doprnt.c: 834: if(flag & (0x700)) {
  4645  0000A2  0E07               	movlw	7
  4646  0000A4  0100               	movlb	0	; () banked
  4647  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4648  0000A8  B4D8               	btfsc	status,2,c
  4649  0000AA  D348               	goto	l5303
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;doprnt.c: 838: prec = 6;
  4653  0000AC  0E00               	movlw	0
  4654  0000AE  0100               	movlb	0	; () banked
  4655  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4656  0000B2  0E06               	movlw	6
  4657  0000B4  0100               	movlb	0	; () banked
  4658  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4662  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4663  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4664  0000C0  0100               	movlb	0	; () banked
  4665  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4666  0000C6  0100               	movlb	0	; () banked
  4667  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4668  0000CC  0100               	movlb	0	; () banked
  4669  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4670                           
  4671                           ; BSR set to: 0
  4672  0000D2  0E03               	movlw	3
  4673  0000D4  0100               	movlb	0	; () banked
  4674  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4675  0000D8  0E00               	movlw	0
  4676  0000DA  0100               	movlb	0	; () banked
  4677  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 840: if(fval < 0.0) {
  4681  0000DE  0100               	movlb	0	; () banked
  4682  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4683  0000E2  0A80               	xorlw	128
  4684  0000E4  0F80               	addlw	128
  4685  0000E6  E107               	bnz	u5955
  4686  0000E8  0E00               	movlw	0
  4687  0000EA  0100               	movlb	0	; () banked
  4688  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4689  0000EE  E103               	bnz	u5955
  4690  0000F0  0E00               	movlw	0
  4691  0000F2  0100               	movlb	0	; () banked
  4692  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4693  0000F6                     u5955:
  4694  0000F6  B0D8               	btfsc	status,0,c
  4695  0000F8  D011               	goto	l5169
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;doprnt.c: 841: fval = -fval;
  4699  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4700  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4701  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4702  000106  EC24  F014         	call	___ftneg	;wreg free
  4703  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4704  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4705  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4706                           
  4707                           ;doprnt.c: 842: flag |= 0x03;
  4708  000116  0E03               	movlw	3
  4709  000118  0100               	movlb	0	; () banked
  4710  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4711  00011C                     l5169:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;doprnt.c: 843: }
  4715                           ;doprnt.c: 844: exp = 0;
  4716  00011C  0E00               	movlw	0
  4717  00011E  0100               	movlb	0	; () banked
  4718  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4719  000122  0E00               	movlw	0
  4720  000124  0100               	movlb	0	; () banked
  4721  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 845: if( fval!=0) {
  4725  000128  0E7F               	movlw	127
  4726  00012A  0100               	movlb	0	; () banked
  4727  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4728  00012E  0100               	movlb	0	; () banked
  4729  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4730  000132  0100               	movlb	0	; () banked
  4731  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4732  000136  B4D8               	btfsc	status,2,c
  4733  000138  D09C               	goto	l5197
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4737  00013A  0E82               	movlw	130
  4738  00013C  0100               	movlb	0	; () banked
  4739  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4740  000140  0EFF               	movlw	255
  4741  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4742  000144  0100               	movlb	0	; () banked
  4743  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4744  00014A  0100               	movlb	0	; () banked
  4745  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4746  000150  0100               	movlb	0	; () banked
  4747  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4748  000156  0100               	movlb	0	; () banked
  4749  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4750  00015C  0E10               	movlw	16
  4751  00015E  D006               	goto	u5970
  4752  000160                     u5975:
  4753  000160  0100               	movlb	0	; () banked
  4754  000162  90D8               	bcf	status,0,c
  4755  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4756  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4757  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4758  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4759  00016C                     u5970:
  4760  00016C  2EE8               	decfsz	wreg,f,c
  4761  00016E  D7F8               	goto	u5975
  4762  000170  0100               	movlb	0	; () banked
  4763  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4764  000174  0100               	movlb	0	; () banked
  4765  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4766  000178  0100               	movlb	0	; () banked
  4767  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4768  00017C  0E00               	movlw	0
  4769  00017E  0100               	movlb	0	; () banked
  4770  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4771  000182  0100               	movlb	0	; () banked
  4772  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;doprnt.c: 847: exp--;
  4776  000186  0100               	movlb	0	; () banked
  4777  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4778  00018A  A0D8               	btfss	status,0,c
  4779  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 848: exp *= 3;
  4783  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4784  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4785  000196  0E00               	movlw	0
  4786  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4787  00019A  0E03               	movlw	3
  4788  00019C  6E29               	movwf	___wmul@multiplicand,c
  4789  00019E  EC11  F014         	call	___wmul	;wreg free
  4790  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4791  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4792                           
  4793                           ;doprnt.c: 849: exp /= 10;
  4794  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4795  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4796  0001B2  0E00               	movlw	0
  4797  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4798  0001B6  0E0A               	movlw	10
  4799  0001B8  6E21               	movwf	___awdiv@divisor,c
  4800  0001BA  EC59  F00E         	call	___awdiv	;wreg free
  4801  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4802  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4803                           
  4804                           ;doprnt.c: 850: if(exp < 0)
  4805  0001C6  0100               	movlb	0	; () banked
  4806  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4807  0001CA  0A80               	xorlw	128
  4808  0001CC  6EF3               	movwf	prodl,c
  4809  0001CE  0E80               	movlw	128
  4810  0001D0  5CF3               	subwf	prodl,w,c
  4811  0001D2  0E00               	movlw	0
  4812  0001D4  B4D8               	btfsc	status,2,c
  4813  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4814  0001D8  B0D8               	btfsc	status,0,c
  4815  0001DA  D004               	goto	l5185
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;doprnt.c: 851: exp--;
  4819  0001DC  0100               	movlb	0	; () banked
  4820  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4821  0001E0  A0D8               	btfss	status,0,c
  4822  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4823  0001E4                     l5185:
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;doprnt.c: 855: integ = scale(-exp);
  4827  0001E4  0100               	movlb	0	; () banked
  4828  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4829  0001E8  0800               	sublw	0
  4830  0001EA  ECA0  F004         	call	_scale
  4831  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4832  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4833  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4834                           
  4835                           ;doprnt.c: 856: integ *= fval;
  4836  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4837  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4838  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4839  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4840  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4841  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4842  000212  EC6F  F009         	call	___ftmul	;wreg free
  4843  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4844  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4845  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4846                           
  4847                           ;doprnt.c: 857: if(integ < 1.0)
  4848  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4849  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4850  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4851  00022E  0E00               	movlw	0
  4852  000230  6E1C               	movwf	___ftge@ff2,c
  4853  000232  0E80               	movlw	128
  4854  000234  6E1D               	movwf	___ftge@ff2+1,c
  4855  000236  0E3F               	movlw	63
  4856  000238  6E1E               	movwf	___ftge@ff2+2,c
  4857  00023A  EC88  F00F         	call	___ftge	;wreg free
  4858  00023E  B0D8               	btfsc	status,0,c
  4859  000240  D005               	goto	l5193
  4860                           
  4861                           ;doprnt.c: 858: exp--;
  4862  000242  0100               	movlb	0	; () banked
  4863  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4864  000246  A0D8               	btfss	status,0,c
  4865  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4866  00024A  D013               	goto	l5197
  4867  00024C                     l5193:
  4868                           
  4869                           ;doprnt.c: 859: else if(integ >= 10.0)
  4870  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4871  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4872  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4873  000258  0E00               	movlw	0
  4874  00025A  6E1C               	movwf	___ftge@ff2,c
  4875  00025C  0E20               	movlw	32
  4876  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4877  000260  0E41               	movlw	65
  4878  000262  6E1E               	movwf	___ftge@ff2+2,c
  4879  000264  EC88  F00F         	call	___ftge	;wreg free
  4880  000268  A0D8               	btfss	status,0,c
  4881  00026A  D003               	goto	l5197
  4882                           
  4883                           ;doprnt.c: 860: exp++;
  4884  00026C  0100               	movlb	0	; () banked
  4885  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4886  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4887  000272                     l5197:
  4888                           
  4889                           ;doprnt.c: 861: }
  4890                           ;doprnt.c: 1121: if(prec <= 12)
  4891  000272  0100               	movlb	0	; () banked
  4892  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4893  000276  0A80               	xorlw	128
  4894  000278  6EF3               	movwf	prodl,c
  4895  00027A  0E80               	movlw	128
  4896  00027C  5CF3               	subwf	prodl,w,c
  4897  00027E  0E0D               	movlw	13
  4898  000280  B4D8               	btfsc	status,2,c
  4899  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4900  000284  B0D8               	btfsc	status,0,c
  4901  000286  D018               	goto	l5201
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1122: fval += fround(prec);
  4905  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4906  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4907  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4908  000294  0100               	movlb	0	; () banked
  4909  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4910  000298  ECDC  F006         	call	_fround
  4911  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4912  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4913  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4914  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4915  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4916  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4917  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4918  0002B8                     l5201:
  4919                           
  4920                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4921  0002B8  0100               	movlb	0	; () banked
  4922  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4923  0002BC  0A80               	xorlw	128
  4924  0002BE  6EF3               	movwf	prodl,c
  4925  0002C0  0E80               	movlw	128
  4926  0002C2  5CF3               	subwf	prodl,w,c
  4927  0002C4  0E0A               	movlw	10
  4928  0002C6  B4D8               	btfsc	status,2,c
  4929  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4930  0002CA  B0D8               	btfsc	status,0,c
  4931  0002CC  D029               	goto	l5209
  4932                           
  4933                           ; BSR set to: 0
  4934  0002CE  0E7F               	movlw	127
  4935  0002D0  0100               	movlb	0	; () banked
  4936  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4937  0002D4  0100               	movlb	0	; () banked
  4938  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4939  0002D8  0100               	movlb	0	; () banked
  4940  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4941  0002DC  B4D8               	btfsc	status,2,c
  4942  0002DE  D06C               	goto	l5225
  4943                           
  4944                           ; BSR set to: 0
  4945  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4946  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4947  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4948  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4949  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4950  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4951  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4952  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4953  000300  0100               	movlb	0	; () banked
  4954  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4955  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4956  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4957  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4958  00030A  A4D8               	btfss	status,2,c
  4959  00030C  D055               	goto	l5225
  4960                           
  4961                           ; BSR set to: 0
  4962  00030E  0100               	movlb	0	; () banked
  4963  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4964  000312  0A80               	xorlw	128
  4965  000314  0F80               	addlw	-128
  4966  000316  0E02               	movlw	2
  4967  000318  B4D8               	btfsc	status,2,c
  4968  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4969  00031C  A0D8               	btfss	status,0,c
  4970  00031E  D04C               	goto	l5225
  4971  000320                     l5209:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4975  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4976  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4977  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4978  00032C  0E70               	movlw	112
  4979  00032E  6E1C               	movwf	___ftge@ff2,c
  4980  000330  0E89               	movlw	137
  4981  000332  6E1D               	movwf	___ftge@ff2+1,c
  4982  000334  0E40               	movlw	64
  4983  000336  6E1E               	movwf	___ftge@ff2+2,c
  4984  000338  EC88  F00F         	call	___ftge	;wreg free
  4985  00033C  B0D8               	btfsc	status,0,c
  4986  00033E  D003               	goto	l5213
  4987                           
  4988                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4989  000340  0100               	movlb	0	; () banked
  4990  000342  0EF7               	movlw	247
  4991  000344  D002               	goto	L8
  4992  000346                     l5213:
  4993                           
  4994                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4995  000346  0100               	movlb	0	; () banked
  4996  000348  0EF8               	movlw	248
  4997  00034A                     L8:
  4998  00034A  0100               	movlb	0	; () banked
  4999  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  5000  00034E  0EFF               	movlw	255
  5001  000350  0100               	movlb	0	; () banked
  5002  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;doprnt.c: 1133: }
  5006                           ;doprnt.c: 1134: integ = scale(exp);
  5007                           
  5008                           ; BSR set to: 0
  5009  000354  0100               	movlb	0	; () banked
  5010  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  5011  000358  ECA0  F004         	call	_scale
  5012  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  5013  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  5014  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  5015                           
  5016                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5017  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  5018  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5019  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5020  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  5021  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5022  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5023  000380  ECFA  F00B         	call	__tdiv_to_l_	;wreg free
  5024  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1428
  5025  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1428+1
  5026  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1428+2
  5027  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1428+3
  5028  000394  C098  F0AD         	movff	_sprintf$1428,sprintf@_val
  5029  000398  C099  F0AE         	movff	_sprintf$1428+1,sprintf@_val+1
  5030  00039C  C09A  F0AF         	movff	_sprintf$1428+2,sprintf@_val+2
  5031  0003A0  C09B  F0B0         	movff	_sprintf$1428+3,sprintf@_val+3
  5032                           
  5033                           ;doprnt.c: 1138: fval = 0.0;
  5034  0003A4  0E00               	movlw	0
  5035  0003A6  0100               	movlb	0	; () banked
  5036  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  5037  0003AA  0E00               	movlw	0
  5038  0003AC  0100               	movlb	0	; () banked
  5039  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  5040  0003B0  0E00               	movlw	0
  5041  0003B2  0100               	movlb	0	; () banked
  5042  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  5043                           
  5044                           ;doprnt.c: 1139: } else {
  5045  0003B6  D034               	goto	l5229
  5046  0003B8                     l5225:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5050  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  5051  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  5052  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  5053  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  5054  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  5055  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5056  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5057  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5058                           
  5059                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5060  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  5061  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  5062  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  5063  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  5064  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  5065  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  5066  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  5067  0003F4  EC1F  F012         	call	___lltoft	;wreg free
  5068  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  5069  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  5070  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  5071  000404  ECE6  F012         	call	___ftsub	;wreg free
  5072  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  5073  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  5074  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  5075                           
  5076                           ;doprnt.c: 1142: exp = 0;
  5077  000414  0E00               	movlw	0
  5078  000416  0100               	movlb	0	; () banked
  5079  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  5080  00041A  0E00               	movlw	0
  5081  00041C  0100               	movlb	0	; () banked
  5082  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  5083  000420                     l5229:
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 1143: }
  5087                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5088  000420  0E01               	movlw	1
  5089  000422  0100               	movlb	0	; () banked
  5090  000424  6FB7               	movwf	sprintf@c& (0+255),b
  5091  000426                     
  5092                           ; BSR set to: 0
  5093  000426  0100               	movlb	0	; () banked
  5094  000428  51B7               	movf	sprintf@c& (0+255),w,b
  5095  00042A  0A0A               	xorlw	10
  5096  00042C  B4D8               	btfsc	status,2,c
  5097  00042E  D021               	goto	l5243
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5101                           
  5102                           ; BSR set to: 0
  5103                           
  5104                           ; BSR set to: 0
  5105  000430  0100               	movlb	0	; () banked
  5106  000432  51B7               	movf	sprintf@c& (0+255),w,b
  5107  000434  0D04               	mullw	4
  5108  000436  0ECD               	movlw	low _dpowers
  5109  000438  24F3               	addwf	prodl,w,c
  5110  00043A  6EF6               	movwf	tblptrl,c
  5111  00043C  0E7E               	movlw	high _dpowers
  5112  00043E  20F4               	addwfc	prodh,w,c
  5113  000440  6EF7               	movwf	tblptrh,c
  5114  000442                     	if	1	;There are 3 active tblptr bytes
  5115  000442  6AF8               	clrf	tblptru,c
  5116  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  5117  000446  22F8               	addwfc	tblptru,f,c
  5118  000448                     	endif
  5119  000448  0009               	tblrd		*+
  5120  00044A  50F5               	movf	tablat,w,c
  5121  00044C  0100               	movlb	0	; () banked
  5122  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5123  000450  0009               	tblrd		*+
  5124  000452  50F5               	movf	tablat,w,c
  5125  000454  0100               	movlb	0	; () banked
  5126  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5127  000458  0009               	tblrd		*+
  5128  00045A  50F5               	movf	tablat,w,c
  5129  00045C  0100               	movlb	0	; () banked
  5130  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5131  000460  0009               	tblrd		*+
  5132  000462  50F5               	movf	tablat,w,c
  5133  000464  0100               	movlb	0	; () banked
  5134  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5135  000468  A0D8               	btfss	status,0,c
  5136  00046A  D003               	goto	l5243
  5137                           
  5138                           ; BSR set to: 0
  5139                           
  5140                           ; BSR set to: 0
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;doprnt.c: 1147: break;
  5144  00046C  0100               	movlb	0	; () banked
  5145  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  5146  000470  D7DA               	goto	L9
  5147  000472                     l5243:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;doprnt.c: 1184: {
  5151                           ;doprnt.c: 1197: if(flag & 0x03)
  5152  000472  0E03               	movlw	3
  5153  000474  0100               	movlb	0	; () banked
  5154  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  5155  000478  0100               	movlb	0	; () banked
  5156  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  5157  00047C  0E00               	movlw	0
  5158  00047E  0100               	movlb	0	; () banked
  5159  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5160  000482  0100               	movlb	0	; () banked
  5161  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5162  000486  0100               	movlb	0	; () banked
  5163  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5164  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  5165  00048C  B4D8               	btfsc	status,2,c
  5166  00048E  D055               	goto	l5257
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5170  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  5171  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5172  000498  0E2D               	movlw	45
  5173  00049A  D04B               	goto	L10
  5174  00049C                     l5249:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;doprnt.c: 1209: {
  5178                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5179  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5180  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5181  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5182  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5183  0004AC  0100               	movlb	0	; () banked
  5184  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  5185  0004B0  0D04               	mullw	4
  5186  0004B2  0ECD               	movlw	low _dpowers
  5187  0004B4  24F3               	addwf	prodl,w,c
  5188  0004B6  6EF6               	movwf	tblptrl,c
  5189  0004B8  0E7E               	movlw	high _dpowers
  5190  0004BA  20F4               	addwfc	prodh,w,c
  5191  0004BC  6EF7               	movwf	tblptrh,c
  5192  0004BE                     	if	1	;There are 3 active tblptr bytes
  5193  0004BE  6AF8               	clrf	tblptru,c
  5194  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  5195  0004C2  22F8               	addwfc	tblptru,f,c
  5196  0004C4                     	endif
  5197  0004C4  0009               	tblrd		*+
  5198  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5199  0004CA  0009               	tblrd		*+
  5200  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5201  0004D0  0009               	tblrd		*+
  5202  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5203  0004D6  000A               	tblrd		*-
  5204  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5205  0004DC  EC13  F010         	call	___lldiv	;wreg free
  5206  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  5207  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  5208  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5209  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5210                           
  5211                           ;doprnt.c: 1211: vd %= 10;
  5212  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5213  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5214  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5215  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5216  000500  0E0A               	movlw	10
  5217  000502  6E2A               	movwf	___llmod@divisor,c
  5218  000504  0E00               	movlw	0
  5219  000506  6E2B               	movwf	___llmod@divisor+1,c
  5220  000508  0E00               	movlw	0
  5221  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5222  00050C  0E00               	movlw	0
  5223  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5224  000510  ECEC  F011         	call	___llmod	;wreg free
  5225  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5226  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5227  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5228  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5229                           
  5230                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5231  000524  0100               	movlb	0	; () banked
  5232  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5233  000528  0F30               	addlw	48
  5234  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5235  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5236  000532                     L10:
  5237  000532  6EDF               	movwf	indf2,c
  5238                           
  5239                           ; BSR set to: 0
  5240  000534  0100               	movlb	0	; () banked
  5241  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5242  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5243  00053A                     l5257:
  5244                           
  5245                           ; BSR set to: 0
  5246  00053A  0100               	movlb	0	; () banked
  5247  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5248  00053E  0100               	movlb	0	; () banked
  5249  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5250  000542  B4D8               	btfsc	status,2,c
  5251  000544  D00E               	goto	l5265
  5252  000546  D7AA               	goto	l5249
  5253  000548                     l5259:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5257  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5258  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5259  000550  0E30               	movlw	48
  5260  000552  6EDF               	movwf	indf2,c
  5261                           
  5262                           ; BSR set to: 0
  5263  000554  0100               	movlb	0	; () banked
  5264  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5265  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;doprnt.c: 1218: exp--;
  5269  00055A  0100               	movlb	0	; () banked
  5270  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5271  00055E  A0D8               	btfss	status,0,c
  5272  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5273  000562                     l5265:
  5274                           
  5275                           ; BSR set to: 0
  5276  000562  0100               	movlb	0	; () banked
  5277  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5278  000566  0A80               	xorlw	128
  5279  000568  6EF3               	movwf	prodl,c
  5280  00056A  0E80               	movlw	128
  5281  00056C  5CF3               	subwf	prodl,w,c
  5282  00056E  0E01               	movlw	1
  5283  000570  B4D8               	btfsc	status,2,c
  5284  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5285  000574  B0D8               	btfsc	status,0,c
  5286  000576  D7E8               	goto	l5259
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;doprnt.c: 1219: }
  5290                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5291                           
  5292                           ; BSR set to: 0
  5293  000578  0100               	movlb	0	; () banked
  5294  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5295  00057C  0A80               	xorlw	128
  5296  00057E  0F80               	addlw	-128
  5297  000580  0E09               	movlw	9
  5298  000582  B4D8               	btfsc	status,2,c
  5299  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5300  000586  A0D8               	btfss	status,0,c
  5301  000588  D004               	goto	l523
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5305  00058A  0E08               	movlw	8
  5306  00058C  0100               	movlb	0	; () banked
  5307  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5308  000590  D002               	goto	l5271
  5309  000592                     l523:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 1222: else
  5313                           ;doprnt.c: 1223: c = prec;
  5314  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5315  000596                     l5271:
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;doprnt.c: 1224: prec -= c;
  5319  000596  0100               	movlb	0	; () banked
  5320  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5321  00059A  0100               	movlb	0	; () banked
  5322  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5323  00059E  0E00               	movlw	0
  5324  0005A0  0100               	movlb	0	; () banked
  5325  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5326  0005A4  0EFF               	movlw	255
  5327  0005A6  0100               	movlb	0	; () banked
  5328  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;doprnt.c: 1228: if(c)
  5332  0005AA  0100               	movlb	0	; () banked
  5333  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5334  0005AE  B4D8               	btfsc	status,2,c
  5335  0005B0  D009               	goto	l5279
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5339  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5340  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5341  0005BA  0E2E               	movlw	46
  5342  0005BC  6EDF               	movwf	indf2,c
  5343                           
  5344                           ; BSR set to: 0
  5345  0005BE  0100               	movlb	0	; () banked
  5346  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5347  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5348  0005C4                     l5279:
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5352  0005C4  0100               	movlb	0	; () banked
  5353  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5354  0005C8  ECA0  F004         	call	_scale
  5355  0005CC  C06C  F095         	movff	?_scale,_sprintf$2456
  5356  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2456+1
  5357  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2456+2
  5358                           
  5359                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5360  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5361  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5362  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5363  0005E4  C095  F060         	movff	_sprintf$2456,___ftmul@f1
  5364  0005E8  C096  F061         	movff	_sprintf$2456+1,___ftmul@f1+1
  5365  0005EC  C097  F062         	movff	_sprintf$2456+2,___ftmul@f1+2
  5366  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5367  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5368  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5369  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5370  000600  EC1B  F00A         	call	___fttol	;wreg free
  5371  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5372  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5373  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5374  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5375                           
  5376                           ;doprnt.c: 1237: while(c--) {
  5377  000614  D079               	goto	l5293
  5378  000616                     l5283:
  5379                           
  5380                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5381  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5382  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5383  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5384  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5385  000626  0100               	movlb	0	; () banked
  5386  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5387  00062A  0D04               	mullw	4
  5388  00062C  0ECD               	movlw	low _dpowers
  5389  00062E  24F3               	addwf	prodl,w,c
  5390  000630  6EF6               	movwf	tblptrl,c
  5391  000632  0E7E               	movlw	high _dpowers
  5392  000634  20F4               	addwfc	prodh,w,c
  5393  000636  6EF7               	movwf	tblptrh,c
  5394  000638                     	if	1	;There are 3 active tblptr bytes
  5395  000638  6AF8               	clrf	tblptru,c
  5396  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5397  00063C  22F8               	addwfc	tblptru,f,c
  5398  00063E                     	endif
  5399  00063E  0009               	tblrd		*+
  5400  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5401  000644  0009               	tblrd		*+
  5402  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5403  00064A  0009               	tblrd		*+
  5404  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5405  000650  000A               	tblrd		*-
  5406  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5407  000656  EC13  F010         	call	___lldiv	;wreg free
  5408  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1430
  5409  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1430+1
  5410  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1430+2
  5411  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1430+3
  5412                           
  5413                           ;doprnt.c: 1239: vd %= 10;
  5414  00066A  C0A0  F026         	movff	sprintf@vd_1430,___llmod@dividend
  5415  00066E  C0A1  F027         	movff	sprintf@vd_1430+1,___llmod@dividend+1
  5416  000672  C0A2  F028         	movff	sprintf@vd_1430+2,___llmod@dividend+2
  5417  000676  C0A3  F029         	movff	sprintf@vd_1430+3,___llmod@dividend+3
  5418  00067A  0E0A               	movlw	10
  5419  00067C  6E2A               	movwf	___llmod@divisor,c
  5420  00067E  0E00               	movlw	0
  5421  000680  6E2B               	movwf	___llmod@divisor+1,c
  5422  000682  0E00               	movlw	0
  5423  000684  6E2C               	movwf	___llmod@divisor+2,c
  5424  000686  0E00               	movlw	0
  5425  000688  6E2D               	movwf	___llmod@divisor+3,c
  5426  00068A  ECEC  F011         	call	___llmod	;wreg free
  5427  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1430
  5428  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1430+1
  5429  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1430+2
  5430  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1430+3
  5431                           
  5432                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5433  00069E  0100               	movlb	0	; () banked
  5434  0006A0  51A0               	movf	sprintf@vd_1430& (0+255),w,b
  5435  0006A2  0F30               	addlw	48
  5436  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5437  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5438  0006AC  6EDF               	movwf	indf2,c
  5439                           
  5440                           ; BSR set to: 0
  5441  0006AE  0100               	movlb	0	; () banked
  5442  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5443  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5447  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5448  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5449  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5450  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5451  0006C4  0100               	movlb	0	; () banked
  5452  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5453  0006C8  0D04               	mullw	4
  5454  0006CA  0ECD               	movlw	low _dpowers
  5455  0006CC  24F3               	addwf	prodl,w,c
  5456  0006CE  6EF6               	movwf	tblptrl,c
  5457  0006D0  0E7E               	movlw	high _dpowers
  5458  0006D2  20F4               	addwfc	prodh,w,c
  5459  0006D4  6EF7               	movwf	tblptrh,c
  5460  0006D6                     	if	1	;There are 3 active tblptr bytes
  5461  0006D6  6AF8               	clrf	tblptru,c
  5462  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5463  0006DA  22F8               	addwfc	tblptru,f,c
  5464  0006DC                     	endif
  5465  0006DC  0009               	tblrd		*+
  5466  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5467  0006E2  0009               	tblrd		*+
  5468  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5469  0006E8  0009               	tblrd		*+
  5470  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5471  0006EE  000A               	tblrd		*-
  5472  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5473  0006F4  ECEC  F011         	call	___llmod	;wreg free
  5474  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5475  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5476  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5477  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5478  000708                     l5293:
  5479  000708  0100               	movlb	0	; () banked
  5480  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5481  00070C  0100               	movlb	0	; () banked
  5482  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5483  000710  B4D8               	btfsc	status,2,c
  5484  000712  D00E               	goto	l5301
  5485  000714  D780               	goto	l5283
  5486  000716                     l5295:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5490  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5491  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5492  00071E  0E30               	movlw	48
  5493  000720  6EDF               	movwf	indf2,c
  5494                           
  5495                           ; BSR set to: 0
  5496  000722  0100               	movlb	0	; () banked
  5497  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5498  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;doprnt.c: 1246: prec--;
  5502  000728  0100               	movlb	0	; () banked
  5503  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5504  00072C  A0D8               	btfss	status,0,c
  5505  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5506  000730                     l5301:
  5507                           
  5508                           ; BSR set to: 0
  5509  000730  0100               	movlb	0	; () banked
  5510  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5511  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5512  000736  B4D8               	btfsc	status,2,c
  5513  000738  D0EA               	goto	l5343
  5514  00073A  D7ED               	goto	l5295
  5515  00073C                     l5303:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 1255: }
  5519                           ;doprnt.c: 1262: {
  5520                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5521  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5522  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5523  000744  0100               	movlb	0	; () banked
  5524  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5525  00074A  0100               	movlb	0	; () banked
  5526  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5527  000750  0100               	movlb	0	; () banked
  5528  000752  0E00               	movlw	0
  5529  000754  0100               	movlb	0	; () banked
  5530  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5531  000758  0EFF               	movlw	-1
  5532  00075A  0100               	movlb	0	; () banked
  5533  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5534  00075E  0100               	movlb	0	; () banked
  5535  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5536                           
  5537                           ; BSR set to: 0
  5538  000762  0E02               	movlw	2
  5539  000764  0100               	movlb	0	; () banked
  5540  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5541  000768  0E00               	movlw	0
  5542  00076A  0100               	movlb	0	; () banked
  5543  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5547  00076E  0100               	movlb	0	; () banked
  5548  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5549  000772  0A80               	xorlw	128
  5550  000774  0F80               	addlw	128
  5551  000776  E10B               	bnz	u6175
  5552  000778  0E00               	movlw	0
  5553  00077A  0100               	movlb	0	; () banked
  5554  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5555  00077E  E107               	bnz	u6175
  5556  000780  0E00               	movlw	0
  5557  000782  0100               	movlb	0	; () banked
  5558  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5559  000786  E103               	bnz	u6175
  5560  000788  0E00               	movlw	0
  5561  00078A  0100               	movlb	0	; () banked
  5562  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5563  00078E                     u6175:
  5564  00078E  B0D8               	btfsc	status,0,c
  5565  000790  D012               	goto	l5313
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;doprnt.c: 1271: flag |= 0x03;
  5569  000792  0E03               	movlw	3
  5570  000794  0100               	movlb	0	; () banked
  5571  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;doprnt.c: 1272: _val._val = -_val._val;
  5575  000798  0100               	movlb	0	; () banked
  5576  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5577  00079C  0100               	movlb	0	; () banked
  5578  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5579  0007A0  0100               	movlb	0	; () banked
  5580  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5581  0007A4  0100               	movlb	0	; () banked
  5582  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5583  0007A8  0E00               	movlw	0
  5584  0007AA  0100               	movlb	0	; () banked
  5585  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5586  0007AE  0100               	movlb	0	; () banked
  5587  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5588  0007B2  0100               	movlb	0	; () banked
  5589  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5590  0007B6                     l5313:
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;doprnt.c: 1273: }
  5594                           ;doprnt.c: 1275: }
  5595                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5596  0007B6  0E01               	movlw	1
  5597  0007B8  0100               	movlb	0	; () banked
  5598  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5599  0007BC                     
  5600                           ; BSR set to: 0
  5601  0007BC  0100               	movlb	0	; () banked
  5602  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5603  0007C0  0A0A               	xorlw	10
  5604  0007C2  B4D8               	btfsc	status,2,c
  5605  0007C4  D021               	goto	l5327
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5609                           
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613  0007C6  0100               	movlb	0	; () banked
  5614  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5615  0007CA  0D04               	mullw	4
  5616  0007CC  0ECD               	movlw	low _dpowers
  5617  0007CE  24F3               	addwf	prodl,w,c
  5618  0007D0  6EF6               	movwf	tblptrl,c
  5619  0007D2  0E7E               	movlw	high _dpowers
  5620  0007D4  20F4               	addwfc	prodh,w,c
  5621  0007D6  6EF7               	movwf	tblptrh,c
  5622  0007D8                     	if	1	;There are 3 active tblptr bytes
  5623  0007D8  6AF8               	clrf	tblptru,c
  5624  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5625  0007DC  22F8               	addwfc	tblptru,f,c
  5626  0007DE                     	endif
  5627  0007DE  0009               	tblrd		*+
  5628  0007E0  50F5               	movf	tablat,w,c
  5629  0007E2  0100               	movlb	0	; () banked
  5630  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5631  0007E6  0009               	tblrd		*+
  5632  0007E8  50F5               	movf	tablat,w,c
  5633  0007EA  0100               	movlb	0	; () banked
  5634  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5635  0007EE  0009               	tblrd		*+
  5636  0007F0  50F5               	movf	tablat,w,c
  5637  0007F2  0100               	movlb	0	; () banked
  5638  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5639  0007F6  0009               	tblrd		*+
  5640  0007F8  50F5               	movf	tablat,w,c
  5641  0007FA  0100               	movlb	0	; () banked
  5642  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5643  0007FE  A0D8               	btfss	status,0,c
  5644  000800  D003               	goto	l5327
  5645                           
  5646                           ; BSR set to: 0
  5647                           
  5648                           ; BSR set to: 0
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;doprnt.c: 1316: break;
  5652  000802  0100               	movlb	0	; () banked
  5653  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5654  000806  D7DA               	goto	L11
  5655  000808                     l5327:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;doprnt.c: 1431: {
  5659                           ;doprnt.c: 1447: if(flag & 0x03)
  5660  000808  0E03               	movlw	3
  5661  00080A  0100               	movlb	0	; () banked
  5662  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5663  00080E  0100               	movlb	0	; () banked
  5664  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5665  000812  0E00               	movlw	0
  5666  000814  0100               	movlb	0	; () banked
  5667  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5668  000818  0100               	movlb	0	; () banked
  5669  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5670  00081C  0100               	movlb	0	; () banked
  5671  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5672  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5673  000822  B4D8               	btfsc	status,2,c
  5674  000824  D009               	goto	l5333
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5678  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5679  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5680  00082E  0E2D               	movlw	45
  5681  000830  6EDF               	movwf	indf2,c
  5682                           
  5683                           ; BSR set to: 0
  5684  000832  0100               	movlb	0	; () banked
  5685  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5686  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5687  000838                     l5333:
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;doprnt.c: 1478: }
  5691                           ;doprnt.c: 1481: prec = c;
  5692  000838  0100               	movlb	0	; () banked
  5693  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5694  00083C  0100               	movlb	0	; () banked
  5695  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5696  000840  0100               	movlb	0	; () banked
  5697  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5698  000844  0100               	movlb	0	; () banked
  5699  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5700  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5701                           
  5702                           ;doprnt.c: 1483: while(prec--) {
  5703  00084A  D057               	goto	l5341
  5704  00084C                     l5335:
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;doprnt.c: 1487: {
  5708                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5709  00084C  0100               	movlb	0	; () banked
  5710  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5711  000852  0100               	movlb	0	; () banked
  5712  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5713  000858  0100               	movlb	0	; () banked
  5714  00085A  90D8               	bcf	status,0,c
  5715  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5716  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5717  000860  0100               	movlb	0	; () banked
  5718  000862  90D8               	bcf	status,0,c
  5719  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5720  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5721  000868  0ECD               	movlw	low _dpowers
  5722  00086A  0100               	movlb	0	; () banked
  5723  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5724  00086E  6EF6               	movwf	tblptrl,c
  5725  000870  0E7E               	movlw	high _dpowers
  5726  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5727  000874  6EF7               	movwf	tblptrh,c
  5728  000876                     	if	1	;There are 3 active tblptr bytes
  5729  000876  6AF8               	clrf	tblptru,c
  5730  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5731  00087A  22F8               	addwfc	tblptru,f,c
  5732  00087C                     	endif
  5733  00087C  0009               	tblrd		*+
  5734  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5735  000882  0009               	tblrd		*+
  5736  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5737  000888  0009               	tblrd		*+
  5738  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5739  00088E  000A               	tblrd		*-
  5740  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5741  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5742  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5743  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5744  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5745  0008A4  EC13  F010         	call	___lldiv	;wreg free
  5746  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5747  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5748  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5749  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5750  0008B8  0E0A               	movlw	10
  5751  0008BA  6E2A               	movwf	___llmod@divisor,c
  5752  0008BC  0E00               	movlw	0
  5753  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5754  0008C0  0E00               	movlw	0
  5755  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5756  0008C4  0E00               	movlw	0
  5757  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5758  0008C8  ECEC  F011         	call	___llmod	;wreg free
  5759  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5760  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5761  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5762  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5763  0008DC  0100               	movlb	0	; () banked
  5764  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5765  0008E0  0F30               	addlw	48
  5766  0008E2  0100               	movlb	0	; () banked
  5767  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;doprnt.c: 1532: }
  5771                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5772  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5773  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5774  0008EE  0100               	movlb	0	; () banked
  5775  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5776                           
  5777                           ; BSR set to: 0
  5778  0008F4  0100               	movlb	0	; () banked
  5779  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5780  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5781  0008FA                     l5341:
  5782                           
  5783                           ; BSR set to: 0
  5784  0008FA  0100               	movlb	0	; () banked
  5785  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5786  0008FE  A0D8               	btfss	status,0,c
  5787  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5788  000902  0100               	movlb	0	; () banked
  5789  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5790  000906  B4D8               	btfsc	status,2,c
  5791  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5792  00090A  A4D8               	btfss	status,2,c
  5793  00090C  D79F               	goto	l5335
  5794  00090E                     l5343:
  5795                           
  5796                           ; BSR set to: 0
  5797  00090E  0100               	movlb	0	; () banked
  5798  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5799  000914  0100               	movlb	0	; () banked
  5800  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5801  00091A  0100               	movlb	0	; () banked
  5802  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5803  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5804  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5805  000920  6AF8               	clrf	tblptru,c
  5806  000922                     	endif
  5807  000922                     	if	0	;tblptru may be non-zero
  5808  000922                     	endif
  5809  000922  0008               	tblrd		*
  5810  000924  0100               	movlb	0	; () banked
  5811  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5812  00092A  0100               	movlb	0	; () banked
  5813  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5814  00092E  EF18  F000         	goto	l5141
  5815  000932                     l5345:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;doprnt.c: 1547: *sp = 0;
  5819  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5820  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5821  00093A  0E00               	movlw	0
  5822  00093C  6EDF               	movwf	indf2,c
  5823                           
  5824                           ; BSR set to: 0
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;doprnt.c: 1549: return 0;
  5828                           ;	Return value of _sprintf is never used
  5829  00093E  0012               	return	
  5830  000940                     __end_of_sprintf:
  5831                           	opt stack 0
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           indf0	equ	0xFEF
  5840                           postinc0	equ	0xFEE
  5841                           fsr0h	equ	0xFEA
  5842                           fsr0l	equ	0xFE9
  5843                           wreg	equ	0xFE8
  5844                           postinc1	equ	0xFE6
  5845                           postdec1	equ	0xFE5
  5846                           fsr1l	equ	0xFE1
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           postdec2	equ	0xFDD
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function _scale *****************
  5855 ;; Defined at:
  5856 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  scl             1    wreg     char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  scl             1   18[BANK0 ] char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  3   12[BANK0 ] char 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5870 ;;      Params:         0       3       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5873 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5874 ;;Total ram usage:        7 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    6
  5877 ;; This function calls:
  5878 ;;		___awdiv
  5879 ;;		___awmod
  5880 ;;		___ftmul
  5881 ;;		___wmul
  5882 ;; This function is called by:
  5883 ;;		_sprintf
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text28
  5888  000940                     __ptext28:
  5889                           	opt stack 0
  5890  000940                     _scale:
  5891                           	opt stack 21
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;incstack = 0
  5895                           ;scale@scl stored from wreg
  5896  000940  0100               	movlb	0	; () banked
  5897  000942  6F72               	movwf	scale@scl& (0+255),b
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;doprnt.c: 428: if(scl < 0) {
  5901  000944  0100               	movlb	0	; () banked
  5902  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5903  000948  D111               	goto	l4873
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;doprnt.c: 429: scl = -scl;
  5907  00094A  0100               	movlb	0	; () banked
  5908  00094C  6D72               	negf	scale@scl& (0+255),b
  5909                           
  5910                           ;doprnt.c: 430: if(scl>=110)
  5911  00094E  0100               	movlb	0	; () banked
  5912  000950  5172               	movf	scale@scl& (0+255),w,b
  5913  000952  0A80               	xorlw	128
  5914  000954  0F12               	addlw	-238
  5915  000956  A0D8               	btfss	status,0,c
  5916  000958  D0A0               	goto	l4863
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5920  00095A  0E00               	movlw	0
  5921  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5922  00095E  0E03               	movlw	3
  5923  000960  6E29               	movwf	___wmul@multiplicand,c
  5924  000962  0E00               	movlw	0
  5925  000964  6E22               	movwf	___awdiv@divisor+1,c
  5926  000966  0E0A               	movlw	10
  5927  000968  6E21               	movwf	___awdiv@divisor,c
  5928  00096A  0E00               	movlw	0
  5929  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5930  00096E  0E64               	movlw	100
  5931  000970  6E1B               	movwf	___awmod@divisor,c
  5932  000972  0100               	movlb	0	; () banked
  5933  000974  5172               	movf	scale@scl& (0+255),w,b
  5934  000976  6E19               	movwf	___awmod@dividend,c
  5935  000978  6A1A               	clrf	___awmod@dividend+1,c
  5936  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5937  00097C  061A               	decf	___awmod@dividend+1,f,c
  5938  00097E  EC40  F00F         	call	___awmod	;wreg free
  5939  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5940  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5941  00098A  EC59  F00E         	call	___awdiv	;wreg free
  5942  00098E  0E09               	movlw	9
  5943  000990  241F               	addwf	?___awdiv,w,c
  5944  000992  6E27               	movwf	___wmul@multiplier,c
  5945  000994  0E00               	movlw	0
  5946  000996  2020               	addwfc	?___awdiv+1,w,c
  5947  000998  6E28               	movwf	___wmul@multiplier+1,c
  5948  00099A  EC11  F014         	call	___wmul	;wreg free
  5949  00099E  0EF5               	movlw	low __npowers_
  5950  0009A0  2427               	addwf	?___wmul,w,c
  5951  0009A2  6EF6               	movwf	tblptrl,c
  5952  0009A4  0E7E               	movlw	high __npowers_
  5953  0009A6  2028               	addwfc	?___wmul+1,w,c
  5954  0009A8  6EF7               	movwf	tblptrh,c
  5955  0009AA                     	if	1	;There are 3 active tblptr bytes
  5956  0009AA  6AF8               	clrf	tblptru,c
  5957  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5958  0009AE  22F8               	addwfc	tblptru,f,c
  5959  0009B0                     	endif
  5960  0009B0  0009               	tblrd		*+
  5961  0009B2  0100               	movlb	0	; () banked
  5962  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5963  0009B8  0009               	tblrd		*+
  5964  0009BA  0100               	movlb	0	; () banked
  5965  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5966  0009C0  000A               	tblrd		*-
  5967  0009C2  0100               	movlb	0	; () banked
  5968  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5969  0009C8  0E00               	movlw	0
  5970  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5971  0009CC  0E64               	movlw	100
  5972  0009CE  6E21               	movwf	___awdiv@divisor,c
  5973  0009D0  0100               	movlb	0	; () banked
  5974  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5975  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5976  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5977  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5978  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5979  0009DC  EC59  F00E         	call	___awdiv	;wreg free
  5980  0009E0  0E12               	movlw	18
  5981  0009E2  241F               	addwf	?___awdiv,w,c
  5982  0009E4  6E27               	movwf	___wmul@multiplier,c
  5983  0009E6  0E00               	movlw	0
  5984  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5985  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5986  0009EC  0E00               	movlw	0
  5987  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5988  0009F0  0E03               	movlw	3
  5989  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5990  0009F4  EC11  F014         	call	___wmul	;wreg free
  5991  0009F8  0EF5               	movlw	low __npowers_
  5992  0009FA  2427               	addwf	?___wmul,w,c
  5993  0009FC  6EF6               	movwf	tblptrl,c
  5994  0009FE  0E7E               	movlw	high __npowers_
  5995  000A00  2028               	addwfc	?___wmul+1,w,c
  5996  000A02  6EF7               	movwf	tblptrh,c
  5997  000A04                     	if	1	;There are 3 active tblptr bytes
  5998  000A04  6AF8               	clrf	tblptru,c
  5999  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  6000  000A08  22F8               	addwfc	tblptru,f,c
  6001  000A0A                     	endif
  6002  000A0A  0009               	tblrd		*+
  6003  000A0C  0100               	movlb	0	; () banked
  6004  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  6005  000A12  0009               	tblrd		*+
  6006  000A14  0100               	movlb	0	; () banked
  6007  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6008  000A1A  000A               	tblrd		*-
  6009  000A1C  0100               	movlb	0	; () banked
  6010  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6011  000A22  EC6F  F009         	call	___ftmul	;wreg free
  6012  000A26  C060  F06F         	movff	?___ftmul,_scale$2455
  6013  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2455+1
  6014  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2455+2
  6015                           
  6016                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6017  000A32  C06F  F060         	movff	_scale$2455,___ftmul@f1
  6018  000A36  C070  F061         	movff	_scale$2455+1,___ftmul@f1+1
  6019  000A3A  C071  F062         	movff	_scale$2455+2,___ftmul@f1+2
  6020  000A3E  0E00               	movlw	0
  6021  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  6022  000A42  0E03               	movlw	3
  6023  000A44  6E29               	movwf	___wmul@multiplicand,c
  6024  000A46  0E00               	movlw	0
  6025  000A48  6E1C               	movwf	___awmod@divisor+1,c
  6026  000A4A  0E0A               	movlw	10
  6027  000A4C  6E1B               	movwf	___awmod@divisor,c
  6028  000A4E  0100               	movlb	0	; () banked
  6029  000A50  5172               	movf	scale@scl& (0+255),w,b
  6030  000A52  6E19               	movwf	___awmod@dividend,c
  6031  000A54  6A1A               	clrf	___awmod@dividend+1,c
  6032  000A56  BE19               	btfsc	___awmod@dividend,7,c
  6033  000A58  061A               	decf	___awmod@dividend+1,f,c
  6034  000A5A  EC40  F00F         	call	___awmod	;wreg free
  6035  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6036  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6037  000A66  EC11  F014         	call	___wmul	;wreg free
  6038  000A6A  0EF5               	movlw	low __npowers_
  6039  000A6C  2427               	addwf	?___wmul,w,c
  6040  000A6E  6EF6               	movwf	tblptrl,c
  6041  000A70  0E7E               	movlw	high __npowers_
  6042  000A72  2028               	addwfc	?___wmul+1,w,c
  6043  000A74  6EF7               	movwf	tblptrh,c
  6044  000A76                     	if	1	;There are 3 active tblptr bytes
  6045  000A76  6AF8               	clrf	tblptru,c
  6046  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  6047  000A7A  22F8               	addwfc	tblptru,f,c
  6048  000A7C                     	endif
  6049  000A7C  0009               	tblrd		*+
  6050  000A7E  0100               	movlb	0	; () banked
  6051  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  6052  000A84  0009               	tblrd		*+
  6053  000A86  0100               	movlb	0	; () banked
  6054  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6055  000A8C  000A               	tblrd		*-
  6056  000A8E  0100               	movlb	0	; () banked
  6057  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6058  000A94  EC6F  F009         	call	___ftmul	;wreg free
  6059  000A98  D16F               	goto	L15
  6060  000A9A                     l4863:
  6061                           
  6062                           ;doprnt.c: 432: else if(scl > 10)
  6063  000A9A  0100               	movlb	0	; () banked
  6064  000A9C  5172               	movf	scale@scl& (0+255),w,b
  6065  000A9E  0A80               	xorlw	128
  6066  000AA0  0F75               	addlw	-139
  6067  000AA2  A0D8               	btfss	status,0,c
  6068  000AA4  D05B               	goto	l4869
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6072  000AA6  0E00               	movlw	0
  6073  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  6074  000AAA  0E0A               	movlw	10
  6075  000AAC  6E21               	movwf	___awdiv@divisor,c
  6076  000AAE  0100               	movlb	0	; () banked
  6077  000AB0  5172               	movf	scale@scl& (0+255),w,b
  6078  000AB2  6E1F               	movwf	___awdiv@dividend,c
  6079  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  6080  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  6081  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  6082  000ABA  EC59  F00E         	call	___awdiv	;wreg free
  6083  000ABE  0E09               	movlw	9
  6084  000AC0  241F               	addwf	?___awdiv,w,c
  6085  000AC2  6E27               	movwf	___wmul@multiplier,c
  6086  000AC4  0E00               	movlw	0
  6087  000AC6  2020               	addwfc	?___awdiv+1,w,c
  6088  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  6089  000ACA  0E00               	movlw	0
  6090  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  6091  000ACE  0E03               	movlw	3
  6092  000AD0  6E29               	movwf	___wmul@multiplicand,c
  6093  000AD2  EC11  F014         	call	___wmul	;wreg free
  6094  000AD6  0EF5               	movlw	low __npowers_
  6095  000AD8  2427               	addwf	?___wmul,w,c
  6096  000ADA  6EF6               	movwf	tblptrl,c
  6097  000ADC  0E7E               	movlw	high __npowers_
  6098  000ADE  2028               	addwfc	?___wmul+1,w,c
  6099  000AE0  6EF7               	movwf	tblptrh,c
  6100  000AE2                     	if	1	;There are 3 active tblptr bytes
  6101  000AE2  6AF8               	clrf	tblptru,c
  6102  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  6103  000AE6  22F8               	addwfc	tblptru,f,c
  6104  000AE8                     	endif
  6105  000AE8  0009               	tblrd		*+
  6106  000AEA  0100               	movlb	0	; () banked
  6107  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  6108  000AF0  0009               	tblrd		*+
  6109  000AF2  0100               	movlb	0	; () banked
  6110  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6111  000AF8  000A               	tblrd		*-
  6112  000AFA  0100               	movlb	0	; () banked
  6113  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6114  000B00  0E00               	movlw	0
  6115  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  6116  000B04  0E03               	movlw	3
  6117  000B06  6E29               	movwf	___wmul@multiplicand,c
  6118  000B08  0E00               	movlw	0
  6119  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  6120  000B0C  0E0A               	movlw	10
  6121  000B0E  6E1B               	movwf	___awmod@divisor,c
  6122  000B10  0100               	movlb	0	; () banked
  6123  000B12  5172               	movf	scale@scl& (0+255),w,b
  6124  000B14  6E19               	movwf	___awmod@dividend,c
  6125  000B16  6A1A               	clrf	___awmod@dividend+1,c
  6126  000B18  BE19               	btfsc	___awmod@dividend,7,c
  6127  000B1A  061A               	decf	___awmod@dividend+1,f,c
  6128  000B1C  EC40  F00F         	call	___awmod	;wreg free
  6129  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  6130  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6131  000B28  EC11  F014         	call	___wmul	;wreg free
  6132  000B2C  0EF5               	movlw	low __npowers_
  6133  000B2E  2427               	addwf	?___wmul,w,c
  6134  000B30  6EF6               	movwf	tblptrl,c
  6135  000B32  0E7E               	movlw	high __npowers_
  6136  000B34  2028               	addwfc	?___wmul+1,w,c
  6137  000B36  6EF7               	movwf	tblptrh,c
  6138  000B38                     	if	1	;There are 3 active tblptr bytes
  6139  000B38  6AF8               	clrf	tblptru,c
  6140  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6141  000B3C  22F8               	addwfc	tblptru,f,c
  6142  000B3E                     	endif
  6143  000B3E  0009               	tblrd		*+
  6144  000B40  0100               	movlb	0	; () banked
  6145  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  6146  000B46  0009               	tblrd		*+
  6147  000B48  0100               	movlb	0	; () banked
  6148  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6149  000B4E  000A               	tblrd		*-
  6150  000B50  0100               	movlb	0	; () banked
  6151  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6152  000B56  EC6F  F009         	call	___ftmul	;wreg free
  6153  000B5A  D10E               	goto	L15
  6154  000B5C                     l4869:
  6155                           
  6156                           ;doprnt.c: 434: return _npowers_[scl];
  6157  000B5C  0100               	movlb	0	; () banked
  6158  000B5E  5172               	movf	scale@scl& (0+255),w,b
  6159  000B60  0D03               	mullw	3
  6160  000B62  0EF5               	movlw	low __npowers_
  6161  000B64  24F3               	addwf	prodl,w,c
  6162  000B66  6EF6               	movwf	tblptrl,c
  6163  000B68  0E7E               	movlw	high __npowers_
  6164  000B6A  D114               	goto	L14
  6165  000B6C                     l4873:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;doprnt.c: 435: }
  6169                           ;doprnt.c: 436: if(scl>=110)
  6170  000B6C  0100               	movlb	0	; () banked
  6171  000B6E  5172               	movf	scale@scl& (0+255),w,b
  6172  000B70  0A80               	xorlw	128
  6173  000B72  0F12               	addlw	-238
  6174  000B74  A0D8               	btfss	status,0,c
  6175  000B76  D0A0               	goto	l4881
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6179  000B78  0E00               	movlw	0
  6180  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  6181  000B7C  0E03               	movlw	3
  6182  000B7E  6E29               	movwf	___wmul@multiplicand,c
  6183  000B80  0E00               	movlw	0
  6184  000B82  6E22               	movwf	___awdiv@divisor+1,c
  6185  000B84  0E0A               	movlw	10
  6186  000B86  6E21               	movwf	___awdiv@divisor,c
  6187  000B88  0E00               	movlw	0
  6188  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  6189  000B8C  0E64               	movlw	100
  6190  000B8E  6E1B               	movwf	___awmod@divisor,c
  6191  000B90  0100               	movlb	0	; () banked
  6192  000B92  5172               	movf	scale@scl& (0+255),w,b
  6193  000B94  6E19               	movwf	___awmod@dividend,c
  6194  000B96  6A1A               	clrf	___awmod@dividend+1,c
  6195  000B98  BE19               	btfsc	___awmod@dividend,7,c
  6196  000B9A  061A               	decf	___awmod@dividend+1,f,c
  6197  000B9C  EC40  F00F         	call	___awmod	;wreg free
  6198  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6199  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6200  000BA8  EC59  F00E         	call	___awdiv	;wreg free
  6201  000BAC  0E09               	movlw	9
  6202  000BAE  241F               	addwf	?___awdiv,w,c
  6203  000BB0  6E27               	movwf	___wmul@multiplier,c
  6204  000BB2  0E00               	movlw	0
  6205  000BB4  2020               	addwfc	?___awdiv+1,w,c
  6206  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  6207  000BB8  EC11  F014         	call	___wmul	;wreg free
  6208  000BBC  0E1C               	movlw	low __powers_
  6209  000BBE  2427               	addwf	?___wmul,w,c
  6210  000BC0  6EF6               	movwf	tblptrl,c
  6211  000BC2  0E7F               	movlw	high __powers_
  6212  000BC4  2028               	addwfc	?___wmul+1,w,c
  6213  000BC6  6EF7               	movwf	tblptrh,c
  6214  000BC8                     	if	1	;There are 3 active tblptr bytes
  6215  000BC8  6AF8               	clrf	tblptru,c
  6216  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6217  000BCC  22F8               	addwfc	tblptru,f,c
  6218  000BCE                     	endif
  6219  000BCE  0009               	tblrd		*+
  6220  000BD0  0100               	movlb	0	; () banked
  6221  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6222  000BD6  0009               	tblrd		*+
  6223  000BD8  0100               	movlb	0	; () banked
  6224  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6225  000BDE  000A               	tblrd		*-
  6226  000BE0  0100               	movlb	0	; () banked
  6227  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6228  000BE6  0E00               	movlw	0
  6229  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6230  000BEA  0E64               	movlw	100
  6231  000BEC  6E21               	movwf	___awdiv@divisor,c
  6232  000BEE  0100               	movlb	0	; () banked
  6233  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6234  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6235  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6236  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6237  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6238  000BFA  EC59  F00E         	call	___awdiv	;wreg free
  6239  000BFE  0E12               	movlw	18
  6240  000C00  241F               	addwf	?___awdiv,w,c
  6241  000C02  6E27               	movwf	___wmul@multiplier,c
  6242  000C04  0E00               	movlw	0
  6243  000C06  2020               	addwfc	?___awdiv+1,w,c
  6244  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6245  000C0A  0E00               	movlw	0
  6246  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6247  000C0E  0E03               	movlw	3
  6248  000C10  6E29               	movwf	___wmul@multiplicand,c
  6249  000C12  EC11  F014         	call	___wmul	;wreg free
  6250  000C16  0E1C               	movlw	low __powers_
  6251  000C18  2427               	addwf	?___wmul,w,c
  6252  000C1A  6EF6               	movwf	tblptrl,c
  6253  000C1C  0E7F               	movlw	high __powers_
  6254  000C1E  2028               	addwfc	?___wmul+1,w,c
  6255  000C20  6EF7               	movwf	tblptrh,c
  6256  000C22                     	if	1	;There are 3 active tblptr bytes
  6257  000C22  6AF8               	clrf	tblptru,c
  6258  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6259  000C26  22F8               	addwfc	tblptru,f,c
  6260  000C28                     	endif
  6261  000C28  0009               	tblrd		*+
  6262  000C2A  0100               	movlb	0	; () banked
  6263  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6264  000C30  0009               	tblrd		*+
  6265  000C32  0100               	movlb	0	; () banked
  6266  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6267  000C38  000A               	tblrd		*-
  6268  000C3A  0100               	movlb	0	; () banked
  6269  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6270  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6271  000C44  C060  F06F         	movff	?___ftmul,_scale$2455
  6272  000C48  C061  F070         	movff	?___ftmul+1,_scale$2455+1
  6273  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2455+2
  6274                           
  6275                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6276  000C50  C06F  F060         	movff	_scale$2455,___ftmul@f1
  6277  000C54  C070  F061         	movff	_scale$2455+1,___ftmul@f1+1
  6278  000C58  C071  F062         	movff	_scale$2455+2,___ftmul@f1+2
  6279  000C5C  0E00               	movlw	0
  6280  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6281  000C60  0E03               	movlw	3
  6282  000C62  6E29               	movwf	___wmul@multiplicand,c
  6283  000C64  0E00               	movlw	0
  6284  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6285  000C68  0E0A               	movlw	10
  6286  000C6A  6E1B               	movwf	___awmod@divisor,c
  6287  000C6C  0100               	movlb	0	; () banked
  6288  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6289  000C70  6E19               	movwf	___awmod@dividend,c
  6290  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6291  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6292  000C76  061A               	decf	___awmod@dividend+1,f,c
  6293  000C78  EC40  F00F         	call	___awmod	;wreg free
  6294  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6295  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6296  000C84  EC11  F014         	call	___wmul	;wreg free
  6297  000C88  0E1C               	movlw	low __powers_
  6298  000C8A  2427               	addwf	?___wmul,w,c
  6299  000C8C  6EF6               	movwf	tblptrl,c
  6300  000C8E  0E7F               	movlw	high __powers_
  6301  000C90  2028               	addwfc	?___wmul+1,w,c
  6302  000C92  6EF7               	movwf	tblptrh,c
  6303  000C94                     	if	1	;There are 3 active tblptr bytes
  6304  000C94  6AF8               	clrf	tblptru,c
  6305  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6306  000C98  22F8               	addwfc	tblptru,f,c
  6307  000C9A                     	endif
  6308  000C9A  0009               	tblrd		*+
  6309  000C9C  0100               	movlb	0	; () banked
  6310  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6311  000CA2  0009               	tblrd		*+
  6312  000CA4  0100               	movlb	0	; () banked
  6313  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6314  000CAA  000A               	tblrd		*-
  6315  000CAC  0100               	movlb	0	; () banked
  6316  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6317  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6318  000CB6  D060               	goto	L15
  6319  000CB8                     l4881:
  6320                           
  6321                           ;doprnt.c: 438: else if(scl > 10)
  6322  000CB8  0100               	movlb	0	; () banked
  6323  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6324  000CBC  0A80               	xorlw	128
  6325  000CBE  0F75               	addlw	-139
  6326  000CC0  A0D8               	btfss	status,0,c
  6327  000CC2  D061               	goto	l4887
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6331  000CC4  0E00               	movlw	0
  6332  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6333  000CC8  0E0A               	movlw	10
  6334  000CCA  6E21               	movwf	___awdiv@divisor,c
  6335  000CCC  0100               	movlb	0	; () banked
  6336  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6337  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6338  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6339  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6340  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6341  000CD8  EC59  F00E         	call	___awdiv	;wreg free
  6342  000CDC  0E09               	movlw	9
  6343  000CDE  241F               	addwf	?___awdiv,w,c
  6344  000CE0  6E27               	movwf	___wmul@multiplier,c
  6345  000CE2  0E00               	movlw	0
  6346  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6347  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6348  000CE8  0E00               	movlw	0
  6349  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6350  000CEC  0E03               	movlw	3
  6351  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6352  000CF0  EC11  F014         	call	___wmul	;wreg free
  6353  000CF4  0E1C               	movlw	low __powers_
  6354  000CF6  2427               	addwf	?___wmul,w,c
  6355  000CF8  6EF6               	movwf	tblptrl,c
  6356  000CFA  0E7F               	movlw	high __powers_
  6357  000CFC  2028               	addwfc	?___wmul+1,w,c
  6358  000CFE  6EF7               	movwf	tblptrh,c
  6359  000D00                     	if	1	;There are 3 active tblptr bytes
  6360  000D00  6AF8               	clrf	tblptru,c
  6361  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6362  000D04  22F8               	addwfc	tblptru,f,c
  6363  000D06                     	endif
  6364  000D06  0009               	tblrd		*+
  6365  000D08  0100               	movlb	0	; () banked
  6366  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6367  000D0E  0009               	tblrd		*+
  6368  000D10  0100               	movlb	0	; () banked
  6369  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6370  000D16  000A               	tblrd		*-
  6371  000D18  0100               	movlb	0	; () banked
  6372  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6373  000D1E  0E00               	movlw	0
  6374  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6375  000D22  0E03               	movlw	3
  6376  000D24  6E29               	movwf	___wmul@multiplicand,c
  6377  000D26  0E00               	movlw	0
  6378  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6379  000D2A  0E0A               	movlw	10
  6380  000D2C  6E1B               	movwf	___awmod@divisor,c
  6381  000D2E  0100               	movlb	0	; () banked
  6382  000D30  5172               	movf	scale@scl& (0+255),w,b
  6383  000D32  6E19               	movwf	___awmod@dividend,c
  6384  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6385  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6386  000D38  061A               	decf	___awmod@dividend+1,f,c
  6387  000D3A  EC40  F00F         	call	___awmod	;wreg free
  6388  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6389  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6390  000D46  EC11  F014         	call	___wmul	;wreg free
  6391  000D4A  0E1C               	movlw	low __powers_
  6392  000D4C  2427               	addwf	?___wmul,w,c
  6393  000D4E  6EF6               	movwf	tblptrl,c
  6394  000D50  0E7F               	movlw	high __powers_
  6395  000D52  2028               	addwfc	?___wmul+1,w,c
  6396  000D54  6EF7               	movwf	tblptrh,c
  6397  000D56                     	if	1	;There are 3 active tblptr bytes
  6398  000D56  6AF8               	clrf	tblptru,c
  6399  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6400  000D5A  22F8               	addwfc	tblptru,f,c
  6401  000D5C                     	endif
  6402  000D5C  0009               	tblrd		*+
  6403  000D5E  0100               	movlb	0	; () banked
  6404  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6405  000D64  0009               	tblrd		*+
  6406  000D66  0100               	movlb	0	; () banked
  6407  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6408  000D6C  000A               	tblrd		*-
  6409  000D6E  0100               	movlb	0	; () banked
  6410  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6411  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6412  000D78                     L15:
  6413  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6414  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6415  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6416  000D84  D018               	goto	l476
  6417  000D86                     l4887:
  6418                           
  6419                           ;doprnt.c: 440: return _powers_[scl];
  6420  000D86  0100               	movlb	0	; () banked
  6421  000D88  5172               	movf	scale@scl& (0+255),w,b
  6422  000D8A  0D03               	mullw	3
  6423  000D8C  0E1C               	movlw	low __powers_
  6424  000D8E  24F3               	addwf	prodl,w,c
  6425  000D90  6EF6               	movwf	tblptrl,c
  6426  000D92  0E7F               	movlw	high __powers_
  6427  000D94                     L14:
  6428  000D94  20F4               	addwfc	prodh,w,c
  6429  000D96  6EF7               	movwf	tblptrh,c
  6430  000D98                     	if	1	;There are 3 active tblptr bytes
  6431  000D98  6AF8               	clrf	tblptru,c
  6432  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6433  000D9C  22F8               	addwfc	tblptru,f,c
  6434  000D9E                     	endif
  6435  000D9E  0009               	tblrd		*+
  6436  000DA0  0100               	movlb	0	; () banked
  6437  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6438  000DA6  0009               	tblrd		*+
  6439  000DA8  0100               	movlb	0	; () banked
  6440  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6441  000DAE  000A               	tblrd		*-
  6442  000DB0  0100               	movlb	0	; () banked
  6443  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6444  000DB6                     l476:
  6445  000DB6  0012               	return	
  6446  000DB8                     __end_of_scale:
  6447                           	opt stack 0
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           indf0	equ	0xFEF
  6456                           postinc0	equ	0xFEE
  6457                           fsr0h	equ	0xFEA
  6458                           fsr0l	equ	0xFE9
  6459                           wreg	equ	0xFE8
  6460                           postinc1	equ	0xFE6
  6461                           postdec1	equ	0xFE5
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function _fround *****************
  6471 ;; Defined at:
  6472 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  prec            1    wreg     unsigned char 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  prec            1   21[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  3   12[BANK0 ] unsigned char 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6486 ;;      Params:         0       3       0       0       0       0       0       0       0
  6487 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6489 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6490 ;;Total ram usage:       10 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    6
  6493 ;; This function calls:
  6494 ;;		___awdiv
  6495 ;;		___awmod
  6496 ;;		___ftmul
  6497 ;;		___wmul
  6498 ;; This function is called by:
  6499 ;;		_sprintf
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text29
  6504  000DB8                     __ptext29:
  6505                           	opt stack 0
  6506  000DB8                     _fround:
  6507                           	opt stack 21
  6508                           
  6509                           ;incstack = 0
  6510                           ;fround@prec stored from wreg
  6511  000DB8  0100               	movlb	0	; () banked
  6512  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;doprnt.c: 413: if(prec>=110)
  6516  000DBC  0E6D               	movlw	109
  6517  000DBE  0100               	movlb	0	; () banked
  6518  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6519  000DC2  D0B1               	goto	l4841
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6523  000DC4  0E00               	movlw	0
  6524  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6525  000DC8  0E03               	movlw	3
  6526  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6527  000DCC  0E00               	movlw	0
  6528  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6529  000DD0  0E0A               	movlw	10
  6530  000DD2  6E21               	movwf	___awdiv@divisor,c
  6531  000DD4  0E00               	movlw	0
  6532  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6533  000DD8  0E64               	movlw	100
  6534  000DDA  6E1B               	movwf	___awmod@divisor,c
  6535  000DDC  0100               	movlb	0	; () banked
  6536  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6537  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6538  000DE4  EC40  F00F         	call	___awmod	;wreg free
  6539  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6540  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6541  000DF0  EC59  F00E         	call	___awdiv	;wreg free
  6542  000DF4  0E09               	movlw	9
  6543  000DF6  241F               	addwf	?___awdiv,w,c
  6544  000DF8  6E27               	movwf	___wmul@multiplier,c
  6545  000DFA  0E00               	movlw	0
  6546  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6547  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6548  000E00  EC11  F014         	call	___wmul	;wreg free
  6549  000E04  0EF5               	movlw	low __npowers_
  6550  000E06  2427               	addwf	?___wmul,w,c
  6551  000E08  6EF6               	movwf	tblptrl,c
  6552  000E0A  0E7E               	movlw	high __npowers_
  6553  000E0C  2028               	addwfc	?___wmul+1,w,c
  6554  000E0E  6EF7               	movwf	tblptrh,c
  6555  000E10                     	if	1	;There are 3 active tblptr bytes
  6556  000E10  6AF8               	clrf	tblptru,c
  6557  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6558  000E14  22F8               	addwfc	tblptru,f,c
  6559  000E16                     	endif
  6560  000E16  0009               	tblrd		*+
  6561  000E18  0100               	movlb	0	; () banked
  6562  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6563  000E1E  0009               	tblrd		*+
  6564  000E20  0100               	movlb	0	; () banked
  6565  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6566  000E26  000A               	tblrd		*-
  6567  000E28  0100               	movlb	0	; () banked
  6568  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6569  000E2E  0E00               	movlw	0
  6570  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6571  000E32  0E64               	movlw	100
  6572  000E34  6E21               	movwf	___awdiv@divisor,c
  6573  000E36  0100               	movlb	0	; () banked
  6574  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6575  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6576  000E3E  EC59  F00E         	call	___awdiv	;wreg free
  6577  000E42  0E12               	movlw	18
  6578  000E44  241F               	addwf	?___awdiv,w,c
  6579  000E46  6E27               	movwf	___wmul@multiplier,c
  6580  000E48  0E00               	movlw	0
  6581  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6582  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6583  000E4E  0E00               	movlw	0
  6584  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6585  000E52  0E03               	movlw	3
  6586  000E54  6E29               	movwf	___wmul@multiplicand,c
  6587  000E56  EC11  F014         	call	___wmul	;wreg free
  6588  000E5A  0EF5               	movlw	low __npowers_
  6589  000E5C  2427               	addwf	?___wmul,w,c
  6590  000E5E  6EF6               	movwf	tblptrl,c
  6591  000E60  0E7E               	movlw	high __npowers_
  6592  000E62  2028               	addwfc	?___wmul+1,w,c
  6593  000E64  6EF7               	movwf	tblptrh,c
  6594  000E66                     	if	1	;There are 3 active tblptr bytes
  6595  000E66  6AF8               	clrf	tblptru,c
  6596  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6597  000E6A  22F8               	addwfc	tblptru,f,c
  6598  000E6C                     	endif
  6599  000E6C  0009               	tblrd		*+
  6600  000E6E  0100               	movlb	0	; () banked
  6601  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6602  000E74  0009               	tblrd		*+
  6603  000E76  0100               	movlb	0	; () banked
  6604  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6605  000E7C  000A               	tblrd		*-
  6606  000E7E  0100               	movlb	0	; () banked
  6607  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6608  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6609  000E88  C060  F072         	movff	?___ftmul,_fround$2453
  6610  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2453+1
  6611  000E90  C062  F074         	movff	?___ftmul+2,_fround$2453+2
  6612                           
  6613                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6614  000E94  0E00               	movlw	0
  6615  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6616  000E98  0E03               	movlw	3
  6617  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6618  000E9C  0E00               	movlw	0
  6619  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6620  000EA0  0E0A               	movlw	10
  6621  000EA2  6E1B               	movwf	___awmod@divisor,c
  6622  000EA4  0100               	movlb	0	; () banked
  6623  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6624  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6625  000EAC  EC40  F00F         	call	___awmod	;wreg free
  6626  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6627  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6628  000EB8  EC11  F014         	call	___wmul	;wreg free
  6629  000EBC  0EF5               	movlw	low __npowers_
  6630  000EBE  2427               	addwf	?___wmul,w,c
  6631  000EC0  6EF6               	movwf	tblptrl,c
  6632  000EC2  0E7E               	movlw	high __npowers_
  6633  000EC4  2028               	addwfc	?___wmul+1,w,c
  6634  000EC6  6EF7               	movwf	tblptrh,c
  6635  000EC8                     	if	1	;There are 3 active tblptr bytes
  6636  000EC8  6AF8               	clrf	tblptru,c
  6637  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6638  000ECC  22F8               	addwfc	tblptru,f,c
  6639  000ECE                     	endif
  6640  000ECE  0009               	tblrd		*+
  6641  000ED0  0100               	movlb	0	; () banked
  6642  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6643  000ED6  0009               	tblrd		*+
  6644  000ED8  0100               	movlb	0	; () banked
  6645  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6646  000EDE  000A               	tblrd		*-
  6647  000EE0  0100               	movlb	0	; () banked
  6648  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6649  000EE6  C072  F060         	movff	_fround$2453,___ftmul@f1
  6650  000EEA  C073  F061         	movff	_fround$2453+1,___ftmul@f1+1
  6651  000EEE  C074  F062         	movff	_fround$2453+2,___ftmul@f1+2
  6652  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6653  000EF6  C060  F06F         	movff	?___ftmul,_fround$2454
  6654  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2454+1
  6655  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2454+2
  6656                           
  6657                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6658  000F02  C06F  F060         	movff	_fround$2454,___ftmul@f1
  6659  000F06  C070  F061         	movff	_fround$2454+1,___ftmul@f1+1
  6660  000F0A  C071  F062         	movff	_fround$2454+2,___ftmul@f1+2
  6661  000F0E  0E00               	movlw	0
  6662  000F10  0100               	movlb	0	; () banked
  6663  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6664  000F14  0E00               	movlw	0
  6665  000F16  0100               	movlb	0	; () banked
  6666  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6667  000F1A  0E3F               	movlw	63
  6668  000F1C  0100               	movlb	0	; () banked
  6669  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6670  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6671  000F24  D095               	goto	L17
  6672  000F26                     l4841:
  6673                           
  6674                           ;doprnt.c: 415: else if(prec > 10)
  6675  000F26  0E0A               	movlw	10
  6676  000F28  0100               	movlb	0	; () banked
  6677  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6678  000F2C  D06E               	goto	l4849
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6682  000F2E  0E00               	movlw	0
  6683  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6684  000F32  0E03               	movlw	3
  6685  000F34  6E29               	movwf	___wmul@multiplicand,c
  6686  000F36  0E00               	movlw	0
  6687  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6688  000F3A  0E0A               	movlw	10
  6689  000F3C  6E1B               	movwf	___awmod@divisor,c
  6690  000F3E  0100               	movlb	0	; () banked
  6691  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6692  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6693  000F46  EC40  F00F         	call	___awmod	;wreg free
  6694  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6695  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6696  000F52  EC11  F014         	call	___wmul	;wreg free
  6697  000F56  0EF5               	movlw	low __npowers_
  6698  000F58  2427               	addwf	?___wmul,w,c
  6699  000F5A  6EF6               	movwf	tblptrl,c
  6700  000F5C  0E7E               	movlw	high __npowers_
  6701  000F5E  2028               	addwfc	?___wmul+1,w,c
  6702  000F60  6EF7               	movwf	tblptrh,c
  6703  000F62                     	if	1	;There are 3 active tblptr bytes
  6704  000F62  6AF8               	clrf	tblptru,c
  6705  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6706  000F66  22F8               	addwfc	tblptru,f,c
  6707  000F68                     	endif
  6708  000F68  0009               	tblrd		*+
  6709  000F6A  0100               	movlb	0	; () banked
  6710  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6711  000F70  0009               	tblrd		*+
  6712  000F72  0100               	movlb	0	; () banked
  6713  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6714  000F78  000A               	tblrd		*-
  6715  000F7A  0100               	movlb	0	; () banked
  6716  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6717  000F80  0E00               	movlw	0
  6718  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6719  000F84  0E0A               	movlw	10
  6720  000F86  6E21               	movwf	___awdiv@divisor,c
  6721  000F88  0100               	movlb	0	; () banked
  6722  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6723  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6724  000F90  EC59  F00E         	call	___awdiv	;wreg free
  6725  000F94  0E09               	movlw	9
  6726  000F96  241F               	addwf	?___awdiv,w,c
  6727  000F98  6E27               	movwf	___wmul@multiplier,c
  6728  000F9A  0E00               	movlw	0
  6729  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6730  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6731  000FA0  0E00               	movlw	0
  6732  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6733  000FA4  0E03               	movlw	3
  6734  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6735  000FA8  EC11  F014         	call	___wmul	;wreg free
  6736  000FAC  0EF5               	movlw	low __npowers_
  6737  000FAE  2427               	addwf	?___wmul,w,c
  6738  000FB0  6EF6               	movwf	tblptrl,c
  6739  000FB2  0E7E               	movlw	high __npowers_
  6740  000FB4  2028               	addwfc	?___wmul+1,w,c
  6741  000FB6  6EF7               	movwf	tblptrh,c
  6742  000FB8                     	if	1	;There are 3 active tblptr bytes
  6743  000FB8  6AF8               	clrf	tblptru,c
  6744  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6745  000FBC  22F8               	addwfc	tblptru,f,c
  6746  000FBE                     	endif
  6747  000FBE  0009               	tblrd		*+
  6748  000FC0  0100               	movlb	0	; () banked
  6749  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6750  000FC6  0009               	tblrd		*+
  6751  000FC8  0100               	movlb	0	; () banked
  6752  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6753  000FCE  000A               	tblrd		*-
  6754  000FD0  0100               	movlb	0	; () banked
  6755  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6756  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6757  000FDA  C060  F072         	movff	?___ftmul,_fround$2453
  6758  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2453+1
  6759  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2453+2
  6760                           
  6761                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6762  000FE6  C072  F060         	movff	_fround$2453,___ftmul@f1
  6763  000FEA  C073  F061         	movff	_fround$2453+1,___ftmul@f1+1
  6764  000FEE  C074  F062         	movff	_fround$2453+2,___ftmul@f1+2
  6765  000FF2  0E00               	movlw	0
  6766  000FF4  0100               	movlb	0	; () banked
  6767  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6768  000FF8  0E00               	movlw	0
  6769  000FFA  0100               	movlb	0	; () banked
  6770  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6771  000FFE  0E3F               	movlw	63
  6772  001000  0100               	movlb	0	; () banked
  6773  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6774  001004  EC6F  F009         	call	___ftmul	;wreg free
  6775  001008  D023               	goto	L17
  6776  00100A                     l4849:
  6777                           
  6778                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6779  00100A  0100               	movlb	0	; () banked
  6780  00100C  5175               	movf	fround@prec& (0+255),w,b
  6781  00100E  0D03               	mullw	3
  6782  001010  0EF5               	movlw	low __npowers_
  6783  001012  24F3               	addwf	prodl,w,c
  6784  001014  6EF6               	movwf	tblptrl,c
  6785  001016  0E7E               	movlw	high __npowers_
  6786  001018  20F4               	addwfc	prodh,w,c
  6787  00101A  6EF7               	movwf	tblptrh,c
  6788  00101C                     	if	1	;There are 3 active tblptr bytes
  6789  00101C  6AF8               	clrf	tblptru,c
  6790  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6791  001020  22F8               	addwfc	tblptru,f,c
  6792  001022                     	endif
  6793  001022  0009               	tblrd		*+
  6794  001024  0100               	movlb	0	; () banked
  6795  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6796  00102A  0009               	tblrd		*+
  6797  00102C  0100               	movlb	0	; () banked
  6798  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6799  001032  000A               	tblrd		*-
  6800  001034  0100               	movlb	0	; () banked
  6801  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6802  00103A  0E00               	movlw	0
  6803  00103C  0100               	movlb	0	; () banked
  6804  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6805  001040  0E00               	movlw	0
  6806  001042  0100               	movlb	0	; () banked
  6807  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6808  001046  0E3F               	movlw	63
  6809  001048  0100               	movlb	0	; () banked
  6810  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6811  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6812  001050                     L17:
  6813  001050  C060  F06C         	movff	?___ftmul,?_fround
  6814  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6815  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6816  00105C  0012               	return	
  6817  00105E                     __end_of_fround:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           indf0	equ	0xFEF
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           postinc1	equ	0xFE6
  6832                           postdec1	equ	0xFE5
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function ___wmul *****************
  6842 ;; Defined at:
  6843 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  multiplier      2   38[COMRAM] unsigned int 
  6846 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6847 ;; Auto vars:     Size  Location     Type
  6848 ;;  product         2   42[COMRAM] unsigned int 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  2   38[COMRAM] unsigned int 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0, prodl, prodh
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6858 ;;      Params:         4       0       0       0       0       0       0       0       0
  6859 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6861 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6862 ;;Total ram usage:        6 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    4
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_fround
  6869 ;;		_scale
  6870 ;;		_sprintf
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text30
  6875  002822                     __ptext30:
  6876                           	opt stack 0
  6877  002822                     ___wmul:
  6878                           	opt stack 22
  6879                           
  6880                           ;incstack = 0
  6881  002822  5027               	movf	___wmul@multiplier,w,c
  6882  002824  0229               	mulwf	___wmul@multiplicand,c
  6883  002826  CFF3 F02B          	movff	prodl,___wmul@product
  6884  00282A  CFF4 F02C          	movff	prodh,___wmul@product+1
  6885  00282E  5027               	movf	___wmul@multiplier,w,c
  6886  002830  022A               	mulwf	___wmul@multiplicand+1,c
  6887  002832  50F3               	movf	prodl,w,c
  6888  002834  262C               	addwf	___wmul@product+1,f,c
  6889  002836  5028               	movf	___wmul@multiplier+1,w,c
  6890  002838  0229               	mulwf	___wmul@multiplicand,c
  6891  00283A  50F3               	movf	prodl,w,c
  6892  00283C  262C               	addwf	___wmul@product+1,f,c
  6893  00283E  C02B  F027         	movff	___wmul@product,?___wmul
  6894  002842  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6895  002846  0012               	return	
  6896  002848                     __end_of___wmul:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           indf0	equ	0xFEF
  6906                           postinc0	equ	0xFEE
  6907                           fsr0h	equ	0xFEA
  6908                           fsr0l	equ	0xFE9
  6909                           wreg	equ	0xFE8
  6910                           postinc1	equ	0xFE6
  6911                           postdec1	equ	0xFE5
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function ___ftmul *****************
  6921 ;; Defined at:
  6922 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  f1              3    0[BANK0 ] float 
  6925 ;;  f2              3    3[BANK0 ] float 
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6928 ;;  sign            1   11[BANK0 ] unsigned char 
  6929 ;;  cntr            1   10[BANK0 ] unsigned char 
  6930 ;;  exp             1    6[BANK0 ] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  3    0[BANK0 ] float 
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6940 ;;      Params:         0       6       0       0       0       0       0       0       0
  6941 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6942 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6943 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6944 ;;Total ram usage:       15 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    5
  6947 ;; This function calls:
  6948 ;;		___ftpack
  6949 ;; This function is called by:
  6950 ;;		_PWM_DutyCycle1
  6951 ;;		_PWM_DutyCycle2
  6952 ;;		_fround
  6953 ;;		_scale
  6954 ;;		_sprintf
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text31
  6959  0012DE                     __ptext31:
  6960                           	opt stack 0
  6961  0012DE                     ___ftmul:
  6962                           	opt stack 21
  6963                           
  6964                           ;incstack = 0
  6965  0012DE  0100               	movlb	0	; () banked
  6966  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6967  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6968  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6969  0012E8  0100               	movlb	0	; () banked
  6970  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6971  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6972  0012EE  E301               	bnc	u5141
  6973  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6974  0012F2                     u5141:
  6975  0012F2  502D               	movf	??___ftmul,w,c
  6976  0012F4  0100               	movlb	0	; () banked
  6977  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6978  0012F8  0100               	movlb	0	; () banked
  6979  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6980  0012FC  D001               	goto	l4613
  6981  0012FE  D010               	goto	u5170
  6982  001300                     l4613:
  6983                           
  6984                           ; BSR set to: 0
  6985  001300  0100               	movlb	0	; () banked
  6986  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6987  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6988  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6989  00130A  0100               	movlb	0	; () banked
  6990  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6991  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6992  001310  E301               	bnc	u5161
  6993  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6994  001314                     u5161:
  6995  001314  502D               	movf	??___ftmul,w,c
  6996  001316  0100               	movlb	0	; () banked
  6997  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6998  00131A  0100               	movlb	0	; () banked
  6999  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  7000  00131E  D00A               	goto	l4619
  7001  001320                     u5170:
  7002                           
  7003                           ; BSR set to: 0
  7004  001320  0E00               	movlw	0
  7005  001322  0100               	movlb	0	; () banked
  7006  001324  6F60               	movwf	?___ftmul& (0+255),b
  7007  001326  0E00               	movlw	0
  7008  001328  0100               	movlb	0	; () banked
  7009  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  7010  00132C  0E00               	movlw	0
  7011  00132E  0100               	movlb	0	; () banked
  7012  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  7013  001332  D080               	goto	l1070
  7014  001334                     l4619:
  7015                           
  7016                           ; BSR set to: 0
  7017  001334  0100               	movlb	0	; () banked
  7018  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  7019  001338  0F7B               	addlw	123
  7020  00133A  0100               	movlb	0	; () banked
  7021  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 0
  7024  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  7025  001342  0100               	movlb	0	; () banked
  7026  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7027  001346  0100               	movlb	0	; () banked
  7028  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  7029  00134A  0E80               	movlw	128
  7030  00134C  0100               	movlb	0	; () banked
  7031  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  7032                           
  7033                           ; BSR set to: 0
  7034  001350  0100               	movlb	0	; () banked
  7035  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7036                           
  7037                           ; BSR set to: 0
  7038  001354  0100               	movlb	0	; () banked
  7039  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7040                           
  7041                           ; BSR set to: 0
  7042  001358  0EFF               	movlw	255
  7043  00135A  0100               	movlb	0	; () banked
  7044  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  7045  00135E  0EFF               	movlw	255
  7046  001360  0100               	movlb	0	; () banked
  7047  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7048  001364  0E00               	movlw	0
  7049  001366  0100               	movlb	0	; () banked
  7050  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7051                           
  7052                           ; BSR set to: 0
  7053  00136A  0E00               	movlw	0
  7054  00136C  0100               	movlb	0	; () banked
  7055  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  7056  001370  0E00               	movlw	0
  7057  001372  0100               	movlb	0	; () banked
  7058  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7059  001376  0E00               	movlw	0
  7060  001378  0100               	movlb	0	; () banked
  7061  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7062                           
  7063                           ; BSR set to: 0
  7064  00137C  0E07               	movlw	7
  7065  00137E  0100               	movlb	0	; () banked
  7066  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7067  001382                     l4633:
  7068                           
  7069                           ; BSR set to: 0
  7070  001382  0100               	movlb	0	; () banked
  7071  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  7072  001386  D00C               	goto	l4637
  7073                           
  7074                           ; BSR set to: 0
  7075  001388  0100               	movlb	0	; () banked
  7076  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  7077  00138C  0100               	movlb	0	; () banked
  7078  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7079  001390  0100               	movlb	0	; () banked
  7080  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7081  001394  0100               	movlb	0	; () banked
  7082  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7083  001398  0100               	movlb	0	; () banked
  7084  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7085  00139C  0100               	movlb	0	; () banked
  7086  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7087  0013A0                     l4637:
  7088                           
  7089                           ; BSR set to: 0
  7090  0013A0  0100               	movlb	0	; () banked
  7091  0013A2  90D8               	bcf	status,0,c
  7092  0013A4  0100               	movlb	0	; () banked
  7093  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7094  0013A8  0100               	movlb	0	; () banked
  7095  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7096  0013AC  0100               	movlb	0	; () banked
  7097  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7098  0013B0  0100               	movlb	0	; () banked
  7099  0013B2  90D8               	bcf	status,0,c
  7100  0013B4  0100               	movlb	0	; () banked
  7101  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  7102  0013B8  0100               	movlb	0	; () banked
  7103  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7104  0013BC  0100               	movlb	0	; () banked
  7105  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7106                           
  7107                           ; BSR set to: 0
  7108  0013C0  0100               	movlb	0	; () banked
  7109  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7110  0013C4  D7DE               	goto	l4633
  7111                           
  7112                           ; BSR set to: 0
  7113                           
  7114                           ; BSR set to: 0
  7115  0013C6  0E09               	movlw	9
  7116  0013C8  0100               	movlb	0	; () banked
  7117  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7118  0013CC                     l4643:
  7119                           
  7120                           ; BSR set to: 0
  7121  0013CC  0100               	movlb	0	; () banked
  7122  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  7123  0013D0  D00C               	goto	l4647
  7124                           
  7125                           ; BSR set to: 0
  7126  0013D2  0100               	movlb	0	; () banked
  7127  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  7128  0013D6  0100               	movlb	0	; () banked
  7129  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7130  0013DA  0100               	movlb	0	; () banked
  7131  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7132  0013DE  0100               	movlb	0	; () banked
  7133  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7134  0013E2  0100               	movlb	0	; () banked
  7135  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7136  0013E6  0100               	movlb	0	; () banked
  7137  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7138  0013EA                     l4647:
  7139                           
  7140                           ; BSR set to: 0
  7141  0013EA  0100               	movlb	0	; () banked
  7142  0013EC  90D8               	bcf	status,0,c
  7143  0013EE  0100               	movlb	0	; () banked
  7144  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7145  0013F2  0100               	movlb	0	; () banked
  7146  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7147  0013F6  0100               	movlb	0	; () banked
  7148  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7149  0013FA  0100               	movlb	0	; () banked
  7150  0013FC  90D8               	bcf	status,0,c
  7151  0013FE  0100               	movlb	0	; () banked
  7152  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7153  001402  0100               	movlb	0	; () banked
  7154  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7155  001406  0100               	movlb	0	; () banked
  7156  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7157                           
  7158                           ; BSR set to: 0
  7159  00140A  0100               	movlb	0	; () banked
  7160  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7161  00140E  D7DE               	goto	l4643
  7162                           
  7163                           ; BSR set to: 0
  7164                           
  7165                           ; BSR set to: 0
  7166  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  7167  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7168  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7169  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  7170  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  7171  001424  ECB2  F00D         	call	___ftpack	;wreg free
  7172  001428  C019  F060         	movff	?___ftpack,?___ftmul
  7173  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  7174  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  7175  001434                     l1070:
  7176  001434  0012               	return	
  7177  001436                     __end_of___ftmul:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon	equ	0xFF2
  7186                           indf0	equ	0xFEF
  7187                           postinc0	equ	0xFEE
  7188                           fsr0h	equ	0xFEA
  7189                           fsr0l	equ	0xFE9
  7190                           wreg	equ	0xFE8
  7191                           postinc1	equ	0xFE6
  7192                           postdec1	equ	0xFE5
  7193                           fsr1l	equ	0xFE1
  7194                           indf2	equ	0xFDF
  7195                           postinc2	equ	0xFDE
  7196                           postdec2	equ	0xFDD
  7197                           fsr2h	equ	0xFDA
  7198                           fsr2l	equ	0xFD9
  7199                           status	equ	0xFD8
  7200                           
  7201 ;; *************** function ___awmod *****************
  7202 ;; Defined at:
  7203 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  dividend        2   24[COMRAM] int 
  7206 ;;  divisor         2   26[COMRAM] int 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  sign            1   29[COMRAM] unsigned char 
  7209 ;;  counter         1   28[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  2   24[COMRAM] int 
  7212 ;; Registers used:
  7213 ;;		wreg, status,2, status,0, prodl
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7219 ;;      Params:         4       0       0       0       0       0       0       0       0
  7220 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7222 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7223 ;;Total ram usage:        6 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    4
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_fround
  7230 ;;		_scale
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text32
  7235  001E80                     __ptext32:
  7236                           	opt stack 0
  7237  001E80                     ___awmod:
  7238                           	opt stack 22
  7239                           
  7240                           ;incstack = 0
  7241  001E80  0E00               	movlw	0
  7242  001E82  6E1E               	movwf	___awmod@sign,c
  7243  001E84  501A               	movf	___awmod@dividend+1,w,c
  7244  001E86  0A80               	xorlw	128
  7245  001E88  6EF3               	movwf	prodl,c
  7246  001E8A  0E80               	movlw	128
  7247  001E8C  5CF3               	subwf	prodl,w,c
  7248  001E8E  0E00               	movlw	0
  7249  001E90  B4D8               	btfsc	status,2,c
  7250  001E92  5C19               	subwf	___awmod@dividend,w,c
  7251  001E94  B0D8               	btfsc	status,0,c
  7252  001E96  D006               	goto	l4707
  7253  001E98  6C19               	negf	___awmod@dividend,c
  7254  001E9A  1E1A               	comf	___awmod@dividend+1,f,c
  7255  001E9C  B0D8               	btfsc	status,0,c
  7256  001E9E  2A1A               	incf	___awmod@dividend+1,f,c
  7257  001EA0  0E01               	movlw	1
  7258  001EA2  6E1E               	movwf	___awmod@sign,c
  7259  001EA4                     l4707:
  7260  001EA4  501C               	movf	___awmod@divisor+1,w,c
  7261  001EA6  0A80               	xorlw	128
  7262  001EA8  6EF3               	movwf	prodl,c
  7263  001EAA  0E80               	movlw	128
  7264  001EAC  5CF3               	subwf	prodl,w,c
  7265  001EAE  0E00               	movlw	0
  7266  001EB0  B4D8               	btfsc	status,2,c
  7267  001EB2  5C1B               	subwf	___awmod@divisor,w,c
  7268  001EB4  B0D8               	btfsc	status,0,c
  7269  001EB6  D004               	goto	l4711
  7270  001EB8  6C1B               	negf	___awmod@divisor,c
  7271  001EBA  1E1C               	comf	___awmod@divisor+1,f,c
  7272  001EBC  B0D8               	btfsc	status,0,c
  7273  001EBE  2A1C               	incf	___awmod@divisor+1,f,c
  7274  001EC0                     l4711:
  7275  001EC0  501C               	movf	___awmod@divisor+1,w,c
  7276  001EC2  101B               	iorwf	___awmod@divisor,w,c
  7277  001EC4  B4D8               	btfsc	status,2,c
  7278  001EC6  D018               	goto	l4727
  7279  001EC8  0E01               	movlw	1
  7280  001ECA  6E1D               	movwf	___awmod@counter,c
  7281  001ECC  D004               	goto	l4717
  7282  001ECE                     l4715:
  7283  001ECE  90D8               	bcf	status,0,c
  7284  001ED0  361B               	rlcf	___awmod@divisor,f,c
  7285  001ED2  361C               	rlcf	___awmod@divisor+1,f,c
  7286  001ED4  2A1D               	incf	___awmod@counter,f,c
  7287  001ED6                     l4717:
  7288  001ED6  AE1C               	btfss	___awmod@divisor+1,7,c
  7289  001ED8  D7FA               	goto	l4715
  7290  001EDA                     l4719:
  7291  001EDA  501B               	movf	___awmod@divisor,w,c
  7292  001EDC  5C19               	subwf	___awmod@dividend,w,c
  7293  001EDE  501C               	movf	___awmod@divisor+1,w,c
  7294  001EE0  581A               	subwfb	___awmod@dividend+1,w,c
  7295  001EE2  A0D8               	btfss	status,0,c
  7296  001EE4  D004               	goto	l4723
  7297  001EE6  501B               	movf	___awmod@divisor,w,c
  7298  001EE8  5E19               	subwf	___awmod@dividend,f,c
  7299  001EEA  501C               	movf	___awmod@divisor+1,w,c
  7300  001EEC  5A1A               	subwfb	___awmod@dividend+1,f,c
  7301  001EEE                     l4723:
  7302  001EEE  90D8               	bcf	status,0,c
  7303  001EF0  321C               	rrcf	___awmod@divisor+1,f,c
  7304  001EF2  321B               	rrcf	___awmod@divisor,f,c
  7305  001EF4  2E1D               	decfsz	___awmod@counter,f,c
  7306  001EF6  D7F1               	goto	l4719
  7307  001EF8                     l4727:
  7308  001EF8  501E               	movf	___awmod@sign,w,c
  7309  001EFA  B4D8               	btfsc	status,2,c
  7310  001EFC  D004               	goto	l4731
  7311  001EFE  6C19               	negf	___awmod@dividend,c
  7312  001F00  1E1A               	comf	___awmod@dividend+1,f,c
  7313  001F02  B0D8               	btfsc	status,0,c
  7314  001F04  2A1A               	incf	___awmod@dividend+1,f,c
  7315  001F06                     l4731:
  7316  001F06  C019  F019         	movff	___awmod@dividend,?___awmod
  7317  001F0A  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7318  001F0E  0012               	return	
  7319  001F10                     __end_of___awmod:
  7320                           	opt stack 0
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           fsr0h	equ	0xFEA
  7331                           fsr0l	equ	0xFE9
  7332                           wreg	equ	0xFE8
  7333                           postinc1	equ	0xFE6
  7334                           postdec1	equ	0xFE5
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function ___awdiv *****************
  7344 ;; Defined at:
  7345 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  dividend        2   30[COMRAM] int 
  7348 ;;  divisor         2   32[COMRAM] int 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  quotient        2   36[COMRAM] int 
  7351 ;;  sign            1   35[COMRAM] unsigned char 
  7352 ;;  counter         1   34[COMRAM] unsigned char 
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  2   30[COMRAM] int 
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, status,0, prodl
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7362 ;;      Params:         4       0       0       0       0       0       0       0       0
  7363 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7365 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7366 ;;Total ram usage:        8 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    4
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_fround
  7373 ;;		_scale
  7374 ;;		_sprintf
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text33
  7379  001CB2                     __ptext33:
  7380                           	opt stack 0
  7381  001CB2                     ___awdiv:
  7382                           	opt stack 22
  7383                           
  7384                           ;incstack = 0
  7385  001CB2  0E00               	movlw	0
  7386  001CB4  6E24               	movwf	___awdiv@sign,c
  7387  001CB6  5022               	movf	___awdiv@divisor+1,w,c
  7388  001CB8  0A80               	xorlw	128
  7389  001CBA  6EF3               	movwf	prodl,c
  7390  001CBC  0E80               	movlw	128
  7391  001CBE  5CF3               	subwf	prodl,w,c
  7392  001CC0  0E00               	movlw	0
  7393  001CC2  B4D8               	btfsc	status,2,c
  7394  001CC4  5C21               	subwf	___awdiv@divisor,w,c
  7395  001CC6  B0D8               	btfsc	status,0,c
  7396  001CC8  D006               	goto	l4663
  7397  001CCA  6C21               	negf	___awdiv@divisor,c
  7398  001CCC  1E22               	comf	___awdiv@divisor+1,f,c
  7399  001CCE  B0D8               	btfsc	status,0,c
  7400  001CD0  2A22               	incf	___awdiv@divisor+1,f,c
  7401  001CD2  0E01               	movlw	1
  7402  001CD4  6E24               	movwf	___awdiv@sign,c
  7403  001CD6                     l4663:
  7404  001CD6  5020               	movf	___awdiv@dividend+1,w,c
  7405  001CD8  0A80               	xorlw	128
  7406  001CDA  6EF3               	movwf	prodl,c
  7407  001CDC  0E80               	movlw	128
  7408  001CDE  5CF3               	subwf	prodl,w,c
  7409  001CE0  0E00               	movlw	0
  7410  001CE2  B4D8               	btfsc	status,2,c
  7411  001CE4  5C1F               	subwf	___awdiv@dividend,w,c
  7412  001CE6  B0D8               	btfsc	status,0,c
  7413  001CE8  D006               	goto	l4669
  7414  001CEA  6C1F               	negf	___awdiv@dividend,c
  7415  001CEC  1E20               	comf	___awdiv@dividend+1,f,c
  7416  001CEE  B0D8               	btfsc	status,0,c
  7417  001CF0  2A20               	incf	___awdiv@dividend+1,f,c
  7418  001CF2  0E01               	movlw	1
  7419  001CF4  1A24               	xorwf	___awdiv@sign,f,c
  7420  001CF6                     l4669:
  7421  001CF6  0E00               	movlw	0
  7422  001CF8  6E26               	movwf	___awdiv@quotient+1,c
  7423  001CFA  0E00               	movlw	0
  7424  001CFC  6E25               	movwf	___awdiv@quotient,c
  7425  001CFE  5022               	movf	___awdiv@divisor+1,w,c
  7426  001D00  1021               	iorwf	___awdiv@divisor,w,c
  7427  001D02  B4D8               	btfsc	status,2,c
  7428  001D04  D01C               	goto	l4691
  7429  001D06  0E01               	movlw	1
  7430  001D08  6E23               	movwf	___awdiv@counter,c
  7431  001D0A  D004               	goto	l4677
  7432  001D0C                     l4675:
  7433  001D0C  90D8               	bcf	status,0,c
  7434  001D0E  3621               	rlcf	___awdiv@divisor,f,c
  7435  001D10  3622               	rlcf	___awdiv@divisor+1,f,c
  7436  001D12  2A23               	incf	___awdiv@counter,f,c
  7437  001D14                     l4677:
  7438  001D14  AE22               	btfss	___awdiv@divisor+1,7,c
  7439  001D16  D7FA               	goto	l4675
  7440  001D18                     l4679:
  7441  001D18  90D8               	bcf	status,0,c
  7442  001D1A  3625               	rlcf	___awdiv@quotient,f,c
  7443  001D1C  3626               	rlcf	___awdiv@quotient+1,f,c
  7444  001D1E  5021               	movf	___awdiv@divisor,w,c
  7445  001D20  5C1F               	subwf	___awdiv@dividend,w,c
  7446  001D22  5022               	movf	___awdiv@divisor+1,w,c
  7447  001D24  5820               	subwfb	___awdiv@dividend+1,w,c
  7448  001D26  A0D8               	btfss	status,0,c
  7449  001D28  D005               	goto	l4687
  7450  001D2A  5021               	movf	___awdiv@divisor,w,c
  7451  001D2C  5E1F               	subwf	___awdiv@dividend,f,c
  7452  001D2E  5022               	movf	___awdiv@divisor+1,w,c
  7453  001D30  5A20               	subwfb	___awdiv@dividend+1,f,c
  7454  001D32  8025               	bsf	___awdiv@quotient,0,c
  7455  001D34                     l4687:
  7456  001D34  90D8               	bcf	status,0,c
  7457  001D36  3222               	rrcf	___awdiv@divisor+1,f,c
  7458  001D38  3221               	rrcf	___awdiv@divisor,f,c
  7459  001D3A  2E23               	decfsz	___awdiv@counter,f,c
  7460  001D3C  D7ED               	goto	l4679
  7461  001D3E                     l4691:
  7462  001D3E  5024               	movf	___awdiv@sign,w,c
  7463  001D40  B4D8               	btfsc	status,2,c
  7464  001D42  D004               	goto	l4695
  7465  001D44  6C25               	negf	___awdiv@quotient,c
  7466  001D46  1E26               	comf	___awdiv@quotient+1,f,c
  7467  001D48  B0D8               	btfsc	status,0,c
  7468  001D4A  2A26               	incf	___awdiv@quotient+1,f,c
  7469  001D4C                     l4695:
  7470  001D4C  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7471  001D50  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7472  001D54  0012               	return	
  7473  001D56                     __end_of___awdiv:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           indf0	equ	0xFEF
  7483                           postinc0	equ	0xFEE
  7484                           fsr0h	equ	0xFEA
  7485                           fsr0l	equ	0xFE9
  7486                           wreg	equ	0xFE8
  7487                           postinc1	equ	0xFE6
  7488                           postdec1	equ	0xFE5
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function __tdiv_to_l_ *****************
  7498 ;; Defined at:
  7499 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  f1              3   24[COMRAM] float 
  7502 ;;  f2              3   27[COMRAM] float 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  quot            4   33[COMRAM] unsigned long 
  7505 ;;  exp1            1   38[COMRAM] unsigned char 
  7506 ;;  cntr            1   37[COMRAM] unsigned char 
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  4   24[COMRAM] unsigned long 
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7516 ;;      Params:         6       0       0       0       0       0       0       0       0
  7517 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7518 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7519 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7520 ;;Total ram usage:       15 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    4
  7523 ;; This function calls:
  7524 ;;		Nothing
  7525 ;; This function is called by:
  7526 ;;		_sprintf
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text34
  7531  0017F4                     __ptext34:
  7532                           	opt stack 0
  7533  0017F4                     __tdiv_to_l_:
  7534                           	opt stack 23
  7535                           
  7536                           ;incstack = 0
  7537  0017F4  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7538  0017F8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7539  0017FA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7540  0017FC  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7541  0017FE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7542  001800  E301               	bnc	u5551
  7543  001802  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7544  001804                     u5551:
  7545  001804  501F               	movf	??__tdiv_to_l_,w,c
  7546  001806  6E27               	movwf	__tdiv_to_l_@exp1,c
  7547  001808  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7548  00180A  D001               	goto	l4897
  7549  00180C  D059               	goto	u5620
  7550  00180E                     l4897:
  7551  00180E  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7552  001812  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7553  001814  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7554  001816  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7555  001818  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7556  00181A  E301               	bnc	u5571
  7557  00181C  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7558  00181E                     u5571:
  7559  00181E  501F               	movf	??__tdiv_to_l_,w,c
  7560  001820  6E26               	movwf	__tdiv_to_l_@cntr,c
  7561  001822  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7562  001824  D001               	goto	l4903
  7563  001826  D04C               	goto	u5620
  7564  001828                     l4903:
  7565  001828  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7566  00182A  0EFF               	movlw	255
  7567  00182C  1619               	andwf	__tdiv_to_l_@f1,f,c
  7568  00182E  0EFF               	movlw	255
  7569  001830  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7570  001832  0E00               	movlw	0
  7571  001834  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7572  001836  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7573  001838  0EFF               	movlw	255
  7574  00183A  161C               	andwf	__tdiv_to_l_@f2,f,c
  7575  00183C  0EFF               	movlw	255
  7576  00183E  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7577  001840  0E00               	movlw	0
  7578  001842  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7579  001844  0E00               	movlw	0
  7580  001846  6E22               	movwf	__tdiv_to_l_@quot,c
  7581  001848  0E00               	movlw	0
  7582  00184A  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7583  00184C  0E00               	movlw	0
  7584  00184E  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7585  001850  0E00               	movlw	0
  7586  001852  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7587  001854  0E7F               	movlw	127
  7588  001856  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7589  001858  5026               	movf	__tdiv_to_l_@cntr,w,c
  7590  00185A  0F98               	addlw	152
  7591  00185C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7592  00185E  0E18               	movlw	24
  7593  001860  6E26               	movwf	__tdiv_to_l_@cntr,c
  7594  001862                     l1048:
  7595  001862  90D8               	bcf	status,0,c
  7596  001864  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7597  001866  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7598  001868  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7599  00186A  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7600  00186C  501C               	movf	__tdiv_to_l_@f2,w,c
  7601  00186E  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7602  001870  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7603  001872  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7604  001874  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7605  001876  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7606  001878  A0D8               	btfss	status,0,c
  7607  00187A  D007               	goto	l1049
  7608  00187C  501C               	movf	__tdiv_to_l_@f2,w,c
  7609  00187E  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7610  001880  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7611  001882  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7612  001884  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7613  001886  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7614  001888  8022               	bsf	__tdiv_to_l_@quot,0,c
  7615  00188A                     l1049:
  7616  00188A  90D8               	bcf	status,0,c
  7617  00188C  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7618  00188E  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7619  001890  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7620  001892  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7621  001894  D7E6               	goto	l1048
  7622  001896  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7623  001898  D010               	goto	l4935
  7624  00189A  5027               	movf	__tdiv_to_l_@exp1,w,c
  7625  00189C  0A80               	xorlw	128
  7626  00189E  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7627  0018A0  0EE9               	movlw	233
  7628  0018A2  0A80               	xorlw	128
  7629  0018A4  5C1F               	subwf	??__tdiv_to_l_,w,c
  7630  0018A6  A0D8               	btfss	status,0,c
  7631  0018A8  D00B               	goto	u5620
  7632  0018AA                     l4931:
  7633  0018AA  90D8               	bcf	status,0,c
  7634  0018AC  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7635  0018AE  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7636  0018B0  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7637  0018B2  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7638  0018B4  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7639  0018B6  D7F9               	goto	l4931
  7640  0018B8  D014               	goto	l1055
  7641  0018BA                     l4935:
  7642  0018BA  0E17               	movlw	23
  7643  0018BC  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7644  0018BE  D00F               	goto	l4943
  7645  0018C0                     u5620:
  7646  0018C0  0E00               	movlw	0
  7647  0018C2  6E19               	movwf	?__tdiv_to_l_,c
  7648  0018C4  0E00               	movlw	0
  7649  0018C6  6E1A               	movwf	?__tdiv_to_l_+1,c
  7650  0018C8  0E00               	movlw	0
  7651  0018CA  6E1B               	movwf	?__tdiv_to_l_+2,c
  7652  0018CC  0E00               	movlw	0
  7653  0018CE  6E1C               	movwf	?__tdiv_to_l_+3,c
  7654  0018D0  D010               	goto	l1046
  7655  0018D2                     l4941:
  7656  0018D2  90D8               	bcf	status,0,c
  7657  0018D4  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7658  0018D6  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7659  0018D8  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7660  0018DA  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7661  0018DC  0627               	decf	__tdiv_to_l_@exp1,f,c
  7662  0018DE                     l4943:
  7663  0018DE  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7664  0018E0  D7F8               	goto	l4941
  7665  0018E2                     l1055:
  7666  0018E2  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7667  0018E6  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7668  0018EA  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7669  0018EE  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7670  0018F2                     l1046:
  7671  0018F2  0012               	return	
  7672  0018F4                     __end_of__tdiv_to_l_:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           indf0	equ	0xFEF
  7682                           postinc0	equ	0xFEE
  7683                           fsr0h	equ	0xFEA
  7684                           fsr0l	equ	0xFE9
  7685                           wreg	equ	0xFE8
  7686                           postinc1	equ	0xFE6
  7687                           postdec1	equ	0xFE5
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function __div_to_l_ *****************
  7697 ;; Defined at:
  7698 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  f1              3   24[COMRAM] unsigned long 
  7701 ;;  f2              3   27[COMRAM] unsigned long 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  quot            4   34[COMRAM] unsigned long 
  7704 ;;  exp1            1   39[COMRAM] unsigned char 
  7705 ;;  cntr            1   38[COMRAM] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  4   24[COMRAM] unsigned long 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7715 ;;      Params:         6       0       0       0       0       0       0       0       0
  7716 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7717 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7718 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7719 ;;Total ram usage:       16 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_sprintf
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text35
  7730  0016BE                     __ptext35:
  7731                           	opt stack 0
  7732  0016BE                     __div_to_l_:
  7733                           	opt stack 23
  7734                           
  7735                           ;incstack = 0
  7736  0016BE  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7737  0016C2  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7738  0016C6  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7739  0016CA  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7740  0016CE  0E18               	movlw	24
  7741  0016D0  D005               	goto	u5640
  7742  0016D2                     u5645:
  7743  0016D2  90D8               	bcf	status,0,c
  7744  0016D4  3222               	rrcf	??__div_to_l_+3,f,c
  7745  0016D6  3221               	rrcf	??__div_to_l_+2,f,c
  7746  0016D8  3220               	rrcf	??__div_to_l_+1,f,c
  7747  0016DA  321F               	rrcf	??__div_to_l_,f,c
  7748  0016DC                     u5640:
  7749  0016DC  2EE8               	decfsz	wreg,f,c
  7750  0016DE  D7F9               	goto	u5645
  7751  0016E0  501F               	movf	??__div_to_l_,w,c
  7752  0016E2  6E28               	movwf	__div_to_l_@exp1,c
  7753  0016E4  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7754  0016E6  D001               	goto	l4951
  7755  0016E8  D06B               	goto	u5710
  7756  0016EA                     l4951:
  7757  0016EA  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7758  0016EE  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7759  0016F2  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7760  0016F6  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7761  0016FA  0E18               	movlw	24
  7762  0016FC  D005               	goto	u5660
  7763  0016FE                     u5665:
  7764  0016FE  90D8               	bcf	status,0,c
  7765  001700  3222               	rrcf	??__div_to_l_+3,f,c
  7766  001702  3221               	rrcf	??__div_to_l_+2,f,c
  7767  001704  3220               	rrcf	??__div_to_l_+1,f,c
  7768  001706  321F               	rrcf	??__div_to_l_,f,c
  7769  001708                     u5660:
  7770  001708  2EE8               	decfsz	wreg,f,c
  7771  00170A  D7F9               	goto	u5665
  7772  00170C  501F               	movf	??__div_to_l_,w,c
  7773  00170E  6E27               	movwf	__div_to_l_@cntr,c
  7774  001710  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7775  001712  D001               	goto	l4957
  7776  001714  D055               	goto	u5710
  7777  001716                     l4957:
  7778  001716  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7779  001718  0EFF               	movlw	255
  7780  00171A  1619               	andwf	__div_to_l_@f1,f,c
  7781  00171C  0EFF               	movlw	255
  7782  00171E  161A               	andwf	__div_to_l_@f1+1,f,c
  7783  001720  0EFF               	movlw	255
  7784  001722  161B               	andwf	__div_to_l_@f1+2,f,c
  7785  001724  0E00               	movlw	0
  7786  001726  161C               	andwf	__div_to_l_@f1+3,f,c
  7787  001728  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7788  00172A  0EFF               	movlw	255
  7789  00172C  161C               	andwf	__div_to_l_@f2,f,c
  7790  00172E  0EFF               	movlw	255
  7791  001730  161D               	andwf	__div_to_l_@f2+1,f,c
  7792  001732  0EFF               	movlw	255
  7793  001734  161E               	andwf	__div_to_l_@f2+2,f,c
  7794  001736  0E00               	movlw	0
  7795  001738  161F               	andwf	__div_to_l_@f2+3,f,c
  7796  00173A  0E00               	movlw	0
  7797  00173C  6E23               	movwf	__div_to_l_@quot,c
  7798  00173E  0E00               	movlw	0
  7799  001740  6E24               	movwf	__div_to_l_@quot+1,c
  7800  001742  0E00               	movlw	0
  7801  001744  6E25               	movwf	__div_to_l_@quot+2,c
  7802  001746  0E00               	movlw	0
  7803  001748  6E26               	movwf	__div_to_l_@quot+3,c
  7804  00174A  0E7F               	movlw	127
  7805  00174C  5E28               	subwf	__div_to_l_@exp1,f,c
  7806  00174E  5027               	movf	__div_to_l_@cntr,w,c
  7807  001750  0FA0               	addlw	160
  7808  001752  5E28               	subwf	__div_to_l_@exp1,f,c
  7809  001754  0E20               	movlw	32
  7810  001756  6E27               	movwf	__div_to_l_@cntr,c
  7811  001758                     l4971:
  7812  001758  90D8               	bcf	status,0,c
  7813  00175A  3623               	rlcf	__div_to_l_@quot,f,c
  7814  00175C  3624               	rlcf	__div_to_l_@quot+1,f,c
  7815  00175E  3625               	rlcf	__div_to_l_@quot+2,f,c
  7816  001760  3626               	rlcf	__div_to_l_@quot+3,f,c
  7817  001762  501C               	movf	__div_to_l_@f2,w,c
  7818  001764  5C19               	subwf	__div_to_l_@f1,w,c
  7819  001766  501D               	movf	__div_to_l_@f2+1,w,c
  7820  001768  581A               	subwfb	__div_to_l_@f1+1,w,c
  7821  00176A  501E               	movf	__div_to_l_@f2+2,w,c
  7822  00176C  581B               	subwfb	__div_to_l_@f1+2,w,c
  7823  00176E  501F               	movf	__div_to_l_@f2+3,w,c
  7824  001770  581C               	subwfb	__div_to_l_@f1+3,w,c
  7825  001772  A0D8               	btfss	status,0,c
  7826  001774  D009               	goto	l4979
  7827  001776  501C               	movf	__div_to_l_@f2,w,c
  7828  001778  5E19               	subwf	__div_to_l_@f1,f,c
  7829  00177A  501D               	movf	__div_to_l_@f2+1,w,c
  7830  00177C  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7831  00177E  501E               	movf	__div_to_l_@f2+2,w,c
  7832  001780  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7833  001782  501F               	movf	__div_to_l_@f2+3,w,c
  7834  001784  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7835  001786  8023               	bsf	__div_to_l_@quot,0,c
  7836  001788                     l4979:
  7837  001788  90D8               	bcf	status,0,c
  7838  00178A  3619               	rlcf	__div_to_l_@f1,f,c
  7839  00178C  361A               	rlcf	__div_to_l_@f1+1,f,c
  7840  00178E  361B               	rlcf	__div_to_l_@f1+2,f,c
  7841  001790  361C               	rlcf	__div_to_l_@f1+3,f,c
  7842  001792  2E27               	decfsz	__div_to_l_@cntr,f,c
  7843  001794  D7E1               	goto	l4971
  7844  001796  AE28               	btfss	__div_to_l_@exp1,7,c
  7845  001798  D010               	goto	l4993
  7846  00179A  5028               	movf	__div_to_l_@exp1,w,c
  7847  00179C  0A80               	xorlw	128
  7848  00179E  6E1F               	movwf	??__div_to_l_& (0+255),c
  7849  0017A0  0EE1               	movlw	225
  7850  0017A2  0A80               	xorlw	128
  7851  0017A4  5C1F               	subwf	??__div_to_l_,w,c
  7852  0017A6  A0D8               	btfss	status,0,c
  7853  0017A8  D00B               	goto	u5710
  7854  0017AA                     l4989:
  7855  0017AA  90D8               	bcf	status,0,c
  7856  0017AC  3226               	rrcf	__div_to_l_@quot+3,f,c
  7857  0017AE  3225               	rrcf	__div_to_l_@quot+2,f,c
  7858  0017B0  3224               	rrcf	__div_to_l_@quot+1,f,c
  7859  0017B2  3223               	rrcf	__div_to_l_@quot,f,c
  7860  0017B4  3E28               	incfsz	__div_to_l_@exp1,f,c
  7861  0017B6  D7F9               	goto	l4989
  7862  0017B8  D014               	goto	l937
  7863  0017BA                     l4993:
  7864  0017BA  0E1F               	movlw	31
  7865  0017BC  6428               	cpfsgt	__div_to_l_@exp1,c
  7866  0017BE  D00F               	goto	l5001
  7867  0017C0                     u5710:
  7868  0017C0  0E00               	movlw	0
  7869  0017C2  6E19               	movwf	?__div_to_l_,c
  7870  0017C4  0E00               	movlw	0
  7871  0017C6  6E1A               	movwf	?__div_to_l_+1,c
  7872  0017C8  0E00               	movlw	0
  7873  0017CA  6E1B               	movwf	?__div_to_l_+2,c
  7874  0017CC  0E00               	movlw	0
  7875  0017CE  6E1C               	movwf	?__div_to_l_+3,c
  7876  0017D0  D010               	goto	l928
  7877  0017D2                     l4999:
  7878  0017D2  90D8               	bcf	status,0,c
  7879  0017D4  3623               	rlcf	__div_to_l_@quot,f,c
  7880  0017D6  3624               	rlcf	__div_to_l_@quot+1,f,c
  7881  0017D8  3625               	rlcf	__div_to_l_@quot+2,f,c
  7882  0017DA  3626               	rlcf	__div_to_l_@quot+3,f,c
  7883  0017DC  0628               	decf	__div_to_l_@exp1,f,c
  7884  0017DE                     l5001:
  7885  0017DE  6628               	tstfsz	__div_to_l_@exp1,c
  7886  0017E0  D7F8               	goto	l4999
  7887  0017E2                     l937:
  7888  0017E2  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7889  0017E6  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7890  0017EA  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7891  0017EE  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7892  0017F2                     l928:
  7893  0017F2  0012               	return	
  7894  0017F4                     __end_of__div_to_l_:
  7895                           	opt stack 0
  7896                           tblptru	equ	0xFF8
  7897                           tblptrh	equ	0xFF7
  7898                           tblptrl	equ	0xFF6
  7899                           tablat	equ	0xFF5
  7900                           prodh	equ	0xFF4
  7901                           prodl	equ	0xFF3
  7902                           intcon	equ	0xFF2
  7903                           indf0	equ	0xFEF
  7904                           postinc0	equ	0xFEE
  7905                           fsr0h	equ	0xFEA
  7906                           fsr0l	equ	0xFE9
  7907                           wreg	equ	0xFE8
  7908                           postinc1	equ	0xFE6
  7909                           postdec1	equ	0xFE5
  7910                           fsr1l	equ	0xFE1
  7911                           indf2	equ	0xFDF
  7912                           postinc2	equ	0xFDE
  7913                           postdec2	equ	0xFDD
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function ___lltoft *****************
  7919 ;; Defined at:
  7920 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;  c               4   32[COMRAM] unsigned long 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  exp             1   40[COMRAM] unsigned char 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  3   32[COMRAM] float 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2, status,0, cstack
  7929 ;; Tracked objects:
  7930 ;;		On entry : 0/0
  7931 ;;		On exit  : 0/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7934 ;;      Params:         4       0       0       0       0       0       0       0       0
  7935 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7936 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7937 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7938 ;;Total ram usage:        9 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; Hardware stack levels required when called:    5
  7941 ;; This function calls:
  7942 ;;		___ftpack
  7943 ;; This function is called by:
  7944 ;;		_sprintf
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           	psect	text36
  7949  00243E                     __ptext36:
  7950                           	opt stack 0
  7951  00243E                     ___lltoft:
  7952                           	opt stack 22
  7953                           
  7954                           ;incstack = 0
  7955  00243E  0E8E               	movlw	142
  7956  002440  6E29               	movwf	___lltoft@exp,c
  7957  002442  D006               	goto	l5119
  7958  002444                     l5117:
  7959  002444  90D8               	bcf	status,0,c
  7960  002446  3224               	rrcf	___lltoft@c+3,f,c
  7961  002448  3223               	rrcf	___lltoft@c+2,f,c
  7962  00244A  3222               	rrcf	___lltoft@c+1,f,c
  7963  00244C  3221               	rrcf	___lltoft@c,f,c
  7964  00244E  2A29               	incf	___lltoft@exp,f,c
  7965  002450                     l5119:
  7966  002450  0E00               	movlw	0
  7967  002452  1421               	andwf	___lltoft@c,w,c
  7968  002454  6E25               	movwf	??___lltoft& (0+255),c
  7969  002456  0E00               	movlw	0
  7970  002458  1422               	andwf	___lltoft@c+1,w,c
  7971  00245A  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7972  00245C  0E00               	movlw	0
  7973  00245E  1423               	andwf	___lltoft@c+2,w,c
  7974  002460  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7975  002462  0EFF               	movlw	255
  7976  002464  1424               	andwf	___lltoft@c+3,w,c
  7977  002466  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7978  002468  5028               	movf	??___lltoft+3,w,c
  7979  00246A  1025               	iorwf	??___lltoft,w,c
  7980  00246C  1026               	iorwf	??___lltoft+1,w,c
  7981  00246E  1027               	iorwf	??___lltoft+2,w,c
  7982  002470  A4D8               	btfss	status,2,c
  7983  002472  D7E8               	goto	l5117
  7984  002474  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7985  002478  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7986  00247C  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7987  002480  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7988  002484  0E00               	movlw	0
  7989  002486  6E1D               	movwf	___ftpack@sign,c
  7990  002488  ECB2  F00D         	call	___ftpack	;wreg free
  7991  00248C  C019  F021         	movff	?___ftpack,?___lltoft
  7992  002490  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7993  002494  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7994  002498  0012               	return	
  7995  00249A                     __end_of___lltoft:
  7996                           	opt stack 0
  7997                           tblptru	equ	0xFF8
  7998                           tblptrh	equ	0xFF7
  7999                           tblptrl	equ	0xFF6
  8000                           tablat	equ	0xFF5
  8001                           prodh	equ	0xFF4
  8002                           prodl	equ	0xFF3
  8003                           intcon	equ	0xFF2
  8004                           indf0	equ	0xFEF
  8005                           postinc0	equ	0xFEE
  8006                           fsr0h	equ	0xFEA
  8007                           fsr0l	equ	0xFE9
  8008                           wreg	equ	0xFE8
  8009                           postinc1	equ	0xFE6
  8010                           postdec1	equ	0xFE5
  8011                           fsr1l	equ	0xFE1
  8012                           indf2	equ	0xFDF
  8013                           postinc2	equ	0xFDE
  8014                           postdec2	equ	0xFDD
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function ___llmod *****************
  8020 ;; Defined at:
  8021 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  dividend        4   37[COMRAM] unsigned long 
  8024 ;;  divisor         4   41[COMRAM] unsigned long 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  counter         1   45[COMRAM] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  4   37[COMRAM] unsigned long 
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8036 ;;      Params:         8       0       0       0       0       0       0       0       0
  8037 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8039 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8040 ;;Total ram usage:        9 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    4
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_sprintf
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text37
  8051  0023D8                     __ptext37:
  8052                           	opt stack 0
  8053  0023D8                     ___llmod:
  8054                           	opt stack 23
  8055                           
  8056                           ;incstack = 0
  8057  0023D8  502D               	movf	___llmod@divisor+3,w,c
  8058  0023DA  102A               	iorwf	___llmod@divisor,w,c
  8059  0023DC  102B               	iorwf	___llmod@divisor+1,w,c
  8060  0023DE  102C               	iorwf	___llmod@divisor+2,w,c
  8061  0023E0  B4D8               	btfsc	status,2,c
  8062  0023E2  D024               	goto	l1139
  8063  0023E4  0E01               	movlw	1
  8064  0023E6  6E2E               	movwf	___llmod@counter,c
  8065  0023E8  D006               	goto	l5105
  8066  0023EA                     l5103:
  8067  0023EA  90D8               	bcf	status,0,c
  8068  0023EC  362A               	rlcf	___llmod@divisor,f,c
  8069  0023EE  362B               	rlcf	___llmod@divisor+1,f,c
  8070  0023F0  362C               	rlcf	___llmod@divisor+2,f,c
  8071  0023F2  362D               	rlcf	___llmod@divisor+3,f,c
  8072  0023F4  2A2E               	incf	___llmod@counter,f,c
  8073  0023F6                     l5105:
  8074  0023F6  AE2D               	btfss	___llmod@divisor+3,7,c
  8075  0023F8  D7F8               	goto	l5103
  8076  0023FA                     l5107:
  8077  0023FA  502A               	movf	___llmod@divisor,w,c
  8078  0023FC  5C26               	subwf	___llmod@dividend,w,c
  8079  0023FE  502B               	movf	___llmod@divisor+1,w,c
  8080  002400  5827               	subwfb	___llmod@dividend+1,w,c
  8081  002402  502C               	movf	___llmod@divisor+2,w,c
  8082  002404  5828               	subwfb	___llmod@dividend+2,w,c
  8083  002406  502D               	movf	___llmod@divisor+3,w,c
  8084  002408  5829               	subwfb	___llmod@dividend+3,w,c
  8085  00240A  A0D8               	btfss	status,0,c
  8086  00240C  D008               	goto	l5111
  8087  00240E  502A               	movf	___llmod@divisor,w,c
  8088  002410  5E26               	subwf	___llmod@dividend,f,c
  8089  002412  502B               	movf	___llmod@divisor+1,w,c
  8090  002414  5A27               	subwfb	___llmod@dividend+1,f,c
  8091  002416  502C               	movf	___llmod@divisor+2,w,c
  8092  002418  5A28               	subwfb	___llmod@dividend+2,f,c
  8093  00241A  502D               	movf	___llmod@divisor+3,w,c
  8094  00241C  5A29               	subwfb	___llmod@dividend+3,f,c
  8095  00241E                     l5111:
  8096  00241E  90D8               	bcf	status,0,c
  8097  002420  322D               	rrcf	___llmod@divisor+3,f,c
  8098  002422  322C               	rrcf	___llmod@divisor+2,f,c
  8099  002424  322B               	rrcf	___llmod@divisor+1,f,c
  8100  002426  322A               	rrcf	___llmod@divisor,f,c
  8101  002428  2E2E               	decfsz	___llmod@counter,f,c
  8102  00242A  D7E7               	goto	l5107
  8103  00242C                     l1139:
  8104  00242C  C026  F026         	movff	___llmod@dividend,?___llmod
  8105  002430  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  8106  002434  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  8107  002438  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  8108  00243C  0012               	return	
  8109  00243E                     __end_of___llmod:
  8110                           	opt stack 0
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           prodh	equ	0xFF4
  8116                           prodl	equ	0xFF3
  8117                           intcon	equ	0xFF2
  8118                           indf0	equ	0xFEF
  8119                           postinc0	equ	0xFEE
  8120                           fsr0h	equ	0xFEA
  8121                           fsr0l	equ	0xFE9
  8122                           wreg	equ	0xFE8
  8123                           postinc1	equ	0xFE6
  8124                           postdec1	equ	0xFE5
  8125                           fsr1l	equ	0xFE1
  8126                           indf2	equ	0xFDF
  8127                           postinc2	equ	0xFDE
  8128                           postdec2	equ	0xFDD
  8129                           fsr2h	equ	0xFDA
  8130                           fsr2l	equ	0xFD9
  8131                           status	equ	0xFD8
  8132                           
  8133 ;; *************** function ___lldiv *****************
  8134 ;; Defined at:
  8135 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;  dividend        4   24[COMRAM] unsigned long 
  8138 ;;  divisor         4   28[COMRAM] unsigned long 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  quotient        4   32[COMRAM] unsigned long 
  8141 ;;  counter         1   36[COMRAM] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  4   24[COMRAM] unsigned long 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2, status,0
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8151 ;;      Params:         8       0       0       0       0       0       0       0       0
  8152 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8154 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8155 ;;Total ram usage:       13 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    4
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_sprintf
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text38
  8166  002026                     __ptext38:
  8167                           	opt stack 0
  8168  002026                     ___lldiv:
  8169                           	opt stack 23
  8170                           
  8171                           ;incstack = 0
  8172  002026  0E00               	movlw	0
  8173  002028  6E21               	movwf	___lldiv@quotient,c
  8174  00202A  0E00               	movlw	0
  8175  00202C  6E22               	movwf	___lldiv@quotient+1,c
  8176  00202E  0E00               	movlw	0
  8177  002030  6E23               	movwf	___lldiv@quotient+2,c
  8178  002032  0E00               	movlw	0
  8179  002034  6E24               	movwf	___lldiv@quotient+3,c
  8180  002036  5020               	movf	___lldiv@divisor+3,w,c
  8181  002038  101D               	iorwf	___lldiv@divisor,w,c
  8182  00203A  101E               	iorwf	___lldiv@divisor+1,w,c
  8183  00203C  101F               	iorwf	___lldiv@divisor+2,w,c
  8184  00203E  B4D8               	btfsc	status,2,c
  8185  002040  D02A               	goto	l1129
  8186  002042  0E01               	movlw	1
  8187  002044  6E25               	movwf	___lldiv@counter,c
  8188  002046  D006               	goto	l5085
  8189  002048                     l5083:
  8190  002048  90D8               	bcf	status,0,c
  8191  00204A  361D               	rlcf	___lldiv@divisor,f,c
  8192  00204C  361E               	rlcf	___lldiv@divisor+1,f,c
  8193  00204E  361F               	rlcf	___lldiv@divisor+2,f,c
  8194  002050  3620               	rlcf	___lldiv@divisor+3,f,c
  8195  002052  2A25               	incf	___lldiv@counter,f,c
  8196  002054                     l5085:
  8197  002054  AE20               	btfss	___lldiv@divisor+3,7,c
  8198  002056  D7F8               	goto	l5083
  8199  002058                     l5087:
  8200  002058  90D8               	bcf	status,0,c
  8201  00205A  3621               	rlcf	___lldiv@quotient,f,c
  8202  00205C  3622               	rlcf	___lldiv@quotient+1,f,c
  8203  00205E  3623               	rlcf	___lldiv@quotient+2,f,c
  8204  002060  3624               	rlcf	___lldiv@quotient+3,f,c
  8205  002062  501D               	movf	___lldiv@divisor,w,c
  8206  002064  5C19               	subwf	___lldiv@dividend,w,c
  8207  002066  501E               	movf	___lldiv@divisor+1,w,c
  8208  002068  581A               	subwfb	___lldiv@dividend+1,w,c
  8209  00206A  501F               	movf	___lldiv@divisor+2,w,c
  8210  00206C  581B               	subwfb	___lldiv@dividend+2,w,c
  8211  00206E  5020               	movf	___lldiv@divisor+3,w,c
  8212  002070  581C               	subwfb	___lldiv@dividend+3,w,c
  8213  002072  A0D8               	btfss	status,0,c
  8214  002074  D009               	goto	l5095
  8215  002076  501D               	movf	___lldiv@divisor,w,c
  8216  002078  5E19               	subwf	___lldiv@dividend,f,c
  8217  00207A  501E               	movf	___lldiv@divisor+1,w,c
  8218  00207C  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8219  00207E  501F               	movf	___lldiv@divisor+2,w,c
  8220  002080  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8221  002082  5020               	movf	___lldiv@divisor+3,w,c
  8222  002084  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8223  002086  8021               	bsf	___lldiv@quotient,0,c
  8224  002088                     l5095:
  8225  002088  90D8               	bcf	status,0,c
  8226  00208A  3220               	rrcf	___lldiv@divisor+3,f,c
  8227  00208C  321F               	rrcf	___lldiv@divisor+2,f,c
  8228  00208E  321E               	rrcf	___lldiv@divisor+1,f,c
  8229  002090  321D               	rrcf	___lldiv@divisor,f,c
  8230  002092  2E25               	decfsz	___lldiv@counter,f,c
  8231  002094  D7E1               	goto	l5087
  8232  002096                     l1129:
  8233  002096  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8234  00209A  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8235  00209E  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8236  0020A2  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8237  0020A6  0012               	return	
  8238  0020A8                     __end_of___lldiv:
  8239                           	opt stack 0
  8240                           tblptru	equ	0xFF8
  8241                           tblptrh	equ	0xFF7
  8242                           tblptrl	equ	0xFF6
  8243                           tablat	equ	0xFF5
  8244                           prodh	equ	0xFF4
  8245                           prodl	equ	0xFF3
  8246                           intcon	equ	0xFF2
  8247                           indf0	equ	0xFEF
  8248                           postinc0	equ	0xFEE
  8249                           fsr0h	equ	0xFEA
  8250                           fsr0l	equ	0xFE9
  8251                           wreg	equ	0xFE8
  8252                           postinc1	equ	0xFE6
  8253                           postdec1	equ	0xFE5
  8254                           fsr1l	equ	0xFE1
  8255                           indf2	equ	0xFDF
  8256                           postinc2	equ	0xFDE
  8257                           postdec2	equ	0xFDD
  8258                           fsr2h	equ	0xFDA
  8259                           fsr2l	equ	0xFD9
  8260                           status	equ	0xFD8
  8261                           
  8262 ;; *************** function ___fttol *****************
  8263 ;; Defined at:
  8264 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  f1              3   19[BANK0 ] float 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  lval            4   29[BANK0 ] unsigned long 
  8269 ;;  exp1            1   33[BANK0 ] unsigned char 
  8270 ;;  sign1           1   28[BANK0 ] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  4   19[BANK0 ] long 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8280 ;;      Params:         0       4       0       0       0       0       0       0       0
  8281 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8282 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8283 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8284 ;;Total ram usage:       15 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    4
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_PWM_DutyCycle1
  8291 ;;		_PWM_DutyCycle2
  8292 ;;		_sprintf
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           	psect	text39
  8297  001436                     __ptext39:
  8298                           	opt stack 0
  8299  001436                     ___fttol:
  8300                           	opt stack 23
  8301                           
  8302                           ;incstack = 0
  8303  001436  0100               	movlb	0	; () banked
  8304  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8305  00143C  0100               	movlb	0	; () banked
  8306  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8307  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8308  001442  0100               	movlb	0	; () banked
  8309  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8310  001446  0100               	movlb	0	; () banked
  8311  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8312  00144A  E301               	bnc	u5771
  8313  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8314  00144E                     u5771:
  8315  00144E  0100               	movlb	0	; () banked
  8316  001450  5177               	movf	??___fttol& (0+255),w,b
  8317  001452  0100               	movlb	0	; () banked
  8318  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8319  001456  0100               	movlb	0	; () banked
  8320  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8321  00145A  D001               	goto	l5037
  8322  00145C  D059               	goto	u5820
  8323  00145E                     l5037:
  8324                           
  8325                           ; BSR set to: 0
  8326  00145E  0E17               	movlw	23
  8327  001460  0100               	movlb	0	; () banked
  8328  001462  6F77               	movwf	??___fttol& (0+255),b
  8329  001464  0100               	movlb	0	; () banked
  8330  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8331  00146A  0100               	movlb	0	; () banked
  8332  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8333  001470  0100               	movlb	0	; () banked
  8334  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8335  001476  0100               	movlb	0	; () banked
  8336  001478  2977               	incf	??___fttol& (0+255),w,b
  8337  00147A  0100               	movlb	0	; () banked
  8338  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8339  00147E  D005               	goto	u5790
  8340  001480                     u5795:
  8341  001480  0100               	movlb	0	; () banked
  8342  001482  90D8               	bcf	status,0,c
  8343  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8344  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8345  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8346  00148A                     u5790:
  8347  00148A  0100               	movlb	0	; () banked
  8348  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8349  00148E  D7F8               	goto	u5795
  8350  001490  0100               	movlb	0	; () banked
  8351  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8352  001494  0100               	movlb	0	; () banked
  8353  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8354                           
  8355                           ; BSR set to: 0
  8356  001498  0100               	movlb	0	; () banked
  8357  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8358                           
  8359                           ; BSR set to: 0
  8360  00149C  0EFF               	movlw	255
  8361  00149E  0100               	movlb	0	; () banked
  8362  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8363  0014A2  0EFF               	movlw	255
  8364  0014A4  0100               	movlb	0	; () banked
  8365  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8366  0014A8  0E00               	movlw	0
  8367  0014AA  0100               	movlb	0	; () banked
  8368  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8369                           
  8370                           ; BSR set to: 0
  8371  0014AE  0100               	movlb	0	; () banked
  8372  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8373  0014B2  0100               	movlb	0	; () banked
  8374  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8375  0014B6  0100               	movlb	0	; () banked
  8376  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8377  0014BA  0100               	movlb	0	; () banked
  8378  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8379  0014BE  0100               	movlb	0	; () banked
  8380  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8381  0014C2  0100               	movlb	0	; () banked
  8382  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8383  0014C6  0100               	movlb	0	; () banked
  8384  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8385                           
  8386                           ; BSR set to: 0
  8387  0014CA  0E8E               	movlw	142
  8388  0014CC  0100               	movlb	0	; () banked
  8389  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8390                           
  8391                           ; BSR set to: 0
  8392  0014D0  0100               	movlb	0	; () banked
  8393  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8394  0014D4  D019               	goto	l5059
  8395                           
  8396                           ; BSR set to: 0
  8397  0014D6  0100               	movlb	0	; () banked
  8398  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8399  0014DA  0A80               	xorlw	128
  8400  0014DC  0100               	movlb	0	; () banked
  8401  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8402  0014E0  0EF1               	movlw	241
  8403  0014E2  0A80               	xorlw	128
  8404  0014E4  0100               	movlb	0	; () banked
  8405  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8406  0014E8  A0D8               	btfss	status,0,c
  8407  0014EA  D012               	goto	u5820
  8408  0014EC                     l5055:
  8409                           
  8410                           ; BSR set to: 0
  8411  0014EC  0100               	movlb	0	; () banked
  8412  0014EE  90D8               	bcf	status,0,c
  8413  0014F0  0100               	movlb	0	; () banked
  8414  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8415  0014F4  0100               	movlb	0	; () banked
  8416  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8417  0014F8  0100               	movlb	0	; () banked
  8418  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8419  0014FC  0100               	movlb	0	; () banked
  8420  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8421                           
  8422                           ; BSR set to: 0
  8423  001500  0100               	movlb	0	; () banked
  8424  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8425  001504  D7F3               	goto	l5055
  8426  001506  D020               	goto	l5069
  8427  001508                     l5059:
  8428                           
  8429                           ; BSR set to: 0
  8430  001508  0E17               	movlw	23
  8431  00150A  0100               	movlb	0	; () banked
  8432  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8433  00150E  D019               	goto	l5067
  8434  001510                     u5820:
  8435                           
  8436                           ; BSR set to: 0
  8437  001510  0E00               	movlw	0
  8438  001512  0100               	movlb	0	; () banked
  8439  001514  6F73               	movwf	?___fttol& (0+255),b
  8440  001516  0E00               	movlw	0
  8441  001518  0100               	movlb	0	; () banked
  8442  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8443  00151C  0E00               	movlw	0
  8444  00151E  0100               	movlb	0	; () banked
  8445  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8446  001522  0E00               	movlw	0
  8447  001524  0100               	movlb	0	; () banked
  8448  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8449  001528  D02A               	goto	l1090
  8450  00152A                     l5065:
  8451                           
  8452                           ; BSR set to: 0
  8453  00152A  0100               	movlb	0	; () banked
  8454  00152C  90D8               	bcf	status,0,c
  8455  00152E  0100               	movlb	0	; () banked
  8456  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8457  001532  0100               	movlb	0	; () banked
  8458  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8459  001536  0100               	movlb	0	; () banked
  8460  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8461  00153A  0100               	movlb	0	; () banked
  8462  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8463  00153E  0100               	movlb	0	; () banked
  8464  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8465  001542                     l5067:
  8466                           
  8467                           ; BSR set to: 0
  8468  001542  0100               	movlb	0	; () banked
  8469  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8470  001546  D7F1               	goto	l5065
  8471  001548                     l5069:
  8472                           
  8473                           ; BSR set to: 0
  8474  001548  0100               	movlb	0	; () banked
  8475  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8476  00154C  B4D8               	btfsc	status,2,c
  8477  00154E  D00F               	goto	l5073
  8478                           
  8479                           ; BSR set to: 0
  8480  001550  0100               	movlb	0	; () banked
  8481  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8482  001554  0100               	movlb	0	; () banked
  8483  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8484  001558  0100               	movlb	0	; () banked
  8485  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8486  00155C  0100               	movlb	0	; () banked
  8487  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8488  001560  0E00               	movlw	0
  8489  001562  0100               	movlb	0	; () banked
  8490  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8491  001566  0100               	movlb	0	; () banked
  8492  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8493  00156A  0100               	movlb	0	; () banked
  8494  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8495  00156E                     l5073:
  8496                           
  8497                           ; BSR set to: 0
  8498  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8499  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8500  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8501  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8502  00157E                     l1090:
  8503                           
  8504                           ; BSR set to: 0
  8505  00157E  0012               	return	
  8506  001580                     __end_of___fttol:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           prodh	equ	0xFF4
  8513                           prodl	equ	0xFF3
  8514                           intcon	equ	0xFF2
  8515                           indf0	equ	0xFEF
  8516                           postinc0	equ	0xFEE
  8517                           fsr0h	equ	0xFEA
  8518                           fsr0l	equ	0xFE9
  8519                           wreg	equ	0xFE8
  8520                           postinc1	equ	0xFE6
  8521                           postdec1	equ	0xFE5
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function ___ftsub *****************
  8531 ;; Defined at:
  8532 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  f1              3   34[BANK0 ] float 
  8535 ;;  f2              3   37[BANK0 ] float 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  3   34[BANK0 ] float 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8547 ;;      Params:         0       6       0       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8549 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8550 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8551 ;;Total ram usage:        6 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    6
  8554 ;; This function calls:
  8555 ;;		___ftadd
  8556 ;; This function is called by:
  8557 ;;		_sprintf
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text40
  8562  0025CC                     __ptext40:
  8563                           	opt stack 0
  8564  0025CC                     ___ftsub:
  8565                           	opt stack 21
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;incstack = 0
  8569  0025CC  0E00               	movlw	0
  8570  0025CE  0100               	movlb	0	; () banked
  8571  0025D0  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8572  0025D2  0E00               	movlw	0
  8573  0025D4  0100               	movlb	0	; () banked
  8574  0025D6  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8575  0025D8  0E80               	movlw	128
  8576  0025DA  0100               	movlb	0	; () banked
  8577  0025DC  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8578                           
  8579                           ; BSR set to: 0
  8580  0025DE  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8581  0025E2  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8582  0025E6  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8583  0025EA  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8584  0025EE  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8585  0025F2  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8586  0025F6  EC2F  F008         	call	___ftadd	;wreg free
  8587  0025FA  C076  F082         	movff	?___ftadd,?___ftsub
  8588  0025FE  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8589  002602  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8590  002606  0012               	return	
  8591  002608                     __end_of___ftsub:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           prodh	equ	0xFF4
  8598                           prodl	equ	0xFF3
  8599                           intcon	equ	0xFF2
  8600                           indf0	equ	0xFEF
  8601                           postinc0	equ	0xFEE
  8602                           fsr0h	equ	0xFEA
  8603                           fsr0l	equ	0xFE9
  8604                           wreg	equ	0xFE8
  8605                           postinc1	equ	0xFE6
  8606                           postdec1	equ	0xFE5
  8607                           fsr1l	equ	0xFE1
  8608                           indf2	equ	0xFDF
  8609                           postinc2	equ	0xFDE
  8610                           postdec2	equ	0xFDD
  8611                           fsr2h	equ	0xFDA
  8612                           fsr2l	equ	0xFD9
  8613                           status	equ	0xFD8
  8614                           
  8615 ;; *************** function ___ftadd *****************
  8616 ;; Defined at:
  8617 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  f1              3   22[BANK0 ] float 
  8620 ;;  f2              3   25[BANK0 ] float 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  exp1            1   33[BANK0 ] unsigned char 
  8623 ;;  exp2            1   32[BANK0 ] unsigned char 
  8624 ;;  sign            1   31[BANK0 ] unsigned char 
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  3   22[BANK0 ] float 
  8627 ;; Registers used:
  8628 ;;		wreg, status,2, status,0, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 0/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8634 ;;      Params:         0       6       0       0       0       0       0       0       0
  8635 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8636 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8637 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8638 ;;Total ram usage:       12 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    5
  8641 ;; This function calls:
  8642 ;;		___ftpack
  8643 ;; This function is called by:
  8644 ;;		_sprintf
  8645 ;;		___ftsub
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text41
  8650  00105E                     __ptext41:
  8651                           	opt stack 0
  8652  00105E                     ___ftadd:
  8653                           	opt stack 21
  8654                           
  8655                           ;incstack = 0
  8656  00105E  0100               	movlb	0	; () banked
  8657  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8658  001064  0100               	movlb	0	; () banked
  8659  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8660  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8661  00106A  0100               	movlb	0	; () banked
  8662  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8663  00106E  0100               	movlb	0	; () banked
  8664  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8665  001072  E301               	bnc	u4931
  8666  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8667  001076                     u4931:
  8668  001076  0100               	movlb	0	; () banked
  8669  001078  517C               	movf	??___ftadd& (0+255),w,b
  8670  00107A  0100               	movlb	0	; () banked
  8671  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8672  00107E  0100               	movlb	0	; () banked
  8673  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8674  001084  0100               	movlb	0	; () banked
  8675  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8676  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8677  00108A  0100               	movlb	0	; () banked
  8678  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8679  00108E  0100               	movlb	0	; () banked
  8680  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8681  001092  E301               	bnc	u4941
  8682  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8683  001096                     u4941:
  8684  001096  0100               	movlb	0	; () banked
  8685  001098  517C               	movf	??___ftadd& (0+255),w,b
  8686  00109A  0100               	movlb	0	; () banked
  8687  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8688                           
  8689                           ; BSR set to: 0
  8690  00109E  0100               	movlb	0	; () banked
  8691  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8692  0010A2  B4D8               	btfsc	status,2,c
  8693  0010A4  D012               	goto	l1006
  8694                           
  8695                           ; BSR set to: 0
  8696  0010A6  0100               	movlb	0	; () banked
  8697  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8698  0010AA  0100               	movlb	0	; () banked
  8699  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8700  0010AE  B0D8               	btfsc	status,0,c
  8701  0010B0  D013               	goto	l4545
  8702                           
  8703                           ; BSR set to: 0
  8704  0010B2  0100               	movlb	0	; () banked
  8705  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8706  0010B6  0800               	sublw	0
  8707  0010B8  0100               	movlb	0	; () banked
  8708  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8709  0010BC  0100               	movlb	0	; () banked
  8710  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8711  0010C0  0E19               	movlw	25
  8712  0010C2  0100               	movlb	0	; () banked
  8713  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8714  0010C6  A0D8               	btfss	status,0,c
  8715  0010C8  D007               	goto	l4545
  8716  0010CA                     l1006:
  8717                           
  8718                           ; BSR set to: 0
  8719  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8720  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8721  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8722  0010D6  D102               	goto	l1007
  8723  0010D8                     l4545:
  8724                           
  8725                           ; BSR set to: 0
  8726  0010D8  0100               	movlb	0	; () banked
  8727  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8728  0010DC  B4D8               	btfsc	status,2,c
  8729  0010DE  D012               	goto	l1010
  8730                           
  8731                           ; BSR set to: 0
  8732  0010E0  0100               	movlb	0	; () banked
  8733  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8734  0010E4  0100               	movlb	0	; () banked
  8735  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8736  0010E8  B0D8               	btfsc	status,0,c
  8737  0010EA  D013               	goto	l4551
  8738                           
  8739                           ; BSR set to: 0
  8740  0010EC  0100               	movlb	0	; () banked
  8741  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8742  0010F0  0800               	sublw	0
  8743  0010F2  0100               	movlb	0	; () banked
  8744  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8745  0010F6  0100               	movlb	0	; () banked
  8746  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8747  0010FA  0E19               	movlw	25
  8748  0010FC  0100               	movlb	0	; () banked
  8749  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8750  001100  A0D8               	btfss	status,0,c
  8751  001102  D007               	goto	l4551
  8752  001104                     l1010:
  8753                           
  8754                           ; BSR set to: 0
  8755  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8756  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8757  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8758  001110  D0E5               	goto	l1007
  8759  001112                     l4551:
  8760                           
  8761                           ; BSR set to: 0
  8762  001112  0E06               	movlw	6
  8763  001114  0100               	movlb	0	; () banked
  8764  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8765                           
  8766                           ; BSR set to: 0
  8767  001118  0100               	movlb	0	; () banked
  8768  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8769  00111C  D002               	goto	l4557
  8770                           
  8771                           ; BSR set to: 0
  8772  00111E  0100               	movlb	0	; () banked
  8773  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8774  001122                     l4557:
  8775                           
  8776                           ; BSR set to: 0
  8777  001122  0100               	movlb	0	; () banked
  8778  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8779  001126  D002               	goto	l1012
  8780                           
  8781                           ; BSR set to: 0
  8782  001128  0100               	movlb	0	; () banked
  8783  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8784  00112C                     l1012:
  8785                           
  8786                           ; BSR set to: 0
  8787  00112C  0100               	movlb	0	; () banked
  8788  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8789                           
  8790                           ; BSR set to: 0
  8791  001130  0EFF               	movlw	255
  8792  001132  0100               	movlb	0	; () banked
  8793  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8794  001136  0EFF               	movlw	255
  8795  001138  0100               	movlb	0	; () banked
  8796  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8797  00113C  0E00               	movlw	0
  8798  00113E  0100               	movlb	0	; () banked
  8799  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8800  001142  0100               	movlb	0	; () banked
  8801  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8802                           
  8803                           ; BSR set to: 0
  8804  001146  0EFF               	movlw	255
  8805  001148  0100               	movlb	0	; () banked
  8806  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8807  00114C  0EFF               	movlw	255
  8808  00114E  0100               	movlb	0	; () banked
  8809  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8810  001152  0E00               	movlw	0
  8811  001154  0100               	movlb	0	; () banked
  8812  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8813                           
  8814                           ; BSR set to: 0
  8815  001158  0100               	movlb	0	; () banked
  8816  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8817  00115C  0100               	movlb	0	; () banked
  8818  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8819  001160  B0D8               	btfsc	status,0,c
  8820  001162  D02A               	goto	l4577
  8821  001164                     l4567:
  8822                           
  8823                           ; BSR set to: 0
  8824  001164  0100               	movlb	0	; () banked
  8825  001166  90D8               	bcf	status,0,c
  8826  001168  0100               	movlb	0	; () banked
  8827  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8828  00116C  0100               	movlb	0	; () banked
  8829  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8830  001170  0100               	movlb	0	; () banked
  8831  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8832  001174  0100               	movlb	0	; () banked
  8833  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8834                           
  8835                           ; BSR set to: 0
  8836  001178  0100               	movlb	0	; () banked
  8837  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8838  00117C  0100               	movlb	0	; () banked
  8839  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8840  001180  B4D8               	btfsc	status,2,c
  8841  001182  D014               	goto	l4575
  8842                           
  8843                           ; BSR set to: 0
  8844  001184  0100               	movlb	0	; () banked
  8845  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8846  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8847  00118C  0E07               	movlw	7
  8848  00118E  0100               	movlb	0	; () banked
  8849  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8850  001192  B4D8               	btfsc	status,2,c
  8851  001194  D00B               	goto	l4575
  8852  001196  D7E6               	goto	l4567
  8853  001198                     l4573:
  8854                           
  8855                           ; BSR set to: 0
  8856  001198  0100               	movlb	0	; () banked
  8857  00119A  90D8               	bcf	status,0,c
  8858  00119C  0100               	movlb	0	; () banked
  8859  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8860  0011A0  0100               	movlb	0	; () banked
  8861  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8862  0011A4  0100               	movlb	0	; () banked
  8863  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8864  0011A8  0100               	movlb	0	; () banked
  8865  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8866  0011AC                     l4575:
  8867                           
  8868                           ; BSR set to: 0
  8869  0011AC  0100               	movlb	0	; () banked
  8870  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8871  0011B0  0100               	movlb	0	; () banked
  8872  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8873  0011B4  D7F1               	goto	l4573
  8874  0011B6  D02F               	goto	l1021
  8875  0011B8                     l4577:
  8876                           
  8877                           ; BSR set to: 0
  8878  0011B8  0100               	movlb	0	; () banked
  8879  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8880  0011BC  0100               	movlb	0	; () banked
  8881  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8882  0011C0  B0D8               	btfsc	status,0,c
  8883  0011C2  D029               	goto	l1021
  8884  0011C4                     l4579:
  8885                           
  8886                           ; BSR set to: 0
  8887  0011C4  0100               	movlb	0	; () banked
  8888  0011C6  90D8               	bcf	status,0,c
  8889  0011C8  0100               	movlb	0	; () banked
  8890  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8891  0011CC  0100               	movlb	0	; () banked
  8892  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8893  0011D0  0100               	movlb	0	; () banked
  8894  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8895  0011D4  0100               	movlb	0	; () banked
  8896  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8897                           
  8898                           ; BSR set to: 0
  8899  0011D8  0100               	movlb	0	; () banked
  8900  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8901  0011DC  0100               	movlb	0	; () banked
  8902  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8903  0011E0  B4D8               	btfsc	status,2,c
  8904  0011E2  D014               	goto	l4587
  8905                           
  8906                           ; BSR set to: 0
  8907  0011E4  0100               	movlb	0	; () banked
  8908  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8909  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8910  0011EC  0E07               	movlw	7
  8911  0011EE  0100               	movlb	0	; () banked
  8912  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8913  0011F2  B4D8               	btfsc	status,2,c
  8914  0011F4  D00B               	goto	l4587
  8915  0011F6  D7E6               	goto	l4579
  8916  0011F8                     l4585:
  8917                           
  8918                           ; BSR set to: 0
  8919  0011F8  0100               	movlb	0	; () banked
  8920  0011FA  90D8               	bcf	status,0,c
  8921  0011FC  0100               	movlb	0	; () banked
  8922  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8923  001200  0100               	movlb	0	; () banked
  8924  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8925  001204  0100               	movlb	0	; () banked
  8926  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8927  001208  0100               	movlb	0	; () banked
  8928  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8929  00120C                     l4587:
  8930                           
  8931                           ; BSR set to: 0
  8932  00120C  0100               	movlb	0	; () banked
  8933  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8934  001210  0100               	movlb	0	; () banked
  8935  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8936  001214  D7F1               	goto	l4585
  8937  001216                     l1021:
  8938                           
  8939                           ; BSR set to: 0
  8940  001216  0100               	movlb	0	; () banked
  8941  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8942  00121A  D012               	goto	l1030
  8943                           
  8944                           ; BSR set to: 0
  8945  00121C  0EFF               	movlw	255
  8946  00121E  0100               	movlb	0	; () banked
  8947  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8948  001222  0EFF               	movlw	255
  8949  001224  0100               	movlb	0	; () banked
  8950  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8951  001228  0EFF               	movlw	255
  8952  00122A  0100               	movlb	0	; () banked
  8953  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8954  00122E  0E01               	movlw	1
  8955  001230  0100               	movlb	0	; () banked
  8956  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8957  001234  0E00               	movlw	0
  8958  001236  0100               	movlb	0	; () banked
  8959  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8960  00123A  0E00               	movlw	0
  8961  00123C  0100               	movlb	0	; () banked
  8962  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8963  001240                     l1030:
  8964                           
  8965                           ; BSR set to: 0
  8966  001240  0100               	movlb	0	; () banked
  8967  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8968  001244  D012               	goto	l4593
  8969                           
  8970                           ; BSR set to: 0
  8971  001246  0EFF               	movlw	255
  8972  001248  0100               	movlb	0	; () banked
  8973  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8974  00124C  0EFF               	movlw	255
  8975  00124E  0100               	movlb	0	; () banked
  8976  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8977  001252  0EFF               	movlw	255
  8978  001254  0100               	movlb	0	; () banked
  8979  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8980  001258  0E01               	movlw	1
  8981  00125A  0100               	movlb	0	; () banked
  8982  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8983  00125E  0E00               	movlw	0
  8984  001260  0100               	movlb	0	; () banked
  8985  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8986  001264  0E00               	movlw	0
  8987  001266  0100               	movlb	0	; () banked
  8988  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8989  00126A                     l4593:
  8990                           
  8991                           ; BSR set to: 0
  8992  00126A  0E00               	movlw	0
  8993  00126C  0100               	movlb	0	; () banked
  8994  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8995                           
  8996                           ; BSR set to: 0
  8997  001270  0100               	movlb	0	; () banked
  8998  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8999  001274  0100               	movlb	0	; () banked
  9000  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  9001  001278  0100               	movlb	0	; () banked
  9002  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  9003  00127C  0100               	movlb	0	; () banked
  9004  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9005  001280  0100               	movlb	0	; () banked
  9006  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  9007  001284  0100               	movlb	0	; () banked
  9008  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9009                           
  9010                           ; BSR set to: 0
  9011  001288  0100               	movlb	0	; () banked
  9012  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9013  00128C  D015               	goto	l4603
  9014                           
  9015                           ; BSR set to: 0
  9016  00128E  0EFF               	movlw	255
  9017  001290  0100               	movlb	0	; () banked
  9018  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  9019  001294  0EFF               	movlw	255
  9020  001296  0100               	movlb	0	; () banked
  9021  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9022  00129A  0EFF               	movlw	255
  9023  00129C  0100               	movlb	0	; () banked
  9024  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9025  0012A0  0E01               	movlw	1
  9026  0012A2  0100               	movlb	0	; () banked
  9027  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  9028  0012A6  0E00               	movlw	0
  9029  0012A8  0100               	movlb	0	; () banked
  9030  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9031  0012AC  0E00               	movlw	0
  9032  0012AE  0100               	movlb	0	; () banked
  9033  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9034                           
  9035                           ; BSR set to: 0
  9036  0012B2  0E01               	movlw	1
  9037  0012B4  0100               	movlb	0	; () banked
  9038  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  9039  0012B8                     l4603:
  9040                           
  9041                           ; BSR set to: 0
  9042  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  9043  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  9044  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  9045  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  9046  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  9047  0012CC  ECB2  F00D         	call	___ftpack	;wreg free
  9048  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  9049  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  9050  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  9051  0012DC                     l1007:
  9052  0012DC  0012               	return	
  9053  0012DE                     __end_of___ftadd:
  9054                           	opt stack 0
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodh	equ	0xFF4
  9060                           prodl	equ	0xFF3
  9061                           intcon	equ	0xFF2
  9062                           indf0	equ	0xFEF
  9063                           postinc0	equ	0xFEE
  9064                           fsr0h	equ	0xFEA
  9065                           fsr0l	equ	0xFE9
  9066                           wreg	equ	0xFE8
  9067                           postinc1	equ	0xFE6
  9068                           postdec1	equ	0xFE5
  9069                           fsr1l	equ	0xFE1
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           postdec2	equ	0xFDD
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function ___ftpack *****************
  9078 ;; Defined at:
  9079 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  arg             3   24[COMRAM] unsigned um
  9082 ;;  exp             1   27[COMRAM] unsigned char 
  9083 ;;  sign            1   28[COMRAM] unsigned char 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;		None
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  3   24[COMRAM] float 
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9095 ;;      Params:         5       0       0       0       0       0       0       0       0
  9096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9097 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9098 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9099 ;;Total ram usage:        8 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    4
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		___ftadd
  9106 ;;		___ftmul
  9107 ;;		___lbtoft
  9108 ;;		___lltoft
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text42
  9113  001B64                     __ptext42:
  9114                           	opt stack 0
  9115  001B64                     ___ftpack:
  9116                           	opt stack 21
  9117                           
  9118                           ;incstack = 0
  9119  001B64  501C               	movf	___ftpack@exp,w,c
  9120  001B66  B4D8               	btfsc	status,2,c
  9121  001B68  D005               	goto	l4483
  9122  001B6A  5019               	movf	___ftpack@arg,w,c
  9123  001B6C  101A               	iorwf	___ftpack@arg+1,w,c
  9124  001B6E  101B               	iorwf	___ftpack@arg+2,w,c
  9125  001B70  A4D8               	btfss	status,2,c
  9126  001B72  D00C               	goto	l4489
  9127  001B74                     l4483:
  9128  001B74  0E00               	movlw	0
  9129  001B76  6E19               	movwf	?___ftpack,c
  9130  001B78  0E00               	movlw	0
  9131  001B7A  6E1A               	movwf	?___ftpack+1,c
  9132  001B7C  0E00               	movlw	0
  9133  001B7E  6E1B               	movwf	?___ftpack+2,c
  9134  001B80  D044               	goto	l969
  9135  001B82                     l4487:
  9136  001B82  2A1C               	incf	___ftpack@exp,f,c
  9137  001B84  90D8               	bcf	status,0,c
  9138  001B86  321B               	rrcf	___ftpack@arg+2,f,c
  9139  001B88  321A               	rrcf	___ftpack@arg+1,f,c
  9140  001B8A  3219               	rrcf	___ftpack@arg,f,c
  9141  001B8C                     l4489:
  9142  001B8C  0E00               	movlw	0
  9143  001B8E  1419               	andwf	___ftpack@arg,w,c
  9144  001B90  6E1E               	movwf	??___ftpack& (0+255),c
  9145  001B92  0E00               	movlw	0
  9146  001B94  141A               	andwf	___ftpack@arg+1,w,c
  9147  001B96  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9148  001B98  0EFE               	movlw	254
  9149  001B9A  141B               	andwf	___ftpack@arg+2,w,c
  9150  001B9C  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9151  001B9E  501E               	movf	??___ftpack,w,c
  9152  001BA0  101F               	iorwf	??___ftpack+1,w,c
  9153  001BA2  1020               	iorwf	??___ftpack+2,w,c
  9154  001BA4  B4D8               	btfsc	status,2,c
  9155  001BA6  D00C               	goto	l4495
  9156  001BA8  D7EC               	goto	l4487
  9157  001BAA                     l4491:
  9158  001BAA  2A1C               	incf	___ftpack@exp,f,c
  9159  001BAC  0E01               	movlw	1
  9160  001BAE  2619               	addwf	___ftpack@arg,f,c
  9161  001BB0  0E00               	movlw	0
  9162  001BB2  221A               	addwfc	___ftpack@arg+1,f,c
  9163  001BB4  0E00               	movlw	0
  9164  001BB6  221B               	addwfc	___ftpack@arg+2,f,c
  9165  001BB8  90D8               	bcf	status,0,c
  9166  001BBA  321B               	rrcf	___ftpack@arg+2,f,c
  9167  001BBC  321A               	rrcf	___ftpack@arg+1,f,c
  9168  001BBE  3219               	rrcf	___ftpack@arg,f,c
  9169  001BC0                     l4495:
  9170  001BC0  0E00               	movlw	0
  9171  001BC2  1419               	andwf	___ftpack@arg,w,c
  9172  001BC4  6E1E               	movwf	??___ftpack& (0+255),c
  9173  001BC6  0E00               	movlw	0
  9174  001BC8  141A               	andwf	___ftpack@arg+1,w,c
  9175  001BCA  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9176  001BCC  0EFF               	movlw	255
  9177  001BCE  141B               	andwf	___ftpack@arg+2,w,c
  9178  001BD0  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9179  001BD2  501E               	movf	??___ftpack,w,c
  9180  001BD4  101F               	iorwf	??___ftpack+1,w,c
  9181  001BD6  1020               	iorwf	??___ftpack+2,w,c
  9182  001BD8  B4D8               	btfsc	status,2,c
  9183  001BDA  D006               	goto	l4499
  9184  001BDC  D7E6               	goto	l4491
  9185  001BDE                     l4497:
  9186  001BDE  061C               	decf	___ftpack@exp,f,c
  9187  001BE0  90D8               	bcf	status,0,c
  9188  001BE2  3619               	rlcf	___ftpack@arg,f,c
  9189  001BE4  361A               	rlcf	___ftpack@arg+1,f,c
  9190  001BE6  361B               	rlcf	___ftpack@arg+2,f,c
  9191  001BE8                     l4499:
  9192  001BE8  AE1A               	btfss	___ftpack@arg+1,7,c
  9193  001BEA  D7F9               	goto	l4497
  9194  001BEC  A01C               	btfss	___ftpack@exp,0,c
  9195  001BEE  9E1A               	bcf	___ftpack@arg+1,7,c
  9196  001BF0  90D8               	bcf	status,0,c
  9197  001BF2  321C               	rrcf	___ftpack@exp,f,c
  9198  001BF4  501C               	movf	___ftpack@exp,w,c
  9199  001BF6  121B               	iorwf	___ftpack@arg+2,f,c
  9200  001BF8  501D               	movf	___ftpack@sign,w,c
  9201  001BFA  A4D8               	btfss	status,2,c
  9202  001BFC  8E1B               	bsf	___ftpack@arg+2,7,c
  9203  001BFE  C019  F019         	movff	___ftpack@arg,?___ftpack
  9204  001C02  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  9205  001C06  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  9206  001C0A                     l969:
  9207  001C0A  0012               	return	
  9208  001C0C                     __end_of___ftpack:
  9209                           	opt stack 0
  9210                           tblptru	equ	0xFF8
  9211                           tblptrh	equ	0xFF7
  9212                           tblptrl	equ	0xFF6
  9213                           tablat	equ	0xFF5
  9214                           prodh	equ	0xFF4
  9215                           prodl	equ	0xFF3
  9216                           intcon	equ	0xFF2
  9217                           indf0	equ	0xFEF
  9218                           postinc0	equ	0xFEE
  9219                           fsr0h	equ	0xFEA
  9220                           fsr0l	equ	0xFE9
  9221                           wreg	equ	0xFE8
  9222                           postinc1	equ	0xFE6
  9223                           postdec1	equ	0xFE5
  9224                           fsr1l	equ	0xFE1
  9225                           indf2	equ	0xFDF
  9226                           postinc2	equ	0xFDE
  9227                           postdec2	equ	0xFDD
  9228                           fsr2h	equ	0xFDA
  9229                           fsr2l	equ	0xFD9
  9230                           status	equ	0xFD8
  9231                           
  9232 ;; *************** function ___ftneg *****************
  9233 ;; Defined at:
  9234 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;  f1              3   24[COMRAM] float 
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;		None
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  3   24[COMRAM] float 
  9241 ;; Registers used:
  9242 ;;		wreg, status,2, status,0
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9248 ;;      Params:         3       0       0       0       0       0       0       0       0
  9249 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9251 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9252 ;;Total ram usage:        3 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; Hardware stack levels required when called:    4
  9255 ;; This function calls:
  9256 ;;		Nothing
  9257 ;; This function is called by:
  9258 ;;		_sprintf
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text43
  9263  002848                     __ptext43:
  9264                           	opt stack 0
  9265  002848                     ___ftneg:
  9266                           	opt stack 23
  9267                           
  9268                           ;incstack = 0
  9269  002848  0E7F               	movlw	127
  9270  00284A  141B               	andwf	___ftneg@f1+2,w,c
  9271  00284C  101A               	iorwf	___ftneg@f1+1,w,c
  9272  00284E  1019               	iorwf	___ftneg@f1,w,c
  9273  002850  B4D8               	btfsc	status,2,c
  9274  002852  D006               	goto	l1080
  9275  002854  0E00               	movlw	0
  9276  002856  1A19               	xorwf	___ftneg@f1,f,c
  9277  002858  0E00               	movlw	0
  9278  00285A  1A1A               	xorwf	___ftneg@f1+1,f,c
  9279  00285C  0E80               	movlw	128
  9280  00285E  1A1B               	xorwf	___ftneg@f1+2,f,c
  9281  002860                     l1080:
  9282  002860  C019  F019         	movff	___ftneg@f1,?___ftneg
  9283  002864  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9284  002868  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9285  00286C  0012               	return	
  9286  00286E                     __end_of___ftneg:
  9287                           	opt stack 0
  9288                           tblptru	equ	0xFF8
  9289                           tblptrh	equ	0xFF7
  9290                           tblptrl	equ	0xFF6
  9291                           tablat	equ	0xFF5
  9292                           prodh	equ	0xFF4
  9293                           prodl	equ	0xFF3
  9294                           intcon	equ	0xFF2
  9295                           indf0	equ	0xFEF
  9296                           postinc0	equ	0xFEE
  9297                           fsr0h	equ	0xFEA
  9298                           fsr0l	equ	0xFE9
  9299                           wreg	equ	0xFE8
  9300                           postinc1	equ	0xFE6
  9301                           postdec1	equ	0xFE5
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function ___ftge *****************
  9311 ;; Defined at:
  9312 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  ff1             3   24[COMRAM] float 
  9315 ;;  ff2             3   27[COMRAM] float 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;		None               void
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9327 ;;      Params:         6       0       0       0       0       0       0       0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9329 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9330 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9331 ;;Total ram usage:        9 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    4
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_sprintf
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text44
  9342  001F10                     __ptext44:
  9343                           	opt stack 0
  9344  001F10                     ___ftge:
  9345                           	opt stack 23
  9346                           
  9347                           ;incstack = 0
  9348  001F10  AE1B               	btfss	___ftge@ff1+2,7,c
  9349  001F12  D016               	goto	l5013
  9350  001F14  C019  F01F         	movff	___ftge@ff1,??___ftge
  9351  001F18  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9352  001F1C  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9353  001F20  1E1F               	comf	??___ftge,f,c
  9354  001F22  1E20               	comf	??___ftge+1,f,c
  9355  001F24  1E21               	comf	??___ftge+2,f,c
  9356  001F26  2A1F               	incf	??___ftge,f,c
  9357  001F28  0E00               	movlw	0
  9358  001F2A  2220               	addwfc	??___ftge+1,f,c
  9359  001F2C  2221               	addwfc	??___ftge+2,f,c
  9360  001F2E  0E00               	movlw	0
  9361  001F30  241F               	addwf	??___ftge,w,c
  9362  001F32  6E19               	movwf	___ftge@ff1,c
  9363  001F34  0E00               	movlw	0
  9364  001F36  2020               	addwfc	??___ftge+1,w,c
  9365  001F38  6E1A               	movwf	___ftge@ff1+1,c
  9366  001F3A  0E80               	movlw	128
  9367  001F3C  2021               	addwfc	??___ftge+2,w,c
  9368  001F3E  6E1B               	movwf	___ftge@ff1+2,c
  9369  001F40                     l5013:
  9370  001F40  AE1E               	btfss	___ftge@ff2+2,7,c
  9371  001F42  D016               	goto	l5017
  9372  001F44  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9373  001F48  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9374  001F4C  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9375  001F50  1E1F               	comf	??___ftge,f,c
  9376  001F52  1E20               	comf	??___ftge+1,f,c
  9377  001F54  1E21               	comf	??___ftge+2,f,c
  9378  001F56  2A1F               	incf	??___ftge,f,c
  9379  001F58  0E00               	movlw	0
  9380  001F5A  2220               	addwfc	??___ftge+1,f,c
  9381  001F5C  2221               	addwfc	??___ftge+2,f,c
  9382  001F5E  0E00               	movlw	0
  9383  001F60  241F               	addwf	??___ftge,w,c
  9384  001F62  6E1C               	movwf	___ftge@ff2,c
  9385  001F64  0E00               	movlw	0
  9386  001F66  2020               	addwfc	??___ftge+1,w,c
  9387  001F68  6E1D               	movwf	___ftge@ff2+1,c
  9388  001F6A  0E80               	movlw	128
  9389  001F6C  2021               	addwfc	??___ftge+2,w,c
  9390  001F6E  6E1E               	movwf	___ftge@ff2+2,c
  9391  001F70                     l5017:
  9392  001F70  0E00               	movlw	0
  9393  001F72  1A19               	xorwf	___ftge@ff1,f,c
  9394  001F74  0E00               	movlw	0
  9395  001F76  1A1A               	xorwf	___ftge@ff1+1,f,c
  9396  001F78  0E80               	movlw	128
  9397  001F7A  1A1B               	xorwf	___ftge@ff1+2,f,c
  9398  001F7C  0E00               	movlw	0
  9399  001F7E  1A1C               	xorwf	___ftge@ff2,f,c
  9400  001F80  0E00               	movlw	0
  9401  001F82  1A1D               	xorwf	___ftge@ff2+1,f,c
  9402  001F84  0E80               	movlw	128
  9403  001F86  1A1E               	xorwf	___ftge@ff2+2,f,c
  9404  001F88  501C               	movf	___ftge@ff2,w,c
  9405  001F8A  5C19               	subwf	___ftge@ff1,w,c
  9406  001F8C  501D               	movf	___ftge@ff2+1,w,c
  9407  001F8E  581A               	subwfb	___ftge@ff1+1,w,c
  9408  001F90  501E               	movf	___ftge@ff2+2,w,c
  9409  001F92  581B               	subwfb	___ftge@ff1+2,w,c
  9410  001F94  B0D8               	btfsc	status,0,c
  9411  001F96  D002               	goto	l5023
  9412  001F98  90D8               	bcf	status,0,c
  9413  001F9A  D001               	goto	l1064
  9414  001F9C                     l5023:
  9415  001F9C  80D8               	bsf	status,0,c
  9416  001F9E                     l1064:
  9417  001F9E  0012               	return	
  9418  001FA0                     __end_of___ftge:
  9419                           	opt stack 0
  9420                           tblptru	equ	0xFF8
  9421                           tblptrh	equ	0xFF7
  9422                           tblptrl	equ	0xFF6
  9423                           tablat	equ	0xFF5
  9424                           prodh	equ	0xFF4
  9425                           prodl	equ	0xFF3
  9426                           intcon	equ	0xFF2
  9427                           indf0	equ	0xFEF
  9428                           postinc0	equ	0xFEE
  9429                           fsr0h	equ	0xFEA
  9430                           fsr0l	equ	0xFE9
  9431                           wreg	equ	0xFE8
  9432                           postinc1	equ	0xFE6
  9433                           postdec1	equ	0xFE5
  9434                           fsr1l	equ	0xFE1
  9435                           indf2	equ	0xFDF
  9436                           postinc2	equ	0xFDE
  9437                           postdec2	equ	0xFDD
  9438                           fsr2h	equ	0xFDA
  9439                           fsr2l	equ	0xFD9
  9440                           status	equ	0xFD8
  9441                           
  9442 ;; *************** function _Lcd_Write_String *****************
  9443 ;; Defined at:
  9444 ;;		line 90 in file "lcd.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;  a               2   28[COMRAM] PTR unsigned char 
  9447 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9448 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
  9449 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;  i               2   32[COMRAM] int 
  9452 ;; Return value:  Size  Location     Type
  9453 ;;		None               void
  9454 ;; Registers used:
  9455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9461 ;;      Params:         2       0       0       0       0       0       0       0       0
  9462 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9463 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9464 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9465 ;;Total ram usage:        6 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    6
  9468 ;; This function calls:
  9469 ;;		_Lcd_Write_Char
  9470 ;; This function is called by:
  9471 ;;		_Inicializa_Driveby
  9472 ;;		_Comando_Tablet
  9473 ;;		_Lcd_Write_Integer
  9474 ;;		_main
  9475 ;;		_Lcd_Write_Float
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           	psect	text45
  9480  0021A0                     __ptext45:
  9481                           	opt stack 0
  9482  0021A0                     _Lcd_Write_String:
  9483                           	opt stack 24
  9484                           
  9485                           ;lcd.c: 91: int i;
  9486                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9487                           
  9488                           ;incstack = 0
  9489  0021A0  0E00               	movlw	0
  9490  0021A2  6E22               	movwf	Lcd_Write_String@i+1,c
  9491  0021A4  0E00               	movlw	0
  9492  0021A6  6E21               	movwf	Lcd_Write_String@i,c
  9493  0021A8  D01C               	goto	l5355
  9494  0021AA                     l5351:
  9495                           
  9496                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9497  0021AA  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9498  0021AE  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9499  0021B2  5021               	movf	Lcd_Write_String@i,w,c
  9500  0021B4  261F               	addwf	??_Lcd_Write_String,f,c
  9501  0021B6  5022               	movf	Lcd_Write_String@i+1,w,c
  9502  0021B8  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9503  0021BA  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9504  0021BE  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9505  0021C2  6AF8               	clrf	tblptru,c
  9506  0021C4  0E07               	movlw	(high __ramtop+-1)
  9507  0021C6  64F7               	cpfsgt	tblptrh,c
  9508  0021C8  D003               	bra	u6247
  9509  0021CA  0008               	tblrd		*
  9510  0021CC  50F5               	movf	tablat,w,c
  9511  0021CE  D005               	bra	u6240
  9512  0021D0                     u6247:
  9513  0021D0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9514  0021D4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9515  0021D8  50EF               	movf	indf0,w,c
  9516  0021DA                     u6240:
  9517  0021DA  EC94  F013         	call	_Lcd_Write_Char
  9518  0021DE  4A21               	infsnz	Lcd_Write_String@i,f,c
  9519  0021E0  2A22               	incf	Lcd_Write_String@i+1,f,c
  9520  0021E2                     l5355:
  9521  0021E2  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9522  0021E6  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9523  0021EA  5021               	movf	Lcd_Write_String@i,w,c
  9524  0021EC  261F               	addwf	??_Lcd_Write_String,f,c
  9525  0021EE  5022               	movf	Lcd_Write_String@i+1,w,c
  9526  0021F0  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9527  0021F2  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9528  0021F6  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9529  0021FA  6AF8               	clrf	tblptru,c
  9530  0021FC  0E07               	movlw	(high __ramtop+-1)
  9531  0021FE  64F7               	cpfsgt	tblptrh,c
  9532  002200  D003               	bra	u6257
  9533  002202  0008               	tblrd		*
  9534  002204  50F5               	movf	tablat,w,c
  9535  002206  D005               	bra	u6250
  9536  002208                     u6257:
  9537  002208  CFF6 FFE9          	movff	tblptrl,fsr0l
  9538  00220C  CFF7 FFEA          	movff	tblptrh,fsr0h
  9539  002210  50EF               	movf	indf0,w,c
  9540  002212                     u6250:
  9541  002212  0900               	iorlw	0
  9542  002214  B4D8               	btfsc	status,2,c
  9543  002216  0012               	return	
  9544  002218  D7C8               	goto	l5351
  9545  00221A                     __end_of_Lcd_Write_String:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           indf0	equ	0xFEF
  9555                           postinc0	equ	0xFEE
  9556                           fsr0h	equ	0xFEA
  9557                           fsr0l	equ	0xFE9
  9558                           wreg	equ	0xFE8
  9559                           postinc1	equ	0xFE6
  9560                           postdec1	equ	0xFE5
  9561                           fsr1l	equ	0xFE1
  9562                           indf2	equ	0xFDF
  9563                           postinc2	equ	0xFDE
  9564                           postdec2	equ	0xFDD
  9565                           fsr2h	equ	0xFDA
  9566                           fsr2l	equ	0xFD9
  9567                           status	equ	0xFD8
  9568                           
  9569 ;; *************** function _Lcd_Write_Char *****************
  9570 ;; Defined at:
  9571 ;;		line 75 in file "lcd.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  a               1    wreg     unsigned char 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  a               1   27[COMRAM] unsigned char 
  9576 ;;  y               1   26[COMRAM] unsigned char 
  9577 ;;  temp            1   25[COMRAM] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0
  9588 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9590 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9591 ;;Total ram usage:        3 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    5
  9594 ;; This function calls:
  9595 ;;		_Lcd_Port
  9596 ;; This function is called by:
  9597 ;;		_Lcd_Write_String
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text46
  9602  002728                     __ptext46:
  9603                           	opt stack 0
  9604  002728                     _Lcd_Write_Char:
  9605                           	opt stack 24
  9606                           
  9607                           ;incstack = 0
  9608                           ;Lcd_Write_Char@a stored from wreg
  9609  002728  6E1C               	movwf	Lcd_Write_Char@a,c
  9610                           
  9611                           ;lcd.c: 76: char temp, y;
  9612                           ;lcd.c: 77: temp = a & 0x0F;
  9613  00272A  501C               	movf	Lcd_Write_Char@a,w,c
  9614  00272C  0B0F               	andlw	15
  9615  00272E  6E1A               	movwf	Lcd_Write_Char@temp,c
  9616                           
  9617                           ;lcd.c: 78: y = a & 0xF0;
  9618  002730  501C               	movf	Lcd_Write_Char@a,w,c
  9619  002732  0BF0               	andlw	240
  9620  002734  6E1B               	movwf	Lcd_Write_Char@y,c
  9621                           
  9622                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9623  002736  8084               	bsf	3972,0,c	;volatile
  9624                           
  9625                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9626  002738  381B               	swapf	Lcd_Write_Char@y,w,c
  9627  00273A  0B0F               	andlw	15
  9628  00273C  ECE5  F013         	call	_Lcd_Port
  9629                           
  9630                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9631  002740  8484               	bsf	3972,2,c	;volatile
  9632                           
  9633                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9634  002742  0E0D               	movlw	13
  9635  002744                     u7007:
  9636  002744  2EE8               	decfsz	wreg,f,c
  9637  002746  D7FE               	goto	u7007
  9638  002748  F000               	nop	
  9639                           
  9640                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9641  00274A  9484               	bcf	3972,2,c	;volatile
  9642                           
  9643                           ;lcd.c: 84: Lcd_Port(temp);
  9644  00274C  501A               	movf	Lcd_Write_Char@temp,w,c
  9645  00274E  ECE5  F013         	call	_Lcd_Port
  9646                           
  9647                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9648  002752  8484               	bsf	3972,2,c	;volatile
  9649                           
  9650                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9651  002754  0E0D               	movlw	13
  9652  002756                     u7017:
  9653  002756  2EE8               	decfsz	wreg,f,c
  9654  002758  D7FE               	goto	u7017
  9655  00275A  F000               	nop	
  9656                           
  9657                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9658  00275C  9484               	bcf	3972,2,c	;volatile
  9659  00275E  0012               	return	
  9660  002760                     __end_of_Lcd_Write_Char:
  9661                           	opt stack 0
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           indf0	equ	0xFEF
  9670                           postinc0	equ	0xFEE
  9671                           fsr0h	equ	0xFEA
  9672                           fsr0l	equ	0xFE9
  9673                           wreg	equ	0xFE8
  9674                           postinc1	equ	0xFE6
  9675                           postdec1	equ	0xFE5
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function _Lcd_Set_Cursor *****************
  9685 ;; Defined at:
  9686 ;;		line 40 in file "lcd.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  a               1    wreg     unsigned char 
  9689 ;;  b               1   27[COMRAM] unsigned char 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  a               1   28[COMRAM] unsigned char 
  9692 ;;  temp            1   31[COMRAM] unsigned char 
  9693 ;;  y               1   30[COMRAM] unsigned char 
  9694 ;;  z               1   29[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9704 ;;      Params:         1       0       0       0       0       0       0       0       0
  9705 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9707 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9708 ;;Total ram usage:        5 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    6
  9711 ;; This function calls:
  9712 ;;		_Lcd_Cmd
  9713 ;; This function is called by:
  9714 ;;		_Inicializa_Driveby
  9715 ;;		_Comando_Tablet
  9716 ;;		_main
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           	psect	text47
  9721  00249A                     __ptext47:
  9722                           	opt stack 0
  9723  00249A                     _Lcd_Set_Cursor:
  9724                           	opt stack 24
  9725                           
  9726                           ;incstack = 0
  9727                           ;Lcd_Set_Cursor@a stored from wreg
  9728  00249A  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9729                           
  9730                           ;lcd.c: 41: char temp, z, y;
  9731                           ;lcd.c: 42: if (a == 1) {
  9732  00249C  041D               	decf	Lcd_Set_Cursor@a,w,c
  9733  00249E  A4D8               	btfss	status,2,c
  9734  0024A0  D010               	goto	l5485
  9735                           
  9736                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9737  0024A2  501C               	movf	Lcd_Set_Cursor@b,w,c
  9738  0024A4  0F7F               	addlw	127
  9739  0024A6  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9740                           
  9741                           ;lcd.c: 44: z = temp >> 4;
  9742  0024A8  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9743  0024AA  0B0F               	andlw	15
  9744  0024AC  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9745                           
  9746                           ;lcd.c: 45: y = temp & 0x0F;
  9747  0024AE  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9748  0024B0  0B0F               	andlw	15
  9749  0024B2  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9750                           
  9751                           ;lcd.c: 46: Lcd_Cmd(z);
  9752  0024B4  501E               	movf	Lcd_Set_Cursor@z,w,c
  9753  0024B6  EC49  F014         	call	_Lcd_Cmd
  9754                           
  9755                           ;lcd.c: 47: Lcd_Cmd(y);
  9756  0024BA  501F               	movf	Lcd_Set_Cursor@y,w,c
  9757  0024BC  EC49  F014         	call	_Lcd_Cmd
  9758                           
  9759                           ;lcd.c: 48: } else if (a == 2) {
  9760  0024C0  D013               	goto	l274
  9761  0024C2                     l5485:
  9762  0024C2  501D               	movf	Lcd_Set_Cursor@a,w,c
  9763  0024C4  0A02               	xorlw	2
  9764  0024C6  A4D8               	btfss	status,2,c
  9765  0024C8  D00F               	goto	l274
  9766                           
  9767                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9768  0024CA  501C               	movf	Lcd_Set_Cursor@b,w,c
  9769  0024CC  0FBF               	addlw	191
  9770  0024CE  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9771                           
  9772                           ;lcd.c: 50: z = temp >> 4;
  9773  0024D0  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9774  0024D2  0B0F               	andlw	15
  9775  0024D4  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9776                           
  9777                           ;lcd.c: 51: y = temp & 0x0F;
  9778  0024D6  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9779  0024D8  0B0F               	andlw	15
  9780  0024DA  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9781                           
  9782                           ;lcd.c: 52: Lcd_Cmd(z);
  9783  0024DC  501E               	movf	Lcd_Set_Cursor@z,w,c
  9784  0024DE  EC49  F014         	call	_Lcd_Cmd
  9785                           
  9786                           ;lcd.c: 53: Lcd_Cmd(y);
  9787  0024E2  501F               	movf	Lcd_Set_Cursor@y,w,c
  9788  0024E4  EC49  F014         	call	_Lcd_Cmd
  9789  0024E8                     l274:
  9790  0024E8  0012               	return	
  9791  0024EA                     __end_of_Lcd_Set_Cursor:
  9792                           	opt stack 0
  9793                           tblptru	equ	0xFF8
  9794                           tblptrh	equ	0xFF7
  9795                           tblptrl	equ	0xFF6
  9796                           tablat	equ	0xFF5
  9797                           prodh	equ	0xFF4
  9798                           prodl	equ	0xFF3
  9799                           intcon	equ	0xFF2
  9800                           indf0	equ	0xFEF
  9801                           postinc0	equ	0xFEE
  9802                           fsr0h	equ	0xFEA
  9803                           fsr0l	equ	0xFE9
  9804                           wreg	equ	0xFE8
  9805                           postinc1	equ	0xFE6
  9806                           postdec1	equ	0xFE5
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function _Lcd_Clear *****************
  9816 ;; Defined at:
  9817 ;;		line 35 in file "lcd.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;		None               void
  9824 ;; Registers used:
  9825 ;;		wreg, status,2, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9834 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9835 ;;Total ram usage:        0 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    6
  9838 ;; This function calls:
  9839 ;;		_Lcd_Cmd
  9840 ;; This function is called by:
  9841 ;;		_Inicializa_Driveby
  9842 ;;		_Comando_Tablet
  9843 ;;		_main
  9844 ;; This function uses a non-reentrant model
  9845 ;;
  9846                           
  9847                           	psect	text48
  9848  002998                     __ptext48:
  9849                           	opt stack 0
  9850  002998                     _Lcd_Clear:
  9851                           	opt stack 24
  9852                           
  9853                           ;lcd.c: 36: Lcd_Cmd(0);
  9854                           
  9855                           ;incstack = 0
  9856  002998  0E00               	movlw	0
  9857  00299A  EC49  F014         	call	_Lcd_Cmd
  9858                           
  9859                           ;lcd.c: 37: Lcd_Cmd(1);
  9860  00299E  0E01               	movlw	1
  9861  0029A0  EC49  F014         	call	_Lcd_Cmd
  9862  0029A4  0012               	return	
  9863  0029A6                     __end_of_Lcd_Clear:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           indf0	equ	0xFEF
  9873                           postinc0	equ	0xFEE
  9874                           fsr0h	equ	0xFEA
  9875                           fsr0l	equ	0xFE9
  9876                           wreg	equ	0xFE8
  9877                           postinc1	equ	0xFE6
  9878                           postdec1	equ	0xFE5
  9879                           fsr1l	equ	0xFE1
  9880                           indf2	equ	0xFDF
  9881                           postinc2	equ	0xFDE
  9882                           postdec2	equ	0xFDD
  9883                           fsr2h	equ	0xFDA
  9884                           fsr2l	equ	0xFD9
  9885                           status	equ	0xFD8
  9886                           
  9887 ;; *************** function _Lcd_Cmd *****************
  9888 ;; Defined at:
  9889 ;;		line 27 in file "lcd.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;  a               1    wreg     unsigned char 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  a               1   26[COMRAM] unsigned char 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;		None               void
  9896 ;; Registers used:
  9897 ;;		wreg, status,2, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9903 ;;      Params:         0       0       0       0       0       0       0       0       0
  9904 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9905 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9906 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9907 ;;Total ram usage:        2 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    5
  9910 ;; This function calls:
  9911 ;;		_Lcd_Port
  9912 ;; This function is called by:
  9913 ;;		_Lcd_Clear
  9914 ;;		_Lcd_Set_Cursor
  9915 ;;		_Lcd_Init
  9916 ;;		_Lcd_Shift_Right
  9917 ;;		_Lcd_Shift_Left
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           	psect	text49
  9922  002892                     __ptext49:
  9923                           	opt stack 0
  9924  002892                     _Lcd_Cmd:
  9925                           	opt stack 24
  9926                           
  9927                           ;incstack = 0
  9928                           ;Lcd_Cmd@a stored from wreg
  9929  002892  6E1B               	movwf	Lcd_Cmd@a,c
  9930                           
  9931                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9932  002894  9084               	bcf	3972,0,c	;volatile
  9933                           
  9934                           ;lcd.c: 29: Lcd_Port(a);
  9935  002896  501B               	movf	Lcd_Cmd@a,w,c
  9936  002898  ECE5  F013         	call	_Lcd_Port
  9937                           
  9938                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9939  00289C  8484               	bsf	3972,2,c	;volatile
  9940                           
  9941                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9942  00289E  0E06               	movlw	6
  9943  0028A0  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9944  0028A2  0E30               	movlw	48
  9945  0028A4                     u7027:
  9946  0028A4  2EE8               	decfsz	wreg,f,c
  9947  0028A6  D7FE               	goto	u7027
  9948  0028A8  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9949  0028AA  D7FC               	goto	u7027
  9950  0028AC  D000               	nop2	
  9951                           
  9952                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9953  0028AE  9484               	bcf	3972,2,c	;volatile
  9954  0028B0  0012               	return	
  9955  0028B2                     __end_of_Lcd_Cmd:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           indf0	equ	0xFEF
  9965                           postinc0	equ	0xFEE
  9966                           fsr0h	equ	0xFEA
  9967                           fsr0l	equ	0xFE9
  9968                           wreg	equ	0xFE8
  9969                           postinc1	equ	0xFE6
  9970                           postdec1	equ	0xFE5
  9971                           fsr1l	equ	0xFE1
  9972                           indf2	equ	0xFDF
  9973                           postinc2	equ	0xFDE
  9974                           postdec2	equ	0xFDD
  9975                           fsr2h	equ	0xFDA
  9976                           fsr2l	equ	0xFD9
  9977                           status	equ	0xFD8
  9978                           
  9979 ;; *************** function _Lcd_Port *****************
  9980 ;; Defined at:
  9981 ;;		line 6 in file "lcd.c"
  9982 ;; Parameters:    Size  Location     Type
  9983 ;;  a               1    wreg     unsigned char 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;  a               1   24[COMRAM] unsigned char 
  9986 ;; Return value:  Size  Location     Type
  9987 ;;		None               void
  9988 ;; Registers used:
  9989 ;;		wreg
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9995 ;;      Params:         0       0       0       0       0       0       0       0       0
  9996 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9998 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9999 ;;Total ram usage:        1 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    4
 10002 ;; This function calls:
 10003 ;;		Nothing
 10004 ;; This function is called by:
 10005 ;;		_Lcd_Cmd
 10006 ;;		_Lcd_Init
 10007 ;;		_Lcd_Write_Char
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           	psect	text50
 10012  0027CA                     __ptext50:
 10013                           	opt stack 0
 10014  0027CA                     _Lcd_Port:
 10015                           	opt stack 24
 10016                           
 10017                           ;incstack = 0
 10018                           ;Lcd_Port@a stored from wreg
 10019  0027CA  6E19               	movwf	Lcd_Port@a,c
 10020                           
 10021                           ;lcd.c: 7: if (a & 1)
 10022  0027CC  A019               	btfss	Lcd_Port@a,0,c
 10023  0027CE  D002               	goto	l254
 10024                           
 10025                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10026  0027D0  8883               	bsf	3971,4,c	;volatile
 10027  0027D2  D001               	goto	l4519
 10028  0027D4                     l254:
 10029                           
 10030                           ;lcd.c: 9: else
 10031                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10032  0027D4  9883               	bcf	3971,4,c	;volatile
 10033  0027D6                     l4519:
 10034                           
 10035                           ;lcd.c: 12: if (a & 2)
 10036  0027D6  A219               	btfss	Lcd_Port@a,1,c
 10037  0027D8  D002               	goto	l256
 10038                           
 10039                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10040  0027DA  8A83               	bsf	3971,5,c	;volatile
 10041  0027DC  D001               	goto	l4523
 10042  0027DE                     l256:
 10043                           
 10044                           ;lcd.c: 14: else
 10045                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10046  0027DE  9A83               	bcf	3971,5,c	;volatile
 10047  0027E0                     l4523:
 10048                           
 10049                           ;lcd.c: 17: if (a & 4)
 10050  0027E0  A419               	btfss	Lcd_Port@a,2,c
 10051  0027E2  D002               	goto	l258
 10052                           
 10053                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10054  0027E4  8C83               	bsf	3971,6,c	;volatile
 10055  0027E6  D001               	goto	l4527
 10056  0027E8                     l258:
 10057                           
 10058                           ;lcd.c: 19: else
 10059                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10060  0027E8  9C83               	bcf	3971,6,c	;volatile
 10061  0027EA                     l4527:
 10062                           
 10063                           ;lcd.c: 22: if (a & 8)
 10064  0027EA  A619               	btfss	Lcd_Port@a,3,c
 10065  0027EC  D002               	goto	l260
 10066                           
 10067                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10068  0027EE  8E83               	bsf	3971,7,c	;volatile
 10069  0027F0  D001               	goto	l262
 10070  0027F2                     l260:
 10071                           
 10072                           ;lcd.c: 24: else
 10073                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10074  0027F2  9E83               	bcf	3971,7,c	;volatile
 10075  0027F4                     l262:
 10076  0027F4  0012               	return	
 10077  0027F6                     __end_of_Lcd_Port:
 10078                           	opt stack 0
 10079                           tblptru	equ	0xFF8
 10080                           tblptrh	equ	0xFF7
 10081                           tblptrl	equ	0xFF6
 10082                           tablat	equ	0xFF5
 10083                           prodh	equ	0xFF4
 10084                           prodl	equ	0xFF3
 10085                           intcon	equ	0xFF2
 10086                           indf0	equ	0xFEF
 10087                           postinc0	equ	0xFEE
 10088                           fsr0h	equ	0xFEA
 10089                           fsr0l	equ	0xFE9
 10090                           wreg	equ	0xFE8
 10091                           postinc1	equ	0xFE6
 10092                           postdec1	equ	0xFE5
 10093                           fsr1l	equ	0xFE1
 10094                           indf2	equ	0xFDF
 10095                           postinc2	equ	0xFDE
 10096                           postdec2	equ	0xFDD
 10097                           fsr2h	equ	0xFDA
 10098                           fsr2l	equ	0xFD9
 10099                           status	equ	0xFD8
 10100                           
 10101 ;; *************** function _TMRO_USART *****************
 10102 ;; Defined at:
 10103 ;;		line 84 in file "robot.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;		None
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;		None
 10108 ;; Return value:  Size  Location     Type
 10109 ;;		None               void
 10110 ;; Registers used:
 10111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10117 ;;      Params:         0       0       0       0       0       0       0       0       0
 10118 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10119 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10120 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10121 ;;Total ram usage:       14 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    3
 10124 ;; This function calls:
 10125 ;;		_ReadUSART
 10126 ;;		i2_Lcd_Clear
 10127 ;;		i2_Lcd_Set_Cursor
 10128 ;;		i2_Lcd_Write_String
 10129 ;; This function is called by:
 10130 ;;		Interrupt level 2
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	intcode
 10135  000008                     __pintcode:
 10136                           	opt stack 0
 10137  000008                     _TMRO_USART:
 10138                           	opt stack 21
 10139                           
 10140                           ;incstack = 0
 10141  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
 10142  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
 10143  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
 10144  000014  ED7A  F00C         	call	int_func,f	;refresh shadow registers
 10145                           pclatu	equ	0xFFB
 10146                           pclath	equ	0xFFA
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           indf0	equ	0xFEF
 10155                           postinc0	equ	0xFEE
 10156                           fsr0h	equ	0xFEA
 10157                           fsr0l	equ	0xFE9
 10158                           wreg	equ	0xFE8
 10159                           postinc1	equ	0xFE6
 10160                           postdec1	equ	0xFE5
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169                           	psect	intcode_body
 10170  0018F4                     __pintcode_body:
 10171                           	opt stack 21
 10172  0018F4                     int_func:
 10173                           	opt stack 21
 10174  0018F4  0006               	pop		; remove dummy address from shadow register refresh
 10175  0018F6  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
 10176  0018FA  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
 10177  0018FE  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
 10178  001902  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
 10179  001906  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
 10180  00190A  CFF3 F013          	movff	prodl,??_TMRO_USART+8
 10181  00190E  CFF4 F014          	movff	prodh,??_TMRO_USART+9
 10182  001912  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
 10183  001916  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
 10184  00191A  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
 10185  00191E  CFF5 F018          	movff	tablat,??_TMRO_USART+13
 10186                           
 10187                           ;robot.c: 89: if (PIR1bits.RCIF) {
 10188  001922  AA9E               	btfss	3998,5,c	;volatile
 10189  001924  D032               	goto	i2l371
 10190                           
 10191                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 10192  001926  503D               	movf	_cad,w,c
 10193  001928  0D01               	mullw	1
 10194  00192A  0101               	movlb	1	; () banked
 10195  00192C  0E28               	movlw	low _BluetoothDato
 10196  00192E  24F3               	addwf	prodl,w,c
 10197  001930  6ED9               	movwf	fsr2l,c
 10198  001932  0101               	movlb	1	; () banked
 10199  001934  0E01               	movlw	high _BluetoothDato
 10200  001936  20F4               	addwfc	prodh,w,c
 10201  001938  6EDA               	movwf	fsr2h,c
 10202  00193A  EC87  F014         	call	_ReadUSART	;wreg free
 10203  00193E  6EDF               	movwf	indf2,c
 10204                           
 10205                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 10206  001940  503D               	movf	_cad,w,c
 10207  001942  0D01               	mullw	1
 10208  001944  0101               	movlb	1	; () banked
 10209  001946  0E28               	movlw	low _BluetoothDato
 10210  001948  24F3               	addwf	prodl,w,c
 10211  00194A  6ED9               	movwf	fsr2l,c
 10212  00194C  0101               	movlb	1	; () banked
 10213  00194E  0E01               	movlw	high _BluetoothDato
 10214  001950  20F4               	addwfc	prodh,w,c
 10215  001952  6EDA               	movwf	fsr2h,c
 10216  001954  0E23               	movlw	35
 10217  001956  62DF               	cpfseq	indf2,c
 10218  001958  D013               	goto	i2l4399
 10219                           
 10220                           ; BSR set to: 1
 10221                           ;robot.c: 93: if (ComanTFlag == 0) {
 10222  00195A  6632               	tstfsz	_ComanTFlag,c
 10223  00195C  D007               	goto	i2l4395
 10224                           
 10225                           ; BSR set to: 1
 10226                           ;robot.c: 94: EntTrama = 1;
 10227  00195E  0E01               	movlw	1
 10228  001960  6E35               	movwf	_EntTrama,c
 10229                           
 10230                           ;robot.c: 95: FinComandT = 0;
 10231  001962  0E00               	movlw	0
 10232  001964  6E37               	movwf	_FinComandT,c
 10233                           
 10234                           ;robot.c: 96: ComanTFlag = 1;
 10235  001966  0E01               	movlw	1
 10236  001968  6E32               	movwf	_ComanTFlag,c
 10237  00196A  D00D               	goto	i2u474_40
 10238  00196C                     i2l4395:
 10239                           
 10240                           ; BSR set to: 1
 10241                           ;robot.c: 99: else if (ComanTFlag == 1) {
 10242  00196C  0432               	decf	_ComanTFlag,w,c
 10243  00196E  A4D8               	btfss	status,2,c
 10244  001970  D01C               	goto	i2l4411
 10245                           
 10246                           ; BSR set to: 1
 10247                           ;robot.c: 100: ComanTFlag = 0;
 10248  001972  0E00               	movlw	0
 10249  001974  6E32               	movwf	_ComanTFlag,c
 10250                           
 10251                           ;robot.c: 101: FinComandT = 1;
 10252  001976  0E01               	movlw	1
 10253  001978  6E37               	movwf	_FinComandT,c
 10254                           
 10255                           ;robot.c: 102: EntTrama = 0;
 10256  00197A  0E00               	movlw	0
 10257  00197C  6E35               	movwf	_EntTrama,c
 10258  00197E  D015               	goto	i2l4411
 10259  001980                     i2l4399:
 10260                           
 10261                           ; BSR set to: 1
 10262                           ;robot.c: 106: else if (EntTrama == 1)
 10263  001980  0435               	decf	_EntTrama,w,c
 10264  001982  A4D8               	btfss	status,2,c
 10265  001984  D012               	goto	i2l4411
 10266  001986                     i2u474_40:
 10267                           
 10268                           ; BSR set to: 1
 10269                           ;robot.c: 107: cad++;
 10270  001986  2A3D               	incf	_cad,f,c
 10271  001988  D010               	goto	i2l4411
 10272  00198A                     i2l371:
 10273                           
 10274                           ;robot.c: 111: else if(PIR1bits.TMR2IF){
 10275  00198A  A29E               	btfss	3998,1,c	;volatile
 10276  00198C  D00E               	goto	i2l4411
 10277                           
 10278                           ;robot.c: 112: Lcd_Clear();
 10279  00198E  ECD3  F014         	call	i2_Lcd_Clear	;wreg free
 10280                           
 10281                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 10282  001992  0E01               	movlw	1
 10283  001994  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10284  001996  0E01               	movlw	1
 10285  001998  EC75  F012         	call	i2_Lcd_Set_Cursor
 10286                           
 10287                           ;robot.c: 114: Lcd_Write_String("Interruption TMR2");
 10288  00199C  0E7F               	movlw	high STR_19
 10289  00199E  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10290  0019A0  0E43               	movlw	low STR_19
 10291  0019A2  6E05               	movwf	i2Lcd_Write_String@a,c
 10292  0019A4  EC0D  F011         	call	i2_Lcd_Write_String	;wreg free
 10293                           
 10294                           ;robot.c: 115: PIE1bits.TMR2IE = 0;
 10295  0019A8  929D               	bcf	3997,1,c	;volatile
 10296  0019AA                     i2l4411:
 10297                           
 10298                           ;robot.c: 116: }
 10299                           ;robot.c: 117: PIR1bits.TMR2IF=0;
 10300  0019AA  929E               	bcf	3998,1,c	;volatile
 10301                           
 10302                           ;robot.c: 118: PIR1bits.RCIF=0;
 10303  0019AC  9A9E               	bcf	3998,5,c	;volatile
 10304  0019AE  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10305  0019B2  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10306  0019B6  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10307  0019BA  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10308  0019BE  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10309  0019C2  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10310  0019C6  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10311  0019CA  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10312  0019CE  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10313  0019D2  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10314  0019D6  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10315  0019DA  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10316  0019DE  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10317  0019E2  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10318  0019E6  0011               	retfie		f
 10319  0019E8                     __end_of_TMRO_USART:
 10320                           	opt stack 0
 10321                           pclatu	equ	0xFFB
 10322                           pclath	equ	0xFFA
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           indf0	equ	0xFEF
 10331                           postinc0	equ	0xFEE
 10332                           fsr0h	equ	0xFEA
 10333                           fsr0l	equ	0xFE9
 10334                           wreg	equ	0xFE8
 10335                           postinc1	equ	0xFE6
 10336                           postdec1	equ	0xFE5
 10337                           fsr1h	equ	0xFE2
 10338                           fsr1l	equ	0xFE1
 10339                           indf2	equ	0xFDF
 10340                           postinc2	equ	0xFDE
 10341                           postdec2	equ	0xFDD
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346 ;; *************** function i2_Lcd_Write_String *****************
 10347 ;; Defined at:
 10348 ;;		line 90 in file "lcd.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  a               2    4[COMRAM] PTR unsigned char 
 10351 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
 10352 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
 10353 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10356 ;; Return value:  Size  Location     Type
 10357 ;;		None               void
 10358 ;; Registers used:
 10359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10365 ;;      Params:         2       0       0       0       0       0       0       0       0
 10366 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10367 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10368 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10369 ;;Total ram usage:        6 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    2
 10372 ;; This function calls:
 10373 ;;		i2_Lcd_Write_Char
 10374 ;; This function is called by:
 10375 ;;		_TMRO_USART
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           	psect	text52
 10380  00221A                     __ptext52:
 10381                           	opt stack 0
 10382  00221A                     i2_Lcd_Write_String:
 10383                           	opt stack 21
 10384                           
 10385                           ;lcd.c: 91: int i;
 10386                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10387                           
 10388                           ;incstack = 0
 10389  00221A  0E00               	movlw	0
 10390  00221C  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10391  00221E  0E00               	movlw	0
 10392  002220  6E09               	movwf	i2Lcd_Write_String@i,c
 10393  002222  D01C               	goto	i2l4333
 10394  002224                     i2l4329:
 10395                           
 10396                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10397  002224  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10398  002228  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10399  00222C  5009               	movf	i2Lcd_Write_String@i,w,c
 10400  00222E  2607               	addwf	??i2_Lcd_Write_String,f,c
 10401  002230  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10402  002232  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10403  002234  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10404  002238  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10405  00223C  6AF8               	clrf	tblptru,c
 10406  00223E  0E07               	movlw	(high __ramtop+-1)
 10407  002240  64F7               	cpfsgt	tblptrh,c
 10408  002242  D003               	bra	i2u462_47
 10409  002244  0008               	tblrd		*
 10410  002246  50F5               	movf	tablat,w,c
 10411  002248  D005               	bra	i2u462_40
 10412  00224A                     i2u462_47:
 10413  00224A  CFF6 FFE9          	movff	tblptrl,fsr0l
 10414  00224E  CFF7 FFEA          	movff	tblptrh,fsr0h
 10415  002252  50EF               	movf	indf0,w,c
 10416  002254                     i2u462_40:
 10417  002254  ECB0  F013         	call	i2_Lcd_Write_Char
 10418  002258  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10419  00225A  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10420  00225C                     i2l4333:
 10421  00225C  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10422  002260  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10423  002264  5009               	movf	i2Lcd_Write_String@i,w,c
 10424  002266  2607               	addwf	??i2_Lcd_Write_String,f,c
 10425  002268  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10426  00226A  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10427  00226C  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10428  002270  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10429  002274  6AF8               	clrf	tblptru,c
 10430  002276  0E07               	movlw	(high __ramtop+-1)
 10431  002278  64F7               	cpfsgt	tblptrh,c
 10432  00227A  D003               	bra	i2u463_47
 10433  00227C  0008               	tblrd		*
 10434  00227E  50F5               	movf	tablat,w,c
 10435  002280  D005               	bra	i2u463_40
 10436  002282                     i2u463_47:
 10437  002282  CFF6 FFE9          	movff	tblptrl,fsr0l
 10438  002286  CFF7 FFEA          	movff	tblptrh,fsr0h
 10439  00228A  50EF               	movf	indf0,w,c
 10440  00228C                     i2u463_40:
 10441  00228C  0900               	iorlw	0
 10442  00228E  B4D8               	btfsc	status,2,c
 10443  002290  0012               	return	
 10444  002292  D7C8               	goto	i2l4329
 10445  002294                     __end_ofi2_Lcd_Write_String:
 10446                           	opt stack 0
 10447                           pclatu	equ	0xFFB
 10448                           pclath	equ	0xFFA
 10449                           tblptru	equ	0xFF8
 10450                           tblptrh	equ	0xFF7
 10451                           tblptrl	equ	0xFF6
 10452                           tablat	equ	0xFF5
 10453                           prodh	equ	0xFF4
 10454                           prodl	equ	0xFF3
 10455                           intcon	equ	0xFF2
 10456                           indf0	equ	0xFEF
 10457                           postinc0	equ	0xFEE
 10458                           fsr0h	equ	0xFEA
 10459                           fsr0l	equ	0xFE9
 10460                           wreg	equ	0xFE8
 10461                           postinc1	equ	0xFE6
 10462                           postdec1	equ	0xFE5
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           fsr2h	equ	0xFDA
 10469                           fsr2l	equ	0xFD9
 10470                           status	equ	0xFD8
 10471                           
 10472 ;; *************** function i2_Lcd_Write_Char *****************
 10473 ;; Defined at:
 10474 ;;		line 75 in file "lcd.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;  a               1    wreg     unsigned char 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  a               1    3[COMRAM] unsigned char 
 10479 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10480 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10481 ;; Return value:  Size  Location     Type
 10482 ;;		None               void
 10483 ;; Registers used:
 10484 ;;		wreg, status,2, status,0, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0
 10491 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10493 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10494 ;;Total ram usage:        3 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    1
 10497 ;; This function calls:
 10498 ;;		i2_Lcd_Port
 10499 ;; This function is called by:
 10500 ;;		i2_Lcd_Write_String
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text53
 10505  002760                     __ptext53:
 10506                           	opt stack 0
 10507  002760                     i2_Lcd_Write_Char:
 10508                           	opt stack 21
 10509                           
 10510                           ;incstack = 0
 10511                           ;i2Lcd_Write_Char@a stored from wreg
 10512  002760  6E04               	movwf	i2Lcd_Write_Char@a,c
 10513                           
 10514                           ;lcd.c: 76: char temp, y;
 10515                           ;lcd.c: 77: temp = a & 0x0F;
 10516  002762  5004               	movf	i2Lcd_Write_Char@a,w,c
 10517  002764  0B0F               	andlw	15
 10518  002766  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10519                           
 10520                           ;lcd.c: 78: y = a & 0xF0;
 10521  002768  5004               	movf	i2Lcd_Write_Char@a,w,c
 10522  00276A  0BF0               	andlw	240
 10523  00276C  6E03               	movwf	i2Lcd_Write_Char@y,c
 10524                           
 10525                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10526  00276E  8084               	bsf	3972,0,c	;volatile
 10527                           
 10528                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10529  002770  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10530  002772  0B0F               	andlw	15
 10531  002774  ECFB  F013         	call	i2_Lcd_Port
 10532                           
 10533                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10534  002778  8484               	bsf	3972,2,c	;volatile
 10535                           
 10536                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10537  00277A  0E0D               	movlw	13
 10538  00277C                     i2u703_47:
 10539  00277C  2EE8               	decfsz	wreg,f,c
 10540  00277E  D7FE               	goto	i2u703_47
 10541  002780  F000               	nop	
 10542                           
 10543                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10544  002782  9484               	bcf	3972,2,c	;volatile
 10545                           
 10546                           ;lcd.c: 84: Lcd_Port(temp);
 10547  002784  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10548  002786  ECFB  F013         	call	i2_Lcd_Port
 10549                           
 10550                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10551  00278A  8484               	bsf	3972,2,c	;volatile
 10552                           
 10553                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10554  00278C  0E0D               	movlw	13
 10555  00278E                     i2u704_47:
 10556  00278E  2EE8               	decfsz	wreg,f,c
 10557  002790  D7FE               	goto	i2u704_47
 10558  002792  F000               	nop	
 10559                           
 10560                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10561  002794  9484               	bcf	3972,2,c	;volatile
 10562  002796  0012               	return	
 10563  002798                     __end_ofi2_Lcd_Write_Char:
 10564                           	opt stack 0
 10565                           pclatu	equ	0xFFB
 10566                           pclath	equ	0xFFA
 10567                           tblptru	equ	0xFF8
 10568                           tblptrh	equ	0xFF7
 10569                           tblptrl	equ	0xFF6
 10570                           tablat	equ	0xFF5
 10571                           prodh	equ	0xFF4
 10572                           prodl	equ	0xFF3
 10573                           intcon	equ	0xFF2
 10574                           indf0	equ	0xFEF
 10575                           postinc0	equ	0xFEE
 10576                           fsr0h	equ	0xFEA
 10577                           fsr0l	equ	0xFE9
 10578                           wreg	equ	0xFE8
 10579                           postinc1	equ	0xFE6
 10580                           postdec1	equ	0xFE5
 10581                           fsr1h	equ	0xFE2
 10582                           fsr1l	equ	0xFE1
 10583                           indf2	equ	0xFDF
 10584                           postinc2	equ	0xFDE
 10585                           postdec2	equ	0xFDD
 10586                           fsr2h	equ	0xFDA
 10587                           fsr2l	equ	0xFD9
 10588                           status	equ	0xFD8
 10589                           
 10590 ;; *************** function i2_Lcd_Set_Cursor *****************
 10591 ;; Defined at:
 10592 ;;		line 40 in file "lcd.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;  a               1    wreg     unsigned char 
 10595 ;;  b               1    3[COMRAM] unsigned char 
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;  a               1    4[COMRAM] unsigned char 
 10598 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10599 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10600 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;		None               void
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0, cstack
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10610 ;;      Params:         1       0       0       0       0       0       0       0       0
 10611 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10612 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10613 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10614 ;;Total ram usage:        5 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    2
 10617 ;; This function calls:
 10618 ;;		i2_Lcd_Cmd
 10619 ;; This function is called by:
 10620 ;;		_TMRO_USART
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           	psect	text54
 10625  0024EA                     __ptext54:
 10626                           	opt stack 0
 10627  0024EA                     i2_Lcd_Set_Cursor:
 10628                           	opt stack 21
 10629                           
 10630                           ;incstack = 0
 10631                           ;i2Lcd_Set_Cursor@a stored from wreg
 10632  0024EA  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10633                           
 10634                           ;lcd.c: 41: char temp, z, y;
 10635                           ;lcd.c: 42: if (a == 1) {
 10636  0024EC  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10637  0024EE  A4D8               	btfss	status,2,c
 10638  0024F0  D010               	goto	i2l4319
 10639                           
 10640                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10641  0024F2  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10642  0024F4  0F7F               	addlw	127
 10643  0024F6  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10644                           
 10645                           ;lcd.c: 44: z = temp >> 4;
 10646  0024F8  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10647  0024FA  0B0F               	andlw	15
 10648  0024FC  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10649                           
 10650                           ;lcd.c: 45: y = temp & 0x0F;
 10651  0024FE  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10652  002500  0B0F               	andlw	15
 10653  002502  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10654                           
 10655                           ;lcd.c: 46: Lcd_Cmd(z);
 10656  002504  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10657  002506  EC59  F014         	call	i2_Lcd_Cmd
 10658                           
 10659                           ;lcd.c: 47: Lcd_Cmd(y);
 10660  00250A  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10661  00250C  EC59  F014         	call	i2_Lcd_Cmd
 10662                           
 10663                           ;lcd.c: 48: } else if (a == 2) {
 10664  002510  D013               	goto	i2l274
 10665  002512                     i2l4319:
 10666  002512  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10667  002514  0A02               	xorlw	2
 10668  002516  A4D8               	btfss	status,2,c
 10669  002518  D00F               	goto	i2l274
 10670                           
 10671                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10672  00251A  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10673  00251C  0FBF               	addlw	191
 10674  00251E  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10675                           
 10676                           ;lcd.c: 50: z = temp >> 4;
 10677  002520  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10678  002522  0B0F               	andlw	15
 10679  002524  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10680                           
 10681                           ;lcd.c: 51: y = temp & 0x0F;
 10682  002526  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10683  002528  0B0F               	andlw	15
 10684  00252A  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10685                           
 10686                           ;lcd.c: 52: Lcd_Cmd(z);
 10687  00252C  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10688  00252E  EC59  F014         	call	i2_Lcd_Cmd
 10689                           
 10690                           ;lcd.c: 53: Lcd_Cmd(y);
 10691  002532  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10692  002534  EC59  F014         	call	i2_Lcd_Cmd
 10693  002538                     i2l274:
 10694  002538  0012               	return	
 10695  00253A                     __end_ofi2_Lcd_Set_Cursor:
 10696                           	opt stack 0
 10697                           pclatu	equ	0xFFB
 10698                           pclath	equ	0xFFA
 10699                           tblptru	equ	0xFF8
 10700                           tblptrh	equ	0xFF7
 10701                           tblptrl	equ	0xFF6
 10702                           tablat	equ	0xFF5
 10703                           prodh	equ	0xFF4
 10704                           prodl	equ	0xFF3
 10705                           intcon	equ	0xFF2
 10706                           indf0	equ	0xFEF
 10707                           postinc0	equ	0xFEE
 10708                           fsr0h	equ	0xFEA
 10709                           fsr0l	equ	0xFE9
 10710                           wreg	equ	0xFE8
 10711                           postinc1	equ	0xFE6
 10712                           postdec1	equ	0xFE5
 10713                           fsr1h	equ	0xFE2
 10714                           fsr1l	equ	0xFE1
 10715                           indf2	equ	0xFDF
 10716                           postinc2	equ	0xFDE
 10717                           postdec2	equ	0xFDD
 10718                           fsr2h	equ	0xFDA
 10719                           fsr2l	equ	0xFD9
 10720                           status	equ	0xFD8
 10721                           
 10722 ;; *************** function i2_Lcd_Clear *****************
 10723 ;; Defined at:
 10724 ;;		line 35 in file "lcd.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;		None
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;		None               void
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10738 ;;      Params:         0       0       0       0       0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10741 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10742 ;;Total ram usage:        0 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    2
 10745 ;; This function calls:
 10746 ;;		i2_Lcd_Cmd
 10747 ;; This function is called by:
 10748 ;;		_TMRO_USART
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           	psect	text55
 10753  0029A6                     __ptext55:
 10754                           	opt stack 0
 10755  0029A6                     i2_Lcd_Clear:
 10756                           	opt stack 21
 10757                           
 10758                           ;lcd.c: 36: Lcd_Cmd(0);
 10759                           
 10760                           ;incstack = 0
 10761  0029A6  0E00               	movlw	0
 10762  0029A8  EC59  F014         	call	i2_Lcd_Cmd
 10763                           
 10764                           ;lcd.c: 37: Lcd_Cmd(1);
 10765  0029AC  0E01               	movlw	1
 10766  0029AE  EC59  F014         	call	i2_Lcd_Cmd
 10767  0029B2  0012               	return	
 10768  0029B4                     __end_ofi2_Lcd_Clear:
 10769                           	opt stack 0
 10770                           pclatu	equ	0xFFB
 10771                           pclath	equ	0xFFA
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           intcon	equ	0xFF2
 10779                           indf0	equ	0xFEF
 10780                           postinc0	equ	0xFEE
 10781                           fsr0h	equ	0xFEA
 10782                           fsr0l	equ	0xFE9
 10783                           wreg	equ	0xFE8
 10784                           postinc1	equ	0xFE6
 10785                           postdec1	equ	0xFE5
 10786                           fsr1h	equ	0xFE2
 10787                           fsr1l	equ	0xFE1
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           fsr2h	equ	0xFDA
 10792                           fsr2l	equ	0xFD9
 10793                           status	equ	0xFD8
 10794                           
 10795 ;; *************** function i2_Lcd_Cmd *****************
 10796 ;; Defined at:
 10797 ;;		line 27 in file "lcd.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;  a               1    wreg     unsigned char 
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;  a               1    2[COMRAM] unsigned char 
 10802 ;; Return value:  Size  Location     Type
 10803 ;;		None               void
 10804 ;; Registers used:
 10805 ;;		wreg, status,2, cstack
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10811 ;;      Params:         0       0       0       0       0       0       0       0       0
 10812 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10813 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10814 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10815 ;;Total ram usage:        2 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    1
 10818 ;; This function calls:
 10819 ;;		i2_Lcd_Port
 10820 ;; This function is called by:
 10821 ;;		i2_Lcd_Clear
 10822 ;;		i2_Lcd_Set_Cursor
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text56
 10827  0028B2                     __ptext56:
 10828                           	opt stack 0
 10829  0028B2                     i2_Lcd_Cmd:
 10830                           	opt stack 21
 10831                           
 10832                           ;incstack = 0
 10833                           ;i2Lcd_Cmd@a stored from wreg
 10834  0028B2  6E03               	movwf	i2Lcd_Cmd@a,c
 10835                           
 10836                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10837  0028B4  9084               	bcf	3972,0,c	;volatile
 10838                           
 10839                           ;lcd.c: 29: Lcd_Port(a);
 10840  0028B6  5003               	movf	i2Lcd_Cmd@a,w,c
 10841  0028B8  ECFB  F013         	call	i2_Lcd_Port
 10842                           
 10843                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10844  0028BC  8484               	bsf	3972,2,c	;volatile
 10845                           
 10846                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10847  0028BE  0E06               	movlw	6
 10848  0028C0  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10849  0028C2  0E30               	movlw	48
 10850  0028C4                     i2u705_47:
 10851  0028C4  2EE8               	decfsz	wreg,f,c
 10852  0028C6  D7FE               	goto	i2u705_47
 10853  0028C8  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10854  0028CA  D7FC               	goto	i2u705_47
 10855  0028CC  D000               	nop2	
 10856                           
 10857                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10858  0028CE  9484               	bcf	3972,2,c	;volatile
 10859  0028D0  0012               	return	
 10860  0028D2                     __end_ofi2_Lcd_Cmd:
 10861                           	opt stack 0
 10862                           pclatu	equ	0xFFB
 10863                           pclath	equ	0xFFA
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           indf0	equ	0xFEF
 10872                           postinc0	equ	0xFEE
 10873                           fsr0h	equ	0xFEA
 10874                           fsr0l	equ	0xFE9
 10875                           wreg	equ	0xFE8
 10876                           postinc1	equ	0xFE6
 10877                           postdec1	equ	0xFE5
 10878                           fsr1h	equ	0xFE2
 10879                           fsr1l	equ	0xFE1
 10880                           indf2	equ	0xFDF
 10881                           postinc2	equ	0xFDE
 10882                           postdec2	equ	0xFDD
 10883                           fsr2h	equ	0xFDA
 10884                           fsr2l	equ	0xFD9
 10885                           status	equ	0xFD8
 10886                           
 10887 ;; *************** function i2_Lcd_Port *****************
 10888 ;; Defined at:
 10889 ;;		line 6 in file "lcd.c"
 10890 ;; Parameters:    Size  Location     Type
 10891 ;;  a               1    wreg     unsigned char 
 10892 ;; Auto vars:     Size  Location     Type
 10893 ;;  a               1    0[COMRAM] unsigned char 
 10894 ;; Return value:  Size  Location     Type
 10895 ;;		None               void
 10896 ;; Registers used:
 10897 ;;		wreg
 10898 ;; Tracked objects:
 10899 ;;		On entry : 0/0
 10900 ;;		On exit  : 0/0
 10901 ;;		Unchanged: 0/0
 10902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10903 ;;      Params:         0       0       0       0       0       0       0       0       0
 10904 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10906 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10907 ;;Total ram usage:        1 bytes
 10908 ;; Hardware stack levels used:    1
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		i2_Lcd_Cmd
 10913 ;;		i2_Lcd_Write_Char
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text57
 10918  0027F6                     __ptext57:
 10919                           	opt stack 0
 10920  0027F6                     i2_Lcd_Port:
 10921                           	opt stack 21
 10922                           
 10923                           ;incstack = 0
 10924                           ;i2Lcd_Port@a stored from wreg
 10925  0027F6  6E01               	movwf	i2Lcd_Port@a,c
 10926                           
 10927                           ;lcd.c: 7: if (a & 1)
 10928  0027F8  A001               	btfss	i2Lcd_Port@a,0,c
 10929  0027FA  D002               	goto	i2l254
 10930                           
 10931                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10932  0027FC  8883               	bsf	3971,4,c	;volatile
 10933  0027FE  D001               	goto	i2l3815
 10934  002800                     i2l254:
 10935                           
 10936                           ;lcd.c: 9: else
 10937                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10938  002800  9883               	bcf	3971,4,c	;volatile
 10939  002802                     i2l3815:
 10940                           
 10941                           ;lcd.c: 12: if (a & 2)
 10942  002802  A201               	btfss	i2Lcd_Port@a,1,c
 10943  002804  D002               	goto	i2l256
 10944                           
 10945                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10946  002806  8A83               	bsf	3971,5,c	;volatile
 10947  002808  D001               	goto	i2l3819
 10948  00280A                     i2l256:
 10949                           
 10950                           ;lcd.c: 14: else
 10951                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10952  00280A  9A83               	bcf	3971,5,c	;volatile
 10953  00280C                     i2l3819:
 10954                           
 10955                           ;lcd.c: 17: if (a & 4)
 10956  00280C  A401               	btfss	i2Lcd_Port@a,2,c
 10957  00280E  D002               	goto	i2l258
 10958                           
 10959                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10960  002810  8C83               	bsf	3971,6,c	;volatile
 10961  002812  D001               	goto	i2l3823
 10962  002814                     i2l258:
 10963                           
 10964                           ;lcd.c: 19: else
 10965                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10966  002814  9C83               	bcf	3971,6,c	;volatile
 10967  002816                     i2l3823:
 10968                           
 10969                           ;lcd.c: 22: if (a & 8)
 10970  002816  A601               	btfss	i2Lcd_Port@a,3,c
 10971  002818  D002               	goto	i2l260
 10972                           
 10973                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10974  00281A  8E83               	bsf	3971,7,c	;volatile
 10975  00281C  D001               	goto	i2l262
 10976  00281E                     i2l260:
 10977                           
 10978                           ;lcd.c: 24: else
 10979                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10980  00281E  9E83               	bcf	3971,7,c	;volatile
 10981  002820                     i2l262:
 10982  002820  0012               	return	
 10983  002822                     __end_ofi2_Lcd_Port:
 10984                           	opt stack 0
 10985                           pclatu	equ	0xFFB
 10986                           pclath	equ	0xFFA
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           intcon	equ	0xFF2
 10994                           indf0	equ	0xFEF
 10995                           postinc0	equ	0xFEE
 10996                           fsr0h	equ	0xFEA
 10997                           fsr0l	equ	0xFE9
 10998                           wreg	equ	0xFE8
 10999                           postinc1	equ	0xFE6
 11000                           postdec1	equ	0xFE5
 11001                           fsr1h	equ	0xFE2
 11002                           fsr1l	equ	0xFE1
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _ReadUSART *****************
 11011 ;; Defined at:
 11012 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;  data            1    0[COMRAM] unsigned char 
 11017 ;; Return value:  Size  Location     Type
 11018 ;;                  1    wreg      unsigned char 
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0
 11027 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11029 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11030 ;;Total ram usage:        1 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; This function calls:
 11033 ;;		Nothing
 11034 ;; This function is called by:
 11035 ;;		_TMRO_USART
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           	psect	text58
 11040  00290E                     __ptext58:
 11041                           	opt stack 0
 11042  00290E                     _ReadUSART:
 11043                           	opt stack 23
 11044                           
 11045                           ;incstack = 0
 11046  00290E  0EF2               	movlw	242
 11047  002910  163C               	andwf	_USART_Status,f,c
 11048  002912  ACAB               	btfss	4011,6,c	;volatile
 11049  002914  D003               	goto	i2l628
 11050  002916  903C               	bcf	_USART_Status,0,c
 11051  002918  B0AB               	btfsc	4011,0,c	;volatile
 11052  00291A  803C               	bsf	_USART_Status,0,c
 11053  00291C                     i2l628:
 11054  00291C  B4AB               	btfsc	4011,2,c	;volatile
 11055  00291E  843C               	bsf	_USART_Status,2,c
 11056  002920  B2AB               	btfsc	4011,1,c	;volatile
 11057  002922  863C               	bsf	_USART_Status,3,c
 11058  002924  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 11059  002928  5001               	movf	ReadUSART@data,w,c
 11060  00292A  0012               	return	
 11061  00292C                     __end_of_ReadUSART:
 11062                           	opt stack 0
 11063                           pclatu	equ	0xFFB
 11064                           pclath	equ	0xFFA
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           indf0	equ	0xFEF
 11073                           postinc0	equ	0xFEE
 11074                           fsr0h	equ	0xFEA
 11075                           fsr0l	equ	0xFE9
 11076                           wreg	equ	0xFE8
 11077                           postinc1	equ	0xFE6
 11078                           postdec1	equ	0xFE5
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8
 11087                           pclatu	equ	0xFFB
 11088                           pclath	equ	0xFFA
 11089                           tblptru	equ	0xFF8
 11090                           tblptrh	equ	0xFF7
 11091                           tblptrl	equ	0xFF6
 11092                           tablat	equ	0xFF5
 11093                           prodh	equ	0xFF4
 11094                           prodl	equ	0xFF3
 11095                           intcon	equ	0xFF2
 11096                           indf0	equ	0xFEF
 11097                           postinc0	equ	0xFEE
 11098                           fsr0h	equ	0xFEA
 11099                           fsr0l	equ	0xFE9
 11100                           wreg	equ	0xFE8
 11101                           postinc1	equ	0xFE6
 11102                           postdec1	equ	0xFE5
 11103                           fsr1h	equ	0xFE2
 11104                           fsr1l	equ	0xFE1
 11105                           indf2	equ	0xFDF
 11106                           postinc2	equ	0xFDE
 11107                           postdec2	equ	0xFDD
 11108                           fsr2h	equ	0xFDA
 11109                           fsr2l	equ	0xFD9
 11110                           status	equ	0xFD8
 11111                           
 11112                           	psect	rparam
 11113  0000                     pclatu	equ	0xFFB
 11114                           pclath	equ	0xFFA
 11115                           tblptru	equ	0xFF8
 11116                           tblptrh	equ	0xFF7
 11117                           tblptrl	equ	0xFF6
 11118                           tablat	equ	0xFF5
 11119                           prodh	equ	0xFF4
 11120                           prodl	equ	0xFF3
 11121                           intcon	equ	0xFF2
 11122                           indf0	equ	0xFEF
 11123                           postinc0	equ	0xFEE
 11124                           fsr0h	equ	0xFEA
 11125                           fsr0l	equ	0xFE9
 11126                           wreg	equ	0xFE8
 11127                           postinc1	equ	0xFE6
 11128                           postdec1	equ	0xFE5
 11129                           fsr1h	equ	0xFE2
 11130                           fsr1l	equ	0xFE1
 11131                           indf2	equ	0xFDF
 11132                           postinc2	equ	0xFDE
 11133                           postdec2	equ	0xFDD
 11134                           fsr2h	equ	0xFDA
 11135                           fsr2l	equ	0xFD9
 11136                           status	equ	0xFD8


Data Sizes:
    Strings     187
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1415$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124750
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5102
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  116355
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      99
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1064
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Aug 29 12:39:54 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 2726                             l59 2338  
                           l68 1FF6                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l230 2992                            l209 27BC  
                          l260 27F2                            l262 27F4                            l254 27D4  
                          l256 27DE                            l440 1AF4                            l433 1ABC  
                          l258 27E8                            l274 24E8                            l442 1B04  
                          l434 1B62                            l610 2392                            l523 0592  
                          l444 1B1C                            l436 1ACC                            l446 1B2C  
                          l438 1AE4                            l614 23A6                            l615 23A8  
                          l448 1B42                            l616 23B2                            l617 23B4  
                          l619 23D6                            l476 0DB6                            l576 262C  
                          l577 2636                            l578 2638                            l928 17F2  
                          l937 17E2                            l969 1C0A                   __CFG_CPB$OFF 000000  
                          _PR2 000FCB                   __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000  
                          _cad 003D                   ___awmod@sign 001E                            prod 000FF3  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l1010 1104                           l1012 112C                           l1021 1216  
                         l1030 1240                           l1006 10CA                           l1007 12DC  
                         l1046 18F2                           l1070 1434                           l1055 18E2  
                         l1064 1F9E                           l1080 2860                           l1048 1862  
                         l1129 2096                           l1049 188A                           l1090 157E  
                         l1139 242C                           l5001 17DE                           l5013 1F40  
                         l5023 1F9C                           l5111 241E                           l5103 23EA  
                         l5017 1F70                           l5105 23F6                           l5201 02B8  
                         l5107 23FA                           l5037 145E                           l5117 2444  
                         l5301 0730                           l5213 0346                           l5141 0030  
                         l5133 25C2                           l5055 14EC                           l5119 2450  
                         l5303 073C                           l5073 156E                           l5065 152A  
                         l5313 07B6                           l5225 03B8                           l5209 0320  
                         l5153 0066                           l5129 2590                           l4523 27E0  
                         l4603 12B8                           l5067 1542                           l5059 1508  
                         l5083 2048                           l5243 0472                           l5155 00A2  
                         l5147 0052                           l5069 1548                           l5085 2054  
                         l4613 1300                           l5341 08FA                           l5333 0838  
                         l5229 0420                           l5149 0060                           l4527 27EA  
                         l4519 27D6                           l5351 21AA                           l4551 1112  
                         l5095 2088                           l5087 2058                           l4711 1EC0  
                         l5335 084C                           l5327 0808                           l5271 0596  
                         l5343 090E                           l4545 10D8                           l4633 1382  
                         l5265 0562                           l5249 049C                           l5257 053A  
                         l5193 024C                           l5185 01E4                           l5169 011C  
                         l5345 0932                           l5355 21E2                           l4491 1BAA  
                         l4483 1B74                           l4731 1F06                           l4723 1EEE  
                         l4715 1ECE                           l4707 1EA4                           l4643 13CC  
                         l4619 1334                           l5283 0616                           l5259 0548  
                         l4573 1198                           l4557 1122                           l4717 1ED6  
                         l4637 13A0                           l5293 0708                           l5197 0272  
                         l4477 2962                           l5445 2316                           l4495 1BC0  
                         l4487 1B82                           l4575 11AC                           l4567 1164  
                         l4903 1828                           l4663 1CD6                           l4719 1EDA  
                         l4727 1EF8                           l4647 13EA                           l5295 0716  
                         l5279 05C4                           l5463 1FDC                           l4743 1E34  
                         l5711 1A52                           l4497 1BDE                           l4489 1B8C  
                         l4593 126A                           l4585 11F8                           l4577 11B8  
                         l4841 0F26                           l5617 1B5A                           l5449 2340  
                         l5801 1694                           l4753 1E76                           l4737 1DF6  
                         l4499 1BE8                           l4587 120C                           l4579 11C4  
                         l4931 18AA                           l4675 1D0C                           l4691 1D3E  
                         l5387 2628                           l4771 2386                           l5467 2000  
                         l5803 16B8                           l4747 1E4C                           l5485 24C2  
                         l4941 18D2                           l4677 1D14                           l4669 1CF6  
                         l4757 27AA                           l4951 16EA                           l4943 18DE  
                         l4935 18BA                           l4695 1D4C                           l4687 1D34  
                         l4679 1D18                           l4863 0A9A                           l4849 100A  
                         l4881 0CB8                           l4873 0B6C                           l5753 15AA  
                         l4971 1758                           l4779 2394                           l5747 158E  
                         l5907 1DD6                           l4957 1716                           l4869 0B5C  
                         l5765 15E2                           l4887 0D86                           l5775 1622  
                         l5759 15C6                           l4993 17BA                           l4897 180E  
                         l5793 1678                           l5881 1D8E                           l4979 1788  
                         l4989 17AA                           l4999 17D2                           l5887 1D9C  
                         STR_1 7FB9                           STR_2 7F65                           STR_3 7FDB  
                         STR_4 7FDB                           STR_5 7FB6                           STR_6 7F74  
                         STR_7 7F82                           STR_8 7F9E                           STR_9 7F90  
              __end_of_BT_Init 1CB2                           _PIE1 000F9D                           u5141 12F2  
                         u5320 1E2A                           u5161 1314                           u5170 1320  
                         u5350 1E6C                           u7007 2744                           u5327 1E20  
                         u6311 1C22                           u6240 21DA                           u7017 2756  
                         u6305 264C                           u6250 2212                           u7027 28A4  
                         u5620 18C0                           u5357 1E62                           u5710 17C0  
                         u6247 21D0                           u5551 1804                           u6175 078E  
                         u5640 16DC                           u6257 2208                           u4931 1076  
                         u5571 181E                           u6275 2686                           u5820 1510  
                         u5660 1708                           u4941 1096                           u5645 16D2  
                         u5665 16FE                           u5771 144E                           u5790 148A  
                         u6840 1B52                           u5970 016C                           u6690 1B14  
                         u5795 1480                           u5955 00F6                           u6790 1B3C  
                         u5975 0160                           u6947 22A0                           u6957 22B6  
                         u6967 22CC                           u6977 1A0A                           u6987 1A42  
                         u6997 27B0                           _TMR2 000FCC              ?_Lcd_Write_String 001D  
                         _main 1D56                   ___ftpack@arg 0019                   ___ftpack@exp 001C  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0018  
           ??_Lcd_Write_String 001F                  __CFG_IESO$OFF 000000                     _FinComandB 0036  
                   _FinComandT 0037                   _sprintf$1428 0098                   _sprintf$2456 0095  
              __end_of_Lcd_Cmd 28B2                  __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A  
                 ___ftmul@sign 006B                    ?_UART1_Init 0001                   ___fttol@exp1 0081  
                 ___fttol@lval 007D                     _ComanBFlag 0031        __size_of_clrBufferUSART 0038  
                __CFG_PLLDIV$1 000000                     _ComanTFlag 0032              _Lcd_Write_Integer 26B6  
               __CFG_CCP2MX$ON 000000                          ?_main 0001                __end_of___awdiv 1D56  
              __end_of___ftadd 12DE                          STR_10 7FF3                          STR_11 7F55  
                        STR_12 7FFA                          STR_20 7FEC                          STR_13 7F53  
                        STR_21 7FC5                          STR_14 7FFC                          STR_15 7F72  
                        STR_16 7FE4                          STR_17 7FD0                          STR_18 7FAC  
                        STR_19 7F43                __end_of___awmod 1F10                __end_of___ftneg 286E  
              __end_of___lldiv 20A8                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 243E                __end_of___ftsub 2608                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l260 281E                          i2l262 2820  
                        i2l254 2800                          i2l256 280A                          i2l258 2814  
                        i2l274 2538                          i2l371 198A                          i2l628 291C  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF5                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 24EA                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 2306                 WriteUSART@data 0019               __end_of_Lcd_Port 27F6  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 253A  
                 __end_of_main 1DEC      __end_of_Lcd_Write_Integer 26F0    __size_of_Inicializa_Driveby 00C4  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 297A               __end_of_OpenPWM2 2642  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 27CA  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1C0C               __end_of___lbtoft 2892                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 249A  
                       i2l4411 19AA                         i2l4333 225C                         i2l4319 2512  
                       i2l4329 2224                         i2l3823 2816                         i2l3815 2802  
                       i2l3819 280C                         i2l4395 196C                         i2l4399 1980  
                       _INTCON 000FF2             __size_of_ReadUSART 001E            _putcBluetoothString 2306  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F43                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1F10  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 28D2                         ___wmul 2822  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 2124                 _PWM_DutyCycle2 20A8                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 2540                         clear_1 254C  
                       clear_2 2558               ___awdiv@quotient 0025                 sprintf@vd_1430 00A0  
         ?_putcBluetoothString 0020                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 2760          ___ftmul@f3_as_product 0067                   __mediumconst 7ECC  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19E0              __end_of_PWM_init1 290E              __end_of_PWM_init2 28F0  
             __end_of_putcTxU1 2998                      ??_sprintf 008F        __size_of_Comando_Tablet 013E  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 257E  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 29A6                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 21A0         __end_of_PWM_DutyCycle2 2124                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 2956                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2942     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 26F0                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 292C              __end_of_SetDCPWM1 26B6  
            __end_of_SetDCPWM2 267C              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 249A                     __div_to_l_ 16BE                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 23D8                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 25CC                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00CE                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 2728  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
       __size_of_getCNY70Value 00B8                        _CCP1CON 000FBD                        _CCP2CON 000FBA  
         i2Lcd_Set_Cursor@temp 0008    SendBlueToothCommand@command 0023                        ?_fround 006C  
    __size_of_Lcd_Write_String 007A                      ?___ftpack 0019                      ?___lbtoft 0021  
       __end_of_Lcd_Set_Cursor 24EA                      ?___lltoft 0021               putSTRINGU1@total 001D  
     __end_ofi2_Lcd_Set_Cursor 253A                        _BT_Init 1C0C                        _SBUSART 003A  
                   ??_Lcd_Init 001C                   ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019  
           __end_of_UART1_Init 298A                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 2728  
                      _Lcd_Cmd 2892                        _Comando 0033                        _Med_lsb 00D0  
                      _Med_msb 00D2                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1C  
                      __Hparam 0000                     _scale$2455 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1CB2                        ___ftadd 105E                        ___awmod 1E80  
                    ?_putcTxU1 0001                        ___ftneg 2848                        ___lldiv 2026  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 23D8  
                      ___ftsub 25CC                        ___fttol 1436             __end_ofi2_Lcd_Port 2822  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 253A                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5671 00EC                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1D56                        __ptext1 2294  
                      __ptext2 19E8                        __ptext3 1C0C                        __ptext4 292C  
                      __ptext5 1DEC                        __ptext6 298A                        __ptext7 2584  
                      __ptext8 2798                        __ptext9 1580                        _comando 00D8  
                  ?__div_to_l_ 0019                        _countup 00FE                        _dpowers 7ECD  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19E8  
               _Comando_Tablet 1580                        _sprintf 001C                  _getCNY70Value 1AAC  
       __end_of_Lcd_Write_Char 2760                 __pintcode_body 18F4           end_of_initialization 257E  
                  _TramaTablet 0100      __size_of_putcBluetoothInt 0086                        int_func 18F4  
     __end_ofi2_Lcd_Write_Char 2798                ___lldiv@divisor 001D                ___lldiv@counter 0025  
                    _RCSTAbits 000FAB     __end_of_Inicializa_Driveby 1AAC                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      Lcd_Port@a 0019                     ??_putcTxU1 001A  
                   _num_med_hi 0043                 __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C  
                ??__tdiv_to_l_ 001F                      i2_Lcd_Cmd 28B2                      _PORTAbits 000F80  
                    _PORTBbits 000F81                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 16BE   __end_of_SendBlueToothCommand 2942                      _TRISBbits 000F93  
                    _TRISCbits 000F94                 ?_getCNY70Value 0019            __size_of_WriteUSART 0012  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 001D              Lcd_Write_String@i 0021  
                    _PWM_init1 28F0                      _PWM_init2 28D2                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0136                    ___ftmul@exp 0066                      _Lcd_Clear 2998  
               __end_of___ftge 1FA0                 __end_of___wmul 2848               _Lcd_Write_String 21A0  
                   ?i2_Lcd_Cmd 0001                 __end_of_fround 105E            start_initialization 253A  
                    Pause_ms@i 001C                      Pause_ms@x 0019                ?_Comando_Tablet 0001  
                    _ReadUSART 290E                      _SetDCPWM1 267C                      _SetDCPWM2 2642  
              SetDCPWM1@DCycle 001D            __end_of__tdiv_to_l_ 18F4                SetDCPWM2@DCycle 001D  
                    _DutyCycle 00CE              __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C  
                   ?_PWM_init1 0001                     ?_PWM_init2 0001           Comando_Tablet@sensed 0170  
                    _OpenUSART 2370               ??_PWM_DutyCycle1 0082               ??_PWM_DutyCycle2 0082  
                    _Pause_seg 2584                ___llmod@divisor 002A                ___llmod@counter 002E  
  __end_of_putcBluetoothString 2370              __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A  
            __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001                       ??___ftge 001F  
   __end_ofi2_Lcd_Write_String 2294                       ??___wmul 002B                    __pdataBANK0 00EC  
             __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B  
                     ??_fround 0030                 _num_med_medium 0045                     fround@prec 0075  
            __size_of___ftpack 00A8              __size_of___lbtoft 0024              __size_of___lltoft 005C  
                  __pbssCOMRAM 0030                ??_getCNY70Value 001B                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019  
          __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1FA0  
                   ?_OpenUSART 0019                       ?_Lcd_Cmd 0001                    sprintf@_val 00AD  
                  sprintf@flag 00A6               ??_clrBufferUSART 0019                     ?_Pause_seg 0001  
                  sprintf@fval 00B4                    sprintf@prec 00AB                      _cleanBfer 003E  
                 ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 292C  
                    __pintcode 0008                  __pmediumconst 7ECC                       ?___awdiv 001F  
                     ?___ftadd 0076                       ?___awmod 0019                       ?___ftneg 0019  
                     ?___lldiv 0019                       ?___ftmul 0060                       ?___llmod 0026  
                     ?___ftsub 0082                      __npowers_ 7EF5                       ?___fttol 0073  
            putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E  
                  __tdiv_to_l_ 17F4                      _contador2 0040                   ??__div_to_l_ 001F  
    SendBlueToothCommand@total 0025                   _TamanhoTrama 00D4                       ?_sprintf 0088  
               __size_of_scale 0478             __end_of_WriteUSART 2968                    ??_PWM_init1 001A  
                  ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034  
               ___wmul@product 002B              ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 001B                       _PIR1bits 000F9E             __end_of__div_to_l_ 17F4  
                     i2u462_40 2254                       i2u462_47 224A                       i2u463_40 228C  
           ??i2_Lcd_Write_Char 0002                       i2u703_47 277C                       i2u463_47 2282  
                     i2u704_47 278E                       i2u705_47 28C4                       i2u474_40 1986  
        ?_SendBlueToothCommand 0023                  ??i2_Lcd_Clear 0004                    ??_Lcd_Clear 001C  
             __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F                     _ADCON1bits 000FC1  
                  __stringdata 7F43              ___wmul@multiplier 0027                       _CheckSum 0030  
             ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001             _Inicializa_Driveby 19E8  
                  ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 2294                       _Lcd_Port 27CA                      copy_data0 2572  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 221A                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 2968                       _OpenPWM2 2608  
                     _Pause_ms 2798                       __Hrparam 0000                       __Lrparam 0000  
           SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4               __size_of___ftadd 0280  
             __size_of___awmod 0090           ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089  
             PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1B64  
                     ___lbtoft 286E                    _fround$2453 0072                    _fround$2454 006F  
                     ___lltoft 243E            __end_ofi2_Lcd_Clear 29B4                 OpenPWM2@ccp2mx 001B  
        __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1E80                     sprintf@exp 00B2  
               OpenPWM1@period 0019                 OpenPWM2@period 001A                       __ptext10 2306  
                     __ptext11 1FA0                       __ptext20 2968                       __ptext12 2956  
                     __ptext21 20A8                       __ptext13 297A                       __ptext30 2822  
                     __ptext22 2642                       __ptext14 2370                       __ptext31 12DE  
                     __ptext23 2124                       __ptext15 1AAC                       __ptext40 25CC  
                     __ptext32 1E80                       __ptext24 286E                       __ptext16 26F0  
                     __ptext41 105E                       __ptext33 1CB2                       __ptext25 267C  
                     __ptext17 28D2                       __ptext50 27CA                       __ptext42 1B64  
                     __ptext34 17F4                       __ptext26 26B6                       __ptext18 2608  
                     __ptext43 2848                       __ptext35 16BE                       __ptext27 001C  
                     __ptext19 28F0                       __ptext52 221A                       __ptext44 1F10  
                     __ptext36 243E                       __ptext28 0940                       __ptext53 2760  
                     __ptext45 21A0                       __ptext37 23D8                       __ptext29 0DB8  
                     __ptext54 24EA                       __ptext46 2728                       __ptext38 2026  
                     __ptext55 29A6                       __ptext47 249A                       __ptext39 1436  
                     __ptext56 28B2                       __ptext48 2998                       __ptext57 27F6  
                     __ptext49 2892                       __ptext58 290E                       __powers_ 7F1C  
              PWM_init1@period 001A                PWM_init2@period 001C                       _contador 003F  
             __size_of_sprintf 0924                  __size_of_main 0096         ??_SendBlueToothCommand 0027  
                     _putcTxU1 298A                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 2026          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 221A  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 29A6                     _UART1_Init 297A  
                  _putSTRINGU1 1DEC           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
 __size_of_putcBluetoothString 006A                   ?__tdiv_to_l_ 0019                    _num_med_low 0044  
                     sprintf@c 00B7                       sprintf@f 008A               ___lldiv@quotient 0021  
           Lcd_Write_Integer@a 00B8             Lcd_Write_Integer@s 00BA          __end_of_getCNY70Value 1B64  
                   i2_Lcd_Port 27F6                   _USART_Status 003C                     _TMRO_USART 0008  
