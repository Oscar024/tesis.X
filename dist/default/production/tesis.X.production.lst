

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jun 07 01:25:01 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           	psect	idataBANK0
    78  00286E                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for BT_Init@F5669
    82  00286E  41                 	db	65
    83  00286F  54                 	db	84
    84  002870  2B                 	db	43
    85  002871  4E                 	db	78
    86  002872  41                 	db	65
    87  002873  4D                 	db	77
    88  002874  45                 	db	69
    89  002875  3D                 	db	61
    90  002876  72                 	db	114
    91  002877  6F                 	db	111
    92  002878  62                 	db	98
    93  002879  6F                 	db	111
    94  00287A  74                 	db	116
    95  00287B  0D                 	db	13
    96  00287C  0A                 	db	10
    97  00287D  00                 	db	0
    98  00287E  00                 	db	0
    99  00287F  00                 	db	0
   100                           
   101                           ;initializer for _countup
   102  002880  0001               	dw	1
   103                           
   104                           	psect	mediumconst
   105  007ECA                     __pmediumconst:
   106                           	opt stack 0
   107  007ECA  00                 	db	0
   108  007ECB                     _dpowers:
   109                           	opt stack 0
   110  007ECB  0001               	dw	1
   111  007ECD  0000               	dw	0
   112  007ECF  000A               	dw	10
   113  007ED1  0000               	dw	0
   114  007ED3  0064               	dw	100
   115  007ED5  0000               	dw	0
   116  007ED7  03E8               	dw	1000
   117  007ED9  0000               	dw	0
   118  007EDB  2710               	dw	10000
   119  007EDD  0000               	dw	0
   120  007EDF  86A0               	dw	34464
   121  007EE1  0001               	dw	1
   122  007EE3  4240               	dw	16960
   123  007EE5  000F               	dw	15
   124  007EE7  9680               	dw	38528
   125  007EE9  0098               	dw	152
   126  007EEB  E100               	dw	57600
   127  007EED  05F5               	dw	1525
   128  007EEF  CA00               	dw	51712
   129  007EF1  3B9A               	dw	15258
   130  007EF3                     __end_of_dpowers:
   131                           	opt stack 0
   132  007EF3                     __npowers_:
   133                           	opt stack 0
   134  007EF3  00                 	db	0
   135  007EF4  80                 	db	128
   136  007EF5  3F                 	db	63
   137  007EF6  CD                 	db	205
   138  007EF7  CC                 	db	204
   139  007EF8  3D                 	db	61
   140  007EF9  D7                 	db	215
   141  007EFA  23                 	db	35
   142  007EFB  3C                 	db	60
   143  007EFC  12                 	db	18
   144  007EFD  83                 	db	131
   145  007EFE  3A                 	db	58
   146  007EFF  B7                 	db	183
   147  007F00  D1                 	db	209
   148  007F01  38                 	db	56
   149  007F02  C6                 	db	198
   150  007F03  27                 	db	39
   151  007F04  37                 	db	55
   152  007F05  38                 	db	56
   153  007F06  86                 	db	134
   154  007F07  35                 	db	53
   155  007F08  C0                 	db	192
   156  007F09  D6                 	db	214
   157  007F0A  33                 	db	51
   158  007F0B  CC                 	db	204
   159  007F0C  2B                 	db	43
   160  007F0D  32                 	db	50
   161  007F0E  70                 	db	112
   162  007F0F  89                 	db	137
   163  007F10  30                 	db	48
   164  007F11  E7                 	db	231
   165  007F12  DB                 	db	219
   166  007F13  2E                 	db	46
   167  007F14  E5                 	db	229
   168  007F15  3C                 	db	60
   169  007F16  1E                 	db	30
   170  007F17  42                 	db	66
   171  007F18  A2                 	db	162
   172  007F19  0D                 	db	13
   173  007F1A                     __end_of__npowers_:
   174                           	opt stack 0
   175  007F1A                     __powers_:
   176                           	opt stack 0
   177  007F1A  00                 	db	0
   178  007F1B  80                 	db	128
   179  007F1C  3F                 	db	63
   180  007F1D  00                 	db	0
   181  007F1E  20                 	db	32
   182  007F1F  41                 	db	65
   183  007F20  00                 	db	0
   184  007F21  C8                 	db	200
   185  007F22  42                 	db	66
   186  007F23  00                 	db	0
   187  007F24  7A                 	db	122
   188  007F25  44                 	db	68
   189  007F26  40                 	db	64
   190  007F27  1C                 	db	28
   191  007F28  46                 	db	70
   192  007F29  50                 	db	80
   193  007F2A  C3                 	db	195
   194  007F2B  47                 	db	71
   195  007F2C  24                 	db	36
   196  007F2D  74                 	db	116
   197  007F2E  49                 	db	73
   198  007F2F  97                 	db	151
   199  007F30  18                 	db	24
   200  007F31  4B                 	db	75
   201  007F32  BC                 	db	188
   202  007F33  BE                 	db	190
   203  007F34  4C                 	db	76
   204  007F35  6B                 	db	107
   205  007F36  6E                 	db	110
   206  007F37  4E                 	db	78
   207  007F38  03                 	db	3
   208  007F39  15                 	db	21
   209  007F3A  50                 	db	80
   210  007F3B  79                 	db	121
   211  007F3C  AD                 	db	173
   212  007F3D  60                 	db	96
   213  007F3E  F3                 	db	243
   214  007F3F  49                 	db	73
   215  007F40  71                 	db	113
   216  007F41                     __end_of__powers_:
   217                           	opt stack 0
   218  0000                     _ADCON1bits	set	4033
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCP2CON	set	4026
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CCPR2L	set	4027
   223  0000                     _INTCON	set	4082
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _PIE1	set	3997
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PORTA	set	3968
   229  0000                     _PORTB	set	3969
   230  0000                     _PORTDbits	set	3971
   231  0000                     _PORTE	set	3972
   232  0000                     _PORTEbits	set	3972
   233  0000                     _PR2	set	4043
   234  0000                     _RCREG	set	4014
   235  0000                     _RCSTA	set	4011
   236  0000                     _RCSTAbits	set	4011
   237  0000                     _SPBRG	set	4015
   238  0000                     _SPBRGH	set	4016
   239  0000                     _T2CON	set	4042
   240  0000                     _T2CONbits	set	4042
   241  0000                     _TMR2	set	4044
   242  0000                     _TRISA	set	3986
   243  0000                     _TRISB	set	3987
   244  0000                     _TRISBbits	set	3987
   245  0000                     _TRISC	set	3988
   246  0000                     _TRISCbits	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _TXREG	set	4013
   250  0000                     _TXSTA	set	4012
   251  0000                     _TXSTAbits	set	4012
   252  007F41                     __stringdata:
   253                           	opt stack 0
   254  007F41                     STR_20:
   255  007F41  49                 	db	73	;'I'
   256  007F42  6E                 	db	110	;'n'
   257  007F43  74                 	db	116	;'t'
   258  007F44  65                 	db	101	;'e'
   259  007F45  72                 	db	114	;'r'
   260  007F46  72                 	db	114	;'r'
   261  007F47  75                 	db	117	;'u'
   262  007F48  70                 	db	112	;'p'
   263  007F49  74                 	db	116	;'t'
   264  007F4A  69                 	db	105	;'i'
   265  007F4B  6F                 	db	111	;'o'
   266  007F4C  6E                 	db	110	;'n'
   267  007F4D  20                 	db	32
   268  007F4E  54                 	db	84	;'T'
   269  007F4F  4D                 	db	77	;'M'
   270  007F50  52                 	db	82	;'R'
   271  007F51  32                 	db	50	;'2'
   272  007F52  00                 	db	0
   273  007F53                     STR_11:
   274  007F53  42                 	db	66	;'B'
   275  007F54  54                 	db	84	;'T'
   276  007F55  20                 	db	32
   277  007F56  49                 	db	73	;'I'
   278  007F57  4E                 	db	78	;'N'
   279  007F58  49                 	db	73	;'I'
   280  007F59  43                 	db	67	;'C'
   281  007F5A  49                 	db	73	;'I'
   282  007F5B  41                 	db	65	;'A'
   283  007F5C  4C                 	db	76	;'L'
   284  007F5D  49                 	db	73	;'I'
   285  007F5E  5A                 	db	90	;'Z'
   286  007F5F  41                 	db	65	;'A'
   287  007F60  44                 	db	68	;'D'
   288  007F61  4F                 	db	79	;'O'
   289  007F62  00                 	db	0
   290  007F63                     STR_2:
   291  007F63  41                 	db	65	;'A'
   292  007F64  54                 	db	84	;'T'
   293  007F65  2B                 	db	43
   294  007F66  50                 	db	80	;'P'
   295  007F67  53                 	db	83	;'S'
   296  007F68  57                 	db	87	;'W'
   297  007F69  44                 	db	68	;'D'
   298  007F6A  3D                 	db	61	;'='
   299  007F6B  30                 	db	48	;'0'
   300  007F6C  30                 	db	48	;'0'
   301  007F6D  30                 	db	48	;'0'
   302  007F6E  30                 	db	48	;'0'
   303  007F6F  0D                 	db	13
   304  007F70  0A                 	db	10
   305  007F71  00                 	db	0
   306  007F72  0A                 	db	10
   307  007F73  2B                 	db	43
   308  007F74  42                 	db	66	;'B'
   309  007F75  54                 	db	84	;'T'
   310  007F76  53                 	db	83	;'S'
   311  007F77  54                 	db	84	;'T'
   312  007F78  41                 	db	65	;'A'
   313  007F79  54                 	db	84	;'T'
   314  007F7A  45                 	db	69	;'E'
   315  007F7B  3A                 	db	58	;':'
   316  007F7C  31                 	db	49	;'1'
   317  007F7D  0D                 	db	13
   318  007F7E  0A                 	db	10
   319  007F7F  00                 	db	0
   320  007F80  0A                 	db	10
   321  007F81  2B                 	db	43
   322  007F82  42                 	db	66	;'B'
   323  007F83  54                 	db	84	;'T'
   324  007F84  53                 	db	83	;'S'
   325  007F85  54                 	db	84	;'T'
   326  007F86  41                 	db	65	;'A'
   327  007F87  54                 	db	84	;'T'
   328  007F88  45                 	db	69	;'E'
   329  007F89  3A                 	db	58	;':'
   330  007F8A  33                 	db	51	;'3'
   331  007F8B  0D                 	db	13
   332  007F8C  0A                 	db	10
   333  007F8D  00                 	db	0
   334  007F8E  0A                 	db	10
   335  007F8F  2B                 	db	43
   336  007F90  42                 	db	66	;'B'
   337  007F91  54                 	db	84	;'T'
   338  007F92  53                 	db	83	;'S'
   339  007F93  54                 	db	84	;'T'
   340  007F94  41                 	db	65	;'A'
   341  007F95  54                 	db	84	;'T'
   342  007F96  45                 	db	69	;'E'
   343  007F97  3A                 	db	58	;':'
   344  007F98  34                 	db	52	;'4'
   345  007F99  0D                 	db	13
   346  007F9A  0A                 	db	10
   347  007F9B  00                 	db	0
   348  007F9C  0A                 	db	10
   349  007F9D  43                 	db	67	;'C'
   350  007F9E  4F                 	db	79	;'O'
   351  007F9F  4E                 	db	78	;'N'
   352  007FA0  4E                 	db	78	;'N'
   353  007FA1  45                 	db	69	;'E'
   354  007FA2  43                 	db	67	;'C'
   355  007FA3  54                 	db	84	;'T'
   356  007FA4  3A                 	db	58	;':'
   357  007FA5  4F                 	db	79	;'O'
   358  007FA6  4B                 	db	75	;'K'
   359  007FA7  0D                 	db	13
   360  007FA8  0A                 	db	10
   361  007FA9  00                 	db	0
   362  007FAA                     STR_19:
   363  007FAA  49                 	db	73	;'I'
   364  007FAB  6E                 	db	110	;'n'
   365  007FAC  74                 	db	116	;'t'
   366  007FAD  65                 	db	101	;'e'
   367  007FAE  67                 	db	103	;'g'
   368  007FAF  65                 	db	101	;'e'
   369  007FB0  72                 	db	114	;'r'
   370  007FB1  20                 	db	32
   371  007FB2  3D                 	db	61	;'='
   372  007FB3  20                 	db	32
   373  007FB4  25                 	db	37
   374  007FB5  64                 	db	100	;'d'
   375  007FB6  00                 	db	0
   376  007FB7                     STR_1:
   377  007FB7  41                 	db	65	;'A'
   378  007FB8  54                 	db	84	;'T'
   379  007FB9  2B                 	db	43
   380  007FBA  52                 	db	82	;'R'
   381  007FBB  4F                 	db	79	;'O'
   382  007FBC  4C                 	db	76	;'L'
   383  007FBD  45                 	db	69	;'E'
   384  007FBE  3D                 	db	61	;'='
   385  007FBF  30                 	db	48	;'0'
   386  007FC0  0D                 	db	13
   387  007FC1  0A                 	db	10
   388  007FC2  00                 	db	0
   389  007FC3                     STR_22:
   390  007FC3  43                 	db	67	;'C'
   391  007FC4  4D                 	db	77	;'M'
   392  007FC5  44                 	db	68	;'D'
   393  007FC6  20                 	db	32
   394  007FC7  54                 	db	84	;'T'
   395  007FC8  41                 	db	65	;'A'
   396  007FC9  42                 	db	66	;'B'
   397  007FCA  4C                 	db	76	;'L'
   398  007FCB  45                 	db	69	;'E'
   399  007FCC  54                 	db	84	;'T'
   400  007FCD  00                 	db	0
   401  007FCE  46                 	db	70	;'F'
   402  007FCF  6C                 	db	108	;'l'
   403  007FD0  6F                 	db	111	;'o'
   404  007FD1  61                 	db	97	;'a'
   405  007FD2  74                 	db	116	;'t'
   406  007FD3  20                 	db	32
   407  007FD4  3D                 	db	61	;'='
   408  007FD5  20                 	db	32
   409  007FD6  25                 	db	37
   410  007FD7  66                 	db	102	;'f'
   411  007FD8  00                 	db	0
   412  007FD9                     STR_3:
   413  007FD9  41                 	db	65	;'A'
   414  007FDA  54                 	db	84	;'T'
   415  007FDB  2B                 	db	43
   416  007FDC  49                 	db	73	;'I'
   417  007FDD  4E                 	db	78	;'N'
   418  007FDE  51                 	db	81	;'Q'
   419  007FDF  0D                 	db	13
   420  007FE0  0A                 	db	10
   421  007FE1  00                 	db	0
   422  007FE2                     STR_17:
   423  007FE2  44                 	db	68	;'D'
   424  007FE3  65                 	db	101	;'e'
   425  007FE4  66                 	db	102	;'f'
   426  007FE5  61                 	db	97	;'a'
   427  007FE6  75                 	db	117	;'u'
   428  007FE7  6C                 	db	108	;'l'
   429  007FE8  74                 	db	116	;'t'
   430  007FE9  00                 	db	0
   431  007FEA                     STR_21:
   432  007FEA  49                 	db	73	;'I'
   433  007FEB  6E                 	db	110	;'n'
   434  007FEC  69                 	db	105	;'i'
   435  007FED  63                 	db	99	;'c'
   436  007FEE  69                 	db	105	;'i'
   437  007FEF  6F                 	db	111	;'o'
   438  007FF0  00                 	db	0
   439  007FF1                     STR_10:
   440  007FF1  49                 	db	73	;'I'
   441  007FF2  4E                 	db	78	;'N'
   442  007FF3  49                 	db	73	;'I'
   443  007FF4  43                 	db	67	;'C'
   444  007FF5  49                 	db	73	;'I'
   445  007FF6  4F                 	db	79	;'O'
   446  007FF7  00                 	db	0
   447  007FF8                     STR_12:
   448  007FF8  31                 	db	49	;'1'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_14:
   451  007FFA  33                 	db	51	;'3'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_15:
   454  007FFC  34                 	db	52	;'4'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  002466                     __pcinit:
   464                           	opt stack 0
   465  002466                     start_initialization:
   466                           	opt stack 0
   467  002466                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  002466  EE01  F000         	lfsr	0,__pbssBANK1
   472  00246A  0E5A               	movlw	90
   473  00246C                     clear_0:
   474  00246C  6AEE               	clrf	postinc0,c
   475  00246E  06E8               	decf	wreg,f,c
   476  002470  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (32 bytes)
   479  002472  EE00  F0BA         	lfsr	0,__pbssBANK0
   480  002476  0E20               	movlw	32
   481  002478                     clear_1:
   482  002478  6AEE               	clrf	postinc0,c
   483  00247A  06E8               	decf	wreg,f,c
   484  00247C  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  00247E  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  002482  0E18               	movlw	24
   489  002484                     clear_2:
   490  002484  6AEE               	clrf	postinc0,c
   491  002486  06E8               	decf	wreg,f,c
   492  002488  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  00248A  0E6E               	movlw	low __pidataBANK0
   497  00248C  6EF6               	movwf	tblptrl,c
   498  00248E  0E28               	movlw	high __pidataBANK0
   499  002490  6EF7               	movwf	tblptrh,c
   500  002492  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  002494  6EF8               	movwf	tblptru,c
   502  002496  EE00  F0DA         	lfsr	0,__pdataBANK0
   503  00249A  EE10 F014          	lfsr	1,20
   504  00249E                     copy_data0:
   505  00249E  0009               	tblrd		*+
   506  0024A0  CFF5 FFEE          	movff	tablat,postinc0
   507  0024A4  50E5               	movf	postdec1,w,c
   508  0024A6  50E1               	movf	fsr1l,w,c
   509  0024A8  E1FA               	bnz	copy_data0
   510  0024AA                     end_of_initialization:
   511                           	opt stack 0
   512  0024AA                     __end_of__initialization:
   513                           	opt stack 0
   514  0024AA  0100               	movlb	0
   515  0024AC  EF41  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000BA                     __pbssBANK0:
   611                           	opt stack 0
   612  0000BA                     _DutyCycle:
   613                           	opt stack 0
   614  0000BA                     	ds	2
   615  0000BC                     _Med_lsb:
   616                           	opt stack 0
   617  0000BC                     	ds	2
   618  0000BE                     _Med_msb:
   619                           	opt stack 0
   620  0000BE                     	ds	2
   621  0000C0                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000C0                     	ds	2
   624  0000C2                     _contadorbt:
   625                           	opt stack 0
   626  0000C2                     	ds	2
   627  0000C4                     _i:
   628                           	opt stack 0
   629  0000C4                     	ds	2
   630  0000C6                     _comando:
   631                           	opt stack 0
   632  0000C6                     	ds	20
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           
   642                           	psect	dataBANK0
   643  0000DA                     __pdataBANK0:
   644                           	opt stack 0
   645  0000DA                     BT_Init@F5669:
   646                           	opt stack 0
   647  0000DA                     	ds	18
   648  0000EC                     _countup:
   649                           	opt stack 0
   650  0000EC                     	ds	2
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	bssBANK1
   661  000100                     __pbssBANK1:
   662                           	opt stack 0
   663  000100                     _TramaTablet:
   664                           	opt stack 0
   665  000100                     	ds	20
   666  000114                     _array:
   667                           	opt stack 0
   668  000114                     	ds	20
   669  000128                     _BluetoothDato:
   670                           	opt stack 0
   671  000128                     	ds	50
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1l	equ	0xFE1
   680                           
   681                           	psect	cstackBANK1
   682  00015A                     __pcstackBANK1:
   683                           	opt stack 0
   684  00015A                     putcBluetoothInt@s:
   685                           	opt stack 0
   686  00015A                     Lcd_Write_Integer@s:
   687                           	opt stack 0
   688                           
   689                           ; 20 bytes @ 0x0
   690  00015A                     	ds	20
   691  00016E                     putcBluetoothInt@i:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x14
   695  00016E                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2288:
   750                           	opt stack 0
   751  00006F                     _scale$2289:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2287:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2290:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1239:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1241:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	cstackCOMRAM
   944  000001                     __pcstackCOMRAM:
   945                           	opt stack 0
   946  000001                     ReadUSART@data:
   947                           	opt stack 0
   948  000001                     i2Lcd_Port@a:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x0
   952  000001                     	ds	1
   953  000002                     ??i2_Lcd_Cmd:
   954  000002                     i2Lcd_Write_Char@temp:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x1
   958  000002                     	ds	1
   959  000003                     i2Lcd_Cmd@a:
   960                           	opt stack 0
   961  000003                     i2Lcd_Write_Char@y:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x2
   965  000003                     	ds	1
   966  000004                     i2Lcd_Set_Cursor@b:
   967                           	opt stack 0
   968  000004                     i2Lcd_Write_Char@a:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x3
   972  000004                     	ds	1
   973  000005                     i2Lcd_Set_Cursor@a:
   974                           	opt stack 0
   975  000005                     i2Lcd_Write_String@a:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x4
   979  000005                     	ds	1
   980  000006                     i2Lcd_Set_Cursor@z:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x5
   984  000006                     	ds	1
   985  000007                     ??i2_Lcd_Write_String:
   986  000007                     i2Lcd_Set_Cursor@y:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6
   990  000007                     	ds	1
   991  000008                     i2Lcd_Set_Cursor@temp:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x7
   995  000008                     	ds	1
   996  000009                     i2Lcd_Write_String@i:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x8
  1000  000009                     	ds	2
  1001  00000B                     ??_TMRO_USART:
  1002                           
  1003                           ; 0 bytes @ 0xA
  1004  00000B                     	ds	14
  1005  000019                     ??_OpenPWM2:
  1006  000019                     ?___awmod:
  1007                           	opt stack 0
  1008  000019                     ?___ftpack:
  1009                           	opt stack 0
  1010  000019                     ?___ftneg:
  1011                           	opt stack 0
  1012  000019                     ?__tdiv_to_l_:
  1013                           	opt stack 0
  1014  000019                     ?__div_to_l_:
  1015                           	opt stack 0
  1016  000019                     ?___lldiv:
  1017                           	opt stack 0
  1018  000019                     Lcd_Port@a:
  1019                           	opt stack 0
  1020  000019                     OpenPWM1@period:
  1021                           	opt stack 0
  1022  000019                     WriteUSART@data:
  1023                           	opt stack 0
  1024  000019                     clrBufferUSART@i:
  1025                           	opt stack 0
  1026  000019                     Pause_ms@x:
  1027                           	opt stack 0
  1028  000019                     SetDCPWM1@dutycycle:
  1029                           	opt stack 0
  1030  000019                     SetDCPWM2@dutycycle:
  1031                           	opt stack 0
  1032  000019                     OpenUSART@spbrg:
  1033                           	opt stack 0
  1034  000019                     ___awmod@dividend:
  1035                           	opt stack 0
  1036  000019                     __div_to_l_@f1:
  1037                           	opt stack 0
  1038  000019                     ___ftpack@arg:
  1039                           	opt stack 0
  1040  000019                     __tdiv_to_l_@f1:
  1041                           	opt stack 0
  1042  000019                     ___ftge@ff1:
  1043                           	opt stack 0
  1044  000019                     ___ftneg@f1:
  1045                           	opt stack 0
  1046  000019                     ___lldiv@dividend:
  1047                           	opt stack 0
  1048                           
  1049                           ; 4 bytes @ 0x18
  1050  000019                     	ds	1
  1051  00001A                     ??_Lcd_Cmd:
  1052  00001A                     putcTxU1@character:
  1053                           	opt stack 0
  1054  00001A                     Lcd_Write_Char@temp:
  1055                           	opt stack 0
  1056  00001A                     PWM_init1@period:
  1057                           	opt stack 0
  1058  00001A                     OpenPWM2@period:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x19
  1062  00001A                     	ds	1
  1063  00001B                     ??_OpenUSART:
  1064  00001B                     ??_SetDCPWM1:
  1065  00001B                     ??_SetDCPWM2:
  1066  00001B                     ??_Pause_ms:
  1067  00001B                     Lcd_Cmd@a:
  1068                           	opt stack 0
  1069  00001B                     Lcd_Write_Char@y:
  1070                           	opt stack 0
  1071  00001B                     OpenPWM2@ccp2mx:
  1072                           	opt stack 0
  1073  00001B                     putSTRINGU1@dato:
  1074                           	opt stack 0
  1075  00001B                     ___awmod@divisor:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x1A
  1079  00001B                     	ds	1
  1080  00001C                     ??_Lcd_Init:
  1081  00001C                     Lcd_Set_Cursor@b:
  1082                           	opt stack 0
  1083  00001C                     Lcd_Write_Char@a:
  1084                           	opt stack 0
  1085  00001C                     PWM_init2@period:
  1086                           	opt stack 0
  1087  00001C                     ___ftpack@exp:
  1088                           	opt stack 0
  1089  00001C                     Pause_ms@i:
  1090                           	opt stack 0
  1091  00001C                     __div_to_l_@f2:
  1092                           	opt stack 0
  1093  00001C                     __tdiv_to_l_@f2:
  1094                           	opt stack 0
  1095  00001C                     ___ftge@ff2:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x1B
  1099  00001C                     	ds	1
  1100  00001D                     Lcd_Set_Cursor@a:
  1101                           	opt stack 0
  1102  00001D                     ___awmod@counter:
  1103                           	opt stack 0
  1104  00001D                     ___ftpack@sign:
  1105                           	opt stack 0
  1106  00001D                     putSTRINGU1@total:
  1107                           	opt stack 0
  1108  00001D                     Lcd_Write_String@a:
  1109                           	opt stack 0
  1110  00001D                     SetDCPWM1@DCycle:
  1111                           	opt stack 0
  1112  00001D                     SetDCPWM2@DCycle:
  1113                           	opt stack 0
  1114  00001D                     ___lldiv@divisor:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x1C
  1118  00001D                     	ds	1
  1119  00001E                     ??___ftpack:
  1120  00001E                     Pause_seg@x:
  1121                           	opt stack 0
  1122  00001E                     Lcd_Set_Cursor@z:
  1123                           	opt stack 0
  1124  00001E                     OpenUSART@config:
  1125                           	opt stack 0
  1126  00001E                     ___awmod@sign:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x1D
  1130  00001E                     	ds	1
  1131  00001F                     ??_putSTRINGU1:
  1132  00001F                     ??_Lcd_Write_String:
  1133  00001F                     ??__tdiv_to_l_:
  1134  00001F                     ??__div_to_l_:
  1135  00001F                     ??___ftge:
  1136  00001F                     ?___awdiv:
  1137                           	opt stack 0
  1138  00001F                     Pause_seg@i:
  1139                           	opt stack 0
  1140  00001F                     UART1_Init@bdr:
  1141                           	opt stack 0
  1142  00001F                     Lcd_Set_Cursor@y:
  1143                           	opt stack 0
  1144  00001F                     ___awdiv@dividend:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x1E
  1148  00001F                     	ds	1
  1149  000020                     Lcd_Set_Cursor@temp:
  1150                           	opt stack 0
  1151  000020                     putcBluetoothString@a:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1F
  1155  000020                     	ds	1
  1156  000021                     ?___lbtoft:
  1157                           	opt stack 0
  1158  000021                     ?___lltoft:
  1159                           	opt stack 0
  1160  000021                     putSTRINGU1@last:
  1161                           	opt stack 0
  1162  000021                     Lcd_Write_String@i:
  1163                           	opt stack 0
  1164  000021                     ___awdiv@divisor:
  1165                           	opt stack 0
  1166  000021                     ___lldiv@quotient:
  1167                           	opt stack 0
  1168  000021                     ___lltoft@c:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x20
  1172  000021                     	ds	1
  1173  000022                     ??_putcBluetoothString:
  1174  000022                     putSTRINGU1@cont:
  1175                           	opt stack 0
  1176  000022                     __tdiv_to_l_@quot:
  1177                           	opt stack 0
  1178                           
  1179                           ; 4 bytes @ 0x21
  1180  000022                     	ds	1
  1181  000023                     ___awdiv@counter:
  1182                           	opt stack 0
  1183  000023                     SendBlueToothCommand@command:
  1184                           	opt stack 0
  1185  000023                     __div_to_l_@quot:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x22
  1189  000023                     	ds	1
  1190  000024                     ___awdiv@sign:
  1191                           	opt stack 0
  1192  000024                     ___lbtoft@c:
  1193                           	opt stack 0
  1194  000024                     putcBluetoothString@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x23
  1198  000024                     	ds	1
  1199  000025                     ??___lltoft:
  1200  000025                     ___lldiv@counter:
  1201                           	opt stack 0
  1202  000025                     SendBlueToothCommand@total:
  1203                           	opt stack 0
  1204  000025                     ___awdiv@quotient:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x24
  1208  000025                     	ds	1
  1209  000026                     ?___llmod:
  1210                           	opt stack 0
  1211  000026                     __tdiv_to_l_@cntr:
  1212                           	opt stack 0
  1213  000026                     ___llmod@dividend:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x25
  1217  000026                     	ds	1
  1218  000027                     ??_Inicializa_Driveby:
  1219  000027                     ?___wmul:
  1220                           	opt stack 0
  1221  000027                     __div_to_l_@cntr:
  1222                           	opt stack 0
  1223  000027                     __tdiv_to_l_@exp1:
  1224                           	opt stack 0
  1225  000027                     ___wmul@multiplier:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x26
  1229  000027                     	ds	1
  1230  000028                     __div_to_l_@exp1:
  1231                           	opt stack 0
  1232  000028                     Inicializa_Driveby@i:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x27
  1236  000028                     	ds	1
  1237  000029                     ___lltoft@exp:
  1238                           	opt stack 0
  1239  000029                     ___wmul@multiplicand:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x28
  1243  000029                     	ds	1
  1244  00002A                     ___llmod@divisor:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x29
  1248  00002A                     	ds	1
  1249  00002B                     ___wmul@product:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x2A
  1253  00002B                     	ds	2
  1254  00002D                     ??___ftmul:
  1255                           
  1256                           ; 0 bytes @ 0x2C
  1257  00002D                     	ds	1
  1258  00002E                     ___llmod@counter:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x2D
  1262  00002E                     	ds	2
  1263  000030                     tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           postdec1	equ	0xFE5
  1270                           fsr1l	equ	0xFE1
  1271                           
  1272                           ; 0 bytes @ 0x2F
  1273 ;;
  1274 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1275 ;;
  1276 ;; *************** function _main *****************
  1277 ;; Defined at:
  1278 ;;		line 121 in file "robot.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2  366[COMRAM] int 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels required when called:   10
  1298 ;; This function calls:
  1299 ;;		_Comando_Tablet
  1300 ;;		_Inicializa_Driveby
  1301 ;;		_Lcd_Clear
  1302 ;;		_Lcd_Init
  1303 ;;		_Lcd_Set_Cursor
  1304 ;;		_Lcd_Write_String
  1305 ;;		_UART1_Init
  1306 ;;		_clrBufferUSART
  1307 ;; This function is called by:
  1308 ;;		Startup code after reset
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text0
  1313  001C82                     __ptext0:
  1314                           	opt stack 0
  1315  001C82                     _main:
  1316                           	opt stack 21
  1317                           
  1318                           ;robot.c: 123: INTCON =0X00;
  1319                           
  1320                           ;incstack = 0
  1321  001C82  0E00               	movlw	0
  1322  001C84  6EF2               	movwf	intcon,c	;volatile
  1323                           
  1324                           ;robot.c: 124: TRISD = 0x00;
  1325  001C86  0E00               	movlw	0
  1326  001C88  6E95               	movwf	3989,c	;volatile
  1327                           
  1328                           ;robot.c: 125: TRISE = 0x00;
  1329  001C8A  0E00               	movlw	0
  1330  001C8C  6E96               	movwf	3990,c	;volatile
  1331                           
  1332                           ;robot.c: 126: PORTEbits.RE1=0;
  1333  001C8E  9284               	bcf	3972,1,c	;volatile
  1334                           
  1335                           ;robot.c: 127: ADCON1bits.PCFG=0b1111;
  1336  001C90  80C1               	bsf	4033,0,c	;volatile
  1337  001C92  82C1               	bsf	4033,1,c	;volatile
  1338  001C94  84C1               	bsf	4033,2,c	;volatile
  1339  001C96  86C1               	bsf	4033,3,c	;volatile
  1340                           
  1341                           ;robot.c: 128: Lcd_Init();
  1342  001C98  ECE0  F010         	call	_Lcd_Init	;wreg free
  1343                           
  1344                           ;robot.c: 129: Lcd_Clear();
  1345  001C9C  EC62  F014         	call	_Lcd_Clear	;wreg free
  1346                           
  1347                           ;robot.c: 130: Lcd_Set_Cursor(1,1);
  1348  001CA0  0E01               	movlw	1
  1349  001CA2  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1350  001CA4  0E01               	movlw	1
  1351  001CA6  ECE3  F011         	call	_Lcd_Set_Cursor
  1352                           
  1353                           ;robot.c: 131: Lcd_Write_String("Inicio");
  1354  001CAA  0E7F               	movlw	high STR_21
  1355  001CAC  6E1E               	movwf	Lcd_Write_String@a+1,c
  1356  001CAE  0EEA               	movlw	low STR_21
  1357  001CB0  6E1D               	movwf	Lcd_Write_String@a,c
  1358  001CB2  EC66  F010         	call	_Lcd_Write_String	;wreg free
  1359                           
  1360                           ;robot.c: 132: Inicializa_Driveby();
  1361  001CB6  ECEB  F00C         	call	_Inicializa_Driveby	;wreg free
  1362  001CBA                     l5436:
  1363                           
  1364                           ;robot.c: 136: {
  1365                           ;robot.c: 139: if (cleanBfer == 1) {
  1366  001CBA  043E               	decf	_cleanBfer,w,c
  1367  001CBC  A4D8               	btfss	status,2,c
  1368  001CBE  D004               	goto	l5442
  1369                           
  1370                           ;robot.c: 140: clrBufferUSART();
  1371  001CC0  EC0E  F013         	call	_clrBufferUSART	;wreg free
  1372                           
  1373                           ;robot.c: 141: cleanBfer = 0;
  1374  001CC4  0E00               	movlw	0
  1375  001CC6  6E3E               	movwf	_cleanBfer,c
  1376  001CC8                     l5442:
  1377                           
  1378                           ;robot.c: 142: }
  1379                           ;robot.c: 143: if (FinComandT == 1) {
  1380  001CC8  0437               	decf	_FinComandT,w,c
  1381  001CCA  A4D8               	btfss	status,2,c
  1382  001CCC  D01A               	goto	l5462
  1383                           
  1384                           ;robot.c: 144: Lcd_Clear();
  1385  001CCE  EC62  F014         	call	_Lcd_Clear	;wreg free
  1386                           
  1387                           ;robot.c: 145: Lcd_Set_Cursor(2,1);
  1388  001CD2  0E01               	movlw	1
  1389  001CD4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1390  001CD6  0E02               	movlw	2
  1391  001CD8  ECE3  F011         	call	_Lcd_Set_Cursor
  1392                           
  1393                           ;robot.c: 146: Lcd_Write_String("CMD TABLET");
  1394  001CDC  0E7F               	movlw	high STR_22
  1395  001CDE  6E1E               	movwf	Lcd_Write_String@a+1,c
  1396  001CE0  0EC3               	movlw	low STR_22
  1397  001CE2  6E1D               	movwf	Lcd_Write_String@a,c
  1398  001CE4  EC66  F010         	call	_Lcd_Write_String	;wreg free
  1399                           
  1400                           ;robot.c: 147: FinComandT = 0;
  1401  001CE8  0E00               	movlw	0
  1402  001CEA  6E37               	movwf	_FinComandT,c
  1403                           
  1404                           ;robot.c: 148: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1405  001CEC  0E4F               	movlw	79
  1406  001CEE  16AB               	andwf	4011,f,c	;volatile
  1407  001CF0  9AAC               	bcf	4012,5,c	;volatile
  1408  001CF2  0ECF               	movlw	207
  1409  001CF4  169D               	andwf	3997,f,c	;volatile
  1410                           
  1411                           ;robot.c: 149: Comando_Tablet();
  1412  001CF6  EC5B  F00B         	call	_Comando_Tablet	;wreg free
  1413                           
  1414                           ;robot.c: 150: UART1_Init(51);
  1415  001CFA  0E33               	movlw	51
  1416  001CFC  EC53  F014         	call	_UART1_Init
  1417                           
  1418                           ;robot.c: 152: }
  1419  001D00  D7DC               	goto	l5436
  1420  001D02                     l5462:
  1421                           
  1422                           ;robot.c: 153: else if (FinComandB == 1) {
  1423  001D02  0436               	decf	_FinComandB,w,c
  1424  001D04  A4D8               	btfss	status,2,c
  1425  001D06  D7D9               	goto	l5436
  1426                           
  1427                           ;robot.c: 158: FinComandB = 0;
  1428  001D08  0E00               	movlw	0
  1429  001D0A  6E36               	movwf	_FinComandB,c
  1430                           
  1431                           ;robot.c: 159: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1432  001D0C  0E4F               	movlw	79
  1433  001D0E  16AB               	andwf	4011,f,c	;volatile
  1434  001D10  9AAC               	bcf	4012,5,c	;volatile
  1435  001D12  0ECF               	movlw	207
  1436  001D14  169D               	andwf	3997,f,c	;volatile
  1437  001D16  D7D1               	goto	l5436
  1438  001D18                     __end_of_main:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           intcon	equ	0xFF2
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1l	equ	0xFE1
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _Lcd_Init *****************
  1452 ;; Defined at:
  1453 ;;		line 57 in file "lcd.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1467 ;;      Params:         0       0       0       0       0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1469 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1470 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    6
  1474 ;; This function calls:
  1475 ;;		_Lcd_Cmd
  1476 ;;		_Lcd_Port
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text1
  1483  0021C0                     __ptext1:
  1484                           	opt stack 0
  1485  0021C0                     _Lcd_Init:
  1486                           	opt stack 24
  1487                           
  1488                           ;lcd.c: 58: Lcd_Port(0x00);
  1489                           
  1490                           ;incstack = 0
  1491  0021C0  0E00               	movlw	0
  1492  0021C2  EC7B  F013         	call	_Lcd_Port
  1493                           
  1494                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1495  0021C6  0E1A               	movlw	26
  1496  0021C8  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1497  0021CA  0EF8               	movlw	248
  1498  0021CC                     u5607:
  1499  0021CC  2EE8               	decfsz	wreg,f,c
  1500  0021CE  D7FE               	goto	u5607
  1501  0021D0  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1502  0021D2  D7FC               	goto	u5607
  1503  0021D4  D000               	nop2	
  1504                           
  1505                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1506  0021D6  0E03               	movlw	3
  1507  0021D8  ECDF  F013         	call	_Lcd_Cmd
  1508                           
  1509                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1510  0021DC  0E07               	movlw	7
  1511  0021DE  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1512  0021E0  0E7D               	movlw	125
  1513  0021E2                     u5617:
  1514  0021E2  2EE8               	decfsz	wreg,f,c
  1515  0021E4  D7FE               	goto	u5617
  1516  0021E6  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1517  0021E8  D7FC               	goto	u5617
  1518  0021EA  F000               	nop	
  1519                           
  1520                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1521  0021EC  0E03               	movlw	3
  1522  0021EE  ECDF  F013         	call	_Lcd_Cmd
  1523                           
  1524                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1525  0021F2  0E0F               	movlw	15
  1526  0021F4  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1527  0021F6  0E48               	movlw	72
  1528  0021F8                     u5627:
  1529  0021F8  2EE8               	decfsz	wreg,f,c
  1530  0021FA  D7FE               	goto	u5627
  1531  0021FC  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1532  0021FE  D7FC               	goto	u5627
  1533                           
  1534                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1535  002200  0E03               	movlw	3
  1536  002202  ECDF  F013         	call	_Lcd_Cmd
  1537                           
  1538                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1539  002206  0E02               	movlw	2
  1540  002208  ECDF  F013         	call	_Lcd_Cmd
  1541                           
  1542                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1543  00220C  0E02               	movlw	2
  1544  00220E  ECDF  F013         	call	_Lcd_Cmd
  1545                           
  1546                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1547  002212  0E08               	movlw	8
  1548  002214  ECDF  F013         	call	_Lcd_Cmd
  1549                           
  1550                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1551  002218  0E00               	movlw	0
  1552  00221A  ECDF  F013         	call	_Lcd_Cmd
  1553                           
  1554                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1555  00221E  0E0C               	movlw	12
  1556  002220  ECDF  F013         	call	_Lcd_Cmd
  1557                           
  1558                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1559  002224  0E00               	movlw	0
  1560  002226  ECDF  F013         	call	_Lcd_Cmd
  1561                           
  1562                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1563  00222A  0E06               	movlw	6
  1564  00222C  ECDF  F013         	call	_Lcd_Cmd
  1565  002230  0012               	return	
  1566  002232                     __end_of_Lcd_Init:
  1567                           	opt stack 0
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           intcon	equ	0xFF2
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           status	equ	0xFD8
  1578                           
  1579 ;; *************** function _Inicializa_Driveby *****************
  1580 ;; Defined at:
  1581 ;;		line 61 in file "Funciones_Db.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;		None
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  i               2   39[COMRAM] int 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;		None               void
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1595 ;;      Params:         0       0       0       0       0       0       0       0       0
  1596 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1597 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1598 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1599 ;;Total ram usage:        3 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    9
  1602 ;; This function calls:
  1603 ;;		_BT_Init
  1604 ;;		_Lcd_Clear
  1605 ;;		_Lcd_Set_Cursor
  1606 ;;		_Lcd_Write_String
  1607 ;;		_Pause_seg
  1608 ;;		_clrBufferUSART
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text2
  1615  0019D6                     __ptext2:
  1616                           	opt stack 0
  1617  0019D6                     _Inicializa_Driveby:
  1618                           	opt stack 21
  1619                           
  1620                           ;Funciones_Db.c: 62: TRISA = TRISB = TRISC = TRISD = 0;
  1621                           
  1622                           ;incstack = 0
  1623  0019D6  0E00               	movlw	0
  1624  0019D8  6E95               	movwf	3989,c	;volatile
  1625  0019DA  CF95 FF94          	movff	3989,3988	;volatile
  1626  0019DE  CF94 FF93          	movff	3988,3987	;volatile
  1627  0019E2  CF93 FF92          	movff	3987,3986	;volatile
  1628                           
  1629                           ;Funciones_Db.c: 63: INTCON = 0b11000000;
  1630  0019E6  0EC0               	movlw	192
  1631  0019E8  6EF2               	movwf	intcon,c	;volatile
  1632                           
  1633                           ;Funciones_Db.c: 66: int i = 0;
  1634  0019EA  0E00               	movlw	0
  1635  0019EC  6E29               	movwf	Inicializa_Driveby@i+1,c
  1636  0019EE  0E00               	movlw	0
  1637  0019F0  6E28               	movwf	Inicializa_Driveby@i,c
  1638                           
  1639                           ;Funciones_Db.c: 67: _delay((unsigned long)((40)*(4000000/4000.0)));
  1640  0019F2  0E34               	movlw	52
  1641  0019F4  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1642  0019F6  0EF2               	movlw	242
  1643  0019F8                     u5637:
  1644  0019F8  2EE8               	decfsz	wreg,f,c
  1645  0019FA  D7FE               	goto	u5637
  1646  0019FC  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1647  0019FE  D7FC               	goto	u5637
  1648                           
  1649                           ;Funciones_Db.c: 68: OSCCONbits.IRCF = 0b111;
  1650  001A00  88D3               	bsf	4051,4,c	;volatile
  1651  001A02  8AD3               	bsf	4051,5,c	;volatile
  1652  001A04  8CD3               	bsf	4051,6,c	;volatile
  1653                           
  1654                           ;Funciones_Db.c: 73: TRISA = 0;
  1655  001A06  0E00               	movlw	0
  1656  001A08  6E92               	movwf	3986,c	;volatile
  1657                           
  1658                           ;Funciones_Db.c: 74: PORTA = 0;
  1659  001A0A  0E00               	movlw	0
  1660  001A0C  6E80               	movwf	3968,c	;volatile
  1661                           
  1662                           ;Funciones_Db.c: 75: TRISCbits.TRISC7 = 1;
  1663  001A0E  8E94               	bsf	3988,7,c	;volatile
  1664                           
  1665                           ;Funciones_Db.c: 76: TRISCbits.TRISC6 = 0;
  1666  001A10  9C94               	bcf	3988,6,c	;volatile
  1667                           
  1668                           ;Funciones_Db.c: 77: for (i = 1; i <= 50; i++)
  1669  001A12  0E00               	movlw	0
  1670  001A14  6E29               	movwf	Inicializa_Driveby@i+1,c
  1671  001A16  0E01               	movlw	1
  1672  001A18  6E28               	movwf	Inicializa_Driveby@i,c
  1673  001A1A  5029               	movf	Inicializa_Driveby@i+1,w,c
  1674  001A1C  0A80               	xorlw	128
  1675  001A1E  0F80               	addlw	-128
  1676  001A20  0E33               	movlw	51
  1677  001A22  B4D8               	btfsc	status,2,c
  1678  001A24  5C28               	subwf	Inicializa_Driveby@i,w,c
  1679  001A26  B0D8               	btfsc	status,0,c
  1680  001A28  D00B               	goto	l5216
  1681                           
  1682                           ;Funciones_Db.c: 78: _delay((unsigned long)((20)*(4000000/4000.0)));
  1683  001A2A  0E1A               	movlw	26
  1684  001A2C  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1685  001A2E  0EF8               	movlw	248
  1686  001A30                     u5647:
  1687  001A30  2EE8               	decfsz	wreg,f,c
  1688  001A32  D7FE               	goto	u5647
  1689  001A34  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1690  001A36  D7FC               	goto	u5647
  1691  001A38  D000               	nop2	
  1692  001A3A  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1693  001A3C  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1694  001A3E  D7ED               	goto	L1
  1695  001A40                     l5216:
  1696                           
  1697                           ;Funciones_Db.c: 79: PORTE = 0;
  1698  001A40  0E00               	movlw	0
  1699  001A42  6E84               	movwf	3972,c	;volatile
  1700                           
  1701                           ;Funciones_Db.c: 80: PORTB = 0;
  1702  001A44  0E00               	movlw	0
  1703  001A46  6E81               	movwf	3969,c	;volatile
  1704                           
  1705                           ;Funciones_Db.c: 81: Lcd_Clear();
  1706  001A48  EC62  F014         	call	_Lcd_Clear	;wreg free
  1707                           
  1708                           ;Funciones_Db.c: 82: Lcd_Set_Cursor(2, 1);
  1709  001A4C  0E01               	movlw	1
  1710  001A4E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1711  001A50  0E02               	movlw	2
  1712  001A52  ECE3  F011         	call	_Lcd_Set_Cursor
  1713                           
  1714                           ;Funciones_Db.c: 83: Lcd_Write_String("INICIO");
  1715  001A56  0E7F               	movlw	high STR_10
  1716  001A58  6E1E               	movwf	Lcd_Write_String@a+1,c
  1717  001A5A  0EF1               	movlw	low STR_10
  1718  001A5C  6E1D               	movwf	Lcd_Write_String@a,c
  1719  001A5E  EC66  F010         	call	_Lcd_Write_String	;wreg free
  1720                           
  1721                           ;Funciones_Db.c: 85: BT_Init();
  1722  001A62  EC9C  F00D         	call	_BT_Init	;wreg free
  1723                           
  1724                           ;Funciones_Db.c: 86: Lcd_Clear();
  1725  001A66  EC62  F014         	call	_Lcd_Clear	;wreg free
  1726                           
  1727                           ;Funciones_Db.c: 87: Lcd_Set_Cursor(1, 1);
  1728  001A6A  0E01               	movlw	1
  1729  001A6C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1730  001A6E  0E01               	movlw	1
  1731  001A70  ECE3  F011         	call	_Lcd_Set_Cursor
  1732                           
  1733                           ;Funciones_Db.c: 88: Lcd_Write_String("BT INICIALIZADO");
  1734  001A74  0E7F               	movlw	high STR_11
  1735  001A76  6E1E               	movwf	Lcd_Write_String@a+1,c
  1736  001A78  0E53               	movlw	low STR_11
  1737  001A7A  6E1D               	movwf	Lcd_Write_String@a,c
  1738  001A7C  EC66  F010         	call	_Lcd_Write_String	;wreg free
  1739                           
  1740                           ;Funciones_Db.c: 90: Pause_seg(7);
  1741  001A80  0E07               	movlw	7
  1742  001A82  EC58  F012         	call	_Pause_seg
  1743                           
  1744                           ;Funciones_Db.c: 91: cad = 0;
  1745  001A86  0E00               	movlw	0
  1746  001A88  6E3D               	movwf	_cad,c
  1747                           
  1748                           ;Funciones_Db.c: 92: clrBufferUSART();
  1749  001A8A  EC0E  F013         	call	_clrBufferUSART	;wreg free
  1750                           
  1751                           ;Funciones_Db.c: 93: return;
  1752  001A8E  0012               	return	
  1753  001A90                     __end_of_Inicializa_Driveby:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           intcon	equ	0xFF2
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _BT_Init *****************
  1767 ;; Defined at:
  1768 ;;		line 16 in file "Bluetooth.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1773 ;; Return value:  Size  Location     Type
  1774 ;;		None               void
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1782 ;;      Params:         0       0       0       0       0       0       0       0       0
  1783 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1785 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1786 ;;Total ram usage:       18 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    8
  1789 ;; This function calls:
  1790 ;;		_Pause_seg
  1791 ;;		_SendBlueToothCommand
  1792 ;;		_UART1_Init
  1793 ;; This function is called by:
  1794 ;;		_Inicializa_Driveby
  1795 ;;		_EstadoBluetooth
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text3
  1800  001B38                     __ptext3:
  1801                           	opt stack 0
  1802  001B38                     _BT_Init:
  1803                           	opt stack 21
  1804                           
  1805                           ;Bluetooth.c: 18: UART1_Init(51);
  1806                           
  1807                           ;incstack = 0
  1808  001B38  0E33               	movlw	51
  1809  001B3A  EC53  F014         	call	_UART1_Init
  1810                           
  1811                           ;Bluetooth.c: 21: Pause_seg(1);
  1812  001B3E  0E01               	movlw	1
  1813  001B40  EC58  F012         	call	_Pause_seg
  1814                           
  1815                           ;Bluetooth.c: 22: char nameBT[18] = {
  1816                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1817                           ;Bluetooth.c: 24: };
  1818  001B44  EE20  F0DA         	lfsr	2,BT_Init@F5669
  1819  001B48  EE10  F060         	lfsr	1,BT_Init@nameBT
  1820  001B4C  0E12               	movlw	18
  1821  001B4E                     u5361:
  1822  001B4E  CFDE FFE6          	movff	postinc2,postinc1
  1823  001B52  2EE8               	decfsz	wreg,f,c
  1824  001B54  D7FC               	goto	u5361
  1825                           
  1826                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1827  001B56  0E7F               	movlw	high STR_1
  1828  001B58  6E24               	movwf	SendBlueToothCommand@command+1,c
  1829  001B5A  0EB7               	movlw	low STR_1
  1830  001B5C  6E23               	movwf	SendBlueToothCommand@command,c
  1831  001B5E  0E00               	movlw	0
  1832  001B60  6E26               	movwf	SendBlueToothCommand@total+1,c
  1833  001B62  0E0B               	movlw	11
  1834  001B64  6E25               	movwf	SendBlueToothCommand@total,c
  1835  001B66  EC2C  F014         	call	_SendBlueToothCommand	;wreg free
  1836                           
  1837                           ;Bluetooth.c: 29: Pause_seg(1);
  1838  001B6A  0E01               	movlw	1
  1839  001B6C  EC58  F012         	call	_Pause_seg
  1840                           
  1841                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1842  001B70  0100               	movlb	0	; () banked
  1843  001B72  0E00               	movlw	high BT_Init@nameBT
  1844  001B74  6E24               	movwf	SendBlueToothCommand@command+1,c
  1845  001B76  0100               	movlb	0	; () banked
  1846  001B78  0E60               	movlw	low BT_Init@nameBT
  1847  001B7A  6E23               	movwf	SendBlueToothCommand@command,c
  1848  001B7C  0E00               	movlw	0
  1849  001B7E  6E26               	movwf	SendBlueToothCommand@total+1,c
  1850  001B80  0E12               	movlw	18
  1851  001B82  6E25               	movwf	SendBlueToothCommand@total,c
  1852  001B84  EC2C  F014         	call	_SendBlueToothCommand	;wreg free
  1853                           
  1854                           ;Bluetooth.c: 33: Pause_seg(2);
  1855  001B88  0E02               	movlw	2
  1856  001B8A  EC58  F012         	call	_Pause_seg
  1857                           
  1858                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1859  001B8E  0E7F               	movlw	high STR_2
  1860  001B90  6E24               	movwf	SendBlueToothCommand@command+1,c
  1861  001B92  0E63               	movlw	low STR_2
  1862  001B94  6E23               	movwf	SendBlueToothCommand@command,c
  1863  001B96  0E00               	movlw	0
  1864  001B98  6E26               	movwf	SendBlueToothCommand@total+1,c
  1865  001B9A  0E0E               	movlw	14
  1866  001B9C  6E25               	movwf	SendBlueToothCommand@total,c
  1867  001B9E  EC2C  F014         	call	_SendBlueToothCommand	;wreg free
  1868                           
  1869                           ;Bluetooth.c: 36: Pause_seg(2);
  1870  001BA2  0E02               	movlw	2
  1871  001BA4  EC58  F012         	call	_Pause_seg
  1872                           
  1873                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1874  001BA8  0E7F               	movlw	high STR_3
  1875  001BAA  6E24               	movwf	SendBlueToothCommand@command+1,c
  1876  001BAC  0ED9               	movlw	low STR_3
  1877  001BAE  6E23               	movwf	SendBlueToothCommand@command,c
  1878  001BB0  0E00               	movlw	0
  1879  001BB2  6E26               	movwf	SendBlueToothCommand@total+1,c
  1880  001BB4  0E08               	movlw	8
  1881  001BB6  6E25               	movwf	SendBlueToothCommand@total,c
  1882  001BB8  EC2C  F014         	call	_SendBlueToothCommand	;wreg free
  1883                           
  1884                           ;Bluetooth.c: 41: Pause_seg(2);
  1885  001BBC  0E02               	movlw	2
  1886  001BBE  EC58  F012         	call	_Pause_seg
  1887                           
  1888                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1889  001BC2  0E7F               	movlw	high STR_3
  1890  001BC4  6E24               	movwf	SendBlueToothCommand@command+1,c
  1891  001BC6  0ED9               	movlw	low STR_3
  1892  001BC8  6E23               	movwf	SendBlueToothCommand@command,c
  1893  001BCA  0E00               	movlw	0
  1894  001BCC  6E26               	movwf	SendBlueToothCommand@total+1,c
  1895  001BCE  0E08               	movlw	8
  1896  001BD0  6E25               	movwf	SendBlueToothCommand@total,c
  1897  001BD2  EC2C  F014         	call	_SendBlueToothCommand	;wreg free
  1898                           
  1899                           ;Bluetooth.c: 44: Pause_seg(2);
  1900  001BD6  0E02               	movlw	2
  1901  001BD8  EC58  F012         	call	_Pause_seg
  1902                           
  1903                           ;Bluetooth.c: 45: return;
  1904  001BDC  0012               	return	
  1905  001BDE                     __end_of_BT_Init:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           intcon	equ	0xFF2
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postinc1	equ	0xFE6
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           postinc2	equ	0xFDE
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _SendBlueToothCommand *****************
  1921 ;; Defined at:
  1922 ;;		line 48 in file "Bluetooth.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1925 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1926 ;;		 -> BT_Init@nameBT(18), 
  1927 ;;  total           2   36[COMRAM] unsigned int 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;		None               void
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1939 ;;      Params:         4       0       0       0       0       0       0       0       0
  1940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    7
  1946 ;; This function calls:
  1947 ;;		_putSTRINGU1
  1948 ;; This function is called by:
  1949 ;;		_BT_Init
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text4
  1954  002858                     __ptext4:
  1955                           	opt stack 0
  1956  002858                     _SendBlueToothCommand:
  1957                           	opt stack 21
  1958                           
  1959                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1960                           
  1961                           ;incstack = 0
  1962  002858  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1963  00285C  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1964  002860  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1965  002864  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1966  002868  EC8C  F00E         	call	_putSTRINGU1	;wreg free
  1967                           
  1968                           ;Bluetooth.c: 50: return;
  1969  00286C  0012               	return	
  1970  00286E                     __end_of_SendBlueToothCommand:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postinc1	equ	0xFE6
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           postinc2	equ	0xFDE
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _putSTRINGU1 *****************
  1986 ;; Defined at:
  1987 ;;		line 18 in file "UART1.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  1990 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1991 ;;		 -> BT_Init@nameBT(18), 
  1992 ;;  total           2   28[COMRAM] unsigned int 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  cont            1   33[COMRAM] unsigned char 
  1995 ;;  last            1   32[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2005 ;;      Params:         4       0       0       0       0       0       0       0       0
  2006 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2007 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2008 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2009 ;;Total ram usage:        8 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    6
  2012 ;; This function calls:
  2013 ;;		_putcTxU1
  2014 ;; This function is called by:
  2015 ;;		_SendBlueToothCommand
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text5
  2020  001D18                     __ptext5:
  2021                           	opt stack 0
  2022  001D18                     _putSTRINGU1:
  2023                           	opt stack 21
  2024                           
  2025                           ;UART1.c: 19: unsigned char cont,last;
  2026                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2027                           
  2028                           ;incstack = 0
  2029  001D18  0E00               	movlw	0
  2030  001D1A  6E22               	movwf	putSTRINGU1@cont,c
  2031  001D1C  0E00               	movlw	0
  2032  001D1E  6E21               	movwf	putSTRINGU1@last,c
  2033  001D20  D01F               	goto	l4418
  2034  001D22                     l4412:
  2035                           
  2036                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2037  001D22  5022               	movf	putSTRINGU1@cont,w,c
  2038  001D24  0D01               	mullw	1
  2039  001D26  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2040  001D2A  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2041  001D2E  50F3               	movf	prodl,w,c
  2042  001D30  261F               	addwf	??_putSTRINGU1,f,c
  2043  001D32  50F4               	movf	prodh,w,c
  2044  001D34  2220               	addwfc	??_putSTRINGU1+1,f,c
  2045  001D36  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2046  001D3A  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2047  001D3E  6AF8               	clrf	tblptru,c
  2048  001D40  0E07               	movlw	(high __ramtop+-1)
  2049  001D42  64F7               	cpfsgt	tblptrh,c
  2050  001D44  D003               	bra	u4377
  2051  001D46  0008               	tblrd		*
  2052  001D48  50F5               	movf	tablat,w,c
  2053  001D4A  D005               	bra	u4370
  2054  001D4C                     u4377:
  2055  001D4C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2056  001D50  CFF7 FFEA          	movff	tblptrh,fsr0h
  2057  001D54  50EF               	movf	indf0,w,c
  2058  001D56                     u4370:
  2059  001D56  0900               	iorlw	0
  2060  001D58  A4D8               	btfss	status,2,c
  2061  001D5A  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2062  001D5E  2A22               	incf	putSTRINGU1@cont,f,c
  2063  001D60                     l4418:
  2064  001D60  5022               	movf	putSTRINGU1@cont,w,c
  2065  001D62  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2066  001D64  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2067  001D66  501D               	movf	putSTRINGU1@total,w,c
  2068  001D68  5C1F               	subwf	??_putSTRINGU1,w,c
  2069  001D6A  501E               	movf	putSTRINGU1@total+1,w,c
  2070  001D6C  5820               	subwfb	??_putSTRINGU1+1,w,c
  2071  001D6E  A0D8               	btfss	status,0,c
  2072  001D70  D7D8               	goto	l4412
  2073                           
  2074                           ;UART1.c: 23: }
  2075                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2076  001D72  0E00               	movlw	0
  2077  001D74  6E22               	movwf	putSTRINGU1@cont,c
  2078  001D76  D015               	goto	l4428
  2079  001D78                     l4422:
  2080                           
  2081                           ;UART1.c: 26: putcTxU1(*dato++);
  2082  001D78  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2083  001D7C  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2084  001D80  6AF8               	clrf	tblptru,c
  2085  001D82  0E07               	movlw	(high __ramtop+-1)
  2086  001D84  64F7               	cpfsgt	tblptrh,c
  2087  001D86  D003               	bra	u4407
  2088  001D88  0008               	tblrd		*
  2089  001D8A  50F5               	movf	tablat,w,c
  2090  001D8C  D005               	bra	u4400
  2091  001D8E                     u4407:
  2092  001D8E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2093  001D92  CFF7 FFEA          	movff	tblptrh,fsr0h
  2094  001D96  50EF               	movf	indf0,w,c
  2095  001D98                     u4400:
  2096  001D98  EC5B  F014         	call	_putcTxU1
  2097  001D9C  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2098  001D9E  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2099  001DA0  2A22               	incf	putSTRINGU1@cont,f,c
  2100  001DA2                     l4428:
  2101  001DA2  5022               	movf	putSTRINGU1@cont,w,c
  2102  001DA4  5C21               	subwf	putSTRINGU1@last,w,c
  2103  001DA6  A0D8               	btfss	status,0,c
  2104  001DA8  0012               	return	
  2105  001DAA  D7E6               	goto	l4422
  2106  001DAC                     __end_of_putSTRINGU1:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           intcon	equ	0xFF2
  2115                           indf0	equ	0xFEF
  2116                           postinc0	equ	0xFEE
  2117                           fsr0h	equ	0xFEA
  2118                           fsr0l	equ	0xFE9
  2119                           wreg	equ	0xFE8
  2120                           postinc1	equ	0xFE6
  2121                           postdec1	equ	0xFE5
  2122                           fsr1l	equ	0xFE1
  2123                           postinc2	equ	0xFDE
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _putcTxU1 *****************
  2127 ;; Defined at:
  2128 ;;		line 12 in file "UART1.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  character       1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  character       1   25[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2145 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:        1 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    5
  2149 ;; This function calls:
  2150 ;;		_WriteUSART
  2151 ;; This function is called by:
  2152 ;;		_putSTRINGU1
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text6
  2157  0028B6                     __ptext6:
  2158                           	opt stack 0
  2159  0028B6                     _putcTxU1:
  2160                           	opt stack 21
  2161                           
  2162                           ;incstack = 0
  2163                           ;putcTxU1@character stored from wreg
  2164  0028B6  6E1A               	movwf	putcTxU1@character,c
  2165                           
  2166                           ;UART1.c: 14: WriteUSART(character);
  2167  0028B8  501A               	movf	putcTxU1@character,w,c
  2168  0028BA  EC41  F014         	call	_WriteUSART
  2169  0028BE                     l214:
  2170  0028BE  B2AC               	btfsc	4012,1,c	;volatile
  2171  0028C0  0012               	return	
  2172  0028C2  D7FD               	goto	l214
  2173  0028C4                     __end_of_putcTxU1:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           indf0	equ	0xFEF
  2183                           postinc0	equ	0xFEE
  2184                           fsr0h	equ	0xFEA
  2185                           fsr0l	equ	0xFE9
  2186                           wreg	equ	0xFE8
  2187                           postinc1	equ	0xFE6
  2188                           postdec1	equ	0xFE5
  2189                           fsr1l	equ	0xFE1
  2190                           postinc2	equ	0xFDE
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _Pause_seg *****************
  2194 ;; Defined at:
  2195 ;;		line 18 in file "Retardos.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  x               1    wreg     unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  x               1   29[COMRAM] unsigned char 
  2200 ;;  i               1   30[COMRAM] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;		None               void
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0
  2211 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2213 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2214 ;;Total ram usage:        2 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    5
  2217 ;; This function calls:
  2218 ;;		_Pause_ms
  2219 ;; This function is called by:
  2220 ;;		_BT_Init
  2221 ;;		_Inicializa_Driveby
  2222 ;;		_EstadoBluetooth
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text7
  2227  0024B0                     __ptext7:
  2228                           	opt stack 0
  2229  0024B0                     _Pause_seg:
  2230                           	opt stack 24
  2231                           
  2232                           ;incstack = 0
  2233                           ;Pause_seg@x stored from wreg
  2234  0024B0  6E1E               	movwf	Pause_seg@x,c
  2235                           
  2236                           ;Retardos.c: 19: unsigned char i=0;
  2237  0024B2  0E00               	movlw	0
  2238  0024B4  6E1F               	movwf	Pause_seg@i,c
  2239                           
  2240                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2241  0024B6  0E00               	movlw	0
  2242  0024B8  6E1F               	movwf	Pause_seg@i,c
  2243  0024BA  D019               	goto	l4808
  2244  0024BC                     l4804:
  2245                           
  2246                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2247  0024BC  0E00               	movlw	0
  2248  0024BE  6E1A               	movwf	Pause_ms@x+1,c
  2249  0024C0  0EFA               	movlw	250
  2250  0024C2  6E19               	movwf	Pause_ms@x,c
  2251  0024C4  EC62  F013         	call	_Pause_ms	;wreg free
  2252  0024C8  0E00               	movlw	0
  2253  0024CA  6E1A               	movwf	Pause_ms@x+1,c
  2254  0024CC  0EFA               	movlw	250
  2255  0024CE  6E19               	movwf	Pause_ms@x,c
  2256  0024D0  EC62  F013         	call	_Pause_ms	;wreg free
  2257                           
  2258                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2259  0024D4  0E00               	movlw	0
  2260  0024D6  6E1A               	movwf	Pause_ms@x+1,c
  2261  0024D8  0EFA               	movlw	250
  2262  0024DA  6E19               	movwf	Pause_ms@x,c
  2263  0024DC  EC62  F013         	call	_Pause_ms	;wreg free
  2264  0024E0  0E00               	movlw	0
  2265  0024E2  6E1A               	movwf	Pause_ms@x+1,c
  2266  0024E4  0EFA               	movlw	250
  2267  0024E6  6E19               	movwf	Pause_ms@x,c
  2268  0024E8  EC62  F013         	call	_Pause_ms	;wreg free
  2269  0024EC  2A1F               	incf	Pause_seg@i,f,c
  2270  0024EE                     l4808:
  2271  0024EE  501F               	movf	Pause_seg@i,w,c
  2272  0024F0  5C1E               	subwf	Pause_seg@x,w,c
  2273  0024F2  A0D8               	btfss	status,0,c
  2274  0024F4  0012               	return	
  2275  0024F6  D7E2               	goto	l4804
  2276  0024F8                     __end_of_Pause_seg:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           indf0	equ	0xFEF
  2286                           postinc0	equ	0xFEE
  2287                           fsr0h	equ	0xFEA
  2288                           fsr0l	equ	0xFE9
  2289                           wreg	equ	0xFE8
  2290                           postinc1	equ	0xFE6
  2291                           postdec1	equ	0xFE5
  2292                           fsr1l	equ	0xFE1
  2293                           postinc2	equ	0xFDE
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _Pause_ms *****************
  2297 ;; Defined at:
  2298 ;;		line 11 in file "Retardos.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  x               2   24[COMRAM] unsigned int 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  i               2   27[COMRAM] unsigned int 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;		None               void
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2312 ;;      Params:         2       0       0       0       0       0       0       0       0
  2313 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2314 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2315 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2316 ;;Total ram usage:        5 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    4
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_Pause_seg
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text8
  2327  0026C4                     __ptext8:
  2328                           	opt stack 0
  2329  0026C4                     _Pause_ms:
  2330                           	opt stack 24
  2331                           
  2332                           ;Retardos.c: 12: unsigned int i=0;
  2333                           
  2334                           ;incstack = 0
  2335  0026C4  0E00               	movlw	0
  2336  0026C6  6E1D               	movwf	Pause_ms@i+1,c
  2337  0026C8  0E00               	movlw	0
  2338  0026CA  6E1C               	movwf	Pause_ms@i,c
  2339                           
  2340                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2341  0026CC  0E00               	movlw	0
  2342  0026CE  6E1D               	movwf	Pause_ms@i+1,c
  2343  0026D0  0E00               	movlw	0
  2344  0026D2  6E1C               	movwf	Pause_ms@i,c
  2345  0026D4  D009               	goto	l193
  2346  0026D6                     l4432:
  2347                           
  2348                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2349  0026D6  0E03               	movlw	3
  2350  0026D8  6E1B               	movwf	??_Pause_ms& (0+255),c
  2351  0026DA  0E98               	movlw	152
  2352  0026DC                     u5657:
  2353  0026DC  2EE8               	decfsz	wreg,f,c
  2354  0026DE  D7FE               	goto	u5657
  2355  0026E0  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2356  0026E2  D7FC               	goto	u5657
  2357  0026E4  4A1C               	infsnz	Pause_ms@i,f,c
  2358  0026E6  2A1D               	incf	Pause_ms@i+1,f,c
  2359  0026E8                     l193:
  2360  0026E8  501C               	movf	Pause_ms@i,w,c
  2361  0026EA  5C19               	subwf	Pause_ms@x,w,c
  2362  0026EC  501D               	movf	Pause_ms@i+1,w,c
  2363  0026EE  581A               	subwfb	Pause_ms@x+1,w,c
  2364  0026F0  A0D8               	btfss	status,0,c
  2365  0026F2  0012               	return	
  2366  0026F4  D7F0               	goto	l4432
  2367  0026F6                     __end_of_Pause_ms:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           indf0	equ	0xFEF
  2377                           postinc0	equ	0xFEE
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           postinc1	equ	0xFE6
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           postinc2	equ	0xFDE
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _Comando_Tablet *****************
  2388 ;; Defined at:
  2389 ;;		line 98 in file "Funciones_Db.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2406 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    9
  2410 ;; This function calls:
  2411 ;;		_Lcd_Clear
  2412 ;;		_Lcd_Set_Cursor
  2413 ;;		_Lcd_Write_Integer
  2414 ;;		_Lcd_Write_String
  2415 ;;		_PWM_DutyCycle1
  2416 ;;		_PWM_DutyCycle2
  2417 ;;		_PWM_init1
  2418 ;;		_PWM_init2
  2419 ;;		_clrBufferUSART
  2420 ;;		_putcBluetoothInt
  2421 ;;		_putcBluetoothString
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text9
  2428  0016B6                     __ptext9:
  2429                           	opt stack 0
  2430  0016B6                     _Comando_Tablet:
  2431                           	opt stack 21
  2432                           
  2433                           ;Funciones_Db.c: 101: switch (BluetoothDato[1]) {
  2434                           
  2435                           ;incstack = 0
  2436  0016B6  D080               	goto	l5298
  2437  0016B8                     l5242:
  2438                           
  2439                           ;Funciones_Db.c: 103: Lcd_Clear();
  2440  0016B8  EC62  F014         	call	_Lcd_Clear	;wreg free
  2441                           
  2442                           ;Funciones_Db.c: 104: Lcd_Set_Cursor(1, 1);
  2443  0016BC  0E01               	movlw	1
  2444  0016BE  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2445  0016C0  0E01               	movlw	1
  2446  0016C2  ECE3  F011         	call	_Lcd_Set_Cursor
  2447                           
  2448                           ;Funciones_Db.c: 105: Lcd_Write_String("1");
  2449  0016C6  0E7F               	movlw	high STR_12
  2450  0016C8  6E1E               	movwf	Lcd_Write_String@a+1,c
  2451  0016CA  0EF8               	movlw	low STR_12
  2452  0016CC  6E1D               	movwf	Lcd_Write_String@a,c
  2453  0016CE  EC66  F010         	call	_Lcd_Write_String	;wreg free
  2454                           
  2455                           ;Funciones_Db.c: 106: break;
  2456  0016D2  D084               	goto	l5300
  2457  0016D4                     l5248:
  2458                           
  2459                           ;Funciones_Db.c: 108: Lcd_Clear();
  2460  0016D4  EC62  F014         	call	_Lcd_Clear	;wreg free
  2461                           
  2462                           ;Funciones_Db.c: 109: Lcd_Set_Cursor(1, 1);
  2463  0016D8  0E01               	movlw	1
  2464  0016DA  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2465  0016DC  0E01               	movlw	1
  2466  0016DE  ECE3  F011         	call	_Lcd_Set_Cursor
  2467                           
  2468                           ;Funciones_Db.c: 110: Lcd_Write_String("2");
  2469  0016E2  0E7F               	movlw	high (STR_20+16)
  2470  0016E4  6E1E               	movwf	Lcd_Write_String@a+1,c
  2471  0016E6  0E51               	movlw	low (STR_20+16)
  2472  0016E8  6E1D               	movwf	Lcd_Write_String@a,c
  2473  0016EA  EC66  F010         	call	_Lcd_Write_String	;wreg free
  2474                           
  2475                           ;Funciones_Db.c: 111: break;
  2476  0016EE  D076               	goto	l5300
  2477  0016F0                     l5254:
  2478                           
  2479                           ;Funciones_Db.c: 114: Lcd_Clear();
  2480  0016F0  EC62  F014         	call	_Lcd_Clear	;wreg free
  2481                           
  2482                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2483  0016F4  0E01               	movlw	1
  2484  0016F6  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2485  0016F8  0E01               	movlw	1
  2486  0016FA  ECE3  F011         	call	_Lcd_Set_Cursor
  2487                           
  2488                           ;Funciones_Db.c: 117: Lcd_Write_String("3");
  2489  0016FE  0E7F               	movlw	high STR_14
  2490  001700  6E1E               	movwf	Lcd_Write_String@a+1,c
  2491  001702  0EFA               	movlw	low STR_14
  2492  001704  6E1D               	movwf	Lcd_Write_String@a,c
  2493  001706  EC66  F010         	call	_Lcd_Write_String	;wreg free
  2494                           
  2495                           ;Funciones_Db.c: 118: break;
  2496  00170A  D068               	goto	l5300
  2497  00170C                     l5260:
  2498                           
  2499                           ;Funciones_Db.c: 120: Lcd_Clear();
  2500  00170C  EC62  F014         	call	_Lcd_Clear	;wreg free
  2501                           
  2502                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2503  001710  0E01               	movlw	1
  2504  001712  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2505  001714  0E01               	movlw	1
  2506  001716  ECE3  F011         	call	_Lcd_Set_Cursor
  2507                           
  2508                           ;Funciones_Db.c: 122: Lcd_Write_String("4");
  2509  00171A  0E7F               	movlw	high STR_15
  2510  00171C  6E1E               	movwf	Lcd_Write_String@a+1,c
  2511  00171E  0EFC               	movlw	low STR_15
  2512  001720  6E1D               	movwf	Lcd_Write_String@a,c
  2513  001722  EC66  F010         	call	_Lcd_Write_String	;wreg free
  2514                           
  2515                           ;Funciones_Db.c: 123: putcBluetoothInt(contadorbt);
  2516  001726  C0C2  F0B8         	movff	_contadorbt,putcBluetoothInt@a
  2517  00172A  C0C3  F0B9         	movff	_contadorbt+1,putcBluetoothInt@a+1
  2518  00172E  EC66  F00F         	call	_putcBluetoothInt	;wreg free
  2519                           
  2520                           ;Funciones_Db.c: 124: putcBluetoothString("\n");
  2521  001732  0E7F               	movlw	high (STR_2+13)
  2522  001734  6E21               	movwf	putcBluetoothString@a+1,c
  2523  001736  0E70               	movlw	low (STR_2+13)
  2524  001738  6E20               	movwf	putcBluetoothString@a,c
  2525  00173A  EC19  F011         	call	_putcBluetoothString	;wreg free
  2526                           
  2527                           ;Funciones_Db.c: 126: contadorbt++;
  2528  00173E  0100               	movlb	0	; () banked
  2529  001740  4BC2               	infsnz	_contadorbt& (0+255),f,b
  2530  001742  2BC3               	incf	(_contadorbt+1)& (0+255),f,b
  2531                           
  2532                           ;Funciones_Db.c: 127: break;
  2533  001744  D04B               	goto	l5300
  2534  001746                     l5272:
  2535                           
  2536                           ;Funciones_Db.c: 129: Lcd_Clear();
  2537  001746  EC62  F014         	call	_Lcd_Clear	;wreg free
  2538                           
  2539                           ;Funciones_Db.c: 130: Lcd_Set_Cursor(1, 1);
  2540  00174A  0E01               	movlw	1
  2541  00174C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2542  00174E  0E01               	movlw	1
  2543  001750  ECE3  F011         	call	_Lcd_Set_Cursor
  2544                           
  2545                           ;Funciones_Db.c: 131: Lcd_Write_Integer(BluetoothDato[3]);
  2546  001754  0101               	movlb	1	; () banked
  2547  001756  0100               	movlb	0	; () banked
  2548  001758  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2549  00175C  0100               	movlb	0	; () banked
  2550  00175E  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2551  001760  ECF1  F012         	call	_Lcd_Write_Integer	;wreg free
  2552                           
  2553                           ;Funciones_Db.c: 132: Lcd_Set_Cursor(2, 1);
  2554  001764  0E01               	movlw	1
  2555  001766  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2556  001768  0E02               	movlw	2
  2557  00176A  ECE3  F011         	call	_Lcd_Set_Cursor
  2558                           
  2559                           ;Funciones_Db.c: 133: Lcd_Write_Integer(BluetoothDato[4]);
  2560  00176E  0101               	movlb	1	; () banked
  2561  001770  0100               	movlb	0	; () banked
  2562  001772  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2563  001776  0100               	movlb	0	; () banked
  2564  001778  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2565  00177A  ECF1  F012         	call	_Lcd_Write_Integer	;wreg free
  2566                           
  2567                           ;Funciones_Db.c: 134: PWM_init1(0xff);
  2568  00177E  0EFF               	movlw	255
  2569  001780  EC0E  F014         	call	_PWM_init1
  2570                           
  2571                           ;Funciones_Db.c: 135: PWM_init2(0xff);
  2572  001784  0EFF               	movlw	255
  2573  001786  ECFF  F013         	call	_PWM_init2
  2574                           
  2575                           ;Funciones_Db.c: 136: PWM_DutyCycle1(BluetoothDato[3]);
  2576  00178A  0101               	movlb	1	; () banked
  2577  00178C  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2578  00178E  EC28  F010         	call	_PWM_DutyCycle1
  2579                           
  2580                           ;Funciones_Db.c: 137: PWM_DutyCycle2(BluetoothDato[4]);
  2581  001792  0101               	movlb	1	; () banked
  2582  001794  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2583  001796  ECEA  F00F         	call	_PWM_DutyCycle2
  2584                           
  2585                           ;Funciones_Db.c: 138: break;
  2586  00179A  D020               	goto	l5300
  2587  00179C                     l5290:
  2588                           
  2589                           ;Funciones_Db.c: 140: Lcd_Clear();
  2590  00179C  EC62  F014         	call	_Lcd_Clear	;wreg free
  2591                           
  2592                           ;Funciones_Db.c: 141: Lcd_Set_Cursor(1, 1);
  2593  0017A0  0E01               	movlw	1
  2594  0017A2  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2595  0017A4  0E01               	movlw	1
  2596  0017A6  ECE3  F011         	call	_Lcd_Set_Cursor
  2597                           
  2598                           ;Funciones_Db.c: 142: Lcd_Write_String("Default");
  2599  0017AA  0E7F               	movlw	high STR_17
  2600  0017AC  6E1E               	movwf	Lcd_Write_String@a+1,c
  2601  0017AE  0EE2               	movlw	low STR_17
  2602  0017B0  6E1D               	movwf	Lcd_Write_String@a,c
  2603  0017B2  EC66  F010         	call	_Lcd_Write_String	;wreg free
  2604                           
  2605                           ;Funciones_Db.c: 143: break;
  2606  0017B6  D012               	goto	l5300
  2607  0017B8                     l5298:
  2608  0017B8  0101               	movlb	1	; () banked
  2609  0017BA  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2610                           
  2611                           ; Switch size 1, requested type "space"
  2612                           ; Number of cases is 5, Range of values is 1 to 5
  2613                           ; switch strategies available:
  2614                           ; Name         Instructions Cycles
  2615                           ; simple_byte           16     9 (average)
  2616                           ;	Chosen strategy is simple_byte
  2617  0017BC  0A01               	xorlw	1	; case 1
  2618  0017BE  B4D8               	btfsc	status,2,c
  2619  0017C0  D77B               	goto	l5242
  2620  0017C2  0A03               	xorlw	3	; case 2
  2621  0017C4  B4D8               	btfsc	status,2,c
  2622  0017C6  D786               	goto	l5248
  2623  0017C8  0A01               	xorlw	1	; case 3
  2624  0017CA  B4D8               	btfsc	status,2,c
  2625  0017CC  D791               	goto	l5254
  2626  0017CE  0A07               	xorlw	7	; case 4
  2627  0017D0  B4D8               	btfsc	status,2,c
  2628  0017D2  D79C               	goto	l5260
  2629  0017D4  0A01               	xorlw	1	; case 5
  2630  0017D6  B4D8               	btfsc	status,2,c
  2631  0017D8  D7B6               	goto	l5272
  2632  0017DA  D7E0               	goto	l5290
  2633  0017DC                     l5300:
  2634                           
  2635                           ;Funciones_Db.c: 145: clrBufferUSART();
  2636  0017DC  EC0E  F013         	call	_clrBufferUSART	;wreg free
  2637                           
  2638                           ;Funciones_Db.c: 146: return;
  2639  0017E0  0012               	return	
  2640  0017E2                     __end_of_Comando_Tablet:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           indf0	equ	0xFEF
  2650                           postinc0	equ	0xFEE
  2651                           fsr0h	equ	0xFEA
  2652                           fsr0l	equ	0xFE9
  2653                           wreg	equ	0xFE8
  2654                           postinc1	equ	0xFE6
  2655                           postdec1	equ	0xFE5
  2656                           fsr1l	equ	0xFE1
  2657                           postinc2	equ	0xFDE
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _putcBluetoothString *****************
  2661 ;; Defined at:
  2662 ;;		line 90 in file "Bluetooth.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  a               2   31[COMRAM] PTR unsigned char 
  2665 ;;		 -> STR_16(2), 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  i               2   35[COMRAM] int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;		None               void
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        6 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    6
  2684 ;; This function calls:
  2685 ;;		_UART1_Init
  2686 ;;		_WriteUSART
  2687 ;; This function is called by:
  2688 ;;		_Comando_Tablet
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text10
  2693  002232                     __ptext10:
  2694                           	opt stack 0
  2695  002232                     _putcBluetoothString:
  2696                           	opt stack 23
  2697                           
  2698                           ;Bluetooth.c: 92: int i;
  2699                           ;Bluetooth.c: 93: UART1_Init(51);
  2700                           
  2701                           ;incstack = 0
  2702  002232  0E33               	movlw	51
  2703  002234  EC53  F014         	call	_UART1_Init
  2704                           
  2705                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2706  002238  0E00               	movlw	0
  2707  00223A  6E25               	movwf	putcBluetoothString@i+1,c
  2708  00223C  0E00               	movlw	0
  2709  00223E  6E24               	movwf	putcBluetoothString@i,c
  2710  002240  D015               	goto	l5098
  2711  002242                     l5094:
  2712                           
  2713                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2714  002242  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2715  002246  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2716  00224A  5024               	movf	putcBluetoothString@i,w,c
  2717  00224C  2622               	addwf	??_putcBluetoothString,f,c
  2718  00224E  5025               	movf	putcBluetoothString@i+1,w,c
  2719  002250  2223               	addwfc	??_putcBluetoothString+1,f,c
  2720  002252  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2721  002256  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2722  00225A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2723  00225A  6AF8               	clrf	tblptru,c
  2724  00225C                     	endif
  2725  00225C                     	if	0	;tblptru may be non-zero
  2726  00225C                     	endif
  2727  00225C  0008               	tblrd		*
  2728  00225E  50F5               	movf	tablat,w,c
  2729  002260  EC41  F014         	call	_WriteUSART
  2730  002264                     l59:
  2731  002264  A2AC               	btfss	4012,1,c	;volatile
  2732  002266  D7FE               	goto	l59
  2733  002268  4A24               	infsnz	putcBluetoothString@i,f,c
  2734  00226A  2A25               	incf	putcBluetoothString@i+1,f,c
  2735  00226C                     l5098:
  2736  00226C  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2737  002270  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2738  002274  5024               	movf	putcBluetoothString@i,w,c
  2739  002276  2622               	addwf	??_putcBluetoothString,f,c
  2740  002278  5025               	movf	putcBluetoothString@i+1,w,c
  2741  00227A  2223               	addwfc	??_putcBluetoothString+1,f,c
  2742  00227C  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2743  002280  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2744  002284                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2745  002284  6AF8               	clrf	tblptru,c
  2746  002286                     	endif
  2747  002286                     	if	0	;tblptru may be non-zero
  2748  002286                     	endif
  2749  002286  0008               	tblrd		*
  2750  002288  50F5               	movf	tablat,w,c
  2751  00228A  0900               	iorlw	0
  2752  00228C  A4D8               	btfss	status,2,c
  2753  00228E  D7D9               	goto	l5094
  2754                           
  2755                           ;Bluetooth.c: 98: }
  2756                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2757  002290  0E4F               	movlw	79
  2758  002292  16AB               	andwf	4011,f,c	;volatile
  2759  002294  9AAC               	bcf	4012,5,c	;volatile
  2760  002296  0ECF               	movlw	207
  2761  002298  169D               	andwf	3997,f,c	;volatile
  2762                           
  2763                           ;Bluetooth.c: 100: return;
  2764  00229A  0012               	return	
  2765  00229C                     __end_of_putcBluetoothString:
  2766                           	opt stack 0
  2767                           tblptru	equ	0xFF8
  2768                           tblptrh	equ	0xFF7
  2769                           tblptrl	equ	0xFF6
  2770                           tablat	equ	0xFF5
  2771                           prodh	equ	0xFF4
  2772                           prodl	equ	0xFF3
  2773                           intcon	equ	0xFF2
  2774                           indf0	equ	0xFEF
  2775                           postinc0	equ	0xFEE
  2776                           fsr0h	equ	0xFEA
  2777                           fsr0l	equ	0xFE9
  2778                           wreg	equ	0xFE8
  2779                           postinc1	equ	0xFE6
  2780                           postdec1	equ	0xFE5
  2781                           fsr1l	equ	0xFE1
  2782                           postinc2	equ	0xFDE
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function _putcBluetoothInt *****************
  2786 ;; Defined at:
  2787 ;;		line 102 in file "Bluetooth.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  a               2   88[BANK0 ] int 
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  s              20    0[BANK1 ] unsigned char [20]
  2792 ;;  i               2   20[BANK1 ] int 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;		None               void
  2795 ;; Registers used:
  2796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2802 ;;      Params:         0       2       0       0       0       0       0       0       0
  2803 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2805 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2806 ;;Total ram usage:       24 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    8
  2809 ;; This function calls:
  2810 ;;		_UART1_Init
  2811 ;;		_WriteUSART
  2812 ;;		_sprintf
  2813 ;; This function is called by:
  2814 ;;		_Comando_Tablet
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text11
  2819  001ECC                     __ptext11:
  2820                           	opt stack 0
  2821  001ECC                     _putcBluetoothInt:
  2822                           	opt stack 21
  2823                           
  2824                           ;Bluetooth.c: 104: int i;
  2825                           ;Bluetooth.c: 105: unsigned char s[20];
  2826                           ;Bluetooth.c: 106: UART1_Init(51);
  2827                           
  2828                           ;incstack = 0
  2829  001ECC  0E33               	movlw	51
  2830  001ECE  EC53  F014         	call	_UART1_Init
  2831                           
  2832                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2833  001ED2  0101               	movlb	1	; () banked
  2834  001ED4  0E01               	movlw	high putcBluetoothInt@s
  2835  001ED6  0100               	movlb	0	; () banked
  2836  001ED8  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2837  001EDA  0101               	movlb	1	; () banked
  2838  001EDC  0E5A               	movlw	low putcBluetoothInt@s
  2839  001EDE  0100               	movlb	0	; () banked
  2840  001EE0  6F88               	movwf	sprintf@sp& (0+255),b
  2841  001EE2  0E7F               	movlw	high (STR_19+10)
  2842  001EE4  0100               	movlb	0	; () banked
  2843  001EE6  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2844  001EE8  0EB4               	movlw	low (STR_19+10)
  2845  001EEA  0100               	movlb	0	; () banked
  2846  001EEC  6F8A               	movwf	sprintf@f& (0+255),b
  2847  001EEE  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2848  001EF2  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2849  001EF6  EC0E  F000         	call	_sprintf	;wreg free
  2850                           
  2851                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2852  001EFA  0E00               	movlw	0
  2853  001EFC  0101               	movlb	1	; () banked
  2854  001EFE  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2855  001F00  0E00               	movlw	0
  2856  001F02  0101               	movlb	1	; () banked
  2857  001F04  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2858  001F06  D012               	goto	l5116
  2859  001F08                     l5112:
  2860                           
  2861                           ; BSR set to: 1
  2862                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2863  001F08  0101               	movlb	1	; () banked
  2864  001F0A  0E5A               	movlw	low putcBluetoothInt@s
  2865  001F0C  0101               	movlb	1	; () banked
  2866  001F0E  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2867  001F10  6ED9               	movwf	fsr2l,c
  2868  001F12  0101               	movlb	1	; () banked
  2869  001F14  0E01               	movlw	high putcBluetoothInt@s
  2870  001F16  0101               	movlb	1	; () banked
  2871  001F18  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2872  001F1A  6EDA               	movwf	fsr2h,c
  2873  001F1C  50DF               	movf	indf2,w,c
  2874  001F1E  EC41  F014         	call	_WriteUSART
  2875  001F22                     l68:
  2876  001F22  A2AC               	btfss	4012,1,c	;volatile
  2877  001F24  D7FE               	goto	l68
  2878  001F26  0101               	movlb	1	; () banked
  2879  001F28  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2880  001F2A  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2881  001F2C                     l5116:
  2882                           
  2883                           ; BSR set to: 1
  2884  001F2C  0101               	movlb	1	; () banked
  2885  001F2E  0E5A               	movlw	low putcBluetoothInt@s
  2886  001F30  0101               	movlb	1	; () banked
  2887  001F32  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2888  001F34  6ED9               	movwf	fsr2l,c
  2889  001F36  0101               	movlb	1	; () banked
  2890  001F38  0E01               	movlw	high putcBluetoothInt@s
  2891  001F3A  0101               	movlb	1	; () banked
  2892  001F3C  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2893  001F3E  6EDA               	movwf	fsr2h,c
  2894  001F40  50DF               	movf	indf2,w,c
  2895  001F42  A4D8               	btfss	status,2,c
  2896  001F44  D7E1               	goto	l5112
  2897                           
  2898                           ; BSR set to: 1
  2899                           ;Bluetooth.c: 112: }
  2900                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2901                           
  2902                           ; BSR set to: 1
  2903  001F46  0E4F               	movlw	79
  2904  001F48  16AB               	andwf	4011,f,c	;volatile
  2905                           
  2906                           ; BSR set to: 1
  2907  001F4A  9AAC               	bcf	4012,5,c	;volatile
  2908  001F4C  0ECF               	movlw	207
  2909  001F4E  169D               	andwf	3997,f,c	;volatile
  2910                           
  2911                           ; BSR set to: 1
  2912                           
  2913                           ; BSR set to: 1
  2914                           ;Bluetooth.c: 114: return;
  2915  001F50  0012               	return	
  2916  001F52                     __end_of_putcBluetoothInt:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           indf0	equ	0xFEF
  2926                           postinc0	equ	0xFEE
  2927                           fsr0h	equ	0xFEA
  2928                           fsr0l	equ	0xFE9
  2929                           wreg	equ	0xFE8
  2930                           postinc1	equ	0xFE6
  2931                           postdec1	equ	0xFE5
  2932                           fsr1l	equ	0xFE1
  2933                           indf2	equ	0xFDF
  2934                           postinc2	equ	0xFDE
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _WriteUSART *****************
  2940 ;; Defined at:
  2941 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  data            1    wreg     unsigned char 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  data            1   24[COMRAM] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;		None               void
  2948 ;; Registers used:
  2949 ;;		wreg
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0
  2956 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2958 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2959 ;;Total ram usage:        1 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_putcBluetoothString
  2966 ;;		_putcBluetoothInt
  2967 ;;		_putcTxU1
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text12
  2972  002882                     __ptext12:
  2973                           	opt stack 0
  2974  002882                     _WriteUSART:
  2975                           	opt stack 21
  2976                           
  2977                           ; BSR set to: 1
  2978                           ;incstack = 0
  2979                           ;WriteUSART@data stored from wreg
  2980  002882  6E19               	movwf	WriteUSART@data,c
  2981  002884  ACAC               	btfss	4012,6,c	;volatile
  2982  002886  D003               	goto	l4152
  2983  002888  90AC               	bcf	4012,0,c	;volatile
  2984  00288A  B23C               	btfsc	_USART_Status,1,c
  2985  00288C  80AC               	bsf	4012,0,c	;volatile
  2986  00288E                     l4152:
  2987  00288E  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  2988  002892  0012               	return	
  2989  002894                     __end_of_WriteUSART:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           indf0	equ	0xFEF
  2999                           postinc0	equ	0xFEE
  3000                           fsr0h	equ	0xFEA
  3001                           fsr0l	equ	0xFE9
  3002                           wreg	equ	0xFE8
  3003                           postinc1	equ	0xFE6
  3004                           postdec1	equ	0xFE5
  3005                           fsr1l	equ	0xFE1
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _UART1_Init *****************
  3013 ;; Defined at:
  3014 ;;		line 5 in file "UART1.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  bdr             1    wreg     unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  bdr             1   30[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;		None               void
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0
  3029 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3031 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3032 ;;Total ram usage:        1 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    5
  3035 ;; This function calls:
  3036 ;;		_OpenUSART
  3037 ;; This function is called by:
  3038 ;;		_BT_Init
  3039 ;;		_putcBluetoothString
  3040 ;;		_putcBluetoothInt
  3041 ;;		_main
  3042 ;;		_EstadoBluetooth
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text13
  3047  0028A6                     __ptext13:
  3048                           	opt stack 0
  3049  0028A6                     _UART1_Init:
  3050                           	opt stack 25
  3051                           
  3052                           ;incstack = 0
  3053                           ;UART1_Init@bdr stored from wreg
  3054  0028A6  6E1F               	movwf	UART1_Init@bdr,c
  3055                           
  3056                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3057  0028A8  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3058  0028AC  6A1A               	clrf	OpenUSART@spbrg+1,c
  3059  0028AE  0E7C               	movlw	124
  3060  0028B0  EC4E  F011         	call	_OpenUSART
  3061  0028B4  0012               	return	
  3062  0028B6                     __end_of_UART1_Init:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon	equ	0xFF2
  3071                           indf0	equ	0xFEF
  3072                           postinc0	equ	0xFEE
  3073                           fsr0h	equ	0xFEA
  3074                           fsr0l	equ	0xFE9
  3075                           wreg	equ	0xFE8
  3076                           postinc1	equ	0xFE6
  3077                           postdec1	equ	0xFE5
  3078                           fsr1l	equ	0xFE1
  3079                           indf2	equ	0xFDF
  3080                           postinc2	equ	0xFDE
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _OpenUSART *****************
  3086 ;; Defined at:
  3087 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  config          1    wreg     unsigned char 
  3090 ;;  spbrg           2   24[COMRAM] unsigned int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  config          1   29[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		wreg, status,2
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3102 ;;      Params:         2       0       0       0       0       0       0       0       0
  3103 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3104 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3105 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3106 ;;Total ram usage:        6 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    4
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_UART1_Init
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text14
  3117  00229C                     __ptext14:
  3118                           	opt stack 0
  3119  00229C                     _OpenUSART:
  3120                           	opt stack 25
  3121                           
  3122                           ;incstack = 0
  3123                           ;OpenUSART@config stored from wreg
  3124  00229C  6E1E               	movwf	OpenUSART@config,c
  3125  00229E  0E00               	movlw	0
  3126  0022A0  6EAC               	movwf	4012,c	;volatile
  3127  0022A2  0E00               	movlw	0
  3128  0022A4  6EAB               	movwf	4011,c	;volatile
  3129  0022A6  B01E               	btfsc	OpenUSART@config,0,c
  3130  0022A8  88AC               	bsf	4012,4,c	;volatile
  3131  0022AA  A21E               	btfss	OpenUSART@config,1,c
  3132  0022AC  D002               	goto	l4446
  3133  0022AE  8CAC               	bsf	4012,6,c	;volatile
  3134  0022B0  8CAB               	bsf	4011,6,c	;volatile
  3135  0022B2                     l4446:
  3136  0022B2  B41E               	btfsc	OpenUSART@config,2,c
  3137  0022B4  8EAC               	bsf	4012,7,c	;volatile
  3138  0022B6  A61E               	btfss	OpenUSART@config,3,c
  3139  0022B8  D002               	goto	l571
  3140  0022BA  88AB               	bsf	4011,4,c	;volatile
  3141  0022BC  D001               	goto	l4454
  3142  0022BE                     l571:
  3143  0022BE  8AAB               	bsf	4011,5,c	;volatile
  3144  0022C0                     l4454:
  3145  0022C0  B81E               	btfsc	OpenUSART@config,4,c
  3146  0022C2  84AC               	bsf	4012,2,c	;volatile
  3147  0022C4  989E               	bcf	3998,4,c	;volatile
  3148  0022C6  BA1E               	btfsc	OpenUSART@config,5,c
  3149  0022C8  86AB               	bsf	4011,3,c	;volatile
  3150  0022CA  AC1E               	btfss	OpenUSART@config,6,c
  3151  0022CC  D002               	goto	l575
  3152  0022CE  8A9D               	bsf	3997,5,c	;volatile
  3153  0022D0  D001               	goto	l576
  3154  0022D2                     l575:
  3155  0022D2  9A9D               	bcf	3997,5,c	;volatile
  3156  0022D4                     l576:
  3157  0022D4  9A9E               	bcf	3998,5,c	;volatile
  3158  0022D6  AE1E               	btfss	OpenUSART@config,7,c
  3159  0022D8  D002               	goto	l577
  3160  0022DA  889D               	bsf	3997,4,c	;volatile
  3161  0022DC  D001               	goto	l578
  3162  0022DE                     l577:
  3163  0022DE  989D               	bcf	3997,4,c	;volatile
  3164  0022E0                     l578:
  3165  0022E0  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3166  0022E4  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3167  0022E8  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3168  0022EC  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3169  0022EE  501C               	movf	??_OpenUSART+1,w,c
  3170  0022F0  6EB0               	movwf	4016,c	;volatile
  3171  0022F2  8AAC               	bsf	4012,5,c	;volatile
  3172  0022F4  8EAB               	bsf	4011,7,c	;volatile
  3173  0022F6  9C94               	bcf	3988,6,c	;volatile
  3174  0022F8  8E94               	bsf	3988,7,c	;volatile
  3175  0022FA  B8AC               	btfsc	4012,4,c	;volatile
  3176  0022FC  BEAC               	btfsc	4012,7,c	;volatile
  3177  0022FE  D001               	goto	l580
  3178  002300  8C94               	bsf	3988,6,c	;volatile
  3179  002302                     l580:
  3180  002302  0012               	return	
  3181  002304                     __end_of_OpenUSART:
  3182                           	opt stack 0
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon	equ	0xFF2
  3190                           indf0	equ	0xFEF
  3191                           postinc0	equ	0xFEE
  3192                           fsr0h	equ	0xFEA
  3193                           fsr0l	equ	0xFE9
  3194                           wreg	equ	0xFE8
  3195                           postinc1	equ	0xFE6
  3196                           postdec1	equ	0xFE5
  3197                           fsr1l	equ	0xFE1
  3198                           indf2	equ	0xFDF
  3199                           postinc2	equ	0xFDE
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _clrBufferUSART *****************
  3205 ;; Defined at:
  3206 ;;		line 68 in file "Bluetooth.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  i               2   24[COMRAM] int 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;		None               void
  3213 ;; Registers used:
  3214 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0
  3221 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3223 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3224 ;;Total ram usage:        2 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    4
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_Inicializa_Driveby
  3231 ;;		_Comando_Tablet
  3232 ;;		_main
  3233 ;;		_CheckTX
  3234 ;;		_EstadoBluetooth
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text15
  3239  00261C                     __ptext15:
  3240                           	opt stack 0
  3241  00261C                     _clrBufferUSART:
  3242                           	opt stack 26
  3243                           
  3244                           ;Bluetooth.c: 69: int i;
  3245                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3246                           
  3247                           ;incstack = 0
  3248  00261C  0E00               	movlw	0
  3249  00261E  6E1A               	movwf	clrBufferUSART@i+1,c
  3250  002620  0E00               	movlw	0
  3251  002622  6E19               	movwf	clrBufferUSART@i,c
  3252  002624  501A               	movf	clrBufferUSART@i+1,w,c
  3253  002626  0A80               	xorlw	128
  3254  002628  0F80               	addlw	-128
  3255  00262A  0E14               	movlw	20
  3256  00262C  B4D8               	btfsc	status,2,c
  3257  00262E  5C19               	subwf	clrBufferUSART@i,w,c
  3258  002630  B0D8               	btfsc	status,0,c
  3259  002632  D00F               	goto	l54
  3260                           
  3261                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3262  002634  0101               	movlb	1	; () banked
  3263  002636  0E28               	movlw	low _BluetoothDato
  3264  002638  2419               	addwf	clrBufferUSART@i,w,c
  3265  00263A  6ED9               	movwf	fsr2l,c
  3266  00263C  0101               	movlb	1	; () banked
  3267  00263E  0E01               	movlw	high _BluetoothDato
  3268  002640  201A               	addwfc	clrBufferUSART@i+1,w,c
  3269  002642  6EDA               	movwf	fsr2h,c
  3270  002644  0E00               	movlw	0
  3271  002646  6EDF               	movwf	indf2,c
  3272                           
  3273                           ; BSR set to: 1
  3274                           ;Bluetooth.c: 72: cad = 0;
  3275  002648  0E00               	movlw	0
  3276  00264A  6E3D               	movwf	_cad,c
  3277                           
  3278                           ; BSR set to: 1
  3279  00264C  4A19               	infsnz	clrBufferUSART@i,f,c
  3280  00264E  2A1A               	incf	clrBufferUSART@i+1,f,c
  3281  002650  D7E9               	goto	L2
  3282  002652                     l54:
  3283  002652  0012               	return	
  3284  002654                     __end_of_clrBufferUSART:
  3285                           	opt stack 0
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           indf0	equ	0xFEF
  3294                           postinc0	equ	0xFEE
  3295                           fsr0h	equ	0xFEA
  3296                           fsr0l	equ	0xFE9
  3297                           wreg	equ	0xFE8
  3298                           postinc1	equ	0xFE6
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _PWM_init2 *****************
  3308 ;; Defined at:
  3309 ;;		line 42 in file "pwm.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  period          1    wreg     unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  period          1   27[COMRAM] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0
  3324 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3326 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3327 ;;Total ram usage:        1 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    5
  3330 ;; This function calls:
  3331 ;;		_OpenPWM2
  3332 ;; This function is called by:
  3333 ;;		_Comando_Tablet
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text16
  3338  0027FE                     __ptext16:
  3339                           	opt stack 0
  3340  0027FE                     _PWM_init2:
  3341                           	opt stack 24
  3342                           
  3343                           ;incstack = 0
  3344                           ;PWM_init2@period stored from wreg
  3345  0027FE  6E1C               	movwf	PWM_init2@period,c
  3346                           
  3347                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3348  002800  0EFE               	movlw	254
  3349  002802  6E47               	movwf	_Timer2Config,c
  3350                           
  3351                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3352  002804  5047               	movf	_Timer2Config,w,c
  3353  002806  0BFB               	andlw	251
  3354  002808  6ECA               	movwf	4042,c	;volatile
  3355                           
  3356                           ;pwm.c: 47: TMR2 = 0;
  3357  00280A  0E00               	movlw	0
  3358  00280C  6ECC               	movwf	4044,c	;volatile
  3359                           
  3360                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3361  00280E  929E               	bcf	3998,1,c	;volatile
  3362                           
  3363                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3364  002810  929D               	bcf	3997,1,c	;volatile
  3365                           
  3366                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3367  002812  84CA               	bsf	4042,2,c	;volatile
  3368                           
  3369                           ;pwm.c: 51: OpenPWM2(period);
  3370  002814  501C               	movf	PWM_init2@period,w,c
  3371  002816  EC9A  F012         	call	_OpenPWM2
  3372                           
  3373                           ;pwm.c: 53: return;
  3374  00281A  0012               	return	
  3375  00281C                     __end_of_PWM_init2:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           intcon	equ	0xFF2
  3384                           indf0	equ	0xFEF
  3385                           postinc0	equ	0xFEE
  3386                           fsr0h	equ	0xFEA
  3387                           fsr0l	equ	0xFE9
  3388                           wreg	equ	0xFE8
  3389                           postinc1	equ	0xFE6
  3390                           postdec1	equ	0xFE5
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _OpenPWM2 *****************
  3399 ;; Defined at:
  3400 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  period          1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  period          1   25[COMRAM] unsigned char 
  3405 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3406 ;;  pmmode          1    0        unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;		None               void
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3416 ;;      Params:         0       0       0       0       0       0       0       0       0
  3417 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3418 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3419 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3420 ;;Total ram usage:        3 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    4
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_PWM_init2
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text17
  3431  002534                     __ptext17:
  3432                           	opt stack 0
  3433  002534                     _OpenPWM2:
  3434                           	opt stack 24
  3435                           
  3436                           ;incstack = 0
  3437                           ;OpenPWM2@period stored from wreg
  3438  002534  6E1A               	movwf	OpenPWM2@period,c
  3439  002536  0E0C               	movlw	12
  3440  002538  6EBA               	movwf	4026,c	;volatile
  3441  00253A  0E05               	movlw	5
  3442  00253C  6EF6               	movwf	tblptrl,c
  3443  00253E                     	if	1	;There is more than 1 active tblptr byte
  3444  00253E  0E00               	movlw	0
  3445  002540  6EF7               	movwf	tblptrh,c
  3446  002542                     	endif
  3447  002542                     	if	1	;There are 3 active tblptr bytes
  3448  002542  0E30               	movlw	48
  3449  002544  6EF8               	movwf	tblptru,c
  3450  002546                     	endif
  3451  002546  0008               	tblrd		*
  3452  002548  CFF5 F019          	movff	tablat,??_OpenPWM2
  3453  00254C  A019               	btfss	??_OpenPWM2,0,c
  3454  00254E  D002               	goto	l3610
  3455  002550  681B               	setf	OpenPWM2@ccp2mx,c
  3456  002552  D002               	goto	l537
  3457  002554                     l3610:
  3458  002554  0E00               	movlw	0
  3459  002556  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3460  002558                     l537:
  3461  002558  501B               	movf	OpenPWM2@ccp2mx,w,c
  3462  00255A  B4D8               	btfsc	status,2,c
  3463  00255C  D002               	goto	l538
  3464  00255E  9294               	bcf	3988,1,c	;volatile
  3465  002560  D001               	goto	l539
  3466  002562                     l538:
  3467  002562  9693               	bcf	3987,3,c	;volatile
  3468  002564                     l539:
  3469  002564  94CA               	bcf	4042,2,c	;volatile
  3470  002566  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3471  00256A  84CA               	bsf	4042,2,c	;volatile
  3472  00256C  0012               	return	
  3473  00256E                     __end_of_OpenPWM2:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           indf0	equ	0xFEF
  3483                           postinc0	equ	0xFEE
  3484                           fsr0h	equ	0xFEA
  3485                           fsr0l	equ	0xFE9
  3486                           wreg	equ	0xFE8
  3487                           postinc1	equ	0xFE6
  3488                           postdec1	equ	0xFE5
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _PWM_init1 *****************
  3497 ;; Defined at:
  3498 ;;		line 20 in file "pwm.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  period          1    wreg     unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  period          1   25[COMRAM] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;		None               void
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0
  3513 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3515 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3516 ;;Total ram usage:        1 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    5
  3519 ;; This function calls:
  3520 ;;		_OpenPWM1
  3521 ;; This function is called by:
  3522 ;;		_Comando_Tablet
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text18
  3527  00281C                     __ptext18:
  3528                           	opt stack 0
  3529  00281C                     _PWM_init1:
  3530                           	opt stack 24
  3531                           
  3532                           ;incstack = 0
  3533                           ;PWM_init1@period stored from wreg
  3534  00281C  6E1A               	movwf	PWM_init1@period,c
  3535                           
  3536                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3537  00281E  0EFE               	movlw	254
  3538  002820  6E47               	movwf	_Timer2Config,c
  3539                           
  3540                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3541  002822  5047               	movf	_Timer2Config,w,c
  3542  002824  0BFB               	andlw	251
  3543  002826  6ECA               	movwf	4042,c	;volatile
  3544                           
  3545                           ;pwm.c: 25: TMR2 = 0;
  3546  002828  0E00               	movlw	0
  3547  00282A  6ECC               	movwf	4044,c	;volatile
  3548                           
  3549                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3550  00282C  929E               	bcf	3998,1,c	;volatile
  3551                           
  3552                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3553  00282E  929D               	bcf	3997,1,c	;volatile
  3554                           
  3555                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3556  002830  84CA               	bsf	4042,2,c	;volatile
  3557                           
  3558                           ;pwm.c: 29: OpenPWM1(period);
  3559  002832  501A               	movf	PWM_init1@period,w,c
  3560  002834  EC4A  F014         	call	_OpenPWM1
  3561                           
  3562                           ;pwm.c: 31: return;
  3563  002838  0012               	return	
  3564  00283A                     __end_of_PWM_init1:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           indf0	equ	0xFEF
  3574                           postinc0	equ	0xFEE
  3575                           fsr0h	equ	0xFEA
  3576                           fsr0l	equ	0xFE9
  3577                           wreg	equ	0xFE8
  3578                           postinc1	equ	0xFE6
  3579                           postdec1	equ	0xFE5
  3580                           fsr1l	equ	0xFE1
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           fsr2h	equ	0xFDA
  3584                           fsr2l	equ	0xFD9
  3585                           status	equ	0xFD8
  3586                           
  3587 ;; *************** function _OpenPWM1 *****************
  3588 ;; Defined at:
  3589 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  period          1    wreg     unsigned char 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  period          1   24[COMRAM] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, status,2, status,0
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0
  3604 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3606 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3607 ;;Total ram usage:        1 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		_PWM_init1
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text19
  3618  002894                     __ptext19:
  3619                           	opt stack 0
  3620  002894                     _OpenPWM1:
  3621                           	opt stack 24
  3622                           
  3623                           ;incstack = 0
  3624                           ;OpenPWM1@period stored from wreg
  3625  002894  6E19               	movwf	OpenPWM1@period,c
  3626  002896  0E0C               	movlw	12
  3627  002898  12BD               	iorwf	4029,f,c	;volatile
  3628  00289A  9494               	bcf	3988,2,c	;volatile
  3629  00289C  94CA               	bcf	4042,2,c	;volatile
  3630  00289E  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3631  0028A2  84CA               	bsf	4042,2,c	;volatile
  3632  0028A4  0012               	return	
  3633  0028A6                     __end_of_OpenPWM1:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           indf0	equ	0xFEF
  3643                           postinc0	equ	0xFEE
  3644                           fsr0h	equ	0xFEA
  3645                           fsr0l	equ	0xFE9
  3646                           wreg	equ	0xFE8
  3647                           postinc1	equ	0xFE6
  3648                           postdec1	equ	0xFE5
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           fsr2h	equ	0xFDA
  3653                           fsr2l	equ	0xFD9
  3654                           status	equ	0xFD8
  3655                           
  3656 ;; *************** function _PWM_DutyCycle2 *****************
  3657 ;; Defined at:
  3658 ;;		line 55 in file "pwm.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  percentageDu    1    wreg     unsigned char 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3663 ;;  DC              2   41[BANK0 ] unsigned int 
  3664 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;		None               void
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0
  3675 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3676 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3677 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3678 ;;Total ram usage:        9 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    6
  3681 ;; This function calls:
  3682 ;;		_SetDCPWM2
  3683 ;;		___ftmul
  3684 ;;		___fttol
  3685 ;;		___lbtoft
  3686 ;; This function is called by:
  3687 ;;		_Comando_Tablet
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text20
  3692  001FD4                     __ptext20:
  3693                           	opt stack 0
  3694  001FD4                     _PWM_DutyCycle2:
  3695                           	opt stack 23
  3696                           
  3697                           ;incstack = 0
  3698                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3699  001FD4  0100               	movlb	0	; () banked
  3700  001FD6  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3704  001FD8  0E00               	movlw	0
  3705  001FDA  0100               	movlb	0	; () banked
  3706  001FDC  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3707  001FDE  0E00               	movlw	0
  3708  001FE0  0100               	movlb	0	; () banked
  3709  001FE2  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3710  001FE4  0E00               	movlw	0
  3711  001FE6  0100               	movlb	0	; () banked
  3712  001FE8  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3713  001FEA  0E00               	movlw	0
  3714  001FEC  0100               	movlb	0	; () banked
  3715  001FEE  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3719  001FF0  0EAE               	movlw	174
  3720  001FF2  0100               	movlb	0	; () banked
  3721  001FF4  6F63               	movwf	___ftmul@f2& (0+255),b
  3722  001FF6  0E23               	movlw	35
  3723  001FF8  0100               	movlb	0	; () banked
  3724  001FFA  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3725  001FFC  0E41               	movlw	65
  3726  001FFE  0100               	movlb	0	; () banked
  3727  002000  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3728  002002  0100               	movlb	0	; () banked
  3729  002004  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3730  002006  ECCD  F013         	call	___lbtoft
  3731  00200A  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3732  00200E  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3733  002012  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3734  002016  EC6F  F009         	call	___ftmul	;wreg free
  3735  00201A  C060  F073         	movff	?___ftmul,___fttol@f1
  3736  00201E  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3737  002022  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3738  002026  EC1B  F00A         	call	___fttol	;wreg free
  3739  00202A  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3740  00202E  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3741  002032  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3742  002036  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3743  00203A  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3744  00203E  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3745                           
  3746                           ;pwm.c: 60: SetDCPWM2(DC);
  3747  002042  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3748  002046  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3749  00204A  ECB7  F012         	call	_SetDCPWM2	;wreg free
  3750                           
  3751                           ;pwm.c: 61: return;
  3752  00204E  0012               	return	
  3753  002050                     __end_of_PWM_DutyCycle2:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           indf0	equ	0xFEF
  3763                           postinc0	equ	0xFEE
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           postinc1	equ	0xFE6
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _SetDCPWM2 *****************
  3777 ;; Defined at:
  3778 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3783 ;; Return value:  Size  Location     Type
  3784 ;;		None               void
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3792 ;;      Params:         2       0       0       0       0       0       0       0       0
  3793 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3794 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3795 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3796 ;;Total ram usage:        6 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    4
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_PWM_DutyCycle2
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text21
  3807  00256E                     __ptext21:
  3808                           	opt stack 0
  3809  00256E                     _SetDCPWM2:
  3810                           	opt stack 24
  3811                           
  3812                           ;incstack = 0
  3813  00256E  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  3814  002572  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  3815  002576  0E06               	movlw	6
  3816  002578                     u3425:
  3817  002578  90D8               	bcf	status,0,c
  3818  00257A  361B               	rlcf	??_SetDCPWM2,f,c
  3819  00257C  361C               	rlcf	??_SetDCPWM2+1,f,c
  3820  00257E  2EE8               	decfsz	wreg,f,c
  3821  002580  D7FB               	goto	u3425
  3822  002582  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  3823  002586  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  3824  00258A  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  3825  00258E  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  3826  002592  90D8               	bcf	status,0,c
  3827  002594  321B               	rrcf	??_SetDCPWM2,f,c
  3828  002596  90D8               	bcf	status,0,c
  3829  002598  321B               	rrcf	??_SetDCPWM2,f,c
  3830  00259A  0E30               	movlw	48
  3831  00259C  161B               	andwf	??_SetDCPWM2,f,c
  3832  00259E  50BA               	movf	4026,w,c	;volatile
  3833  0025A0  0BCF               	andlw	207
  3834  0025A2  101B               	iorwf	??_SetDCPWM2,w,c
  3835  0025A4  6EBA               	movwf	4026,c	;volatile
  3836  0025A6  0012               	return	
  3837  0025A8                     __end_of_SetDCPWM2:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           indf0	equ	0xFEF
  3847                           postinc0	equ	0xFEE
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           postinc1	equ	0xFE6
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _PWM_DutyCycle1 *****************
  3861 ;; Defined at:
  3862 ;;		line 33 in file "pwm.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  percentageDu    1    wreg     unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3867 ;;  DC              2   41[BANK0 ] unsigned int 
  3868 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;		None               void
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0
  3879 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3880 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3881 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3882 ;;Total ram usage:        9 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    6
  3885 ;; This function calls:
  3886 ;;		_SetDCPWM1
  3887 ;;		___ftmul
  3888 ;;		___fttol
  3889 ;;		___lbtoft
  3890 ;; This function is called by:
  3891 ;;		_Comando_Tablet
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text22
  3896  002050                     __ptext22:
  3897                           	opt stack 0
  3898  002050                     _PWM_DutyCycle1:
  3899                           	opt stack 23
  3900                           
  3901                           ;incstack = 0
  3902                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  3903  002050  0100               	movlb	0	; () banked
  3904  002052  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  3908  002054  0E00               	movlw	0
  3909  002056  0100               	movlb	0	; () banked
  3910  002058  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  3911  00205A  0E00               	movlw	0
  3912  00205C  0100               	movlb	0	; () banked
  3913  00205E  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  3914  002060  0E00               	movlw	0
  3915  002062  0100               	movlb	0	; () banked
  3916  002064  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  3917  002066  0E00               	movlw	0
  3918  002068  0100               	movlb	0	; () banked
  3919  00206A  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  3923  00206C  0EAE               	movlw	174
  3924  00206E  0100               	movlb	0	; () banked
  3925  002070  6F63               	movwf	___ftmul@f2& (0+255),b
  3926  002072  0E23               	movlw	35
  3927  002074  0100               	movlb	0	; () banked
  3928  002076  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3929  002078  0E41               	movlw	65
  3930  00207A  0100               	movlb	0	; () banked
  3931  00207C  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3932  00207E  0100               	movlb	0	; () banked
  3933  002080  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  3934  002082  ECCD  F013         	call	___lbtoft
  3935  002086  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3936  00208A  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3937  00208E  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3938  002092  EC6F  F009         	call	___ftmul	;wreg free
  3939  002096  C060  F073         	movff	?___ftmul,___fttol@f1
  3940  00209A  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3941  00209E  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3942  0020A2  EC1B  F00A         	call	___fttol	;wreg free
  3943  0020A6  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  3944  0020AA  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  3945  0020AE  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  3946  0020B2  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  3947  0020B6  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  3948  0020BA  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  3949                           
  3950                           ;pwm.c: 38: SetDCPWM1(DC);
  3951  0020BE  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  3952  0020C2  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  3953  0020C6  ECD4  F012         	call	_SetDCPWM1	;wreg free
  3954                           
  3955                           ;pwm.c: 39: return;
  3956  0020CA  0012               	return	
  3957  0020CC                     __end_of_PWM_DutyCycle1:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           indf0	equ	0xFEF
  3967                           postinc0	equ	0xFEE
  3968                           fsr0h	equ	0xFEA
  3969                           fsr0l	equ	0xFE9
  3970                           wreg	equ	0xFE8
  3971                           postinc1	equ	0xFE6
  3972                           postdec1	equ	0xFE5
  3973                           fsr1l	equ	0xFE1
  3974                           indf2	equ	0xFDF
  3975                           postinc2	equ	0xFDE
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function ___lbtoft *****************
  3981 ;; Defined at:
  3982 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;  c               1    wreg     unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  c               1   35[COMRAM] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  3   32[COMRAM] float 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3996 ;;      Params:         3       0       0       0       0       0       0       0       0
  3997 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3999 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4000 ;;Total ram usage:        4 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    5
  4003 ;; This function calls:
  4004 ;;		___ftpack
  4005 ;; This function is called by:
  4006 ;;		_PWM_DutyCycle1
  4007 ;;		_PWM_DutyCycle2
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text23
  4012  00279A                     __ptext23:
  4013                           	opt stack 0
  4014  00279A                     ___lbtoft:
  4015                           	opt stack 23
  4016                           
  4017                           ;incstack = 0
  4018                           ;___lbtoft@c stored from wreg
  4019  00279A  6E24               	movwf	___lbtoft@c,c
  4020  00279C  5024               	movf	___lbtoft@c,w,c
  4021  00279E  6E19               	movwf	___ftpack@arg,c
  4022  0027A0  6A1A               	clrf	___ftpack@arg+1,c
  4023  0027A2  6A1B               	clrf	___ftpack@arg+2,c
  4024  0027A4  0E8E               	movlw	142
  4025  0027A6  6E1C               	movwf	___ftpack@exp,c
  4026  0027A8  0E00               	movlw	0
  4027  0027AA  6E1D               	movwf	___ftpack@sign,c
  4028  0027AC  EC48  F00D         	call	___ftpack	;wreg free
  4029  0027B0  C019  F021         	movff	?___ftpack,?___lbtoft
  4030  0027B4  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4031  0027B8  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4032  0027BC  0012               	return	
  4033  0027BE                     __end_of___lbtoft:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           indf0	equ	0xFEF
  4043                           postinc0	equ	0xFEE
  4044                           fsr0h	equ	0xFEA
  4045                           fsr0l	equ	0xFE9
  4046                           wreg	equ	0xFE8
  4047                           postinc1	equ	0xFE6
  4048                           postdec1	equ	0xFE5
  4049                           fsr1l	equ	0xFE1
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _SetDCPWM1 *****************
  4057 ;; Defined at:
  4058 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4063 ;; Return value:  Size  Location     Type
  4064 ;;		None               void
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4072 ;;      Params:         2       0       0       0       0       0       0       0       0
  4073 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4074 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4075 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4076 ;;Total ram usage:        6 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    4
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_PWM_DutyCycle1
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text24
  4087  0025A8                     __ptext24:
  4088                           	opt stack 0
  4089  0025A8                     _SetDCPWM1:
  4090                           	opt stack 24
  4091                           
  4092                           ;incstack = 0
  4093  0025A8  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4094  0025AC  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4095  0025B0  0E06               	movlw	6
  4096  0025B2                     u3395:
  4097  0025B2  90D8               	bcf	status,0,c
  4098  0025B4  361B               	rlcf	??_SetDCPWM1,f,c
  4099  0025B6  361C               	rlcf	??_SetDCPWM1+1,f,c
  4100  0025B8  2EE8               	decfsz	wreg,f,c
  4101  0025BA  D7FB               	goto	u3395
  4102  0025BC  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4103  0025C0  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4104  0025C4  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4105  0025C8  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4106  0025CC  90D8               	bcf	status,0,c
  4107  0025CE  321B               	rrcf	??_SetDCPWM1,f,c
  4108  0025D0  90D8               	bcf	status,0,c
  4109  0025D2  321B               	rrcf	??_SetDCPWM1,f,c
  4110  0025D4  0E30               	movlw	48
  4111  0025D6  161B               	andwf	??_SetDCPWM1,f,c
  4112  0025D8  50BD               	movf	4029,w,c	;volatile
  4113  0025DA  0BCF               	andlw	207
  4114  0025DC  101B               	iorwf	??_SetDCPWM1,w,c
  4115  0025DE  6EBD               	movwf	4029,c	;volatile
  4116  0025E0  0012               	return	
  4117  0025E2                     __end_of_SetDCPWM1:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           indf0	equ	0xFEF
  4127                           postinc0	equ	0xFEE
  4128                           fsr0h	equ	0xFEA
  4129                           fsr0l	equ	0xFE9
  4130                           wreg	equ	0xFE8
  4131                           postinc1	equ	0xFE6
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _Lcd_Write_Integer *****************
  4141 ;; Defined at:
  4142 ;;		line 113 in file "lcd.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  a               2   88[BANK0 ] int 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  s              20    0[BANK1 ] unsigned char [20]
  4147 ;; Return value:  Size  Location     Type
  4148 ;;		None               void
  4149 ;; Registers used:
  4150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4156 ;;      Params:         0       2       0       0       0       0       0       0       0
  4157 ;;      Locals:         0       0      20       0       0       0       0       0       0
  4158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4159 ;;      Totals:         0       2      20       0       0       0       0       0       0
  4160 ;;Total ram usage:       22 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    8
  4163 ;; This function calls:
  4164 ;;		_Lcd_Write_String
  4165 ;;		_sprintf
  4166 ;; This function is called by:
  4167 ;;		_Comando_Tablet
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text25
  4172  0025E2                     __ptext25:
  4173                           	opt stack 0
  4174  0025E2                     _Lcd_Write_Integer:
  4175                           	opt stack 21
  4176                           
  4177                           ;lcd.c: 114: unsigned char s[20];
  4178                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4179                           
  4180                           ;incstack = 0
  4181  0025E2  0101               	movlb	1	; () banked
  4182  0025E4  0E01               	movlw	high Lcd_Write_Integer@s
  4183  0025E6  0100               	movlb	0	; () banked
  4184  0025E8  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4185  0025EA  0101               	movlb	1	; () banked
  4186  0025EC  0E5A               	movlw	low Lcd_Write_Integer@s
  4187  0025EE  0100               	movlb	0	; () banked
  4188  0025F0  6F88               	movwf	sprintf@sp& (0+255),b
  4189  0025F2  0E7F               	movlw	high STR_19
  4190  0025F4  0100               	movlb	0	; () banked
  4191  0025F6  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4192  0025F8  0EAA               	movlw	low STR_19
  4193  0025FA  0100               	movlb	0	; () banked
  4194  0025FC  6F8A               	movwf	sprintf@f& (0+255),b
  4195  0025FE  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4196  002602  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4197  002606  EC0E  F000         	call	_sprintf	;wreg free
  4198                           
  4199                           ;lcd.c: 117: Lcd_Write_String(s);
  4200  00260A  0101               	movlb	1	; () banked
  4201  00260C  0E01               	movlw	high Lcd_Write_Integer@s
  4202  00260E  6E1E               	movwf	Lcd_Write_String@a+1,c
  4203  002610  0101               	movlb	1	; () banked
  4204  002612  0E5A               	movlw	low Lcd_Write_Integer@s
  4205  002614  6E1D               	movwf	Lcd_Write_String@a,c
  4206  002616  EC66  F010         	call	_Lcd_Write_String	;wreg free
  4207  00261A  0012               	return	
  4208  00261C                     __end_of_Lcd_Write_Integer:
  4209                           	opt stack 0
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           prodh	equ	0xFF4
  4215                           prodl	equ	0xFF3
  4216                           intcon	equ	0xFF2
  4217                           indf0	equ	0xFEF
  4218                           postinc0	equ	0xFEE
  4219                           fsr0h	equ	0xFEA
  4220                           fsr0l	equ	0xFE9
  4221                           wreg	equ	0xFE8
  4222                           postinc1	equ	0xFE6
  4223                           postdec1	equ	0xFE5
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _sprintf *****************
  4232 ;; Defined at:
  4233 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4236 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4237 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4238 ;;		 -> STR_19(13), STR_18(11), STR_5(3), 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  vd              4   60[BANK0 ] unsigned long 
  4241 ;;  vd              4   64[BANK0 ] unsigned long 
  4242 ;;  _val            5   77[BANK0 ] struct .
  4243 ;;  fval            3   84[BANK0 ] struct .
  4244 ;;  integ           3   72[BANK0 ] struct .
  4245 ;;  ival            3    0        struct .
  4246 ;;  exp             2   82[BANK0 ] int 
  4247 ;;  prec            2   75[BANK0 ] int 
  4248 ;;  flag            2   70[BANK0 ] unsigned short 
  4249 ;;  ap              2   68[BANK0 ] PTR void [1]
  4250 ;;		 -> ?_sprintf(2), 
  4251 ;;  width           2    0        int 
  4252 ;;  c               1   87[BANK0 ] char 
  4253 ;;  d               1    0        unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2   40[BANK0 ] int 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4263 ;;      Params:         0       7       0       0       0       0       0       0       0
  4264 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4265 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4266 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4267 ;;Total ram usage:       48 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    7
  4270 ;; This function calls:
  4271 ;;		___awdiv
  4272 ;;		___ftadd
  4273 ;;		___ftge
  4274 ;;		___ftmul
  4275 ;;		___ftneg
  4276 ;;		___ftsub
  4277 ;;		___fttol
  4278 ;;		___lldiv
  4279 ;;		___llmod
  4280 ;;		___lltoft
  4281 ;;		___wmul
  4282 ;;		__div_to_l_
  4283 ;;		__tdiv_to_l_
  4284 ;;		_fround
  4285 ;;		_scale
  4286 ;; This function is called by:
  4287 ;;		_putcBluetoothInt
  4288 ;;		_Lcd_Write_Integer
  4289 ;;		_Lcd_Write_Float
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text26
  4294  00001C                     __ptext26:
  4295                           	opt stack 0
  4296  00001C                     _sprintf:
  4297                           	opt stack 21
  4298                           
  4299                           ;doprnt.c: 494: va_list ap;
  4300                           ;doprnt.c: 499: signed char c;
  4301                           ;doprnt.c: 501: int width;
  4302                           ;doprnt.c: 504: int prec;
  4303                           ;doprnt.c: 508: unsigned short flag;
  4304                           ;doprnt.c: 515: char d;
  4305                           ;doprnt.c: 516: double fval, integ;
  4306                           ;doprnt.c: 517: int exp;
  4307                           ;doprnt.c: 518: double ival;
  4308                           ;doprnt.c: 519: union {
  4309                           ;doprnt.c: 520: unsigned long _val;
  4310                           ;doprnt.c: 521: struct {
  4311                           ;doprnt.c: 522: const char * _cp;
  4312                           ;doprnt.c: 523: unsigned _len;
  4313                           ;doprnt.c: 524: } _str;
  4314                           ;doprnt.c: 525: } _val;
  4315                           ;doprnt.c: 542: *ap = __va_start();
  4316                           
  4317                           ;incstack = 0
  4318  00001C  0100               	movlb	0	; () banked
  4319  00001E  0E00               	movlw	high (?_sprintf+4)
  4320  000020  0100               	movlb	0	; () banked
  4321  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4322  000024  0100               	movlb	0	; () banked
  4323  000026  0E8C               	movlw	low (?_sprintf+4)
  4324  000028  0100               	movlb	0	; () banked
  4325  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4326                           
  4327                           ;doprnt.c: 545: while(c = *f++) {
  4328  00002C  EF87  F004         	goto	l5018
  4329  000030                     l4816:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;doprnt.c: 547: if(c != '%')
  4333  000030  0100               	movlb	0	; () banked
  4334  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4335  000034  0A25               	xorlw	37
  4336  000036  B4D8               	btfsc	status,2,c
  4337  000038  D00C               	goto	l4822
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;doprnt.c: 549: {
  4341                           ;doprnt.c: 550: ((*sp++ = (c)));
  4342  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4343  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4344  000042  0100               	movlb	0	; () banked
  4345  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4346                           
  4347                           ; BSR set to: 0
  4348  000048  0100               	movlb	0	; () banked
  4349  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4350  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4351                           
  4352                           ;doprnt.c: 551: continue;
  4353  00004E  EF87  F004         	goto	l5018
  4354  000052                     l4822:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 552: }
  4358                           ;doprnt.c: 557: flag = 0;
  4359  000052  0E00               	movlw	0
  4360  000054  0100               	movlb	0	; () banked
  4361  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4362  000058  0E00               	movlw	0
  4363  00005A  0100               	movlb	0	; () banked
  4364  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4365                           
  4366                           ;doprnt.c: 644: switch(c = *f++) {
  4367  00005E  D003               	goto	l4828
  4368  000060                     l4824:
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 672: flag |= 0x400;
  4372  000060  0100               	movlb	0	; () banked
  4373  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4374                           
  4375                           ;doprnt.c: 673: break;
  4376  000064  D01E               	goto	l4830
  4377  000066                     l4828:
  4378                           
  4379                           ; BSR set to: 0
  4380  000066  0100               	movlb	0	; () banked
  4381  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4382  00006C  0100               	movlb	0	; () banked
  4383  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4384  000072  0100               	movlb	0	; () banked
  4385  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4386  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4387  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4388  000078  6AF8               	clrf	tblptru,c
  4389  00007A                     	endif
  4390  00007A                     	if	0	;tblptru may be non-zero
  4391  00007A                     	endif
  4392  00007A  0008               	tblrd		*
  4393  00007C  0100               	movlb	0	; () banked
  4394  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4395  000082  0100               	movlb	0	; () banked
  4396  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4397                           
  4398                           ; Switch size 1, requested type "space"
  4399                           ; Number of cases is 4, Range of values is 0 to 105
  4400                           ; switch strategies available:
  4401                           ; Name         Instructions Cycles
  4402                           ; simple_byte           13     7 (average)
  4403                           ;	Chosen strategy is simple_byte
  4404  000086  0A00               	xorlw	0	; case 0
  4405  000088  B4D8               	btfsc	status,2,c
  4406  00008A  EF99  F004         	goto	l5020
  4407  00008E  0A64               	xorlw	100	; case 100
  4408  000090  B4D8               	btfsc	status,2,c
  4409  000092  D007               	goto	l4830
  4410  000094  0A02               	xorlw	2	; case 102
  4411  000096  B4D8               	btfsc	status,2,c
  4412  000098  D7E3               	goto	l4824
  4413  00009A  0A0F               	xorlw	15	; case 105
  4414  00009C  A4D8               	btfss	status,2,c
  4415  00009E  EF87  F004         	goto	l5018
  4416  0000A2                     l4830:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 834: if(flag & (0x700)) {
  4420  0000A2  0E07               	movlw	7
  4421  0000A4  0100               	movlb	0	; () banked
  4422  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4423  0000A8  B4D8               	btfsc	status,2,c
  4424  0000AA  D348               	goto	l4978
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;doprnt.c: 838: prec = 6;
  4428  0000AC  0E00               	movlw	0
  4429  0000AE  0100               	movlb	0	; () banked
  4430  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4431  0000B2  0E06               	movlw	6
  4432  0000B4  0100               	movlb	0	; () banked
  4433  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4437  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4438  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4439  0000C0  0100               	movlb	0	; () banked
  4440  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4441  0000C6  0100               	movlb	0	; () banked
  4442  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4443  0000CC  0100               	movlb	0	; () banked
  4444  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4445                           
  4446                           ; BSR set to: 0
  4447  0000D2  0E03               	movlw	3
  4448  0000D4  0100               	movlb	0	; () banked
  4449  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4450  0000D8  0E00               	movlw	0
  4451  0000DA  0100               	movlb	0	; () banked
  4452  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;doprnt.c: 840: if(fval < 0.0) {
  4456  0000DE  0100               	movlb	0	; () banked
  4457  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4458  0000E2  0A80               	xorlw	128
  4459  0000E4  0F80               	addlw	128
  4460  0000E6  E107               	bnz	u5005
  4461  0000E8  0E00               	movlw	0
  4462  0000EA  0100               	movlb	0	; () banked
  4463  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4464  0000EE  E103               	bnz	u5005
  4465  0000F0  0E00               	movlw	0
  4466  0000F2  0100               	movlb	0	; () banked
  4467  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4468  0000F6                     u5005:
  4469  0000F6  B0D8               	btfsc	status,0,c
  4470  0000F8  D011               	goto	l4844
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;doprnt.c: 841: fval = -fval;
  4474  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4475  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4476  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4477  000106  ECBA  F013         	call	___ftneg	;wreg free
  4478  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4479  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4480  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4481                           
  4482                           ;doprnt.c: 842: flag |= 0x03;
  4483  000116  0E03               	movlw	3
  4484  000118  0100               	movlb	0	; () banked
  4485  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4486  00011C                     l4844:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;doprnt.c: 843: }
  4490                           ;doprnt.c: 844: exp = 0;
  4491  00011C  0E00               	movlw	0
  4492  00011E  0100               	movlb	0	; () banked
  4493  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4494  000122  0E00               	movlw	0
  4495  000124  0100               	movlb	0	; () banked
  4496  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;doprnt.c: 845: if( fval!=0) {
  4500  000128  0E7F               	movlw	127
  4501  00012A  0100               	movlb	0	; () banked
  4502  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4503  00012E  0100               	movlb	0	; () banked
  4504  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4505  000132  0100               	movlb	0	; () banked
  4506  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4507  000136  B4D8               	btfsc	status,2,c
  4508  000138  D09C               	goto	l4872
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4512  00013A  0E82               	movlw	130
  4513  00013C  0100               	movlb	0	; () banked
  4514  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4515  000140  0EFF               	movlw	255
  4516  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4517  000144  0100               	movlb	0	; () banked
  4518  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4519  00014A  0100               	movlb	0	; () banked
  4520  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4521  000150  0100               	movlb	0	; () banked
  4522  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4523  000156  0100               	movlb	0	; () banked
  4524  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4525  00015C  0E10               	movlw	16
  4526  00015E  D006               	goto	u5020
  4527  000160                     u5025:
  4528  000160  0100               	movlb	0	; () banked
  4529  000162  90D8               	bcf	status,0,c
  4530  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4531  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4532  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4533  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4534  00016C                     u5020:
  4535  00016C  2EE8               	decfsz	wreg,f,c
  4536  00016E  D7F8               	goto	u5025
  4537  000170  0100               	movlb	0	; () banked
  4538  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4539  000174  0100               	movlb	0	; () banked
  4540  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4541  000178  0100               	movlb	0	; () banked
  4542  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4543  00017C  0E00               	movlw	0
  4544  00017E  0100               	movlb	0	; () banked
  4545  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4546  000182  0100               	movlb	0	; () banked
  4547  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;doprnt.c: 847: exp--;
  4551  000186  0100               	movlb	0	; () banked
  4552  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4553  00018A  A0D8               	btfss	status,0,c
  4554  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;doprnt.c: 848: exp *= 3;
  4558  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4559  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4560  000196  0E00               	movlw	0
  4561  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4562  00019A  0E03               	movlw	3
  4563  00019C  6E29               	movwf	___wmul@multiplicand,c
  4564  00019E  ECA7  F013         	call	___wmul	;wreg free
  4565  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4566  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4567                           
  4568                           ;doprnt.c: 849: exp /= 10;
  4569  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4570  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4571  0001B2  0E00               	movlw	0
  4572  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4573  0001B6  0E0A               	movlw	10
  4574  0001B8  6E21               	movwf	___awdiv@divisor,c
  4575  0001BA  ECEF  F00D         	call	___awdiv	;wreg free
  4576  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4577  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4578                           
  4579                           ;doprnt.c: 850: if(exp < 0)
  4580  0001C6  0100               	movlb	0	; () banked
  4581  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4582  0001CA  0A80               	xorlw	128
  4583  0001CC  6EF3               	movwf	prodl,c
  4584  0001CE  0E80               	movlw	128
  4585  0001D0  5CF3               	subwf	prodl,w,c
  4586  0001D2  0E00               	movlw	0
  4587  0001D4  B4D8               	btfsc	status,2,c
  4588  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4589  0001D8  B0D8               	btfsc	status,0,c
  4590  0001DA  D004               	goto	l4860
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;doprnt.c: 851: exp--;
  4594  0001DC  0100               	movlb	0	; () banked
  4595  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4596  0001E0  A0D8               	btfss	status,0,c
  4597  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4598  0001E4                     l4860:
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;doprnt.c: 855: integ = scale(-exp);
  4602  0001E4  0100               	movlb	0	; () banked
  4603  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4604  0001E8  0800               	sublw	0
  4605  0001EA  ECA0  F004         	call	_scale
  4606  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4607  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4608  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4609                           
  4610                           ;doprnt.c: 856: integ *= fval;
  4611  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4612  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4613  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4614  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4615  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4616  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4617  000212  EC6F  F009         	call	___ftmul	;wreg free
  4618  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4619  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4620  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4621                           
  4622                           ;doprnt.c: 857: if(integ < 1.0)
  4623  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4624  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4625  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4626  00022E  0E00               	movlw	0
  4627  000230  6E1C               	movwf	___ftge@ff2,c
  4628  000232  0E80               	movlw	128
  4629  000234  6E1D               	movwf	___ftge@ff2+1,c
  4630  000236  0E3F               	movlw	63
  4631  000238  6E1E               	movwf	___ftge@ff2+2,c
  4632  00023A  EC1E  F00F         	call	___ftge	;wreg free
  4633  00023E  B0D8               	btfsc	status,0,c
  4634  000240  D005               	goto	l4868
  4635                           
  4636                           ;doprnt.c: 858: exp--;
  4637  000242  0100               	movlb	0	; () banked
  4638  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4639  000246  A0D8               	btfss	status,0,c
  4640  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4641  00024A  D013               	goto	l4872
  4642  00024C                     l4868:
  4643                           
  4644                           ;doprnt.c: 859: else if(integ >= 10.0)
  4645  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4646  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4647  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4648  000258  0E00               	movlw	0
  4649  00025A  6E1C               	movwf	___ftge@ff2,c
  4650  00025C  0E20               	movlw	32
  4651  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4652  000260  0E41               	movlw	65
  4653  000262  6E1E               	movwf	___ftge@ff2+2,c
  4654  000264  EC1E  F00F         	call	___ftge	;wreg free
  4655  000268  A0D8               	btfss	status,0,c
  4656  00026A  D003               	goto	l4872
  4657                           
  4658                           ;doprnt.c: 860: exp++;
  4659  00026C  0100               	movlb	0	; () banked
  4660  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4661  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4662  000272                     l4872:
  4663                           
  4664                           ;doprnt.c: 861: }
  4665                           ;doprnt.c: 1121: if(prec <= 12)
  4666  000272  0100               	movlb	0	; () banked
  4667  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4668  000276  0A80               	xorlw	128
  4669  000278  6EF3               	movwf	prodl,c
  4670  00027A  0E80               	movlw	128
  4671  00027C  5CF3               	subwf	prodl,w,c
  4672  00027E  0E0D               	movlw	13
  4673  000280  B4D8               	btfsc	status,2,c
  4674  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4675  000284  B0D8               	btfsc	status,0,c
  4676  000286  D018               	goto	l4876
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;doprnt.c: 1122: fval += fround(prec);
  4680  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4681  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4682  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4683  000294  0100               	movlb	0	; () banked
  4684  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4685  000298  ECDC  F006         	call	_fround
  4686  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4687  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4688  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4689  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4690  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4691  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4692  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4693  0002B8                     l4876:
  4694                           
  4695                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4696  0002B8  0100               	movlb	0	; () banked
  4697  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4698  0002BC  0A80               	xorlw	128
  4699  0002BE  6EF3               	movwf	prodl,c
  4700  0002C0  0E80               	movlw	128
  4701  0002C2  5CF3               	subwf	prodl,w,c
  4702  0002C4  0E0A               	movlw	10
  4703  0002C6  B4D8               	btfsc	status,2,c
  4704  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4705  0002CA  B0D8               	btfsc	status,0,c
  4706  0002CC  D029               	goto	l4884
  4707                           
  4708                           ; BSR set to: 0
  4709  0002CE  0E7F               	movlw	127
  4710  0002D0  0100               	movlb	0	; () banked
  4711  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4712  0002D4  0100               	movlb	0	; () banked
  4713  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4714  0002D8  0100               	movlb	0	; () banked
  4715  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4716  0002DC  B4D8               	btfsc	status,2,c
  4717  0002DE  D06C               	goto	l4900
  4718                           
  4719                           ; BSR set to: 0
  4720  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4721  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4722  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4723  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4724  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4725  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4726  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4727  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4728  000300  0100               	movlb	0	; () banked
  4729  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4730  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4731  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4732  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4733  00030A  A4D8               	btfss	status,2,c
  4734  00030C  D055               	goto	l4900
  4735                           
  4736                           ; BSR set to: 0
  4737  00030E  0100               	movlb	0	; () banked
  4738  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4739  000312  0A80               	xorlw	128
  4740  000314  0F80               	addlw	-128
  4741  000316  0E02               	movlw	2
  4742  000318  B4D8               	btfsc	status,2,c
  4743  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4744  00031C  A0D8               	btfss	status,0,c
  4745  00031E  D04C               	goto	l4900
  4746  000320                     l4884:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4750  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4751  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4752  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4753  00032C  0E70               	movlw	112
  4754  00032E  6E1C               	movwf	___ftge@ff2,c
  4755  000330  0E89               	movlw	137
  4756  000332  6E1D               	movwf	___ftge@ff2+1,c
  4757  000334  0E40               	movlw	64
  4758  000336  6E1E               	movwf	___ftge@ff2+2,c
  4759  000338  EC1E  F00F         	call	___ftge	;wreg free
  4760  00033C  B0D8               	btfsc	status,0,c
  4761  00033E  D003               	goto	l4888
  4762                           
  4763                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4764  000340  0100               	movlb	0	; () banked
  4765  000342  0EF7               	movlw	247
  4766  000344  D002               	goto	L3
  4767  000346                     l4888:
  4768                           
  4769                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4770  000346  0100               	movlb	0	; () banked
  4771  000348  0EF8               	movlw	248
  4772  00034A                     L3:
  4773  00034A  0100               	movlb	0	; () banked
  4774  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  4775  00034E  0EFF               	movlw	255
  4776  000350  0100               	movlb	0	; () banked
  4777  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;doprnt.c: 1133: }
  4781                           ;doprnt.c: 1134: integ = scale(exp);
  4782                           
  4783                           ; BSR set to: 0
  4784  000354  0100               	movlb	0	; () banked
  4785  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  4786  000358  ECA0  F004         	call	_scale
  4787  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  4788  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4789  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4790                           
  4791                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4792  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4793  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4794  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4795  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4796  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4797  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4798  000380  ECF1  F00B         	call	__tdiv_to_l_	;wreg free
  4799  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1239
  4800  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1239+1
  4801  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1239+2
  4802  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1239+3
  4803  000394  C098  F0AD         	movff	_sprintf$1239,sprintf@_val
  4804  000398  C099  F0AE         	movff	_sprintf$1239+1,sprintf@_val+1
  4805  00039C  C09A  F0AF         	movff	_sprintf$1239+2,sprintf@_val+2
  4806  0003A0  C09B  F0B0         	movff	_sprintf$1239+3,sprintf@_val+3
  4807                           
  4808                           ;doprnt.c: 1138: fval = 0.0;
  4809  0003A4  0E00               	movlw	0
  4810  0003A6  0100               	movlb	0	; () banked
  4811  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  4812  0003AA  0E00               	movlw	0
  4813  0003AC  0100               	movlb	0	; () banked
  4814  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4815  0003B0  0E00               	movlw	0
  4816  0003B2  0100               	movlb	0	; () banked
  4817  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4818                           
  4819                           ;doprnt.c: 1139: } else {
  4820  0003B6  D034               	goto	l4904
  4821  0003B8                     l4900:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  4825  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4826  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4827  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4828  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  4829  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  4830  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4831  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4832  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4833                           
  4834                           ;doprnt.c: 1141: fval -= (double)_val._val;
  4835  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  4836  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  4837  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  4838  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  4839  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  4840  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  4841  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  4842  0003F4  ECB5  F011         	call	___lltoft	;wreg free
  4843  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  4844  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  4845  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  4846  000404  EC7C  F012         	call	___ftsub	;wreg free
  4847  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  4848  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  4849  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  4850                           
  4851                           ;doprnt.c: 1142: exp = 0;
  4852  000414  0E00               	movlw	0
  4853  000416  0100               	movlb	0	; () banked
  4854  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4855  00041A  0E00               	movlw	0
  4856  00041C  0100               	movlb	0	; () banked
  4857  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  4858  000420                     l4904:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;doprnt.c: 1143: }
  4862                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4863  000420  0E01               	movlw	1
  4864  000422  0100               	movlb	0	; () banked
  4865  000424  6FB7               	movwf	sprintf@c& (0+255),b
  4866  000426                     
  4867                           ; BSR set to: 0
  4868  000426  0100               	movlb	0	; () banked
  4869  000428  51B7               	movf	sprintf@c& (0+255),w,b
  4870  00042A  0A0A               	xorlw	10
  4871  00042C  B4D8               	btfsc	status,2,c
  4872  00042E  D021               	goto	l4918
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  4876                           
  4877                           ; BSR set to: 0
  4878                           
  4879                           ; BSR set to: 0
  4880  000430  0100               	movlb	0	; () banked
  4881  000432  51B7               	movf	sprintf@c& (0+255),w,b
  4882  000434  0D04               	mullw	4
  4883  000436  0ECB               	movlw	low _dpowers
  4884  000438  24F3               	addwf	prodl,w,c
  4885  00043A  6EF6               	movwf	tblptrl,c
  4886  00043C  0E7E               	movlw	high _dpowers
  4887  00043E  20F4               	addwfc	prodh,w,c
  4888  000440  6EF7               	movwf	tblptrh,c
  4889  000442                     	if	1	;There are 3 active tblptr bytes
  4890  000442  6AF8               	clrf	tblptru,c
  4891  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  4892  000446  22F8               	addwfc	tblptru,f,c
  4893  000448                     	endif
  4894  000448  0009               	tblrd		*+
  4895  00044A  50F5               	movf	tablat,w,c
  4896  00044C  0100               	movlb	0	; () banked
  4897  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4898  000450  0009               	tblrd		*+
  4899  000452  50F5               	movf	tablat,w,c
  4900  000454  0100               	movlb	0	; () banked
  4901  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4902  000458  0009               	tblrd		*+
  4903  00045A  50F5               	movf	tablat,w,c
  4904  00045C  0100               	movlb	0	; () banked
  4905  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4906  000460  0009               	tblrd		*+
  4907  000462  50F5               	movf	tablat,w,c
  4908  000464  0100               	movlb	0	; () banked
  4909  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4910  000468  A0D8               	btfss	status,0,c
  4911  00046A  D003               	goto	l4918
  4912                           
  4913                           ; BSR set to: 0
  4914                           
  4915                           ; BSR set to: 0
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;doprnt.c: 1147: break;
  4919  00046C  0100               	movlb	0	; () banked
  4920  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  4921  000470  D7DA               	goto	L4
  4922  000472                     l4918:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;doprnt.c: 1184: {
  4926                           ;doprnt.c: 1197: if(flag & 0x03)
  4927  000472  0E03               	movlw	3
  4928  000474  0100               	movlb	0	; () banked
  4929  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  4930  000478  0100               	movlb	0	; () banked
  4931  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  4932  00047C  0E00               	movlw	0
  4933  00047E  0100               	movlb	0	; () banked
  4934  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4935  000482  0100               	movlb	0	; () banked
  4936  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4937  000486  0100               	movlb	0	; () banked
  4938  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4939  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  4940  00048C  B4D8               	btfsc	status,2,c
  4941  00048E  D055               	goto	l4932
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  4945  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  4946  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4947  000498  0E2D               	movlw	45
  4948  00049A  D04B               	goto	L5
  4949  00049C                     l4924:
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;doprnt.c: 1209: {
  4953                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  4954  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4955  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4956  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4957  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4958  0004AC  0100               	movlb	0	; () banked
  4959  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  4960  0004B0  0D04               	mullw	4
  4961  0004B2  0ECB               	movlw	low _dpowers
  4962  0004B4  24F3               	addwf	prodl,w,c
  4963  0004B6  6EF6               	movwf	tblptrl,c
  4964  0004B8  0E7E               	movlw	high _dpowers
  4965  0004BA  20F4               	addwfc	prodh,w,c
  4966  0004BC  6EF7               	movwf	tblptrh,c
  4967  0004BE                     	if	1	;There are 3 active tblptr bytes
  4968  0004BE  6AF8               	clrf	tblptru,c
  4969  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4970  0004C2  22F8               	addwfc	tblptru,f,c
  4971  0004C4                     	endif
  4972  0004C4  0009               	tblrd		*+
  4973  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4974  0004CA  0009               	tblrd		*+
  4975  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4976  0004D0  0009               	tblrd		*+
  4977  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4978  0004D6  000A               	tblrd		*-
  4979  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4980  0004DC  ECA9  F00F         	call	___lldiv	;wreg free
  4981  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  4982  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  4983  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  4984  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  4985                           
  4986                           ;doprnt.c: 1211: vd %= 10;
  4987  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  4988  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  4989  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  4990  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  4991  000500  0E0A               	movlw	10
  4992  000502  6E2A               	movwf	___llmod@divisor,c
  4993  000504  0E00               	movlw	0
  4994  000506  6E2B               	movwf	___llmod@divisor+1,c
  4995  000508  0E00               	movlw	0
  4996  00050A  6E2C               	movwf	___llmod@divisor+2,c
  4997  00050C  0E00               	movlw	0
  4998  00050E  6E2D               	movwf	___llmod@divisor+3,c
  4999  000510  EC82  F011         	call	___llmod	;wreg free
  5000  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5001  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5002  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5003  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5004                           
  5005                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5006  000524  0100               	movlb	0	; () banked
  5007  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5008  000528  0F30               	addlw	48
  5009  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5010  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5011  000532                     L5:
  5012  000532  6EDF               	movwf	indf2,c
  5013                           
  5014                           ; BSR set to: 0
  5015  000534  0100               	movlb	0	; () banked
  5016  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5017  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5018  00053A                     l4932:
  5019                           
  5020                           ; BSR set to: 0
  5021  00053A  0100               	movlb	0	; () banked
  5022  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5023  00053E  0100               	movlb	0	; () banked
  5024  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5025  000542  B4D8               	btfsc	status,2,c
  5026  000544  D00E               	goto	l4940
  5027  000546  D7AA               	goto	l4924
  5028  000548                     l4934:
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5032  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5033  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5034  000550  0E30               	movlw	48
  5035  000552  6EDF               	movwf	indf2,c
  5036                           
  5037                           ; BSR set to: 0
  5038  000554  0100               	movlb	0	; () banked
  5039  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5040  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 1218: exp--;
  5044  00055A  0100               	movlb	0	; () banked
  5045  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5046  00055E  A0D8               	btfss	status,0,c
  5047  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5048  000562                     l4940:
  5049                           
  5050                           ; BSR set to: 0
  5051  000562  0100               	movlb	0	; () banked
  5052  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5053  000566  0A80               	xorlw	128
  5054  000568  6EF3               	movwf	prodl,c
  5055  00056A  0E80               	movlw	128
  5056  00056C  5CF3               	subwf	prodl,w,c
  5057  00056E  0E01               	movlw	1
  5058  000570  B4D8               	btfsc	status,2,c
  5059  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5060  000574  B0D8               	btfsc	status,0,c
  5061  000576  D7E8               	goto	l4934
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 1219: }
  5065                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5066                           
  5067                           ; BSR set to: 0
  5068  000578  0100               	movlb	0	; () banked
  5069  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5070  00057C  0A80               	xorlw	128
  5071  00057E  0F80               	addlw	-128
  5072  000580  0E09               	movlw	9
  5073  000582  B4D8               	btfsc	status,2,c
  5074  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5075  000586  A0D8               	btfss	status,0,c
  5076  000588  D004               	goto	l484
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5080  00058A  0E08               	movlw	8
  5081  00058C  0100               	movlb	0	; () banked
  5082  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5083  000590  D002               	goto	l4946
  5084  000592                     l484:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;doprnt.c: 1222: else
  5088                           ;doprnt.c: 1223: c = prec;
  5089  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5090  000596                     l4946:
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;doprnt.c: 1224: prec -= c;
  5094  000596  0100               	movlb	0	; () banked
  5095  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5096  00059A  0100               	movlb	0	; () banked
  5097  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5098  00059E  0E00               	movlw	0
  5099  0005A0  0100               	movlb	0	; () banked
  5100  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5101  0005A4  0EFF               	movlw	255
  5102  0005A6  0100               	movlb	0	; () banked
  5103  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 1228: if(c)
  5107  0005AA  0100               	movlb	0	; () banked
  5108  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5109  0005AE  B4D8               	btfsc	status,2,c
  5110  0005B0  D009               	goto	l4954
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5114  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5115  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5116  0005BA  0E2E               	movlw	46
  5117  0005BC  6EDF               	movwf	indf2,c
  5118                           
  5119                           ; BSR set to: 0
  5120  0005BE  0100               	movlb	0	; () banked
  5121  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5122  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5123  0005C4                     l4954:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5127  0005C4  0100               	movlb	0	; () banked
  5128  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5129  0005C8  ECA0  F004         	call	_scale
  5130  0005CC  C06C  F095         	movff	?_scale,_sprintf$2290
  5131  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2290+1
  5132  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2290+2
  5133                           
  5134                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5135  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5136  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5137  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5138  0005E4  C095  F060         	movff	_sprintf$2290,___ftmul@f1
  5139  0005E8  C096  F061         	movff	_sprintf$2290+1,___ftmul@f1+1
  5140  0005EC  C097  F062         	movff	_sprintf$2290+2,___ftmul@f1+2
  5141  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5142  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5143  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5144  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5145  000600  EC1B  F00A         	call	___fttol	;wreg free
  5146  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5147  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5148  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5149  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5150                           
  5151                           ;doprnt.c: 1237: while(c--) {
  5152  000614  D079               	goto	l4968
  5153  000616                     l4958:
  5154                           
  5155                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5156  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5157  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5158  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5159  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5160  000626  0100               	movlb	0	; () banked
  5161  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5162  00062A  0D04               	mullw	4
  5163  00062C  0ECB               	movlw	low _dpowers
  5164  00062E  24F3               	addwf	prodl,w,c
  5165  000630  6EF6               	movwf	tblptrl,c
  5166  000632  0E7E               	movlw	high _dpowers
  5167  000634  20F4               	addwfc	prodh,w,c
  5168  000636  6EF7               	movwf	tblptrh,c
  5169  000638                     	if	1	;There are 3 active tblptr bytes
  5170  000638  6AF8               	clrf	tblptru,c
  5171  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5172  00063C  22F8               	addwfc	tblptru,f,c
  5173  00063E                     	endif
  5174  00063E  0009               	tblrd		*+
  5175  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5176  000644  0009               	tblrd		*+
  5177  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5178  00064A  0009               	tblrd		*+
  5179  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5180  000650  000A               	tblrd		*-
  5181  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5182  000656  ECA9  F00F         	call	___lldiv	;wreg free
  5183  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1241
  5184  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1241+1
  5185  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1241+2
  5186  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1241+3
  5187                           
  5188                           ;doprnt.c: 1239: vd %= 10;
  5189  00066A  C0A0  F026         	movff	sprintf@vd_1241,___llmod@dividend
  5190  00066E  C0A1  F027         	movff	sprintf@vd_1241+1,___llmod@dividend+1
  5191  000672  C0A2  F028         	movff	sprintf@vd_1241+2,___llmod@dividend+2
  5192  000676  C0A3  F029         	movff	sprintf@vd_1241+3,___llmod@dividend+3
  5193  00067A  0E0A               	movlw	10
  5194  00067C  6E2A               	movwf	___llmod@divisor,c
  5195  00067E  0E00               	movlw	0
  5196  000680  6E2B               	movwf	___llmod@divisor+1,c
  5197  000682  0E00               	movlw	0
  5198  000684  6E2C               	movwf	___llmod@divisor+2,c
  5199  000686  0E00               	movlw	0
  5200  000688  6E2D               	movwf	___llmod@divisor+3,c
  5201  00068A  EC82  F011         	call	___llmod	;wreg free
  5202  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1241
  5203  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1241+1
  5204  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1241+2
  5205  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1241+3
  5206                           
  5207                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5208  00069E  0100               	movlb	0	; () banked
  5209  0006A0  51A0               	movf	sprintf@vd_1241& (0+255),w,b
  5210  0006A2  0F30               	addlw	48
  5211  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5212  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5213  0006AC  6EDF               	movwf	indf2,c
  5214                           
  5215                           ; BSR set to: 0
  5216  0006AE  0100               	movlb	0	; () banked
  5217  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5218  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5222  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5223  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5224  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5225  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5226  0006C4  0100               	movlb	0	; () banked
  5227  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5228  0006C8  0D04               	mullw	4
  5229  0006CA  0ECB               	movlw	low _dpowers
  5230  0006CC  24F3               	addwf	prodl,w,c
  5231  0006CE  6EF6               	movwf	tblptrl,c
  5232  0006D0  0E7E               	movlw	high _dpowers
  5233  0006D2  20F4               	addwfc	prodh,w,c
  5234  0006D4  6EF7               	movwf	tblptrh,c
  5235  0006D6                     	if	1	;There are 3 active tblptr bytes
  5236  0006D6  6AF8               	clrf	tblptru,c
  5237  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5238  0006DA  22F8               	addwfc	tblptru,f,c
  5239  0006DC                     	endif
  5240  0006DC  0009               	tblrd		*+
  5241  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5242  0006E2  0009               	tblrd		*+
  5243  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5244  0006E8  0009               	tblrd		*+
  5245  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5246  0006EE  000A               	tblrd		*-
  5247  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5248  0006F4  EC82  F011         	call	___llmod	;wreg free
  5249  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5250  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5251  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5252  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5253  000708                     l4968:
  5254  000708  0100               	movlb	0	; () banked
  5255  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5256  00070C  0100               	movlb	0	; () banked
  5257  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5258  000710  B4D8               	btfsc	status,2,c
  5259  000712  D00E               	goto	l4976
  5260  000714  D780               	goto	l4958
  5261  000716                     l4970:
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5265  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5266  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5267  00071E  0E30               	movlw	48
  5268  000720  6EDF               	movwf	indf2,c
  5269                           
  5270                           ; BSR set to: 0
  5271  000722  0100               	movlb	0	; () banked
  5272  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5273  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1246: prec--;
  5277  000728  0100               	movlb	0	; () banked
  5278  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5279  00072C  A0D8               	btfss	status,0,c
  5280  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5281  000730                     l4976:
  5282                           
  5283                           ; BSR set to: 0
  5284  000730  0100               	movlb	0	; () banked
  5285  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5286  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5287  000736  B4D8               	btfsc	status,2,c
  5288  000738  D0EA               	goto	l5018
  5289  00073A  D7ED               	goto	l4970
  5290  00073C                     l4978:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;doprnt.c: 1255: }
  5294                           ;doprnt.c: 1262: {
  5295                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5296  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5297  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5298  000744  0100               	movlb	0	; () banked
  5299  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5300  00074A  0100               	movlb	0	; () banked
  5301  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5302  000750  0100               	movlb	0	; () banked
  5303  000752  0E00               	movlw	0
  5304  000754  0100               	movlb	0	; () banked
  5305  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5306  000758  0EFF               	movlw	-1
  5307  00075A  0100               	movlb	0	; () banked
  5308  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5309  00075E  0100               	movlb	0	; () banked
  5310  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5311                           
  5312                           ; BSR set to: 0
  5313  000762  0E02               	movlw	2
  5314  000764  0100               	movlb	0	; () banked
  5315  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5316  000768  0E00               	movlw	0
  5317  00076A  0100               	movlb	0	; () banked
  5318  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5322  00076E  0100               	movlb	0	; () banked
  5323  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5324  000772  0A80               	xorlw	128
  5325  000774  0F80               	addlw	128
  5326  000776  E10B               	bnz	u5225
  5327  000778  0E00               	movlw	0
  5328  00077A  0100               	movlb	0	; () banked
  5329  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5330  00077E  E107               	bnz	u5225
  5331  000780  0E00               	movlw	0
  5332  000782  0100               	movlb	0	; () banked
  5333  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5334  000786  E103               	bnz	u5225
  5335  000788  0E00               	movlw	0
  5336  00078A  0100               	movlb	0	; () banked
  5337  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5338  00078E                     u5225:
  5339  00078E  B0D8               	btfsc	status,0,c
  5340  000790  D012               	goto	l4988
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;doprnt.c: 1271: flag |= 0x03;
  5344  000792  0E03               	movlw	3
  5345  000794  0100               	movlb	0	; () banked
  5346  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;doprnt.c: 1272: _val._val = -_val._val;
  5350  000798  0100               	movlb	0	; () banked
  5351  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5352  00079C  0100               	movlb	0	; () banked
  5353  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5354  0007A0  0100               	movlb	0	; () banked
  5355  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5356  0007A4  0100               	movlb	0	; () banked
  5357  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5358  0007A8  0E00               	movlw	0
  5359  0007AA  0100               	movlb	0	; () banked
  5360  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5361  0007AE  0100               	movlb	0	; () banked
  5362  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5363  0007B2  0100               	movlb	0	; () banked
  5364  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5365  0007B6                     l4988:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;doprnt.c: 1273: }
  5369                           ;doprnt.c: 1275: }
  5370                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5371  0007B6  0E01               	movlw	1
  5372  0007B8  0100               	movlb	0	; () banked
  5373  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5374  0007BC                     
  5375                           ; BSR set to: 0
  5376  0007BC  0100               	movlb	0	; () banked
  5377  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5378  0007C0  0A0A               	xorlw	10
  5379  0007C2  B4D8               	btfsc	status,2,c
  5380  0007C4  D021               	goto	l5002
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5384                           
  5385                           ; BSR set to: 0
  5386                           
  5387                           ; BSR set to: 0
  5388  0007C6  0100               	movlb	0	; () banked
  5389  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5390  0007CA  0D04               	mullw	4
  5391  0007CC  0ECB               	movlw	low _dpowers
  5392  0007CE  24F3               	addwf	prodl,w,c
  5393  0007D0  6EF6               	movwf	tblptrl,c
  5394  0007D2  0E7E               	movlw	high _dpowers
  5395  0007D4  20F4               	addwfc	prodh,w,c
  5396  0007D6  6EF7               	movwf	tblptrh,c
  5397  0007D8                     	if	1	;There are 3 active tblptr bytes
  5398  0007D8  6AF8               	clrf	tblptru,c
  5399  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5400  0007DC  22F8               	addwfc	tblptru,f,c
  5401  0007DE                     	endif
  5402  0007DE  0009               	tblrd		*+
  5403  0007E0  50F5               	movf	tablat,w,c
  5404  0007E2  0100               	movlb	0	; () banked
  5405  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5406  0007E6  0009               	tblrd		*+
  5407  0007E8  50F5               	movf	tablat,w,c
  5408  0007EA  0100               	movlb	0	; () banked
  5409  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5410  0007EE  0009               	tblrd		*+
  5411  0007F0  50F5               	movf	tablat,w,c
  5412  0007F2  0100               	movlb	0	; () banked
  5413  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5414  0007F6  0009               	tblrd		*+
  5415  0007F8  50F5               	movf	tablat,w,c
  5416  0007FA  0100               	movlb	0	; () banked
  5417  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5418  0007FE  A0D8               	btfss	status,0,c
  5419  000800  D003               	goto	l5002
  5420                           
  5421                           ; BSR set to: 0
  5422                           
  5423                           ; BSR set to: 0
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 1316: break;
  5427  000802  0100               	movlb	0	; () banked
  5428  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5429  000806  D7DA               	goto	L6
  5430  000808                     l5002:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;doprnt.c: 1431: {
  5434                           ;doprnt.c: 1447: if(flag & 0x03)
  5435  000808  0E03               	movlw	3
  5436  00080A  0100               	movlb	0	; () banked
  5437  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5438  00080E  0100               	movlb	0	; () banked
  5439  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5440  000812  0E00               	movlw	0
  5441  000814  0100               	movlb	0	; () banked
  5442  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5443  000818  0100               	movlb	0	; () banked
  5444  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5445  00081C  0100               	movlb	0	; () banked
  5446  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5447  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5448  000822  B4D8               	btfsc	status,2,c
  5449  000824  D009               	goto	l5008
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5453  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5454  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5455  00082E  0E2D               	movlw	45
  5456  000830  6EDF               	movwf	indf2,c
  5457                           
  5458                           ; BSR set to: 0
  5459  000832  0100               	movlb	0	; () banked
  5460  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5461  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5462  000838                     l5008:
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;doprnt.c: 1478: }
  5466                           ;doprnt.c: 1481: prec = c;
  5467  000838  0100               	movlb	0	; () banked
  5468  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5469  00083C  0100               	movlb	0	; () banked
  5470  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5471  000840  0100               	movlb	0	; () banked
  5472  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5473  000844  0100               	movlb	0	; () banked
  5474  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5475  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5476                           
  5477                           ;doprnt.c: 1483: while(prec--) {
  5478  00084A  D057               	goto	l5016
  5479  00084C                     l5010:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1487: {
  5483                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5484  00084C  0100               	movlb	0	; () banked
  5485  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5486  000852  0100               	movlb	0	; () banked
  5487  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5488  000858  0100               	movlb	0	; () banked
  5489  00085A  90D8               	bcf	status,0,c
  5490  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5491  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5492  000860  0100               	movlb	0	; () banked
  5493  000862  90D8               	bcf	status,0,c
  5494  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5495  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5496  000868  0ECB               	movlw	low _dpowers
  5497  00086A  0100               	movlb	0	; () banked
  5498  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5499  00086E  6EF6               	movwf	tblptrl,c
  5500  000870  0E7E               	movlw	high _dpowers
  5501  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5502  000874  6EF7               	movwf	tblptrh,c
  5503  000876                     	if	1	;There are 3 active tblptr bytes
  5504  000876  6AF8               	clrf	tblptru,c
  5505  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5506  00087A  22F8               	addwfc	tblptru,f,c
  5507  00087C                     	endif
  5508  00087C  0009               	tblrd		*+
  5509  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5510  000882  0009               	tblrd		*+
  5511  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5512  000888  0009               	tblrd		*+
  5513  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5514  00088E  000A               	tblrd		*-
  5515  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5516  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5517  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5518  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5519  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5520  0008A4  ECA9  F00F         	call	___lldiv	;wreg free
  5521  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5522  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5523  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5524  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5525  0008B8  0E0A               	movlw	10
  5526  0008BA  6E2A               	movwf	___llmod@divisor,c
  5527  0008BC  0E00               	movlw	0
  5528  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5529  0008C0  0E00               	movlw	0
  5530  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5531  0008C4  0E00               	movlw	0
  5532  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5533  0008C8  EC82  F011         	call	___llmod	;wreg free
  5534  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5535  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5536  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5537  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5538  0008DC  0100               	movlb	0	; () banked
  5539  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5540  0008E0  0F30               	addlw	48
  5541  0008E2  0100               	movlb	0	; () banked
  5542  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;doprnt.c: 1532: }
  5546                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5547  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5548  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5549  0008EE  0100               	movlb	0	; () banked
  5550  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5551                           
  5552                           ; BSR set to: 0
  5553  0008F4  0100               	movlb	0	; () banked
  5554  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5555  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5556  0008FA                     l5016:
  5557                           
  5558                           ; BSR set to: 0
  5559  0008FA  0100               	movlb	0	; () banked
  5560  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5561  0008FE  A0D8               	btfss	status,0,c
  5562  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5563  000902  0100               	movlb	0	; () banked
  5564  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5565  000906  B4D8               	btfsc	status,2,c
  5566  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5567  00090A  A4D8               	btfss	status,2,c
  5568  00090C  D79F               	goto	l5010
  5569  00090E                     l5018:
  5570                           
  5571                           ; BSR set to: 0
  5572  00090E  0100               	movlb	0	; () banked
  5573  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5574  000914  0100               	movlb	0	; () banked
  5575  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5576  00091A  0100               	movlb	0	; () banked
  5577  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5578  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5579  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5580  000920  6AF8               	clrf	tblptru,c
  5581  000922                     	endif
  5582  000922                     	if	0	;tblptru may be non-zero
  5583  000922                     	endif
  5584  000922  0008               	tblrd		*
  5585  000924  0100               	movlb	0	; () banked
  5586  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5587  00092A  0100               	movlb	0	; () banked
  5588  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5589  00092E  EF18  F000         	goto	l4816
  5590  000932                     l5020:
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;doprnt.c: 1547: *sp = 0;
  5594  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5595  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5596  00093A  0E00               	movlw	0
  5597  00093C  6EDF               	movwf	indf2,c
  5598                           
  5599                           ; BSR set to: 0
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;doprnt.c: 1549: return 0;
  5603                           ;	Return value of _sprintf is never used
  5604  00093E  0012               	return	
  5605  000940                     __end_of_sprintf:
  5606                           	opt stack 0
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           intcon	equ	0xFF2
  5614                           indf0	equ	0xFEF
  5615                           postinc0	equ	0xFEE
  5616                           fsr0h	equ	0xFEA
  5617                           fsr0l	equ	0xFE9
  5618                           wreg	equ	0xFE8
  5619                           postinc1	equ	0xFE6
  5620                           postdec1	equ	0xFE5
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _scale *****************
  5630 ;; Defined at:
  5631 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  scl             1    wreg     char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  scl             1   18[BANK0 ] char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  3   12[BANK0 ] char 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5645 ;;      Params:         0       3       0       0       0       0       0       0       0
  5646 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5648 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5649 ;;Total ram usage:        7 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    6
  5652 ;; This function calls:
  5653 ;;		___awdiv
  5654 ;;		___awmod
  5655 ;;		___ftmul
  5656 ;;		___wmul
  5657 ;; This function is called by:
  5658 ;;		_sprintf
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           	psect	text27
  5663  000940                     __ptext27:
  5664                           	opt stack 0
  5665  000940                     _scale:
  5666                           	opt stack 21
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;incstack = 0
  5670                           ;scale@scl stored from wreg
  5671  000940  0100               	movlb	0	; () banked
  5672  000942  6F72               	movwf	scale@scl& (0+255),b
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;doprnt.c: 428: if(scl < 0) {
  5676  000944  0100               	movlb	0	; () banked
  5677  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5678  000948  D111               	goto	l4548
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;doprnt.c: 429: scl = -scl;
  5682  00094A  0100               	movlb	0	; () banked
  5683  00094C  6D72               	negf	scale@scl& (0+255),b
  5684                           
  5685                           ;doprnt.c: 430: if(scl>=110)
  5686  00094E  0100               	movlb	0	; () banked
  5687  000950  5172               	movf	scale@scl& (0+255),w,b
  5688  000952  0A80               	xorlw	128
  5689  000954  0F12               	addlw	-238
  5690  000956  A0D8               	btfss	status,0,c
  5691  000958  D0A0               	goto	l4538
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5695  00095A  0E00               	movlw	0
  5696  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5697  00095E  0E03               	movlw	3
  5698  000960  6E29               	movwf	___wmul@multiplicand,c
  5699  000962  0E00               	movlw	0
  5700  000964  6E22               	movwf	___awdiv@divisor+1,c
  5701  000966  0E0A               	movlw	10
  5702  000968  6E21               	movwf	___awdiv@divisor,c
  5703  00096A  0E00               	movlw	0
  5704  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5705  00096E  0E64               	movlw	100
  5706  000970  6E1B               	movwf	___awmod@divisor,c
  5707  000972  0100               	movlb	0	; () banked
  5708  000974  5172               	movf	scale@scl& (0+255),w,b
  5709  000976  6E19               	movwf	___awmod@dividend,c
  5710  000978  6A1A               	clrf	___awmod@dividend+1,c
  5711  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5712  00097C  061A               	decf	___awmod@dividend+1,f,c
  5713  00097E  ECD6  F00E         	call	___awmod	;wreg free
  5714  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5715  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5716  00098A  ECEF  F00D         	call	___awdiv	;wreg free
  5717  00098E  0E09               	movlw	9
  5718  000990  241F               	addwf	?___awdiv,w,c
  5719  000992  6E27               	movwf	___wmul@multiplier,c
  5720  000994  0E00               	movlw	0
  5721  000996  2020               	addwfc	?___awdiv+1,w,c
  5722  000998  6E28               	movwf	___wmul@multiplier+1,c
  5723  00099A  ECA7  F013         	call	___wmul	;wreg free
  5724  00099E  0EF3               	movlw	low __npowers_
  5725  0009A0  2427               	addwf	?___wmul,w,c
  5726  0009A2  6EF6               	movwf	tblptrl,c
  5727  0009A4  0E7E               	movlw	high __npowers_
  5728  0009A6  2028               	addwfc	?___wmul+1,w,c
  5729  0009A8  6EF7               	movwf	tblptrh,c
  5730  0009AA                     	if	1	;There are 3 active tblptr bytes
  5731  0009AA  6AF8               	clrf	tblptru,c
  5732  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5733  0009AE  22F8               	addwfc	tblptru,f,c
  5734  0009B0                     	endif
  5735  0009B0  0009               	tblrd		*+
  5736  0009B2  0100               	movlb	0	; () banked
  5737  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5738  0009B8  0009               	tblrd		*+
  5739  0009BA  0100               	movlb	0	; () banked
  5740  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5741  0009C0  000A               	tblrd		*-
  5742  0009C2  0100               	movlb	0	; () banked
  5743  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5744  0009C8  0E00               	movlw	0
  5745  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5746  0009CC  0E64               	movlw	100
  5747  0009CE  6E21               	movwf	___awdiv@divisor,c
  5748  0009D0  0100               	movlb	0	; () banked
  5749  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5750  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5751  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5752  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5753  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5754  0009DC  ECEF  F00D         	call	___awdiv	;wreg free
  5755  0009E0  0E12               	movlw	18
  5756  0009E2  241F               	addwf	?___awdiv,w,c
  5757  0009E4  6E27               	movwf	___wmul@multiplier,c
  5758  0009E6  0E00               	movlw	0
  5759  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5760  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5761  0009EC  0E00               	movlw	0
  5762  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5763  0009F0  0E03               	movlw	3
  5764  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5765  0009F4  ECA7  F013         	call	___wmul	;wreg free
  5766  0009F8  0EF3               	movlw	low __npowers_
  5767  0009FA  2427               	addwf	?___wmul,w,c
  5768  0009FC  6EF6               	movwf	tblptrl,c
  5769  0009FE  0E7E               	movlw	high __npowers_
  5770  000A00  2028               	addwfc	?___wmul+1,w,c
  5771  000A02  6EF7               	movwf	tblptrh,c
  5772  000A04                     	if	1	;There are 3 active tblptr bytes
  5773  000A04  6AF8               	clrf	tblptru,c
  5774  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  5775  000A08  22F8               	addwfc	tblptru,f,c
  5776  000A0A                     	endif
  5777  000A0A  0009               	tblrd		*+
  5778  000A0C  0100               	movlb	0	; () banked
  5779  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  5780  000A12  0009               	tblrd		*+
  5781  000A14  0100               	movlb	0	; () banked
  5782  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5783  000A1A  000A               	tblrd		*-
  5784  000A1C  0100               	movlb	0	; () banked
  5785  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5786  000A22  EC6F  F009         	call	___ftmul	;wreg free
  5787  000A26  C060  F06F         	movff	?___ftmul,_scale$2289
  5788  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2289+1
  5789  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2289+2
  5790                           
  5791                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5792  000A32  C06F  F060         	movff	_scale$2289,___ftmul@f1
  5793  000A36  C070  F061         	movff	_scale$2289+1,___ftmul@f1+1
  5794  000A3A  C071  F062         	movff	_scale$2289+2,___ftmul@f1+2
  5795  000A3E  0E00               	movlw	0
  5796  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  5797  000A42  0E03               	movlw	3
  5798  000A44  6E29               	movwf	___wmul@multiplicand,c
  5799  000A46  0E00               	movlw	0
  5800  000A48  6E1C               	movwf	___awmod@divisor+1,c
  5801  000A4A  0E0A               	movlw	10
  5802  000A4C  6E1B               	movwf	___awmod@divisor,c
  5803  000A4E  0100               	movlb	0	; () banked
  5804  000A50  5172               	movf	scale@scl& (0+255),w,b
  5805  000A52  6E19               	movwf	___awmod@dividend,c
  5806  000A54  6A1A               	clrf	___awmod@dividend+1,c
  5807  000A56  BE19               	btfsc	___awmod@dividend,7,c
  5808  000A58  061A               	decf	___awmod@dividend+1,f,c
  5809  000A5A  ECD6  F00E         	call	___awmod	;wreg free
  5810  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5811  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5812  000A66  ECA7  F013         	call	___wmul	;wreg free
  5813  000A6A  0EF3               	movlw	low __npowers_
  5814  000A6C  2427               	addwf	?___wmul,w,c
  5815  000A6E  6EF6               	movwf	tblptrl,c
  5816  000A70  0E7E               	movlw	high __npowers_
  5817  000A72  2028               	addwfc	?___wmul+1,w,c
  5818  000A74  6EF7               	movwf	tblptrh,c
  5819  000A76                     	if	1	;There are 3 active tblptr bytes
  5820  000A76  6AF8               	clrf	tblptru,c
  5821  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  5822  000A7A  22F8               	addwfc	tblptru,f,c
  5823  000A7C                     	endif
  5824  000A7C  0009               	tblrd		*+
  5825  000A7E  0100               	movlb	0	; () banked
  5826  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  5827  000A84  0009               	tblrd		*+
  5828  000A86  0100               	movlb	0	; () banked
  5829  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5830  000A8C  000A               	tblrd		*-
  5831  000A8E  0100               	movlb	0	; () banked
  5832  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5833  000A94  EC6F  F009         	call	___ftmul	;wreg free
  5834  000A98  D16F               	goto	L10
  5835  000A9A                     l4538:
  5836                           
  5837                           ;doprnt.c: 432: else if(scl > 10)
  5838  000A9A  0100               	movlb	0	; () banked
  5839  000A9C  5172               	movf	scale@scl& (0+255),w,b
  5840  000A9E  0A80               	xorlw	128
  5841  000AA0  0F75               	addlw	-139
  5842  000AA2  A0D8               	btfss	status,0,c
  5843  000AA4  D05B               	goto	l4544
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5847  000AA6  0E00               	movlw	0
  5848  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  5849  000AAA  0E0A               	movlw	10
  5850  000AAC  6E21               	movwf	___awdiv@divisor,c
  5851  000AAE  0100               	movlb	0	; () banked
  5852  000AB0  5172               	movf	scale@scl& (0+255),w,b
  5853  000AB2  6E1F               	movwf	___awdiv@dividend,c
  5854  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  5855  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  5856  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  5857  000ABA  ECEF  F00D         	call	___awdiv	;wreg free
  5858  000ABE  0E09               	movlw	9
  5859  000AC0  241F               	addwf	?___awdiv,w,c
  5860  000AC2  6E27               	movwf	___wmul@multiplier,c
  5861  000AC4  0E00               	movlw	0
  5862  000AC6  2020               	addwfc	?___awdiv+1,w,c
  5863  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  5864  000ACA  0E00               	movlw	0
  5865  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  5866  000ACE  0E03               	movlw	3
  5867  000AD0  6E29               	movwf	___wmul@multiplicand,c
  5868  000AD2  ECA7  F013         	call	___wmul	;wreg free
  5869  000AD6  0EF3               	movlw	low __npowers_
  5870  000AD8  2427               	addwf	?___wmul,w,c
  5871  000ADA  6EF6               	movwf	tblptrl,c
  5872  000ADC  0E7E               	movlw	high __npowers_
  5873  000ADE  2028               	addwfc	?___wmul+1,w,c
  5874  000AE0  6EF7               	movwf	tblptrh,c
  5875  000AE2                     	if	1	;There are 3 active tblptr bytes
  5876  000AE2  6AF8               	clrf	tblptru,c
  5877  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5878  000AE6  22F8               	addwfc	tblptru,f,c
  5879  000AE8                     	endif
  5880  000AE8  0009               	tblrd		*+
  5881  000AEA  0100               	movlb	0	; () banked
  5882  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  5883  000AF0  0009               	tblrd		*+
  5884  000AF2  0100               	movlb	0	; () banked
  5885  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5886  000AF8  000A               	tblrd		*-
  5887  000AFA  0100               	movlb	0	; () banked
  5888  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5889  000B00  0E00               	movlw	0
  5890  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  5891  000B04  0E03               	movlw	3
  5892  000B06  6E29               	movwf	___wmul@multiplicand,c
  5893  000B08  0E00               	movlw	0
  5894  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  5895  000B0C  0E0A               	movlw	10
  5896  000B0E  6E1B               	movwf	___awmod@divisor,c
  5897  000B10  0100               	movlb	0	; () banked
  5898  000B12  5172               	movf	scale@scl& (0+255),w,b
  5899  000B14  6E19               	movwf	___awmod@dividend,c
  5900  000B16  6A1A               	clrf	___awmod@dividend+1,c
  5901  000B18  BE19               	btfsc	___awmod@dividend,7,c
  5902  000B1A  061A               	decf	___awmod@dividend+1,f,c
  5903  000B1C  ECD6  F00E         	call	___awmod	;wreg free
  5904  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  5905  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5906  000B28  ECA7  F013         	call	___wmul	;wreg free
  5907  000B2C  0EF3               	movlw	low __npowers_
  5908  000B2E  2427               	addwf	?___wmul,w,c
  5909  000B30  6EF6               	movwf	tblptrl,c
  5910  000B32  0E7E               	movlw	high __npowers_
  5911  000B34  2028               	addwfc	?___wmul+1,w,c
  5912  000B36  6EF7               	movwf	tblptrh,c
  5913  000B38                     	if	1	;There are 3 active tblptr bytes
  5914  000B38  6AF8               	clrf	tblptru,c
  5915  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  5916  000B3C  22F8               	addwfc	tblptru,f,c
  5917  000B3E                     	endif
  5918  000B3E  0009               	tblrd		*+
  5919  000B40  0100               	movlb	0	; () banked
  5920  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  5921  000B46  0009               	tblrd		*+
  5922  000B48  0100               	movlb	0	; () banked
  5923  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5924  000B4E  000A               	tblrd		*-
  5925  000B50  0100               	movlb	0	; () banked
  5926  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5927  000B56  EC6F  F009         	call	___ftmul	;wreg free
  5928  000B5A  D10E               	goto	L10
  5929  000B5C                     l4544:
  5930                           
  5931                           ;doprnt.c: 434: return _npowers_[scl];
  5932  000B5C  0100               	movlb	0	; () banked
  5933  000B5E  5172               	movf	scale@scl& (0+255),w,b
  5934  000B60  0D03               	mullw	3
  5935  000B62  0EF3               	movlw	low __npowers_
  5936  000B64  24F3               	addwf	prodl,w,c
  5937  000B66  6EF6               	movwf	tblptrl,c
  5938  000B68  0E7E               	movlw	high __npowers_
  5939  000B6A  D114               	goto	L9
  5940  000B6C                     l4548:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;doprnt.c: 435: }
  5944                           ;doprnt.c: 436: if(scl>=110)
  5945  000B6C  0100               	movlb	0	; () banked
  5946  000B6E  5172               	movf	scale@scl& (0+255),w,b
  5947  000B70  0A80               	xorlw	128
  5948  000B72  0F12               	addlw	-238
  5949  000B74  A0D8               	btfss	status,0,c
  5950  000B76  D0A0               	goto	l4556
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5954  000B78  0E00               	movlw	0
  5955  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  5956  000B7C  0E03               	movlw	3
  5957  000B7E  6E29               	movwf	___wmul@multiplicand,c
  5958  000B80  0E00               	movlw	0
  5959  000B82  6E22               	movwf	___awdiv@divisor+1,c
  5960  000B84  0E0A               	movlw	10
  5961  000B86  6E21               	movwf	___awdiv@divisor,c
  5962  000B88  0E00               	movlw	0
  5963  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  5964  000B8C  0E64               	movlw	100
  5965  000B8E  6E1B               	movwf	___awmod@divisor,c
  5966  000B90  0100               	movlb	0	; () banked
  5967  000B92  5172               	movf	scale@scl& (0+255),w,b
  5968  000B94  6E19               	movwf	___awmod@dividend,c
  5969  000B96  6A1A               	clrf	___awmod@dividend+1,c
  5970  000B98  BE19               	btfsc	___awmod@dividend,7,c
  5971  000B9A  061A               	decf	___awmod@dividend+1,f,c
  5972  000B9C  ECD6  F00E         	call	___awmod	;wreg free
  5973  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5974  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5975  000BA8  ECEF  F00D         	call	___awdiv	;wreg free
  5976  000BAC  0E09               	movlw	9
  5977  000BAE  241F               	addwf	?___awdiv,w,c
  5978  000BB0  6E27               	movwf	___wmul@multiplier,c
  5979  000BB2  0E00               	movlw	0
  5980  000BB4  2020               	addwfc	?___awdiv+1,w,c
  5981  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  5982  000BB8  ECA7  F013         	call	___wmul	;wreg free
  5983  000BBC  0E1A               	movlw	low __powers_
  5984  000BBE  2427               	addwf	?___wmul,w,c
  5985  000BC0  6EF6               	movwf	tblptrl,c
  5986  000BC2  0E7F               	movlw	high __powers_
  5987  000BC4  2028               	addwfc	?___wmul+1,w,c
  5988  000BC6  6EF7               	movwf	tblptrh,c
  5989  000BC8                     	if	1	;There are 3 active tblptr bytes
  5990  000BC8  6AF8               	clrf	tblptru,c
  5991  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  5992  000BCC  22F8               	addwfc	tblptru,f,c
  5993  000BCE                     	endif
  5994  000BCE  0009               	tblrd		*+
  5995  000BD0  0100               	movlb	0	; () banked
  5996  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  5997  000BD6  0009               	tblrd		*+
  5998  000BD8  0100               	movlb	0	; () banked
  5999  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6000  000BDE  000A               	tblrd		*-
  6001  000BE0  0100               	movlb	0	; () banked
  6002  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6003  000BE6  0E00               	movlw	0
  6004  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6005  000BEA  0E64               	movlw	100
  6006  000BEC  6E21               	movwf	___awdiv@divisor,c
  6007  000BEE  0100               	movlb	0	; () banked
  6008  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6009  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6010  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6011  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6012  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6013  000BFA  ECEF  F00D         	call	___awdiv	;wreg free
  6014  000BFE  0E12               	movlw	18
  6015  000C00  241F               	addwf	?___awdiv,w,c
  6016  000C02  6E27               	movwf	___wmul@multiplier,c
  6017  000C04  0E00               	movlw	0
  6018  000C06  2020               	addwfc	?___awdiv+1,w,c
  6019  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6020  000C0A  0E00               	movlw	0
  6021  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6022  000C0E  0E03               	movlw	3
  6023  000C10  6E29               	movwf	___wmul@multiplicand,c
  6024  000C12  ECA7  F013         	call	___wmul	;wreg free
  6025  000C16  0E1A               	movlw	low __powers_
  6026  000C18  2427               	addwf	?___wmul,w,c
  6027  000C1A  6EF6               	movwf	tblptrl,c
  6028  000C1C  0E7F               	movlw	high __powers_
  6029  000C1E  2028               	addwfc	?___wmul+1,w,c
  6030  000C20  6EF7               	movwf	tblptrh,c
  6031  000C22                     	if	1	;There are 3 active tblptr bytes
  6032  000C22  6AF8               	clrf	tblptru,c
  6033  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6034  000C26  22F8               	addwfc	tblptru,f,c
  6035  000C28                     	endif
  6036  000C28  0009               	tblrd		*+
  6037  000C2A  0100               	movlb	0	; () banked
  6038  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6039  000C30  0009               	tblrd		*+
  6040  000C32  0100               	movlb	0	; () banked
  6041  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6042  000C38  000A               	tblrd		*-
  6043  000C3A  0100               	movlb	0	; () banked
  6044  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6045  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6046  000C44  C060  F06F         	movff	?___ftmul,_scale$2289
  6047  000C48  C061  F070         	movff	?___ftmul+1,_scale$2289+1
  6048  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2289+2
  6049                           
  6050                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6051  000C50  C06F  F060         	movff	_scale$2289,___ftmul@f1
  6052  000C54  C070  F061         	movff	_scale$2289+1,___ftmul@f1+1
  6053  000C58  C071  F062         	movff	_scale$2289+2,___ftmul@f1+2
  6054  000C5C  0E00               	movlw	0
  6055  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6056  000C60  0E03               	movlw	3
  6057  000C62  6E29               	movwf	___wmul@multiplicand,c
  6058  000C64  0E00               	movlw	0
  6059  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6060  000C68  0E0A               	movlw	10
  6061  000C6A  6E1B               	movwf	___awmod@divisor,c
  6062  000C6C  0100               	movlb	0	; () banked
  6063  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6064  000C70  6E19               	movwf	___awmod@dividend,c
  6065  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6066  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6067  000C76  061A               	decf	___awmod@dividend+1,f,c
  6068  000C78  ECD6  F00E         	call	___awmod	;wreg free
  6069  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6070  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6071  000C84  ECA7  F013         	call	___wmul	;wreg free
  6072  000C88  0E1A               	movlw	low __powers_
  6073  000C8A  2427               	addwf	?___wmul,w,c
  6074  000C8C  6EF6               	movwf	tblptrl,c
  6075  000C8E  0E7F               	movlw	high __powers_
  6076  000C90  2028               	addwfc	?___wmul+1,w,c
  6077  000C92  6EF7               	movwf	tblptrh,c
  6078  000C94                     	if	1	;There are 3 active tblptr bytes
  6079  000C94  6AF8               	clrf	tblptru,c
  6080  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6081  000C98  22F8               	addwfc	tblptru,f,c
  6082  000C9A                     	endif
  6083  000C9A  0009               	tblrd		*+
  6084  000C9C  0100               	movlb	0	; () banked
  6085  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6086  000CA2  0009               	tblrd		*+
  6087  000CA4  0100               	movlb	0	; () banked
  6088  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6089  000CAA  000A               	tblrd		*-
  6090  000CAC  0100               	movlb	0	; () banked
  6091  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6092  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6093  000CB6  D060               	goto	L10
  6094  000CB8                     l4556:
  6095                           
  6096                           ;doprnt.c: 438: else if(scl > 10)
  6097  000CB8  0100               	movlb	0	; () banked
  6098  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6099  000CBC  0A80               	xorlw	128
  6100  000CBE  0F75               	addlw	-139
  6101  000CC0  A0D8               	btfss	status,0,c
  6102  000CC2  D061               	goto	l4562
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6106  000CC4  0E00               	movlw	0
  6107  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6108  000CC8  0E0A               	movlw	10
  6109  000CCA  6E21               	movwf	___awdiv@divisor,c
  6110  000CCC  0100               	movlb	0	; () banked
  6111  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6112  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6113  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6114  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6115  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6116  000CD8  ECEF  F00D         	call	___awdiv	;wreg free
  6117  000CDC  0E09               	movlw	9
  6118  000CDE  241F               	addwf	?___awdiv,w,c
  6119  000CE0  6E27               	movwf	___wmul@multiplier,c
  6120  000CE2  0E00               	movlw	0
  6121  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6122  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6123  000CE8  0E00               	movlw	0
  6124  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6125  000CEC  0E03               	movlw	3
  6126  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6127  000CF0  ECA7  F013         	call	___wmul	;wreg free
  6128  000CF4  0E1A               	movlw	low __powers_
  6129  000CF6  2427               	addwf	?___wmul,w,c
  6130  000CF8  6EF6               	movwf	tblptrl,c
  6131  000CFA  0E7F               	movlw	high __powers_
  6132  000CFC  2028               	addwfc	?___wmul+1,w,c
  6133  000CFE  6EF7               	movwf	tblptrh,c
  6134  000D00                     	if	1	;There are 3 active tblptr bytes
  6135  000D00  6AF8               	clrf	tblptru,c
  6136  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6137  000D04  22F8               	addwfc	tblptru,f,c
  6138  000D06                     	endif
  6139  000D06  0009               	tblrd		*+
  6140  000D08  0100               	movlb	0	; () banked
  6141  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6142  000D0E  0009               	tblrd		*+
  6143  000D10  0100               	movlb	0	; () banked
  6144  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6145  000D16  000A               	tblrd		*-
  6146  000D18  0100               	movlb	0	; () banked
  6147  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6148  000D1E  0E00               	movlw	0
  6149  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6150  000D22  0E03               	movlw	3
  6151  000D24  6E29               	movwf	___wmul@multiplicand,c
  6152  000D26  0E00               	movlw	0
  6153  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6154  000D2A  0E0A               	movlw	10
  6155  000D2C  6E1B               	movwf	___awmod@divisor,c
  6156  000D2E  0100               	movlb	0	; () banked
  6157  000D30  5172               	movf	scale@scl& (0+255),w,b
  6158  000D32  6E19               	movwf	___awmod@dividend,c
  6159  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6160  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6161  000D38  061A               	decf	___awmod@dividend+1,f,c
  6162  000D3A  ECD6  F00E         	call	___awmod	;wreg free
  6163  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6164  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6165  000D46  ECA7  F013         	call	___wmul	;wreg free
  6166  000D4A  0E1A               	movlw	low __powers_
  6167  000D4C  2427               	addwf	?___wmul,w,c
  6168  000D4E  6EF6               	movwf	tblptrl,c
  6169  000D50  0E7F               	movlw	high __powers_
  6170  000D52  2028               	addwfc	?___wmul+1,w,c
  6171  000D54  6EF7               	movwf	tblptrh,c
  6172  000D56                     	if	1	;There are 3 active tblptr bytes
  6173  000D56  6AF8               	clrf	tblptru,c
  6174  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6175  000D5A  22F8               	addwfc	tblptru,f,c
  6176  000D5C                     	endif
  6177  000D5C  0009               	tblrd		*+
  6178  000D5E  0100               	movlb	0	; () banked
  6179  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6180  000D64  0009               	tblrd		*+
  6181  000D66  0100               	movlb	0	; () banked
  6182  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6183  000D6C  000A               	tblrd		*-
  6184  000D6E  0100               	movlb	0	; () banked
  6185  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6186  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6187  000D78                     L10:
  6188  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6189  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6190  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6191  000D84  D018               	goto	l437
  6192  000D86                     l4562:
  6193                           
  6194                           ;doprnt.c: 440: return _powers_[scl];
  6195  000D86  0100               	movlb	0	; () banked
  6196  000D88  5172               	movf	scale@scl& (0+255),w,b
  6197  000D8A  0D03               	mullw	3
  6198  000D8C  0E1A               	movlw	low __powers_
  6199  000D8E  24F3               	addwf	prodl,w,c
  6200  000D90  6EF6               	movwf	tblptrl,c
  6201  000D92  0E7F               	movlw	high __powers_
  6202  000D94                     L9:
  6203  000D94  20F4               	addwfc	prodh,w,c
  6204  000D96  6EF7               	movwf	tblptrh,c
  6205  000D98                     	if	1	;There are 3 active tblptr bytes
  6206  000D98  6AF8               	clrf	tblptru,c
  6207  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6208  000D9C  22F8               	addwfc	tblptru,f,c
  6209  000D9E                     	endif
  6210  000D9E  0009               	tblrd		*+
  6211  000DA0  0100               	movlb	0	; () banked
  6212  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6213  000DA6  0009               	tblrd		*+
  6214  000DA8  0100               	movlb	0	; () banked
  6215  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6216  000DAE  000A               	tblrd		*-
  6217  000DB0  0100               	movlb	0	; () banked
  6218  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6219  000DB6                     l437:
  6220  000DB6  0012               	return	
  6221  000DB8                     __end_of_scale:
  6222                           	opt stack 0
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           indf0	equ	0xFEF
  6231                           postinc0	equ	0xFEE
  6232                           fsr0h	equ	0xFEA
  6233                           fsr0l	equ	0xFE9
  6234                           wreg	equ	0xFE8
  6235                           postinc1	equ	0xFE6
  6236                           postdec1	equ	0xFE5
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           fsr2h	equ	0xFDA
  6242                           fsr2l	equ	0xFD9
  6243                           status	equ	0xFD8
  6244                           
  6245 ;; *************** function _fround *****************
  6246 ;; Defined at:
  6247 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  prec            1    wreg     unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  prec            1   21[BANK0 ] unsigned char 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  3   12[BANK0 ] unsigned char 
  6254 ;; Registers used:
  6255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6261 ;;      Params:         0       3       0       0       0       0       0       0       0
  6262 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6264 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6265 ;;Total ram usage:       10 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; Hardware stack levels required when called:    6
  6268 ;; This function calls:
  6269 ;;		___awdiv
  6270 ;;		___awmod
  6271 ;;		___ftmul
  6272 ;;		___wmul
  6273 ;; This function is called by:
  6274 ;;		_sprintf
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text28
  6279  000DB8                     __ptext28:
  6280                           	opt stack 0
  6281  000DB8                     _fround:
  6282                           	opt stack 21
  6283                           
  6284                           ;incstack = 0
  6285                           ;fround@prec stored from wreg
  6286  000DB8  0100               	movlb	0	; () banked
  6287  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;doprnt.c: 413: if(prec>=110)
  6291  000DBC  0E6D               	movlw	109
  6292  000DBE  0100               	movlb	0	; () banked
  6293  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6294  000DC2  D0B1               	goto	l4516
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6298  000DC4  0E00               	movlw	0
  6299  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6300  000DC8  0E03               	movlw	3
  6301  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6302  000DCC  0E00               	movlw	0
  6303  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6304  000DD0  0E0A               	movlw	10
  6305  000DD2  6E21               	movwf	___awdiv@divisor,c
  6306  000DD4  0E00               	movlw	0
  6307  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6308  000DD8  0E64               	movlw	100
  6309  000DDA  6E1B               	movwf	___awmod@divisor,c
  6310  000DDC  0100               	movlb	0	; () banked
  6311  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6312  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6313  000DE4  ECD6  F00E         	call	___awmod	;wreg free
  6314  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6315  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6316  000DF0  ECEF  F00D         	call	___awdiv	;wreg free
  6317  000DF4  0E09               	movlw	9
  6318  000DF6  241F               	addwf	?___awdiv,w,c
  6319  000DF8  6E27               	movwf	___wmul@multiplier,c
  6320  000DFA  0E00               	movlw	0
  6321  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6322  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6323  000E00  ECA7  F013         	call	___wmul	;wreg free
  6324  000E04  0EF3               	movlw	low __npowers_
  6325  000E06  2427               	addwf	?___wmul,w,c
  6326  000E08  6EF6               	movwf	tblptrl,c
  6327  000E0A  0E7E               	movlw	high __npowers_
  6328  000E0C  2028               	addwfc	?___wmul+1,w,c
  6329  000E0E  6EF7               	movwf	tblptrh,c
  6330  000E10                     	if	1	;There are 3 active tblptr bytes
  6331  000E10  6AF8               	clrf	tblptru,c
  6332  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6333  000E14  22F8               	addwfc	tblptru,f,c
  6334  000E16                     	endif
  6335  000E16  0009               	tblrd		*+
  6336  000E18  0100               	movlb	0	; () banked
  6337  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6338  000E1E  0009               	tblrd		*+
  6339  000E20  0100               	movlb	0	; () banked
  6340  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6341  000E26  000A               	tblrd		*-
  6342  000E28  0100               	movlb	0	; () banked
  6343  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6344  000E2E  0E00               	movlw	0
  6345  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6346  000E32  0E64               	movlw	100
  6347  000E34  6E21               	movwf	___awdiv@divisor,c
  6348  000E36  0100               	movlb	0	; () banked
  6349  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6350  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6351  000E3E  ECEF  F00D         	call	___awdiv	;wreg free
  6352  000E42  0E12               	movlw	18
  6353  000E44  241F               	addwf	?___awdiv,w,c
  6354  000E46  6E27               	movwf	___wmul@multiplier,c
  6355  000E48  0E00               	movlw	0
  6356  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6357  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6358  000E4E  0E00               	movlw	0
  6359  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6360  000E52  0E03               	movlw	3
  6361  000E54  6E29               	movwf	___wmul@multiplicand,c
  6362  000E56  ECA7  F013         	call	___wmul	;wreg free
  6363  000E5A  0EF3               	movlw	low __npowers_
  6364  000E5C  2427               	addwf	?___wmul,w,c
  6365  000E5E  6EF6               	movwf	tblptrl,c
  6366  000E60  0E7E               	movlw	high __npowers_
  6367  000E62  2028               	addwfc	?___wmul+1,w,c
  6368  000E64  6EF7               	movwf	tblptrh,c
  6369  000E66                     	if	1	;There are 3 active tblptr bytes
  6370  000E66  6AF8               	clrf	tblptru,c
  6371  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6372  000E6A  22F8               	addwfc	tblptru,f,c
  6373  000E6C                     	endif
  6374  000E6C  0009               	tblrd		*+
  6375  000E6E  0100               	movlb	0	; () banked
  6376  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6377  000E74  0009               	tblrd		*+
  6378  000E76  0100               	movlb	0	; () banked
  6379  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6380  000E7C  000A               	tblrd		*-
  6381  000E7E  0100               	movlb	0	; () banked
  6382  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6383  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6384  000E88  C060  F072         	movff	?___ftmul,_fround$2287
  6385  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2287+1
  6386  000E90  C062  F074         	movff	?___ftmul+2,_fround$2287+2
  6387                           
  6388                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6389  000E94  0E00               	movlw	0
  6390  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6391  000E98  0E03               	movlw	3
  6392  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6393  000E9C  0E00               	movlw	0
  6394  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6395  000EA0  0E0A               	movlw	10
  6396  000EA2  6E1B               	movwf	___awmod@divisor,c
  6397  000EA4  0100               	movlb	0	; () banked
  6398  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6399  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6400  000EAC  ECD6  F00E         	call	___awmod	;wreg free
  6401  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6402  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6403  000EB8  ECA7  F013         	call	___wmul	;wreg free
  6404  000EBC  0EF3               	movlw	low __npowers_
  6405  000EBE  2427               	addwf	?___wmul,w,c
  6406  000EC0  6EF6               	movwf	tblptrl,c
  6407  000EC2  0E7E               	movlw	high __npowers_
  6408  000EC4  2028               	addwfc	?___wmul+1,w,c
  6409  000EC6  6EF7               	movwf	tblptrh,c
  6410  000EC8                     	if	1	;There are 3 active tblptr bytes
  6411  000EC8  6AF8               	clrf	tblptru,c
  6412  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6413  000ECC  22F8               	addwfc	tblptru,f,c
  6414  000ECE                     	endif
  6415  000ECE  0009               	tblrd		*+
  6416  000ED0  0100               	movlb	0	; () banked
  6417  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6418  000ED6  0009               	tblrd		*+
  6419  000ED8  0100               	movlb	0	; () banked
  6420  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6421  000EDE  000A               	tblrd		*-
  6422  000EE0  0100               	movlb	0	; () banked
  6423  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6424  000EE6  C072  F060         	movff	_fround$2287,___ftmul@f1
  6425  000EEA  C073  F061         	movff	_fround$2287+1,___ftmul@f1+1
  6426  000EEE  C074  F062         	movff	_fround$2287+2,___ftmul@f1+2
  6427  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6428  000EF6  C060  F06F         	movff	?___ftmul,_fround$2288
  6429  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2288+1
  6430  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2288+2
  6431                           
  6432                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6433  000F02  C06F  F060         	movff	_fround$2288,___ftmul@f1
  6434  000F06  C070  F061         	movff	_fround$2288+1,___ftmul@f1+1
  6435  000F0A  C071  F062         	movff	_fround$2288+2,___ftmul@f1+2
  6436  000F0E  0E00               	movlw	0
  6437  000F10  0100               	movlb	0	; () banked
  6438  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6439  000F14  0E00               	movlw	0
  6440  000F16  0100               	movlb	0	; () banked
  6441  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6442  000F1A  0E3F               	movlw	63
  6443  000F1C  0100               	movlb	0	; () banked
  6444  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6445  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6446  000F24  D095               	goto	L12
  6447  000F26                     l4516:
  6448                           
  6449                           ;doprnt.c: 415: else if(prec > 10)
  6450  000F26  0E0A               	movlw	10
  6451  000F28  0100               	movlb	0	; () banked
  6452  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6453  000F2C  D06E               	goto	l4524
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6457  000F2E  0E00               	movlw	0
  6458  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6459  000F32  0E03               	movlw	3
  6460  000F34  6E29               	movwf	___wmul@multiplicand,c
  6461  000F36  0E00               	movlw	0
  6462  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6463  000F3A  0E0A               	movlw	10
  6464  000F3C  6E1B               	movwf	___awmod@divisor,c
  6465  000F3E  0100               	movlb	0	; () banked
  6466  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6467  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6468  000F46  ECD6  F00E         	call	___awmod	;wreg free
  6469  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6470  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6471  000F52  ECA7  F013         	call	___wmul	;wreg free
  6472  000F56  0EF3               	movlw	low __npowers_
  6473  000F58  2427               	addwf	?___wmul,w,c
  6474  000F5A  6EF6               	movwf	tblptrl,c
  6475  000F5C  0E7E               	movlw	high __npowers_
  6476  000F5E  2028               	addwfc	?___wmul+1,w,c
  6477  000F60  6EF7               	movwf	tblptrh,c
  6478  000F62                     	if	1	;There are 3 active tblptr bytes
  6479  000F62  6AF8               	clrf	tblptru,c
  6480  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6481  000F66  22F8               	addwfc	tblptru,f,c
  6482  000F68                     	endif
  6483  000F68  0009               	tblrd		*+
  6484  000F6A  0100               	movlb	0	; () banked
  6485  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6486  000F70  0009               	tblrd		*+
  6487  000F72  0100               	movlb	0	; () banked
  6488  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6489  000F78  000A               	tblrd		*-
  6490  000F7A  0100               	movlb	0	; () banked
  6491  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6492  000F80  0E00               	movlw	0
  6493  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6494  000F84  0E0A               	movlw	10
  6495  000F86  6E21               	movwf	___awdiv@divisor,c
  6496  000F88  0100               	movlb	0	; () banked
  6497  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6498  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6499  000F90  ECEF  F00D         	call	___awdiv	;wreg free
  6500  000F94  0E09               	movlw	9
  6501  000F96  241F               	addwf	?___awdiv,w,c
  6502  000F98  6E27               	movwf	___wmul@multiplier,c
  6503  000F9A  0E00               	movlw	0
  6504  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6505  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6506  000FA0  0E00               	movlw	0
  6507  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6508  000FA4  0E03               	movlw	3
  6509  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6510  000FA8  ECA7  F013         	call	___wmul	;wreg free
  6511  000FAC  0EF3               	movlw	low __npowers_
  6512  000FAE  2427               	addwf	?___wmul,w,c
  6513  000FB0  6EF6               	movwf	tblptrl,c
  6514  000FB2  0E7E               	movlw	high __npowers_
  6515  000FB4  2028               	addwfc	?___wmul+1,w,c
  6516  000FB6  6EF7               	movwf	tblptrh,c
  6517  000FB8                     	if	1	;There are 3 active tblptr bytes
  6518  000FB8  6AF8               	clrf	tblptru,c
  6519  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6520  000FBC  22F8               	addwfc	tblptru,f,c
  6521  000FBE                     	endif
  6522  000FBE  0009               	tblrd		*+
  6523  000FC0  0100               	movlb	0	; () banked
  6524  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6525  000FC6  0009               	tblrd		*+
  6526  000FC8  0100               	movlb	0	; () banked
  6527  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6528  000FCE  000A               	tblrd		*-
  6529  000FD0  0100               	movlb	0	; () banked
  6530  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6531  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6532  000FDA  C060  F072         	movff	?___ftmul,_fround$2287
  6533  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2287+1
  6534  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2287+2
  6535                           
  6536                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6537  000FE6  C072  F060         	movff	_fround$2287,___ftmul@f1
  6538  000FEA  C073  F061         	movff	_fround$2287+1,___ftmul@f1+1
  6539  000FEE  C074  F062         	movff	_fround$2287+2,___ftmul@f1+2
  6540  000FF2  0E00               	movlw	0
  6541  000FF4  0100               	movlb	0	; () banked
  6542  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6543  000FF8  0E00               	movlw	0
  6544  000FFA  0100               	movlb	0	; () banked
  6545  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6546  000FFE  0E3F               	movlw	63
  6547  001000  0100               	movlb	0	; () banked
  6548  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6549  001004  EC6F  F009         	call	___ftmul	;wreg free
  6550  001008  D023               	goto	L12
  6551  00100A                     l4524:
  6552                           
  6553                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6554  00100A  0100               	movlb	0	; () banked
  6555  00100C  5175               	movf	fround@prec& (0+255),w,b
  6556  00100E  0D03               	mullw	3
  6557  001010  0EF3               	movlw	low __npowers_
  6558  001012  24F3               	addwf	prodl,w,c
  6559  001014  6EF6               	movwf	tblptrl,c
  6560  001016  0E7E               	movlw	high __npowers_
  6561  001018  20F4               	addwfc	prodh,w,c
  6562  00101A  6EF7               	movwf	tblptrh,c
  6563  00101C                     	if	1	;There are 3 active tblptr bytes
  6564  00101C  6AF8               	clrf	tblptru,c
  6565  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6566  001020  22F8               	addwfc	tblptru,f,c
  6567  001022                     	endif
  6568  001022  0009               	tblrd		*+
  6569  001024  0100               	movlb	0	; () banked
  6570  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6571  00102A  0009               	tblrd		*+
  6572  00102C  0100               	movlb	0	; () banked
  6573  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6574  001032  000A               	tblrd		*-
  6575  001034  0100               	movlb	0	; () banked
  6576  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6577  00103A  0E00               	movlw	0
  6578  00103C  0100               	movlb	0	; () banked
  6579  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6580  001040  0E00               	movlw	0
  6581  001042  0100               	movlb	0	; () banked
  6582  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6583  001046  0E3F               	movlw	63
  6584  001048  0100               	movlb	0	; () banked
  6585  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6586  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6587  001050                     L12:
  6588  001050  C060  F06C         	movff	?___ftmul,?_fround
  6589  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6590  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6591  00105C  0012               	return	
  6592  00105E                     __end_of_fround:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           indf0	equ	0xFEF
  6602                           postinc0	equ	0xFEE
  6603                           fsr0h	equ	0xFEA
  6604                           fsr0l	equ	0xFE9
  6605                           wreg	equ	0xFE8
  6606                           postinc1	equ	0xFE6
  6607                           postdec1	equ	0xFE5
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function ___wmul *****************
  6617 ;; Defined at:
  6618 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  multiplier      2   38[COMRAM] unsigned int 
  6621 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  product         2   42[COMRAM] unsigned int 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  2   38[COMRAM] unsigned int 
  6626 ;; Registers used:
  6627 ;;		wreg, status,2, status,0, prodl, prodh
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6633 ;;      Params:         4       0       0       0       0       0       0       0       0
  6634 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6636 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6637 ;;Total ram usage:        6 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    4
  6640 ;; This function calls:
  6641 ;;		Nothing
  6642 ;; This function is called by:
  6643 ;;		_fround
  6644 ;;		_scale
  6645 ;;		_sprintf
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text29
  6650  00274E                     __ptext29:
  6651                           	opt stack 0
  6652  00274E                     ___wmul:
  6653                           	opt stack 22
  6654                           
  6655                           ;incstack = 0
  6656  00274E  5027               	movf	___wmul@multiplier,w,c
  6657  002750  0229               	mulwf	___wmul@multiplicand,c
  6658  002752  CFF3 F02B          	movff	prodl,___wmul@product
  6659  002756  CFF4 F02C          	movff	prodh,___wmul@product+1
  6660  00275A  5027               	movf	___wmul@multiplier,w,c
  6661  00275C  022A               	mulwf	___wmul@multiplicand+1,c
  6662  00275E  50F3               	movf	prodl,w,c
  6663  002760  262C               	addwf	___wmul@product+1,f,c
  6664  002762  5028               	movf	___wmul@multiplier+1,w,c
  6665  002764  0229               	mulwf	___wmul@multiplicand,c
  6666  002766  50F3               	movf	prodl,w,c
  6667  002768  262C               	addwf	___wmul@product+1,f,c
  6668  00276A  C02B  F027         	movff	___wmul@product,?___wmul
  6669  00276E  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6670  002772  0012               	return	
  6671  002774                     __end_of___wmul:
  6672                           	opt stack 0
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           intcon	equ	0xFF2
  6680                           indf0	equ	0xFEF
  6681                           postinc0	equ	0xFEE
  6682                           fsr0h	equ	0xFEA
  6683                           fsr0l	equ	0xFE9
  6684                           wreg	equ	0xFE8
  6685                           postinc1	equ	0xFE6
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function ___ftmul *****************
  6696 ;; Defined at:
  6697 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  f1              3    0[BANK0 ] float 
  6700 ;;  f2              3    3[BANK0 ] float 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6703 ;;  sign            1   11[BANK0 ] unsigned char 
  6704 ;;  cntr            1   10[BANK0 ] unsigned char 
  6705 ;;  exp             1    6[BANK0 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  3    0[BANK0 ] float 
  6708 ;; Registers used:
  6709 ;;		wreg, status,2, status,0, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6715 ;;      Params:         0       6       0       0       0       0       0       0       0
  6716 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6717 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6718 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6719 ;;Total ram usage:       15 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    5
  6722 ;; This function calls:
  6723 ;;		___ftpack
  6724 ;; This function is called by:
  6725 ;;		_PWM_DutyCycle1
  6726 ;;		_PWM_DutyCycle2
  6727 ;;		_fround
  6728 ;;		_scale
  6729 ;;		_sprintf
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text30
  6734  0012DE                     __ptext30:
  6735                           	opt stack 0
  6736  0012DE                     ___ftmul:
  6737                           	opt stack 21
  6738                           
  6739                           ;incstack = 0
  6740  0012DE  0100               	movlb	0	; () banked
  6741  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6742  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6743  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6744  0012E8  0100               	movlb	0	; () banked
  6745  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6746  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6747  0012EE  E301               	bnc	u4191
  6748  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6749  0012F2                     u4191:
  6750  0012F2  502D               	movf	??___ftmul,w,c
  6751  0012F4  0100               	movlb	0	; () banked
  6752  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6753  0012F8  0100               	movlb	0	; () banked
  6754  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6755  0012FC  D001               	goto	l4288
  6756  0012FE  D010               	goto	u4220
  6757  001300                     l4288:
  6758                           
  6759                           ; BSR set to: 0
  6760  001300  0100               	movlb	0	; () banked
  6761  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6762  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6763  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6764  00130A  0100               	movlb	0	; () banked
  6765  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6766  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6767  001310  E301               	bnc	u4211
  6768  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6769  001314                     u4211:
  6770  001314  502D               	movf	??___ftmul,w,c
  6771  001316  0100               	movlb	0	; () banked
  6772  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6773  00131A  0100               	movlb	0	; () banked
  6774  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  6775  00131E  D00A               	goto	l4294
  6776  001320                     u4220:
  6777                           
  6778                           ; BSR set to: 0
  6779  001320  0E00               	movlw	0
  6780  001322  0100               	movlb	0	; () banked
  6781  001324  6F60               	movwf	?___ftmul& (0+255),b
  6782  001326  0E00               	movlw	0
  6783  001328  0100               	movlb	0	; () banked
  6784  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6785  00132C  0E00               	movlw	0
  6786  00132E  0100               	movlb	0	; () banked
  6787  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6788  001332  D080               	goto	l1031
  6789  001334                     l4294:
  6790                           
  6791                           ; BSR set to: 0
  6792  001334  0100               	movlb	0	; () banked
  6793  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  6794  001338  0F7B               	addlw	123
  6795  00133A  0100               	movlb	0	; () banked
  6796  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  6797                           
  6798                           ; BSR set to: 0
  6799  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6800  001342  0100               	movlb	0	; () banked
  6801  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6802  001346  0100               	movlb	0	; () banked
  6803  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6804  00134A  0E80               	movlw	128
  6805  00134C  0100               	movlb	0	; () banked
  6806  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  6807                           
  6808                           ; BSR set to: 0
  6809  001350  0100               	movlb	0	; () banked
  6810  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6811                           
  6812                           ; BSR set to: 0
  6813  001354  0100               	movlb	0	; () banked
  6814  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6815                           
  6816                           ; BSR set to: 0
  6817  001358  0EFF               	movlw	255
  6818  00135A  0100               	movlb	0	; () banked
  6819  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  6820  00135E  0EFF               	movlw	255
  6821  001360  0100               	movlb	0	; () banked
  6822  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6823  001364  0E00               	movlw	0
  6824  001366  0100               	movlb	0	; () banked
  6825  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6826                           
  6827                           ; BSR set to: 0
  6828  00136A  0E00               	movlw	0
  6829  00136C  0100               	movlb	0	; () banked
  6830  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  6831  001370  0E00               	movlw	0
  6832  001372  0100               	movlb	0	; () banked
  6833  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6834  001376  0E00               	movlw	0
  6835  001378  0100               	movlb	0	; () banked
  6836  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839  00137C  0E07               	movlw	7
  6840  00137E  0100               	movlb	0	; () banked
  6841  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6842  001382                     l4308:
  6843                           
  6844                           ; BSR set to: 0
  6845  001382  0100               	movlb	0	; () banked
  6846  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  6847  001386  D00C               	goto	l4312
  6848                           
  6849                           ; BSR set to: 0
  6850  001388  0100               	movlb	0	; () banked
  6851  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  6852  00138C  0100               	movlb	0	; () banked
  6853  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6854  001390  0100               	movlb	0	; () banked
  6855  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6856  001394  0100               	movlb	0	; () banked
  6857  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6858  001398  0100               	movlb	0	; () banked
  6859  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6860  00139C  0100               	movlb	0	; () banked
  6861  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6862  0013A0                     l4312:
  6863                           
  6864                           ; BSR set to: 0
  6865  0013A0  0100               	movlb	0	; () banked
  6866  0013A2  90D8               	bcf	status,0,c
  6867  0013A4  0100               	movlb	0	; () banked
  6868  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6869  0013A8  0100               	movlb	0	; () banked
  6870  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6871  0013AC  0100               	movlb	0	; () banked
  6872  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6873  0013B0  0100               	movlb	0	; () banked
  6874  0013B2  90D8               	bcf	status,0,c
  6875  0013B4  0100               	movlb	0	; () banked
  6876  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  6877  0013B8  0100               	movlb	0	; () banked
  6878  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6879  0013BC  0100               	movlb	0	; () banked
  6880  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6881                           
  6882                           ; BSR set to: 0
  6883  0013C0  0100               	movlb	0	; () banked
  6884  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6885  0013C4  D7DE               	goto	l4308
  6886                           
  6887                           ; BSR set to: 0
  6888                           
  6889                           ; BSR set to: 0
  6890  0013C6  0E09               	movlw	9
  6891  0013C8  0100               	movlb	0	; () banked
  6892  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6893  0013CC                     l4318:
  6894                           
  6895                           ; BSR set to: 0
  6896  0013CC  0100               	movlb	0	; () banked
  6897  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  6898  0013D0  D00C               	goto	l4322
  6899                           
  6900                           ; BSR set to: 0
  6901  0013D2  0100               	movlb	0	; () banked
  6902  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  6903  0013D6  0100               	movlb	0	; () banked
  6904  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6905  0013DA  0100               	movlb	0	; () banked
  6906  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6907  0013DE  0100               	movlb	0	; () banked
  6908  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6909  0013E2  0100               	movlb	0	; () banked
  6910  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6911  0013E6  0100               	movlb	0	; () banked
  6912  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6913  0013EA                     l4322:
  6914                           
  6915                           ; BSR set to: 0
  6916  0013EA  0100               	movlb	0	; () banked
  6917  0013EC  90D8               	bcf	status,0,c
  6918  0013EE  0100               	movlb	0	; () banked
  6919  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6920  0013F2  0100               	movlb	0	; () banked
  6921  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6922  0013F6  0100               	movlb	0	; () banked
  6923  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6924  0013FA  0100               	movlb	0	; () banked
  6925  0013FC  90D8               	bcf	status,0,c
  6926  0013FE  0100               	movlb	0	; () banked
  6927  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6928  001402  0100               	movlb	0	; () banked
  6929  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6930  001406  0100               	movlb	0	; () banked
  6931  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6932                           
  6933                           ; BSR set to: 0
  6934  00140A  0100               	movlb	0	; () banked
  6935  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6936  00140E  D7DE               	goto	l4318
  6937                           
  6938                           ; BSR set to: 0
  6939                           
  6940                           ; BSR set to: 0
  6941  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6942  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6943  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6944  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  6945  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  6946  001424  EC48  F00D         	call	___ftpack	;wreg free
  6947  001428  C019  F060         	movff	?___ftpack,?___ftmul
  6948  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  6949  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  6950  001434                     l1031:
  6951  001434  0012               	return	
  6952  001436                     __end_of___ftmul:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon	equ	0xFF2
  6961                           indf0	equ	0xFEF
  6962                           postinc0	equ	0xFEE
  6963                           fsr0h	equ	0xFEA
  6964                           fsr0l	equ	0xFE9
  6965                           wreg	equ	0xFE8
  6966                           postinc1	equ	0xFE6
  6967                           postdec1	equ	0xFE5
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           fsr2h	equ	0xFDA
  6973                           fsr2l	equ	0xFD9
  6974                           status	equ	0xFD8
  6975                           
  6976 ;; *************** function ___awmod *****************
  6977 ;; Defined at:
  6978 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  dividend        2   24[COMRAM] int 
  6981 ;;  divisor         2   26[COMRAM] int 
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;  sign            1   29[COMRAM] unsigned char 
  6984 ;;  counter         1   28[COMRAM] unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  2   24[COMRAM] int 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0, prodl
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6994 ;;      Params:         4       0       0       0       0       0       0       0       0
  6995 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6997 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6998 ;;Total ram usage:        6 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    4
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_fround
  7005 ;;		_scale
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text31
  7010  001DAC                     __ptext31:
  7011                           	opt stack 0
  7012  001DAC                     ___awmod:
  7013                           	opt stack 22
  7014                           
  7015                           ;incstack = 0
  7016  001DAC  0E00               	movlw	0
  7017  001DAE  6E1E               	movwf	___awmod@sign,c
  7018  001DB0  501A               	movf	___awmod@dividend+1,w,c
  7019  001DB2  0A80               	xorlw	128
  7020  001DB4  6EF3               	movwf	prodl,c
  7021  001DB6  0E80               	movlw	128
  7022  001DB8  5CF3               	subwf	prodl,w,c
  7023  001DBA  0E00               	movlw	0
  7024  001DBC  B4D8               	btfsc	status,2,c
  7025  001DBE  5C19               	subwf	___awmod@dividend,w,c
  7026  001DC0  B0D8               	btfsc	status,0,c
  7027  001DC2  D006               	goto	l4382
  7028  001DC4  6C19               	negf	___awmod@dividend,c
  7029  001DC6  1E1A               	comf	___awmod@dividend+1,f,c
  7030  001DC8  B0D8               	btfsc	status,0,c
  7031  001DCA  2A1A               	incf	___awmod@dividend+1,f,c
  7032  001DCC  0E01               	movlw	1
  7033  001DCE  6E1E               	movwf	___awmod@sign,c
  7034  001DD0                     l4382:
  7035  001DD0  501C               	movf	___awmod@divisor+1,w,c
  7036  001DD2  0A80               	xorlw	128
  7037  001DD4  6EF3               	movwf	prodl,c
  7038  001DD6  0E80               	movlw	128
  7039  001DD8  5CF3               	subwf	prodl,w,c
  7040  001DDA  0E00               	movlw	0
  7041  001DDC  B4D8               	btfsc	status,2,c
  7042  001DDE  5C1B               	subwf	___awmod@divisor,w,c
  7043  001DE0  B0D8               	btfsc	status,0,c
  7044  001DE2  D004               	goto	l4386
  7045  001DE4  6C1B               	negf	___awmod@divisor,c
  7046  001DE6  1E1C               	comf	___awmod@divisor+1,f,c
  7047  001DE8  B0D8               	btfsc	status,0,c
  7048  001DEA  2A1C               	incf	___awmod@divisor+1,f,c
  7049  001DEC                     l4386:
  7050  001DEC  501C               	movf	___awmod@divisor+1,w,c
  7051  001DEE  101B               	iorwf	___awmod@divisor,w,c
  7052  001DF0  B4D8               	btfsc	status,2,c
  7053  001DF2  D018               	goto	l4402
  7054  001DF4  0E01               	movlw	1
  7055  001DF6  6E1D               	movwf	___awmod@counter,c
  7056  001DF8  D004               	goto	l4392
  7057  001DFA                     l4390:
  7058  001DFA  90D8               	bcf	status,0,c
  7059  001DFC  361B               	rlcf	___awmod@divisor,f,c
  7060  001DFE  361C               	rlcf	___awmod@divisor+1,f,c
  7061  001E00  2A1D               	incf	___awmod@counter,f,c
  7062  001E02                     l4392:
  7063  001E02  AE1C               	btfss	___awmod@divisor+1,7,c
  7064  001E04  D7FA               	goto	l4390
  7065  001E06                     l4394:
  7066  001E06  501B               	movf	___awmod@divisor,w,c
  7067  001E08  5C19               	subwf	___awmod@dividend,w,c
  7068  001E0A  501C               	movf	___awmod@divisor+1,w,c
  7069  001E0C  581A               	subwfb	___awmod@dividend+1,w,c
  7070  001E0E  A0D8               	btfss	status,0,c
  7071  001E10  D004               	goto	l4398
  7072  001E12  501B               	movf	___awmod@divisor,w,c
  7073  001E14  5E19               	subwf	___awmod@dividend,f,c
  7074  001E16  501C               	movf	___awmod@divisor+1,w,c
  7075  001E18  5A1A               	subwfb	___awmod@dividend+1,f,c
  7076  001E1A                     l4398:
  7077  001E1A  90D8               	bcf	status,0,c
  7078  001E1C  321C               	rrcf	___awmod@divisor+1,f,c
  7079  001E1E  321B               	rrcf	___awmod@divisor,f,c
  7080  001E20  2E1D               	decfsz	___awmod@counter,f,c
  7081  001E22  D7F1               	goto	l4394
  7082  001E24                     l4402:
  7083  001E24  501E               	movf	___awmod@sign,w,c
  7084  001E26  B4D8               	btfsc	status,2,c
  7085  001E28  D004               	goto	l4406
  7086  001E2A  6C19               	negf	___awmod@dividend,c
  7087  001E2C  1E1A               	comf	___awmod@dividend+1,f,c
  7088  001E2E  B0D8               	btfsc	status,0,c
  7089  001E30  2A1A               	incf	___awmod@dividend+1,f,c
  7090  001E32                     l4406:
  7091  001E32  C019  F019         	movff	___awmod@dividend,?___awmod
  7092  001E36  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7093  001E3A  0012               	return	
  7094  001E3C                     __end_of___awmod:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           indf0	equ	0xFEF
  7104                           postinc0	equ	0xFEE
  7105                           fsr0h	equ	0xFEA
  7106                           fsr0l	equ	0xFE9
  7107                           wreg	equ	0xFE8
  7108                           postinc1	equ	0xFE6
  7109                           postdec1	equ	0xFE5
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function ___awdiv *****************
  7119 ;; Defined at:
  7120 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  dividend        2   30[COMRAM] int 
  7123 ;;  divisor         2   32[COMRAM] int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  quotient        2   36[COMRAM] int 
  7126 ;;  sign            1   35[COMRAM] unsigned char 
  7127 ;;  counter         1   34[COMRAM] unsigned char 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  2   30[COMRAM] int 
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0, prodl
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7137 ;;      Params:         4       0       0       0       0       0       0       0       0
  7138 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7140 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7141 ;;Total ram usage:        8 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    4
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_fround
  7148 ;;		_scale
  7149 ;;		_sprintf
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text32
  7154  001BDE                     __ptext32:
  7155                           	opt stack 0
  7156  001BDE                     ___awdiv:
  7157                           	opt stack 22
  7158                           
  7159                           ;incstack = 0
  7160  001BDE  0E00               	movlw	0
  7161  001BE0  6E24               	movwf	___awdiv@sign,c
  7162  001BE2  5022               	movf	___awdiv@divisor+1,w,c
  7163  001BE4  0A80               	xorlw	128
  7164  001BE6  6EF3               	movwf	prodl,c
  7165  001BE8  0E80               	movlw	128
  7166  001BEA  5CF3               	subwf	prodl,w,c
  7167  001BEC  0E00               	movlw	0
  7168  001BEE  B4D8               	btfsc	status,2,c
  7169  001BF0  5C21               	subwf	___awdiv@divisor,w,c
  7170  001BF2  B0D8               	btfsc	status,0,c
  7171  001BF4  D006               	goto	l4338
  7172  001BF6  6C21               	negf	___awdiv@divisor,c
  7173  001BF8  1E22               	comf	___awdiv@divisor+1,f,c
  7174  001BFA  B0D8               	btfsc	status,0,c
  7175  001BFC  2A22               	incf	___awdiv@divisor+1,f,c
  7176  001BFE  0E01               	movlw	1
  7177  001C00  6E24               	movwf	___awdiv@sign,c
  7178  001C02                     l4338:
  7179  001C02  5020               	movf	___awdiv@dividend+1,w,c
  7180  001C04  0A80               	xorlw	128
  7181  001C06  6EF3               	movwf	prodl,c
  7182  001C08  0E80               	movlw	128
  7183  001C0A  5CF3               	subwf	prodl,w,c
  7184  001C0C  0E00               	movlw	0
  7185  001C0E  B4D8               	btfsc	status,2,c
  7186  001C10  5C1F               	subwf	___awdiv@dividend,w,c
  7187  001C12  B0D8               	btfsc	status,0,c
  7188  001C14  D006               	goto	l4344
  7189  001C16  6C1F               	negf	___awdiv@dividend,c
  7190  001C18  1E20               	comf	___awdiv@dividend+1,f,c
  7191  001C1A  B0D8               	btfsc	status,0,c
  7192  001C1C  2A20               	incf	___awdiv@dividend+1,f,c
  7193  001C1E  0E01               	movlw	1
  7194  001C20  1A24               	xorwf	___awdiv@sign,f,c
  7195  001C22                     l4344:
  7196  001C22  0E00               	movlw	0
  7197  001C24  6E26               	movwf	___awdiv@quotient+1,c
  7198  001C26  0E00               	movlw	0
  7199  001C28  6E25               	movwf	___awdiv@quotient,c
  7200  001C2A  5022               	movf	___awdiv@divisor+1,w,c
  7201  001C2C  1021               	iorwf	___awdiv@divisor,w,c
  7202  001C2E  B4D8               	btfsc	status,2,c
  7203  001C30  D01C               	goto	l4366
  7204  001C32  0E01               	movlw	1
  7205  001C34  6E23               	movwf	___awdiv@counter,c
  7206  001C36  D004               	goto	l4352
  7207  001C38                     l4350:
  7208  001C38  90D8               	bcf	status,0,c
  7209  001C3A  3621               	rlcf	___awdiv@divisor,f,c
  7210  001C3C  3622               	rlcf	___awdiv@divisor+1,f,c
  7211  001C3E  2A23               	incf	___awdiv@counter,f,c
  7212  001C40                     l4352:
  7213  001C40  AE22               	btfss	___awdiv@divisor+1,7,c
  7214  001C42  D7FA               	goto	l4350
  7215  001C44                     l4354:
  7216  001C44  90D8               	bcf	status,0,c
  7217  001C46  3625               	rlcf	___awdiv@quotient,f,c
  7218  001C48  3626               	rlcf	___awdiv@quotient+1,f,c
  7219  001C4A  5021               	movf	___awdiv@divisor,w,c
  7220  001C4C  5C1F               	subwf	___awdiv@dividend,w,c
  7221  001C4E  5022               	movf	___awdiv@divisor+1,w,c
  7222  001C50  5820               	subwfb	___awdiv@dividend+1,w,c
  7223  001C52  A0D8               	btfss	status,0,c
  7224  001C54  D005               	goto	l4362
  7225  001C56  5021               	movf	___awdiv@divisor,w,c
  7226  001C58  5E1F               	subwf	___awdiv@dividend,f,c
  7227  001C5A  5022               	movf	___awdiv@divisor+1,w,c
  7228  001C5C  5A20               	subwfb	___awdiv@dividend+1,f,c
  7229  001C5E  8025               	bsf	___awdiv@quotient,0,c
  7230  001C60                     l4362:
  7231  001C60  90D8               	bcf	status,0,c
  7232  001C62  3222               	rrcf	___awdiv@divisor+1,f,c
  7233  001C64  3221               	rrcf	___awdiv@divisor,f,c
  7234  001C66  2E23               	decfsz	___awdiv@counter,f,c
  7235  001C68  D7ED               	goto	l4354
  7236  001C6A                     l4366:
  7237  001C6A  5024               	movf	___awdiv@sign,w,c
  7238  001C6C  B4D8               	btfsc	status,2,c
  7239  001C6E  D004               	goto	l4370
  7240  001C70  6C25               	negf	___awdiv@quotient,c
  7241  001C72  1E26               	comf	___awdiv@quotient+1,f,c
  7242  001C74  B0D8               	btfsc	status,0,c
  7243  001C76  2A26               	incf	___awdiv@quotient+1,f,c
  7244  001C78                     l4370:
  7245  001C78  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7246  001C7C  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7247  001C80  0012               	return	
  7248  001C82                     __end_of___awdiv:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           indf0	equ	0xFEF
  7258                           postinc0	equ	0xFEE
  7259                           fsr0h	equ	0xFEA
  7260                           fsr0l	equ	0xFE9
  7261                           wreg	equ	0xFE8
  7262                           postinc1	equ	0xFE6
  7263                           postdec1	equ	0xFE5
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272 ;; *************** function __tdiv_to_l_ *****************
  7273 ;; Defined at:
  7274 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  f1              3   24[COMRAM] float 
  7277 ;;  f2              3   27[COMRAM] float 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  quot            4   33[COMRAM] unsigned long 
  7280 ;;  exp1            1   38[COMRAM] unsigned char 
  7281 ;;  cntr            1   37[COMRAM] unsigned char 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  4   24[COMRAM] unsigned long 
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, status,0
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7291 ;;      Params:         6       0       0       0       0       0       0       0       0
  7292 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7293 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7294 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7295 ;;Total ram usage:       15 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    4
  7298 ;; This function calls:
  7299 ;;		Nothing
  7300 ;; This function is called by:
  7301 ;;		_sprintf
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text33
  7306  0017E2                     __ptext33:
  7307                           	opt stack 0
  7308  0017E2                     __tdiv_to_l_:
  7309                           	opt stack 23
  7310                           
  7311                           ;incstack = 0
  7312  0017E2  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7313  0017E6  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7314  0017E8  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7315  0017EA  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7316  0017EC  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7317  0017EE  E301               	bnc	u4601
  7318  0017F0  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7319  0017F2                     u4601:
  7320  0017F2  501F               	movf	??__tdiv_to_l_,w,c
  7321  0017F4  6E27               	movwf	__tdiv_to_l_@exp1,c
  7322  0017F6  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7323  0017F8  D001               	goto	l4572
  7324  0017FA  D059               	goto	u4670
  7325  0017FC                     l4572:
  7326  0017FC  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7327  001800  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7328  001802  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7329  001804  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7330  001806  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7331  001808  E301               	bnc	u4621
  7332  00180A  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7333  00180C                     u4621:
  7334  00180C  501F               	movf	??__tdiv_to_l_,w,c
  7335  00180E  6E26               	movwf	__tdiv_to_l_@cntr,c
  7336  001810  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7337  001812  D001               	goto	l4578
  7338  001814  D04C               	goto	u4670
  7339  001816                     l4578:
  7340  001816  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7341  001818  0EFF               	movlw	255
  7342  00181A  1619               	andwf	__tdiv_to_l_@f1,f,c
  7343  00181C  0EFF               	movlw	255
  7344  00181E  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7345  001820  0E00               	movlw	0
  7346  001822  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7347  001824  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7348  001826  0EFF               	movlw	255
  7349  001828  161C               	andwf	__tdiv_to_l_@f2,f,c
  7350  00182A  0EFF               	movlw	255
  7351  00182C  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7352  00182E  0E00               	movlw	0
  7353  001830  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7354  001832  0E00               	movlw	0
  7355  001834  6E22               	movwf	__tdiv_to_l_@quot,c
  7356  001836  0E00               	movlw	0
  7357  001838  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7358  00183A  0E00               	movlw	0
  7359  00183C  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7360  00183E  0E00               	movlw	0
  7361  001840  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7362  001842  0E7F               	movlw	127
  7363  001844  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7364  001846  5026               	movf	__tdiv_to_l_@cntr,w,c
  7365  001848  0F98               	addlw	152
  7366  00184A  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7367  00184C  0E18               	movlw	24
  7368  00184E  6E26               	movwf	__tdiv_to_l_@cntr,c
  7369  001850                     l1009:
  7370  001850  90D8               	bcf	status,0,c
  7371  001852  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7372  001854  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7373  001856  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7374  001858  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7375  00185A  501C               	movf	__tdiv_to_l_@f2,w,c
  7376  00185C  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7377  00185E  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7378  001860  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7379  001862  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7380  001864  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7381  001866  A0D8               	btfss	status,0,c
  7382  001868  D007               	goto	l1010
  7383  00186A  501C               	movf	__tdiv_to_l_@f2,w,c
  7384  00186C  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7385  00186E  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7386  001870  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7387  001872  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7388  001874  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7389  001876  8022               	bsf	__tdiv_to_l_@quot,0,c
  7390  001878                     l1010:
  7391  001878  90D8               	bcf	status,0,c
  7392  00187A  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7393  00187C  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7394  00187E  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7395  001880  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7396  001882  D7E6               	goto	l1009
  7397  001884  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7398  001886  D010               	goto	l4610
  7399  001888  5027               	movf	__tdiv_to_l_@exp1,w,c
  7400  00188A  0A80               	xorlw	128
  7401  00188C  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7402  00188E  0EE9               	movlw	233
  7403  001890  0A80               	xorlw	128
  7404  001892  5C1F               	subwf	??__tdiv_to_l_,w,c
  7405  001894  A0D8               	btfss	status,0,c
  7406  001896  D00B               	goto	u4670
  7407  001898                     l4606:
  7408  001898  90D8               	bcf	status,0,c
  7409  00189A  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7410  00189C  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7411  00189E  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7412  0018A0  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7413  0018A2  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7414  0018A4  D7F9               	goto	l4606
  7415  0018A6  D014               	goto	l1016
  7416  0018A8                     l4610:
  7417  0018A8  0E17               	movlw	23
  7418  0018AA  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7419  0018AC  D00F               	goto	l4618
  7420  0018AE                     u4670:
  7421  0018AE  0E00               	movlw	0
  7422  0018B0  6E19               	movwf	?__tdiv_to_l_,c
  7423  0018B2  0E00               	movlw	0
  7424  0018B4  6E1A               	movwf	?__tdiv_to_l_+1,c
  7425  0018B6  0E00               	movlw	0
  7426  0018B8  6E1B               	movwf	?__tdiv_to_l_+2,c
  7427  0018BA  0E00               	movlw	0
  7428  0018BC  6E1C               	movwf	?__tdiv_to_l_+3,c
  7429  0018BE  D010               	goto	l1007
  7430  0018C0                     l4616:
  7431  0018C0  90D8               	bcf	status,0,c
  7432  0018C2  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7433  0018C4  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7434  0018C6  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7435  0018C8  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7436  0018CA  0627               	decf	__tdiv_to_l_@exp1,f,c
  7437  0018CC                     l4618:
  7438  0018CC  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7439  0018CE  D7F8               	goto	l4616
  7440  0018D0                     l1016:
  7441  0018D0  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7442  0018D4  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7443  0018D8  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7444  0018DC  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7445  0018E0                     l1007:
  7446  0018E0  0012               	return	
  7447  0018E2                     __end_of__tdiv_to_l_:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           indf0	equ	0xFEF
  7457                           postinc0	equ	0xFEE
  7458                           fsr0h	equ	0xFEA
  7459                           fsr0l	equ	0xFE9
  7460                           wreg	equ	0xFE8
  7461                           postinc1	equ	0xFE6
  7462                           postdec1	equ	0xFE5
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           postdec2	equ	0xFDD
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function __div_to_l_ *****************
  7472 ;; Defined at:
  7473 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  f1              3   24[COMRAM] unsigned long 
  7476 ;;  f2              3   27[COMRAM] unsigned long 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  quot            4   34[COMRAM] unsigned long 
  7479 ;;  exp1            1   39[COMRAM] unsigned char 
  7480 ;;  cntr            1   38[COMRAM] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  4   24[COMRAM] unsigned long 
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7490 ;;      Params:         6       0       0       0       0       0       0       0       0
  7491 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7492 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7493 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7494 ;;Total ram usage:       16 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    4
  7497 ;; This function calls:
  7498 ;;		Nothing
  7499 ;; This function is called by:
  7500 ;;		_sprintf
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text34
  7505  001580                     __ptext34:
  7506                           	opt stack 0
  7507  001580                     __div_to_l_:
  7508                           	opt stack 23
  7509                           
  7510                           ;incstack = 0
  7511  001580  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7512  001584  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7513  001588  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7514  00158C  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7515  001590  0E18               	movlw	24
  7516  001592  D005               	goto	u4690
  7517  001594                     u4695:
  7518  001594  90D8               	bcf	status,0,c
  7519  001596  3222               	rrcf	??__div_to_l_+3,f,c
  7520  001598  3221               	rrcf	??__div_to_l_+2,f,c
  7521  00159A  3220               	rrcf	??__div_to_l_+1,f,c
  7522  00159C  321F               	rrcf	??__div_to_l_,f,c
  7523  00159E                     u4690:
  7524  00159E  2EE8               	decfsz	wreg,f,c
  7525  0015A0  D7F9               	goto	u4695
  7526  0015A2  501F               	movf	??__div_to_l_,w,c
  7527  0015A4  6E28               	movwf	__div_to_l_@exp1,c
  7528  0015A6  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7529  0015A8  D001               	goto	l4626
  7530  0015AA  D06B               	goto	u4760
  7531  0015AC                     l4626:
  7532  0015AC  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7533  0015B0  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7534  0015B4  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7535  0015B8  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7536  0015BC  0E18               	movlw	24
  7537  0015BE  D005               	goto	u4710
  7538  0015C0                     u4715:
  7539  0015C0  90D8               	bcf	status,0,c
  7540  0015C2  3222               	rrcf	??__div_to_l_+3,f,c
  7541  0015C4  3221               	rrcf	??__div_to_l_+2,f,c
  7542  0015C6  3220               	rrcf	??__div_to_l_+1,f,c
  7543  0015C8  321F               	rrcf	??__div_to_l_,f,c
  7544  0015CA                     u4710:
  7545  0015CA  2EE8               	decfsz	wreg,f,c
  7546  0015CC  D7F9               	goto	u4715
  7547  0015CE  501F               	movf	??__div_to_l_,w,c
  7548  0015D0  6E27               	movwf	__div_to_l_@cntr,c
  7549  0015D2  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7550  0015D4  D001               	goto	l4632
  7551  0015D6  D055               	goto	u4760
  7552  0015D8                     l4632:
  7553  0015D8  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7554  0015DA  0EFF               	movlw	255
  7555  0015DC  1619               	andwf	__div_to_l_@f1,f,c
  7556  0015DE  0EFF               	movlw	255
  7557  0015E0  161A               	andwf	__div_to_l_@f1+1,f,c
  7558  0015E2  0EFF               	movlw	255
  7559  0015E4  161B               	andwf	__div_to_l_@f1+2,f,c
  7560  0015E6  0E00               	movlw	0
  7561  0015E8  161C               	andwf	__div_to_l_@f1+3,f,c
  7562  0015EA  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7563  0015EC  0EFF               	movlw	255
  7564  0015EE  161C               	andwf	__div_to_l_@f2,f,c
  7565  0015F0  0EFF               	movlw	255
  7566  0015F2  161D               	andwf	__div_to_l_@f2+1,f,c
  7567  0015F4  0EFF               	movlw	255
  7568  0015F6  161E               	andwf	__div_to_l_@f2+2,f,c
  7569  0015F8  0E00               	movlw	0
  7570  0015FA  161F               	andwf	__div_to_l_@f2+3,f,c
  7571  0015FC  0E00               	movlw	0
  7572  0015FE  6E23               	movwf	__div_to_l_@quot,c
  7573  001600  0E00               	movlw	0
  7574  001602  6E24               	movwf	__div_to_l_@quot+1,c
  7575  001604  0E00               	movlw	0
  7576  001606  6E25               	movwf	__div_to_l_@quot+2,c
  7577  001608  0E00               	movlw	0
  7578  00160A  6E26               	movwf	__div_to_l_@quot+3,c
  7579  00160C  0E7F               	movlw	127
  7580  00160E  5E28               	subwf	__div_to_l_@exp1,f,c
  7581  001610  5027               	movf	__div_to_l_@cntr,w,c
  7582  001612  0FA0               	addlw	160
  7583  001614  5E28               	subwf	__div_to_l_@exp1,f,c
  7584  001616  0E20               	movlw	32
  7585  001618  6E27               	movwf	__div_to_l_@cntr,c
  7586  00161A                     l4646:
  7587  00161A  90D8               	bcf	status,0,c
  7588  00161C  3623               	rlcf	__div_to_l_@quot,f,c
  7589  00161E  3624               	rlcf	__div_to_l_@quot+1,f,c
  7590  001620  3625               	rlcf	__div_to_l_@quot+2,f,c
  7591  001622  3626               	rlcf	__div_to_l_@quot+3,f,c
  7592  001624  501C               	movf	__div_to_l_@f2,w,c
  7593  001626  5C19               	subwf	__div_to_l_@f1,w,c
  7594  001628  501D               	movf	__div_to_l_@f2+1,w,c
  7595  00162A  581A               	subwfb	__div_to_l_@f1+1,w,c
  7596  00162C  501E               	movf	__div_to_l_@f2+2,w,c
  7597  00162E  581B               	subwfb	__div_to_l_@f1+2,w,c
  7598  001630  501F               	movf	__div_to_l_@f2+3,w,c
  7599  001632  581C               	subwfb	__div_to_l_@f1+3,w,c
  7600  001634  A0D8               	btfss	status,0,c
  7601  001636  D009               	goto	l4654
  7602  001638  501C               	movf	__div_to_l_@f2,w,c
  7603  00163A  5E19               	subwf	__div_to_l_@f1,f,c
  7604  00163C  501D               	movf	__div_to_l_@f2+1,w,c
  7605  00163E  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7606  001640  501E               	movf	__div_to_l_@f2+2,w,c
  7607  001642  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7608  001644  501F               	movf	__div_to_l_@f2+3,w,c
  7609  001646  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7610  001648  8023               	bsf	__div_to_l_@quot,0,c
  7611  00164A                     l4654:
  7612  00164A  90D8               	bcf	status,0,c
  7613  00164C  3619               	rlcf	__div_to_l_@f1,f,c
  7614  00164E  361A               	rlcf	__div_to_l_@f1+1,f,c
  7615  001650  361B               	rlcf	__div_to_l_@f1+2,f,c
  7616  001652  361C               	rlcf	__div_to_l_@f1+3,f,c
  7617  001654  2E27               	decfsz	__div_to_l_@cntr,f,c
  7618  001656  D7E1               	goto	l4646
  7619  001658  AE28               	btfss	__div_to_l_@exp1,7,c
  7620  00165A  D010               	goto	l4668
  7621  00165C  5028               	movf	__div_to_l_@exp1,w,c
  7622  00165E  0A80               	xorlw	128
  7623  001660  6E1F               	movwf	??__div_to_l_& (0+255),c
  7624  001662  0EE1               	movlw	225
  7625  001664  0A80               	xorlw	128
  7626  001666  5C1F               	subwf	??__div_to_l_,w,c
  7627  001668  A0D8               	btfss	status,0,c
  7628  00166A  D00B               	goto	u4760
  7629  00166C                     l4664:
  7630  00166C  90D8               	bcf	status,0,c
  7631  00166E  3226               	rrcf	__div_to_l_@quot+3,f,c
  7632  001670  3225               	rrcf	__div_to_l_@quot+2,f,c
  7633  001672  3224               	rrcf	__div_to_l_@quot+1,f,c
  7634  001674  3223               	rrcf	__div_to_l_@quot,f,c
  7635  001676  3E28               	incfsz	__div_to_l_@exp1,f,c
  7636  001678  D7F9               	goto	l4664
  7637  00167A  D014               	goto	l898
  7638  00167C                     l4668:
  7639  00167C  0E1F               	movlw	31
  7640  00167E  6428               	cpfsgt	__div_to_l_@exp1,c
  7641  001680  D00F               	goto	l4676
  7642  001682                     u4760:
  7643  001682  0E00               	movlw	0
  7644  001684  6E19               	movwf	?__div_to_l_,c
  7645  001686  0E00               	movlw	0
  7646  001688  6E1A               	movwf	?__div_to_l_+1,c
  7647  00168A  0E00               	movlw	0
  7648  00168C  6E1B               	movwf	?__div_to_l_+2,c
  7649  00168E  0E00               	movlw	0
  7650  001690  6E1C               	movwf	?__div_to_l_+3,c
  7651  001692  D010               	goto	l889
  7652  001694                     l4674:
  7653  001694  90D8               	bcf	status,0,c
  7654  001696  3623               	rlcf	__div_to_l_@quot,f,c
  7655  001698  3624               	rlcf	__div_to_l_@quot+1,f,c
  7656  00169A  3625               	rlcf	__div_to_l_@quot+2,f,c
  7657  00169C  3626               	rlcf	__div_to_l_@quot+3,f,c
  7658  00169E  0628               	decf	__div_to_l_@exp1,f,c
  7659  0016A0                     l4676:
  7660  0016A0  6628               	tstfsz	__div_to_l_@exp1,c
  7661  0016A2  D7F8               	goto	l4674
  7662  0016A4                     l898:
  7663  0016A4  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7664  0016A8  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7665  0016AC  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7666  0016B0  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7667  0016B4                     l889:
  7668  0016B4  0012               	return	
  7669  0016B6                     __end_of__div_to_l_:
  7670                           	opt stack 0
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodh	equ	0xFF4
  7676                           prodl	equ	0xFF3
  7677                           intcon	equ	0xFF2
  7678                           indf0	equ	0xFEF
  7679                           postinc0	equ	0xFEE
  7680                           fsr0h	equ	0xFEA
  7681                           fsr0l	equ	0xFE9
  7682                           wreg	equ	0xFE8
  7683                           postinc1	equ	0xFE6
  7684                           postdec1	equ	0xFE5
  7685                           fsr1l	equ	0xFE1
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           fsr2h	equ	0xFDA
  7690                           fsr2l	equ	0xFD9
  7691                           status	equ	0xFD8
  7692                           
  7693 ;; *************** function ___lltoft *****************
  7694 ;; Defined at:
  7695 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  c               4   32[COMRAM] unsigned long 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  exp             1   40[COMRAM] unsigned char 
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  3   32[COMRAM] float 
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7709 ;;      Params:         4       0       0       0       0       0       0       0       0
  7710 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7711 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7712 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7713 ;;Total ram usage:        9 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    5
  7716 ;; This function calls:
  7717 ;;		___ftpack
  7718 ;; This function is called by:
  7719 ;;		_sprintf
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text35
  7724  00236A                     __ptext35:
  7725                           	opt stack 0
  7726  00236A                     ___lltoft:
  7727                           	opt stack 22
  7728                           
  7729                           ;incstack = 0
  7730  00236A  0E8E               	movlw	142
  7731  00236C  6E29               	movwf	___lltoft@exp,c
  7732  00236E  D006               	goto	l4794
  7733  002370                     l4792:
  7734  002370  90D8               	bcf	status,0,c
  7735  002372  3224               	rrcf	___lltoft@c+3,f,c
  7736  002374  3223               	rrcf	___lltoft@c+2,f,c
  7737  002376  3222               	rrcf	___lltoft@c+1,f,c
  7738  002378  3221               	rrcf	___lltoft@c,f,c
  7739  00237A  2A29               	incf	___lltoft@exp,f,c
  7740  00237C                     l4794:
  7741  00237C  0E00               	movlw	0
  7742  00237E  1421               	andwf	___lltoft@c,w,c
  7743  002380  6E25               	movwf	??___lltoft& (0+255),c
  7744  002382  0E00               	movlw	0
  7745  002384  1422               	andwf	___lltoft@c+1,w,c
  7746  002386  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7747  002388  0E00               	movlw	0
  7748  00238A  1423               	andwf	___lltoft@c+2,w,c
  7749  00238C  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7750  00238E  0EFF               	movlw	255
  7751  002390  1424               	andwf	___lltoft@c+3,w,c
  7752  002392  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7753  002394  5028               	movf	??___lltoft+3,w,c
  7754  002396  1025               	iorwf	??___lltoft,w,c
  7755  002398  1026               	iorwf	??___lltoft+1,w,c
  7756  00239A  1027               	iorwf	??___lltoft+2,w,c
  7757  00239C  A4D8               	btfss	status,2,c
  7758  00239E  D7E8               	goto	l4792
  7759  0023A0  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7760  0023A4  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7761  0023A8  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7762  0023AC  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7763  0023B0  0E00               	movlw	0
  7764  0023B2  6E1D               	movwf	___ftpack@sign,c
  7765  0023B4  EC48  F00D         	call	___ftpack	;wreg free
  7766  0023B8  C019  F021         	movff	?___ftpack,?___lltoft
  7767  0023BC  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7768  0023C0  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7769  0023C4  0012               	return	
  7770  0023C6                     __end_of___lltoft:
  7771                           	opt stack 0
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           indf0	equ	0xFEF
  7780                           postinc0	equ	0xFEE
  7781                           fsr0h	equ	0xFEA
  7782                           fsr0l	equ	0xFE9
  7783                           wreg	equ	0xFE8
  7784                           postinc1	equ	0xFE6
  7785                           postdec1	equ	0xFE5
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function ___llmod *****************
  7795 ;; Defined at:
  7796 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  dividend        4   37[COMRAM] unsigned long 
  7799 ;;  divisor         4   41[COMRAM] unsigned long 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  counter         1   45[COMRAM] unsigned char 
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  4   37[COMRAM] unsigned long 
  7804 ;; Registers used:
  7805 ;;		wreg, status,2, status,0
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7811 ;;      Params:         8       0       0       0       0       0       0       0       0
  7812 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7814 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7815 ;;Total ram usage:        9 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    4
  7818 ;; This function calls:
  7819 ;;		Nothing
  7820 ;; This function is called by:
  7821 ;;		_sprintf
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text36
  7826  002304                     __ptext36:
  7827                           	opt stack 0
  7828  002304                     ___llmod:
  7829                           	opt stack 23
  7830                           
  7831                           ;incstack = 0
  7832  002304  502D               	movf	___llmod@divisor+3,w,c
  7833  002306  102A               	iorwf	___llmod@divisor,w,c
  7834  002308  102B               	iorwf	___llmod@divisor+1,w,c
  7835  00230A  102C               	iorwf	___llmod@divisor+2,w,c
  7836  00230C  B4D8               	btfsc	status,2,c
  7837  00230E  D024               	goto	l1100
  7838  002310  0E01               	movlw	1
  7839  002312  6E2E               	movwf	___llmod@counter,c
  7840  002314  D006               	goto	l4780
  7841  002316                     l4778:
  7842  002316  90D8               	bcf	status,0,c
  7843  002318  362A               	rlcf	___llmod@divisor,f,c
  7844  00231A  362B               	rlcf	___llmod@divisor+1,f,c
  7845  00231C  362C               	rlcf	___llmod@divisor+2,f,c
  7846  00231E  362D               	rlcf	___llmod@divisor+3,f,c
  7847  002320  2A2E               	incf	___llmod@counter,f,c
  7848  002322                     l4780:
  7849  002322  AE2D               	btfss	___llmod@divisor+3,7,c
  7850  002324  D7F8               	goto	l4778
  7851  002326                     l4782:
  7852  002326  502A               	movf	___llmod@divisor,w,c
  7853  002328  5C26               	subwf	___llmod@dividend,w,c
  7854  00232A  502B               	movf	___llmod@divisor+1,w,c
  7855  00232C  5827               	subwfb	___llmod@dividend+1,w,c
  7856  00232E  502C               	movf	___llmod@divisor+2,w,c
  7857  002330  5828               	subwfb	___llmod@dividend+2,w,c
  7858  002332  502D               	movf	___llmod@divisor+3,w,c
  7859  002334  5829               	subwfb	___llmod@dividend+3,w,c
  7860  002336  A0D8               	btfss	status,0,c
  7861  002338  D008               	goto	l4786
  7862  00233A  502A               	movf	___llmod@divisor,w,c
  7863  00233C  5E26               	subwf	___llmod@dividend,f,c
  7864  00233E  502B               	movf	___llmod@divisor+1,w,c
  7865  002340  5A27               	subwfb	___llmod@dividend+1,f,c
  7866  002342  502C               	movf	___llmod@divisor+2,w,c
  7867  002344  5A28               	subwfb	___llmod@dividend+2,f,c
  7868  002346  502D               	movf	___llmod@divisor+3,w,c
  7869  002348  5A29               	subwfb	___llmod@dividend+3,f,c
  7870  00234A                     l4786:
  7871  00234A  90D8               	bcf	status,0,c
  7872  00234C  322D               	rrcf	___llmod@divisor+3,f,c
  7873  00234E  322C               	rrcf	___llmod@divisor+2,f,c
  7874  002350  322B               	rrcf	___llmod@divisor+1,f,c
  7875  002352  322A               	rrcf	___llmod@divisor,f,c
  7876  002354  2E2E               	decfsz	___llmod@counter,f,c
  7877  002356  D7E7               	goto	l4782
  7878  002358                     l1100:
  7879  002358  C026  F026         	movff	___llmod@dividend,?___llmod
  7880  00235C  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7881  002360  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7882  002364  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7883  002368  0012               	return	
  7884  00236A                     __end_of___llmod:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           indf0	equ	0xFEF
  7894                           postinc0	equ	0xFEE
  7895                           fsr0h	equ	0xFEA
  7896                           fsr0l	equ	0xFE9
  7897                           wreg	equ	0xFE8
  7898                           postinc1	equ	0xFE6
  7899                           postdec1	equ	0xFE5
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function ___lldiv *****************
  7909 ;; Defined at:
  7910 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  dividend        4   24[COMRAM] unsigned long 
  7913 ;;  divisor         4   28[COMRAM] unsigned long 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  quotient        4   32[COMRAM] unsigned long 
  7916 ;;  counter         1   36[COMRAM] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  4   24[COMRAM] unsigned long 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7926 ;;      Params:         8       0       0       0       0       0       0       0       0
  7927 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7929 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7930 ;;Total ram usage:       13 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    4
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_sprintf
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text37
  7941  001F52                     __ptext37:
  7942                           	opt stack 0
  7943  001F52                     ___lldiv:
  7944                           	opt stack 23
  7945                           
  7946                           ;incstack = 0
  7947  001F52  0E00               	movlw	0
  7948  001F54  6E21               	movwf	___lldiv@quotient,c
  7949  001F56  0E00               	movlw	0
  7950  001F58  6E22               	movwf	___lldiv@quotient+1,c
  7951  001F5A  0E00               	movlw	0
  7952  001F5C  6E23               	movwf	___lldiv@quotient+2,c
  7953  001F5E  0E00               	movlw	0
  7954  001F60  6E24               	movwf	___lldiv@quotient+3,c
  7955  001F62  5020               	movf	___lldiv@divisor+3,w,c
  7956  001F64  101D               	iorwf	___lldiv@divisor,w,c
  7957  001F66  101E               	iorwf	___lldiv@divisor+1,w,c
  7958  001F68  101F               	iorwf	___lldiv@divisor+2,w,c
  7959  001F6A  B4D8               	btfsc	status,2,c
  7960  001F6C  D02A               	goto	l1090
  7961  001F6E  0E01               	movlw	1
  7962  001F70  6E25               	movwf	___lldiv@counter,c
  7963  001F72  D006               	goto	l4760
  7964  001F74                     l4758:
  7965  001F74  90D8               	bcf	status,0,c
  7966  001F76  361D               	rlcf	___lldiv@divisor,f,c
  7967  001F78  361E               	rlcf	___lldiv@divisor+1,f,c
  7968  001F7A  361F               	rlcf	___lldiv@divisor+2,f,c
  7969  001F7C  3620               	rlcf	___lldiv@divisor+3,f,c
  7970  001F7E  2A25               	incf	___lldiv@counter,f,c
  7971  001F80                     l4760:
  7972  001F80  AE20               	btfss	___lldiv@divisor+3,7,c
  7973  001F82  D7F8               	goto	l4758
  7974  001F84                     l4762:
  7975  001F84  90D8               	bcf	status,0,c
  7976  001F86  3621               	rlcf	___lldiv@quotient,f,c
  7977  001F88  3622               	rlcf	___lldiv@quotient+1,f,c
  7978  001F8A  3623               	rlcf	___lldiv@quotient+2,f,c
  7979  001F8C  3624               	rlcf	___lldiv@quotient+3,f,c
  7980  001F8E  501D               	movf	___lldiv@divisor,w,c
  7981  001F90  5C19               	subwf	___lldiv@dividend,w,c
  7982  001F92  501E               	movf	___lldiv@divisor+1,w,c
  7983  001F94  581A               	subwfb	___lldiv@dividend+1,w,c
  7984  001F96  501F               	movf	___lldiv@divisor+2,w,c
  7985  001F98  581B               	subwfb	___lldiv@dividend+2,w,c
  7986  001F9A  5020               	movf	___lldiv@divisor+3,w,c
  7987  001F9C  581C               	subwfb	___lldiv@dividend+3,w,c
  7988  001F9E  A0D8               	btfss	status,0,c
  7989  001FA0  D009               	goto	l4770
  7990  001FA2  501D               	movf	___lldiv@divisor,w,c
  7991  001FA4  5E19               	subwf	___lldiv@dividend,f,c
  7992  001FA6  501E               	movf	___lldiv@divisor+1,w,c
  7993  001FA8  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7994  001FAA  501F               	movf	___lldiv@divisor+2,w,c
  7995  001FAC  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7996  001FAE  5020               	movf	___lldiv@divisor+3,w,c
  7997  001FB0  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7998  001FB2  8021               	bsf	___lldiv@quotient,0,c
  7999  001FB4                     l4770:
  8000  001FB4  90D8               	bcf	status,0,c
  8001  001FB6  3220               	rrcf	___lldiv@divisor+3,f,c
  8002  001FB8  321F               	rrcf	___lldiv@divisor+2,f,c
  8003  001FBA  321E               	rrcf	___lldiv@divisor+1,f,c
  8004  001FBC  321D               	rrcf	___lldiv@divisor,f,c
  8005  001FBE  2E25               	decfsz	___lldiv@counter,f,c
  8006  001FC0  D7E1               	goto	l4762
  8007  001FC2                     l1090:
  8008  001FC2  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8009  001FC6  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8010  001FCA  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8011  001FCE  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8012  001FD2  0012               	return	
  8013  001FD4                     __end_of___lldiv:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           indf0	equ	0xFEF
  8023                           postinc0	equ	0xFEE
  8024                           fsr0h	equ	0xFEA
  8025                           fsr0l	equ	0xFE9
  8026                           wreg	equ	0xFE8
  8027                           postinc1	equ	0xFE6
  8028                           postdec1	equ	0xFE5
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function ___fttol *****************
  8038 ;; Defined at:
  8039 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  f1              3   19[BANK0 ] float 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  lval            4   29[BANK0 ] unsigned long 
  8044 ;;  exp1            1   33[BANK0 ] unsigned char 
  8045 ;;  sign1           1   28[BANK0 ] unsigned char 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  4   19[BANK0 ] long 
  8048 ;; Registers used:
  8049 ;;		wreg, status,2, status,0
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8055 ;;      Params:         0       4       0       0       0       0       0       0       0
  8056 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8057 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8058 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8059 ;;Total ram usage:       15 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    4
  8062 ;; This function calls:
  8063 ;;		Nothing
  8064 ;; This function is called by:
  8065 ;;		_PWM_DutyCycle1
  8066 ;;		_PWM_DutyCycle2
  8067 ;;		_sprintf
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text38
  8072  001436                     __ptext38:
  8073                           	opt stack 0
  8074  001436                     ___fttol:
  8075                           	opt stack 23
  8076                           
  8077                           ;incstack = 0
  8078  001436  0100               	movlb	0	; () banked
  8079  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8080  00143C  0100               	movlb	0	; () banked
  8081  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8082  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8083  001442  0100               	movlb	0	; () banked
  8084  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8085  001446  0100               	movlb	0	; () banked
  8086  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8087  00144A  E301               	bnc	u4821
  8088  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8089  00144E                     u4821:
  8090  00144E  0100               	movlb	0	; () banked
  8091  001450  5177               	movf	??___fttol& (0+255),w,b
  8092  001452  0100               	movlb	0	; () banked
  8093  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8094  001456  0100               	movlb	0	; () banked
  8095  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8096  00145A  D001               	goto	l4712
  8097  00145C  D059               	goto	u4870
  8098  00145E                     l4712:
  8099                           
  8100                           ; BSR set to: 0
  8101  00145E  0E17               	movlw	23
  8102  001460  0100               	movlb	0	; () banked
  8103  001462  6F77               	movwf	??___fttol& (0+255),b
  8104  001464  0100               	movlb	0	; () banked
  8105  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8106  00146A  0100               	movlb	0	; () banked
  8107  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8108  001470  0100               	movlb	0	; () banked
  8109  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8110  001476  0100               	movlb	0	; () banked
  8111  001478  2977               	incf	??___fttol& (0+255),w,b
  8112  00147A  0100               	movlb	0	; () banked
  8113  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8114  00147E  D005               	goto	u4840
  8115  001480                     u4845:
  8116  001480  0100               	movlb	0	; () banked
  8117  001482  90D8               	bcf	status,0,c
  8118  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8119  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8120  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8121  00148A                     u4840:
  8122  00148A  0100               	movlb	0	; () banked
  8123  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8124  00148E  D7F8               	goto	u4845
  8125  001490  0100               	movlb	0	; () banked
  8126  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8127  001494  0100               	movlb	0	; () banked
  8128  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8129                           
  8130                           ; BSR set to: 0
  8131  001498  0100               	movlb	0	; () banked
  8132  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8133                           
  8134                           ; BSR set to: 0
  8135  00149C  0EFF               	movlw	255
  8136  00149E  0100               	movlb	0	; () banked
  8137  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8138  0014A2  0EFF               	movlw	255
  8139  0014A4  0100               	movlb	0	; () banked
  8140  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8141  0014A8  0E00               	movlw	0
  8142  0014AA  0100               	movlb	0	; () banked
  8143  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8144                           
  8145                           ; BSR set to: 0
  8146  0014AE  0100               	movlb	0	; () banked
  8147  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8148  0014B2  0100               	movlb	0	; () banked
  8149  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8150  0014B6  0100               	movlb	0	; () banked
  8151  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8152  0014BA  0100               	movlb	0	; () banked
  8153  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8154  0014BE  0100               	movlb	0	; () banked
  8155  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8156  0014C2  0100               	movlb	0	; () banked
  8157  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8158  0014C6  0100               	movlb	0	; () banked
  8159  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162  0014CA  0E8E               	movlw	142
  8163  0014CC  0100               	movlb	0	; () banked
  8164  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8165                           
  8166                           ; BSR set to: 0
  8167  0014D0  0100               	movlb	0	; () banked
  8168  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8169  0014D4  D019               	goto	l4734
  8170                           
  8171                           ; BSR set to: 0
  8172  0014D6  0100               	movlb	0	; () banked
  8173  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8174  0014DA  0A80               	xorlw	128
  8175  0014DC  0100               	movlb	0	; () banked
  8176  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8177  0014E0  0EF1               	movlw	241
  8178  0014E2  0A80               	xorlw	128
  8179  0014E4  0100               	movlb	0	; () banked
  8180  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8181  0014E8  A0D8               	btfss	status,0,c
  8182  0014EA  D012               	goto	u4870
  8183  0014EC                     l4730:
  8184                           
  8185                           ; BSR set to: 0
  8186  0014EC  0100               	movlb	0	; () banked
  8187  0014EE  90D8               	bcf	status,0,c
  8188  0014F0  0100               	movlb	0	; () banked
  8189  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8190  0014F4  0100               	movlb	0	; () banked
  8191  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8192  0014F8  0100               	movlb	0	; () banked
  8193  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8194  0014FC  0100               	movlb	0	; () banked
  8195  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8196                           
  8197                           ; BSR set to: 0
  8198  001500  0100               	movlb	0	; () banked
  8199  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8200  001504  D7F3               	goto	l4730
  8201  001506  D020               	goto	l4744
  8202  001508                     l4734:
  8203                           
  8204                           ; BSR set to: 0
  8205  001508  0E17               	movlw	23
  8206  00150A  0100               	movlb	0	; () banked
  8207  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8208  00150E  D019               	goto	l4742
  8209  001510                     u4870:
  8210                           
  8211                           ; BSR set to: 0
  8212  001510  0E00               	movlw	0
  8213  001512  0100               	movlb	0	; () banked
  8214  001514  6F73               	movwf	?___fttol& (0+255),b
  8215  001516  0E00               	movlw	0
  8216  001518  0100               	movlb	0	; () banked
  8217  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8218  00151C  0E00               	movlw	0
  8219  00151E  0100               	movlb	0	; () banked
  8220  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8221  001522  0E00               	movlw	0
  8222  001524  0100               	movlb	0	; () banked
  8223  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8224  001528  D02A               	goto	l1051
  8225  00152A                     l4740:
  8226                           
  8227                           ; BSR set to: 0
  8228  00152A  0100               	movlb	0	; () banked
  8229  00152C  90D8               	bcf	status,0,c
  8230  00152E  0100               	movlb	0	; () banked
  8231  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8232  001532  0100               	movlb	0	; () banked
  8233  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8234  001536  0100               	movlb	0	; () banked
  8235  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8236  00153A  0100               	movlb	0	; () banked
  8237  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8238  00153E  0100               	movlb	0	; () banked
  8239  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8240  001542                     l4742:
  8241                           
  8242                           ; BSR set to: 0
  8243  001542  0100               	movlb	0	; () banked
  8244  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8245  001546  D7F1               	goto	l4740
  8246  001548                     l4744:
  8247                           
  8248                           ; BSR set to: 0
  8249  001548  0100               	movlb	0	; () banked
  8250  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8251  00154C  B4D8               	btfsc	status,2,c
  8252  00154E  D00F               	goto	l4748
  8253                           
  8254                           ; BSR set to: 0
  8255  001550  0100               	movlb	0	; () banked
  8256  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8257  001554  0100               	movlb	0	; () banked
  8258  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8259  001558  0100               	movlb	0	; () banked
  8260  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8261  00155C  0100               	movlb	0	; () banked
  8262  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8263  001560  0E00               	movlw	0
  8264  001562  0100               	movlb	0	; () banked
  8265  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8266  001566  0100               	movlb	0	; () banked
  8267  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8268  00156A  0100               	movlb	0	; () banked
  8269  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8270  00156E                     l4748:
  8271                           
  8272                           ; BSR set to: 0
  8273  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8274  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8275  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8276  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8277  00157E                     l1051:
  8278                           
  8279                           ; BSR set to: 0
  8280  00157E  0012               	return	
  8281  001580                     __end_of___fttol:
  8282                           	opt stack 0
  8283                           tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodh	equ	0xFF4
  8288                           prodl	equ	0xFF3
  8289                           intcon	equ	0xFF2
  8290                           indf0	equ	0xFEF
  8291                           postinc0	equ	0xFEE
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           postinc1	equ	0xFE6
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function ___ftsub *****************
  8306 ;; Defined at:
  8307 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  f1              3   34[BANK0 ] float 
  8310 ;;  f2              3   37[BANK0 ] float 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;		None
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  3   34[BANK0 ] float 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0, cstack
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8322 ;;      Params:         0       6       0       0       0       0       0       0       0
  8323 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8325 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8326 ;;Total ram usage:        6 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    6
  8329 ;; This function calls:
  8330 ;;		___ftadd
  8331 ;; This function is called by:
  8332 ;;		_sprintf
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text39
  8337  0024F8                     __ptext39:
  8338                           	opt stack 0
  8339  0024F8                     ___ftsub:
  8340                           	opt stack 21
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;incstack = 0
  8344  0024F8  0E00               	movlw	0
  8345  0024FA  0100               	movlb	0	; () banked
  8346  0024FC  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8347  0024FE  0E00               	movlw	0
  8348  002500  0100               	movlb	0	; () banked
  8349  002502  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8350  002504  0E80               	movlw	128
  8351  002506  0100               	movlb	0	; () banked
  8352  002508  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 0
  8355  00250A  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8356  00250E  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8357  002512  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8358  002516  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8359  00251A  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8360  00251E  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8361  002522  EC2F  F008         	call	___ftadd	;wreg free
  8362  002526  C076  F082         	movff	?___ftadd,?___ftsub
  8363  00252A  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8364  00252E  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8365  002532  0012               	return	
  8366  002534                     __end_of___ftsub:
  8367                           	opt stack 0
  8368                           tblptru	equ	0xFF8
  8369                           tblptrh	equ	0xFF7
  8370                           tblptrl	equ	0xFF6
  8371                           tablat	equ	0xFF5
  8372                           prodh	equ	0xFF4
  8373                           prodl	equ	0xFF3
  8374                           intcon	equ	0xFF2
  8375                           indf0	equ	0xFEF
  8376                           postinc0	equ	0xFEE
  8377                           fsr0h	equ	0xFEA
  8378                           fsr0l	equ	0xFE9
  8379                           wreg	equ	0xFE8
  8380                           postinc1	equ	0xFE6
  8381                           postdec1	equ	0xFE5
  8382                           fsr1l	equ	0xFE1
  8383                           indf2	equ	0xFDF
  8384                           postinc2	equ	0xFDE
  8385                           postdec2	equ	0xFDD
  8386                           fsr2h	equ	0xFDA
  8387                           fsr2l	equ	0xFD9
  8388                           status	equ	0xFD8
  8389                           
  8390 ;; *************** function ___ftadd *****************
  8391 ;; Defined at:
  8392 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  f1              3   22[BANK0 ] float 
  8395 ;;  f2              3   25[BANK0 ] float 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  exp1            1   33[BANK0 ] unsigned char 
  8398 ;;  exp2            1   32[BANK0 ] unsigned char 
  8399 ;;  sign            1   31[BANK0 ] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  3   22[BANK0 ] float 
  8402 ;; Registers used:
  8403 ;;		wreg, status,2, status,0, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8409 ;;      Params:         0       6       0       0       0       0       0       0       0
  8410 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8411 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8412 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8413 ;;Total ram usage:       12 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    5
  8416 ;; This function calls:
  8417 ;;		___ftpack
  8418 ;; This function is called by:
  8419 ;;		_sprintf
  8420 ;;		___ftsub
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           	psect	text40
  8425  00105E                     __ptext40:
  8426                           	opt stack 0
  8427  00105E                     ___ftadd:
  8428                           	opt stack 21
  8429                           
  8430                           ;incstack = 0
  8431  00105E  0100               	movlb	0	; () banked
  8432  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8433  001064  0100               	movlb	0	; () banked
  8434  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8435  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8436  00106A  0100               	movlb	0	; () banked
  8437  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8438  00106E  0100               	movlb	0	; () banked
  8439  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8440  001072  E301               	bnc	u3981
  8441  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8442  001076                     u3981:
  8443  001076  0100               	movlb	0	; () banked
  8444  001078  517C               	movf	??___ftadd& (0+255),w,b
  8445  00107A  0100               	movlb	0	; () banked
  8446  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8447  00107E  0100               	movlb	0	; () banked
  8448  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8449  001084  0100               	movlb	0	; () banked
  8450  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8451  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8452  00108A  0100               	movlb	0	; () banked
  8453  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8454  00108E  0100               	movlb	0	; () banked
  8455  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8456  001092  E301               	bnc	u3991
  8457  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8458  001096                     u3991:
  8459  001096  0100               	movlb	0	; () banked
  8460  001098  517C               	movf	??___ftadd& (0+255),w,b
  8461  00109A  0100               	movlb	0	; () banked
  8462  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465  00109E  0100               	movlb	0	; () banked
  8466  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8467  0010A2  B4D8               	btfsc	status,2,c
  8468  0010A4  D012               	goto	l967
  8469                           
  8470                           ; BSR set to: 0
  8471  0010A6  0100               	movlb	0	; () banked
  8472  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8473  0010AA  0100               	movlb	0	; () banked
  8474  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8475  0010AE  B0D8               	btfsc	status,0,c
  8476  0010B0  D013               	goto	l4220
  8477                           
  8478                           ; BSR set to: 0
  8479  0010B2  0100               	movlb	0	; () banked
  8480  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8481  0010B6  0800               	sublw	0
  8482  0010B8  0100               	movlb	0	; () banked
  8483  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8484  0010BC  0100               	movlb	0	; () banked
  8485  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8486  0010C0  0E19               	movlw	25
  8487  0010C2  0100               	movlb	0	; () banked
  8488  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8489  0010C6  A0D8               	btfss	status,0,c
  8490  0010C8  D007               	goto	l4220
  8491  0010CA                     l967:
  8492                           
  8493                           ; BSR set to: 0
  8494  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8495  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8496  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8497  0010D6  D102               	goto	l968
  8498  0010D8                     l4220:
  8499                           
  8500                           ; BSR set to: 0
  8501  0010D8  0100               	movlb	0	; () banked
  8502  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8503  0010DC  B4D8               	btfsc	status,2,c
  8504  0010DE  D012               	goto	l971
  8505                           
  8506                           ; BSR set to: 0
  8507  0010E0  0100               	movlb	0	; () banked
  8508  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8509  0010E4  0100               	movlb	0	; () banked
  8510  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8511  0010E8  B0D8               	btfsc	status,0,c
  8512  0010EA  D013               	goto	l4226
  8513                           
  8514                           ; BSR set to: 0
  8515  0010EC  0100               	movlb	0	; () banked
  8516  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8517  0010F0  0800               	sublw	0
  8518  0010F2  0100               	movlb	0	; () banked
  8519  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8520  0010F6  0100               	movlb	0	; () banked
  8521  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8522  0010FA  0E19               	movlw	25
  8523  0010FC  0100               	movlb	0	; () banked
  8524  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8525  001100  A0D8               	btfss	status,0,c
  8526  001102  D007               	goto	l4226
  8527  001104                     l971:
  8528                           
  8529                           ; BSR set to: 0
  8530  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8531  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8532  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8533  001110  D0E5               	goto	l968
  8534  001112                     l4226:
  8535                           
  8536                           ; BSR set to: 0
  8537  001112  0E06               	movlw	6
  8538  001114  0100               	movlb	0	; () banked
  8539  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542  001118  0100               	movlb	0	; () banked
  8543  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8544  00111C  D002               	goto	l4232
  8545                           
  8546                           ; BSR set to: 0
  8547  00111E  0100               	movlb	0	; () banked
  8548  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8549  001122                     l4232:
  8550                           
  8551                           ; BSR set to: 0
  8552  001122  0100               	movlb	0	; () banked
  8553  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8554  001126  D002               	goto	l973
  8555                           
  8556                           ; BSR set to: 0
  8557  001128  0100               	movlb	0	; () banked
  8558  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8559  00112C                     l973:
  8560                           
  8561                           ; BSR set to: 0
  8562  00112C  0100               	movlb	0	; () banked
  8563  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8564                           
  8565                           ; BSR set to: 0
  8566  001130  0EFF               	movlw	255
  8567  001132  0100               	movlb	0	; () banked
  8568  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8569  001136  0EFF               	movlw	255
  8570  001138  0100               	movlb	0	; () banked
  8571  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8572  00113C  0E00               	movlw	0
  8573  00113E  0100               	movlb	0	; () banked
  8574  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8575  001142  0100               	movlb	0	; () banked
  8576  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8577                           
  8578                           ; BSR set to: 0
  8579  001146  0EFF               	movlw	255
  8580  001148  0100               	movlb	0	; () banked
  8581  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8582  00114C  0EFF               	movlw	255
  8583  00114E  0100               	movlb	0	; () banked
  8584  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8585  001152  0E00               	movlw	0
  8586  001154  0100               	movlb	0	; () banked
  8587  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8588                           
  8589                           ; BSR set to: 0
  8590  001158  0100               	movlb	0	; () banked
  8591  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8592  00115C  0100               	movlb	0	; () banked
  8593  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8594  001160  B0D8               	btfsc	status,0,c
  8595  001162  D02A               	goto	l4252
  8596  001164                     l4242:
  8597                           
  8598                           ; BSR set to: 0
  8599  001164  0100               	movlb	0	; () banked
  8600  001166  90D8               	bcf	status,0,c
  8601  001168  0100               	movlb	0	; () banked
  8602  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8603  00116C  0100               	movlb	0	; () banked
  8604  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8605  001170  0100               	movlb	0	; () banked
  8606  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8607  001174  0100               	movlb	0	; () banked
  8608  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8609                           
  8610                           ; BSR set to: 0
  8611  001178  0100               	movlb	0	; () banked
  8612  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8613  00117C  0100               	movlb	0	; () banked
  8614  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8615  001180  B4D8               	btfsc	status,2,c
  8616  001182  D014               	goto	l4250
  8617                           
  8618                           ; BSR set to: 0
  8619  001184  0100               	movlb	0	; () banked
  8620  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8621  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8622  00118C  0E07               	movlw	7
  8623  00118E  0100               	movlb	0	; () banked
  8624  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8625  001192  B4D8               	btfsc	status,2,c
  8626  001194  D00B               	goto	l4250
  8627  001196  D7E6               	goto	l4242
  8628  001198                     l4248:
  8629                           
  8630                           ; BSR set to: 0
  8631  001198  0100               	movlb	0	; () banked
  8632  00119A  90D8               	bcf	status,0,c
  8633  00119C  0100               	movlb	0	; () banked
  8634  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8635  0011A0  0100               	movlb	0	; () banked
  8636  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8637  0011A4  0100               	movlb	0	; () banked
  8638  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8639  0011A8  0100               	movlb	0	; () banked
  8640  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8641  0011AC                     l4250:
  8642                           
  8643                           ; BSR set to: 0
  8644  0011AC  0100               	movlb	0	; () banked
  8645  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8646  0011B0  0100               	movlb	0	; () banked
  8647  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8648  0011B4  D7F1               	goto	l4248
  8649  0011B6  D02F               	goto	l982
  8650  0011B8                     l4252:
  8651                           
  8652                           ; BSR set to: 0
  8653  0011B8  0100               	movlb	0	; () banked
  8654  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8655  0011BC  0100               	movlb	0	; () banked
  8656  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8657  0011C0  B0D8               	btfsc	status,0,c
  8658  0011C2  D029               	goto	l982
  8659  0011C4                     l4254:
  8660                           
  8661                           ; BSR set to: 0
  8662  0011C4  0100               	movlb	0	; () banked
  8663  0011C6  90D8               	bcf	status,0,c
  8664  0011C8  0100               	movlb	0	; () banked
  8665  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8666  0011CC  0100               	movlb	0	; () banked
  8667  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8668  0011D0  0100               	movlb	0	; () banked
  8669  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8670  0011D4  0100               	movlb	0	; () banked
  8671  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8672                           
  8673                           ; BSR set to: 0
  8674  0011D8  0100               	movlb	0	; () banked
  8675  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8676  0011DC  0100               	movlb	0	; () banked
  8677  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8678  0011E0  B4D8               	btfsc	status,2,c
  8679  0011E2  D014               	goto	l4262
  8680                           
  8681                           ; BSR set to: 0
  8682  0011E4  0100               	movlb	0	; () banked
  8683  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8684  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8685  0011EC  0E07               	movlw	7
  8686  0011EE  0100               	movlb	0	; () banked
  8687  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8688  0011F2  B4D8               	btfsc	status,2,c
  8689  0011F4  D00B               	goto	l4262
  8690  0011F6  D7E6               	goto	l4254
  8691  0011F8                     l4260:
  8692                           
  8693                           ; BSR set to: 0
  8694  0011F8  0100               	movlb	0	; () banked
  8695  0011FA  90D8               	bcf	status,0,c
  8696  0011FC  0100               	movlb	0	; () banked
  8697  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8698  001200  0100               	movlb	0	; () banked
  8699  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8700  001204  0100               	movlb	0	; () banked
  8701  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8702  001208  0100               	movlb	0	; () banked
  8703  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8704  00120C                     l4262:
  8705                           
  8706                           ; BSR set to: 0
  8707  00120C  0100               	movlb	0	; () banked
  8708  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8709  001210  0100               	movlb	0	; () banked
  8710  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8711  001214  D7F1               	goto	l4260
  8712  001216                     l982:
  8713                           
  8714                           ; BSR set to: 0
  8715  001216  0100               	movlb	0	; () banked
  8716  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8717  00121A  D012               	goto	l991
  8718                           
  8719                           ; BSR set to: 0
  8720  00121C  0EFF               	movlw	255
  8721  00121E  0100               	movlb	0	; () banked
  8722  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8723  001222  0EFF               	movlw	255
  8724  001224  0100               	movlb	0	; () banked
  8725  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8726  001228  0EFF               	movlw	255
  8727  00122A  0100               	movlb	0	; () banked
  8728  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8729  00122E  0E01               	movlw	1
  8730  001230  0100               	movlb	0	; () banked
  8731  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8732  001234  0E00               	movlw	0
  8733  001236  0100               	movlb	0	; () banked
  8734  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8735  00123A  0E00               	movlw	0
  8736  00123C  0100               	movlb	0	; () banked
  8737  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8738  001240                     l991:
  8739                           
  8740                           ; BSR set to: 0
  8741  001240  0100               	movlb	0	; () banked
  8742  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8743  001244  D012               	goto	l4268
  8744                           
  8745                           ; BSR set to: 0
  8746  001246  0EFF               	movlw	255
  8747  001248  0100               	movlb	0	; () banked
  8748  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8749  00124C  0EFF               	movlw	255
  8750  00124E  0100               	movlb	0	; () banked
  8751  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8752  001252  0EFF               	movlw	255
  8753  001254  0100               	movlb	0	; () banked
  8754  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8755  001258  0E01               	movlw	1
  8756  00125A  0100               	movlb	0	; () banked
  8757  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8758  00125E  0E00               	movlw	0
  8759  001260  0100               	movlb	0	; () banked
  8760  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8761  001264  0E00               	movlw	0
  8762  001266  0100               	movlb	0	; () banked
  8763  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8764  00126A                     l4268:
  8765                           
  8766                           ; BSR set to: 0
  8767  00126A  0E00               	movlw	0
  8768  00126C  0100               	movlb	0	; () banked
  8769  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8770                           
  8771                           ; BSR set to: 0
  8772  001270  0100               	movlb	0	; () banked
  8773  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8774  001274  0100               	movlb	0	; () banked
  8775  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  8776  001278  0100               	movlb	0	; () banked
  8777  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8778  00127C  0100               	movlb	0	; () banked
  8779  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8780  001280  0100               	movlb	0	; () banked
  8781  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8782  001284  0100               	movlb	0	; () banked
  8783  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8784                           
  8785                           ; BSR set to: 0
  8786  001288  0100               	movlb	0	; () banked
  8787  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8788  00128C  D015               	goto	l4278
  8789                           
  8790                           ; BSR set to: 0
  8791  00128E  0EFF               	movlw	255
  8792  001290  0100               	movlb	0	; () banked
  8793  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8794  001294  0EFF               	movlw	255
  8795  001296  0100               	movlb	0	; () banked
  8796  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8797  00129A  0EFF               	movlw	255
  8798  00129C  0100               	movlb	0	; () banked
  8799  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8800  0012A0  0E01               	movlw	1
  8801  0012A2  0100               	movlb	0	; () banked
  8802  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  8803  0012A6  0E00               	movlw	0
  8804  0012A8  0100               	movlb	0	; () banked
  8805  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8806  0012AC  0E00               	movlw	0
  8807  0012AE  0100               	movlb	0	; () banked
  8808  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8809                           
  8810                           ; BSR set to: 0
  8811  0012B2  0E01               	movlw	1
  8812  0012B4  0100               	movlb	0	; () banked
  8813  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  8814  0012B8                     l4278:
  8815                           
  8816                           ; BSR set to: 0
  8817  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8818  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8819  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8820  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8821  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  8822  0012CC  EC48  F00D         	call	___ftpack	;wreg free
  8823  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  8824  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  8825  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  8826  0012DC                     l968:
  8827  0012DC  0012               	return	
  8828  0012DE                     __end_of___ftadd:
  8829                           	opt stack 0
  8830                           tblptru	equ	0xFF8
  8831                           tblptrh	equ	0xFF7
  8832                           tblptrl	equ	0xFF6
  8833                           tablat	equ	0xFF5
  8834                           prodh	equ	0xFF4
  8835                           prodl	equ	0xFF3
  8836                           intcon	equ	0xFF2
  8837                           indf0	equ	0xFEF
  8838                           postinc0	equ	0xFEE
  8839                           fsr0h	equ	0xFEA
  8840                           fsr0l	equ	0xFE9
  8841                           wreg	equ	0xFE8
  8842                           postinc1	equ	0xFE6
  8843                           postdec1	equ	0xFE5
  8844                           fsr1l	equ	0xFE1
  8845                           indf2	equ	0xFDF
  8846                           postinc2	equ	0xFDE
  8847                           postdec2	equ	0xFDD
  8848                           fsr2h	equ	0xFDA
  8849                           fsr2l	equ	0xFD9
  8850                           status	equ	0xFD8
  8851                           
  8852 ;; *************** function ___ftpack *****************
  8853 ;; Defined at:
  8854 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;  arg             3   24[COMRAM] unsigned um
  8857 ;;  exp             1   27[COMRAM] unsigned char 
  8858 ;;  sign            1   28[COMRAM] unsigned char 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;                  3   24[COMRAM] float 
  8863 ;; Registers used:
  8864 ;;		wreg, status,2, status,0
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8870 ;;      Params:         5       0       0       0       0       0       0       0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8872 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8873 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8874 ;;Total ram usage:        8 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    4
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		___ftadd
  8881 ;;		___ftmul
  8882 ;;		___lbtoft
  8883 ;;		___lltoft
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text41
  8888  001A90                     __ptext41:
  8889                           	opt stack 0
  8890  001A90                     ___ftpack:
  8891                           	opt stack 21
  8892                           
  8893                           ;incstack = 0
  8894  001A90  501C               	movf	___ftpack@exp,w,c
  8895  001A92  B4D8               	btfsc	status,2,c
  8896  001A94  D005               	goto	l4158
  8897  001A96  5019               	movf	___ftpack@arg,w,c
  8898  001A98  101A               	iorwf	___ftpack@arg+1,w,c
  8899  001A9A  101B               	iorwf	___ftpack@arg+2,w,c
  8900  001A9C  A4D8               	btfss	status,2,c
  8901  001A9E  D00C               	goto	l4164
  8902  001AA0                     l4158:
  8903  001AA0  0E00               	movlw	0
  8904  001AA2  6E19               	movwf	?___ftpack,c
  8905  001AA4  0E00               	movlw	0
  8906  001AA6  6E1A               	movwf	?___ftpack+1,c
  8907  001AA8  0E00               	movlw	0
  8908  001AAA  6E1B               	movwf	?___ftpack+2,c
  8909  001AAC  D044               	goto	l930
  8910  001AAE                     l4162:
  8911  001AAE  2A1C               	incf	___ftpack@exp,f,c
  8912  001AB0  90D8               	bcf	status,0,c
  8913  001AB2  321B               	rrcf	___ftpack@arg+2,f,c
  8914  001AB4  321A               	rrcf	___ftpack@arg+1,f,c
  8915  001AB6  3219               	rrcf	___ftpack@arg,f,c
  8916  001AB8                     l4164:
  8917  001AB8  0E00               	movlw	0
  8918  001ABA  1419               	andwf	___ftpack@arg,w,c
  8919  001ABC  6E1E               	movwf	??___ftpack& (0+255),c
  8920  001ABE  0E00               	movlw	0
  8921  001AC0  141A               	andwf	___ftpack@arg+1,w,c
  8922  001AC2  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8923  001AC4  0EFE               	movlw	254
  8924  001AC6  141B               	andwf	___ftpack@arg+2,w,c
  8925  001AC8  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8926  001ACA  501E               	movf	??___ftpack,w,c
  8927  001ACC  101F               	iorwf	??___ftpack+1,w,c
  8928  001ACE  1020               	iorwf	??___ftpack+2,w,c
  8929  001AD0  B4D8               	btfsc	status,2,c
  8930  001AD2  D00C               	goto	l4170
  8931  001AD4  D7EC               	goto	l4162
  8932  001AD6                     l4166:
  8933  001AD6  2A1C               	incf	___ftpack@exp,f,c
  8934  001AD8  0E01               	movlw	1
  8935  001ADA  2619               	addwf	___ftpack@arg,f,c
  8936  001ADC  0E00               	movlw	0
  8937  001ADE  221A               	addwfc	___ftpack@arg+1,f,c
  8938  001AE0  0E00               	movlw	0
  8939  001AE2  221B               	addwfc	___ftpack@arg+2,f,c
  8940  001AE4  90D8               	bcf	status,0,c
  8941  001AE6  321B               	rrcf	___ftpack@arg+2,f,c
  8942  001AE8  321A               	rrcf	___ftpack@arg+1,f,c
  8943  001AEA  3219               	rrcf	___ftpack@arg,f,c
  8944  001AEC                     l4170:
  8945  001AEC  0E00               	movlw	0
  8946  001AEE  1419               	andwf	___ftpack@arg,w,c
  8947  001AF0  6E1E               	movwf	??___ftpack& (0+255),c
  8948  001AF2  0E00               	movlw	0
  8949  001AF4  141A               	andwf	___ftpack@arg+1,w,c
  8950  001AF6  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8951  001AF8  0EFF               	movlw	255
  8952  001AFA  141B               	andwf	___ftpack@arg+2,w,c
  8953  001AFC  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8954  001AFE  501E               	movf	??___ftpack,w,c
  8955  001B00  101F               	iorwf	??___ftpack+1,w,c
  8956  001B02  1020               	iorwf	??___ftpack+2,w,c
  8957  001B04  B4D8               	btfsc	status,2,c
  8958  001B06  D006               	goto	l4174
  8959  001B08  D7E6               	goto	l4166
  8960  001B0A                     l4172:
  8961  001B0A  061C               	decf	___ftpack@exp,f,c
  8962  001B0C  90D8               	bcf	status,0,c
  8963  001B0E  3619               	rlcf	___ftpack@arg,f,c
  8964  001B10  361A               	rlcf	___ftpack@arg+1,f,c
  8965  001B12  361B               	rlcf	___ftpack@arg+2,f,c
  8966  001B14                     l4174:
  8967  001B14  AE1A               	btfss	___ftpack@arg+1,7,c
  8968  001B16  D7F9               	goto	l4172
  8969  001B18  A01C               	btfss	___ftpack@exp,0,c
  8970  001B1A  9E1A               	bcf	___ftpack@arg+1,7,c
  8971  001B1C  90D8               	bcf	status,0,c
  8972  001B1E  321C               	rrcf	___ftpack@exp,f,c
  8973  001B20  501C               	movf	___ftpack@exp,w,c
  8974  001B22  121B               	iorwf	___ftpack@arg+2,f,c
  8975  001B24  501D               	movf	___ftpack@sign,w,c
  8976  001B26  A4D8               	btfss	status,2,c
  8977  001B28  8E1B               	bsf	___ftpack@arg+2,7,c
  8978  001B2A  C019  F019         	movff	___ftpack@arg,?___ftpack
  8979  001B2E  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8980  001B32  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8981  001B36                     l930:
  8982  001B36  0012               	return	
  8983  001B38                     __end_of___ftpack:
  8984                           	opt stack 0
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           intcon	equ	0xFF2
  8992                           indf0	equ	0xFEF
  8993                           postinc0	equ	0xFEE
  8994                           fsr0h	equ	0xFEA
  8995                           fsr0l	equ	0xFE9
  8996                           wreg	equ	0xFE8
  8997                           postinc1	equ	0xFE6
  8998                           postdec1	equ	0xFE5
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function ___ftneg *****************
  9008 ;; Defined at:
  9009 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  f1              3   24[COMRAM] float 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  3   24[COMRAM] float 
  9016 ;; Registers used:
  9017 ;;		wreg, status,2, status,0
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9023 ;;      Params:         3       0       0       0       0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9026 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9027 ;;Total ram usage:        3 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    4
  9030 ;; This function calls:
  9031 ;;		Nothing
  9032 ;; This function is called by:
  9033 ;;		_sprintf
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text42
  9038  002774                     __ptext42:
  9039                           	opt stack 0
  9040  002774                     ___ftneg:
  9041                           	opt stack 23
  9042                           
  9043                           ;incstack = 0
  9044  002774  0E7F               	movlw	127
  9045  002776  141B               	andwf	___ftneg@f1+2,w,c
  9046  002778  101A               	iorwf	___ftneg@f1+1,w,c
  9047  00277A  1019               	iorwf	___ftneg@f1,w,c
  9048  00277C  B4D8               	btfsc	status,2,c
  9049  00277E  D006               	goto	l1041
  9050  002780  0E00               	movlw	0
  9051  002782  1A19               	xorwf	___ftneg@f1,f,c
  9052  002784  0E00               	movlw	0
  9053  002786  1A1A               	xorwf	___ftneg@f1+1,f,c
  9054  002788  0E80               	movlw	128
  9055  00278A  1A1B               	xorwf	___ftneg@f1+2,f,c
  9056  00278C                     l1041:
  9057  00278C  C019  F019         	movff	___ftneg@f1,?___ftneg
  9058  002790  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9059  002794  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9060  002798  0012               	return	
  9061  00279A                     __end_of___ftneg:
  9062                           	opt stack 0
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           indf0	equ	0xFEF
  9071                           postinc0	equ	0xFEE
  9072                           fsr0h	equ	0xFEA
  9073                           fsr0l	equ	0xFE9
  9074                           wreg	equ	0xFE8
  9075                           postinc1	equ	0xFE6
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085 ;; *************** function ___ftge *****************
  9086 ;; Defined at:
  9087 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  ff1             3   24[COMRAM] float 
  9090 ;;  ff2             3   27[COMRAM] float 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;		None               void
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9102 ;;      Params:         6       0       0       0       0       0       0       0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9104 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9105 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9106 ;;Total ram usage:        9 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    4
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_sprintf
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           	psect	text43
  9117  001E3C                     __ptext43:
  9118                           	opt stack 0
  9119  001E3C                     ___ftge:
  9120                           	opt stack 23
  9121                           
  9122                           ;incstack = 0
  9123  001E3C  AE1B               	btfss	___ftge@ff1+2,7,c
  9124  001E3E  D016               	goto	l4688
  9125  001E40  C019  F01F         	movff	___ftge@ff1,??___ftge
  9126  001E44  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9127  001E48  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9128  001E4C  1E1F               	comf	??___ftge,f,c
  9129  001E4E  1E20               	comf	??___ftge+1,f,c
  9130  001E50  1E21               	comf	??___ftge+2,f,c
  9131  001E52  2A1F               	incf	??___ftge,f,c
  9132  001E54  0E00               	movlw	0
  9133  001E56  2220               	addwfc	??___ftge+1,f,c
  9134  001E58  2221               	addwfc	??___ftge+2,f,c
  9135  001E5A  0E00               	movlw	0
  9136  001E5C  241F               	addwf	??___ftge,w,c
  9137  001E5E  6E19               	movwf	___ftge@ff1,c
  9138  001E60  0E00               	movlw	0
  9139  001E62  2020               	addwfc	??___ftge+1,w,c
  9140  001E64  6E1A               	movwf	___ftge@ff1+1,c
  9141  001E66  0E80               	movlw	128
  9142  001E68  2021               	addwfc	??___ftge+2,w,c
  9143  001E6A  6E1B               	movwf	___ftge@ff1+2,c
  9144  001E6C                     l4688:
  9145  001E6C  AE1E               	btfss	___ftge@ff2+2,7,c
  9146  001E6E  D016               	goto	l4692
  9147  001E70  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9148  001E74  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9149  001E78  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9150  001E7C  1E1F               	comf	??___ftge,f,c
  9151  001E7E  1E20               	comf	??___ftge+1,f,c
  9152  001E80  1E21               	comf	??___ftge+2,f,c
  9153  001E82  2A1F               	incf	??___ftge,f,c
  9154  001E84  0E00               	movlw	0
  9155  001E86  2220               	addwfc	??___ftge+1,f,c
  9156  001E88  2221               	addwfc	??___ftge+2,f,c
  9157  001E8A  0E00               	movlw	0
  9158  001E8C  241F               	addwf	??___ftge,w,c
  9159  001E8E  6E1C               	movwf	___ftge@ff2,c
  9160  001E90  0E00               	movlw	0
  9161  001E92  2020               	addwfc	??___ftge+1,w,c
  9162  001E94  6E1D               	movwf	___ftge@ff2+1,c
  9163  001E96  0E80               	movlw	128
  9164  001E98  2021               	addwfc	??___ftge+2,w,c
  9165  001E9A  6E1E               	movwf	___ftge@ff2+2,c
  9166  001E9C                     l4692:
  9167  001E9C  0E00               	movlw	0
  9168  001E9E  1A19               	xorwf	___ftge@ff1,f,c
  9169  001EA0  0E00               	movlw	0
  9170  001EA2  1A1A               	xorwf	___ftge@ff1+1,f,c
  9171  001EA4  0E80               	movlw	128
  9172  001EA6  1A1B               	xorwf	___ftge@ff1+2,f,c
  9173  001EA8  0E00               	movlw	0
  9174  001EAA  1A1C               	xorwf	___ftge@ff2,f,c
  9175  001EAC  0E00               	movlw	0
  9176  001EAE  1A1D               	xorwf	___ftge@ff2+1,f,c
  9177  001EB0  0E80               	movlw	128
  9178  001EB2  1A1E               	xorwf	___ftge@ff2+2,f,c
  9179  001EB4  501C               	movf	___ftge@ff2,w,c
  9180  001EB6  5C19               	subwf	___ftge@ff1,w,c
  9181  001EB8  501D               	movf	___ftge@ff2+1,w,c
  9182  001EBA  581A               	subwfb	___ftge@ff1+1,w,c
  9183  001EBC  501E               	movf	___ftge@ff2+2,w,c
  9184  001EBE  581B               	subwfb	___ftge@ff1+2,w,c
  9185  001EC0  B0D8               	btfsc	status,0,c
  9186  001EC2  D002               	goto	l4698
  9187  001EC4  90D8               	bcf	status,0,c
  9188  001EC6  D001               	goto	l1025
  9189  001EC8                     l4698:
  9190  001EC8  80D8               	bsf	status,0,c
  9191  001ECA                     l1025:
  9192  001ECA  0012               	return	
  9193  001ECC                     __end_of___ftge:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           indf0	equ	0xFEF
  9203                           postinc0	equ	0xFEE
  9204                           fsr0h	equ	0xFEA
  9205                           fsr0l	equ	0xFE9
  9206                           wreg	equ	0xFE8
  9207                           postinc1	equ	0xFE6
  9208                           postdec1	equ	0xFE5
  9209                           fsr1l	equ	0xFE1
  9210                           indf2	equ	0xFDF
  9211                           postinc2	equ	0xFDE
  9212                           postdec2	equ	0xFDD
  9213                           fsr2h	equ	0xFDA
  9214                           fsr2l	equ	0xFD9
  9215                           status	equ	0xFD8
  9216                           
  9217 ;; *************** function _Lcd_Write_String *****************
  9218 ;; Defined at:
  9219 ;;		line 90 in file "lcd.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  a               2   28[COMRAM] PTR unsigned char 
  9222 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
  9223 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
  9224 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  i               2   32[COMRAM] int 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;		None               void
  9229 ;; Registers used:
  9230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9236 ;;      Params:         2       0       0       0       0       0       0       0       0
  9237 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9238 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9239 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9240 ;;Total ram usage:        6 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    6
  9243 ;; This function calls:
  9244 ;;		_Lcd_Write_Char
  9245 ;; This function is called by:
  9246 ;;		_Inicializa_Driveby
  9247 ;;		_Comando_Tablet
  9248 ;;		_Lcd_Write_Integer
  9249 ;;		_main
  9250 ;;		_Lcd_Write_Float
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text44
  9255  0020CC                     __ptext44:
  9256                           	opt stack 0
  9257  0020CC                     _Lcd_Write_String:
  9258                           	opt stack 24
  9259                           
  9260                           ;lcd.c: 91: int i;
  9261                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9262                           
  9263                           ;incstack = 0
  9264  0020CC  0E00               	movlw	0
  9265  0020CE  6E22               	movwf	Lcd_Write_String@i+1,c
  9266  0020D0  0E00               	movlw	0
  9267  0020D2  6E21               	movwf	Lcd_Write_String@i,c
  9268  0020D4  D01C               	goto	l5030
  9269  0020D6                     l5026:
  9270                           
  9271                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9272  0020D6  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9273  0020DA  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9274  0020DE  5021               	movf	Lcd_Write_String@i,w,c
  9275  0020E0  261F               	addwf	??_Lcd_Write_String,f,c
  9276  0020E2  5022               	movf	Lcd_Write_String@i+1,w,c
  9277  0020E4  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9278  0020E6  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9279  0020EA  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9280  0020EE  6AF8               	clrf	tblptru,c
  9281  0020F0  0E07               	movlw	(high __ramtop+-1)
  9282  0020F2  64F7               	cpfsgt	tblptrh,c
  9283  0020F4  D003               	bra	u5297
  9284  0020F6  0008               	tblrd		*
  9285  0020F8  50F5               	movf	tablat,w,c
  9286  0020FA  D005               	bra	u5290
  9287  0020FC                     u5297:
  9288  0020FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9289  002100  CFF7 FFEA          	movff	tblptrh,fsr0h
  9290  002104  50EF               	movf	indf0,w,c
  9291  002106                     u5290:
  9292  002106  EC2A  F013         	call	_Lcd_Write_Char
  9293  00210A  4A21               	infsnz	Lcd_Write_String@i,f,c
  9294  00210C  2A22               	incf	Lcd_Write_String@i+1,f,c
  9295  00210E                     l5030:
  9296  00210E  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9297  002112  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9298  002116  5021               	movf	Lcd_Write_String@i,w,c
  9299  002118  261F               	addwf	??_Lcd_Write_String,f,c
  9300  00211A  5022               	movf	Lcd_Write_String@i+1,w,c
  9301  00211C  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9302  00211E  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9303  002122  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9304  002126  6AF8               	clrf	tblptru,c
  9305  002128  0E07               	movlw	(high __ramtop+-1)
  9306  00212A  64F7               	cpfsgt	tblptrh,c
  9307  00212C  D003               	bra	u5307
  9308  00212E  0008               	tblrd		*
  9309  002130  50F5               	movf	tablat,w,c
  9310  002132  D005               	bra	u5300
  9311  002134                     u5307:
  9312  002134  CFF6 FFE9          	movff	tblptrl,fsr0l
  9313  002138  CFF7 FFEA          	movff	tblptrh,fsr0h
  9314  00213C  50EF               	movf	indf0,w,c
  9315  00213E                     u5300:
  9316  00213E  0900               	iorlw	0
  9317  002140  B4D8               	btfsc	status,2,c
  9318  002142  0012               	return	
  9319  002144  D7C8               	goto	l5026
  9320  002146                     __end_of_Lcd_Write_String:
  9321                           	opt stack 0
  9322                           tblptru	equ	0xFF8
  9323                           tblptrh	equ	0xFF7
  9324                           tblptrl	equ	0xFF6
  9325                           tablat	equ	0xFF5
  9326                           prodh	equ	0xFF4
  9327                           prodl	equ	0xFF3
  9328                           intcon	equ	0xFF2
  9329                           indf0	equ	0xFEF
  9330                           postinc0	equ	0xFEE
  9331                           fsr0h	equ	0xFEA
  9332                           fsr0l	equ	0xFE9
  9333                           wreg	equ	0xFE8
  9334                           postinc1	equ	0xFE6
  9335                           postdec1	equ	0xFE5
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _Lcd_Write_Char *****************
  9345 ;; Defined at:
  9346 ;;		line 75 in file "lcd.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  a               1    wreg     unsigned char 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  a               1   27[COMRAM] unsigned char 
  9351 ;;  y               1   26[COMRAM] unsigned char 
  9352 ;;  temp            1   25[COMRAM] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0
  9363 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9365 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9366 ;;Total ram usage:        3 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    5
  9369 ;; This function calls:
  9370 ;;		_Lcd_Port
  9371 ;; This function is called by:
  9372 ;;		_Lcd_Write_String
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text45
  9377  002654                     __ptext45:
  9378                           	opt stack 0
  9379  002654                     _Lcd_Write_Char:
  9380                           	opt stack 24
  9381                           
  9382                           ;incstack = 0
  9383                           ;Lcd_Write_Char@a stored from wreg
  9384  002654  6E1C               	movwf	Lcd_Write_Char@a,c
  9385                           
  9386                           ;lcd.c: 76: char temp, y;
  9387                           ;lcd.c: 77: temp = a & 0x0F;
  9388  002656  501C               	movf	Lcd_Write_Char@a,w,c
  9389  002658  0B0F               	andlw	15
  9390  00265A  6E1A               	movwf	Lcd_Write_Char@temp,c
  9391                           
  9392                           ;lcd.c: 78: y = a & 0xF0;
  9393  00265C  501C               	movf	Lcd_Write_Char@a,w,c
  9394  00265E  0BF0               	andlw	240
  9395  002660  6E1B               	movwf	Lcd_Write_Char@y,c
  9396                           
  9397                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9398  002662  8084               	bsf	3972,0,c	;volatile
  9399                           
  9400                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9401  002664  381B               	swapf	Lcd_Write_Char@y,w,c
  9402  002666  0B0F               	andlw	15
  9403  002668  EC7B  F013         	call	_Lcd_Port
  9404                           
  9405                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9406  00266C  8484               	bsf	3972,2,c	;volatile
  9407                           
  9408                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9409  00266E  0E0D               	movlw	13
  9410  002670                     u5667:
  9411  002670  2EE8               	decfsz	wreg,f,c
  9412  002672  D7FE               	goto	u5667
  9413  002674  F000               	nop	
  9414                           
  9415                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9416  002676  9484               	bcf	3972,2,c	;volatile
  9417                           
  9418                           ;lcd.c: 84: Lcd_Port(temp);
  9419  002678  501A               	movf	Lcd_Write_Char@temp,w,c
  9420  00267A  EC7B  F013         	call	_Lcd_Port
  9421                           
  9422                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9423  00267E  8484               	bsf	3972,2,c	;volatile
  9424                           
  9425                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9426  002680  0E0D               	movlw	13
  9427  002682                     u5677:
  9428  002682  2EE8               	decfsz	wreg,f,c
  9429  002684  D7FE               	goto	u5677
  9430  002686  F000               	nop	
  9431                           
  9432                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9433  002688  9484               	bcf	3972,2,c	;volatile
  9434  00268A  0012               	return	
  9435  00268C                     __end_of_Lcd_Write_Char:
  9436                           	opt stack 0
  9437                           tblptru	equ	0xFF8
  9438                           tblptrh	equ	0xFF7
  9439                           tblptrl	equ	0xFF6
  9440                           tablat	equ	0xFF5
  9441                           prodh	equ	0xFF4
  9442                           prodl	equ	0xFF3
  9443                           intcon	equ	0xFF2
  9444                           indf0	equ	0xFEF
  9445                           postinc0	equ	0xFEE
  9446                           fsr0h	equ	0xFEA
  9447                           fsr0l	equ	0xFE9
  9448                           wreg	equ	0xFE8
  9449                           postinc1	equ	0xFE6
  9450                           postdec1	equ	0xFE5
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _Lcd_Set_Cursor *****************
  9460 ;; Defined at:
  9461 ;;		line 40 in file "lcd.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  a               1    wreg     unsigned char 
  9464 ;;  b               1   27[COMRAM] unsigned char 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;  a               1   28[COMRAM] unsigned char 
  9467 ;;  temp            1   31[COMRAM] unsigned char 
  9468 ;;  y               1   30[COMRAM] unsigned char 
  9469 ;;  z               1   29[COMRAM] unsigned char 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0, cstack
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9479 ;;      Params:         1       0       0       0       0       0       0       0       0
  9480 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9482 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9483 ;;Total ram usage:        5 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    6
  9486 ;; This function calls:
  9487 ;;		_Lcd_Cmd
  9488 ;; This function is called by:
  9489 ;;		_Inicializa_Driveby
  9490 ;;		_Comando_Tablet
  9491 ;;		_main
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text46
  9496  0023C6                     __ptext46:
  9497                           	opt stack 0
  9498  0023C6                     _Lcd_Set_Cursor:
  9499                           	opt stack 24
  9500                           
  9501                           ;incstack = 0
  9502                           ;Lcd_Set_Cursor@a stored from wreg
  9503  0023C6  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9504                           
  9505                           ;lcd.c: 41: char temp, z, y;
  9506                           ;lcd.c: 42: if (a == 1) {
  9507  0023C8  041D               	decf	Lcd_Set_Cursor@a,w,c
  9508  0023CA  A4D8               	btfss	status,2,c
  9509  0023CC  D010               	goto	l5134
  9510                           
  9511                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9512  0023CE  501C               	movf	Lcd_Set_Cursor@b,w,c
  9513  0023D0  0F7F               	addlw	127
  9514  0023D2  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9515                           
  9516                           ;lcd.c: 44: z = temp >> 4;
  9517  0023D4  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9518  0023D6  0B0F               	andlw	15
  9519  0023D8  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9520                           
  9521                           ;lcd.c: 45: y = temp & 0x0F;
  9522  0023DA  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9523  0023DC  0B0F               	andlw	15
  9524  0023DE  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9525                           
  9526                           ;lcd.c: 46: Lcd_Cmd(z);
  9527  0023E0  501E               	movf	Lcd_Set_Cursor@z,w,c
  9528  0023E2  ECDF  F013         	call	_Lcd_Cmd
  9529                           
  9530                           ;lcd.c: 47: Lcd_Cmd(y);
  9531  0023E6  501F               	movf	Lcd_Set_Cursor@y,w,c
  9532  0023E8  ECDF  F013         	call	_Lcd_Cmd
  9533                           
  9534                           ;lcd.c: 48: } else if (a == 2) {
  9535  0023EC  D013               	goto	l258
  9536  0023EE                     l5134:
  9537  0023EE  501D               	movf	Lcd_Set_Cursor@a,w,c
  9538  0023F0  0A02               	xorlw	2
  9539  0023F2  A4D8               	btfss	status,2,c
  9540  0023F4  D00F               	goto	l258
  9541                           
  9542                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9543  0023F6  501C               	movf	Lcd_Set_Cursor@b,w,c
  9544  0023F8  0FBF               	addlw	191
  9545  0023FA  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9546                           
  9547                           ;lcd.c: 50: z = temp >> 4;
  9548  0023FC  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9549  0023FE  0B0F               	andlw	15
  9550  002400  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9551                           
  9552                           ;lcd.c: 51: y = temp & 0x0F;
  9553  002402  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9554  002404  0B0F               	andlw	15
  9555  002406  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9556                           
  9557                           ;lcd.c: 52: Lcd_Cmd(z);
  9558  002408  501E               	movf	Lcd_Set_Cursor@z,w,c
  9559  00240A  ECDF  F013         	call	_Lcd_Cmd
  9560                           
  9561                           ;lcd.c: 53: Lcd_Cmd(y);
  9562  00240E  501F               	movf	Lcd_Set_Cursor@y,w,c
  9563  002410  ECDF  F013         	call	_Lcd_Cmd
  9564  002414                     l258:
  9565  002414  0012               	return	
  9566  002416                     __end_of_Lcd_Set_Cursor:
  9567                           	opt stack 0
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           indf0	equ	0xFEF
  9576                           postinc0	equ	0xFEE
  9577                           fsr0h	equ	0xFEA
  9578                           fsr0l	equ	0xFE9
  9579                           wreg	equ	0xFE8
  9580                           postinc1	equ	0xFE6
  9581                           postdec1	equ	0xFE5
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function _Lcd_Clear *****************
  9591 ;; Defined at:
  9592 ;;		line 35 in file "lcd.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    6
  9613 ;; This function calls:
  9614 ;;		_Lcd_Cmd
  9615 ;; This function is called by:
  9616 ;;		_Inicializa_Driveby
  9617 ;;		_Comando_Tablet
  9618 ;;		_main
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           	psect	text47
  9623  0028C4                     __ptext47:
  9624                           	opt stack 0
  9625  0028C4                     _Lcd_Clear:
  9626                           	opt stack 24
  9627                           
  9628                           ;lcd.c: 36: Lcd_Cmd(0);
  9629                           
  9630                           ;incstack = 0
  9631  0028C4  0E00               	movlw	0
  9632  0028C6  ECDF  F013         	call	_Lcd_Cmd
  9633                           
  9634                           ;lcd.c: 37: Lcd_Cmd(1);
  9635  0028CA  0E01               	movlw	1
  9636  0028CC  ECDF  F013         	call	_Lcd_Cmd
  9637  0028D0  0012               	return	
  9638  0028D2                     __end_of_Lcd_Clear:
  9639                           	opt stack 0
  9640                           tblptru	equ	0xFF8
  9641                           tblptrh	equ	0xFF7
  9642                           tblptrl	equ	0xFF6
  9643                           tablat	equ	0xFF5
  9644                           prodh	equ	0xFF4
  9645                           prodl	equ	0xFF3
  9646                           intcon	equ	0xFF2
  9647                           indf0	equ	0xFEF
  9648                           postinc0	equ	0xFEE
  9649                           fsr0h	equ	0xFEA
  9650                           fsr0l	equ	0xFE9
  9651                           wreg	equ	0xFE8
  9652                           postinc1	equ	0xFE6
  9653                           postdec1	equ	0xFE5
  9654                           fsr1l	equ	0xFE1
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           fsr2h	equ	0xFDA
  9659                           fsr2l	equ	0xFD9
  9660                           status	equ	0xFD8
  9661                           
  9662 ;; *************** function _Lcd_Cmd *****************
  9663 ;; Defined at:
  9664 ;;		line 27 in file "lcd.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;  a               1    wreg     unsigned char 
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;  a               1   26[COMRAM] unsigned char 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;		None               void
  9671 ;; Registers used:
  9672 ;;		wreg, status,2, cstack
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0
  9679 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9680 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9681 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9682 ;;Total ram usage:        2 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    5
  9685 ;; This function calls:
  9686 ;;		_Lcd_Port
  9687 ;; This function is called by:
  9688 ;;		_Lcd_Clear
  9689 ;;		_Lcd_Set_Cursor
  9690 ;;		_Lcd_Init
  9691 ;;		_Lcd_Shift_Right
  9692 ;;		_Lcd_Shift_Left
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           	psect	text48
  9697  0027BE                     __ptext48:
  9698                           	opt stack 0
  9699  0027BE                     _Lcd_Cmd:
  9700                           	opt stack 24
  9701                           
  9702                           ;incstack = 0
  9703                           ;Lcd_Cmd@a stored from wreg
  9704  0027BE  6E1B               	movwf	Lcd_Cmd@a,c
  9705                           
  9706                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9707  0027C0  9084               	bcf	3972,0,c	;volatile
  9708                           
  9709                           ;lcd.c: 29: Lcd_Port(a);
  9710  0027C2  501B               	movf	Lcd_Cmd@a,w,c
  9711  0027C4  EC7B  F013         	call	_Lcd_Port
  9712                           
  9713                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9714  0027C8  8484               	bsf	3972,2,c	;volatile
  9715                           
  9716                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9717  0027CA  0E06               	movlw	6
  9718  0027CC  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9719  0027CE  0E30               	movlw	48
  9720  0027D0                     u5687:
  9721  0027D0  2EE8               	decfsz	wreg,f,c
  9722  0027D2  D7FE               	goto	u5687
  9723  0027D4  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9724  0027D6  D7FC               	goto	u5687
  9725  0027D8  D000               	nop2	
  9726                           
  9727                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9728  0027DA  9484               	bcf	3972,2,c	;volatile
  9729  0027DC  0012               	return	
  9730  0027DE                     __end_of_Lcd_Cmd:
  9731                           	opt stack 0
  9732                           tblptru	equ	0xFF8
  9733                           tblptrh	equ	0xFF7
  9734                           tblptrl	equ	0xFF6
  9735                           tablat	equ	0xFF5
  9736                           prodh	equ	0xFF4
  9737                           prodl	equ	0xFF3
  9738                           intcon	equ	0xFF2
  9739                           indf0	equ	0xFEF
  9740                           postinc0	equ	0xFEE
  9741                           fsr0h	equ	0xFEA
  9742                           fsr0l	equ	0xFE9
  9743                           wreg	equ	0xFE8
  9744                           postinc1	equ	0xFE6
  9745                           postdec1	equ	0xFE5
  9746                           fsr1l	equ	0xFE1
  9747                           indf2	equ	0xFDF
  9748                           postinc2	equ	0xFDE
  9749                           postdec2	equ	0xFDD
  9750                           fsr2h	equ	0xFDA
  9751                           fsr2l	equ	0xFD9
  9752                           status	equ	0xFD8
  9753                           
  9754 ;; *************** function _Lcd_Port *****************
  9755 ;; Defined at:
  9756 ;;		line 6 in file "lcd.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  a               1    wreg     unsigned char 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  a               1   24[COMRAM] unsigned char 
  9761 ;; Return value:  Size  Location     Type
  9762 ;;		None               void
  9763 ;; Registers used:
  9764 ;;		wreg
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9770 ;;      Params:         0       0       0       0       0       0       0       0       0
  9771 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9773 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9774 ;;Total ram usage:        1 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    4
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_Lcd_Cmd
  9781 ;;		_Lcd_Init
  9782 ;;		_Lcd_Write_Char
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text49
  9787  0026F6                     __ptext49:
  9788                           	opt stack 0
  9789  0026F6                     _Lcd_Port:
  9790                           	opt stack 24
  9791                           
  9792                           ;incstack = 0
  9793                           ;Lcd_Port@a stored from wreg
  9794  0026F6  6E19               	movwf	Lcd_Port@a,c
  9795                           
  9796                           ;lcd.c: 7: if (a & 1)
  9797  0026F8  A019               	btfss	Lcd_Port@a,0,c
  9798  0026FA  D002               	goto	l238
  9799                           
  9800                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9801  0026FC  8883               	bsf	3971,4,c	;volatile
  9802  0026FE  D001               	goto	l4194
  9803  002700                     l238:
  9804                           
  9805                           ;lcd.c: 9: else
  9806                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9807  002700  9883               	bcf	3971,4,c	;volatile
  9808  002702                     l4194:
  9809                           
  9810                           ;lcd.c: 12: if (a & 2)
  9811  002702  A219               	btfss	Lcd_Port@a,1,c
  9812  002704  D002               	goto	l240
  9813                           
  9814                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9815  002706  8A83               	bsf	3971,5,c	;volatile
  9816  002708  D001               	goto	l4198
  9817  00270A                     l240:
  9818                           
  9819                           ;lcd.c: 14: else
  9820                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9821  00270A  9A83               	bcf	3971,5,c	;volatile
  9822  00270C                     l4198:
  9823                           
  9824                           ;lcd.c: 17: if (a & 4)
  9825  00270C  A419               	btfss	Lcd_Port@a,2,c
  9826  00270E  D002               	goto	l242
  9827                           
  9828                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9829  002710  8C83               	bsf	3971,6,c	;volatile
  9830  002712  D001               	goto	l4202
  9831  002714                     l242:
  9832                           
  9833                           ;lcd.c: 19: else
  9834                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9835  002714  9C83               	bcf	3971,6,c	;volatile
  9836  002716                     l4202:
  9837                           
  9838                           ;lcd.c: 22: if (a & 8)
  9839  002716  A619               	btfss	Lcd_Port@a,3,c
  9840  002718  D002               	goto	l244
  9841                           
  9842                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9843  00271A  8E83               	bsf	3971,7,c	;volatile
  9844  00271C  D001               	goto	l246
  9845  00271E                     l244:
  9846                           
  9847                           ;lcd.c: 24: else
  9848                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9849  00271E  9E83               	bcf	3971,7,c	;volatile
  9850  002720                     l246:
  9851  002720  0012               	return	
  9852  002722                     __end_of_Lcd_Port:
  9853                           	opt stack 0
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           prodh	equ	0xFF4
  9859                           prodl	equ	0xFF3
  9860                           intcon	equ	0xFF2
  9861                           indf0	equ	0xFEF
  9862                           postinc0	equ	0xFEE
  9863                           fsr0h	equ	0xFEA
  9864                           fsr0l	equ	0xFE9
  9865                           wreg	equ	0xFE8
  9866                           postinc1	equ	0xFE6
  9867                           postdec1	equ	0xFE5
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           fsr2h	equ	0xFDA
  9873                           fsr2l	equ	0xFD9
  9874                           status	equ	0xFD8
  9875                           
  9876 ;; *************** function _TMRO_USART *****************
  9877 ;; Defined at:
  9878 ;;		line 83 in file "robot.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;		None
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;		None
  9883 ;; Return value:  Size  Location     Type
  9884 ;;		None               void
  9885 ;; Registers used:
  9886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0
  9893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9894 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9895 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9896 ;;Total ram usage:       14 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    3
  9899 ;; This function calls:
  9900 ;;		_ReadUSART
  9901 ;;		i2_Lcd_Clear
  9902 ;;		i2_Lcd_Set_Cursor
  9903 ;;		i2_Lcd_Write_String
  9904 ;; This function is called by:
  9905 ;;		Interrupt level 2
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           	psect	intcode
  9910  000008                     __pintcode:
  9911                           	opt stack 0
  9912  000008                     _TMRO_USART:
  9913                           	opt stack 21
  9914                           
  9915                           ;incstack = 0
  9916  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
  9917  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
  9918  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
  9919  000014  ED71  F00C         	call	int_func,f	;refresh shadow registers
  9920                           pclatu	equ	0xFFB
  9921                           pclath	equ	0xFFA
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           indf0	equ	0xFEF
  9930                           postinc0	equ	0xFEE
  9931                           fsr0h	equ	0xFEA
  9932                           fsr0l	equ	0xFE9
  9933                           wreg	equ	0xFE8
  9934                           postinc1	equ	0xFE6
  9935                           postdec1	equ	0xFE5
  9936                           fsr1l	equ	0xFE1
  9937                           indf2	equ	0xFDF
  9938                           postinc2	equ	0xFDE
  9939                           postdec2	equ	0xFDD
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944                           	psect	intcode_body
  9945  0018E2                     __pintcode_body:
  9946                           	opt stack 21
  9947  0018E2                     int_func:
  9948                           	opt stack 21
  9949  0018E2  0006               	pop		; remove dummy address from shadow register refresh
  9950  0018E4  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
  9951  0018E8  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
  9952  0018EC  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
  9953  0018F0  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
  9954  0018F4  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
  9955  0018F8  CFF3 F013          	movff	prodl,??_TMRO_USART+8
  9956  0018FC  CFF4 F014          	movff	prodh,??_TMRO_USART+9
  9957  001900  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
  9958  001904  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
  9959  001908  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
  9960  00190C  CFF5 F018          	movff	tablat,??_TMRO_USART+13
  9961                           
  9962                           ;robot.c: 88: if (PIR1bits.RCIF) {
  9963  001910  AA9E               	btfss	3998,5,c	;volatile
  9964  001912  D032               	goto	i2l355
  9965                           
  9966                           ;robot.c: 90: BluetoothDato[cad] = ReadUSART();
  9967  001914  503D               	movf	_cad,w,c
  9968  001916  0D01               	mullw	1
  9969  001918  0101               	movlb	1	; () banked
  9970  00191A  0E28               	movlw	low _BluetoothDato
  9971  00191C  24F3               	addwf	prodl,w,c
  9972  00191E  6ED9               	movwf	fsr2l,c
  9973  001920  0101               	movlb	1	; () banked
  9974  001922  0E01               	movlw	high _BluetoothDato
  9975  001924  20F4               	addwfc	prodh,w,c
  9976  001926  6EDA               	movwf	fsr2h,c
  9977  001928  EC1D  F014         	call	_ReadUSART	;wreg free
  9978  00192C  6EDF               	movwf	indf2,c
  9979                           
  9980                           ;robot.c: 91: if (BluetoothDato[cad] == '#') {
  9981  00192E  503D               	movf	_cad,w,c
  9982  001930  0D01               	mullw	1
  9983  001932  0101               	movlb	1	; () banked
  9984  001934  0E28               	movlw	low _BluetoothDato
  9985  001936  24F3               	addwf	prodl,w,c
  9986  001938  6ED9               	movwf	fsr2l,c
  9987  00193A  0101               	movlb	1	; () banked
  9988  00193C  0E01               	movlw	high _BluetoothDato
  9989  00193E  20F4               	addwfc	prodh,w,c
  9990  001940  6EDA               	movwf	fsr2h,c
  9991  001942  0E23               	movlw	35
  9992  001944  62DF               	cpfseq	indf2,c
  9993  001946  D013               	goto	i2l5404
  9994                           
  9995                           ; BSR set to: 1
  9996                           ;robot.c: 92: if (ComanTFlag == 0) {
  9997  001948  6632               	tstfsz	_ComanTFlag,c
  9998  00194A  D007               	goto	i2l5400
  9999                           
 10000                           ; BSR set to: 1
 10001                           ;robot.c: 93: EntTrama = 1;
 10002  00194C  0E01               	movlw	1
 10003  00194E  6E35               	movwf	_EntTrama,c
 10004                           
 10005                           ;robot.c: 94: FinComandT = 0;
 10006  001950  0E00               	movlw	0
 10007  001952  6E37               	movwf	_FinComandT,c
 10008                           
 10009                           ;robot.c: 95: ComanTFlag = 1;
 10010  001954  0E01               	movlw	1
 10011  001956  6E32               	movwf	_ComanTFlag,c
 10012  001958  D00D               	goto	i2u555_40
 10013  00195A                     i2l5400:
 10014                           
 10015                           ; BSR set to: 1
 10016                           ;robot.c: 98: else if (ComanTFlag == 1) {
 10017  00195A  0432               	decf	_ComanTFlag,w,c
 10018  00195C  A4D8               	btfss	status,2,c
 10019  00195E  D01C               	goto	i2l5416
 10020                           
 10021                           ; BSR set to: 1
 10022                           ;robot.c: 99: ComanTFlag = 0;
 10023  001960  0E00               	movlw	0
 10024  001962  6E32               	movwf	_ComanTFlag,c
 10025                           
 10026                           ;robot.c: 100: FinComandT = 1;
 10027  001964  0E01               	movlw	1
 10028  001966  6E37               	movwf	_FinComandT,c
 10029                           
 10030                           ;robot.c: 101: EntTrama = 0;
 10031  001968  0E00               	movlw	0
 10032  00196A  6E35               	movwf	_EntTrama,c
 10033  00196C  D015               	goto	i2l5416
 10034  00196E                     i2l5404:
 10035                           
 10036                           ; BSR set to: 1
 10037                           ;robot.c: 105: else if (EntTrama == 1)
 10038  00196E  0435               	decf	_EntTrama,w,c
 10039  001970  A4D8               	btfss	status,2,c
 10040  001972  D012               	goto	i2l5416
 10041  001974                     i2u555_40:
 10042                           
 10043                           ; BSR set to: 1
 10044                           ;robot.c: 106: cad++;
 10045  001974  2A3D               	incf	_cad,f,c
 10046  001976  D010               	goto	i2l5416
 10047  001978                     i2l355:
 10048                           
 10049                           ;robot.c: 110: else if(PIR1bits.TMR2IF){
 10050  001978  A29E               	btfss	3998,1,c	;volatile
 10051  00197A  D00E               	goto	i2l5416
 10052                           
 10053                           ;robot.c: 111: Lcd_Clear();
 10054  00197C  EC69  F014         	call	i2_Lcd_Clear	;wreg free
 10055                           
 10056                           ;robot.c: 112: Lcd_Set_Cursor(1,1);
 10057  001980  0E01               	movlw	1
 10058  001982  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10059  001984  0E01               	movlw	1
 10060  001986  EC0B  F012         	call	i2_Lcd_Set_Cursor
 10061                           
 10062                           ;robot.c: 113: Lcd_Write_String("Interruption TMR2");
 10063  00198A  0E7F               	movlw	high STR_20
 10064  00198C  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10065  00198E  0E41               	movlw	low STR_20
 10066  001990  6E05               	movwf	i2Lcd_Write_String@a,c
 10067  001992  ECA3  F010         	call	i2_Lcd_Write_String	;wreg free
 10068                           
 10069                           ;robot.c: 114: PIE1bits.TMR2IE = 0;
 10070  001996  929D               	bcf	3997,1,c	;volatile
 10071  001998                     i2l5416:
 10072                           
 10073                           ;robot.c: 115: }
 10074                           ;robot.c: 116: PIR1bits.TMR2IF=0;
 10075  001998  929E               	bcf	3998,1,c	;volatile
 10076                           
 10077                           ;robot.c: 117: PIR1bits.RCIF=0;
 10078  00199A  9A9E               	bcf	3998,5,c	;volatile
 10079  00199C  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10080  0019A0  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10081  0019A4  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10082  0019A8  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10083  0019AC  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10084  0019B0  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10085  0019B4  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10086  0019B8  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10087  0019BC  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10088  0019C0  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10089  0019C4  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10090  0019C8  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10091  0019CC  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10092  0019D0  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10093  0019D4  0011               	retfie		f
 10094  0019D6                     __end_of_TMRO_USART:
 10095                           	opt stack 0
 10096                           pclatu	equ	0xFFB
 10097                           pclath	equ	0xFFA
 10098                           tblptru	equ	0xFF8
 10099                           tblptrh	equ	0xFF7
 10100                           tblptrl	equ	0xFF6
 10101                           tablat	equ	0xFF5
 10102                           prodh	equ	0xFF4
 10103                           prodl	equ	0xFF3
 10104                           intcon	equ	0xFF2
 10105                           indf0	equ	0xFEF
 10106                           postinc0	equ	0xFEE
 10107                           fsr0h	equ	0xFEA
 10108                           fsr0l	equ	0xFE9
 10109                           wreg	equ	0xFE8
 10110                           postinc1	equ	0xFE6
 10111                           postdec1	equ	0xFE5
 10112                           fsr1h	equ	0xFE2
 10113                           fsr1l	equ	0xFE1
 10114                           indf2	equ	0xFDF
 10115                           postinc2	equ	0xFDE
 10116                           postdec2	equ	0xFDD
 10117                           fsr2h	equ	0xFDA
 10118                           fsr2l	equ	0xFD9
 10119                           status	equ	0xFD8
 10120                           
 10121 ;; *************** function i2_Lcd_Write_String *****************
 10122 ;; Defined at:
 10123 ;;		line 90 in file "lcd.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;  a               2    4[COMRAM] PTR unsigned char 
 10126 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
 10127 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
 10128 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
 10129 ;; Auto vars:     Size  Location     Type
 10130 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10131 ;; Return value:  Size  Location     Type
 10132 ;;		None               void
 10133 ;; Registers used:
 10134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10135 ;; Tracked objects:
 10136 ;;		On entry : 0/0
 10137 ;;		On exit  : 0/0
 10138 ;;		Unchanged: 0/0
 10139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10140 ;;      Params:         2       0       0       0       0       0       0       0       0
 10141 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10142 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10143 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10144 ;;Total ram usage:        6 bytes
 10145 ;; Hardware stack levels used:    1
 10146 ;; Hardware stack levels required when called:    2
 10147 ;; This function calls:
 10148 ;;		i2_Lcd_Write_Char
 10149 ;; This function is called by:
 10150 ;;		_TMRO_USART
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           	psect	text51
 10155  002146                     __ptext51:
 10156                           	opt stack 0
 10157  002146                     i2_Lcd_Write_String:
 10158                           	opt stack 21
 10159                           
 10160                           ;lcd.c: 91: int i;
 10161                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10162                           
 10163                           ;incstack = 0
 10164  002146  0E00               	movlw	0
 10165  002148  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10166  00214A  0E00               	movlw	0
 10167  00214C  6E09               	movwf	i2Lcd_Write_String@i,c
 10168  00214E  D01C               	goto	i2l5356
 10169  002150                     i2l5352:
 10170                           
 10171                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10172  002150  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10173  002154  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10174  002158  5009               	movf	i2Lcd_Write_String@i,w,c
 10175  00215A  2607               	addwf	??i2_Lcd_Write_String,f,c
 10176  00215C  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10177  00215E  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10178  002160  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10179  002164  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10180  002168  6AF8               	clrf	tblptru,c
 10181  00216A  0E07               	movlw	(high __ramtop+-1)
 10182  00216C  64F7               	cpfsgt	tblptrh,c
 10183  00216E  D003               	bra	i2u547_47
 10184  002170  0008               	tblrd		*
 10185  002172  50F5               	movf	tablat,w,c
 10186  002174  D005               	bra	i2u547_40
 10187  002176                     i2u547_47:
 10188  002176  CFF6 FFE9          	movff	tblptrl,fsr0l
 10189  00217A  CFF7 FFEA          	movff	tblptrh,fsr0h
 10190  00217E  50EF               	movf	indf0,w,c
 10191  002180                     i2u547_40:
 10192  002180  EC46  F013         	call	i2_Lcd_Write_Char
 10193  002184  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10194  002186  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10195  002188                     i2l5356:
 10196  002188  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10197  00218C  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10198  002190  5009               	movf	i2Lcd_Write_String@i,w,c
 10199  002192  2607               	addwf	??i2_Lcd_Write_String,f,c
 10200  002194  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10201  002196  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10202  002198  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10203  00219C  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10204  0021A0  6AF8               	clrf	tblptru,c
 10205  0021A2  0E07               	movlw	(high __ramtop+-1)
 10206  0021A4  64F7               	cpfsgt	tblptrh,c
 10207  0021A6  D003               	bra	i2u548_47
 10208  0021A8  0008               	tblrd		*
 10209  0021AA  50F5               	movf	tablat,w,c
 10210  0021AC  D005               	bra	i2u548_40
 10211  0021AE                     i2u548_47:
 10212  0021AE  CFF6 FFE9          	movff	tblptrl,fsr0l
 10213  0021B2  CFF7 FFEA          	movff	tblptrh,fsr0h
 10214  0021B6  50EF               	movf	indf0,w,c
 10215  0021B8                     i2u548_40:
 10216  0021B8  0900               	iorlw	0
 10217  0021BA  B4D8               	btfsc	status,2,c
 10218  0021BC  0012               	return	
 10219  0021BE  D7C8               	goto	i2l5352
 10220  0021C0                     __end_ofi2_Lcd_Write_String:
 10221                           	opt stack 0
 10222                           pclatu	equ	0xFFB
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           indf0	equ	0xFEF
 10232                           postinc0	equ	0xFEE
 10233                           fsr0h	equ	0xFEA
 10234                           fsr0l	equ	0xFE9
 10235                           wreg	equ	0xFE8
 10236                           postinc1	equ	0xFE6
 10237                           postdec1	equ	0xFE5
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function i2_Lcd_Write_Char *****************
 10248 ;; Defined at:
 10249 ;;		line 75 in file "lcd.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  a               1    wreg     unsigned char 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  a               1    3[COMRAM] unsigned char 
 10254 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10255 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10256 ;; Return value:  Size  Location     Type
 10257 ;;		None               void
 10258 ;; Registers used:
 10259 ;;		wreg, status,2, status,0, cstack
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0
 10266 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10268 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10269 ;;Total ram usage:        3 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    1
 10272 ;; This function calls:
 10273 ;;		i2_Lcd_Port
 10274 ;; This function is called by:
 10275 ;;		i2_Lcd_Write_String
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text52
 10280  00268C                     __ptext52:
 10281                           	opt stack 0
 10282  00268C                     i2_Lcd_Write_Char:
 10283                           	opt stack 21
 10284                           
 10285                           ;incstack = 0
 10286                           ;i2Lcd_Write_Char@a stored from wreg
 10287  00268C  6E04               	movwf	i2Lcd_Write_Char@a,c
 10288                           
 10289                           ;lcd.c: 76: char temp, y;
 10290                           ;lcd.c: 77: temp = a & 0x0F;
 10291  00268E  5004               	movf	i2Lcd_Write_Char@a,w,c
 10292  002690  0B0F               	andlw	15
 10293  002692  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10294                           
 10295                           ;lcd.c: 78: y = a & 0xF0;
 10296  002694  5004               	movf	i2Lcd_Write_Char@a,w,c
 10297  002696  0BF0               	andlw	240
 10298  002698  6E03               	movwf	i2Lcd_Write_Char@y,c
 10299                           
 10300                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10301  00269A  8084               	bsf	3972,0,c	;volatile
 10302                           
 10303                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10304  00269C  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10305  00269E  0B0F               	andlw	15
 10306  0026A0  EC91  F013         	call	i2_Lcd_Port
 10307                           
 10308                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10309  0026A4  8484               	bsf	3972,2,c	;volatile
 10310                           
 10311                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10312  0026A6  0E0D               	movlw	13
 10313  0026A8                     i2u569_47:
 10314  0026A8  2EE8               	decfsz	wreg,f,c
 10315  0026AA  D7FE               	goto	i2u569_47
 10316  0026AC  F000               	nop	
 10317                           
 10318                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10319  0026AE  9484               	bcf	3972,2,c	;volatile
 10320                           
 10321                           ;lcd.c: 84: Lcd_Port(temp);
 10322  0026B0  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10323  0026B2  EC91  F013         	call	i2_Lcd_Port
 10324                           
 10325                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10326  0026B6  8484               	bsf	3972,2,c	;volatile
 10327                           
 10328                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10329  0026B8  0E0D               	movlw	13
 10330  0026BA                     i2u570_47:
 10331  0026BA  2EE8               	decfsz	wreg,f,c
 10332  0026BC  D7FE               	goto	i2u570_47
 10333  0026BE  F000               	nop	
 10334                           
 10335                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10336  0026C0  9484               	bcf	3972,2,c	;volatile
 10337  0026C2  0012               	return	
 10338  0026C4                     __end_ofi2_Lcd_Write_Char:
 10339                           	opt stack 0
 10340                           pclatu	equ	0xFFB
 10341                           pclath	equ	0xFFA
 10342                           tblptru	equ	0xFF8
 10343                           tblptrh	equ	0xFF7
 10344                           tblptrl	equ	0xFF6
 10345                           tablat	equ	0xFF5
 10346                           prodh	equ	0xFF4
 10347                           prodl	equ	0xFF3
 10348                           intcon	equ	0xFF2
 10349                           indf0	equ	0xFEF
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           postinc1	equ	0xFE6
 10355                           postdec1	equ	0xFE5
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365 ;; *************** function i2_Lcd_Set_Cursor *****************
 10366 ;; Defined at:
 10367 ;;		line 40 in file "lcd.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;  a               1    wreg     unsigned char 
 10370 ;;  b               1    3[COMRAM] unsigned char 
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;  a               1    4[COMRAM] unsigned char 
 10373 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10374 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10375 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;		None               void
 10378 ;; Registers used:
 10379 ;;		wreg, status,2, status,0, cstack
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10385 ;;      Params:         1       0       0       0       0       0       0       0       0
 10386 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10388 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10389 ;;Total ram usage:        5 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    2
 10392 ;; This function calls:
 10393 ;;		i2_Lcd_Cmd
 10394 ;; This function is called by:
 10395 ;;		_TMRO_USART
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text53
 10400  002416                     __ptext53:
 10401                           	opt stack 0
 10402  002416                     i2_Lcd_Set_Cursor:
 10403                           	opt stack 21
 10404                           
 10405                           ;incstack = 0
 10406                           ;i2Lcd_Set_Cursor@a stored from wreg
 10407  002416  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10408                           
 10409                           ;lcd.c: 41: char temp, z, y;
 10410                           ;lcd.c: 42: if (a == 1) {
 10411  002418  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10412  00241A  A4D8               	btfss	status,2,c
 10413  00241C  D010               	goto	i2l5342
 10414                           
 10415                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10416  00241E  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10417  002420  0F7F               	addlw	127
 10418  002422  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10419                           
 10420                           ;lcd.c: 44: z = temp >> 4;
 10421  002424  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10422  002426  0B0F               	andlw	15
 10423  002428  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10424                           
 10425                           ;lcd.c: 45: y = temp & 0x0F;
 10426  00242A  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10427  00242C  0B0F               	andlw	15
 10428  00242E  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10429                           
 10430                           ;lcd.c: 46: Lcd_Cmd(z);
 10431  002430  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10432  002432  ECEF  F013         	call	i2_Lcd_Cmd
 10433                           
 10434                           ;lcd.c: 47: Lcd_Cmd(y);
 10435  002436  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10436  002438  ECEF  F013         	call	i2_Lcd_Cmd
 10437                           
 10438                           ;lcd.c: 48: } else if (a == 2) {
 10439  00243C  D013               	goto	i2l258
 10440  00243E                     i2l5342:
 10441  00243E  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10442  002440  0A02               	xorlw	2
 10443  002442  A4D8               	btfss	status,2,c
 10444  002444  D00F               	goto	i2l258
 10445                           
 10446                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10447  002446  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10448  002448  0FBF               	addlw	191
 10449  00244A  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10450                           
 10451                           ;lcd.c: 50: z = temp >> 4;
 10452  00244C  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10453  00244E  0B0F               	andlw	15
 10454  002450  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10455                           
 10456                           ;lcd.c: 51: y = temp & 0x0F;
 10457  002452  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10458  002454  0B0F               	andlw	15
 10459  002456  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10460                           
 10461                           ;lcd.c: 52: Lcd_Cmd(z);
 10462  002458  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10463  00245A  ECEF  F013         	call	i2_Lcd_Cmd
 10464                           
 10465                           ;lcd.c: 53: Lcd_Cmd(y);
 10466  00245E  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10467  002460  ECEF  F013         	call	i2_Lcd_Cmd
 10468  002464                     i2l258:
 10469  002464  0012               	return	
 10470  002466                     __end_ofi2_Lcd_Set_Cursor:
 10471                           	opt stack 0
 10472                           pclatu	equ	0xFFB
 10473                           pclath	equ	0xFFA
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           intcon	equ	0xFF2
 10481                           indf0	equ	0xFEF
 10482                           postinc0	equ	0xFEE
 10483                           fsr0h	equ	0xFEA
 10484                           fsr0l	equ	0xFE9
 10485                           wreg	equ	0xFE8
 10486                           postinc1	equ	0xFE6
 10487                           postdec1	equ	0xFE5
 10488                           fsr1h	equ	0xFE2
 10489                           fsr1l	equ	0xFE1
 10490                           indf2	equ	0xFDF
 10491                           postinc2	equ	0xFDE
 10492                           postdec2	equ	0xFDD
 10493                           fsr2h	equ	0xFDA
 10494                           fsr2l	equ	0xFD9
 10495                           status	equ	0xFD8
 10496                           
 10497 ;; *************** function i2_Lcd_Clear *****************
 10498 ;; Defined at:
 10499 ;;		line 35 in file "lcd.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;		None               void
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, cstack
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    2
 10520 ;; This function calls:
 10521 ;;		i2_Lcd_Cmd
 10522 ;; This function is called by:
 10523 ;;		_TMRO_USART
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text54
 10528  0028D2                     __ptext54:
 10529                           	opt stack 0
 10530  0028D2                     i2_Lcd_Clear:
 10531                           	opt stack 21
 10532                           
 10533                           ;lcd.c: 36: Lcd_Cmd(0);
 10534                           
 10535                           ;incstack = 0
 10536  0028D2  0E00               	movlw	0
 10537  0028D4  ECEF  F013         	call	i2_Lcd_Cmd
 10538                           
 10539                           ;lcd.c: 37: Lcd_Cmd(1);
 10540  0028D8  0E01               	movlw	1
 10541  0028DA  ECEF  F013         	call	i2_Lcd_Cmd
 10542  0028DE  0012               	return	
 10543  0028E0                     __end_ofi2_Lcd_Clear:
 10544                           	opt stack 0
 10545                           pclatu	equ	0xFFB
 10546                           pclath	equ	0xFFA
 10547                           tblptru	equ	0xFF8
 10548                           tblptrh	equ	0xFF7
 10549                           tblptrl	equ	0xFF6
 10550                           tablat	equ	0xFF5
 10551                           prodh	equ	0xFF4
 10552                           prodl	equ	0xFF3
 10553                           intcon	equ	0xFF2
 10554                           indf0	equ	0xFEF
 10555                           postinc0	equ	0xFEE
 10556                           fsr0h	equ	0xFEA
 10557                           fsr0l	equ	0xFE9
 10558                           wreg	equ	0xFE8
 10559                           postinc1	equ	0xFE6
 10560                           postdec1	equ	0xFE5
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function i2_Lcd_Cmd *****************
 10571 ;; Defined at:
 10572 ;;		line 27 in file "lcd.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  a               1    wreg     unsigned char 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  a               1    2[COMRAM] unsigned char 
 10577 ;; Return value:  Size  Location     Type
 10578 ;;		None               void
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, cstack
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10586 ;;      Params:         0       0       0       0       0       0       0       0       0
 10587 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10588 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10589 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10590 ;;Total ram usage:        2 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; Hardware stack levels required when called:    1
 10593 ;; This function calls:
 10594 ;;		i2_Lcd_Port
 10595 ;; This function is called by:
 10596 ;;		i2_Lcd_Clear
 10597 ;;		i2_Lcd_Set_Cursor
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           	psect	text55
 10602  0027DE                     __ptext55:
 10603                           	opt stack 0
 10604  0027DE                     i2_Lcd_Cmd:
 10605                           	opt stack 21
 10606                           
 10607                           ;incstack = 0
 10608                           ;i2Lcd_Cmd@a stored from wreg
 10609  0027DE  6E03               	movwf	i2Lcd_Cmd@a,c
 10610                           
 10611                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10612  0027E0  9084               	bcf	3972,0,c	;volatile
 10613                           
 10614                           ;lcd.c: 29: Lcd_Port(a);
 10615  0027E2  5003               	movf	i2Lcd_Cmd@a,w,c
 10616  0027E4  EC91  F013         	call	i2_Lcd_Port
 10617                           
 10618                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10619  0027E8  8484               	bsf	3972,2,c	;volatile
 10620                           
 10621                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10622  0027EA  0E06               	movlw	6
 10623  0027EC  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10624  0027EE  0E30               	movlw	48
 10625  0027F0                     i2u571_47:
 10626  0027F0  2EE8               	decfsz	wreg,f,c
 10627  0027F2  D7FE               	goto	i2u571_47
 10628  0027F4  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10629  0027F6  D7FC               	goto	i2u571_47
 10630  0027F8  D000               	nop2	
 10631                           
 10632                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10633  0027FA  9484               	bcf	3972,2,c	;volatile
 10634  0027FC  0012               	return	
 10635  0027FE                     __end_ofi2_Lcd_Cmd:
 10636                           	opt stack 0
 10637                           pclatu	equ	0xFFB
 10638                           pclath	equ	0xFFA
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           indf0	equ	0xFEF
 10647                           postinc0	equ	0xFEE
 10648                           fsr0h	equ	0xFEA
 10649                           fsr0l	equ	0xFE9
 10650                           wreg	equ	0xFE8
 10651                           postinc1	equ	0xFE6
 10652                           postdec1	equ	0xFE5
 10653                           fsr1h	equ	0xFE2
 10654                           fsr1l	equ	0xFE1
 10655                           indf2	equ	0xFDF
 10656                           postinc2	equ	0xFDE
 10657                           postdec2	equ	0xFDD
 10658                           fsr2h	equ	0xFDA
 10659                           fsr2l	equ	0xFD9
 10660                           status	equ	0xFD8
 10661                           
 10662 ;; *************** function i2_Lcd_Port *****************
 10663 ;; Defined at:
 10664 ;;		line 6 in file "lcd.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  a               1    wreg     unsigned char 
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;  a               1    0[COMRAM] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;		None               void
 10671 ;; Registers used:
 10672 ;;		wreg
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10678 ;;      Params:         0       0       0       0       0       0       0       0       0
 10679 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10680 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10681 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10682 ;;Total ram usage:        1 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		i2_Lcd_Cmd
 10688 ;;		i2_Lcd_Write_Char
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           	psect	text56
 10693  002722                     __ptext56:
 10694                           	opt stack 0
 10695  002722                     i2_Lcd_Port:
 10696                           	opt stack 21
 10697                           
 10698                           ;incstack = 0
 10699                           ;i2Lcd_Port@a stored from wreg
 10700  002722  6E01               	movwf	i2Lcd_Port@a,c
 10701                           
 10702                           ;lcd.c: 7: if (a & 1)
 10703  002724  A001               	btfss	i2Lcd_Port@a,0,c
 10704  002726  D002               	goto	i2l238
 10705                           
 10706                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10707  002728  8883               	bsf	3971,4,c	;volatile
 10708  00272A  D001               	goto	i2l5050
 10709  00272C                     i2l238:
 10710                           
 10711                           ;lcd.c: 9: else
 10712                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10713  00272C  9883               	bcf	3971,4,c	;volatile
 10714  00272E                     i2l5050:
 10715                           
 10716                           ;lcd.c: 12: if (a & 2)
 10717  00272E  A201               	btfss	i2Lcd_Port@a,1,c
 10718  002730  D002               	goto	i2l240
 10719                           
 10720                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10721  002732  8A83               	bsf	3971,5,c	;volatile
 10722  002734  D001               	goto	i2l5054
 10723  002736                     i2l240:
 10724                           
 10725                           ;lcd.c: 14: else
 10726                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10727  002736  9A83               	bcf	3971,5,c	;volatile
 10728  002738                     i2l5054:
 10729                           
 10730                           ;lcd.c: 17: if (a & 4)
 10731  002738  A401               	btfss	i2Lcd_Port@a,2,c
 10732  00273A  D002               	goto	i2l242
 10733                           
 10734                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10735  00273C  8C83               	bsf	3971,6,c	;volatile
 10736  00273E  D001               	goto	i2l5058
 10737  002740                     i2l242:
 10738                           
 10739                           ;lcd.c: 19: else
 10740                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10741  002740  9C83               	bcf	3971,6,c	;volatile
 10742  002742                     i2l5058:
 10743                           
 10744                           ;lcd.c: 22: if (a & 8)
 10745  002742  A601               	btfss	i2Lcd_Port@a,3,c
 10746  002744  D002               	goto	i2l244
 10747                           
 10748                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10749  002746  8E83               	bsf	3971,7,c	;volatile
 10750  002748  D001               	goto	i2l246
 10751  00274A                     i2l244:
 10752                           
 10753                           ;lcd.c: 24: else
 10754                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10755  00274A  9E83               	bcf	3971,7,c	;volatile
 10756  00274C                     i2l246:
 10757  00274C  0012               	return	
 10758  00274E                     __end_ofi2_Lcd_Port:
 10759                           	opt stack 0
 10760                           pclatu	equ	0xFFB
 10761                           pclath	equ	0xFFA
 10762                           tblptru	equ	0xFF8
 10763                           tblptrh	equ	0xFF7
 10764                           tblptrl	equ	0xFF6
 10765                           tablat	equ	0xFF5
 10766                           prodh	equ	0xFF4
 10767                           prodl	equ	0xFF3
 10768                           intcon	equ	0xFF2
 10769                           indf0	equ	0xFEF
 10770                           postinc0	equ	0xFEE
 10771                           fsr0h	equ	0xFEA
 10772                           fsr0l	equ	0xFE9
 10773                           wreg	equ	0xFE8
 10774                           postinc1	equ	0xFE6
 10775                           postdec1	equ	0xFE5
 10776                           fsr1h	equ	0xFE2
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           
 10785 ;; *************** function _ReadUSART *****************
 10786 ;; Defined at:
 10787 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;		None
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  data            1    0[COMRAM] unsigned char 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      unsigned char 
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, status,0
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0
 10802 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10803 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10804 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10805 ;;Total ram usage:        1 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_TMRO_USART
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text57
 10815  00283A                     __ptext57:
 10816                           	opt stack 0
 10817  00283A                     _ReadUSART:
 10818                           	opt stack 23
 10819                           
 10820                           ;incstack = 0
 10821  00283A  0EF2               	movlw	242
 10822  00283C  163C               	andwf	_USART_Status,f,c
 10823  00283E  ACAB               	btfss	4011,6,c	;volatile
 10824  002840  D003               	goto	i2l589
 10825  002842  903C               	bcf	_USART_Status,0,c
 10826  002844  B0AB               	btfsc	4011,0,c	;volatile
 10827  002846  803C               	bsf	_USART_Status,0,c
 10828  002848                     i2l589:
 10829  002848  B4AB               	btfsc	4011,2,c	;volatile
 10830  00284A  843C               	bsf	_USART_Status,2,c
 10831  00284C  B2AB               	btfsc	4011,1,c	;volatile
 10832  00284E  863C               	bsf	_USART_Status,3,c
 10833  002850  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 10834  002854  5001               	movf	ReadUSART@data,w,c
 10835  002856  0012               	return	
 10836  002858                     __end_of_ReadUSART:
 10837                           	opt stack 0
 10838                           pclatu	equ	0xFFB
 10839                           pclath	equ	0xFFA
 10840                           tblptru	equ	0xFF8
 10841                           tblptrh	equ	0xFF7
 10842                           tblptrl	equ	0xFF6
 10843                           tablat	equ	0xFF5
 10844                           prodh	equ	0xFF4
 10845                           prodl	equ	0xFF3
 10846                           intcon	equ	0xFF2
 10847                           indf0	equ	0xFEF
 10848                           postinc0	equ	0xFEE
 10849                           fsr0h	equ	0xFEA
 10850                           fsr0l	equ	0xFE9
 10851                           wreg	equ	0xFE8
 10852                           postinc1	equ	0xFE6
 10853                           postdec1	equ	0xFE5
 10854                           fsr1h	equ	0xFE2
 10855                           fsr1l	equ	0xFE1
 10856                           indf2	equ	0xFDF
 10857                           postinc2	equ	0xFDE
 10858                           postdec2	equ	0xFDD
 10859                           fsr2h	equ	0xFDA
 10860                           fsr2l	equ	0xFD9
 10861                           status	equ	0xFD8
 10862                           pclatu	equ	0xFFB
 10863                           pclath	equ	0xFFA
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           indf0	equ	0xFEF
 10872                           postinc0	equ	0xFEE
 10873                           fsr0h	equ	0xFEA
 10874                           fsr0l	equ	0xFE9
 10875                           wreg	equ	0xFE8
 10876                           postinc1	equ	0xFE6
 10877                           postdec1	equ	0xFE5
 10878                           fsr1h	equ	0xFE2
 10879                           fsr1l	equ	0xFE1
 10880                           indf2	equ	0xFDF
 10881                           postinc2	equ	0xFDE
 10882                           postdec2	equ	0xFDD
 10883                           fsr2h	equ	0xFDA
 10884                           fsr2l	equ	0xFD9
 10885                           status	equ	0xFD8
 10886                           
 10887                           	psect	rparam
 10888  0000                     pclatu	equ	0xFFB
 10889                           pclath	equ	0xFFA
 10890                           tblptru	equ	0xFF8
 10891                           tblptrh	equ	0xFF7
 10892                           tblptrl	equ	0xFF6
 10893                           tablat	equ	0xFF5
 10894                           prodh	equ	0xFF4
 10895                           prodl	equ	0xFF3
 10896                           intcon	equ	0xFF2
 10897                           indf0	equ	0xFEF
 10898                           postinc0	equ	0xFEE
 10899                           fsr0h	equ	0xFEA
 10900                           fsr0l	equ	0xFE9
 10901                           wreg	equ	0xFE8
 10902                           postinc1	equ	0xFE6
 10903                           postdec1	equ	0xFE5
 10904                           fsr1h	equ	0xFE2
 10905                           fsr1l	equ	0xFE1
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           fsr2h	equ	0xFDA
 10910                           fsr2l	equ	0xFD9
 10911                           status	equ	0xFD8


Data Sizes:
    Strings     189
    Constant    118
    Data        20
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160     90     142
    BANK1           256     22     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_19(CODE[13]), STR_18(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK1[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1226$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[11]), STR_21(CODE[7]), STR_20(CODE[18]), Lcd_Write_Integer@s(BANK1[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_17(CODE[8]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124649
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5136
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       0     0      0  116186
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0      2     0      2
                                              0 BANK1     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1129
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    1177
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     419
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     254
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     580
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     155
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     155
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0     124
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      70       7       43.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     145      20        0.0%
DATA                 0      0     145       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jun 07 01:25:01 2017

                            _i 00C4                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 2652                             l59 2264  
                           l68 1F22                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l214 28BE                            l240 270A  
                          l242 2714                            l244 271E                            l246 2720  
                          l238 2700                            l193 26E8                            l258 2414  
                          l437 0DB6                            l537 2558                            l538 2562  
                          l539 2564                            l571 22BE                            l484 0592  
                          l580 2302                            l575 22D2                            l576 22D4  
                          l577 22DE                            l930 1B36                            l578 22E0  
                          l971 1104                            l973 112C                            l982 1216  
                          l991 1240                            l967 10CA                            l968 12DC  
                          l889 16B4                            l898 16A4                   __CFG_CPB$OFF 000000  
                          _PR2 000FCB                   __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000  
                          _cad 003D                   ___awmod@sign 001E                            prod 000FF3  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l1010 1878                           l1100 2358                           l1007 18E0  
                         l1031 1434                           l1016 18D0                           l1025 1ECA  
                         l1041 278C                           l1009 1850                           l1051 157E  
                         l1090 1FC2                           l4202 2716                           l5010 084C  
                         l5002 0808                           l4220 10D8                           l5020 0932  
                         l5030 210E                           l4232 1122                           l4312 13A0  
                         l5016 08FA                           l5008 0838                           l4152 288E  
                         l5112 1F08                           l5026 20D6                           l4170 1AEC  
                         l4162 1AAE                           l4250 11AC                           l4242 1164  
                         l4226 1112                           l4402 1E24                           l4322 13EA  
                         l5018 090E                           l3610 2554                           l4172 1B0A  
                         l4164 1AB8                           l4260 11F8                           l4252 11B8  
                         l4308 1382                           l5116 1F2C                           l5300 17DC  
                         l4412 1D22                           l5134 23EE                           l4174 1B14  
                         l4166 1AD6                           l4158 1AA0                           l4262 120C  
                         l4254 11C4                           l4350 1C38                           l4406 1E32  
                         l4318 13CC                           l4422 1D78                           l4248 1198  
                         l4352 1C40                           l4344 1C22                           l4432 26D6  
                         l5216 1A40                           l4194 2702                           l4610 18A8  
                         l4370 1C78                           l4362 1C60                           l4354 1C44  
                         l4338 1C02                           l5242 16B8                           l4418 1D60  
                         l4268 126A                           l4524 100A                           l4516 0F26  
                         l5260 170C                           l4428 1DA2                           l4198 270C  
                         l4278 12B8                           l4606 1898                           l4366 1C6A  
                         l4390 1DFA                           l4382 1DD0                           l4294 1334  
                         l4454 22C0                           l4446 22B2                           l5094 2242  
                         l5254 16F0                           l4712 145E                           l4632 15D8  
                         l4616 18C0                           l4392 1E02                           l4288 1300  
                         l4544 0B5C                           l5272 1746                           l5248 16D4  
                         l4730 14EC                           l4626 15AC                           l4618 18CC  
                         l4394 1E06                           l4386 1DEC                           l4562 0D86  
                         l4538 0A9A                           l5098 226C                           l5290 179C  
                         l5442 1CC8                           l4740 152A                           l4572 17FC  
                         l4556 0CB8                           l4548 0B6C                           l4900 03B8  
                         l4804 24BC                           l5436 1CBA                           l4742 1542  
                         l4734 1508                           l4654 164A                           l4646 161A  
                         l4398 1E1A                           l4830 00A2                           l4822 0052  
                         l5462 1D02                           l4744 1548                           l4760 1F80  
                         l4664 166C                           l4904 0420                           l4824 0060  
                         l4816 0030                           l4808 24EE                           l4770 1FB4  
                         l4762 1F84                           l4674 1694                           l4578 1816  
                         l5298 17B8                           l4692 1E9C                           l4748 156E  
                         l4780 2322                           l4676 16A0                           l4668 167C  
                         l4940 0562                           l4924 049C                           l4932 053A  
                         l4860 01E4                           l4844 011C                           l4828 0066  
                         l4758 1F74                           l4782 2326                           l4934 0548  
                         l4918 0472                           l4688 1E6C                           l4792 2370  
                         l4872 0272                           l4698 1EC8                           l4786 234A  
                         l4778 2316                           l4794 237C                           l4970 0716  
                         l4954 05C4                           l4946 0596                           l4884 0320  
                         l4876 02B8                           l4868 024C                           l4958 0616  
                         l4976 0730                           l4968 0708                           l4888 0346  
                         l4978 073C                           l4988 07B6                           STR_1 7FB7  
                         STR_2 7F63                           STR_3 7FD9                           STR_4 7FD9  
                         STR_5 7FB4                           STR_6 7F72                           STR_7 7F80  
                         STR_8 7F9C                           STR_9 7F8E                __end_of_BT_Init 1BDE  
                         u4211 1314                           u4220 1320                           u5020 016C  
                         u5005 00F6                           _PIE1 000F9D                           u4400 1D98  
                         u5025 0160                           u3425 2578                           u5300 213E  
                         u4191 12F2                           u4407 1D8E                           u4601 17F2  
                         u5225 078E                           u4370 1D56                           u5307 2134  
                         u3395 25B2                           u4621 180C                           u4710 15CA  
                         u4377 1D4C                           u5361 1B4E                           u5290 2106  
                         u4715 15C0                           u4821 144E                           u4670 18AE  
                         u5607 21CC                           u4840 148A                           u4760 1682  
                         u5297 20FC                           u5617 21E2                           u4690 159E  
                         u5627 21F8                           u3981 1076                           u4845 1480  
                         u5637 19F8                           u4870 1510                           u3991 1096  
                         u4695 1594                           u5647 1A30                           u5657 26DC  
                         u5667 2670                           u5677 2682                           u5687 27D0  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1C82  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1239 0098                   _sprintf$2290 0095                __end_of_Lcd_Cmd 27DE  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 25E2                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1C82                __end_of___ftadd 12DE  
                        STR_10 7FF1                          STR_11 7F53                          STR_12 7FF8  
                        STR_20 7F41                          STR_13 7F51                          STR_21 7FEA  
                        STR_14 7FFA                          STR_22 7FC3                          STR_15 7FFC  
                        STR_16 7F70                          STR_17 7FE2                          STR_18 7FCE  
                        STR_19 7FAA                __end_of___awmod 1E3C                __end_of___ftneg 279A  
              __end_of___lldiv 1FD4                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 236A                __end_of___ftsub 2534                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l240 2736                          i2l242 2740  
                        i2l244 274A                          i2l246 274C                          i2l238 272C  
                        i2l258 2464                          i2l355 1978                          i2l589 2848  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF3                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 2416                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 2232                 WriteUSART@data 0019               __end_of_Lcd_Port 2722  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 2466  
                 __end_of_main 1D18      __end_of_Lcd_Write_Integer 261C    __size_of_Inicializa_Driveby 00BA  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 28A6               __end_of_OpenPWM2 256E  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 26F6  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1B38               __end_of___lbtoft 27BE                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 23C6  
                       i2l5050 272E                         i2l5054 2738                         i2l5400 195A  
                       i2l5058 2742                         i2l5404 196E                         i2l5342 243E  
                       i2l5352 2150                         i2l5416 1998                         i2l5356 2188  
                       _INTCON 000FF2             __size_of_ReadUSART 001E            _putcBluetoothString 2232  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F41                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1E3C  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 27FE                         ___wmul 274E  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 2050                 _PWM_DutyCycle2 1FD4                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 246C                         clear_1 2478  
                       clear_2 2484               ___awdiv@quotient 0025                 sprintf@vd_1241 00A0  
         ?_putcBluetoothString 0020                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 268C          ___ftmul@f3_as_product 0067                   __mediumconst 7ECA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19CE              __end_of_PWM_init1 283A              __end_of_PWM_init2 281C  
             __end_of_putcTxU1 28C4                      ??_sprintf 008F        __size_of_Comando_Tablet 012C  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 24AA  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 28D2                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 20CC         __end_of_PWM_DutyCycle2 2050                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 2882                 __pcstackCOMRAM 0001  
                 __pidataBANK0 286E     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 261C                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 2858              __end_of_SetDCPWM1 25E2  
            __end_of_SetDCPWM2 25A8              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 23C6                     __div_to_l_ 1580                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 2304                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 24F8                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00BA                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 2654  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
                      _CCP1CON 000FBD                        _CCP2CON 000FBA           i2Lcd_Set_Cursor@temp 0008  
  SendBlueToothCommand@command 0023                        ?_fround 006C      __size_of_Lcd_Write_String 007A  
                    ?___ftpack 0019                      ?___lbtoft 0021         __end_of_Lcd_Set_Cursor 2416  
                    ?___lltoft 0021               putSTRINGU1@total 001D       __end_ofi2_Lcd_Set_Cursor 2466  
                      _BT_Init 1B38                        _SBUSART 003A                     ??_Lcd_Init 001C  
                 ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019                     _contadorbt 00C2  
           __end_of_UART1_Init 28B6                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 2654  
                      _Lcd_Cmd 27BE                        _Comando 0033                        _Med_lsb 00BC  
                      _Med_msb 00BE                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1A  
                      __Hparam 0000                     _scale$2289 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1BDE                        ___ftadd 105E                        ___awmod 1DAC  
                    ?_putcTxU1 0001                        ___ftneg 2774                        ___lldiv 1F52  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 2304  
                      ___ftsub 24F8                        ___fttol 1436             __end_ofi2_Lcd_Port 274E  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 2466                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5669 00DA                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1C82                        __ptext1 21C0  
                      __ptext2 19D6                        __ptext3 1B38                        __ptext4 2858  
                      __ptext5 1D18                        __ptext6 28B6                        __ptext7 24B0  
                      __ptext8 26C4                        __ptext9 16B6                        _comando 00C6  
                  ?__div_to_l_ 0019                        _countup 00EC                        _dpowers 7ECB  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19D6  
               _Comando_Tablet 16B6                        _sprintf 001C         __end_of_Lcd_Write_Char 268C  
               __pintcode_body 18E2           end_of_initialization 24AA                    _TramaTablet 0100  
    __size_of_putcBluetoothInt 0086                        int_func 18E2       __end_ofi2_Lcd_Write_Char 26C4  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                      _RCSTAbits 000FAB  
   __end_of_Inicializa_Driveby 1A90                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0019                     ??_putcTxU1 001A                     _num_med_hi 0043  
               __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F  
                    i2_Lcd_Cmd 27DE                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 17E2   __end_of_SendBlueToothCommand 286E                      _TRISBbits 000F93  
                    _TRISCbits 000F94            __size_of_WriteUSART 0012                ?_Lcd_Write_Char 0001  
            Lcd_Write_String@a 001D              Lcd_Write_String@i 0021                      _PWM_init1 281C  
                    _PWM_init2 27FE                      _TXSTAbits 000FAC            __size_of__div_to_l_ 0136  
                  ___ftmul@exp 0066                      _Lcd_Clear 28C4                 __end_of___ftge 1ECC  
               __end_of___wmul 2774               _Lcd_Write_String 20CC                     ?i2_Lcd_Cmd 0001  
               __end_of_fround 105E            start_initialization 2466                      Pause_ms@i 001C  
                    Pause_ms@x 0019                ?_Comando_Tablet 0001                      _ReadUSART 283A  
                    _SetDCPWM1 25A8                      _SetDCPWM2 256E                SetDCPWM1@DCycle 001D  
          __end_of__tdiv_to_l_ 18E2                SetDCPWM2@DCycle 001D                      _DutyCycle 00BA  
            __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C                     ?_PWM_init1 0001  
                   ?_PWM_init2 0001                      _OpenUSART 229C               ??_PWM_DutyCycle1 0082  
             ??_PWM_DutyCycle2 0082                      _Pause_seg 24B0                ___llmod@divisor 002A  
              ___llmod@counter 002E    __end_of_putcBluetoothString 229C              __size_of_OpenPWM1 0012  
            __size_of_OpenPWM2 003A              __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001  
                     ??___ftge 001F     __end_ofi2_Lcd_Write_String 21C0                       ??___wmul 002B  
                  __pdataBANK0 00DA               __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C  
              Lcd_Write_Char@y 001B                       ??_fround 0030                 _num_med_medium 0045  
                   fround@prec 0075              __size_of___ftpack 00A8              __size_of___lbtoft 0024  
            __size_of___lltoft 005C                    __pbssCOMRAM 0030                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019  
          __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1ECC  
                   ?_OpenUSART 0019                       ?_Lcd_Cmd 0001                    sprintf@_val 00AD  
                  sprintf@flag 00A6               ??_clrBufferUSART 0019                     ?_Pause_seg 0001  
                  sprintf@fval 00B4                    sprintf@prec 00AB                      _cleanBfer 003E  
                 ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 2858  
                    __pintcode 0008                  __pmediumconst 7ECA                       ?___awdiv 001F  
                     ?___ftadd 0076                       ?___awmod 0019                       ?___ftneg 0019  
                     ?___lldiv 0019                       ?___ftmul 0060                       ?___llmod 0026  
                     ?___ftsub 0082                      __npowers_ 7EF3                       ?___fttol 0073  
            putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E  
                  __tdiv_to_l_ 17E2                      _contador2 0040                   ??__div_to_l_ 001F  
    SendBlueToothCommand@total 0025                   _TamanhoTrama 00C0                       ?_sprintf 0088  
               __size_of_scale 0478             __end_of_WriteUSART 2894                    ??_PWM_init1 001A  
                  ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034  
               ___wmul@product 002B              ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 001B                       _PIR1bits 000F9E             __end_of__div_to_l_ 16B6  
           ??i2_Lcd_Write_Char 0002                       i2u570_47 26BA                       i2u547_40 2180  
                     i2u555_40 1974                       i2u571_47 27F0                       i2u547_47 2176  
                     i2u548_40 21B8          ?_SendBlueToothCommand 0023                       i2u548_47 21AE  
                     i2u569_47 26A8                  ??i2_Lcd_Clear 0004                    ??_Lcd_Clear 001C  
             __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F                     _ADCON1bits 000FC1  
                  __stringdata 7F41              ___wmul@multiplier 0027                       _CheckSum 0030  
             ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001             _Inicializa_Driveby 19D6  
                  ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 21C0                       _Lcd_Port 26F6                      copy_data0 249E  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 2146                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 2894                       _OpenPWM2 2534  
                     _Pause_ms 26C4                       __Hrparam 0000                       __Lrparam 0000  
           SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4               __size_of___ftadd 0280  
             __size_of___awmod 0090           ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089  
             PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1A90  
                     ___lbtoft 279A                    _fround$2287 0072                    _fround$2288 006F  
                     ___lltoft 236A            __end_ofi2_Lcd_Clear 28E0                 OpenPWM2@ccp2mx 001B  
        __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1DAC                     sprintf@exp 00B2  
               OpenPWM1@period 0019                 OpenPWM2@period 001A                       __ptext10 2232  
                     __ptext11 1ECC                       __ptext20 1FD4                       __ptext12 2882  
                     __ptext21 256E                       __ptext13 28A6                       __ptext30 12DE  
                     __ptext22 2050                       __ptext14 229C                       __ptext31 1DAC  
                     __ptext23 279A                       __ptext15 261C                       __ptext40 105E  
                     __ptext32 1BDE                       __ptext24 25A8                       __ptext16 27FE  
                     __ptext41 1A90                       __ptext33 17E2                       __ptext25 25E2  
                     __ptext17 2534                       __ptext42 2774                       __ptext34 1580  
                     __ptext26 001C                       __ptext18 281C                       __ptext51 2146  
                     __ptext43 1E3C                       __ptext35 236A                       __ptext27 0940  
                     __ptext19 2894                       __ptext52 268C                       __ptext44 20CC  
                     __ptext36 2304                       __ptext28 0DB8                       __ptext53 2416  
                     __ptext45 2654                       __ptext37 1F52                       __ptext29 274E  
                     __ptext54 28D2                       __ptext46 23C6                       __ptext38 1436  
                     __ptext55 27DE                       __ptext47 28C4                       __ptext39 24F8  
                     __ptext56 2722                       __ptext48 27BE                       __ptext57 283A  
                     __ptext49 26F6                       __powers_ 7F1A                PWM_init1@period 001A  
              PWM_init2@period 001C                       _contador 003F               __size_of_sprintf 0924  
                __size_of_main 0096         ??_SendBlueToothCommand 0027                       _putcTxU1 28B6  
                  i2Lcd_Port@a 0001                  BT_Init@nameBT 0060       __end_of_putcBluetoothInt 1F52  
        __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 2146                 OpenUSART@spbrg 0019  
                     scale@scl 0072              putcBluetoothInt@a 00B8              putcBluetoothInt@i 016E  
            putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A                       intlevel2 0000  
                    sprintf@ap 00A4               __tdiv_to_l_@exp1 0027                      sprintf@vd 009C  
             __tdiv_to_l_@cntr 0026                      sprintf@sp 0088            ?i2_Lcd_Write_String 0005  
             __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005              i2Lcd_Set_Cursor@b 0004  
            i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006               ___lldiv@dividend 0019  
    __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3                     i2Lcd_Cmd@a 0003  
                  i2_Lcd_Clear 28D2                     _UART1_Init 28A6                    _putSTRINGU1 1D18  
         ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020   __size_of_putcBluetoothString 006A  
                 ?__tdiv_to_l_ 0019                    _num_med_low 0044                       sprintf@c 00B7  
                     sprintf@f 008A               ___lldiv@quotient 0021             Lcd_Write_Integer@a 00B8  
           Lcd_Write_Integer@s 015A                     i2_Lcd_Port 2722                   _USART_Status 003C  
                   _TMRO_USART 0008  
