

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 25 14:48:54 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataBANK0
    77  002812                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for BT_Init@F5669
    81  002812  41                 	db	65
    82  002813  54                 	db	84
    83  002814  2B                 	db	43
    84  002815  4E                 	db	78
    85  002816  41                 	db	65
    86  002817  4D                 	db	77
    87  002818  45                 	db	69
    88  002819  3D                 	db	61
    89  00281A  72                 	db	114
    90  00281B  6F                 	db	111
    91  00281C  62                 	db	98
    92  00281D  6F                 	db	111
    93  00281E  74                 	db	116
    94  00281F  0D                 	db	13
    95  002820  0A                 	db	10
    96  002821  00                 	db	0
    97  002822  00                 	db	0
    98  002823  00                 	db	0
    99                           
   100                           ;initializer for _countup
   101  002824  0001               	dw	1
   102                           
   103                           	psect	mediumconst
   104  007ECA                     __pmediumconst:
   105                           	opt stack 0
   106  007ECA  00                 	db	0
   107  007ECB                     _dpowers:
   108                           	opt stack 0
   109  007ECB  0001               	dw	1
   110  007ECD  0000               	dw	0
   111  007ECF  000A               	dw	10
   112  007ED1  0000               	dw	0
   113  007ED3  0064               	dw	100
   114  007ED5  0000               	dw	0
   115  007ED7  03E8               	dw	1000
   116  007ED9  0000               	dw	0
   117  007EDB  2710               	dw	10000
   118  007EDD  0000               	dw	0
   119  007EDF  86A0               	dw	34464
   120  007EE1  0001               	dw	1
   121  007EE3  4240               	dw	16960
   122  007EE5  000F               	dw	15
   123  007EE7  9680               	dw	38528
   124  007EE9  0098               	dw	152
   125  007EEB  E100               	dw	57600
   126  007EED  05F5               	dw	1525
   127  007EEF  CA00               	dw	51712
   128  007EF1  3B9A               	dw	15258
   129  007EF3                     __end_of_dpowers:
   130                           	opt stack 0
   131  007EF3                     __npowers_:
   132                           	opt stack 0
   133  007EF3  00                 	db	0
   134  007EF4  80                 	db	128
   135  007EF5  3F                 	db	63
   136  007EF6  CD                 	db	205
   137  007EF7  CC                 	db	204
   138  007EF8  3D                 	db	61
   139  007EF9  D7                 	db	215
   140  007EFA  23                 	db	35
   141  007EFB  3C                 	db	60
   142  007EFC  12                 	db	18
   143  007EFD  83                 	db	131
   144  007EFE  3A                 	db	58
   145  007EFF  B7                 	db	183
   146  007F00  D1                 	db	209
   147  007F01  38                 	db	56
   148  007F02  C6                 	db	198
   149  007F03  27                 	db	39
   150  007F04  37                 	db	55
   151  007F05  38                 	db	56
   152  007F06  86                 	db	134
   153  007F07  35                 	db	53
   154  007F08  C0                 	db	192
   155  007F09  D6                 	db	214
   156  007F0A  33                 	db	51
   157  007F0B  CC                 	db	204
   158  007F0C  2B                 	db	43
   159  007F0D  32                 	db	50
   160  007F0E  70                 	db	112
   161  007F0F  89                 	db	137
   162  007F10  30                 	db	48
   163  007F11  E7                 	db	231
   164  007F12  DB                 	db	219
   165  007F13  2E                 	db	46
   166  007F14  E5                 	db	229
   167  007F15  3C                 	db	60
   168  007F16  1E                 	db	30
   169  007F17  42                 	db	66
   170  007F18  A2                 	db	162
   171  007F19  0D                 	db	13
   172  007F1A                     __end_of__npowers_:
   173                           	opt stack 0
   174  007F1A                     __powers_:
   175                           	opt stack 0
   176  007F1A  00                 	db	0
   177  007F1B  80                 	db	128
   178  007F1C  3F                 	db	63
   179  007F1D  00                 	db	0
   180  007F1E  20                 	db	32
   181  007F1F  41                 	db	65
   182  007F20  00                 	db	0
   183  007F21  C8                 	db	200
   184  007F22  42                 	db	66
   185  007F23  00                 	db	0
   186  007F24  7A                 	db	122
   187  007F25  44                 	db	68
   188  007F26  40                 	db	64
   189  007F27  1C                 	db	28
   190  007F28  46                 	db	70
   191  007F29  50                 	db	80
   192  007F2A  C3                 	db	195
   193  007F2B  47                 	db	71
   194  007F2C  24                 	db	36
   195  007F2D  74                 	db	116
   196  007F2E  49                 	db	73
   197  007F2F  97                 	db	151
   198  007F30  18                 	db	24
   199  007F31  4B                 	db	75
   200  007F32  BC                 	db	188
   201  007F33  BE                 	db	190
   202  007F34  4C                 	db	76
   203  007F35  6B                 	db	107
   204  007F36  6E                 	db	110
   205  007F37  4E                 	db	78
   206  007F38  03                 	db	3
   207  007F39  15                 	db	21
   208  007F3A  50                 	db	80
   209  007F3B  79                 	db	121
   210  007F3C  AD                 	db	173
   211  007F3D  60                 	db	96
   212  007F3E  F3                 	db	243
   213  007F3F  49                 	db	73
   214  007F40  71                 	db	113
   215  007F41                     __end_of__powers_:
   216                           	opt stack 0
   217  0000                     _ADCON1bits	set	4033
   218  0000                     _CCP1CON	set	4029
   219  0000                     _CCP2CON	set	4026
   220  0000                     _CCPR1L	set	4030
   221  0000                     _CCPR2L	set	4027
   222  0000                     _INTCON	set	4082
   223  0000                     _OSCCONbits	set	4051
   224  0000                     _PIE1	set	3997
   225  0000                     _PIE1bits	set	3997
   226  0000                     _PIR1bits	set	3998
   227  0000                     _PORTA	set	3968
   228  0000                     _PORTB	set	3969
   229  0000                     _PORTDbits	set	3971
   230  0000                     _PORTE	set	3972
   231  0000                     _PORTEbits	set	3972
   232  0000                     _PR2	set	4043
   233  0000                     _RCREG	set	4014
   234  0000                     _RCSTA	set	4011
   235  0000                     _RCSTAbits	set	4011
   236  0000                     _SPBRG	set	4015
   237  0000                     _SPBRGH	set	4016
   238  0000                     _T2CON	set	4042
   239  0000                     _T2CONbits	set	4042
   240  0000                     _TMR2	set	4044
   241  0000                     _TRISA	set	3986
   242  0000                     _TRISB	set	3987
   243  0000                     _TRISBbits	set	3987
   244  0000                     _TRISC	set	3988
   245  0000                     _TRISCbits	set	3988
   246  0000                     _TRISD	set	3989
   247  0000                     _TRISE	set	3990
   248  0000                     _TXREG	set	4013
   249  0000                     _TXSTA	set	4012
   250  0000                     _TXSTAbits	set	4012
   251  007F41                     __stringdata:
   252                           	opt stack 0
   253  007F41                     STR_19:
   254  007F41  49                 	db	73	;'I'
   255  007F42  6E                 	db	110	;'n'
   256  007F43  74                 	db	116	;'t'
   257  007F44  65                 	db	101	;'e'
   258  007F45  72                 	db	114	;'r'
   259  007F46  72                 	db	114	;'r'
   260  007F47  75                 	db	117	;'u'
   261  007F48  70                 	db	112	;'p'
   262  007F49  74                 	db	116	;'t'
   263  007F4A  69                 	db	105	;'i'
   264  007F4B  6F                 	db	111	;'o'
   265  007F4C  6E                 	db	110	;'n'
   266  007F4D  20                 	db	32
   267  007F4E  54                 	db	84	;'T'
   268  007F4F  4D                 	db	77	;'M'
   269  007F50  52                 	db	82	;'R'
   270  007F51  32                 	db	50	;'2'
   271  007F52  00                 	db	0
   272  007F53                     STR_11:
   273  007F53  42                 	db	66	;'B'
   274  007F54  54                 	db	84	;'T'
   275  007F55  20                 	db	32
   276  007F56  49                 	db	73	;'I'
   277  007F57  4E                 	db	78	;'N'
   278  007F58  49                 	db	73	;'I'
   279  007F59  43                 	db	67	;'C'
   280  007F5A  49                 	db	73	;'I'
   281  007F5B  41                 	db	65	;'A'
   282  007F5C  4C                 	db	76	;'L'
   283  007F5D  49                 	db	73	;'I'
   284  007F5E  5A                 	db	90	;'Z'
   285  007F5F  41                 	db	65	;'A'
   286  007F60  44                 	db	68	;'D'
   287  007F61  4F                 	db	79	;'O'
   288  007F62  00                 	db	0
   289  007F63                     STR_2:
   290  007F63  41                 	db	65	;'A'
   291  007F64  54                 	db	84	;'T'
   292  007F65  2B                 	db	43
   293  007F66  50                 	db	80	;'P'
   294  007F67  53                 	db	83	;'S'
   295  007F68  57                 	db	87	;'W'
   296  007F69  44                 	db	68	;'D'
   297  007F6A  3D                 	db	61	;'='
   298  007F6B  30                 	db	48	;'0'
   299  007F6C  30                 	db	48	;'0'
   300  007F6D  30                 	db	48	;'0'
   301  007F6E  30                 	db	48	;'0'
   302  007F6F  0D                 	db	13
   303  007F70  0A                 	db	10
   304  007F71  00                 	db	0
   305  007F72  0A                 	db	10
   306  007F73  2B                 	db	43
   307  007F74  42                 	db	66	;'B'
   308  007F75  54                 	db	84	;'T'
   309  007F76  53                 	db	83	;'S'
   310  007F77  54                 	db	84	;'T'
   311  007F78  41                 	db	65	;'A'
   312  007F79  54                 	db	84	;'T'
   313  007F7A  45                 	db	69	;'E'
   314  007F7B  3A                 	db	58	;':'
   315  007F7C  31                 	db	49	;'1'
   316  007F7D  0D                 	db	13
   317  007F7E  0A                 	db	10
   318  007F7F  00                 	db	0
   319  007F80  0A                 	db	10
   320  007F81  2B                 	db	43
   321  007F82  42                 	db	66	;'B'
   322  007F83  54                 	db	84	;'T'
   323  007F84  53                 	db	83	;'S'
   324  007F85  54                 	db	84	;'T'
   325  007F86  41                 	db	65	;'A'
   326  007F87  54                 	db	84	;'T'
   327  007F88  45                 	db	69	;'E'
   328  007F89  3A                 	db	58	;':'
   329  007F8A  33                 	db	51	;'3'
   330  007F8B  0D                 	db	13
   331  007F8C  0A                 	db	10
   332  007F8D  00                 	db	0
   333  007F8E  0A                 	db	10
   334  007F8F  2B                 	db	43
   335  007F90  42                 	db	66	;'B'
   336  007F91  54                 	db	84	;'T'
   337  007F92  53                 	db	83	;'S'
   338  007F93  54                 	db	84	;'T'
   339  007F94  41                 	db	65	;'A'
   340  007F95  54                 	db	84	;'T'
   341  007F96  45                 	db	69	;'E'
   342  007F97  3A                 	db	58	;':'
   343  007F98  34                 	db	52	;'4'
   344  007F99  0D                 	db	13
   345  007F9A  0A                 	db	10
   346  007F9B  00                 	db	0
   347  007F9C  0A                 	db	10
   348  007F9D  43                 	db	67	;'C'
   349  007F9E  4F                 	db	79	;'O'
   350  007F9F  4E                 	db	78	;'N'
   351  007FA0  4E                 	db	78	;'N'
   352  007FA1  45                 	db	69	;'E'
   353  007FA2  43                 	db	67	;'C'
   354  007FA3  54                 	db	84	;'T'
   355  007FA4  3A                 	db	58	;':'
   356  007FA5  4F                 	db	79	;'O'
   357  007FA6  4B                 	db	75	;'K'
   358  007FA7  0D                 	db	13
   359  007FA8  0A                 	db	10
   360  007FA9  00                 	db	0
   361  007FAA                     STR_18:
   362  007FAA  49                 	db	73	;'I'
   363  007FAB  6E                 	db	110	;'n'
   364  007FAC  74                 	db	116	;'t'
   365  007FAD  65                 	db	101	;'e'
   366  007FAE  67                 	db	103	;'g'
   367  007FAF  65                 	db	101	;'e'
   368  007FB0  72                 	db	114	;'r'
   369  007FB1  20                 	db	32
   370  007FB2  3D                 	db	61	;'='
   371  007FB3  20                 	db	32
   372  007FB4  25                 	db	37
   373  007FB5  64                 	db	100	;'d'
   374  007FB6  00                 	db	0
   375  007FB7                     STR_1:
   376  007FB7  41                 	db	65	;'A'
   377  007FB8  54                 	db	84	;'T'
   378  007FB9  2B                 	db	43
   379  007FBA  52                 	db	82	;'R'
   380  007FBB  4F                 	db	79	;'O'
   381  007FBC  4C                 	db	76	;'L'
   382  007FBD  45                 	db	69	;'E'
   383  007FBE  3D                 	db	61	;'='
   384  007FBF  30                 	db	48	;'0'
   385  007FC0  0D                 	db	13
   386  007FC1  0A                 	db	10
   387  007FC2  00                 	db	0
   388  007FC3                     STR_21:
   389  007FC3  43                 	db	67	;'C'
   390  007FC4  4D                 	db	77	;'M'
   391  007FC5  44                 	db	68	;'D'
   392  007FC6  20                 	db	32
   393  007FC7  54                 	db	84	;'T'
   394  007FC8  41                 	db	65	;'A'
   395  007FC9  42                 	db	66	;'B'
   396  007FCA  4C                 	db	76	;'L'
   397  007FCB  45                 	db	69	;'E'
   398  007FCC  54                 	db	84	;'T'
   399  007FCD  00                 	db	0
   400  007FCE  46                 	db	70	;'F'
   401  007FCF  6C                 	db	108	;'l'
   402  007FD0  6F                 	db	111	;'o'
   403  007FD1  61                 	db	97	;'a'
   404  007FD2  74                 	db	116	;'t'
   405  007FD3  20                 	db	32
   406  007FD4  3D                 	db	61	;'='
   407  007FD5  20                 	db	32
   408  007FD6  25                 	db	37
   409  007FD7  66                 	db	102	;'f'
   410  007FD8  00                 	db	0
   411  007FD9                     STR_3:
   412  007FD9  41                 	db	65	;'A'
   413  007FDA  54                 	db	84	;'T'
   414  007FDB  2B                 	db	43
   415  007FDC  49                 	db	73	;'I'
   416  007FDD  4E                 	db	78	;'N'
   417  007FDE  51                 	db	81	;'Q'
   418  007FDF  0D                 	db	13
   419  007FE0  0A                 	db	10
   420  007FE1  00                 	db	0
   421  007FE2                     STR_16:
   422  007FE2  44                 	db	68	;'D'
   423  007FE3  65                 	db	101	;'e'
   424  007FE4  66                 	db	102	;'f'
   425  007FE5  61                 	db	97	;'a'
   426  007FE6  75                 	db	117	;'u'
   427  007FE7  6C                 	db	108	;'l'
   428  007FE8  74                 	db	116	;'t'
   429  007FE9  00                 	db	0
   430  007FEA                     STR_20:
   431  007FEA  49                 	db	73	;'I'
   432  007FEB  6E                 	db	110	;'n'
   433  007FEC  69                 	db	105	;'i'
   434  007FED  63                 	db	99	;'c'
   435  007FEE  69                 	db	105	;'i'
   436  007FEF  6F                 	db	111	;'o'
   437  007FF0  00                 	db	0
   438  007FF1                     STR_10:
   439  007FF1  49                 	db	73	;'I'
   440  007FF2  4E                 	db	78	;'N'
   441  007FF3  49                 	db	73	;'I'
   442  007FF4  43                 	db	67	;'C'
   443  007FF5  49                 	db	73	;'I'
   444  007FF6  4F                 	db	79	;'O'
   445  007FF7  00                 	db	0
   446  007FF8                     STR_12:
   447  007FF8  31                 	db	49	;'1'
   448  007FF9  00                 	db	0
   449  007FFA                     STR_14:
   450  007FFA  33                 	db	51	;'3'
   451  007FFB  00                 	db	0
   452  007FFC                     STR_15:
   453  007FFC  34                 	db	52	;'4'
   454  007FFD  00                 	db	0
   455  007FFE                     __end_of__stringdata:
   456                           	opt stack 0
   457                           
   458                           ; #config settings
   459  007FFE  00                 	db	0	; dummy byte at the end
   460  0000                     
   461                           	psect	cinit
   462  00240A                     __pcinit:
   463                           	opt stack 0
   464  00240A                     start_initialization:
   465                           	opt stack 0
   466  00240A                     __initialization:
   467                           	opt stack 0
   468                           
   469                           ; Clear objects allocated to BANK1 (90 bytes)
   470  00240A  EE01  F000         	lfsr	0,__pbssBANK1
   471  00240E  0E5A               	movlw	90
   472  002410                     clear_0:
   473  002410  6AEE               	clrf	postinc0,c
   474  002412  06E8               	decf	wreg,f,c
   475  002414  E1FD               	bnz	clear_0
   476                           
   477                           ; Clear objects allocated to BANK0 (30 bytes)
   478  002416  EE00  F0CE         	lfsr	0,__pbssBANK0
   479  00241A  0E1E               	movlw	30
   480  00241C                     clear_1:
   481  00241C  6AEE               	clrf	postinc0,c
   482  00241E  06E8               	decf	wreg,f,c
   483  002420  E1FD               	bnz	clear_1
   484                           
   485                           ; Clear objects allocated to COMRAM (24 bytes)
   486  002422  EE00  F030         	lfsr	0,__pbssCOMRAM
   487  002426  0E18               	movlw	24
   488  002428                     clear_2:
   489  002428  6AEE               	clrf	postinc0,c
   490  00242A  06E8               	decf	wreg,f,c
   491  00242C  E1FD               	bnz	clear_2
   492                           
   493                           ; Initialize objects allocated to BANK0 (20 bytes)
   494                           ; load TBLPTR registers with __pidataBANK0
   495  00242E  0E12               	movlw	low __pidataBANK0
   496  002430  6EF6               	movwf	tblptrl,c
   497  002432  0E28               	movlw	high __pidataBANK0
   498  002434  6EF7               	movwf	tblptrh,c
   499  002436  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   500  002438  6EF8               	movwf	tblptru,c
   501  00243A  EE00  F0EC         	lfsr	0,__pdataBANK0
   502  00243E  EE10 F014          	lfsr	1,20
   503  002442                     copy_data0:
   504  002442  0009               	tblrd		*+
   505  002444  CFF5 FFEE          	movff	tablat,postinc0
   506  002448  50E5               	movf	postdec1,w,c
   507  00244A  50E1               	movf	fsr1l,w,c
   508  00244C  E1FA               	bnz	copy_data0
   509  00244E                     end_of_initialization:
   510                           	opt stack 0
   511  00244E                     __end_of__initialization:
   512                           	opt stack 0
   513  00244E  0100               	movlb	0
   514  002450  EF48  F00E         	goto	_main	;jump to C main() function
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	bssCOMRAM
   525  000030                     __pbssCOMRAM:
   526                           	opt stack 0
   527  000030                     _CheckSum:
   528                           	opt stack 0
   529  000030                     	ds	1
   530  000031                     _ComanBFlag:
   531                           	opt stack 0
   532  000031                     	ds	1
   533  000032                     _ComanTFlag:
   534                           	opt stack 0
   535  000032                     	ds	1
   536  000033                     _Comando:
   537                           	opt stack 0
   538  000033                     	ds	1
   539  000034                     _ComandoTablet:
   540                           	opt stack 0
   541  000034                     	ds	1
   542  000035                     _EntTrama:
   543                           	opt stack 0
   544  000035                     	ds	1
   545  000036                     _FinComandB:
   546                           	opt stack 0
   547  000036                     	ds	1
   548  000037                     _FinComandT:
   549                           	opt stack 0
   550  000037                     	ds	1
   551  000038                     _InicioComando:
   552                           	opt stack 0
   553  000038                     	ds	1
   554  000039                     _RXComandoTB:
   555                           	opt stack 0
   556  000039                     	ds	1
   557  00003A                     _SBUSART:
   558                           	opt stack 0
   559  00003A                     	ds	1
   560  00003B                     _Timer1:
   561                           	opt stack 0
   562  00003B                     	ds	1
   563  00003C                     _USART_Status:
   564                           	opt stack 0
   565  00003C                     	ds	1
   566  00003D                     _cad:
   567                           	opt stack 0
   568  00003D                     	ds	1
   569  00003E                     _cleanBfer:
   570                           	opt stack 0
   571  00003E                     	ds	1
   572  00003F                     _contador:
   573                           	opt stack 0
   574  00003F                     	ds	1
   575  000040                     _contador2:
   576                           	opt stack 0
   577  000040                     	ds	1
   578  000041                     _j:
   579                           	opt stack 0
   580  000041                     	ds	1
   581  000042                     _lenght:
   582                           	opt stack 0
   583  000042                     	ds	1
   584  000043                     _num_med_hi:
   585                           	opt stack 0
   586  000043                     	ds	1
   587  000044                     _num_med_low:
   588                           	opt stack 0
   589  000044                     	ds	1
   590  000045                     _num_med_medium:
   591                           	opt stack 0
   592  000045                     	ds	1
   593  000046                     _packet:
   594                           	opt stack 0
   595  000046                     	ds	1
   596  000047                     _Timer2Config:
   597                           	opt stack 0
   598  000047                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608                           	psect	bssBANK0
   609  0000CE                     __pbssBANK0:
   610                           	opt stack 0
   611  0000CE                     _DutyCycle:
   612                           	opt stack 0
   613  0000CE                     	ds	2
   614  0000D0                     _Med_lsb:
   615                           	opt stack 0
   616  0000D0                     	ds	2
   617  0000D2                     _Med_msb:
   618                           	opt stack 0
   619  0000D2                     	ds	2
   620  0000D4                     _TamanhoTrama:
   621                           	opt stack 0
   622  0000D4                     	ds	2
   623  0000D6                     _i:
   624                           	opt stack 0
   625  0000D6                     	ds	2
   626  0000D8                     _comando:
   627                           	opt stack 0
   628  0000D8                     	ds	20
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1l	equ	0xFE1
   637                           
   638                           	psect	dataBANK0
   639  0000EC                     __pdataBANK0:
   640                           	opt stack 0
   641  0000EC                     BT_Init@F5669:
   642                           	opt stack 0
   643  0000EC                     	ds	18
   644  0000FE                     _countup:
   645                           	opt stack 0
   646  0000FE                     	ds	2
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           postdec1	equ	0xFE5
   654                           fsr1l	equ	0xFE1
   655                           
   656                           	psect	bssBANK1
   657  000100                     __pbssBANK1:
   658                           	opt stack 0
   659  000100                     _TramaTablet:
   660                           	opt stack 0
   661  000100                     	ds	20
   662  000114                     _array:
   663                           	opt stack 0
   664  000114                     	ds	20
   665  000128                     _BluetoothDato:
   666                           	opt stack 0
   667  000128                     	ds	50
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	cstackBANK1
   678  00015A                     __pcstackBANK1:
   679                           	opt stack 0
   680  00015A                     putcBluetoothInt@s:
   681                           	opt stack 0
   682                           
   683                           ; 20 bytes @ 0x0
   684  00015A                     	ds	20
   685  00016E                     putcBluetoothInt@i:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x14
   689  00016E                     	ds	2
   690  000170                     Comando_Tablet@sum:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x16
   694  000170                     	ds	2
   695                           tblptru	equ	0xFF8
   696                           tblptrh	equ	0xFF7
   697                           tblptrl	equ	0xFF6
   698                           tablat	equ	0xFF5
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           postdec1	equ	0xFE5
   702                           fsr1l	equ	0xFE1
   703                           
   704                           	psect	cstackBANK0
   705  000060                     __pcstackBANK0:
   706                           	opt stack 0
   707  000060                     ?___ftmul:
   708                           	opt stack 0
   709  000060                     ___ftmul@f1:
   710                           	opt stack 0
   711  000060                     BT_Init@nameBT:
   712                           	opt stack 0
   713                           
   714                           ; 18 bytes @ 0x0
   715  000060                     	ds	3
   716  000063                     ___ftmul@f2:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0x3
   720  000063                     	ds	3
   721  000066                     ___ftmul@exp:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x6
   725  000066                     	ds	1
   726  000067                     ___ftmul@f3_as_product:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x7
   730  000067                     	ds	3
   731  00006A                     ___ftmul@cntr:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0xA
   735  00006A                     	ds	1
   736  00006B                     ___ftmul@sign:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0xB
   740  00006B                     	ds	1
   741  00006C                     ?_fround:
   742                           	opt stack 0
   743  00006C                     ?_scale:
   744                           	opt stack 0
   745                           
   746                           ; 3 bytes @ 0xC
   747  00006C                     	ds	3
   748  00006F                     _fround$2286:
   749                           	opt stack 0
   750  00006F                     _scale$2287:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0xF
   754  00006F                     	ds	3
   755  000072                     scale@scl:
   756                           	opt stack 0
   757  000072                     _fround$2285:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x12
   761  000072                     	ds	1
   762  000073                     ?___fttol:
   763                           	opt stack 0
   764  000073                     ___fttol@f1:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x13
   768  000073                     	ds	2
   769  000075                     fround@prec:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x15
   773  000075                     	ds	1
   774  000076                     ?___ftadd:
   775                           	opt stack 0
   776  000076                     ___ftadd@f1:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x16
   780  000076                     	ds	1
   781  000077                     ??___fttol:
   782                           
   783                           ; 0 bytes @ 0x17
   784  000077                     	ds	2
   785  000079                     ___ftadd@f2:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0x19
   789  000079                     	ds	3
   790  00007C                     ??___ftadd:
   791  00007C                     ___fttol@sign1:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x1C
   795  00007C                     	ds	1
   796  00007D                     ___fttol@lval:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0x1D
   800  00007D                     	ds	2
   801  00007F                     ___ftadd@sign:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x1F
   805  00007F                     	ds	1
   806  000080                     ___ftadd@exp2:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x20
   810  000080                     	ds	1
   811  000081                     ___ftadd@exp1:
   812                           	opt stack 0
   813  000081                     ___fttol@exp1:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x21
   817  000081                     	ds	1
   818  000082                     ??_PWM_DutyCycle1:
   819  000082                     ??_PWM_DutyCycle2:
   820  000082                     ?___ftsub:
   821                           	opt stack 0
   822  000082                     ___ftsub@f1:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x22
   826  000082                     	ds	3
   827  000085                     ___ftsub@f2:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x25
   831  000085                     	ds	1
   832  000086                     PWM_DutyCycle1@DutyCycle:
   833                           	opt stack 0
   834  000086                     PWM_DutyCycle2@DutyCycle:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x26
   838  000086                     	ds	2
   839  000088                     ?_sprintf:
   840                           	opt stack 0
   841  000088                     PWM_DutyCycle1@percentageDuty:
   842                           	opt stack 0
   843  000088                     PWM_DutyCycle2@percentageDuty:
   844                           	opt stack 0
   845  000088                     sprintf@sp:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x28
   849  000088                     	ds	1
   850  000089                     PWM_DutyCycle1@DC:
   851                           	opt stack 0
   852  000089                     PWM_DutyCycle2@DC:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x29
   856  000089                     	ds	1
   857  00008A                     sprintf@f:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x2A
   861  00008A                     	ds	5
   862  00008F                     ??_sprintf:
   863                           
   864                           ; 0 bytes @ 0x2F
   865  00008F                     	ds	6
   866  000095                     _sprintf$2288:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x35
   870  000095                     	ds	3
   871  000098                     _sprintf$1236:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x38
   875  000098                     	ds	4
   876  00009C                     sprintf@vd:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x3C
   880  00009C                     	ds	4
   881  0000A0                     sprintf@vd_1238:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x40
   885  0000A0                     	ds	4
   886  0000A4                     sprintf@ap:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x44
   890  0000A4                     	ds	2
   891  0000A6                     sprintf@flag:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x46
   895  0000A6                     	ds	2
   896  0000A8                     sprintf@integ:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x48
   900  0000A8                     	ds	3
   901  0000AB                     sprintf@prec:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x4B
   905  0000AB                     	ds	2
   906  0000AD                     sprintf@_val:
   907                           	opt stack 0
   908                           
   909                           ; 5 bytes @ 0x4D
   910  0000AD                     	ds	5
   911  0000B2                     sprintf@exp:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x52
   915  0000B2                     	ds	2
   916  0000B4                     sprintf@fval:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x54
   920  0000B4                     	ds	3
   921  0000B7                     sprintf@c:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x57
   925  0000B7                     	ds	1
   926  0000B8                     putcBluetoothInt@a:
   927                           	opt stack 0
   928  0000B8                     Lcd_Write_Integer@a:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x58
   932  0000B8                     	ds	2
   933  0000BA                     Lcd_Write_Integer@s:
   934                           	opt stack 0
   935                           
   936                           ; 20 bytes @ 0x5A
   937  0000BA                     	ds	20
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	cstackCOMRAM
   948  000001                     __pcstackCOMRAM:
   949                           	opt stack 0
   950  000001                     ReadUSART@data:
   951                           	opt stack 0
   952  000001                     i2Lcd_Port@a:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x0
   956  000001                     	ds	1
   957  000002                     ??i2_Lcd_Cmd:
   958  000002                     i2Lcd_Write_Char@temp:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x1
   962  000002                     	ds	1
   963  000003                     i2Lcd_Cmd@a:
   964                           	opt stack 0
   965  000003                     i2Lcd_Write_Char@y:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x2
   969  000003                     	ds	1
   970  000004                     i2Lcd_Set_Cursor@b:
   971                           	opt stack 0
   972  000004                     i2Lcd_Write_Char@a:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x3
   976  000004                     	ds	1
   977  000005                     i2Lcd_Set_Cursor@a:
   978                           	opt stack 0
   979  000005                     i2Lcd_Write_String@a:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x4
   983  000005                     	ds	1
   984  000006                     i2Lcd_Set_Cursor@z:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x5
   988  000006                     	ds	1
   989  000007                     ??i2_Lcd_Write_String:
   990  000007                     i2Lcd_Set_Cursor@y:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x6
   994  000007                     	ds	1
   995  000008                     i2Lcd_Set_Cursor@temp:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x7
   999  000008                     	ds	1
  1000  000009                     i2Lcd_Write_String@i:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x8
  1004  000009                     	ds	2
  1005  00000B                     ??_TMRO_USART:
  1006                           
  1007                           ; 0 bytes @ 0xA
  1008  00000B                     	ds	14
  1009  000019                     ??_OpenPWM2:
  1010  000019                     ?___awmod:
  1011                           	opt stack 0
  1012  000019                     ?___ftpack:
  1013                           	opt stack 0
  1014  000019                     ?___ftneg:
  1015                           	opt stack 0
  1016  000019                     ?__tdiv_to_l_:
  1017                           	opt stack 0
  1018  000019                     ?__div_to_l_:
  1019                           	opt stack 0
  1020  000019                     ?___lldiv:
  1021                           	opt stack 0
  1022  000019                     Lcd_Port@a:
  1023                           	opt stack 0
  1024  000019                     OpenPWM1@period:
  1025                           	opt stack 0
  1026  000019                     WriteUSART@data:
  1027                           	opt stack 0
  1028  000019                     clrBufferUSART@i:
  1029                           	opt stack 0
  1030  000019                     Pause_ms@x:
  1031                           	opt stack 0
  1032  000019                     SetDCPWM1@dutycycle:
  1033                           	opt stack 0
  1034  000019                     SetDCPWM2@dutycycle:
  1035                           	opt stack 0
  1036  000019                     OpenUSART@spbrg:
  1037                           	opt stack 0
  1038  000019                     ___awmod@dividend:
  1039                           	opt stack 0
  1040  000019                     __div_to_l_@f1:
  1041                           	opt stack 0
  1042  000019                     ___ftpack@arg:
  1043                           	opt stack 0
  1044  000019                     __tdiv_to_l_@f1:
  1045                           	opt stack 0
  1046  000019                     ___ftge@ff1:
  1047                           	opt stack 0
  1048  000019                     ___ftneg@f1:
  1049                           	opt stack 0
  1050  000019                     ___lldiv@dividend:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x18
  1054  000019                     	ds	1
  1055  00001A                     ??_Lcd_Cmd:
  1056  00001A                     putcTxU1@character:
  1057                           	opt stack 0
  1058  00001A                     Lcd_Write_Char@temp:
  1059                           	opt stack 0
  1060  00001A                     PWM_init1@period:
  1061                           	opt stack 0
  1062  00001A                     OpenPWM2@period:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x19
  1066  00001A                     	ds	1
  1067  00001B                     ??_OpenUSART:
  1068  00001B                     ??_SetDCPWM1:
  1069  00001B                     ??_SetDCPWM2:
  1070  00001B                     ??_Pause_ms:
  1071  00001B                     Lcd_Cmd@a:
  1072                           	opt stack 0
  1073  00001B                     Lcd_Write_Char@y:
  1074                           	opt stack 0
  1075  00001B                     OpenPWM2@ccp2mx:
  1076                           	opt stack 0
  1077  00001B                     putSTRINGU1@dato:
  1078                           	opt stack 0
  1079  00001B                     ___awmod@divisor:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x1A
  1083  00001B                     	ds	1
  1084  00001C                     ??_Lcd_Init:
  1085  00001C                     Lcd_Set_Cursor@b:
  1086                           	opt stack 0
  1087  00001C                     Lcd_Write_Char@a:
  1088                           	opt stack 0
  1089  00001C                     PWM_init2@period:
  1090                           	opt stack 0
  1091  00001C                     ___ftpack@exp:
  1092                           	opt stack 0
  1093  00001C                     Pause_ms@i:
  1094                           	opt stack 0
  1095  00001C                     __div_to_l_@f2:
  1096                           	opt stack 0
  1097  00001C                     __tdiv_to_l_@f2:
  1098                           	opt stack 0
  1099  00001C                     ___ftge@ff2:
  1100                           	opt stack 0
  1101                           
  1102                           ; 3 bytes @ 0x1B
  1103  00001C                     	ds	1
  1104  00001D                     Lcd_Set_Cursor@a:
  1105                           	opt stack 0
  1106  00001D                     ___awmod@counter:
  1107                           	opt stack 0
  1108  00001D                     ___ftpack@sign:
  1109                           	opt stack 0
  1110  00001D                     putSTRINGU1@total:
  1111                           	opt stack 0
  1112  00001D                     Lcd_Write_String@a:
  1113                           	opt stack 0
  1114  00001D                     SetDCPWM1@DCycle:
  1115                           	opt stack 0
  1116  00001D                     SetDCPWM2@DCycle:
  1117                           	opt stack 0
  1118  00001D                     ___lldiv@divisor:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x1C
  1122  00001D                     	ds	1
  1123  00001E                     ??___ftpack:
  1124  00001E                     Pause_seg@x:
  1125                           	opt stack 0
  1126  00001E                     Lcd_Set_Cursor@z:
  1127                           	opt stack 0
  1128  00001E                     OpenUSART@config:
  1129                           	opt stack 0
  1130  00001E                     ___awmod@sign:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x1D
  1134  00001E                     	ds	1
  1135  00001F                     ??_putSTRINGU1:
  1136  00001F                     ??_Lcd_Write_String:
  1137  00001F                     ??__tdiv_to_l_:
  1138  00001F                     ??__div_to_l_:
  1139  00001F                     ??___ftge:
  1140  00001F                     ?___awdiv:
  1141                           	opt stack 0
  1142  00001F                     Pause_seg@i:
  1143                           	opt stack 0
  1144  00001F                     UART1_Init@bdr:
  1145                           	opt stack 0
  1146  00001F                     Lcd_Set_Cursor@y:
  1147                           	opt stack 0
  1148  00001F                     ___awdiv@dividend:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x1E
  1152  00001F                     	ds	1
  1153  000020                     Lcd_Set_Cursor@temp:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x1F
  1157  000020                     	ds	1
  1158  000021                     ?___lbtoft:
  1159                           	opt stack 0
  1160  000021                     ?___lltoft:
  1161                           	opt stack 0
  1162  000021                     putSTRINGU1@last:
  1163                           	opt stack 0
  1164  000021                     Lcd_Write_String@i:
  1165                           	opt stack 0
  1166  000021                     ___awdiv@divisor:
  1167                           	opt stack 0
  1168  000021                     ___lldiv@quotient:
  1169                           	opt stack 0
  1170  000021                     ___lltoft@c:
  1171                           	opt stack 0
  1172                           
  1173                           ; 4 bytes @ 0x20
  1174  000021                     	ds	1
  1175  000022                     putSTRINGU1@cont:
  1176                           	opt stack 0
  1177  000022                     __tdiv_to_l_@quot:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x21
  1181  000022                     	ds	1
  1182  000023                     ___awdiv@counter:
  1183                           	opt stack 0
  1184  000023                     SendBlueToothCommand@command:
  1185                           	opt stack 0
  1186  000023                     __div_to_l_@quot:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x22
  1190  000023                     	ds	1
  1191  000024                     ___awdiv@sign:
  1192                           	opt stack 0
  1193  000024                     ___lbtoft@c:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x23
  1197  000024                     	ds	1
  1198  000025                     ??___lltoft:
  1199  000025                     ___lldiv@counter:
  1200                           	opt stack 0
  1201  000025                     SendBlueToothCommand@total:
  1202                           	opt stack 0
  1203  000025                     ___awdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x24
  1207  000025                     	ds	1
  1208  000026                     ?___llmod:
  1209                           	opt stack 0
  1210  000026                     __tdiv_to_l_@cntr:
  1211                           	opt stack 0
  1212  000026                     ___llmod@dividend:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x25
  1216  000026                     	ds	1
  1217  000027                     ??_Inicializa_Driveby:
  1218  000027                     ?___wmul:
  1219                           	opt stack 0
  1220  000027                     __div_to_l_@cntr:
  1221                           	opt stack 0
  1222  000027                     __tdiv_to_l_@exp1:
  1223                           	opt stack 0
  1224  000027                     ___wmul@multiplier:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x26
  1228  000027                     	ds	1
  1229  000028                     __div_to_l_@exp1:
  1230                           	opt stack 0
  1231  000028                     Inicializa_Driveby@i:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x27
  1235  000028                     	ds	1
  1236  000029                     ___lltoft@exp:
  1237                           	opt stack 0
  1238  000029                     ___wmul@multiplicand:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x28
  1242  000029                     	ds	1
  1243  00002A                     ___llmod@divisor:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0x29
  1247  00002A                     	ds	1
  1248  00002B                     ___wmul@product:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x2A
  1252  00002B                     	ds	2
  1253  00002D                     ??___ftmul:
  1254                           
  1255                           ; 0 bytes @ 0x2C
  1256  00002D                     	ds	1
  1257  00002E                     ___llmod@counter:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x2D
  1261  00002E                     	ds	2
  1262  000030                     tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           postdec1	equ	0xFE5
  1269                           fsr1l	equ	0xFE1
  1270                           
  1271                           ; 0 bytes @ 0x2F
  1272 ;;
  1273 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1274 ;;
  1275 ;; *************** function _main *****************
  1276 ;; Defined at:
  1277 ;;		line 139 in file "robot.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;		None
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  2  362[COMRAM] int 
  1284 ;; Registers used:
  1285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1291 ;;      Params:         0       0       0       0       0       0       0       0       0
  1292 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1294 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1295 ;;Total ram usage:        0 bytes
  1296 ;; Hardware stack levels required when called:   10
  1297 ;; This function calls:
  1298 ;;		_Comando_Tablet
  1299 ;;		_Inicializa_Driveby
  1300 ;;		_Lcd_Clear
  1301 ;;		_Lcd_Init
  1302 ;;		_Lcd_Set_Cursor
  1303 ;;		_Lcd_Write_String
  1304 ;;		_UART1_Init
  1305 ;;		_clrBufferUSART
  1306 ;; This function is called by:
  1307 ;;		Startup code after reset
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text0
  1312  001C90                     __ptext0:
  1313                           	opt stack 0
  1314  001C90                     _main:
  1315                           	opt stack 21
  1316                           
  1317                           ;robot.c: 141: INTCON =0X00;
  1318                           
  1319                           ;incstack = 0
  1320  001C90  0E00               	movlw	0
  1321  001C92  6EF2               	movwf	intcon,c	;volatile
  1322                           
  1323                           ;robot.c: 142: TRISD = 0x00;
  1324  001C94  0E00               	movlw	0
  1325  001C96  6E95               	movwf	3989,c	;volatile
  1326                           
  1327                           ;robot.c: 143: TRISE = 0x00;
  1328  001C98  0E00               	movlw	0
  1329  001C9A  6E96               	movwf	3990,c	;volatile
  1330                           
  1331                           ;robot.c: 144: PORTEbits.RE1=0;
  1332  001C9C  9284               	bcf	3972,1,c	;volatile
  1333                           
  1334                           ;robot.c: 145: ADCON1bits.PCFG=0b1111;
  1335  001C9E  80C1               	bsf	4033,0,c	;volatile
  1336  001CA0  82C1               	bsf	4033,1,c	;volatile
  1337  001CA2  84C1               	bsf	4033,2,c	;volatile
  1338  001CA4  86C1               	bsf	4033,3,c	;volatile
  1339                           
  1340                           ;robot.c: 146: Lcd_Init();
  1341  001CA6  ECE7  F010         	call	_Lcd_Init	;wreg free
  1342                           
  1343                           ;robot.c: 147: Lcd_Clear();
  1344  001CAA  EC34  F014         	call	_Lcd_Clear	;wreg free
  1345                           
  1346                           ;robot.c: 148: Lcd_Set_Cursor(1,1);
  1347  001CAE  0E01               	movlw	1
  1348  001CB0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1349  001CB2  0E01               	movlw	1
  1350  001CB4  ECB5  F011         	call	_Lcd_Set_Cursor
  1351                           
  1352                           ;robot.c: 149: Lcd_Write_String("Inicio");
  1353  001CB8  0E7F               	movlw	high STR_20
  1354  001CBA  6E1E               	movwf	Lcd_Write_String@a+1,c
  1355  001CBC  0EEA               	movlw	low STR_20
  1356  001CBE  6E1D               	movwf	Lcd_Write_String@a,c
  1357  001CC0  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  1358                           
  1359                           ;robot.c: 150: Inicializa_Driveby();
  1360  001CC4  ECF2  F00C         	call	_Inicializa_Driveby	;wreg free
  1361  001CC8                     l5410:
  1362                           
  1363                           ;robot.c: 154: {
  1364                           ;robot.c: 157: if (cleanBfer == 1) {
  1365  001CC8  043E               	decf	_cleanBfer,w,c
  1366  001CCA  A4D8               	btfss	status,2,c
  1367  001CCC  D004               	goto	l5416
  1368                           
  1369                           ;robot.c: 158: clrBufferUSART();
  1370  001CCE  ECE0  F012         	call	_clrBufferUSART	;wreg free
  1371                           
  1372                           ;robot.c: 159: cleanBfer = 0;
  1373  001CD2  0E00               	movlw	0
  1374  001CD4  6E3E               	movwf	_cleanBfer,c
  1375  001CD6                     l5416:
  1376                           
  1377                           ;robot.c: 160: }
  1378                           ;robot.c: 161: if (FinComandT == 1) {
  1379  001CD6  0437               	decf	_FinComandT,w,c
  1380  001CD8  A4D8               	btfss	status,2,c
  1381  001CDA  D01A               	goto	l5436
  1382                           
  1383                           ;robot.c: 162: Lcd_Clear();
  1384  001CDC  EC34  F014         	call	_Lcd_Clear	;wreg free
  1385                           
  1386                           ;robot.c: 163: Lcd_Set_Cursor(2,1);
  1387  001CE0  0E01               	movlw	1
  1388  001CE2  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1389  001CE4  0E02               	movlw	2
  1390  001CE6  ECB5  F011         	call	_Lcd_Set_Cursor
  1391                           
  1392                           ;robot.c: 164: Lcd_Write_String("CMD TABLET");
  1393  001CEA  0E7F               	movlw	high STR_21
  1394  001CEC  6E1E               	movwf	Lcd_Write_String@a+1,c
  1395  001CEE  0EC3               	movlw	low STR_21
  1396  001CF0  6E1D               	movwf	Lcd_Write_String@a,c
  1397  001CF2  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  1398                           
  1399                           ;robot.c: 165: FinComandT = 0;
  1400  001CF6  0E00               	movlw	0
  1401  001CF8  6E37               	movwf	_FinComandT,c
  1402                           
  1403                           ;robot.c: 166: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1404  001CFA  0E4F               	movlw	79
  1405  001CFC  16AB               	andwf	4011,f,c	;volatile
  1406  001CFE  9AAC               	bcf	4012,5,c	;volatile
  1407  001D00  0ECF               	movlw	207
  1408  001D02  169D               	andwf	3997,f,c	;volatile
  1409                           
  1410                           ;robot.c: 167: Comando_Tablet();
  1411  001D04  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1412                           
  1413                           ;robot.c: 168: UART1_Init(51);
  1414  001D08  0E33               	movlw	51
  1415  001D0A  EC25  F014         	call	_UART1_Init
  1416                           
  1417                           ;robot.c: 170: }
  1418  001D0E  D7DC               	goto	l5410
  1419  001D10                     l5436:
  1420                           
  1421                           ;robot.c: 171: else if (FinComandB == 1) {
  1422  001D10  0436               	decf	_FinComandB,w,c
  1423  001D12  A4D8               	btfss	status,2,c
  1424  001D14  D7D9               	goto	l5410
  1425                           
  1426                           ;robot.c: 176: FinComandB = 0;
  1427  001D16  0E00               	movlw	0
  1428  001D18  6E36               	movwf	_FinComandB,c
  1429                           
  1430                           ;robot.c: 177: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1431  001D1A  0E4F               	movlw	79
  1432  001D1C  16AB               	andwf	4011,f,c	;volatile
  1433  001D1E  9AAC               	bcf	4012,5,c	;volatile
  1434  001D20  0ECF               	movlw	207
  1435  001D22  169D               	andwf	3997,f,c	;volatile
  1436  001D24  D7D1               	goto	l5410
  1437  001D26                     __end_of_main:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           intcon	equ	0xFF2
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           postdec1	equ	0xFE5
  1447                           fsr1l	equ	0xFE1
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _Lcd_Init *****************
  1451 ;; Defined at:
  1452 ;;		line 57 in file "lcd.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;		None
  1457 ;; Return value:  Size  Location     Type
  1458 ;;		None               void
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         0       0       0       0       0       0       0       0       0
  1467 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1468 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1469 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1470 ;;Total ram usage:        1 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    6
  1473 ;; This function calls:
  1474 ;;		_Lcd_Cmd
  1475 ;;		_Lcd_Port
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text1
  1482  0021CE                     __ptext1:
  1483                           	opt stack 0
  1484  0021CE                     _Lcd_Init:
  1485                           	opt stack 24
  1486                           
  1487                           ;lcd.c: 58: Lcd_Port(0x00);
  1488                           
  1489                           ;incstack = 0
  1490  0021CE  0E00               	movlw	0
  1491  0021D0  EC4D  F013         	call	_Lcd_Port
  1492                           
  1493                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1494  0021D4  0E1A               	movlw	26
  1495  0021D6  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1496  0021D8  0EF8               	movlw	248
  1497  0021DA                     u5547:
  1498  0021DA  2EE8               	decfsz	wreg,f,c
  1499  0021DC  D7FE               	goto	u5547
  1500  0021DE  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1501  0021E0  D7FC               	goto	u5547
  1502  0021E2  D000               	nop2	
  1503                           
  1504                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1505  0021E4  0E03               	movlw	3
  1506  0021E6  ECB1  F013         	call	_Lcd_Cmd
  1507                           
  1508                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1509  0021EA  0E07               	movlw	7
  1510  0021EC  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1511  0021EE  0E7D               	movlw	125
  1512  0021F0                     u5557:
  1513  0021F0  2EE8               	decfsz	wreg,f,c
  1514  0021F2  D7FE               	goto	u5557
  1515  0021F4  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1516  0021F6  D7FC               	goto	u5557
  1517  0021F8  F000               	nop	
  1518                           
  1519                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1520  0021FA  0E03               	movlw	3
  1521  0021FC  ECB1  F013         	call	_Lcd_Cmd
  1522                           
  1523                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1524  002200  0E0F               	movlw	15
  1525  002202  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1526  002204  0E48               	movlw	72
  1527  002206                     u5567:
  1528  002206  2EE8               	decfsz	wreg,f,c
  1529  002208  D7FE               	goto	u5567
  1530  00220A  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1531  00220C  D7FC               	goto	u5567
  1532                           
  1533                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1534  00220E  0E03               	movlw	3
  1535  002210  ECB1  F013         	call	_Lcd_Cmd
  1536                           
  1537                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1538  002214  0E02               	movlw	2
  1539  002216  ECB1  F013         	call	_Lcd_Cmd
  1540                           
  1541                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1542  00221A  0E02               	movlw	2
  1543  00221C  ECB1  F013         	call	_Lcd_Cmd
  1544                           
  1545                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1546  002220  0E08               	movlw	8
  1547  002222  ECB1  F013         	call	_Lcd_Cmd
  1548                           
  1549                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1550  002226  0E00               	movlw	0
  1551  002228  ECB1  F013         	call	_Lcd_Cmd
  1552                           
  1553                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1554  00222C  0E0C               	movlw	12
  1555  00222E  ECB1  F013         	call	_Lcd_Cmd
  1556                           
  1557                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1558  002232  0E00               	movlw	0
  1559  002234  ECB1  F013         	call	_Lcd_Cmd
  1560                           
  1561                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1562  002238  0E06               	movlw	6
  1563  00223A  ECB1  F013         	call	_Lcd_Cmd
  1564  00223E  0012               	return	
  1565  002240                     __end_of_Lcd_Init:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           intcon	equ	0xFF2
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1l	equ	0xFE1
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _Inicializa_Driveby *****************
  1579 ;; Defined at:
  1580 ;;		line 59 in file "Funciones_Db.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  i               2   39[COMRAM] int 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;		None               void
  1587 ;; Registers used:
  1588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0
  1595 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1596 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1597 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1598 ;;Total ram usage:        3 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    9
  1601 ;; This function calls:
  1602 ;;		_BT_Init
  1603 ;;		_Lcd_Clear
  1604 ;;		_Lcd_Set_Cursor
  1605 ;;		_Lcd_Write_String
  1606 ;;		_Pause_seg
  1607 ;;		_clrBufferUSART
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text2
  1614  0019E4                     __ptext2:
  1615                           	opt stack 0
  1616  0019E4                     _Inicializa_Driveby:
  1617                           	opt stack 21
  1618                           
  1619                           ;Funciones_Db.c: 60: TRISA = TRISB = TRISC = TRISD = 0;
  1620                           
  1621                           ;incstack = 0
  1622  0019E4  0E00               	movlw	0
  1623  0019E6  6E95               	movwf	3989,c	;volatile
  1624  0019E8  CF95 FF94          	movff	3989,3988	;volatile
  1625  0019EC  CF94 FF93          	movff	3988,3987	;volatile
  1626  0019F0  CF93 FF92          	movff	3987,3986	;volatile
  1627                           
  1628                           ;Funciones_Db.c: 61: INTCON = 0b11000000;
  1629  0019F4  0EC0               	movlw	192
  1630  0019F6  6EF2               	movwf	intcon,c	;volatile
  1631                           
  1632                           ;Funciones_Db.c: 64: int i = 0;
  1633  0019F8  0E00               	movlw	0
  1634  0019FA  6E29               	movwf	Inicializa_Driveby@i+1,c
  1635  0019FC  0E00               	movlw	0
  1636  0019FE  6E28               	movwf	Inicializa_Driveby@i,c
  1637                           
  1638                           ;Funciones_Db.c: 65: _delay((unsigned long)((40)*(4000000/4000.0)));
  1639  001A00  0E34               	movlw	52
  1640  001A02  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1641  001A04  0EF2               	movlw	242
  1642  001A06                     u5577:
  1643  001A06  2EE8               	decfsz	wreg,f,c
  1644  001A08  D7FE               	goto	u5577
  1645  001A0A  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1646  001A0C  D7FC               	goto	u5577
  1647                           
  1648                           ;Funciones_Db.c: 66: OSCCONbits.IRCF = 0b111;
  1649  001A0E  88D3               	bsf	4051,4,c	;volatile
  1650  001A10  8AD3               	bsf	4051,5,c	;volatile
  1651  001A12  8CD3               	bsf	4051,6,c	;volatile
  1652                           
  1653                           ;Funciones_Db.c: 71: TRISA = 0;
  1654  001A14  0E00               	movlw	0
  1655  001A16  6E92               	movwf	3986,c	;volatile
  1656                           
  1657                           ;Funciones_Db.c: 72: PORTA = 0;
  1658  001A18  0E00               	movlw	0
  1659  001A1A  6E80               	movwf	3968,c	;volatile
  1660                           
  1661                           ;Funciones_Db.c: 73: TRISCbits.TRISC7 = 1;
  1662  001A1C  8E94               	bsf	3988,7,c	;volatile
  1663                           
  1664                           ;Funciones_Db.c: 74: TRISCbits.TRISC6 = 0;
  1665  001A1E  9C94               	bcf	3988,6,c	;volatile
  1666                           
  1667                           ;Funciones_Db.c: 75: for (i = 1; i <= 50; i++)
  1668  001A20  0E00               	movlw	0
  1669  001A22  6E29               	movwf	Inicializa_Driveby@i+1,c
  1670  001A24  0E01               	movlw	1
  1671  001A26  6E28               	movwf	Inicializa_Driveby@i,c
  1672  001A28  5029               	movf	Inicializa_Driveby@i+1,w,c
  1673  001A2A  0A80               	xorlw	128
  1674  001A2C  0F80               	addlw	-128
  1675  001A2E  0E33               	movlw	51
  1676  001A30  B4D8               	btfsc	status,2,c
  1677  001A32  5C28               	subwf	Inicializa_Driveby@i,w,c
  1678  001A34  B0D8               	btfsc	status,0,c
  1679  001A36  D00B               	goto	l5234
  1680                           
  1681                           ;Funciones_Db.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
  1682  001A38  0E1A               	movlw	26
  1683  001A3A  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1684  001A3C  0EF8               	movlw	248
  1685  001A3E                     u5587:
  1686  001A3E  2EE8               	decfsz	wreg,f,c
  1687  001A40  D7FE               	goto	u5587
  1688  001A42  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1689  001A44  D7FC               	goto	u5587
  1690  001A46  D000               	nop2	
  1691  001A48  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1692  001A4A  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1693  001A4C  D7ED               	goto	L1
  1694  001A4E                     l5234:
  1695                           
  1696                           ;Funciones_Db.c: 77: PORTE = 0;
  1697  001A4E  0E00               	movlw	0
  1698  001A50  6E84               	movwf	3972,c	;volatile
  1699                           
  1700                           ;Funciones_Db.c: 78: PORTB = 0;
  1701  001A52  0E00               	movlw	0
  1702  001A54  6E81               	movwf	3969,c	;volatile
  1703                           
  1704                           ;Funciones_Db.c: 79: Lcd_Clear();
  1705  001A56  EC34  F014         	call	_Lcd_Clear	;wreg free
  1706                           
  1707                           ;Funciones_Db.c: 80: Lcd_Set_Cursor(2, 1);
  1708  001A5A  0E01               	movlw	1
  1709  001A5C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1710  001A5E  0E02               	movlw	2
  1711  001A60  ECB5  F011         	call	_Lcd_Set_Cursor
  1712                           
  1713                           ;Funciones_Db.c: 81: Lcd_Write_String("INICIO");
  1714  001A64  0E7F               	movlw	high STR_10
  1715  001A66  6E1E               	movwf	Lcd_Write_String@a+1,c
  1716  001A68  0EF1               	movlw	low STR_10
  1717  001A6A  6E1D               	movwf	Lcd_Write_String@a,c
  1718  001A6C  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  1719                           
  1720                           ;Funciones_Db.c: 83: BT_Init();
  1721  001A70  ECA3  F00D         	call	_BT_Init	;wreg free
  1722                           
  1723                           ;Funciones_Db.c: 84: Lcd_Clear();
  1724  001A74  EC34  F014         	call	_Lcd_Clear	;wreg free
  1725                           
  1726                           ;Funciones_Db.c: 85: Lcd_Set_Cursor(1, 1);
  1727  001A78  0E01               	movlw	1
  1728  001A7A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1729  001A7C  0E01               	movlw	1
  1730  001A7E  ECB5  F011         	call	_Lcd_Set_Cursor
  1731                           
  1732                           ;Funciones_Db.c: 86: Lcd_Write_String("BT INICIALIZADO");
  1733  001A82  0E7F               	movlw	high STR_11
  1734  001A84  6E1E               	movwf	Lcd_Write_String@a+1,c
  1735  001A86  0E53               	movlw	low STR_11
  1736  001A88  6E1D               	movwf	Lcd_Write_String@a,c
  1737  001A8A  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  1738                           
  1739                           ;Funciones_Db.c: 88: Pause_seg(7);
  1740  001A8E  0E07               	movlw	7
  1741  001A90  EC2A  F012         	call	_Pause_seg
  1742                           
  1743                           ;Funciones_Db.c: 89: cad = 0;
  1744  001A94  0E00               	movlw	0
  1745  001A96  6E3D               	movwf	_cad,c
  1746                           
  1747                           ;Funciones_Db.c: 90: clrBufferUSART();
  1748  001A98  ECE0  F012         	call	_clrBufferUSART	;wreg free
  1749                           
  1750                           ;Funciones_Db.c: 96: return;
  1751  001A9C  0012               	return	
  1752  001A9E                     __end_of_Inicializa_Driveby:
  1753                           	opt stack 0
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           intcon	equ	0xFF2
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           postdec1	equ	0xFE5
  1762                           fsr1l	equ	0xFE1
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _BT_Init *****************
  1766 ;; Defined at:
  1767 ;;		line 16 in file "Bluetooth.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1772 ;; Return value:  Size  Location     Type
  1773 ;;		None               void
  1774 ;; Registers used:
  1775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0
  1782 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1784 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1785 ;;Total ram usage:       18 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    8
  1788 ;; This function calls:
  1789 ;;		_Pause_seg
  1790 ;;		_SendBlueToothCommand
  1791 ;;		_UART1_Init
  1792 ;; This function is called by:
  1793 ;;		_Inicializa_Driveby
  1794 ;;		_EstadoBluetooth
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text3
  1799  001B46                     __ptext3:
  1800                           	opt stack 0
  1801  001B46                     _BT_Init:
  1802                           	opt stack 21
  1803                           
  1804                           ;Bluetooth.c: 18: UART1_Init(51);
  1805                           
  1806                           ;incstack = 0
  1807  001B46  0E33               	movlw	51
  1808  001B48  EC25  F014         	call	_UART1_Init
  1809                           
  1810                           ;Bluetooth.c: 21: Pause_seg(1);
  1811  001B4C  0E01               	movlw	1
  1812  001B4E  EC2A  F012         	call	_Pause_seg
  1813                           
  1814                           ;Bluetooth.c: 22: char nameBT[18] = {
  1815                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1816                           ;Bluetooth.c: 24: };
  1817  001B52  EE20  F0EC         	lfsr	2,BT_Init@F5669
  1818  001B56  EE10  F060         	lfsr	1,BT_Init@nameBT
  1819  001B5A  0E12               	movlw	18
  1820  001B5C                     u5361:
  1821  001B5C  CFDE FFE6          	movff	postinc2,postinc1
  1822  001B60  2EE8               	decfsz	wreg,f,c
  1823  001B62  D7FC               	goto	u5361
  1824                           
  1825                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1826  001B64  0E7F               	movlw	high STR_1
  1827  001B66  6E24               	movwf	SendBlueToothCommand@command+1,c
  1828  001B68  0EB7               	movlw	low STR_1
  1829  001B6A  6E23               	movwf	SendBlueToothCommand@command,c
  1830  001B6C  0E00               	movlw	0
  1831  001B6E  6E26               	movwf	SendBlueToothCommand@total+1,c
  1832  001B70  0E0B               	movlw	11
  1833  001B72  6E25               	movwf	SendBlueToothCommand@total,c
  1834  001B74  ECFE  F013         	call	_SendBlueToothCommand	;wreg free
  1835                           
  1836                           ;Bluetooth.c: 29: Pause_seg(1);
  1837  001B78  0E01               	movlw	1
  1838  001B7A  EC2A  F012         	call	_Pause_seg
  1839                           
  1840                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1841  001B7E  0100               	movlb	0	; () banked
  1842  001B80  0E00               	movlw	high BT_Init@nameBT
  1843  001B82  6E24               	movwf	SendBlueToothCommand@command+1,c
  1844  001B84  0100               	movlb	0	; () banked
  1845  001B86  0E60               	movlw	low BT_Init@nameBT
  1846  001B88  6E23               	movwf	SendBlueToothCommand@command,c
  1847  001B8A  0E00               	movlw	0
  1848  001B8C  6E26               	movwf	SendBlueToothCommand@total+1,c
  1849  001B8E  0E12               	movlw	18
  1850  001B90  6E25               	movwf	SendBlueToothCommand@total,c
  1851  001B92  ECFE  F013         	call	_SendBlueToothCommand	;wreg free
  1852                           
  1853                           ;Bluetooth.c: 33: Pause_seg(2);
  1854  001B96  0E02               	movlw	2
  1855  001B98  EC2A  F012         	call	_Pause_seg
  1856                           
  1857                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1858  001B9C  0E7F               	movlw	high STR_2
  1859  001B9E  6E24               	movwf	SendBlueToothCommand@command+1,c
  1860  001BA0  0E63               	movlw	low STR_2
  1861  001BA2  6E23               	movwf	SendBlueToothCommand@command,c
  1862  001BA4  0E00               	movlw	0
  1863  001BA6  6E26               	movwf	SendBlueToothCommand@total+1,c
  1864  001BA8  0E0E               	movlw	14
  1865  001BAA  6E25               	movwf	SendBlueToothCommand@total,c
  1866  001BAC  ECFE  F013         	call	_SendBlueToothCommand	;wreg free
  1867                           
  1868                           ;Bluetooth.c: 36: Pause_seg(2);
  1869  001BB0  0E02               	movlw	2
  1870  001BB2  EC2A  F012         	call	_Pause_seg
  1871                           
  1872                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1873  001BB6  0E7F               	movlw	high STR_3
  1874  001BB8  6E24               	movwf	SendBlueToothCommand@command+1,c
  1875  001BBA  0ED9               	movlw	low STR_3
  1876  001BBC  6E23               	movwf	SendBlueToothCommand@command,c
  1877  001BBE  0E00               	movlw	0
  1878  001BC0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1879  001BC2  0E08               	movlw	8
  1880  001BC4  6E25               	movwf	SendBlueToothCommand@total,c
  1881  001BC6  ECFE  F013         	call	_SendBlueToothCommand	;wreg free
  1882                           
  1883                           ;Bluetooth.c: 41: Pause_seg(2);
  1884  001BCA  0E02               	movlw	2
  1885  001BCC  EC2A  F012         	call	_Pause_seg
  1886                           
  1887                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1888  001BD0  0E7F               	movlw	high STR_3
  1889  001BD2  6E24               	movwf	SendBlueToothCommand@command+1,c
  1890  001BD4  0ED9               	movlw	low STR_3
  1891  001BD6  6E23               	movwf	SendBlueToothCommand@command,c
  1892  001BD8  0E00               	movlw	0
  1893  001BDA  6E26               	movwf	SendBlueToothCommand@total+1,c
  1894  001BDC  0E08               	movlw	8
  1895  001BDE  6E25               	movwf	SendBlueToothCommand@total,c
  1896  001BE0  ECFE  F013         	call	_SendBlueToothCommand	;wreg free
  1897                           
  1898                           ;Bluetooth.c: 44: Pause_seg(2);
  1899  001BE4  0E02               	movlw	2
  1900  001BE6  EC2A  F012         	call	_Pause_seg
  1901                           
  1902                           ;Bluetooth.c: 45: return;
  1903  001BEA  0012               	return	
  1904  001BEC                     __end_of_BT_Init:
  1905                           	opt stack 0
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           intcon	equ	0xFF2
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           postinc1	equ	0xFE6
  1914                           postdec1	equ	0xFE5
  1915                           fsr1l	equ	0xFE1
  1916                           postinc2	equ	0xFDE
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _SendBlueToothCommand *****************
  1920 ;; Defined at:
  1921 ;;		line 48 in file "Bluetooth.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1924 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1925 ;;		 -> BT_Init@nameBT(18), 
  1926 ;;  total           2   36[COMRAM] unsigned int 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;		None               void
  1931 ;; Registers used:
  1932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1938 ;;      Params:         4       0       0       0       0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1941 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1942 ;;Total ram usage:        4 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    7
  1945 ;; This function calls:
  1946 ;;		_putSTRINGU1
  1947 ;; This function is called by:
  1948 ;;		_BT_Init
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text4
  1953  0027FC                     __ptext4:
  1954                           	opt stack 0
  1955  0027FC                     _SendBlueToothCommand:
  1956                           	opt stack 21
  1957                           
  1958                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1959                           
  1960                           ;incstack = 0
  1961  0027FC  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1962  002800  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1963  002804  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1964  002808  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1965  00280C  EC93  F00E         	call	_putSTRINGU1	;wreg free
  1966                           
  1967                           ;Bluetooth.c: 50: return;
  1968  002810  0012               	return	
  1969  002812                     __end_of_SendBlueToothCommand:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           intcon	equ	0xFF2
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postinc1	equ	0xFE6
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           postinc2	equ	0xFDE
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _putSTRINGU1 *****************
  1985 ;; Defined at:
  1986 ;;		line 21 in file "UART1.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  1989 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1990 ;;		 -> BT_Init@nameBT(18), 
  1991 ;;  total           2   28[COMRAM] unsigned int 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  cont            1   33[COMRAM] unsigned char 
  1994 ;;  last            1   32[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2004 ;;      Params:         4       0       0       0       0       0       0       0       0
  2005 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2006 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2007 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2008 ;;Total ram usage:        8 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    6
  2011 ;; This function calls:
  2012 ;;		_putcTxU1
  2013 ;; This function is called by:
  2014 ;;		_SendBlueToothCommand
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text5
  2019  001D26                     __ptext5:
  2020                           	opt stack 0
  2021  001D26                     _putSTRINGU1:
  2022                           	opt stack 21
  2023                           
  2024                           ;UART1.c: 22: unsigned char cont,last;
  2025                           ;UART1.c: 24: for(cont=0,last=0;cont<total;cont++){
  2026                           
  2027                           ;incstack = 0
  2028  001D26  0E00               	movlw	0
  2029  001D28  6E22               	movwf	putSTRINGU1@cont,c
  2030  001D2A  0E00               	movlw	0
  2031  001D2C  6E21               	movwf	putSTRINGU1@last,c
  2032  001D2E  D01F               	goto	l4410
  2033  001D30                     l4404:
  2034                           
  2035                           ;UART1.c: 25: if(dato[cont]!='\0') last=cont;
  2036  001D30  5022               	movf	putSTRINGU1@cont,w,c
  2037  001D32  0D01               	mullw	1
  2038  001D34  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2039  001D38  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2040  001D3C  50F3               	movf	prodl,w,c
  2041  001D3E  261F               	addwf	??_putSTRINGU1,f,c
  2042  001D40  50F4               	movf	prodh,w,c
  2043  001D42  2220               	addwfc	??_putSTRINGU1+1,f,c
  2044  001D44  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2045  001D48  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2046  001D4C  6AF8               	clrf	tblptru,c
  2047  001D4E  0E07               	movlw	(high __ramtop+-1)
  2048  001D50  64F7               	cpfsgt	tblptrh,c
  2049  001D52  D003               	bra	u4377
  2050  001D54  0008               	tblrd		*
  2051  001D56  50F5               	movf	tablat,w,c
  2052  001D58  D005               	bra	u4370
  2053  001D5A                     u4377:
  2054  001D5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2055  001D5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2056  001D62  50EF               	movf	indf0,w,c
  2057  001D64                     u4370:
  2058  001D64  0900               	iorlw	0
  2059  001D66  A4D8               	btfss	status,2,c
  2060  001D68  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2061  001D6C  2A22               	incf	putSTRINGU1@cont,f,c
  2062  001D6E                     l4410:
  2063  001D6E  5022               	movf	putSTRINGU1@cont,w,c
  2064  001D70  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2065  001D72  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2066  001D74  501D               	movf	putSTRINGU1@total,w,c
  2067  001D76  5C1F               	subwf	??_putSTRINGU1,w,c
  2068  001D78  501E               	movf	putSTRINGU1@total+1,w,c
  2069  001D7A  5820               	subwfb	??_putSTRINGU1+1,w,c
  2070  001D7C  A0D8               	btfss	status,0,c
  2071  001D7E  D7D8               	goto	l4404
  2072                           
  2073                           ;UART1.c: 26: }
  2074                           ;UART1.c: 28: for (cont=0;cont<=last;cont++){
  2075  001D80  0E00               	movlw	0
  2076  001D82  6E22               	movwf	putSTRINGU1@cont,c
  2077  001D84  D015               	goto	l4420
  2078  001D86                     l4414:
  2079                           
  2080                           ;UART1.c: 29: putcTxU1(*dato++);
  2081  001D86  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2082  001D8A  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2083  001D8E  6AF8               	clrf	tblptru,c
  2084  001D90  0E07               	movlw	(high __ramtop+-1)
  2085  001D92  64F7               	cpfsgt	tblptrh,c
  2086  001D94  D003               	bra	u4407
  2087  001D96  0008               	tblrd		*
  2088  001D98  50F5               	movf	tablat,w,c
  2089  001D9A  D005               	bra	u4400
  2090  001D9C                     u4407:
  2091  001D9C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2092  001DA0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2093  001DA4  50EF               	movf	indf0,w,c
  2094  001DA6                     u4400:
  2095  001DA6  EC2D  F014         	call	_putcTxU1
  2096  001DAA  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2097  001DAC  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2098  001DAE  2A22               	incf	putSTRINGU1@cont,f,c
  2099  001DB0                     l4420:
  2100  001DB0  5022               	movf	putSTRINGU1@cont,w,c
  2101  001DB2  5C21               	subwf	putSTRINGU1@last,w,c
  2102  001DB4  A0D8               	btfss	status,0,c
  2103  001DB6  0012               	return	
  2104  001DB8  D7E6               	goto	l4414
  2105  001DBA                     __end_of_putSTRINGU1:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           intcon	equ	0xFF2
  2114                           indf0	equ	0xFEF
  2115                           postinc0	equ	0xFEE
  2116                           fsr0h	equ	0xFEA
  2117                           fsr0l	equ	0xFE9
  2118                           wreg	equ	0xFE8
  2119                           postinc1	equ	0xFE6
  2120                           postdec1	equ	0xFE5
  2121                           fsr1l	equ	0xFE1
  2122                           postinc2	equ	0xFDE
  2123                           status	equ	0xFD8
  2124                           
  2125 ;; *************** function _putcTxU1 *****************
  2126 ;; Defined at:
  2127 ;;		line 12 in file "UART1.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  character       1    wreg     unsigned char 
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  character       1   25[COMRAM] unsigned char 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;		None               void
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2141 ;;      Params:         0       0       0       0       0       0       0       0       0
  2142 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2144 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2145 ;;Total ram usage:        1 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    5
  2148 ;; This function calls:
  2149 ;;		_WriteUSART
  2150 ;; This function is called by:
  2151 ;;		_putSTRINGU1
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text6
  2156  00285A                     __ptext6:
  2157                           	opt stack 0
  2158  00285A                     _putcTxU1:
  2159                           	opt stack 21
  2160                           
  2161                           ;incstack = 0
  2162                           ;putcTxU1@character stored from wreg
  2163  00285A  6E1A               	movwf	putcTxU1@character,c
  2164                           
  2165                           ;UART1.c: 14: WriteUSART(character);
  2166  00285C  501A               	movf	putcTxU1@character,w,c
  2167  00285E  EC13  F014         	call	_WriteUSART
  2168  002862                     l210:
  2169  002862  B2AC               	btfsc	4012,1,c	;volatile
  2170  002864  0012               	return	
  2171  002866  D7FD               	goto	l210
  2172  002868                     __end_of_putcTxU1:
  2173                           	opt stack 0
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           intcon	equ	0xFF2
  2181                           indf0	equ	0xFEF
  2182                           postinc0	equ	0xFEE
  2183                           fsr0h	equ	0xFEA
  2184                           fsr0l	equ	0xFE9
  2185                           wreg	equ	0xFE8
  2186                           postinc1	equ	0xFE6
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           postinc2	equ	0xFDE
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _Pause_seg *****************
  2193 ;; Defined at:
  2194 ;;		line 18 in file "Retardos.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  x               1    wreg     unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  x               1   29[COMRAM] unsigned char 
  2199 ;;  i               1   30[COMRAM] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;		None               void
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2209 ;;      Params:         0       0       0       0       0       0       0       0       0
  2210 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2212 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2213 ;;Total ram usage:        2 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    5
  2216 ;; This function calls:
  2217 ;;		_Pause_ms
  2218 ;; This function is called by:
  2219 ;;		_BT_Init
  2220 ;;		_Inicializa_Driveby
  2221 ;;		_EstadoBluetooth
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text7
  2226  002454                     __ptext7:
  2227                           	opt stack 0
  2228  002454                     _Pause_seg:
  2229                           	opt stack 24
  2230                           
  2231                           ;incstack = 0
  2232                           ;Pause_seg@x stored from wreg
  2233  002454  6E1E               	movwf	Pause_seg@x,c
  2234                           
  2235                           ;Retardos.c: 19: unsigned char i=0;
  2236  002456  0E00               	movlw	0
  2237  002458  6E1F               	movwf	Pause_seg@i,c
  2238                           
  2239                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2240  00245A  0E00               	movlw	0
  2241  00245C  6E1F               	movwf	Pause_seg@i,c
  2242  00245E  D019               	goto	l4800
  2243  002460                     l4796:
  2244                           
  2245                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2246  002460  0E00               	movlw	0
  2247  002462  6E1A               	movwf	Pause_ms@x+1,c
  2248  002464  0EFA               	movlw	250
  2249  002466  6E19               	movwf	Pause_ms@x,c
  2250  002468  EC34  F013         	call	_Pause_ms	;wreg free
  2251  00246C  0E00               	movlw	0
  2252  00246E  6E1A               	movwf	Pause_ms@x+1,c
  2253  002470  0EFA               	movlw	250
  2254  002472  6E19               	movwf	Pause_ms@x,c
  2255  002474  EC34  F013         	call	_Pause_ms	;wreg free
  2256                           
  2257                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2258  002478  0E00               	movlw	0
  2259  00247A  6E1A               	movwf	Pause_ms@x+1,c
  2260  00247C  0EFA               	movlw	250
  2261  00247E  6E19               	movwf	Pause_ms@x,c
  2262  002480  EC34  F013         	call	_Pause_ms	;wreg free
  2263  002484  0E00               	movlw	0
  2264  002486  6E1A               	movwf	Pause_ms@x+1,c
  2265  002488  0EFA               	movlw	250
  2266  00248A  6E19               	movwf	Pause_ms@x,c
  2267  00248C  EC34  F013         	call	_Pause_ms	;wreg free
  2268  002490  2A1F               	incf	Pause_seg@i,f,c
  2269  002492                     l4800:
  2270  002492  501F               	movf	Pause_seg@i,w,c
  2271  002494  5C1E               	subwf	Pause_seg@x,w,c
  2272  002496  A0D8               	btfss	status,0,c
  2273  002498  0012               	return	
  2274  00249A  D7E2               	goto	l4796
  2275  00249C                     __end_of_Pause_seg:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           indf0	equ	0xFEF
  2285                           postinc0	equ	0xFEE
  2286                           fsr0h	equ	0xFEA
  2287                           fsr0l	equ	0xFE9
  2288                           wreg	equ	0xFE8
  2289                           postinc1	equ	0xFE6
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           postinc2	equ	0xFDE
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _Pause_ms *****************
  2296 ;; Defined at:
  2297 ;;		line 11 in file "Retardos.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  x               2   24[COMRAM] unsigned int 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  i               2   27[COMRAM] unsigned int 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;		None               void
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2311 ;;      Params:         2       0       0       0       0       0       0       0       0
  2312 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2313 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2314 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2315 ;;Total ram usage:        5 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    4
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_Pause_seg
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text8
  2326  002668                     __ptext8:
  2327                           	opt stack 0
  2328  002668                     _Pause_ms:
  2329                           	opt stack 24
  2330                           
  2331                           ;Retardos.c: 12: unsigned int i=0;
  2332                           
  2333                           ;incstack = 0
  2334  002668  0E00               	movlw	0
  2335  00266A  6E1D               	movwf	Pause_ms@i+1,c
  2336  00266C  0E00               	movlw	0
  2337  00266E  6E1C               	movwf	Pause_ms@i,c
  2338                           
  2339                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2340  002670  0E00               	movlw	0
  2341  002672  6E1D               	movwf	Pause_ms@i+1,c
  2342  002674  0E00               	movlw	0
  2343  002676  6E1C               	movwf	Pause_ms@i,c
  2344  002678  D009               	goto	l189
  2345  00267A                     l4424:
  2346                           
  2347                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2348  00267A  0E03               	movlw	3
  2349  00267C  6E1B               	movwf	??_Pause_ms& (0+255),c
  2350  00267E  0E98               	movlw	152
  2351  002680                     u5597:
  2352  002680  2EE8               	decfsz	wreg,f,c
  2353  002682  D7FE               	goto	u5597
  2354  002684  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2355  002686  D7FC               	goto	u5597
  2356  002688  4A1C               	infsnz	Pause_ms@i,f,c
  2357  00268A  2A1D               	incf	Pause_ms@i+1,f,c
  2358  00268C                     l189:
  2359  00268C  501C               	movf	Pause_ms@i,w,c
  2360  00268E  5C19               	subwf	Pause_ms@x,w,c
  2361  002690  501D               	movf	Pause_ms@i+1,w,c
  2362  002692  581A               	subwfb	Pause_ms@x+1,w,c
  2363  002694  A0D8               	btfss	status,0,c
  2364  002696  0012               	return	
  2365  002698  D7F0               	goto	l4424
  2366  00269A                     __end_of_Pause_ms:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           indf0	equ	0xFEF
  2376                           postinc0	equ	0xFEE
  2377                           fsr0h	equ	0xFEA
  2378                           fsr0l	equ	0xFE9
  2379                           wreg	equ	0xFE8
  2380                           postinc1	equ	0xFE6
  2381                           postdec1	equ	0xFE5
  2382                           fsr1l	equ	0xFE1
  2383                           postinc2	equ	0xFDE
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _Comando_Tablet *****************
  2387 ;; Defined at:
  2388 ;;		line 267 in file "Funciones_Db.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  sum             2   22[BANK1 ] int 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;		None               void
  2395 ;; Registers used:
  2396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2402 ;;      Params:         0       0       0       0       0       0       0       0       0
  2403 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2405 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2406 ;;Total ram usage:        2 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    9
  2409 ;; This function calls:
  2410 ;;		_Lcd_Clear
  2411 ;;		_Lcd_Set_Cursor
  2412 ;;		_Lcd_Write_Integer
  2413 ;;		_Lcd_Write_String
  2414 ;;		_PWM_DutyCycle1
  2415 ;;		_PWM_DutyCycle2
  2416 ;;		_PWM_init1
  2417 ;;		_PWM_init2
  2418 ;;		_clrBufferUSART
  2419 ;;		_putcBluetoothInt
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text9
  2426  001580                     __ptext9:
  2427                           	opt stack 0
  2428  001580                     _Comando_Tablet:
  2429                           	opt stack 21
  2430                           
  2431                           ;Funciones_Db.c: 268: int sum=0;
  2432                           
  2433                           ;incstack = 0
  2434  001580  0E00               	movlw	0
  2435  001582  0101               	movlb	1	; () banked
  2436  001584  6F71               	movwf	(Comando_Tablet@sum+1)& (0+255),b
  2437  001586  0E00               	movlw	0
  2438  001588  0101               	movlb	1	; () banked
  2439  00158A  6F70               	movwf	Comando_Tablet@sum& (0+255),b
  2440                           
  2441                           ;Funciones_Db.c: 271: switch (BluetoothDato[1]) {
  2442  00158C  D081               	goto	l5314
  2443  00158E                     l5260:
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;Funciones_Db.c: 273: Lcd_Clear();
  2447  00158E  EC34  F014         	call	_Lcd_Clear	;wreg free
  2448                           
  2449                           ;Funciones_Db.c: 274: Lcd_Set_Cursor(1, 1);
  2450  001592  0E01               	movlw	1
  2451  001594  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2452  001596  0E01               	movlw	1
  2453  001598  ECB5  F011         	call	_Lcd_Set_Cursor
  2454                           
  2455                           ;Funciones_Db.c: 275: Lcd_Write_String("1");
  2456  00159C  0E7F               	movlw	high STR_12
  2457  00159E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2458  0015A0  0EF8               	movlw	low STR_12
  2459  0015A2  6E1D               	movwf	Lcd_Write_String@a,c
  2460  0015A4  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  2461                           
  2462                           ;Funciones_Db.c: 276: break;
  2463  0015A8  D085               	goto	l5316
  2464  0015AA                     l5266:
  2465                           
  2466                           ;Funciones_Db.c: 278: Lcd_Clear();
  2467  0015AA  EC34  F014         	call	_Lcd_Clear	;wreg free
  2468                           
  2469                           ;Funciones_Db.c: 279: Lcd_Set_Cursor(1, 1);
  2470  0015AE  0E01               	movlw	1
  2471  0015B0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2472  0015B2  0E01               	movlw	1
  2473  0015B4  ECB5  F011         	call	_Lcd_Set_Cursor
  2474                           
  2475                           ;Funciones_Db.c: 280: Lcd_Write_String("2");
  2476  0015B8  0E7F               	movlw	high (STR_19+16)
  2477  0015BA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2478  0015BC  0E51               	movlw	low (STR_19+16)
  2479  0015BE  6E1D               	movwf	Lcd_Write_String@a,c
  2480  0015C0  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  2481                           
  2482                           ;Funciones_Db.c: 281: break;
  2483  0015C4  D077               	goto	l5316
  2484  0015C6                     l5272:
  2485                           
  2486                           ;Funciones_Db.c: 284: Lcd_Clear();
  2487  0015C6  EC34  F014         	call	_Lcd_Clear	;wreg free
  2488                           
  2489                           ;Funciones_Db.c: 285: Lcd_Set_Cursor(1, 1);
  2490  0015CA  0E01               	movlw	1
  2491  0015CC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2492  0015CE  0E01               	movlw	1
  2493  0015D0  ECB5  F011         	call	_Lcd_Set_Cursor
  2494                           
  2495                           ;Funciones_Db.c: 287: Lcd_Write_String("3");
  2496  0015D4  0E7F               	movlw	high STR_14
  2497  0015D6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2498  0015D8  0EFA               	movlw	low STR_14
  2499  0015DA  6E1D               	movwf	Lcd_Write_String@a,c
  2500  0015DC  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  2501                           
  2502                           ;Funciones_Db.c: 288: break;
  2503  0015E0  D069               	goto	l5316
  2504  0015E2                     l5278:
  2505                           
  2506                           ;Funciones_Db.c: 290: Lcd_Clear();
  2507  0015E2  EC34  F014         	call	_Lcd_Clear	;wreg free
  2508                           
  2509                           ;Funciones_Db.c: 291: Lcd_Set_Cursor(1, 1);
  2510  0015E6  0E01               	movlw	1
  2511  0015E8  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2512  0015EA  0E01               	movlw	1
  2513  0015EC  ECB5  F011         	call	_Lcd_Set_Cursor
  2514                           
  2515                           ;Funciones_Db.c: 292: Lcd_Write_String("4");
  2516  0015F0  0E7F               	movlw	high STR_15
  2517  0015F2  6E1E               	movwf	Lcd_Write_String@a+1,c
  2518  0015F4  0EFC               	movlw	low STR_15
  2519  0015F6  6E1D               	movwf	Lcd_Write_String@a,c
  2520  0015F8  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  2521                           
  2522                           ;Funciones_Db.c: 293: break;
  2523  0015FC  D05B               	goto	l5316
  2524  0015FE                     l5284:
  2525                           
  2526                           ;Funciones_Db.c: 295: Lcd_Clear();
  2527  0015FE  EC34  F014         	call	_Lcd_Clear	;wreg free
  2528                           
  2529                           ;Funciones_Db.c: 296: Lcd_Set_Cursor(1, 1);
  2530  001602  0E01               	movlw	1
  2531  001604  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2532  001606  0E01               	movlw	1
  2533  001608  ECB5  F011         	call	_Lcd_Set_Cursor
  2534                           
  2535                           ;Funciones_Db.c: 297: Lcd_Write_Integer(BluetoothDato[3]);
  2536  00160C  0101               	movlb	1	; () banked
  2537  00160E  0100               	movlb	0	; () banked
  2538  001610  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2539  001614  0100               	movlb	0	; () banked
  2540  001616  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2541  001618  ECC3  F012         	call	_Lcd_Write_Integer	;wreg free
  2542                           
  2543                           ;Funciones_Db.c: 298: Lcd_Set_Cursor(2, 1);
  2544  00161C  0E01               	movlw	1
  2545  00161E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2546  001620  0E02               	movlw	2
  2547  001622  ECB5  F011         	call	_Lcd_Set_Cursor
  2548                           
  2549                           ;Funciones_Db.c: 299: Lcd_Write_Integer(BluetoothDato[4]);
  2550  001626  0101               	movlb	1	; () banked
  2551  001628  0100               	movlb	0	; () banked
  2552  00162A  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2553  00162E  0100               	movlb	0	; () banked
  2554  001630  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2555  001632  ECC3  F012         	call	_Lcd_Write_Integer	;wreg free
  2556                           
  2557                           ;Funciones_Db.c: 300: sum = (int)(BluetoothDato[3] + BluetoothDato[4]);
  2558  001636  0101               	movlb	1	; () banked
  2559  001638  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2560  00163A  0101               	movlb	1	; () banked
  2561  00163C  252C               	addwf	(_BluetoothDato+4)& (0+255),w,b
  2562  00163E  0101               	movlb	1	; () banked
  2563  001640  6F70               	movwf	Comando_Tablet@sum& (0+255),b
  2564  001642  0101               	movlb	1	; () banked
  2565  001644  6B71               	clrf	(Comando_Tablet@sum+1)& (0+255),b
  2566  001646  0101               	movlb	1	; () banked
  2567  001648  3771               	rlcf	(Comando_Tablet@sum+1)& (0+255),f,b
  2568                           
  2569                           ; BSR set to: 1
  2570                           ;Funciones_Db.c: 301: putcBluetoothInt(sum);
  2571  00164A  C170  F0B8         	movff	Comando_Tablet@sum,putcBluetoothInt@a
  2572  00164E  C171  F0B9         	movff	Comando_Tablet@sum+1,putcBluetoothInt@a+1
  2573  001652  EC6D  F00F         	call	_putcBluetoothInt	;wreg free
  2574                           
  2575                           ;Funciones_Db.c: 302: PWM_init1(0xff);
  2576  001656  0EFF               	movlw	255
  2577  001658  ECE0  F013         	call	_PWM_init1
  2578                           
  2579                           ;Funciones_Db.c: 303: PWM_init2(0xff);
  2580  00165C  0EFF               	movlw	255
  2581  00165E  ECD1  F013         	call	_PWM_init2
  2582                           
  2583                           ;Funciones_Db.c: 305: PWM_DutyCycle1(BluetoothDato[3]);
  2584  001662  0101               	movlb	1	; () banked
  2585  001664  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2586  001666  EC2F  F010         	call	_PWM_DutyCycle1
  2587                           
  2588                           ;Funciones_Db.c: 306: PWM_DutyCycle2(BluetoothDato[4]);
  2589  00166A  0101               	movlb	1	; () banked
  2590  00166C  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2591  00166E  ECF1  F00F         	call	_PWM_DutyCycle2
  2592                           
  2593                           ;Funciones_Db.c: 309: break;
  2594  001672  D020               	goto	l5316
  2595  001674                     l5306:
  2596                           
  2597                           ;Funciones_Db.c: 311: Lcd_Clear();
  2598  001674  EC34  F014         	call	_Lcd_Clear	;wreg free
  2599                           
  2600                           ;Funciones_Db.c: 312: Lcd_Set_Cursor(1, 1);
  2601  001678  0E01               	movlw	1
  2602  00167A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2603  00167C  0E01               	movlw	1
  2604  00167E  ECB5  F011         	call	_Lcd_Set_Cursor
  2605                           
  2606                           ;Funciones_Db.c: 313: Lcd_Write_String("Default");
  2607  001682  0E7F               	movlw	high STR_16
  2608  001684  6E1E               	movwf	Lcd_Write_String@a+1,c
  2609  001686  0EE2               	movlw	low STR_16
  2610  001688  6E1D               	movwf	Lcd_Write_String@a,c
  2611  00168A  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  2612                           
  2613                           ;Funciones_Db.c: 314: break;
  2614  00168E  D012               	goto	l5316
  2615  001690                     l5314:
  2616  001690  0101               	movlb	1	; () banked
  2617  001692  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2618                           
  2619                           ; Switch size 1, requested type "space"
  2620                           ; Number of cases is 5, Range of values is 1 to 5
  2621                           ; switch strategies available:
  2622                           ; Name         Instructions Cycles
  2623                           ; simple_byte           16     9 (average)
  2624                           ;	Chosen strategy is simple_byte
  2625  001694  0A01               	xorlw	1	; case 1
  2626  001696  B4D8               	btfsc	status,2,c
  2627  001698  D77A               	goto	l5260
  2628  00169A  0A03               	xorlw	3	; case 2
  2629  00169C  B4D8               	btfsc	status,2,c
  2630  00169E  D785               	goto	l5266
  2631  0016A0  0A01               	xorlw	1	; case 3
  2632  0016A2  B4D8               	btfsc	status,2,c
  2633  0016A4  D790               	goto	l5272
  2634  0016A6  0A07               	xorlw	7	; case 4
  2635  0016A8  B4D8               	btfsc	status,2,c
  2636  0016AA  D79B               	goto	l5278
  2637  0016AC  0A01               	xorlw	1	; case 5
  2638  0016AE  B4D8               	btfsc	status,2,c
  2639  0016B0  D7A6               	goto	l5284
  2640  0016B2  D7E0               	goto	l5306
  2641  0016B4                     l5316:
  2642                           
  2643                           ;Funciones_Db.c: 316: clrBufferUSART();
  2644  0016B4  ECE0  F012         	call	_clrBufferUSART	;wreg free
  2645                           
  2646                           ;Funciones_Db.c: 317: return;
  2647  0016B8  0012               	return	
  2648  0016BA                     __end_of_Comando_Tablet:
  2649                           	opt stack 0
  2650                           tblptru	equ	0xFF8
  2651                           tblptrh	equ	0xFF7
  2652                           tblptrl	equ	0xFF6
  2653                           tablat	equ	0xFF5
  2654                           prodh	equ	0xFF4
  2655                           prodl	equ	0xFF3
  2656                           intcon	equ	0xFF2
  2657                           indf0	equ	0xFEF
  2658                           postinc0	equ	0xFEE
  2659                           fsr0h	equ	0xFEA
  2660                           fsr0l	equ	0xFE9
  2661                           wreg	equ	0xFE8
  2662                           postinc1	equ	0xFE6
  2663                           postdec1	equ	0xFE5
  2664                           fsr1l	equ	0xFE1
  2665                           postinc2	equ	0xFDE
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _putcBluetoothInt *****************
  2669 ;; Defined at:
  2670 ;;		line 102 in file "Bluetooth.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  a               2   88[BANK0 ] int 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  s              20    0[BANK1 ] unsigned char [20]
  2675 ;;  i               2   20[BANK1 ] int 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2685 ;;      Params:         0       2       0       0       0       0       0       0       0
  2686 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2688 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2689 ;;Total ram usage:       24 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    8
  2692 ;; This function calls:
  2693 ;;		_UART1_Init
  2694 ;;		_WriteUSART
  2695 ;;		_sprintf
  2696 ;; This function is called by:
  2697 ;;		_Comando_Tablet
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text10
  2702  001EDA                     __ptext10:
  2703                           	opt stack 0
  2704  001EDA                     _putcBluetoothInt:
  2705                           	opt stack 21
  2706                           
  2707                           ;Bluetooth.c: 104: int i;
  2708                           ;Bluetooth.c: 105: unsigned char s[20];
  2709                           ;Bluetooth.c: 106: UART1_Init(51);
  2710                           
  2711                           ;incstack = 0
  2712  001EDA  0E33               	movlw	51
  2713  001EDC  EC25  F014         	call	_UART1_Init
  2714                           
  2715                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2716  001EE0  0101               	movlb	1	; () banked
  2717  001EE2  0E01               	movlw	high putcBluetoothInt@s
  2718  001EE4  0100               	movlb	0	; () banked
  2719  001EE6  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2720  001EE8  0101               	movlb	1	; () banked
  2721  001EEA  0E5A               	movlw	low putcBluetoothInt@s
  2722  001EEC  0100               	movlb	0	; () banked
  2723  001EEE  6F88               	movwf	sprintf@sp& (0+255),b
  2724  001EF0  0E7F               	movlw	high (STR_18+10)
  2725  001EF2  0100               	movlb	0	; () banked
  2726  001EF4  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2727  001EF6  0EB4               	movlw	low (STR_18+10)
  2728  001EF8  0100               	movlb	0	; () banked
  2729  001EFA  6F8A               	movwf	sprintf@f& (0+255),b
  2730  001EFC  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2731  001F00  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2732  001F04  EC0E  F000         	call	_sprintf	;wreg free
  2733                           
  2734                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2735  001F08  0E00               	movlw	0
  2736  001F0A  0101               	movlb	1	; () banked
  2737  001F0C  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2738  001F0E  0E00               	movlw	0
  2739  001F10  0101               	movlb	1	; () banked
  2740  001F12  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2741  001F14  D012               	goto	l5118
  2742  001F16                     l5114:
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2746  001F16  0101               	movlb	1	; () banked
  2747  001F18  0E5A               	movlw	low putcBluetoothInt@s
  2748  001F1A  0101               	movlb	1	; () banked
  2749  001F1C  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2750  001F1E  6ED9               	movwf	fsr2l,c
  2751  001F20  0101               	movlb	1	; () banked
  2752  001F22  0E01               	movlw	high putcBluetoothInt@s
  2753  001F24  0101               	movlb	1	; () banked
  2754  001F26  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2755  001F28  6EDA               	movwf	fsr2h,c
  2756  001F2A  50DF               	movf	indf2,w,c
  2757  001F2C  EC13  F014         	call	_WriteUSART
  2758  001F30                     l68:
  2759  001F30  A2AC               	btfss	4012,1,c	;volatile
  2760  001F32  D7FE               	goto	l68
  2761  001F34  0101               	movlb	1	; () banked
  2762  001F36  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2763  001F38  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2764  001F3A                     l5118:
  2765                           
  2766                           ; BSR set to: 1
  2767  001F3A  0101               	movlb	1	; () banked
  2768  001F3C  0E5A               	movlw	low putcBluetoothInt@s
  2769  001F3E  0101               	movlb	1	; () banked
  2770  001F40  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2771  001F42  6ED9               	movwf	fsr2l,c
  2772  001F44  0101               	movlb	1	; () banked
  2773  001F46  0E01               	movlw	high putcBluetoothInt@s
  2774  001F48  0101               	movlb	1	; () banked
  2775  001F4A  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2776  001F4C  6EDA               	movwf	fsr2h,c
  2777  001F4E  50DF               	movf	indf2,w,c
  2778  001F50  A4D8               	btfss	status,2,c
  2779  001F52  D7E1               	goto	l5114
  2780                           
  2781                           ; BSR set to: 1
  2782                           ;Bluetooth.c: 112: }
  2783                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2784                           
  2785                           ; BSR set to: 1
  2786  001F54  0E4F               	movlw	79
  2787  001F56  16AB               	andwf	4011,f,c	;volatile
  2788                           
  2789                           ; BSR set to: 1
  2790  001F58  9AAC               	bcf	4012,5,c	;volatile
  2791  001F5A  0ECF               	movlw	207
  2792  001F5C  169D               	andwf	3997,f,c	;volatile
  2793                           
  2794                           ; BSR set to: 1
  2795                           
  2796                           ; BSR set to: 1
  2797                           ;Bluetooth.c: 114: return;
  2798  001F5E  0012               	return	
  2799  001F60                     __end_of_putcBluetoothInt:
  2800                           	opt stack 0
  2801                           tblptru	equ	0xFF8
  2802                           tblptrh	equ	0xFF7
  2803                           tblptrl	equ	0xFF6
  2804                           tablat	equ	0xFF5
  2805                           prodh	equ	0xFF4
  2806                           prodl	equ	0xFF3
  2807                           intcon	equ	0xFF2
  2808                           indf0	equ	0xFEF
  2809                           postinc0	equ	0xFEE
  2810                           fsr0h	equ	0xFEA
  2811                           fsr0l	equ	0xFE9
  2812                           wreg	equ	0xFE8
  2813                           postinc1	equ	0xFE6
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           indf2	equ	0xFDF
  2817                           postinc2	equ	0xFDE
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _WriteUSART *****************
  2823 ;; Defined at:
  2824 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  data            1    wreg     unsigned char 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  data            1   24[COMRAM] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;		None               void
  2831 ;; Registers used:
  2832 ;;		wreg
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        1 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    4
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_putcBluetoothInt
  2849 ;;		_putcTxU1
  2850 ;;		_putcBluetoothString
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text11
  2855  002826                     __ptext11:
  2856                           	opt stack 0
  2857  002826                     _WriteUSART:
  2858                           	opt stack 21
  2859                           
  2860                           ; BSR set to: 1
  2861                           ;incstack = 0
  2862                           ;WriteUSART@data stored from wreg
  2863  002826  6E19               	movwf	WriteUSART@data,c
  2864  002828  ACAC               	btfss	4012,6,c	;volatile
  2865  00282A  D003               	goto	l4144
  2866  00282C  90AC               	bcf	4012,0,c	;volatile
  2867  00282E  B23C               	btfsc	_USART_Status,1,c
  2868  002830  80AC               	bsf	4012,0,c	;volatile
  2869  002832                     l4144:
  2870  002832  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  2871  002836  0012               	return	
  2872  002838                     __end_of_WriteUSART:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           intcon	equ	0xFF2
  2881                           indf0	equ	0xFEF
  2882                           postinc0	equ	0xFEE
  2883                           fsr0h	equ	0xFEA
  2884                           fsr0l	equ	0xFE9
  2885                           wreg	equ	0xFE8
  2886                           postinc1	equ	0xFE6
  2887                           postdec1	equ	0xFE5
  2888                           fsr1l	equ	0xFE1
  2889                           indf2	equ	0xFDF
  2890                           postinc2	equ	0xFDE
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _UART1_Init *****************
  2896 ;; Defined at:
  2897 ;;		line 5 in file "UART1.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  bdr             1    wreg     unsigned char 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  bdr             1   30[COMRAM] unsigned char 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;		None               void
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, cstack
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2911 ;;      Params:         0       0       0       0       0       0       0       0       0
  2912 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2914 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2915 ;;Total ram usage:        1 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    5
  2918 ;; This function calls:
  2919 ;;		_OpenUSART
  2920 ;; This function is called by:
  2921 ;;		_BT_Init
  2922 ;;		_putcBluetoothInt
  2923 ;;		_main
  2924 ;;		_putcBluetoothString
  2925 ;;		_EstadoBluetooth
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text12
  2930  00284A                     __ptext12:
  2931                           	opt stack 0
  2932  00284A                     _UART1_Init:
  2933                           	opt stack 25
  2934                           
  2935                           ;incstack = 0
  2936                           ;UART1_Init@bdr stored from wreg
  2937  00284A  6E1F               	movwf	UART1_Init@bdr,c
  2938                           
  2939                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  2940  00284C  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  2941  002850  6A1A               	clrf	OpenUSART@spbrg+1,c
  2942  002852  0E7C               	movlw	124
  2943  002854  EC20  F011         	call	_OpenUSART
  2944  002858  0012               	return	
  2945  00285A                     __end_of_UART1_Init:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           indf0	equ	0xFEF
  2955                           postinc0	equ	0xFEE
  2956                           fsr0h	equ	0xFEA
  2957                           fsr0l	equ	0xFE9
  2958                           wreg	equ	0xFE8
  2959                           postinc1	equ	0xFE6
  2960                           postdec1	equ	0xFE5
  2961                           fsr1l	equ	0xFE1
  2962                           indf2	equ	0xFDF
  2963                           postinc2	equ	0xFDE
  2964                           fsr2h	equ	0xFDA
  2965                           fsr2l	equ	0xFD9
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _OpenUSART *****************
  2969 ;; Defined at:
  2970 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  config          1    wreg     unsigned char 
  2973 ;;  spbrg           2   24[COMRAM] unsigned int 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  config          1   29[COMRAM] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;		None               void
  2978 ;; Registers used:
  2979 ;;		wreg, status,2
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2985 ;;      Params:         2       0       0       0       0       0       0       0       0
  2986 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2987 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2988 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2989 ;;Total ram usage:        6 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    4
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_UART1_Init
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text13
  3000  002240                     __ptext13:
  3001                           	opt stack 0
  3002  002240                     _OpenUSART:
  3003                           	opt stack 25
  3004                           
  3005                           ;incstack = 0
  3006                           ;OpenUSART@config stored from wreg
  3007  002240  6E1E               	movwf	OpenUSART@config,c
  3008  002242  0E00               	movlw	0
  3009  002244  6EAC               	movwf	4012,c	;volatile
  3010  002246  0E00               	movlw	0
  3011  002248  6EAB               	movwf	4011,c	;volatile
  3012  00224A  B01E               	btfsc	OpenUSART@config,0,c
  3013  00224C  88AC               	bsf	4012,4,c	;volatile
  3014  00224E  A21E               	btfss	OpenUSART@config,1,c
  3015  002250  D002               	goto	l4438
  3016  002252  8CAC               	bsf	4012,6,c	;volatile
  3017  002254  8CAB               	bsf	4011,6,c	;volatile
  3018  002256                     l4438:
  3019  002256  B41E               	btfsc	OpenUSART@config,2,c
  3020  002258  8EAC               	bsf	4012,7,c	;volatile
  3021  00225A  A61E               	btfss	OpenUSART@config,3,c
  3022  00225C  D002               	goto	l567
  3023  00225E  88AB               	bsf	4011,4,c	;volatile
  3024  002260  D001               	goto	l4446
  3025  002262                     l567:
  3026  002262  8AAB               	bsf	4011,5,c	;volatile
  3027  002264                     l4446:
  3028  002264  B81E               	btfsc	OpenUSART@config,4,c
  3029  002266  84AC               	bsf	4012,2,c	;volatile
  3030  002268  989E               	bcf	3998,4,c	;volatile
  3031  00226A  BA1E               	btfsc	OpenUSART@config,5,c
  3032  00226C  86AB               	bsf	4011,3,c	;volatile
  3033  00226E  AC1E               	btfss	OpenUSART@config,6,c
  3034  002270  D002               	goto	l571
  3035  002272  8A9D               	bsf	3997,5,c	;volatile
  3036  002274  D001               	goto	l572
  3037  002276                     l571:
  3038  002276  9A9D               	bcf	3997,5,c	;volatile
  3039  002278                     l572:
  3040  002278  9A9E               	bcf	3998,5,c	;volatile
  3041  00227A  AE1E               	btfss	OpenUSART@config,7,c
  3042  00227C  D002               	goto	l573
  3043  00227E  889D               	bsf	3997,4,c	;volatile
  3044  002280  D001               	goto	l574
  3045  002282                     l573:
  3046  002282  989D               	bcf	3997,4,c	;volatile
  3047  002284                     l574:
  3048  002284  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3049  002288  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3050  00228C  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3051  002290  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3052  002292  501C               	movf	??_OpenUSART+1,w,c
  3053  002294  6EB0               	movwf	4016,c	;volatile
  3054  002296  8AAC               	bsf	4012,5,c	;volatile
  3055  002298  8EAB               	bsf	4011,7,c	;volatile
  3056  00229A  9C94               	bcf	3988,6,c	;volatile
  3057  00229C  8E94               	bsf	3988,7,c	;volatile
  3058  00229E  B8AC               	btfsc	4012,4,c	;volatile
  3059  0022A0  BEAC               	btfsc	4012,7,c	;volatile
  3060  0022A2  D001               	goto	l576
  3061  0022A4  8C94               	bsf	3988,6,c	;volatile
  3062  0022A6                     l576:
  3063  0022A6  0012               	return	
  3064  0022A8                     __end_of_OpenUSART:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           indf0	equ	0xFEF
  3074                           postinc0	equ	0xFEE
  3075                           fsr0h	equ	0xFEA
  3076                           fsr0l	equ	0xFE9
  3077                           wreg	equ	0xFE8
  3078                           postinc1	equ	0xFE6
  3079                           postdec1	equ	0xFE5
  3080                           fsr1l	equ	0xFE1
  3081                           indf2	equ	0xFDF
  3082                           postinc2	equ	0xFDE
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _clrBufferUSART *****************
  3088 ;; Defined at:
  3089 ;;		line 68 in file "Bluetooth.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  i               2   24[COMRAM] int 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;		None               void
  3096 ;; Registers used:
  3097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0
  3104 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3106 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3107 ;;Total ram usage:        2 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    4
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_Inicializa_Driveby
  3114 ;;		_Comando_Tablet
  3115 ;;		_main
  3116 ;;		_CheckTX
  3117 ;;		_EstadoBluetooth
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text14
  3122  0025C0                     __ptext14:
  3123                           	opt stack 0
  3124  0025C0                     _clrBufferUSART:
  3125                           	opt stack 26
  3126                           
  3127                           ;Bluetooth.c: 69: int i;
  3128                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3129                           
  3130                           ;incstack = 0
  3131  0025C0  0E00               	movlw	0
  3132  0025C2  6E1A               	movwf	clrBufferUSART@i+1,c
  3133  0025C4  0E00               	movlw	0
  3134  0025C6  6E19               	movwf	clrBufferUSART@i,c
  3135  0025C8  501A               	movf	clrBufferUSART@i+1,w,c
  3136  0025CA  0A80               	xorlw	128
  3137  0025CC  0F80               	addlw	-128
  3138  0025CE  0E14               	movlw	20
  3139  0025D0  B4D8               	btfsc	status,2,c
  3140  0025D2  5C19               	subwf	clrBufferUSART@i,w,c
  3141  0025D4  B0D8               	btfsc	status,0,c
  3142  0025D6  D00F               	goto	l54
  3143                           
  3144                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3145  0025D8  0101               	movlb	1	; () banked
  3146  0025DA  0E28               	movlw	low _BluetoothDato
  3147  0025DC  2419               	addwf	clrBufferUSART@i,w,c
  3148  0025DE  6ED9               	movwf	fsr2l,c
  3149  0025E0  0101               	movlb	1	; () banked
  3150  0025E2  0E01               	movlw	high _BluetoothDato
  3151  0025E4  201A               	addwfc	clrBufferUSART@i+1,w,c
  3152  0025E6  6EDA               	movwf	fsr2h,c
  3153  0025E8  0E00               	movlw	0
  3154  0025EA  6EDF               	movwf	indf2,c
  3155                           
  3156                           ; BSR set to: 1
  3157                           ;Bluetooth.c: 72: cad = 0;
  3158  0025EC  0E00               	movlw	0
  3159  0025EE  6E3D               	movwf	_cad,c
  3160                           
  3161                           ; BSR set to: 1
  3162  0025F0  4A19               	infsnz	clrBufferUSART@i,f,c
  3163  0025F2  2A1A               	incf	clrBufferUSART@i+1,f,c
  3164  0025F4  D7E9               	goto	L2
  3165  0025F6                     l54:
  3166  0025F6  0012               	return	
  3167  0025F8                     __end_of_clrBufferUSART:
  3168                           	opt stack 0
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           indf0	equ	0xFEF
  3177                           postinc0	equ	0xFEE
  3178                           fsr0h	equ	0xFEA
  3179                           fsr0l	equ	0xFE9
  3180                           wreg	equ	0xFE8
  3181                           postinc1	equ	0xFE6
  3182                           postdec1	equ	0xFE5
  3183                           fsr1l	equ	0xFE1
  3184                           indf2	equ	0xFDF
  3185                           postinc2	equ	0xFDE
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _PWM_init2 *****************
  3191 ;; Defined at:
  3192 ;;		line 42 in file "pwm.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  period          1    wreg     unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  period          1   27[COMRAM] unsigned char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;		None               void
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3206 ;;      Params:         0       0       0       0       0       0       0       0       0
  3207 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3208 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3209 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3210 ;;Total ram usage:        1 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    5
  3213 ;; This function calls:
  3214 ;;		_OpenPWM2
  3215 ;; This function is called by:
  3216 ;;		_Comando_Tablet
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text15
  3221  0027A2                     __ptext15:
  3222                           	opt stack 0
  3223  0027A2                     _PWM_init2:
  3224                           	opt stack 24
  3225                           
  3226                           ;incstack = 0
  3227                           ;PWM_init2@period stored from wreg
  3228  0027A2  6E1C               	movwf	PWM_init2@period,c
  3229                           
  3230                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3231  0027A4  0EFE               	movlw	254
  3232  0027A6  6E47               	movwf	_Timer2Config,c
  3233                           
  3234                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3235  0027A8  5047               	movf	_Timer2Config,w,c
  3236  0027AA  0BFB               	andlw	251
  3237  0027AC  6ECA               	movwf	4042,c	;volatile
  3238                           
  3239                           ;pwm.c: 47: TMR2 = 0;
  3240  0027AE  0E00               	movlw	0
  3241  0027B0  6ECC               	movwf	4044,c	;volatile
  3242                           
  3243                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3244  0027B2  929E               	bcf	3998,1,c	;volatile
  3245                           
  3246                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3247  0027B4  929D               	bcf	3997,1,c	;volatile
  3248                           
  3249                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3250  0027B6  84CA               	bsf	4042,2,c	;volatile
  3251                           
  3252                           ;pwm.c: 51: OpenPWM2(period);
  3253  0027B8  501C               	movf	PWM_init2@period,w,c
  3254  0027BA  EC6C  F012         	call	_OpenPWM2
  3255                           
  3256                           ;pwm.c: 53: return;
  3257  0027BE  0012               	return	
  3258  0027C0                     __end_of_PWM_init2:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           intcon	equ	0xFF2
  3267                           indf0	equ	0xFEF
  3268                           postinc0	equ	0xFEE
  3269                           fsr0h	equ	0xFEA
  3270                           fsr0l	equ	0xFE9
  3271                           wreg	equ	0xFE8
  3272                           postinc1	equ	0xFE6
  3273                           postdec1	equ	0xFE5
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _OpenPWM2 *****************
  3282 ;; Defined at:
  3283 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  period          1    wreg     unsigned char 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  period          1   25[COMRAM] unsigned char 
  3288 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3289 ;;  pmmode          1    0        unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;		None               void
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0
  3300 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3301 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3302 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3303 ;;Total ram usage:        3 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    4
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_PWM_init2
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text16
  3314  0024D8                     __ptext16:
  3315                           	opt stack 0
  3316  0024D8                     _OpenPWM2:
  3317                           	opt stack 24
  3318                           
  3319                           ;incstack = 0
  3320                           ;OpenPWM2@period stored from wreg
  3321  0024D8  6E1A               	movwf	OpenPWM2@period,c
  3322  0024DA  0E0C               	movlw	12
  3323  0024DC  6EBA               	movwf	4026,c	;volatile
  3324  0024DE  0E05               	movlw	5
  3325  0024E0  6EF6               	movwf	tblptrl,c
  3326  0024E2                     	if	1	;There is more than 1 active tblptr byte
  3327  0024E2  0E00               	movlw	0
  3328  0024E4  6EF7               	movwf	tblptrh,c
  3329  0024E6                     	endif
  3330  0024E6                     	if	1	;There are 3 active tblptr bytes
  3331  0024E6  0E30               	movlw	48
  3332  0024E8  6EF8               	movwf	tblptru,c
  3333  0024EA                     	endif
  3334  0024EA  0008               	tblrd		*
  3335  0024EC  CFF5 F019          	movff	tablat,??_OpenPWM2
  3336  0024F0  A019               	btfss	??_OpenPWM2,0,c
  3337  0024F2  D002               	goto	l5054
  3338  0024F4  681B               	setf	OpenPWM2@ccp2mx,c
  3339  0024F6  D002               	goto	l533
  3340  0024F8                     l5054:
  3341  0024F8  0E00               	movlw	0
  3342  0024FA  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3343  0024FC                     l533:
  3344  0024FC  501B               	movf	OpenPWM2@ccp2mx,w,c
  3345  0024FE  B4D8               	btfsc	status,2,c
  3346  002500  D002               	goto	l534
  3347  002502  9294               	bcf	3988,1,c	;volatile
  3348  002504  D001               	goto	l535
  3349  002506                     l534:
  3350  002506  9693               	bcf	3987,3,c	;volatile
  3351  002508                     l535:
  3352  002508  94CA               	bcf	4042,2,c	;volatile
  3353  00250A  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3354  00250E  84CA               	bsf	4042,2,c	;volatile
  3355  002510  0012               	return	
  3356  002512                     __end_of_OpenPWM2:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           indf0	equ	0xFEF
  3366                           postinc0	equ	0xFEE
  3367                           fsr0h	equ	0xFEA
  3368                           fsr0l	equ	0xFE9
  3369                           wreg	equ	0xFE8
  3370                           postinc1	equ	0xFE6
  3371                           postdec1	equ	0xFE5
  3372                           fsr1l	equ	0xFE1
  3373                           indf2	equ	0xFDF
  3374                           postinc2	equ	0xFDE
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _PWM_init1 *****************
  3380 ;; Defined at:
  3381 ;;		line 20 in file "pwm.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  period          1    wreg     unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  period          1   25[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3395 ;;      Params:         0       0       0       0       0       0       0       0       0
  3396 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3398 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    5
  3402 ;; This function calls:
  3403 ;;		_OpenPWM1
  3404 ;; This function is called by:
  3405 ;;		_Comando_Tablet
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text17
  3410  0027C0                     __ptext17:
  3411                           	opt stack 0
  3412  0027C0                     _PWM_init1:
  3413                           	opt stack 24
  3414                           
  3415                           ;incstack = 0
  3416                           ;PWM_init1@period stored from wreg
  3417  0027C0  6E1A               	movwf	PWM_init1@period,c
  3418                           
  3419                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3420  0027C2  0EFE               	movlw	254
  3421  0027C4  6E47               	movwf	_Timer2Config,c
  3422                           
  3423                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3424  0027C6  5047               	movf	_Timer2Config,w,c
  3425  0027C8  0BFB               	andlw	251
  3426  0027CA  6ECA               	movwf	4042,c	;volatile
  3427                           
  3428                           ;pwm.c: 25: TMR2 = 0;
  3429  0027CC  0E00               	movlw	0
  3430  0027CE  6ECC               	movwf	4044,c	;volatile
  3431                           
  3432                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3433  0027D0  929E               	bcf	3998,1,c	;volatile
  3434                           
  3435                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3436  0027D2  929D               	bcf	3997,1,c	;volatile
  3437                           
  3438                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3439  0027D4  84CA               	bsf	4042,2,c	;volatile
  3440                           
  3441                           ;pwm.c: 29: OpenPWM1(period);
  3442  0027D6  501A               	movf	PWM_init1@period,w,c
  3443  0027D8  EC1C  F014         	call	_OpenPWM1
  3444                           
  3445                           ;pwm.c: 31: return;
  3446  0027DC  0012               	return	
  3447  0027DE                     __end_of_PWM_init1:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           indf0	equ	0xFEF
  3457                           postinc0	equ	0xFEE
  3458                           fsr0h	equ	0xFEA
  3459                           fsr0l	equ	0xFE9
  3460                           wreg	equ	0xFE8
  3461                           postinc1	equ	0xFE6
  3462                           postdec1	equ	0xFE5
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _OpenPWM1 *****************
  3471 ;; Defined at:
  3472 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  period          1    wreg     unsigned char 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  period          1   24[COMRAM] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;		None               void
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3486 ;;      Params:         0       0       0       0       0       0       0       0       0
  3487 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3489 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3490 ;;Total ram usage:        1 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    4
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_PWM_init1
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text18
  3501  002838                     __ptext18:
  3502                           	opt stack 0
  3503  002838                     _OpenPWM1:
  3504                           	opt stack 24
  3505                           
  3506                           ;incstack = 0
  3507                           ;OpenPWM1@period stored from wreg
  3508  002838  6E19               	movwf	OpenPWM1@period,c
  3509  00283A  0E0C               	movlw	12
  3510  00283C  12BD               	iorwf	4029,f,c	;volatile
  3511  00283E  9494               	bcf	3988,2,c	;volatile
  3512  002840  94CA               	bcf	4042,2,c	;volatile
  3513  002842  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3514  002846  84CA               	bsf	4042,2,c	;volatile
  3515  002848  0012               	return	
  3516  00284A                     __end_of_OpenPWM1:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           indf0	equ	0xFEF
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           postinc1	equ	0xFE6
  3531                           postdec1	equ	0xFE5
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _PWM_DutyCycle2 *****************
  3540 ;; Defined at:
  3541 ;;		line 55 in file "pwm.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  percentageDu    1    wreg     unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3546 ;;  DC              2   41[BANK0 ] unsigned int 
  3547 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;		None               void
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0
  3558 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3559 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3560 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3561 ;;Total ram usage:        9 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    6
  3564 ;; This function calls:
  3565 ;;		_SetDCPWM2
  3566 ;;		___ftmul
  3567 ;;		___fttol
  3568 ;;		___lbtoft
  3569 ;; This function is called by:
  3570 ;;		_Comando_Tablet
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text19
  3575  001FE2                     __ptext19:
  3576                           	opt stack 0
  3577  001FE2                     _PWM_DutyCycle2:
  3578                           	opt stack 23
  3579                           
  3580                           ;incstack = 0
  3581                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3582  001FE2  0100               	movlb	0	; () banked
  3583  001FE4  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3587  001FE6  0E00               	movlw	0
  3588  001FE8  0100               	movlb	0	; () banked
  3589  001FEA  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3590  001FEC  0E00               	movlw	0
  3591  001FEE  0100               	movlb	0	; () banked
  3592  001FF0  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3593  001FF2  0E00               	movlw	0
  3594  001FF4  0100               	movlb	0	; () banked
  3595  001FF6  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3596  001FF8  0E00               	movlw	0
  3597  001FFA  0100               	movlb	0	; () banked
  3598  001FFC  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3602  001FFE  0EAE               	movlw	174
  3603  002000  0100               	movlb	0	; () banked
  3604  002002  6F63               	movwf	___ftmul@f2& (0+255),b
  3605  002004  0E23               	movlw	35
  3606  002006  0100               	movlb	0	; () banked
  3607  002008  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3608  00200A  0E41               	movlw	65
  3609  00200C  0100               	movlb	0	; () banked
  3610  00200E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3611  002010  0100               	movlb	0	; () banked
  3612  002012  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3613  002014  EC9F  F013         	call	___lbtoft
  3614  002018  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3615  00201C  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3616  002020  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3617  002024  EC6F  F009         	call	___ftmul	;wreg free
  3618  002028  C060  F073         	movff	?___ftmul,___fttol@f1
  3619  00202C  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3620  002030  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3621  002034  EC1B  F00A         	call	___fttol	;wreg free
  3622  002038  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3623  00203C  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3624  002040  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3625  002044  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3626  002048  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3627  00204C  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3628                           
  3629                           ;pwm.c: 60: SetDCPWM2(DC);
  3630  002050  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3631  002054  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3632  002058  EC89  F012         	call	_SetDCPWM2	;wreg free
  3633                           
  3634                           ;pwm.c: 61: return;
  3635  00205C  0012               	return	
  3636  00205E                     __end_of_PWM_DutyCycle2:
  3637                           	opt stack 0
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           indf0	equ	0xFEF
  3646                           postinc0	equ	0xFEE
  3647                           fsr0h	equ	0xFEA
  3648                           fsr0l	equ	0xFE9
  3649                           wreg	equ	0xFE8
  3650                           postinc1	equ	0xFE6
  3651                           postdec1	equ	0xFE5
  3652                           fsr1l	equ	0xFE1
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function _SetDCPWM2 *****************
  3660 ;; Defined at:
  3661 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3666 ;; Return value:  Size  Location     Type
  3667 ;;		None               void
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3675 ;;      Params:         2       0       0       0       0       0       0       0       0
  3676 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3677 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3678 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3679 ;;Total ram usage:        6 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    4
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_PWM_DutyCycle2
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text20
  3690  002512                     __ptext20:
  3691                           	opt stack 0
  3692  002512                     _SetDCPWM2:
  3693                           	opt stack 24
  3694                           
  3695                           ;incstack = 0
  3696  002512  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  3697  002516  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  3698  00251A  0E06               	movlw	6
  3699  00251C                     u5355:
  3700  00251C  90D8               	bcf	status,0,c
  3701  00251E  361B               	rlcf	??_SetDCPWM2,f,c
  3702  002520  361C               	rlcf	??_SetDCPWM2+1,f,c
  3703  002522  2EE8               	decfsz	wreg,f,c
  3704  002524  D7FB               	goto	u5355
  3705  002526  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  3706  00252A  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  3707  00252E  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  3708  002532  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  3709  002536  90D8               	bcf	status,0,c
  3710  002538  321B               	rrcf	??_SetDCPWM2,f,c
  3711  00253A  90D8               	bcf	status,0,c
  3712  00253C  321B               	rrcf	??_SetDCPWM2,f,c
  3713  00253E  0E30               	movlw	48
  3714  002540  161B               	andwf	??_SetDCPWM2,f,c
  3715  002542  50BA               	movf	4026,w,c	;volatile
  3716  002544  0BCF               	andlw	207
  3717  002546  101B               	iorwf	??_SetDCPWM2,w,c
  3718  002548  6EBA               	movwf	4026,c	;volatile
  3719  00254A  0012               	return	
  3720  00254C                     __end_of_SetDCPWM2:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           indf0	equ	0xFEF
  3730                           postinc0	equ	0xFEE
  3731                           fsr0h	equ	0xFEA
  3732                           fsr0l	equ	0xFE9
  3733                           wreg	equ	0xFE8
  3734                           postinc1	equ	0xFE6
  3735                           postdec1	equ	0xFE5
  3736                           fsr1l	equ	0xFE1
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _PWM_DutyCycle1 *****************
  3744 ;; Defined at:
  3745 ;;		line 33 in file "pwm.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  percentageDu    1    wreg     unsigned char 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3750 ;;  DC              2   41[BANK0 ] unsigned int 
  3751 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;		None               void
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3761 ;;      Params:         0       0       0       0       0       0       0       0       0
  3762 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3763 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3764 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3765 ;;Total ram usage:        9 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    6
  3768 ;; This function calls:
  3769 ;;		_SetDCPWM1
  3770 ;;		___ftmul
  3771 ;;		___fttol
  3772 ;;		___lbtoft
  3773 ;; This function is called by:
  3774 ;;		_Comando_Tablet
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text21
  3779  00205E                     __ptext21:
  3780                           	opt stack 0
  3781  00205E                     _PWM_DutyCycle1:
  3782                           	opt stack 23
  3783                           
  3784                           ;incstack = 0
  3785                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  3786  00205E  0100               	movlb	0	; () banked
  3787  002060  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  3791  002062  0E00               	movlw	0
  3792  002064  0100               	movlb	0	; () banked
  3793  002066  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  3794  002068  0E00               	movlw	0
  3795  00206A  0100               	movlb	0	; () banked
  3796  00206C  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  3797  00206E  0E00               	movlw	0
  3798  002070  0100               	movlb	0	; () banked
  3799  002072  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  3800  002074  0E00               	movlw	0
  3801  002076  0100               	movlb	0	; () banked
  3802  002078  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  3806  00207A  0EAE               	movlw	174
  3807  00207C  0100               	movlb	0	; () banked
  3808  00207E  6F63               	movwf	___ftmul@f2& (0+255),b
  3809  002080  0E23               	movlw	35
  3810  002082  0100               	movlb	0	; () banked
  3811  002084  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3812  002086  0E41               	movlw	65
  3813  002088  0100               	movlb	0	; () banked
  3814  00208A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3815  00208C  0100               	movlb	0	; () banked
  3816  00208E  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  3817  002090  EC9F  F013         	call	___lbtoft
  3818  002094  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3819  002098  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3820  00209C  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3821  0020A0  EC6F  F009         	call	___ftmul	;wreg free
  3822  0020A4  C060  F073         	movff	?___ftmul,___fttol@f1
  3823  0020A8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3824  0020AC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3825  0020B0  EC1B  F00A         	call	___fttol	;wreg free
  3826  0020B4  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  3827  0020B8  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  3828  0020BC  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  3829  0020C0  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  3830  0020C4  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  3831  0020C8  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  3832                           
  3833                           ;pwm.c: 38: SetDCPWM1(DC);
  3834  0020CC  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  3835  0020D0  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  3836  0020D4  ECA6  F012         	call	_SetDCPWM1	;wreg free
  3837                           
  3838                           ;pwm.c: 39: return;
  3839  0020D8  0012               	return	
  3840  0020DA                     __end_of_PWM_DutyCycle1:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           indf0	equ	0xFEF
  3850                           postinc0	equ	0xFEE
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           postinc1	equ	0xFE6
  3855                           postdec1	equ	0xFE5
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function ___lbtoft *****************
  3864 ;; Defined at:
  3865 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  c               1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  c               1   35[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  3   32[COMRAM] float 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3879 ;;      Params:         3       0       0       0       0       0       0       0       0
  3880 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3882 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3883 ;;Total ram usage:        4 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    5
  3886 ;; This function calls:
  3887 ;;		___ftpack
  3888 ;; This function is called by:
  3889 ;;		_PWM_DutyCycle1
  3890 ;;		_PWM_DutyCycle2
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text22
  3895  00273E                     __ptext22:
  3896                           	opt stack 0
  3897  00273E                     ___lbtoft:
  3898                           	opt stack 23
  3899                           
  3900                           ;incstack = 0
  3901                           ;___lbtoft@c stored from wreg
  3902  00273E  6E24               	movwf	___lbtoft@c,c
  3903  002740  5024               	movf	___lbtoft@c,w,c
  3904  002742  6E19               	movwf	___ftpack@arg,c
  3905  002744  6A1A               	clrf	___ftpack@arg+1,c
  3906  002746  6A1B               	clrf	___ftpack@arg+2,c
  3907  002748  0E8E               	movlw	142
  3908  00274A  6E1C               	movwf	___ftpack@exp,c
  3909  00274C  0E00               	movlw	0
  3910  00274E  6E1D               	movwf	___ftpack@sign,c
  3911  002750  EC4F  F00D         	call	___ftpack	;wreg free
  3912  002754  C019  F021         	movff	?___ftpack,?___lbtoft
  3913  002758  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  3914  00275C  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  3915  002760  0012               	return	
  3916  002762                     __end_of___lbtoft:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           indf0	equ	0xFEF
  3926                           postinc0	equ	0xFEE
  3927                           fsr0h	equ	0xFEA
  3928                           fsr0l	equ	0xFE9
  3929                           wreg	equ	0xFE8
  3930                           postinc1	equ	0xFE6
  3931                           postdec1	equ	0xFE5
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _SetDCPWM1 *****************
  3940 ;; Defined at:
  3941 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3955 ;;      Params:         2       0       0       0       0       0       0       0       0
  3956 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3957 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3958 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3959 ;;Total ram usage:        6 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    4
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_PWM_DutyCycle1
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text23
  3970  00254C                     __ptext23:
  3971                           	opt stack 0
  3972  00254C                     _SetDCPWM1:
  3973                           	opt stack 24
  3974                           
  3975                           ;incstack = 0
  3976  00254C  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  3977  002550  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  3978  002554  0E06               	movlw	6
  3979  002556                     u5325:
  3980  002556  90D8               	bcf	status,0,c
  3981  002558  361B               	rlcf	??_SetDCPWM1,f,c
  3982  00255A  361C               	rlcf	??_SetDCPWM1+1,f,c
  3983  00255C  2EE8               	decfsz	wreg,f,c
  3984  00255E  D7FB               	goto	u5325
  3985  002560  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  3986  002564  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  3987  002568  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  3988  00256C  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  3989  002570  90D8               	bcf	status,0,c
  3990  002572  321B               	rrcf	??_SetDCPWM1,f,c
  3991  002574  90D8               	bcf	status,0,c
  3992  002576  321B               	rrcf	??_SetDCPWM1,f,c
  3993  002578  0E30               	movlw	48
  3994  00257A  161B               	andwf	??_SetDCPWM1,f,c
  3995  00257C  50BD               	movf	4029,w,c	;volatile
  3996  00257E  0BCF               	andlw	207
  3997  002580  101B               	iorwf	??_SetDCPWM1,w,c
  3998  002582  6EBD               	movwf	4029,c	;volatile
  3999  002584  0012               	return	
  4000  002586                     __end_of_SetDCPWM1:
  4001                           	opt stack 0
  4002                           tblptru	equ	0xFF8
  4003                           tblptrh	equ	0xFF7
  4004                           tblptrl	equ	0xFF6
  4005                           tablat	equ	0xFF5
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           indf0	equ	0xFEF
  4010                           postinc0	equ	0xFEE
  4011                           fsr0h	equ	0xFEA
  4012                           fsr0l	equ	0xFE9
  4013                           wreg	equ	0xFE8
  4014                           postinc1	equ	0xFE6
  4015                           postdec1	equ	0xFE5
  4016                           fsr1l	equ	0xFE1
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _Lcd_Write_Integer *****************
  4024 ;; Defined at:
  4025 ;;		line 113 in file "lcd.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  a               2   88[BANK0 ] int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  s              20   90[BANK0 ] unsigned char [20]
  4030 ;; Return value:  Size  Location     Type
  4031 ;;		None               void
  4032 ;; Registers used:
  4033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4039 ;;      Params:         0       2       0       0       0       0       0       0       0
  4040 ;;      Locals:         0      20       0       0       0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4042 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4043 ;;Total ram usage:       22 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    8
  4046 ;; This function calls:
  4047 ;;		_Lcd_Write_String
  4048 ;;		_sprintf
  4049 ;; This function is called by:
  4050 ;;		_Comando_Tablet
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text24
  4055  002586                     __ptext24:
  4056                           	opt stack 0
  4057  002586                     _Lcd_Write_Integer:
  4058                           	opt stack 21
  4059                           
  4060                           ;lcd.c: 114: unsigned char s[20];
  4061                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4062                           
  4063                           ;incstack = 0
  4064  002586  0100               	movlb	0	; () banked
  4065  002588  0E00               	movlw	high Lcd_Write_Integer@s
  4066  00258A  0100               	movlb	0	; () banked
  4067  00258C  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4068  00258E  0100               	movlb	0	; () banked
  4069  002590  0EBA               	movlw	low Lcd_Write_Integer@s
  4070  002592  0100               	movlb	0	; () banked
  4071  002594  6F88               	movwf	sprintf@sp& (0+255),b
  4072  002596  0E7F               	movlw	high STR_18
  4073  002598  0100               	movlb	0	; () banked
  4074  00259A  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4075  00259C  0EAA               	movlw	low STR_18
  4076  00259E  0100               	movlb	0	; () banked
  4077  0025A0  6F8A               	movwf	sprintf@f& (0+255),b
  4078  0025A2  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4079  0025A6  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4080  0025AA  EC0E  F000         	call	_sprintf	;wreg free
  4081                           
  4082                           ;lcd.c: 117: Lcd_Write_String(s);
  4083  0025AE  0100               	movlb	0	; () banked
  4084  0025B0  0E00               	movlw	high Lcd_Write_Integer@s
  4085  0025B2  6E1E               	movwf	Lcd_Write_String@a+1,c
  4086  0025B4  0100               	movlb	0	; () banked
  4087  0025B6  0EBA               	movlw	low Lcd_Write_Integer@s
  4088  0025B8  6E1D               	movwf	Lcd_Write_String@a,c
  4089  0025BA  EC6D  F010         	call	_Lcd_Write_String	;wreg free
  4090  0025BE  0012               	return	
  4091  0025C0                     __end_of_Lcd_Write_Integer:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           indf0	equ	0xFEF
  4101                           postinc0	equ	0xFEE
  4102                           fsr0h	equ	0xFEA
  4103                           fsr0l	equ	0xFE9
  4104                           wreg	equ	0xFE8
  4105                           postinc1	equ	0xFE6
  4106                           postdec1	equ	0xFE5
  4107                           fsr1l	equ	0xFE1
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _sprintf *****************
  4115 ;; Defined at:
  4116 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4119 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4120 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4121 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  vd              4   60[BANK0 ] unsigned long 
  4124 ;;  vd              4   64[BANK0 ] unsigned long 
  4125 ;;  _val            5   77[BANK0 ] struct .
  4126 ;;  fval            3   84[BANK0 ] struct .
  4127 ;;  integ           3   72[BANK0 ] struct .
  4128 ;;  ival            3    0        struct .
  4129 ;;  exp             2   82[BANK0 ] int 
  4130 ;;  prec            2   75[BANK0 ] int 
  4131 ;;  flag            2   70[BANK0 ] unsigned short 
  4132 ;;  ap              2   68[BANK0 ] PTR void [1]
  4133 ;;		 -> ?_sprintf(2), 
  4134 ;;  width           2    0        int 
  4135 ;;  c               1   87[BANK0 ] char 
  4136 ;;  d               1    0        unsigned char 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  2   40[BANK0 ] int 
  4139 ;; Registers used:
  4140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4146 ;;      Params:         0       7       0       0       0       0       0       0       0
  4147 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4148 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4149 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4150 ;;Total ram usage:       48 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    7
  4153 ;; This function calls:
  4154 ;;		___awdiv
  4155 ;;		___ftadd
  4156 ;;		___ftge
  4157 ;;		___ftmul
  4158 ;;		___ftneg
  4159 ;;		___ftsub
  4160 ;;		___fttol
  4161 ;;		___lldiv
  4162 ;;		___llmod
  4163 ;;		___lltoft
  4164 ;;		___wmul
  4165 ;;		__div_to_l_
  4166 ;;		__tdiv_to_l_
  4167 ;;		_fround
  4168 ;;		_scale
  4169 ;; This function is called by:
  4170 ;;		_putcBluetoothInt
  4171 ;;		_Lcd_Write_Integer
  4172 ;;		_Lcd_Write_Float
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text25
  4177  00001C                     __ptext25:
  4178                           	opt stack 0
  4179  00001C                     _sprintf:
  4180                           	opt stack 21
  4181                           
  4182                           ;doprnt.c: 494: va_list ap;
  4183                           ;doprnt.c: 499: signed char c;
  4184                           ;doprnt.c: 501: int width;
  4185                           ;doprnt.c: 504: int prec;
  4186                           ;doprnt.c: 508: unsigned short flag;
  4187                           ;doprnt.c: 515: char d;
  4188                           ;doprnt.c: 516: double fval, integ;
  4189                           ;doprnt.c: 517: int exp;
  4190                           ;doprnt.c: 518: double ival;
  4191                           ;doprnt.c: 519: union {
  4192                           ;doprnt.c: 520: unsigned long _val;
  4193                           ;doprnt.c: 521: struct {
  4194                           ;doprnt.c: 522: const char * _cp;
  4195                           ;doprnt.c: 523: unsigned _len;
  4196                           ;doprnt.c: 524: } _str;
  4197                           ;doprnt.c: 525: } _val;
  4198                           ;doprnt.c: 542: *ap = __va_start();
  4199                           
  4200                           ;incstack = 0
  4201  00001C  0100               	movlb	0	; () banked
  4202  00001E  0E00               	movlw	high (?_sprintf+4)
  4203  000020  0100               	movlb	0	; () banked
  4204  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4205  000024  0100               	movlb	0	; () banked
  4206  000026  0E8C               	movlw	low (?_sprintf+4)
  4207  000028  0100               	movlb	0	; () banked
  4208  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4209                           
  4210                           ;doprnt.c: 545: while(c = *f++) {
  4211  00002C  EF87  F004         	goto	l5010
  4212  000030                     l4808:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;doprnt.c: 547: if(c != '%')
  4216  000030  0100               	movlb	0	; () banked
  4217  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4218  000034  0A25               	xorlw	37
  4219  000036  B4D8               	btfsc	status,2,c
  4220  000038  D00C               	goto	l4814
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;doprnt.c: 549: {
  4224                           ;doprnt.c: 550: ((*sp++ = (c)));
  4225  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4226  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4227  000042  0100               	movlb	0	; () banked
  4228  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4229                           
  4230                           ; BSR set to: 0
  4231  000048  0100               	movlb	0	; () banked
  4232  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4233  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4234                           
  4235                           ;doprnt.c: 551: continue;
  4236  00004E  EF87  F004         	goto	l5010
  4237  000052                     l4814:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;doprnt.c: 552: }
  4241                           ;doprnt.c: 557: flag = 0;
  4242  000052  0E00               	movlw	0
  4243  000054  0100               	movlb	0	; () banked
  4244  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4245  000058  0E00               	movlw	0
  4246  00005A  0100               	movlb	0	; () banked
  4247  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4248                           
  4249                           ;doprnt.c: 644: switch(c = *f++) {
  4250  00005E  D003               	goto	l4820
  4251  000060                     l4816:
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;doprnt.c: 672: flag |= 0x400;
  4255  000060  0100               	movlb	0	; () banked
  4256  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4257                           
  4258                           ;doprnt.c: 673: break;
  4259  000064  D01E               	goto	l4822
  4260  000066                     l4820:
  4261                           
  4262                           ; BSR set to: 0
  4263  000066  0100               	movlb	0	; () banked
  4264  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4265  00006C  0100               	movlb	0	; () banked
  4266  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4267  000072  0100               	movlb	0	; () banked
  4268  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4269  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4270  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4271  000078  6AF8               	clrf	tblptru,c
  4272  00007A                     	endif
  4273  00007A                     	if	0	;tblptru may be non-zero
  4274  00007A                     	endif
  4275  00007A  0008               	tblrd		*
  4276  00007C  0100               	movlb	0	; () banked
  4277  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4278  000082  0100               	movlb	0	; () banked
  4279  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4280                           
  4281                           ; Switch size 1, requested type "space"
  4282                           ; Number of cases is 4, Range of values is 0 to 105
  4283                           ; switch strategies available:
  4284                           ; Name         Instructions Cycles
  4285                           ; simple_byte           13     7 (average)
  4286                           ;	Chosen strategy is simple_byte
  4287  000086  0A00               	xorlw	0	; case 0
  4288  000088  B4D8               	btfsc	status,2,c
  4289  00008A  EF99  F004         	goto	l5012
  4290  00008E  0A64               	xorlw	100	; case 100
  4291  000090  B4D8               	btfsc	status,2,c
  4292  000092  D007               	goto	l4822
  4293  000094  0A02               	xorlw	2	; case 102
  4294  000096  B4D8               	btfsc	status,2,c
  4295  000098  D7E3               	goto	l4816
  4296  00009A  0A0F               	xorlw	15	; case 105
  4297  00009C  A4D8               	btfss	status,2,c
  4298  00009E  EF87  F004         	goto	l5010
  4299  0000A2                     l4822:
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;doprnt.c: 834: if(flag & (0x700)) {
  4303  0000A2  0E07               	movlw	7
  4304  0000A4  0100               	movlb	0	; () banked
  4305  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4306  0000A8  B4D8               	btfsc	status,2,c
  4307  0000AA  D348               	goto	l4970
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 838: prec = 6;
  4311  0000AC  0E00               	movlw	0
  4312  0000AE  0100               	movlb	0	; () banked
  4313  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4314  0000B2  0E06               	movlw	6
  4315  0000B4  0100               	movlb	0	; () banked
  4316  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4320  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4321  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4322  0000C0  0100               	movlb	0	; () banked
  4323  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4324  0000C6  0100               	movlb	0	; () banked
  4325  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4326  0000CC  0100               	movlb	0	; () banked
  4327  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4328                           
  4329                           ; BSR set to: 0
  4330  0000D2  0E03               	movlw	3
  4331  0000D4  0100               	movlb	0	; () banked
  4332  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4333  0000D8  0E00               	movlw	0
  4334  0000DA  0100               	movlb	0	; () banked
  4335  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 840: if(fval < 0.0) {
  4339  0000DE  0100               	movlb	0	; () banked
  4340  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4341  0000E2  0A80               	xorlw	128
  4342  0000E4  0F80               	addlw	128
  4343  0000E6  E107               	bnz	u5005
  4344  0000E8  0E00               	movlw	0
  4345  0000EA  0100               	movlb	0	; () banked
  4346  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4347  0000EE  E103               	bnz	u5005
  4348  0000F0  0E00               	movlw	0
  4349  0000F2  0100               	movlb	0	; () banked
  4350  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4351  0000F6                     u5005:
  4352  0000F6  B0D8               	btfsc	status,0,c
  4353  0000F8  D011               	goto	l4836
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;doprnt.c: 841: fval = -fval;
  4357  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4358  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4359  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4360  000106  EC8C  F013         	call	___ftneg	;wreg free
  4361  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4362  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4363  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4364                           
  4365                           ;doprnt.c: 842: flag |= 0x03;
  4366  000116  0E03               	movlw	3
  4367  000118  0100               	movlb	0	; () banked
  4368  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4369  00011C                     l4836:
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;doprnt.c: 843: }
  4373                           ;doprnt.c: 844: exp = 0;
  4374  00011C  0E00               	movlw	0
  4375  00011E  0100               	movlb	0	; () banked
  4376  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4377  000122  0E00               	movlw	0
  4378  000124  0100               	movlb	0	; () banked
  4379  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;doprnt.c: 845: if( fval!=0) {
  4383  000128  0E7F               	movlw	127
  4384  00012A  0100               	movlb	0	; () banked
  4385  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4386  00012E  0100               	movlb	0	; () banked
  4387  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4388  000132  0100               	movlb	0	; () banked
  4389  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4390  000136  B4D8               	btfsc	status,2,c
  4391  000138  D09C               	goto	l4864
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4395  00013A  0E82               	movlw	130
  4396  00013C  0100               	movlb	0	; () banked
  4397  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4398  000140  0EFF               	movlw	255
  4399  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4400  000144  0100               	movlb	0	; () banked
  4401  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4402  00014A  0100               	movlb	0	; () banked
  4403  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4404  000150  0100               	movlb	0	; () banked
  4405  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4406  000156  0100               	movlb	0	; () banked
  4407  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4408  00015C  0E10               	movlw	16
  4409  00015E  D006               	goto	u5020
  4410  000160                     u5025:
  4411  000160  0100               	movlb	0	; () banked
  4412  000162  90D8               	bcf	status,0,c
  4413  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4414  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4415  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4416  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4417  00016C                     u5020:
  4418  00016C  2EE8               	decfsz	wreg,f,c
  4419  00016E  D7F8               	goto	u5025
  4420  000170  0100               	movlb	0	; () banked
  4421  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4422  000174  0100               	movlb	0	; () banked
  4423  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4424  000178  0100               	movlb	0	; () banked
  4425  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4426  00017C  0E00               	movlw	0
  4427  00017E  0100               	movlb	0	; () banked
  4428  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4429  000182  0100               	movlb	0	; () banked
  4430  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;doprnt.c: 847: exp--;
  4434  000186  0100               	movlb	0	; () banked
  4435  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4436  00018A  A0D8               	btfss	status,0,c
  4437  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;doprnt.c: 848: exp *= 3;
  4441  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4442  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4443  000196  0E00               	movlw	0
  4444  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4445  00019A  0E03               	movlw	3
  4446  00019C  6E29               	movwf	___wmul@multiplicand,c
  4447  00019E  EC79  F013         	call	___wmul	;wreg free
  4448  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4449  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4450                           
  4451                           ;doprnt.c: 849: exp /= 10;
  4452  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4453  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4454  0001B2  0E00               	movlw	0
  4455  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4456  0001B6  0E0A               	movlw	10
  4457  0001B8  6E21               	movwf	___awdiv@divisor,c
  4458  0001BA  ECF6  F00D         	call	___awdiv	;wreg free
  4459  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4460  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4461                           
  4462                           ;doprnt.c: 850: if(exp < 0)
  4463  0001C6  0100               	movlb	0	; () banked
  4464  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4465  0001CA  0A80               	xorlw	128
  4466  0001CC  6EF3               	movwf	prodl,c
  4467  0001CE  0E80               	movlw	128
  4468  0001D0  5CF3               	subwf	prodl,w,c
  4469  0001D2  0E00               	movlw	0
  4470  0001D4  B4D8               	btfsc	status,2,c
  4471  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4472  0001D8  B0D8               	btfsc	status,0,c
  4473  0001DA  D004               	goto	l4852
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;doprnt.c: 851: exp--;
  4477  0001DC  0100               	movlb	0	; () banked
  4478  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4479  0001E0  A0D8               	btfss	status,0,c
  4480  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4481  0001E4                     l4852:
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;doprnt.c: 855: integ = scale(-exp);
  4485  0001E4  0100               	movlb	0	; () banked
  4486  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4487  0001E8  0800               	sublw	0
  4488  0001EA  ECA0  F004         	call	_scale
  4489  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4490  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4491  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4492                           
  4493                           ;doprnt.c: 856: integ *= fval;
  4494  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4495  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4496  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4497  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4498  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4499  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4500  000212  EC6F  F009         	call	___ftmul	;wreg free
  4501  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4502  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4503  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4504                           
  4505                           ;doprnt.c: 857: if(integ < 1.0)
  4506  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4507  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4508  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4509  00022E  0E00               	movlw	0
  4510  000230  6E1C               	movwf	___ftge@ff2,c
  4511  000232  0E80               	movlw	128
  4512  000234  6E1D               	movwf	___ftge@ff2+1,c
  4513  000236  0E3F               	movlw	63
  4514  000238  6E1E               	movwf	___ftge@ff2+2,c
  4515  00023A  EC25  F00F         	call	___ftge	;wreg free
  4516  00023E  B0D8               	btfsc	status,0,c
  4517  000240  D005               	goto	l4860
  4518                           
  4519                           ;doprnt.c: 858: exp--;
  4520  000242  0100               	movlb	0	; () banked
  4521  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4522  000246  A0D8               	btfss	status,0,c
  4523  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4524  00024A  D013               	goto	l4864
  4525  00024C                     l4860:
  4526                           
  4527                           ;doprnt.c: 859: else if(integ >= 10.0)
  4528  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4529  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4530  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4531  000258  0E00               	movlw	0
  4532  00025A  6E1C               	movwf	___ftge@ff2,c
  4533  00025C  0E20               	movlw	32
  4534  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4535  000260  0E41               	movlw	65
  4536  000262  6E1E               	movwf	___ftge@ff2+2,c
  4537  000264  EC25  F00F         	call	___ftge	;wreg free
  4538  000268  A0D8               	btfss	status,0,c
  4539  00026A  D003               	goto	l4864
  4540                           
  4541                           ;doprnt.c: 860: exp++;
  4542  00026C  0100               	movlb	0	; () banked
  4543  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4544  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4545  000272                     l4864:
  4546                           
  4547                           ;doprnt.c: 861: }
  4548                           ;doprnt.c: 1121: if(prec <= 12)
  4549  000272  0100               	movlb	0	; () banked
  4550  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4551  000276  0A80               	xorlw	128
  4552  000278  6EF3               	movwf	prodl,c
  4553  00027A  0E80               	movlw	128
  4554  00027C  5CF3               	subwf	prodl,w,c
  4555  00027E  0E0D               	movlw	13
  4556  000280  B4D8               	btfsc	status,2,c
  4557  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4558  000284  B0D8               	btfsc	status,0,c
  4559  000286  D018               	goto	l4868
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;doprnt.c: 1122: fval += fround(prec);
  4563  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4564  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4565  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4566  000294  0100               	movlb	0	; () banked
  4567  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4568  000298  ECDC  F006         	call	_fround
  4569  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4570  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4571  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4572  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4573  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4574  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4575  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4576  0002B8                     l4868:
  4577                           
  4578                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4579  0002B8  0100               	movlb	0	; () banked
  4580  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4581  0002BC  0A80               	xorlw	128
  4582  0002BE  6EF3               	movwf	prodl,c
  4583  0002C0  0E80               	movlw	128
  4584  0002C2  5CF3               	subwf	prodl,w,c
  4585  0002C4  0E0A               	movlw	10
  4586  0002C6  B4D8               	btfsc	status,2,c
  4587  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4588  0002CA  B0D8               	btfsc	status,0,c
  4589  0002CC  D029               	goto	l4876
  4590                           
  4591                           ; BSR set to: 0
  4592  0002CE  0E7F               	movlw	127
  4593  0002D0  0100               	movlb	0	; () banked
  4594  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4595  0002D4  0100               	movlb	0	; () banked
  4596  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4597  0002D8  0100               	movlb	0	; () banked
  4598  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4599  0002DC  B4D8               	btfsc	status,2,c
  4600  0002DE  D06C               	goto	l4892
  4601                           
  4602                           ; BSR set to: 0
  4603  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4604  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4605  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4606  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4607  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4608  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4609  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4610  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4611  000300  0100               	movlb	0	; () banked
  4612  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4613  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4614  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4615  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4616  00030A  A4D8               	btfss	status,2,c
  4617  00030C  D055               	goto	l4892
  4618                           
  4619                           ; BSR set to: 0
  4620  00030E  0100               	movlb	0	; () banked
  4621  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4622  000312  0A80               	xorlw	128
  4623  000314  0F80               	addlw	-128
  4624  000316  0E02               	movlw	2
  4625  000318  B4D8               	btfsc	status,2,c
  4626  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4627  00031C  A0D8               	btfss	status,0,c
  4628  00031E  D04C               	goto	l4892
  4629  000320                     l4876:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4633  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4634  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4635  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4636  00032C  0E70               	movlw	112
  4637  00032E  6E1C               	movwf	___ftge@ff2,c
  4638  000330  0E89               	movlw	137
  4639  000332  6E1D               	movwf	___ftge@ff2+1,c
  4640  000334  0E40               	movlw	64
  4641  000336  6E1E               	movwf	___ftge@ff2+2,c
  4642  000338  EC25  F00F         	call	___ftge	;wreg free
  4643  00033C  B0D8               	btfsc	status,0,c
  4644  00033E  D003               	goto	l4880
  4645                           
  4646                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4647  000340  0100               	movlb	0	; () banked
  4648  000342  0EF7               	movlw	247
  4649  000344  D002               	goto	L3
  4650  000346                     l4880:
  4651                           
  4652                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4653  000346  0100               	movlb	0	; () banked
  4654  000348  0EF8               	movlw	248
  4655  00034A                     L3:
  4656  00034A  0100               	movlb	0	; () banked
  4657  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  4658  00034E  0EFF               	movlw	255
  4659  000350  0100               	movlb	0	; () banked
  4660  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;doprnt.c: 1133: }
  4664                           ;doprnt.c: 1134: integ = scale(exp);
  4665                           
  4666                           ; BSR set to: 0
  4667  000354  0100               	movlb	0	; () banked
  4668  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  4669  000358  ECA0  F004         	call	_scale
  4670  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  4671  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4672  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4673                           
  4674                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4675  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4676  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4677  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4678  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4679  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4680  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4681  000380  ECF8  F00B         	call	__tdiv_to_l_	;wreg free
  4682  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1236
  4683  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1236+1
  4684  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1236+2
  4685  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1236+3
  4686  000394  C098  F0AD         	movff	_sprintf$1236,sprintf@_val
  4687  000398  C099  F0AE         	movff	_sprintf$1236+1,sprintf@_val+1
  4688  00039C  C09A  F0AF         	movff	_sprintf$1236+2,sprintf@_val+2
  4689  0003A0  C09B  F0B0         	movff	_sprintf$1236+3,sprintf@_val+3
  4690                           
  4691                           ;doprnt.c: 1138: fval = 0.0;
  4692  0003A4  0E00               	movlw	0
  4693  0003A6  0100               	movlb	0	; () banked
  4694  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  4695  0003AA  0E00               	movlw	0
  4696  0003AC  0100               	movlb	0	; () banked
  4697  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4698  0003B0  0E00               	movlw	0
  4699  0003B2  0100               	movlb	0	; () banked
  4700  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4701                           
  4702                           ;doprnt.c: 1139: } else {
  4703  0003B6  D034               	goto	l4896
  4704  0003B8                     l4892:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  4708  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4709  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4710  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4711  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  4712  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  4713  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4714  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4715  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4716                           
  4717                           ;doprnt.c: 1141: fval -= (double)_val._val;
  4718  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  4719  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  4720  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  4721  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  4722  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  4723  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  4724  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  4725  0003F4  EC87  F011         	call	___lltoft	;wreg free
  4726  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  4727  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  4728  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  4729  000404  EC4E  F012         	call	___ftsub	;wreg free
  4730  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  4731  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  4732  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  4733                           
  4734                           ;doprnt.c: 1142: exp = 0;
  4735  000414  0E00               	movlw	0
  4736  000416  0100               	movlb	0	; () banked
  4737  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4738  00041A  0E00               	movlw	0
  4739  00041C  0100               	movlb	0	; () banked
  4740  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  4741  000420                     l4896:
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;doprnt.c: 1143: }
  4745                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4746  000420  0E01               	movlw	1
  4747  000422  0100               	movlb	0	; () banked
  4748  000424  6FB7               	movwf	sprintf@c& (0+255),b
  4749  000426                     
  4750                           ; BSR set to: 0
  4751  000426  0100               	movlb	0	; () banked
  4752  000428  51B7               	movf	sprintf@c& (0+255),w,b
  4753  00042A  0A0A               	xorlw	10
  4754  00042C  B4D8               	btfsc	status,2,c
  4755  00042E  D021               	goto	l4910
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  4759                           
  4760                           ; BSR set to: 0
  4761                           
  4762                           ; BSR set to: 0
  4763  000430  0100               	movlb	0	; () banked
  4764  000432  51B7               	movf	sprintf@c& (0+255),w,b
  4765  000434  0D04               	mullw	4
  4766  000436  0ECB               	movlw	low _dpowers
  4767  000438  24F3               	addwf	prodl,w,c
  4768  00043A  6EF6               	movwf	tblptrl,c
  4769  00043C  0E7E               	movlw	high _dpowers
  4770  00043E  20F4               	addwfc	prodh,w,c
  4771  000440  6EF7               	movwf	tblptrh,c
  4772  000442                     	if	1	;There are 3 active tblptr bytes
  4773  000442  6AF8               	clrf	tblptru,c
  4774  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  4775  000446  22F8               	addwfc	tblptru,f,c
  4776  000448                     	endif
  4777  000448  0009               	tblrd		*+
  4778  00044A  50F5               	movf	tablat,w,c
  4779  00044C  0100               	movlb	0	; () banked
  4780  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4781  000450  0009               	tblrd		*+
  4782  000452  50F5               	movf	tablat,w,c
  4783  000454  0100               	movlb	0	; () banked
  4784  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4785  000458  0009               	tblrd		*+
  4786  00045A  50F5               	movf	tablat,w,c
  4787  00045C  0100               	movlb	0	; () banked
  4788  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4789  000460  0009               	tblrd		*+
  4790  000462  50F5               	movf	tablat,w,c
  4791  000464  0100               	movlb	0	; () banked
  4792  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4793  000468  A0D8               	btfss	status,0,c
  4794  00046A  D003               	goto	l4910
  4795                           
  4796                           ; BSR set to: 0
  4797                           
  4798                           ; BSR set to: 0
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;doprnt.c: 1147: break;
  4802  00046C  0100               	movlb	0	; () banked
  4803  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  4804  000470  D7DA               	goto	L4
  4805  000472                     l4910:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;doprnt.c: 1184: {
  4809                           ;doprnt.c: 1197: if(flag & 0x03)
  4810  000472  0E03               	movlw	3
  4811  000474  0100               	movlb	0	; () banked
  4812  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  4813  000478  0100               	movlb	0	; () banked
  4814  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  4815  00047C  0E00               	movlw	0
  4816  00047E  0100               	movlb	0	; () banked
  4817  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4818  000482  0100               	movlb	0	; () banked
  4819  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4820  000486  0100               	movlb	0	; () banked
  4821  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4822  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  4823  00048C  B4D8               	btfsc	status,2,c
  4824  00048E  D055               	goto	l4924
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  4828  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  4829  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4830  000498  0E2D               	movlw	45
  4831  00049A  D04B               	goto	L5
  4832  00049C                     l4916:
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;doprnt.c: 1209: {
  4836                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  4837  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4838  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4839  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4840  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4841  0004AC  0100               	movlb	0	; () banked
  4842  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  4843  0004B0  0D04               	mullw	4
  4844  0004B2  0ECB               	movlw	low _dpowers
  4845  0004B4  24F3               	addwf	prodl,w,c
  4846  0004B6  6EF6               	movwf	tblptrl,c
  4847  0004B8  0E7E               	movlw	high _dpowers
  4848  0004BA  20F4               	addwfc	prodh,w,c
  4849  0004BC  6EF7               	movwf	tblptrh,c
  4850  0004BE                     	if	1	;There are 3 active tblptr bytes
  4851  0004BE  6AF8               	clrf	tblptru,c
  4852  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4853  0004C2  22F8               	addwfc	tblptru,f,c
  4854  0004C4                     	endif
  4855  0004C4  0009               	tblrd		*+
  4856  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4857  0004CA  0009               	tblrd		*+
  4858  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4859  0004D0  0009               	tblrd		*+
  4860  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4861  0004D6  000A               	tblrd		*-
  4862  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4863  0004DC  ECB0  F00F         	call	___lldiv	;wreg free
  4864  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  4865  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  4866  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  4867  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  4868                           
  4869                           ;doprnt.c: 1211: vd %= 10;
  4870  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  4871  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  4872  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  4873  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  4874  000500  0E0A               	movlw	10
  4875  000502  6E2A               	movwf	___llmod@divisor,c
  4876  000504  0E00               	movlw	0
  4877  000506  6E2B               	movwf	___llmod@divisor+1,c
  4878  000508  0E00               	movlw	0
  4879  00050A  6E2C               	movwf	___llmod@divisor+2,c
  4880  00050C  0E00               	movlw	0
  4881  00050E  6E2D               	movwf	___llmod@divisor+3,c
  4882  000510  EC54  F011         	call	___llmod	;wreg free
  4883  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  4884  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  4885  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  4886  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  4887                           
  4888                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  4889  000524  0100               	movlb	0	; () banked
  4890  000526  519C               	movf	sprintf@vd& (0+255),w,b
  4891  000528  0F30               	addlw	48
  4892  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4893  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4894  000532                     L5:
  4895  000532  6EDF               	movwf	indf2,c
  4896                           
  4897                           ; BSR set to: 0
  4898  000534  0100               	movlb	0	; () banked
  4899  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4900  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4901  00053A                     l4924:
  4902                           
  4903                           ; BSR set to: 0
  4904  00053A  0100               	movlb	0	; () banked
  4905  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  4906  00053E  0100               	movlb	0	; () banked
  4907  000540  29B7               	incf	sprintf@c& (0+255),w,b
  4908  000542  B4D8               	btfsc	status,2,c
  4909  000544  D00E               	goto	l4932
  4910  000546  D7AA               	goto	l4916
  4911  000548                     l4926:
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  4915  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  4916  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4917  000550  0E30               	movlw	48
  4918  000552  6EDF               	movwf	indf2,c
  4919                           
  4920                           ; BSR set to: 0
  4921  000554  0100               	movlb	0	; () banked
  4922  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4923  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;doprnt.c: 1218: exp--;
  4927  00055A  0100               	movlb	0	; () banked
  4928  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  4929  00055E  A0D8               	btfss	status,0,c
  4930  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4931  000562                     l4932:
  4932                           
  4933                           ; BSR set to: 0
  4934  000562  0100               	movlb	0	; () banked
  4935  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4936  000566  0A80               	xorlw	128
  4937  000568  6EF3               	movwf	prodl,c
  4938  00056A  0E80               	movlw	128
  4939  00056C  5CF3               	subwf	prodl,w,c
  4940  00056E  0E01               	movlw	1
  4941  000570  B4D8               	btfsc	status,2,c
  4942  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4943  000574  B0D8               	btfsc	status,0,c
  4944  000576  D7E8               	goto	l4926
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;doprnt.c: 1219: }
  4948                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4949                           
  4950                           ; BSR set to: 0
  4951  000578  0100               	movlb	0	; () banked
  4952  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4953  00057C  0A80               	xorlw	128
  4954  00057E  0F80               	addlw	-128
  4955  000580  0E09               	movlw	9
  4956  000582  B4D8               	btfsc	status,2,c
  4957  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4958  000586  A0D8               	btfss	status,0,c
  4959  000588  D004               	goto	l480
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4963  00058A  0E08               	movlw	8
  4964  00058C  0100               	movlb	0	; () banked
  4965  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  4966  000590  D002               	goto	l4938
  4967  000592                     l480:
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;doprnt.c: 1222: else
  4971                           ;doprnt.c: 1223: c = prec;
  4972  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  4973  000596                     l4938:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;doprnt.c: 1224: prec -= c;
  4977  000596  0100               	movlb	0	; () banked
  4978  000598  51B7               	movf	sprintf@c& (0+255),w,b
  4979  00059A  0100               	movlb	0	; () banked
  4980  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  4981  00059E  0E00               	movlw	0
  4982  0005A0  0100               	movlb	0	; () banked
  4983  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  4984  0005A4  0EFF               	movlw	255
  4985  0005A6  0100               	movlb	0	; () banked
  4986  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;doprnt.c: 1228: if(c)
  4990  0005AA  0100               	movlb	0	; () banked
  4991  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  4992  0005AE  B4D8               	btfsc	status,2,c
  4993  0005B0  D009               	goto	l4946
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  4997  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  4998  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4999  0005BA  0E2E               	movlw	46
  5000  0005BC  6EDF               	movwf	indf2,c
  5001                           
  5002                           ; BSR set to: 0
  5003  0005BE  0100               	movlb	0	; () banked
  5004  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5005  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5006  0005C4                     l4946:
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5010  0005C4  0100               	movlb	0	; () banked
  5011  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5012  0005C8  ECA0  F004         	call	_scale
  5013  0005CC  C06C  F095         	movff	?_scale,_sprintf$2288
  5014  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2288+1
  5015  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2288+2
  5016                           
  5017                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5018  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5019  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5020  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5021  0005E4  C095  F060         	movff	_sprintf$2288,___ftmul@f1
  5022  0005E8  C096  F061         	movff	_sprintf$2288+1,___ftmul@f1+1
  5023  0005EC  C097  F062         	movff	_sprintf$2288+2,___ftmul@f1+2
  5024  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5025  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5026  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5027  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5028  000600  EC1B  F00A         	call	___fttol	;wreg free
  5029  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5030  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5031  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5032  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5033                           
  5034                           ;doprnt.c: 1237: while(c--) {
  5035  000614  D079               	goto	l4960
  5036  000616                     l4950:
  5037                           
  5038                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5039  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5040  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5041  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5042  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5043  000626  0100               	movlb	0	; () banked
  5044  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5045  00062A  0D04               	mullw	4
  5046  00062C  0ECB               	movlw	low _dpowers
  5047  00062E  24F3               	addwf	prodl,w,c
  5048  000630  6EF6               	movwf	tblptrl,c
  5049  000632  0E7E               	movlw	high _dpowers
  5050  000634  20F4               	addwfc	prodh,w,c
  5051  000636  6EF7               	movwf	tblptrh,c
  5052  000638                     	if	1	;There are 3 active tblptr bytes
  5053  000638  6AF8               	clrf	tblptru,c
  5054  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5055  00063C  22F8               	addwfc	tblptru,f,c
  5056  00063E                     	endif
  5057  00063E  0009               	tblrd		*+
  5058  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5059  000644  0009               	tblrd		*+
  5060  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5061  00064A  0009               	tblrd		*+
  5062  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5063  000650  000A               	tblrd		*-
  5064  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5065  000656  ECB0  F00F         	call	___lldiv	;wreg free
  5066  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1238
  5067  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1238+1
  5068  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1238+2
  5069  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1238+3
  5070                           
  5071                           ;doprnt.c: 1239: vd %= 10;
  5072  00066A  C0A0  F026         	movff	sprintf@vd_1238,___llmod@dividend
  5073  00066E  C0A1  F027         	movff	sprintf@vd_1238+1,___llmod@dividend+1
  5074  000672  C0A2  F028         	movff	sprintf@vd_1238+2,___llmod@dividend+2
  5075  000676  C0A3  F029         	movff	sprintf@vd_1238+3,___llmod@dividend+3
  5076  00067A  0E0A               	movlw	10
  5077  00067C  6E2A               	movwf	___llmod@divisor,c
  5078  00067E  0E00               	movlw	0
  5079  000680  6E2B               	movwf	___llmod@divisor+1,c
  5080  000682  0E00               	movlw	0
  5081  000684  6E2C               	movwf	___llmod@divisor+2,c
  5082  000686  0E00               	movlw	0
  5083  000688  6E2D               	movwf	___llmod@divisor+3,c
  5084  00068A  EC54  F011         	call	___llmod	;wreg free
  5085  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1238
  5086  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1238+1
  5087  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1238+2
  5088  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1238+3
  5089                           
  5090                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5091  00069E  0100               	movlb	0	; () banked
  5092  0006A0  51A0               	movf	sprintf@vd_1238& (0+255),w,b
  5093  0006A2  0F30               	addlw	48
  5094  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5095  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5096  0006AC  6EDF               	movwf	indf2,c
  5097                           
  5098                           ; BSR set to: 0
  5099  0006AE  0100               	movlb	0	; () banked
  5100  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5101  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5105  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5106  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5107  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5108  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5109  0006C4  0100               	movlb	0	; () banked
  5110  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5111  0006C8  0D04               	mullw	4
  5112  0006CA  0ECB               	movlw	low _dpowers
  5113  0006CC  24F3               	addwf	prodl,w,c
  5114  0006CE  6EF6               	movwf	tblptrl,c
  5115  0006D0  0E7E               	movlw	high _dpowers
  5116  0006D2  20F4               	addwfc	prodh,w,c
  5117  0006D4  6EF7               	movwf	tblptrh,c
  5118  0006D6                     	if	1	;There are 3 active tblptr bytes
  5119  0006D6  6AF8               	clrf	tblptru,c
  5120  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5121  0006DA  22F8               	addwfc	tblptru,f,c
  5122  0006DC                     	endif
  5123  0006DC  0009               	tblrd		*+
  5124  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5125  0006E2  0009               	tblrd		*+
  5126  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5127  0006E8  0009               	tblrd		*+
  5128  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5129  0006EE  000A               	tblrd		*-
  5130  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5131  0006F4  EC54  F011         	call	___llmod	;wreg free
  5132  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5133  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5134  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5135  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5136  000708                     l4960:
  5137  000708  0100               	movlb	0	; () banked
  5138  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5139  00070C  0100               	movlb	0	; () banked
  5140  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5141  000710  B4D8               	btfsc	status,2,c
  5142  000712  D00E               	goto	l4968
  5143  000714  D780               	goto	l4950
  5144  000716                     l4962:
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5148  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5149  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5150  00071E  0E30               	movlw	48
  5151  000720  6EDF               	movwf	indf2,c
  5152                           
  5153                           ; BSR set to: 0
  5154  000722  0100               	movlb	0	; () banked
  5155  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5156  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;doprnt.c: 1246: prec--;
  5160  000728  0100               	movlb	0	; () banked
  5161  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5162  00072C  A0D8               	btfss	status,0,c
  5163  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5164  000730                     l4968:
  5165                           
  5166                           ; BSR set to: 0
  5167  000730  0100               	movlb	0	; () banked
  5168  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5169  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5170  000736  B4D8               	btfsc	status,2,c
  5171  000738  D0EA               	goto	l5010
  5172  00073A  D7ED               	goto	l4962
  5173  00073C                     l4970:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;doprnt.c: 1255: }
  5177                           ;doprnt.c: 1262: {
  5178                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5179  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5180  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5181  000744  0100               	movlb	0	; () banked
  5182  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5183  00074A  0100               	movlb	0	; () banked
  5184  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5185  000750  0100               	movlb	0	; () banked
  5186  000752  0E00               	movlw	0
  5187  000754  0100               	movlb	0	; () banked
  5188  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5189  000758  0EFF               	movlw	-1
  5190  00075A  0100               	movlb	0	; () banked
  5191  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5192  00075E  0100               	movlb	0	; () banked
  5193  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196  000762  0E02               	movlw	2
  5197  000764  0100               	movlb	0	; () banked
  5198  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5199  000768  0E00               	movlw	0
  5200  00076A  0100               	movlb	0	; () banked
  5201  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5205  00076E  0100               	movlb	0	; () banked
  5206  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5207  000772  0A80               	xorlw	128
  5208  000774  0F80               	addlw	128
  5209  000776  E10B               	bnz	u5225
  5210  000778  0E00               	movlw	0
  5211  00077A  0100               	movlb	0	; () banked
  5212  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5213  00077E  E107               	bnz	u5225
  5214  000780  0E00               	movlw	0
  5215  000782  0100               	movlb	0	; () banked
  5216  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5217  000786  E103               	bnz	u5225
  5218  000788  0E00               	movlw	0
  5219  00078A  0100               	movlb	0	; () banked
  5220  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5221  00078E                     u5225:
  5222  00078E  B0D8               	btfsc	status,0,c
  5223  000790  D012               	goto	l4980
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;doprnt.c: 1271: flag |= 0x03;
  5227  000792  0E03               	movlw	3
  5228  000794  0100               	movlb	0	; () banked
  5229  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;doprnt.c: 1272: _val._val = -_val._val;
  5233  000798  0100               	movlb	0	; () banked
  5234  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5235  00079C  0100               	movlb	0	; () banked
  5236  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5237  0007A0  0100               	movlb	0	; () banked
  5238  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5239  0007A4  0100               	movlb	0	; () banked
  5240  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5241  0007A8  0E00               	movlw	0
  5242  0007AA  0100               	movlb	0	; () banked
  5243  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5244  0007AE  0100               	movlb	0	; () banked
  5245  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5246  0007B2  0100               	movlb	0	; () banked
  5247  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5248  0007B6                     l4980:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;doprnt.c: 1273: }
  5252                           ;doprnt.c: 1275: }
  5253                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5254  0007B6  0E01               	movlw	1
  5255  0007B8  0100               	movlb	0	; () banked
  5256  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5257  0007BC                     
  5258                           ; BSR set to: 0
  5259  0007BC  0100               	movlb	0	; () banked
  5260  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5261  0007C0  0A0A               	xorlw	10
  5262  0007C2  B4D8               	btfsc	status,2,c
  5263  0007C4  D021               	goto	l4994
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5267                           
  5268                           ; BSR set to: 0
  5269                           
  5270                           ; BSR set to: 0
  5271  0007C6  0100               	movlb	0	; () banked
  5272  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5273  0007CA  0D04               	mullw	4
  5274  0007CC  0ECB               	movlw	low _dpowers
  5275  0007CE  24F3               	addwf	prodl,w,c
  5276  0007D0  6EF6               	movwf	tblptrl,c
  5277  0007D2  0E7E               	movlw	high _dpowers
  5278  0007D4  20F4               	addwfc	prodh,w,c
  5279  0007D6  6EF7               	movwf	tblptrh,c
  5280  0007D8                     	if	1	;There are 3 active tblptr bytes
  5281  0007D8  6AF8               	clrf	tblptru,c
  5282  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5283  0007DC  22F8               	addwfc	tblptru,f,c
  5284  0007DE                     	endif
  5285  0007DE  0009               	tblrd		*+
  5286  0007E0  50F5               	movf	tablat,w,c
  5287  0007E2  0100               	movlb	0	; () banked
  5288  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5289  0007E6  0009               	tblrd		*+
  5290  0007E8  50F5               	movf	tablat,w,c
  5291  0007EA  0100               	movlb	0	; () banked
  5292  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5293  0007EE  0009               	tblrd		*+
  5294  0007F0  50F5               	movf	tablat,w,c
  5295  0007F2  0100               	movlb	0	; () banked
  5296  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5297  0007F6  0009               	tblrd		*+
  5298  0007F8  50F5               	movf	tablat,w,c
  5299  0007FA  0100               	movlb	0	; () banked
  5300  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5301  0007FE  A0D8               	btfss	status,0,c
  5302  000800  D003               	goto	l4994
  5303                           
  5304                           ; BSR set to: 0
  5305                           
  5306                           ; BSR set to: 0
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 1316: break;
  5310  000802  0100               	movlb	0	; () banked
  5311  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5312  000806  D7DA               	goto	L6
  5313  000808                     l4994:
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;doprnt.c: 1431: {
  5317                           ;doprnt.c: 1447: if(flag & 0x03)
  5318  000808  0E03               	movlw	3
  5319  00080A  0100               	movlb	0	; () banked
  5320  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5321  00080E  0100               	movlb	0	; () banked
  5322  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5323  000812  0E00               	movlw	0
  5324  000814  0100               	movlb	0	; () banked
  5325  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5326  000818  0100               	movlb	0	; () banked
  5327  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5328  00081C  0100               	movlb	0	; () banked
  5329  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5330  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5331  000822  B4D8               	btfsc	status,2,c
  5332  000824  D009               	goto	l5000
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5336  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5337  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5338  00082E  0E2D               	movlw	45
  5339  000830  6EDF               	movwf	indf2,c
  5340                           
  5341                           ; BSR set to: 0
  5342  000832  0100               	movlb	0	; () banked
  5343  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5344  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5345  000838                     l5000:
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;doprnt.c: 1478: }
  5349                           ;doprnt.c: 1481: prec = c;
  5350  000838  0100               	movlb	0	; () banked
  5351  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5352  00083C  0100               	movlb	0	; () banked
  5353  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5354  000840  0100               	movlb	0	; () banked
  5355  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5356  000844  0100               	movlb	0	; () banked
  5357  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5358  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5359                           
  5360                           ;doprnt.c: 1483: while(prec--) {
  5361  00084A  D057               	goto	l5008
  5362  00084C                     l5002:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;doprnt.c: 1487: {
  5366                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5367  00084C  0100               	movlb	0	; () banked
  5368  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5369  000852  0100               	movlb	0	; () banked
  5370  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5371  000858  0100               	movlb	0	; () banked
  5372  00085A  90D8               	bcf	status,0,c
  5373  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5374  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5375  000860  0100               	movlb	0	; () banked
  5376  000862  90D8               	bcf	status,0,c
  5377  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5378  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5379  000868  0ECB               	movlw	low _dpowers
  5380  00086A  0100               	movlb	0	; () banked
  5381  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5382  00086E  6EF6               	movwf	tblptrl,c
  5383  000870  0E7E               	movlw	high _dpowers
  5384  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5385  000874  6EF7               	movwf	tblptrh,c
  5386  000876                     	if	1	;There are 3 active tblptr bytes
  5387  000876  6AF8               	clrf	tblptru,c
  5388  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5389  00087A  22F8               	addwfc	tblptru,f,c
  5390  00087C                     	endif
  5391  00087C  0009               	tblrd		*+
  5392  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5393  000882  0009               	tblrd		*+
  5394  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5395  000888  0009               	tblrd		*+
  5396  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5397  00088E  000A               	tblrd		*-
  5398  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5399  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5400  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5401  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5402  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5403  0008A4  ECB0  F00F         	call	___lldiv	;wreg free
  5404  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5405  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5406  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5407  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5408  0008B8  0E0A               	movlw	10
  5409  0008BA  6E2A               	movwf	___llmod@divisor,c
  5410  0008BC  0E00               	movlw	0
  5411  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5412  0008C0  0E00               	movlw	0
  5413  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5414  0008C4  0E00               	movlw	0
  5415  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5416  0008C8  EC54  F011         	call	___llmod	;wreg free
  5417  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5418  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5419  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5420  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5421  0008DC  0100               	movlb	0	; () banked
  5422  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5423  0008E0  0F30               	addlw	48
  5424  0008E2  0100               	movlb	0	; () banked
  5425  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1532: }
  5429                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5430  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5431  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5432  0008EE  0100               	movlb	0	; () banked
  5433  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5434                           
  5435                           ; BSR set to: 0
  5436  0008F4  0100               	movlb	0	; () banked
  5437  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5438  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5439  0008FA                     l5008:
  5440                           
  5441                           ; BSR set to: 0
  5442  0008FA  0100               	movlb	0	; () banked
  5443  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5444  0008FE  A0D8               	btfss	status,0,c
  5445  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5446  000902  0100               	movlb	0	; () banked
  5447  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5448  000906  B4D8               	btfsc	status,2,c
  5449  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5450  00090A  A4D8               	btfss	status,2,c
  5451  00090C  D79F               	goto	l5002
  5452  00090E                     l5010:
  5453                           
  5454                           ; BSR set to: 0
  5455  00090E  0100               	movlb	0	; () banked
  5456  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5457  000914  0100               	movlb	0	; () banked
  5458  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5459  00091A  0100               	movlb	0	; () banked
  5460  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5461  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5462  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5463  000920  6AF8               	clrf	tblptru,c
  5464  000922                     	endif
  5465  000922                     	if	0	;tblptru may be non-zero
  5466  000922                     	endif
  5467  000922  0008               	tblrd		*
  5468  000924  0100               	movlb	0	; () banked
  5469  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5470  00092A  0100               	movlb	0	; () banked
  5471  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5472  00092E  EF18  F000         	goto	l4808
  5473  000932                     l5012:
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;doprnt.c: 1547: *sp = 0;
  5477  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5478  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5479  00093A  0E00               	movlw	0
  5480  00093C  6EDF               	movwf	indf2,c
  5481                           
  5482                           ; BSR set to: 0
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 1549: return 0;
  5486                           ;	Return value of _sprintf is never used
  5487  00093E  0012               	return	
  5488  000940                     __end_of_sprintf:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           indf0	equ	0xFEF
  5498                           postinc0	equ	0xFEE
  5499                           fsr0h	equ	0xFEA
  5500                           fsr0l	equ	0xFE9
  5501                           wreg	equ	0xFE8
  5502                           postinc1	equ	0xFE6
  5503                           postdec1	equ	0xFE5
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function _scale *****************
  5513 ;; Defined at:
  5514 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  scl             1    wreg     char 
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  scl             1   18[BANK0 ] char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  3   12[BANK0 ] char 
  5521 ;; Registers used:
  5522 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5528 ;;      Params:         0       3       0       0       0       0       0       0       0
  5529 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5531 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5532 ;;Total ram usage:        7 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    6
  5535 ;; This function calls:
  5536 ;;		___awdiv
  5537 ;;		___awmod
  5538 ;;		___ftmul
  5539 ;;		___wmul
  5540 ;; This function is called by:
  5541 ;;		_sprintf
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text26
  5546  000940                     __ptext26:
  5547                           	opt stack 0
  5548  000940                     _scale:
  5549                           	opt stack 21
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;incstack = 0
  5553                           ;scale@scl stored from wreg
  5554  000940  0100               	movlb	0	; () banked
  5555  000942  6F72               	movwf	scale@scl& (0+255),b
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;doprnt.c: 428: if(scl < 0) {
  5559  000944  0100               	movlb	0	; () banked
  5560  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5561  000948  D111               	goto	l4540
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 429: scl = -scl;
  5565  00094A  0100               	movlb	0	; () banked
  5566  00094C  6D72               	negf	scale@scl& (0+255),b
  5567                           
  5568                           ;doprnt.c: 430: if(scl>=110)
  5569  00094E  0100               	movlb	0	; () banked
  5570  000950  5172               	movf	scale@scl& (0+255),w,b
  5571  000952  0A80               	xorlw	128
  5572  000954  0F12               	addlw	-238
  5573  000956  A0D8               	btfss	status,0,c
  5574  000958  D0A0               	goto	l4530
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5578  00095A  0E00               	movlw	0
  5579  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5580  00095E  0E03               	movlw	3
  5581  000960  6E29               	movwf	___wmul@multiplicand,c
  5582  000962  0E00               	movlw	0
  5583  000964  6E22               	movwf	___awdiv@divisor+1,c
  5584  000966  0E0A               	movlw	10
  5585  000968  6E21               	movwf	___awdiv@divisor,c
  5586  00096A  0E00               	movlw	0
  5587  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5588  00096E  0E64               	movlw	100
  5589  000970  6E1B               	movwf	___awmod@divisor,c
  5590  000972  0100               	movlb	0	; () banked
  5591  000974  5172               	movf	scale@scl& (0+255),w,b
  5592  000976  6E19               	movwf	___awmod@dividend,c
  5593  000978  6A1A               	clrf	___awmod@dividend+1,c
  5594  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5595  00097C  061A               	decf	___awmod@dividend+1,f,c
  5596  00097E  ECDD  F00E         	call	___awmod	;wreg free
  5597  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5598  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5599  00098A  ECF6  F00D         	call	___awdiv	;wreg free
  5600  00098E  0E09               	movlw	9
  5601  000990  241F               	addwf	?___awdiv,w,c
  5602  000992  6E27               	movwf	___wmul@multiplier,c
  5603  000994  0E00               	movlw	0
  5604  000996  2020               	addwfc	?___awdiv+1,w,c
  5605  000998  6E28               	movwf	___wmul@multiplier+1,c
  5606  00099A  EC79  F013         	call	___wmul	;wreg free
  5607  00099E  0EF3               	movlw	low __npowers_
  5608  0009A0  2427               	addwf	?___wmul,w,c
  5609  0009A2  6EF6               	movwf	tblptrl,c
  5610  0009A4  0E7E               	movlw	high __npowers_
  5611  0009A6  2028               	addwfc	?___wmul+1,w,c
  5612  0009A8  6EF7               	movwf	tblptrh,c
  5613  0009AA                     	if	1	;There are 3 active tblptr bytes
  5614  0009AA  6AF8               	clrf	tblptru,c
  5615  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5616  0009AE  22F8               	addwfc	tblptru,f,c
  5617  0009B0                     	endif
  5618  0009B0  0009               	tblrd		*+
  5619  0009B2  0100               	movlb	0	; () banked
  5620  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5621  0009B8  0009               	tblrd		*+
  5622  0009BA  0100               	movlb	0	; () banked
  5623  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5624  0009C0  000A               	tblrd		*-
  5625  0009C2  0100               	movlb	0	; () banked
  5626  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5627  0009C8  0E00               	movlw	0
  5628  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5629  0009CC  0E64               	movlw	100
  5630  0009CE  6E21               	movwf	___awdiv@divisor,c
  5631  0009D0  0100               	movlb	0	; () banked
  5632  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5633  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5634  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5635  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5636  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5637  0009DC  ECF6  F00D         	call	___awdiv	;wreg free
  5638  0009E0  0E12               	movlw	18
  5639  0009E2  241F               	addwf	?___awdiv,w,c
  5640  0009E4  6E27               	movwf	___wmul@multiplier,c
  5641  0009E6  0E00               	movlw	0
  5642  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5643  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5644  0009EC  0E00               	movlw	0
  5645  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5646  0009F0  0E03               	movlw	3
  5647  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5648  0009F4  EC79  F013         	call	___wmul	;wreg free
  5649  0009F8  0EF3               	movlw	low __npowers_
  5650  0009FA  2427               	addwf	?___wmul,w,c
  5651  0009FC  6EF6               	movwf	tblptrl,c
  5652  0009FE  0E7E               	movlw	high __npowers_
  5653  000A00  2028               	addwfc	?___wmul+1,w,c
  5654  000A02  6EF7               	movwf	tblptrh,c
  5655  000A04                     	if	1	;There are 3 active tblptr bytes
  5656  000A04  6AF8               	clrf	tblptru,c
  5657  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  5658  000A08  22F8               	addwfc	tblptru,f,c
  5659  000A0A                     	endif
  5660  000A0A  0009               	tblrd		*+
  5661  000A0C  0100               	movlb	0	; () banked
  5662  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  5663  000A12  0009               	tblrd		*+
  5664  000A14  0100               	movlb	0	; () banked
  5665  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5666  000A1A  000A               	tblrd		*-
  5667  000A1C  0100               	movlb	0	; () banked
  5668  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5669  000A22  EC6F  F009         	call	___ftmul	;wreg free
  5670  000A26  C060  F06F         	movff	?___ftmul,_scale$2287
  5671  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2287+1
  5672  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2287+2
  5673                           
  5674                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5675  000A32  C06F  F060         	movff	_scale$2287,___ftmul@f1
  5676  000A36  C070  F061         	movff	_scale$2287+1,___ftmul@f1+1
  5677  000A3A  C071  F062         	movff	_scale$2287+2,___ftmul@f1+2
  5678  000A3E  0E00               	movlw	0
  5679  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  5680  000A42  0E03               	movlw	3
  5681  000A44  6E29               	movwf	___wmul@multiplicand,c
  5682  000A46  0E00               	movlw	0
  5683  000A48  6E1C               	movwf	___awmod@divisor+1,c
  5684  000A4A  0E0A               	movlw	10
  5685  000A4C  6E1B               	movwf	___awmod@divisor,c
  5686  000A4E  0100               	movlb	0	; () banked
  5687  000A50  5172               	movf	scale@scl& (0+255),w,b
  5688  000A52  6E19               	movwf	___awmod@dividend,c
  5689  000A54  6A1A               	clrf	___awmod@dividend+1,c
  5690  000A56  BE19               	btfsc	___awmod@dividend,7,c
  5691  000A58  061A               	decf	___awmod@dividend+1,f,c
  5692  000A5A  ECDD  F00E         	call	___awmod	;wreg free
  5693  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5694  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5695  000A66  EC79  F013         	call	___wmul	;wreg free
  5696  000A6A  0EF3               	movlw	low __npowers_
  5697  000A6C  2427               	addwf	?___wmul,w,c
  5698  000A6E  6EF6               	movwf	tblptrl,c
  5699  000A70  0E7E               	movlw	high __npowers_
  5700  000A72  2028               	addwfc	?___wmul+1,w,c
  5701  000A74  6EF7               	movwf	tblptrh,c
  5702  000A76                     	if	1	;There are 3 active tblptr bytes
  5703  000A76  6AF8               	clrf	tblptru,c
  5704  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  5705  000A7A  22F8               	addwfc	tblptru,f,c
  5706  000A7C                     	endif
  5707  000A7C  0009               	tblrd		*+
  5708  000A7E  0100               	movlb	0	; () banked
  5709  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  5710  000A84  0009               	tblrd		*+
  5711  000A86  0100               	movlb	0	; () banked
  5712  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5713  000A8C  000A               	tblrd		*-
  5714  000A8E  0100               	movlb	0	; () banked
  5715  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5716  000A94  EC6F  F009         	call	___ftmul	;wreg free
  5717  000A98  D16F               	goto	L10
  5718  000A9A                     l4530:
  5719                           
  5720                           ;doprnt.c: 432: else if(scl > 10)
  5721  000A9A  0100               	movlb	0	; () banked
  5722  000A9C  5172               	movf	scale@scl& (0+255),w,b
  5723  000A9E  0A80               	xorlw	128
  5724  000AA0  0F75               	addlw	-139
  5725  000AA2  A0D8               	btfss	status,0,c
  5726  000AA4  D05B               	goto	l4536
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5730  000AA6  0E00               	movlw	0
  5731  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  5732  000AAA  0E0A               	movlw	10
  5733  000AAC  6E21               	movwf	___awdiv@divisor,c
  5734  000AAE  0100               	movlb	0	; () banked
  5735  000AB0  5172               	movf	scale@scl& (0+255),w,b
  5736  000AB2  6E1F               	movwf	___awdiv@dividend,c
  5737  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  5738  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  5739  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  5740  000ABA  ECF6  F00D         	call	___awdiv	;wreg free
  5741  000ABE  0E09               	movlw	9
  5742  000AC0  241F               	addwf	?___awdiv,w,c
  5743  000AC2  6E27               	movwf	___wmul@multiplier,c
  5744  000AC4  0E00               	movlw	0
  5745  000AC6  2020               	addwfc	?___awdiv+1,w,c
  5746  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  5747  000ACA  0E00               	movlw	0
  5748  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  5749  000ACE  0E03               	movlw	3
  5750  000AD0  6E29               	movwf	___wmul@multiplicand,c
  5751  000AD2  EC79  F013         	call	___wmul	;wreg free
  5752  000AD6  0EF3               	movlw	low __npowers_
  5753  000AD8  2427               	addwf	?___wmul,w,c
  5754  000ADA  6EF6               	movwf	tblptrl,c
  5755  000ADC  0E7E               	movlw	high __npowers_
  5756  000ADE  2028               	addwfc	?___wmul+1,w,c
  5757  000AE0  6EF7               	movwf	tblptrh,c
  5758  000AE2                     	if	1	;There are 3 active tblptr bytes
  5759  000AE2  6AF8               	clrf	tblptru,c
  5760  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5761  000AE6  22F8               	addwfc	tblptru,f,c
  5762  000AE8                     	endif
  5763  000AE8  0009               	tblrd		*+
  5764  000AEA  0100               	movlb	0	; () banked
  5765  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  5766  000AF0  0009               	tblrd		*+
  5767  000AF2  0100               	movlb	0	; () banked
  5768  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5769  000AF8  000A               	tblrd		*-
  5770  000AFA  0100               	movlb	0	; () banked
  5771  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5772  000B00  0E00               	movlw	0
  5773  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  5774  000B04  0E03               	movlw	3
  5775  000B06  6E29               	movwf	___wmul@multiplicand,c
  5776  000B08  0E00               	movlw	0
  5777  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  5778  000B0C  0E0A               	movlw	10
  5779  000B0E  6E1B               	movwf	___awmod@divisor,c
  5780  000B10  0100               	movlb	0	; () banked
  5781  000B12  5172               	movf	scale@scl& (0+255),w,b
  5782  000B14  6E19               	movwf	___awmod@dividend,c
  5783  000B16  6A1A               	clrf	___awmod@dividend+1,c
  5784  000B18  BE19               	btfsc	___awmod@dividend,7,c
  5785  000B1A  061A               	decf	___awmod@dividend+1,f,c
  5786  000B1C  ECDD  F00E         	call	___awmod	;wreg free
  5787  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  5788  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5789  000B28  EC79  F013         	call	___wmul	;wreg free
  5790  000B2C  0EF3               	movlw	low __npowers_
  5791  000B2E  2427               	addwf	?___wmul,w,c
  5792  000B30  6EF6               	movwf	tblptrl,c
  5793  000B32  0E7E               	movlw	high __npowers_
  5794  000B34  2028               	addwfc	?___wmul+1,w,c
  5795  000B36  6EF7               	movwf	tblptrh,c
  5796  000B38                     	if	1	;There are 3 active tblptr bytes
  5797  000B38  6AF8               	clrf	tblptru,c
  5798  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  5799  000B3C  22F8               	addwfc	tblptru,f,c
  5800  000B3E                     	endif
  5801  000B3E  0009               	tblrd		*+
  5802  000B40  0100               	movlb	0	; () banked
  5803  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  5804  000B46  0009               	tblrd		*+
  5805  000B48  0100               	movlb	0	; () banked
  5806  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5807  000B4E  000A               	tblrd		*-
  5808  000B50  0100               	movlb	0	; () banked
  5809  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5810  000B56  EC6F  F009         	call	___ftmul	;wreg free
  5811  000B5A  D10E               	goto	L10
  5812  000B5C                     l4536:
  5813                           
  5814                           ;doprnt.c: 434: return _npowers_[scl];
  5815  000B5C  0100               	movlb	0	; () banked
  5816  000B5E  5172               	movf	scale@scl& (0+255),w,b
  5817  000B60  0D03               	mullw	3
  5818  000B62  0EF3               	movlw	low __npowers_
  5819  000B64  24F3               	addwf	prodl,w,c
  5820  000B66  6EF6               	movwf	tblptrl,c
  5821  000B68  0E7E               	movlw	high __npowers_
  5822  000B6A  D114               	goto	L9
  5823  000B6C                     l4540:
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;doprnt.c: 435: }
  5827                           ;doprnt.c: 436: if(scl>=110)
  5828  000B6C  0100               	movlb	0	; () banked
  5829  000B6E  5172               	movf	scale@scl& (0+255),w,b
  5830  000B70  0A80               	xorlw	128
  5831  000B72  0F12               	addlw	-238
  5832  000B74  A0D8               	btfss	status,0,c
  5833  000B76  D0A0               	goto	l4548
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5837  000B78  0E00               	movlw	0
  5838  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  5839  000B7C  0E03               	movlw	3
  5840  000B7E  6E29               	movwf	___wmul@multiplicand,c
  5841  000B80  0E00               	movlw	0
  5842  000B82  6E22               	movwf	___awdiv@divisor+1,c
  5843  000B84  0E0A               	movlw	10
  5844  000B86  6E21               	movwf	___awdiv@divisor,c
  5845  000B88  0E00               	movlw	0
  5846  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  5847  000B8C  0E64               	movlw	100
  5848  000B8E  6E1B               	movwf	___awmod@divisor,c
  5849  000B90  0100               	movlb	0	; () banked
  5850  000B92  5172               	movf	scale@scl& (0+255),w,b
  5851  000B94  6E19               	movwf	___awmod@dividend,c
  5852  000B96  6A1A               	clrf	___awmod@dividend+1,c
  5853  000B98  BE19               	btfsc	___awmod@dividend,7,c
  5854  000B9A  061A               	decf	___awmod@dividend+1,f,c
  5855  000B9C  ECDD  F00E         	call	___awmod	;wreg free
  5856  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5857  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5858  000BA8  ECF6  F00D         	call	___awdiv	;wreg free
  5859  000BAC  0E09               	movlw	9
  5860  000BAE  241F               	addwf	?___awdiv,w,c
  5861  000BB0  6E27               	movwf	___wmul@multiplier,c
  5862  000BB2  0E00               	movlw	0
  5863  000BB4  2020               	addwfc	?___awdiv+1,w,c
  5864  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  5865  000BB8  EC79  F013         	call	___wmul	;wreg free
  5866  000BBC  0E1A               	movlw	low __powers_
  5867  000BBE  2427               	addwf	?___wmul,w,c
  5868  000BC0  6EF6               	movwf	tblptrl,c
  5869  000BC2  0E7F               	movlw	high __powers_
  5870  000BC4  2028               	addwfc	?___wmul+1,w,c
  5871  000BC6  6EF7               	movwf	tblptrh,c
  5872  000BC8                     	if	1	;There are 3 active tblptr bytes
  5873  000BC8  6AF8               	clrf	tblptru,c
  5874  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  5875  000BCC  22F8               	addwfc	tblptru,f,c
  5876  000BCE                     	endif
  5877  000BCE  0009               	tblrd		*+
  5878  000BD0  0100               	movlb	0	; () banked
  5879  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  5880  000BD6  0009               	tblrd		*+
  5881  000BD8  0100               	movlb	0	; () banked
  5882  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5883  000BDE  000A               	tblrd		*-
  5884  000BE0  0100               	movlb	0	; () banked
  5885  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5886  000BE6  0E00               	movlw	0
  5887  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  5888  000BEA  0E64               	movlw	100
  5889  000BEC  6E21               	movwf	___awdiv@divisor,c
  5890  000BEE  0100               	movlb	0	; () banked
  5891  000BF0  5172               	movf	scale@scl& (0+255),w,b
  5892  000BF2  6E1F               	movwf	___awdiv@dividend,c
  5893  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  5894  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  5895  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  5896  000BFA  ECF6  F00D         	call	___awdiv	;wreg free
  5897  000BFE  0E12               	movlw	18
  5898  000C00  241F               	addwf	?___awdiv,w,c
  5899  000C02  6E27               	movwf	___wmul@multiplier,c
  5900  000C04  0E00               	movlw	0
  5901  000C06  2020               	addwfc	?___awdiv+1,w,c
  5902  000C08  6E28               	movwf	___wmul@multiplier+1,c
  5903  000C0A  0E00               	movlw	0
  5904  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  5905  000C0E  0E03               	movlw	3
  5906  000C10  6E29               	movwf	___wmul@multiplicand,c
  5907  000C12  EC79  F013         	call	___wmul	;wreg free
  5908  000C16  0E1A               	movlw	low __powers_
  5909  000C18  2427               	addwf	?___wmul,w,c
  5910  000C1A  6EF6               	movwf	tblptrl,c
  5911  000C1C  0E7F               	movlw	high __powers_
  5912  000C1E  2028               	addwfc	?___wmul+1,w,c
  5913  000C20  6EF7               	movwf	tblptrh,c
  5914  000C22                     	if	1	;There are 3 active tblptr bytes
  5915  000C22  6AF8               	clrf	tblptru,c
  5916  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  5917  000C26  22F8               	addwfc	tblptru,f,c
  5918  000C28                     	endif
  5919  000C28  0009               	tblrd		*+
  5920  000C2A  0100               	movlb	0	; () banked
  5921  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  5922  000C30  0009               	tblrd		*+
  5923  000C32  0100               	movlb	0	; () banked
  5924  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5925  000C38  000A               	tblrd		*-
  5926  000C3A  0100               	movlb	0	; () banked
  5927  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5928  000C40  EC6F  F009         	call	___ftmul	;wreg free
  5929  000C44  C060  F06F         	movff	?___ftmul,_scale$2287
  5930  000C48  C061  F070         	movff	?___ftmul+1,_scale$2287+1
  5931  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2287+2
  5932                           
  5933                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5934  000C50  C06F  F060         	movff	_scale$2287,___ftmul@f1
  5935  000C54  C070  F061         	movff	_scale$2287+1,___ftmul@f1+1
  5936  000C58  C071  F062         	movff	_scale$2287+2,___ftmul@f1+2
  5937  000C5C  0E00               	movlw	0
  5938  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  5939  000C60  0E03               	movlw	3
  5940  000C62  6E29               	movwf	___wmul@multiplicand,c
  5941  000C64  0E00               	movlw	0
  5942  000C66  6E1C               	movwf	___awmod@divisor+1,c
  5943  000C68  0E0A               	movlw	10
  5944  000C6A  6E1B               	movwf	___awmod@divisor,c
  5945  000C6C  0100               	movlb	0	; () banked
  5946  000C6E  5172               	movf	scale@scl& (0+255),w,b
  5947  000C70  6E19               	movwf	___awmod@dividend,c
  5948  000C72  6A1A               	clrf	___awmod@dividend+1,c
  5949  000C74  BE19               	btfsc	___awmod@dividend,7,c
  5950  000C76  061A               	decf	___awmod@dividend+1,f,c
  5951  000C78  ECDD  F00E         	call	___awmod	;wreg free
  5952  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  5953  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5954  000C84  EC79  F013         	call	___wmul	;wreg free
  5955  000C88  0E1A               	movlw	low __powers_
  5956  000C8A  2427               	addwf	?___wmul,w,c
  5957  000C8C  6EF6               	movwf	tblptrl,c
  5958  000C8E  0E7F               	movlw	high __powers_
  5959  000C90  2028               	addwfc	?___wmul+1,w,c
  5960  000C92  6EF7               	movwf	tblptrh,c
  5961  000C94                     	if	1	;There are 3 active tblptr bytes
  5962  000C94  6AF8               	clrf	tblptru,c
  5963  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  5964  000C98  22F8               	addwfc	tblptru,f,c
  5965  000C9A                     	endif
  5966  000C9A  0009               	tblrd		*+
  5967  000C9C  0100               	movlb	0	; () banked
  5968  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  5969  000CA2  0009               	tblrd		*+
  5970  000CA4  0100               	movlb	0	; () banked
  5971  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5972  000CAA  000A               	tblrd		*-
  5973  000CAC  0100               	movlb	0	; () banked
  5974  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5975  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  5976  000CB6  D060               	goto	L10
  5977  000CB8                     l4548:
  5978                           
  5979                           ;doprnt.c: 438: else if(scl > 10)
  5980  000CB8  0100               	movlb	0	; () banked
  5981  000CBA  5172               	movf	scale@scl& (0+255),w,b
  5982  000CBC  0A80               	xorlw	128
  5983  000CBE  0F75               	addlw	-139
  5984  000CC0  A0D8               	btfss	status,0,c
  5985  000CC2  D061               	goto	l4554
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5989  000CC4  0E00               	movlw	0
  5990  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  5991  000CC8  0E0A               	movlw	10
  5992  000CCA  6E21               	movwf	___awdiv@divisor,c
  5993  000CCC  0100               	movlb	0	; () banked
  5994  000CCE  5172               	movf	scale@scl& (0+255),w,b
  5995  000CD0  6E1F               	movwf	___awdiv@dividend,c
  5996  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  5997  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  5998  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  5999  000CD8  ECF6  F00D         	call	___awdiv	;wreg free
  6000  000CDC  0E09               	movlw	9
  6001  000CDE  241F               	addwf	?___awdiv,w,c
  6002  000CE0  6E27               	movwf	___wmul@multiplier,c
  6003  000CE2  0E00               	movlw	0
  6004  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6005  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6006  000CE8  0E00               	movlw	0
  6007  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6008  000CEC  0E03               	movlw	3
  6009  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6010  000CF0  EC79  F013         	call	___wmul	;wreg free
  6011  000CF4  0E1A               	movlw	low __powers_
  6012  000CF6  2427               	addwf	?___wmul,w,c
  6013  000CF8  6EF6               	movwf	tblptrl,c
  6014  000CFA  0E7F               	movlw	high __powers_
  6015  000CFC  2028               	addwfc	?___wmul+1,w,c
  6016  000CFE  6EF7               	movwf	tblptrh,c
  6017  000D00                     	if	1	;There are 3 active tblptr bytes
  6018  000D00  6AF8               	clrf	tblptru,c
  6019  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6020  000D04  22F8               	addwfc	tblptru,f,c
  6021  000D06                     	endif
  6022  000D06  0009               	tblrd		*+
  6023  000D08  0100               	movlb	0	; () banked
  6024  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6025  000D0E  0009               	tblrd		*+
  6026  000D10  0100               	movlb	0	; () banked
  6027  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6028  000D16  000A               	tblrd		*-
  6029  000D18  0100               	movlb	0	; () banked
  6030  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6031  000D1E  0E00               	movlw	0
  6032  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6033  000D22  0E03               	movlw	3
  6034  000D24  6E29               	movwf	___wmul@multiplicand,c
  6035  000D26  0E00               	movlw	0
  6036  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6037  000D2A  0E0A               	movlw	10
  6038  000D2C  6E1B               	movwf	___awmod@divisor,c
  6039  000D2E  0100               	movlb	0	; () banked
  6040  000D30  5172               	movf	scale@scl& (0+255),w,b
  6041  000D32  6E19               	movwf	___awmod@dividend,c
  6042  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6043  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6044  000D38  061A               	decf	___awmod@dividend+1,f,c
  6045  000D3A  ECDD  F00E         	call	___awmod	;wreg free
  6046  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6047  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6048  000D46  EC79  F013         	call	___wmul	;wreg free
  6049  000D4A  0E1A               	movlw	low __powers_
  6050  000D4C  2427               	addwf	?___wmul,w,c
  6051  000D4E  6EF6               	movwf	tblptrl,c
  6052  000D50  0E7F               	movlw	high __powers_
  6053  000D52  2028               	addwfc	?___wmul+1,w,c
  6054  000D54  6EF7               	movwf	tblptrh,c
  6055  000D56                     	if	1	;There are 3 active tblptr bytes
  6056  000D56  6AF8               	clrf	tblptru,c
  6057  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6058  000D5A  22F8               	addwfc	tblptru,f,c
  6059  000D5C                     	endif
  6060  000D5C  0009               	tblrd		*+
  6061  000D5E  0100               	movlb	0	; () banked
  6062  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6063  000D64  0009               	tblrd		*+
  6064  000D66  0100               	movlb	0	; () banked
  6065  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6066  000D6C  000A               	tblrd		*-
  6067  000D6E  0100               	movlb	0	; () banked
  6068  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6069  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6070  000D78                     L10:
  6071  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6072  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6073  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6074  000D84  D018               	goto	l433
  6075  000D86                     l4554:
  6076                           
  6077                           ;doprnt.c: 440: return _powers_[scl];
  6078  000D86  0100               	movlb	0	; () banked
  6079  000D88  5172               	movf	scale@scl& (0+255),w,b
  6080  000D8A  0D03               	mullw	3
  6081  000D8C  0E1A               	movlw	low __powers_
  6082  000D8E  24F3               	addwf	prodl,w,c
  6083  000D90  6EF6               	movwf	tblptrl,c
  6084  000D92  0E7F               	movlw	high __powers_
  6085  000D94                     L9:
  6086  000D94  20F4               	addwfc	prodh,w,c
  6087  000D96  6EF7               	movwf	tblptrh,c
  6088  000D98                     	if	1	;There are 3 active tblptr bytes
  6089  000D98  6AF8               	clrf	tblptru,c
  6090  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6091  000D9C  22F8               	addwfc	tblptru,f,c
  6092  000D9E                     	endif
  6093  000D9E  0009               	tblrd		*+
  6094  000DA0  0100               	movlb	0	; () banked
  6095  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6096  000DA6  0009               	tblrd		*+
  6097  000DA8  0100               	movlb	0	; () banked
  6098  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6099  000DAE  000A               	tblrd		*-
  6100  000DB0  0100               	movlb	0	; () banked
  6101  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6102  000DB6                     l433:
  6103  000DB6  0012               	return	
  6104  000DB8                     __end_of_scale:
  6105                           	opt stack 0
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           indf0	equ	0xFEF
  6114                           postinc0	equ	0xFEE
  6115                           fsr0h	equ	0xFEA
  6116                           fsr0l	equ	0xFE9
  6117                           wreg	equ	0xFE8
  6118                           postinc1	equ	0xFE6
  6119                           postdec1	equ	0xFE5
  6120                           fsr1l	equ	0xFE1
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _fround *****************
  6129 ;; Defined at:
  6130 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  prec            1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  prec            1   21[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  3   12[BANK0 ] unsigned char 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6144 ;;      Params:         0       3       0       0       0       0       0       0       0
  6145 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6147 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6148 ;;Total ram usage:       10 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    6
  6151 ;; This function calls:
  6152 ;;		___awdiv
  6153 ;;		___awmod
  6154 ;;		___ftmul
  6155 ;;		___wmul
  6156 ;; This function is called by:
  6157 ;;		_sprintf
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text27
  6162  000DB8                     __ptext27:
  6163                           	opt stack 0
  6164  000DB8                     _fround:
  6165                           	opt stack 21
  6166                           
  6167                           ;incstack = 0
  6168                           ;fround@prec stored from wreg
  6169  000DB8  0100               	movlb	0	; () banked
  6170  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;doprnt.c: 413: if(prec>=110)
  6174  000DBC  0E6D               	movlw	109
  6175  000DBE  0100               	movlb	0	; () banked
  6176  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6177  000DC2  D0B1               	goto	l4508
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6181  000DC4  0E00               	movlw	0
  6182  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6183  000DC8  0E03               	movlw	3
  6184  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6185  000DCC  0E00               	movlw	0
  6186  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6187  000DD0  0E0A               	movlw	10
  6188  000DD2  6E21               	movwf	___awdiv@divisor,c
  6189  000DD4  0E00               	movlw	0
  6190  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6191  000DD8  0E64               	movlw	100
  6192  000DDA  6E1B               	movwf	___awmod@divisor,c
  6193  000DDC  0100               	movlb	0	; () banked
  6194  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6195  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6196  000DE4  ECDD  F00E         	call	___awmod	;wreg free
  6197  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6198  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6199  000DF0  ECF6  F00D         	call	___awdiv	;wreg free
  6200  000DF4  0E09               	movlw	9
  6201  000DF6  241F               	addwf	?___awdiv,w,c
  6202  000DF8  6E27               	movwf	___wmul@multiplier,c
  6203  000DFA  0E00               	movlw	0
  6204  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6205  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6206  000E00  EC79  F013         	call	___wmul	;wreg free
  6207  000E04  0EF3               	movlw	low __npowers_
  6208  000E06  2427               	addwf	?___wmul,w,c
  6209  000E08  6EF6               	movwf	tblptrl,c
  6210  000E0A  0E7E               	movlw	high __npowers_
  6211  000E0C  2028               	addwfc	?___wmul+1,w,c
  6212  000E0E  6EF7               	movwf	tblptrh,c
  6213  000E10                     	if	1	;There are 3 active tblptr bytes
  6214  000E10  6AF8               	clrf	tblptru,c
  6215  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6216  000E14  22F8               	addwfc	tblptru,f,c
  6217  000E16                     	endif
  6218  000E16  0009               	tblrd		*+
  6219  000E18  0100               	movlb	0	; () banked
  6220  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6221  000E1E  0009               	tblrd		*+
  6222  000E20  0100               	movlb	0	; () banked
  6223  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6224  000E26  000A               	tblrd		*-
  6225  000E28  0100               	movlb	0	; () banked
  6226  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6227  000E2E  0E00               	movlw	0
  6228  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6229  000E32  0E64               	movlw	100
  6230  000E34  6E21               	movwf	___awdiv@divisor,c
  6231  000E36  0100               	movlb	0	; () banked
  6232  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6233  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6234  000E3E  ECF6  F00D         	call	___awdiv	;wreg free
  6235  000E42  0E12               	movlw	18
  6236  000E44  241F               	addwf	?___awdiv,w,c
  6237  000E46  6E27               	movwf	___wmul@multiplier,c
  6238  000E48  0E00               	movlw	0
  6239  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6240  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6241  000E4E  0E00               	movlw	0
  6242  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6243  000E52  0E03               	movlw	3
  6244  000E54  6E29               	movwf	___wmul@multiplicand,c
  6245  000E56  EC79  F013         	call	___wmul	;wreg free
  6246  000E5A  0EF3               	movlw	low __npowers_
  6247  000E5C  2427               	addwf	?___wmul,w,c
  6248  000E5E  6EF6               	movwf	tblptrl,c
  6249  000E60  0E7E               	movlw	high __npowers_
  6250  000E62  2028               	addwfc	?___wmul+1,w,c
  6251  000E64  6EF7               	movwf	tblptrh,c
  6252  000E66                     	if	1	;There are 3 active tblptr bytes
  6253  000E66  6AF8               	clrf	tblptru,c
  6254  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6255  000E6A  22F8               	addwfc	tblptru,f,c
  6256  000E6C                     	endif
  6257  000E6C  0009               	tblrd		*+
  6258  000E6E  0100               	movlb	0	; () banked
  6259  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6260  000E74  0009               	tblrd		*+
  6261  000E76  0100               	movlb	0	; () banked
  6262  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6263  000E7C  000A               	tblrd		*-
  6264  000E7E  0100               	movlb	0	; () banked
  6265  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6266  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6267  000E88  C060  F072         	movff	?___ftmul,_fround$2285
  6268  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2285+1
  6269  000E90  C062  F074         	movff	?___ftmul+2,_fround$2285+2
  6270                           
  6271                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6272  000E94  0E00               	movlw	0
  6273  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6274  000E98  0E03               	movlw	3
  6275  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6276  000E9C  0E00               	movlw	0
  6277  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6278  000EA0  0E0A               	movlw	10
  6279  000EA2  6E1B               	movwf	___awmod@divisor,c
  6280  000EA4  0100               	movlb	0	; () banked
  6281  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6282  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6283  000EAC  ECDD  F00E         	call	___awmod	;wreg free
  6284  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6285  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6286  000EB8  EC79  F013         	call	___wmul	;wreg free
  6287  000EBC  0EF3               	movlw	low __npowers_
  6288  000EBE  2427               	addwf	?___wmul,w,c
  6289  000EC0  6EF6               	movwf	tblptrl,c
  6290  000EC2  0E7E               	movlw	high __npowers_
  6291  000EC4  2028               	addwfc	?___wmul+1,w,c
  6292  000EC6  6EF7               	movwf	tblptrh,c
  6293  000EC8                     	if	1	;There are 3 active tblptr bytes
  6294  000EC8  6AF8               	clrf	tblptru,c
  6295  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6296  000ECC  22F8               	addwfc	tblptru,f,c
  6297  000ECE                     	endif
  6298  000ECE  0009               	tblrd		*+
  6299  000ED0  0100               	movlb	0	; () banked
  6300  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6301  000ED6  0009               	tblrd		*+
  6302  000ED8  0100               	movlb	0	; () banked
  6303  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6304  000EDE  000A               	tblrd		*-
  6305  000EE0  0100               	movlb	0	; () banked
  6306  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6307  000EE6  C072  F060         	movff	_fround$2285,___ftmul@f1
  6308  000EEA  C073  F061         	movff	_fround$2285+1,___ftmul@f1+1
  6309  000EEE  C074  F062         	movff	_fround$2285+2,___ftmul@f1+2
  6310  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6311  000EF6  C060  F06F         	movff	?___ftmul,_fround$2286
  6312  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2286+1
  6313  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2286+2
  6314                           
  6315                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6316  000F02  C06F  F060         	movff	_fround$2286,___ftmul@f1
  6317  000F06  C070  F061         	movff	_fround$2286+1,___ftmul@f1+1
  6318  000F0A  C071  F062         	movff	_fround$2286+2,___ftmul@f1+2
  6319  000F0E  0E00               	movlw	0
  6320  000F10  0100               	movlb	0	; () banked
  6321  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6322  000F14  0E00               	movlw	0
  6323  000F16  0100               	movlb	0	; () banked
  6324  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6325  000F1A  0E3F               	movlw	63
  6326  000F1C  0100               	movlb	0	; () banked
  6327  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6328  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6329  000F24  D095               	goto	L12
  6330  000F26                     l4508:
  6331                           
  6332                           ;doprnt.c: 415: else if(prec > 10)
  6333  000F26  0E0A               	movlw	10
  6334  000F28  0100               	movlb	0	; () banked
  6335  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6336  000F2C  D06E               	goto	l4516
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6340  000F2E  0E00               	movlw	0
  6341  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6342  000F32  0E03               	movlw	3
  6343  000F34  6E29               	movwf	___wmul@multiplicand,c
  6344  000F36  0E00               	movlw	0
  6345  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6346  000F3A  0E0A               	movlw	10
  6347  000F3C  6E1B               	movwf	___awmod@divisor,c
  6348  000F3E  0100               	movlb	0	; () banked
  6349  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6350  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6351  000F46  ECDD  F00E         	call	___awmod	;wreg free
  6352  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6353  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6354  000F52  EC79  F013         	call	___wmul	;wreg free
  6355  000F56  0EF3               	movlw	low __npowers_
  6356  000F58  2427               	addwf	?___wmul,w,c
  6357  000F5A  6EF6               	movwf	tblptrl,c
  6358  000F5C  0E7E               	movlw	high __npowers_
  6359  000F5E  2028               	addwfc	?___wmul+1,w,c
  6360  000F60  6EF7               	movwf	tblptrh,c
  6361  000F62                     	if	1	;There are 3 active tblptr bytes
  6362  000F62  6AF8               	clrf	tblptru,c
  6363  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6364  000F66  22F8               	addwfc	tblptru,f,c
  6365  000F68                     	endif
  6366  000F68  0009               	tblrd		*+
  6367  000F6A  0100               	movlb	0	; () banked
  6368  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6369  000F70  0009               	tblrd		*+
  6370  000F72  0100               	movlb	0	; () banked
  6371  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6372  000F78  000A               	tblrd		*-
  6373  000F7A  0100               	movlb	0	; () banked
  6374  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6375  000F80  0E00               	movlw	0
  6376  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6377  000F84  0E0A               	movlw	10
  6378  000F86  6E21               	movwf	___awdiv@divisor,c
  6379  000F88  0100               	movlb	0	; () banked
  6380  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6381  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6382  000F90  ECF6  F00D         	call	___awdiv	;wreg free
  6383  000F94  0E09               	movlw	9
  6384  000F96  241F               	addwf	?___awdiv,w,c
  6385  000F98  6E27               	movwf	___wmul@multiplier,c
  6386  000F9A  0E00               	movlw	0
  6387  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6388  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6389  000FA0  0E00               	movlw	0
  6390  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6391  000FA4  0E03               	movlw	3
  6392  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6393  000FA8  EC79  F013         	call	___wmul	;wreg free
  6394  000FAC  0EF3               	movlw	low __npowers_
  6395  000FAE  2427               	addwf	?___wmul,w,c
  6396  000FB0  6EF6               	movwf	tblptrl,c
  6397  000FB2  0E7E               	movlw	high __npowers_
  6398  000FB4  2028               	addwfc	?___wmul+1,w,c
  6399  000FB6  6EF7               	movwf	tblptrh,c
  6400  000FB8                     	if	1	;There are 3 active tblptr bytes
  6401  000FB8  6AF8               	clrf	tblptru,c
  6402  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6403  000FBC  22F8               	addwfc	tblptru,f,c
  6404  000FBE                     	endif
  6405  000FBE  0009               	tblrd		*+
  6406  000FC0  0100               	movlb	0	; () banked
  6407  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6408  000FC6  0009               	tblrd		*+
  6409  000FC8  0100               	movlb	0	; () banked
  6410  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6411  000FCE  000A               	tblrd		*-
  6412  000FD0  0100               	movlb	0	; () banked
  6413  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6414  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6415  000FDA  C060  F072         	movff	?___ftmul,_fround$2285
  6416  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2285+1
  6417  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2285+2
  6418                           
  6419                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6420  000FE6  C072  F060         	movff	_fround$2285,___ftmul@f1
  6421  000FEA  C073  F061         	movff	_fround$2285+1,___ftmul@f1+1
  6422  000FEE  C074  F062         	movff	_fround$2285+2,___ftmul@f1+2
  6423  000FF2  0E00               	movlw	0
  6424  000FF4  0100               	movlb	0	; () banked
  6425  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6426  000FF8  0E00               	movlw	0
  6427  000FFA  0100               	movlb	0	; () banked
  6428  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6429  000FFE  0E3F               	movlw	63
  6430  001000  0100               	movlb	0	; () banked
  6431  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6432  001004  EC6F  F009         	call	___ftmul	;wreg free
  6433  001008  D023               	goto	L12
  6434  00100A                     l4516:
  6435                           
  6436                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6437  00100A  0100               	movlb	0	; () banked
  6438  00100C  5175               	movf	fround@prec& (0+255),w,b
  6439  00100E  0D03               	mullw	3
  6440  001010  0EF3               	movlw	low __npowers_
  6441  001012  24F3               	addwf	prodl,w,c
  6442  001014  6EF6               	movwf	tblptrl,c
  6443  001016  0E7E               	movlw	high __npowers_
  6444  001018  20F4               	addwfc	prodh,w,c
  6445  00101A  6EF7               	movwf	tblptrh,c
  6446  00101C                     	if	1	;There are 3 active tblptr bytes
  6447  00101C  6AF8               	clrf	tblptru,c
  6448  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6449  001020  22F8               	addwfc	tblptru,f,c
  6450  001022                     	endif
  6451  001022  0009               	tblrd		*+
  6452  001024  0100               	movlb	0	; () banked
  6453  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6454  00102A  0009               	tblrd		*+
  6455  00102C  0100               	movlb	0	; () banked
  6456  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6457  001032  000A               	tblrd		*-
  6458  001034  0100               	movlb	0	; () banked
  6459  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6460  00103A  0E00               	movlw	0
  6461  00103C  0100               	movlb	0	; () banked
  6462  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6463  001040  0E00               	movlw	0
  6464  001042  0100               	movlb	0	; () banked
  6465  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6466  001046  0E3F               	movlw	63
  6467  001048  0100               	movlb	0	; () banked
  6468  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6469  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6470  001050                     L12:
  6471  001050  C060  F06C         	movff	?___ftmul,?_fround
  6472  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6473  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6474  00105C  0012               	return	
  6475  00105E                     __end_of_fround:
  6476                           	opt stack 0
  6477                           tblptru	equ	0xFF8
  6478                           tblptrh	equ	0xFF7
  6479                           tblptrl	equ	0xFF6
  6480                           tablat	equ	0xFF5
  6481                           prodh	equ	0xFF4
  6482                           prodl	equ	0xFF3
  6483                           intcon	equ	0xFF2
  6484                           indf0	equ	0xFEF
  6485                           postinc0	equ	0xFEE
  6486                           fsr0h	equ	0xFEA
  6487                           fsr0l	equ	0xFE9
  6488                           wreg	equ	0xFE8
  6489                           postinc1	equ	0xFE6
  6490                           postdec1	equ	0xFE5
  6491                           fsr1l	equ	0xFE1
  6492                           indf2	equ	0xFDF
  6493                           postinc2	equ	0xFDE
  6494                           postdec2	equ	0xFDD
  6495                           fsr2h	equ	0xFDA
  6496                           fsr2l	equ	0xFD9
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function ___wmul *****************
  6500 ;; Defined at:
  6501 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  multiplier      2   38[COMRAM] unsigned int 
  6504 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  product         2   42[COMRAM] unsigned int 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  2   38[COMRAM] unsigned int 
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0, prodl, prodh
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6516 ;;      Params:         4       0       0       0       0       0       0       0       0
  6517 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6519 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6520 ;;Total ram usage:        6 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    4
  6523 ;; This function calls:
  6524 ;;		Nothing
  6525 ;; This function is called by:
  6526 ;;		_fround
  6527 ;;		_scale
  6528 ;;		_sprintf
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text28
  6533  0026F2                     __ptext28:
  6534                           	opt stack 0
  6535  0026F2                     ___wmul:
  6536                           	opt stack 22
  6537                           
  6538                           ;incstack = 0
  6539  0026F2  5027               	movf	___wmul@multiplier,w,c
  6540  0026F4  0229               	mulwf	___wmul@multiplicand,c
  6541  0026F6  CFF3 F02B          	movff	prodl,___wmul@product
  6542  0026FA  CFF4 F02C          	movff	prodh,___wmul@product+1
  6543  0026FE  5027               	movf	___wmul@multiplier,w,c
  6544  002700  022A               	mulwf	___wmul@multiplicand+1,c
  6545  002702  50F3               	movf	prodl,w,c
  6546  002704  262C               	addwf	___wmul@product+1,f,c
  6547  002706  5028               	movf	___wmul@multiplier+1,w,c
  6548  002708  0229               	mulwf	___wmul@multiplicand,c
  6549  00270A  50F3               	movf	prodl,w,c
  6550  00270C  262C               	addwf	___wmul@product+1,f,c
  6551  00270E  C02B  F027         	movff	___wmul@product,?___wmul
  6552  002712  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6553  002716  0012               	return	
  6554  002718                     __end_of___wmul:
  6555                           	opt stack 0
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon	equ	0xFF2
  6563                           indf0	equ	0xFEF
  6564                           postinc0	equ	0xFEE
  6565                           fsr0h	equ	0xFEA
  6566                           fsr0l	equ	0xFE9
  6567                           wreg	equ	0xFE8
  6568                           postinc1	equ	0xFE6
  6569                           postdec1	equ	0xFE5
  6570                           fsr1l	equ	0xFE1
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function ___ftmul *****************
  6579 ;; Defined at:
  6580 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  f1              3    0[BANK0 ] float 
  6583 ;;  f2              3    3[BANK0 ] float 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6586 ;;  sign            1   11[BANK0 ] unsigned char 
  6587 ;;  cntr            1   10[BANK0 ] unsigned char 
  6588 ;;  exp             1    6[BANK0 ] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  3    0[BANK0 ] float 
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6598 ;;      Params:         0       6       0       0       0       0       0       0       0
  6599 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6600 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6601 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6602 ;;Total ram usage:       15 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    5
  6605 ;; This function calls:
  6606 ;;		___ftpack
  6607 ;; This function is called by:
  6608 ;;		_PWM_DutyCycle1
  6609 ;;		_PWM_DutyCycle2
  6610 ;;		_fround
  6611 ;;		_scale
  6612 ;;		_sprintf
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text29
  6617  0012DE                     __ptext29:
  6618                           	opt stack 0
  6619  0012DE                     ___ftmul:
  6620                           	opt stack 21
  6621                           
  6622                           ;incstack = 0
  6623  0012DE  0100               	movlb	0	; () banked
  6624  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6625  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6626  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6627  0012E8  0100               	movlb	0	; () banked
  6628  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6629  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6630  0012EE  E301               	bnc	u4191
  6631  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6632  0012F2                     u4191:
  6633  0012F2  502D               	movf	??___ftmul,w,c
  6634  0012F4  0100               	movlb	0	; () banked
  6635  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6636  0012F8  0100               	movlb	0	; () banked
  6637  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6638  0012FC  D001               	goto	l4280
  6639  0012FE  D010               	goto	u4220
  6640  001300                     l4280:
  6641                           
  6642                           ; BSR set to: 0
  6643  001300  0100               	movlb	0	; () banked
  6644  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6645  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6646  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6647  00130A  0100               	movlb	0	; () banked
  6648  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6649  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6650  001310  E301               	bnc	u4211
  6651  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6652  001314                     u4211:
  6653  001314  502D               	movf	??___ftmul,w,c
  6654  001316  0100               	movlb	0	; () banked
  6655  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6656  00131A  0100               	movlb	0	; () banked
  6657  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  6658  00131E  D00A               	goto	l4286
  6659  001320                     u4220:
  6660                           
  6661                           ; BSR set to: 0
  6662  001320  0E00               	movlw	0
  6663  001322  0100               	movlb	0	; () banked
  6664  001324  6F60               	movwf	?___ftmul& (0+255),b
  6665  001326  0E00               	movlw	0
  6666  001328  0100               	movlb	0	; () banked
  6667  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6668  00132C  0E00               	movlw	0
  6669  00132E  0100               	movlb	0	; () banked
  6670  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6671  001332  D080               	goto	l1027
  6672  001334                     l4286:
  6673                           
  6674                           ; BSR set to: 0
  6675  001334  0100               	movlb	0	; () banked
  6676  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  6677  001338  0F7B               	addlw	123
  6678  00133A  0100               	movlb	0	; () banked
  6679  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  6680                           
  6681                           ; BSR set to: 0
  6682  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6683  001342  0100               	movlb	0	; () banked
  6684  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6685  001346  0100               	movlb	0	; () banked
  6686  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6687  00134A  0E80               	movlw	128
  6688  00134C  0100               	movlb	0	; () banked
  6689  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  6690                           
  6691                           ; BSR set to: 0
  6692  001350  0100               	movlb	0	; () banked
  6693  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6694                           
  6695                           ; BSR set to: 0
  6696  001354  0100               	movlb	0	; () banked
  6697  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6698                           
  6699                           ; BSR set to: 0
  6700  001358  0EFF               	movlw	255
  6701  00135A  0100               	movlb	0	; () banked
  6702  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  6703  00135E  0EFF               	movlw	255
  6704  001360  0100               	movlb	0	; () banked
  6705  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6706  001364  0E00               	movlw	0
  6707  001366  0100               	movlb	0	; () banked
  6708  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6709                           
  6710                           ; BSR set to: 0
  6711  00136A  0E00               	movlw	0
  6712  00136C  0100               	movlb	0	; () banked
  6713  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  6714  001370  0E00               	movlw	0
  6715  001372  0100               	movlb	0	; () banked
  6716  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6717  001376  0E00               	movlw	0
  6718  001378  0100               	movlb	0	; () banked
  6719  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6720                           
  6721                           ; BSR set to: 0
  6722  00137C  0E07               	movlw	7
  6723  00137E  0100               	movlb	0	; () banked
  6724  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6725  001382                     l4300:
  6726                           
  6727                           ; BSR set to: 0
  6728  001382  0100               	movlb	0	; () banked
  6729  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  6730  001386  D00C               	goto	l4304
  6731                           
  6732                           ; BSR set to: 0
  6733  001388  0100               	movlb	0	; () banked
  6734  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  6735  00138C  0100               	movlb	0	; () banked
  6736  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6737  001390  0100               	movlb	0	; () banked
  6738  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6739  001394  0100               	movlb	0	; () banked
  6740  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6741  001398  0100               	movlb	0	; () banked
  6742  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6743  00139C  0100               	movlb	0	; () banked
  6744  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6745  0013A0                     l4304:
  6746                           
  6747                           ; BSR set to: 0
  6748  0013A0  0100               	movlb	0	; () banked
  6749  0013A2  90D8               	bcf	status,0,c
  6750  0013A4  0100               	movlb	0	; () banked
  6751  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6752  0013A8  0100               	movlb	0	; () banked
  6753  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6754  0013AC  0100               	movlb	0	; () banked
  6755  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6756  0013B0  0100               	movlb	0	; () banked
  6757  0013B2  90D8               	bcf	status,0,c
  6758  0013B4  0100               	movlb	0	; () banked
  6759  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  6760  0013B8  0100               	movlb	0	; () banked
  6761  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6762  0013BC  0100               	movlb	0	; () banked
  6763  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6764                           
  6765                           ; BSR set to: 0
  6766  0013C0  0100               	movlb	0	; () banked
  6767  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6768  0013C4  D7DE               	goto	l4300
  6769                           
  6770                           ; BSR set to: 0
  6771                           
  6772                           ; BSR set to: 0
  6773  0013C6  0E09               	movlw	9
  6774  0013C8  0100               	movlb	0	; () banked
  6775  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6776  0013CC                     l4310:
  6777                           
  6778                           ; BSR set to: 0
  6779  0013CC  0100               	movlb	0	; () banked
  6780  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  6781  0013D0  D00C               	goto	l4314
  6782                           
  6783                           ; BSR set to: 0
  6784  0013D2  0100               	movlb	0	; () banked
  6785  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  6786  0013D6  0100               	movlb	0	; () banked
  6787  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6788  0013DA  0100               	movlb	0	; () banked
  6789  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6790  0013DE  0100               	movlb	0	; () banked
  6791  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6792  0013E2  0100               	movlb	0	; () banked
  6793  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6794  0013E6  0100               	movlb	0	; () banked
  6795  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6796  0013EA                     l4314:
  6797                           
  6798                           ; BSR set to: 0
  6799  0013EA  0100               	movlb	0	; () banked
  6800  0013EC  90D8               	bcf	status,0,c
  6801  0013EE  0100               	movlb	0	; () banked
  6802  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6803  0013F2  0100               	movlb	0	; () banked
  6804  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6805  0013F6  0100               	movlb	0	; () banked
  6806  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6807  0013FA  0100               	movlb	0	; () banked
  6808  0013FC  90D8               	bcf	status,0,c
  6809  0013FE  0100               	movlb	0	; () banked
  6810  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6811  001402  0100               	movlb	0	; () banked
  6812  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6813  001406  0100               	movlb	0	; () banked
  6814  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6815                           
  6816                           ; BSR set to: 0
  6817  00140A  0100               	movlb	0	; () banked
  6818  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6819  00140E  D7DE               	goto	l4310
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6825  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6826  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6827  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  6828  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  6829  001424  EC4F  F00D         	call	___ftpack	;wreg free
  6830  001428  C019  F060         	movff	?___ftpack,?___ftmul
  6831  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  6832  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  6833  001434                     l1027:
  6834  001434  0012               	return	
  6835  001436                     __end_of___ftmul:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           indf0	equ	0xFEF
  6845                           postinc0	equ	0xFEE
  6846                           fsr0h	equ	0xFEA
  6847                           fsr0l	equ	0xFE9
  6848                           wreg	equ	0xFE8
  6849                           postinc1	equ	0xFE6
  6850                           postdec1	equ	0xFE5
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function ___awmod *****************
  6860 ;; Defined at:
  6861 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  dividend        2   24[COMRAM] int 
  6864 ;;  divisor         2   26[COMRAM] int 
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  sign            1   29[COMRAM] unsigned char 
  6867 ;;  counter         1   28[COMRAM] unsigned char 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  2   24[COMRAM] int 
  6870 ;; Registers used:
  6871 ;;		wreg, status,2, status,0, prodl
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6877 ;;      Params:         4       0       0       0       0       0       0       0       0
  6878 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6880 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6881 ;;Total ram usage:        6 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    4
  6884 ;; This function calls:
  6885 ;;		Nothing
  6886 ;; This function is called by:
  6887 ;;		_fround
  6888 ;;		_scale
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text30
  6893  001DBA                     __ptext30:
  6894                           	opt stack 0
  6895  001DBA                     ___awmod:
  6896                           	opt stack 22
  6897                           
  6898                           ;incstack = 0
  6899  001DBA  0E00               	movlw	0
  6900  001DBC  6E1E               	movwf	___awmod@sign,c
  6901  001DBE  501A               	movf	___awmod@dividend+1,w,c
  6902  001DC0  0A80               	xorlw	128
  6903  001DC2  6EF3               	movwf	prodl,c
  6904  001DC4  0E80               	movlw	128
  6905  001DC6  5CF3               	subwf	prodl,w,c
  6906  001DC8  0E00               	movlw	0
  6907  001DCA  B4D8               	btfsc	status,2,c
  6908  001DCC  5C19               	subwf	___awmod@dividend,w,c
  6909  001DCE  B0D8               	btfsc	status,0,c
  6910  001DD0  D006               	goto	l4374
  6911  001DD2  6C19               	negf	___awmod@dividend,c
  6912  001DD4  1E1A               	comf	___awmod@dividend+1,f,c
  6913  001DD6  B0D8               	btfsc	status,0,c
  6914  001DD8  2A1A               	incf	___awmod@dividend+1,f,c
  6915  001DDA  0E01               	movlw	1
  6916  001DDC  6E1E               	movwf	___awmod@sign,c
  6917  001DDE                     l4374:
  6918  001DDE  501C               	movf	___awmod@divisor+1,w,c
  6919  001DE0  0A80               	xorlw	128
  6920  001DE2  6EF3               	movwf	prodl,c
  6921  001DE4  0E80               	movlw	128
  6922  001DE6  5CF3               	subwf	prodl,w,c
  6923  001DE8  0E00               	movlw	0
  6924  001DEA  B4D8               	btfsc	status,2,c
  6925  001DEC  5C1B               	subwf	___awmod@divisor,w,c
  6926  001DEE  B0D8               	btfsc	status,0,c
  6927  001DF0  D004               	goto	l4378
  6928  001DF2  6C1B               	negf	___awmod@divisor,c
  6929  001DF4  1E1C               	comf	___awmod@divisor+1,f,c
  6930  001DF6  B0D8               	btfsc	status,0,c
  6931  001DF8  2A1C               	incf	___awmod@divisor+1,f,c
  6932  001DFA                     l4378:
  6933  001DFA  501C               	movf	___awmod@divisor+1,w,c
  6934  001DFC  101B               	iorwf	___awmod@divisor,w,c
  6935  001DFE  B4D8               	btfsc	status,2,c
  6936  001E00  D018               	goto	l4394
  6937  001E02  0E01               	movlw	1
  6938  001E04  6E1D               	movwf	___awmod@counter,c
  6939  001E06  D004               	goto	l4384
  6940  001E08                     l4382:
  6941  001E08  90D8               	bcf	status,0,c
  6942  001E0A  361B               	rlcf	___awmod@divisor,f,c
  6943  001E0C  361C               	rlcf	___awmod@divisor+1,f,c
  6944  001E0E  2A1D               	incf	___awmod@counter,f,c
  6945  001E10                     l4384:
  6946  001E10  AE1C               	btfss	___awmod@divisor+1,7,c
  6947  001E12  D7FA               	goto	l4382
  6948  001E14                     l4386:
  6949  001E14  501B               	movf	___awmod@divisor,w,c
  6950  001E16  5C19               	subwf	___awmod@dividend,w,c
  6951  001E18  501C               	movf	___awmod@divisor+1,w,c
  6952  001E1A  581A               	subwfb	___awmod@dividend+1,w,c
  6953  001E1C  A0D8               	btfss	status,0,c
  6954  001E1E  D004               	goto	l4390
  6955  001E20  501B               	movf	___awmod@divisor,w,c
  6956  001E22  5E19               	subwf	___awmod@dividend,f,c
  6957  001E24  501C               	movf	___awmod@divisor+1,w,c
  6958  001E26  5A1A               	subwfb	___awmod@dividend+1,f,c
  6959  001E28                     l4390:
  6960  001E28  90D8               	bcf	status,0,c
  6961  001E2A  321C               	rrcf	___awmod@divisor+1,f,c
  6962  001E2C  321B               	rrcf	___awmod@divisor,f,c
  6963  001E2E  2E1D               	decfsz	___awmod@counter,f,c
  6964  001E30  D7F1               	goto	l4386
  6965  001E32                     l4394:
  6966  001E32  501E               	movf	___awmod@sign,w,c
  6967  001E34  B4D8               	btfsc	status,2,c
  6968  001E36  D004               	goto	l4398
  6969  001E38  6C19               	negf	___awmod@dividend,c
  6970  001E3A  1E1A               	comf	___awmod@dividend+1,f,c
  6971  001E3C  B0D8               	btfsc	status,0,c
  6972  001E3E  2A1A               	incf	___awmod@dividend+1,f,c
  6973  001E40                     l4398:
  6974  001E40  C019  F019         	movff	___awmod@dividend,?___awmod
  6975  001E44  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  6976  001E48  0012               	return	
  6977  001E4A                     __end_of___awmod:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           indf0	equ	0xFEF
  6987                           postinc0	equ	0xFEE
  6988                           fsr0h	equ	0xFEA
  6989                           fsr0l	equ	0xFE9
  6990                           wreg	equ	0xFE8
  6991                           postinc1	equ	0xFE6
  6992                           postdec1	equ	0xFE5
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function ___awdiv *****************
  7002 ;; Defined at:
  7003 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  dividend        2   30[COMRAM] int 
  7006 ;;  divisor         2   32[COMRAM] int 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  quotient        2   36[COMRAM] int 
  7009 ;;  sign            1   35[COMRAM] unsigned char 
  7010 ;;  counter         1   34[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  2   30[COMRAM] int 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0, prodl
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7020 ;;      Params:         4       0       0       0       0       0       0       0       0
  7021 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7023 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7024 ;;Total ram usage:        8 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    4
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_fround
  7031 ;;		_scale
  7032 ;;		_sprintf
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text31
  7037  001BEC                     __ptext31:
  7038                           	opt stack 0
  7039  001BEC                     ___awdiv:
  7040                           	opt stack 22
  7041                           
  7042                           ;incstack = 0
  7043  001BEC  0E00               	movlw	0
  7044  001BEE  6E24               	movwf	___awdiv@sign,c
  7045  001BF0  5022               	movf	___awdiv@divisor+1,w,c
  7046  001BF2  0A80               	xorlw	128
  7047  001BF4  6EF3               	movwf	prodl,c
  7048  001BF6  0E80               	movlw	128
  7049  001BF8  5CF3               	subwf	prodl,w,c
  7050  001BFA  0E00               	movlw	0
  7051  001BFC  B4D8               	btfsc	status,2,c
  7052  001BFE  5C21               	subwf	___awdiv@divisor,w,c
  7053  001C00  B0D8               	btfsc	status,0,c
  7054  001C02  D006               	goto	l4330
  7055  001C04  6C21               	negf	___awdiv@divisor,c
  7056  001C06  1E22               	comf	___awdiv@divisor+1,f,c
  7057  001C08  B0D8               	btfsc	status,0,c
  7058  001C0A  2A22               	incf	___awdiv@divisor+1,f,c
  7059  001C0C  0E01               	movlw	1
  7060  001C0E  6E24               	movwf	___awdiv@sign,c
  7061  001C10                     l4330:
  7062  001C10  5020               	movf	___awdiv@dividend+1,w,c
  7063  001C12  0A80               	xorlw	128
  7064  001C14  6EF3               	movwf	prodl,c
  7065  001C16  0E80               	movlw	128
  7066  001C18  5CF3               	subwf	prodl,w,c
  7067  001C1A  0E00               	movlw	0
  7068  001C1C  B4D8               	btfsc	status,2,c
  7069  001C1E  5C1F               	subwf	___awdiv@dividend,w,c
  7070  001C20  B0D8               	btfsc	status,0,c
  7071  001C22  D006               	goto	l4336
  7072  001C24  6C1F               	negf	___awdiv@dividend,c
  7073  001C26  1E20               	comf	___awdiv@dividend+1,f,c
  7074  001C28  B0D8               	btfsc	status,0,c
  7075  001C2A  2A20               	incf	___awdiv@dividend+1,f,c
  7076  001C2C  0E01               	movlw	1
  7077  001C2E  1A24               	xorwf	___awdiv@sign,f,c
  7078  001C30                     l4336:
  7079  001C30  0E00               	movlw	0
  7080  001C32  6E26               	movwf	___awdiv@quotient+1,c
  7081  001C34  0E00               	movlw	0
  7082  001C36  6E25               	movwf	___awdiv@quotient,c
  7083  001C38  5022               	movf	___awdiv@divisor+1,w,c
  7084  001C3A  1021               	iorwf	___awdiv@divisor,w,c
  7085  001C3C  B4D8               	btfsc	status,2,c
  7086  001C3E  D01C               	goto	l4358
  7087  001C40  0E01               	movlw	1
  7088  001C42  6E23               	movwf	___awdiv@counter,c
  7089  001C44  D004               	goto	l4344
  7090  001C46                     l4342:
  7091  001C46  90D8               	bcf	status,0,c
  7092  001C48  3621               	rlcf	___awdiv@divisor,f,c
  7093  001C4A  3622               	rlcf	___awdiv@divisor+1,f,c
  7094  001C4C  2A23               	incf	___awdiv@counter,f,c
  7095  001C4E                     l4344:
  7096  001C4E  AE22               	btfss	___awdiv@divisor+1,7,c
  7097  001C50  D7FA               	goto	l4342
  7098  001C52                     l4346:
  7099  001C52  90D8               	bcf	status,0,c
  7100  001C54  3625               	rlcf	___awdiv@quotient,f,c
  7101  001C56  3626               	rlcf	___awdiv@quotient+1,f,c
  7102  001C58  5021               	movf	___awdiv@divisor,w,c
  7103  001C5A  5C1F               	subwf	___awdiv@dividend,w,c
  7104  001C5C  5022               	movf	___awdiv@divisor+1,w,c
  7105  001C5E  5820               	subwfb	___awdiv@dividend+1,w,c
  7106  001C60  A0D8               	btfss	status,0,c
  7107  001C62  D005               	goto	l4354
  7108  001C64  5021               	movf	___awdiv@divisor,w,c
  7109  001C66  5E1F               	subwf	___awdiv@dividend,f,c
  7110  001C68  5022               	movf	___awdiv@divisor+1,w,c
  7111  001C6A  5A20               	subwfb	___awdiv@dividend+1,f,c
  7112  001C6C  8025               	bsf	___awdiv@quotient,0,c
  7113  001C6E                     l4354:
  7114  001C6E  90D8               	bcf	status,0,c
  7115  001C70  3222               	rrcf	___awdiv@divisor+1,f,c
  7116  001C72  3221               	rrcf	___awdiv@divisor,f,c
  7117  001C74  2E23               	decfsz	___awdiv@counter,f,c
  7118  001C76  D7ED               	goto	l4346
  7119  001C78                     l4358:
  7120  001C78  5024               	movf	___awdiv@sign,w,c
  7121  001C7A  B4D8               	btfsc	status,2,c
  7122  001C7C  D004               	goto	l4362
  7123  001C7E  6C25               	negf	___awdiv@quotient,c
  7124  001C80  1E26               	comf	___awdiv@quotient+1,f,c
  7125  001C82  B0D8               	btfsc	status,0,c
  7126  001C84  2A26               	incf	___awdiv@quotient+1,f,c
  7127  001C86                     l4362:
  7128  001C86  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7129  001C8A  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7130  001C8E  0012               	return	
  7131  001C90                     __end_of___awdiv:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           indf0	equ	0xFEF
  7141                           postinc0	equ	0xFEE
  7142                           fsr0h	equ	0xFEA
  7143                           fsr0l	equ	0xFE9
  7144                           wreg	equ	0xFE8
  7145                           postinc1	equ	0xFE6
  7146                           postdec1	equ	0xFE5
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function __tdiv_to_l_ *****************
  7156 ;; Defined at:
  7157 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  f1              3   24[COMRAM] float 
  7160 ;;  f2              3   27[COMRAM] float 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;  quot            4   33[COMRAM] unsigned long 
  7163 ;;  exp1            1   38[COMRAM] unsigned char 
  7164 ;;  cntr            1   37[COMRAM] unsigned char 
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  4   24[COMRAM] unsigned long 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7174 ;;      Params:         6       0       0       0       0       0       0       0       0
  7175 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7176 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7177 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7178 ;;Total ram usage:       15 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    4
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_sprintf
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text32
  7189  0017F0                     __ptext32:
  7190                           	opt stack 0
  7191  0017F0                     __tdiv_to_l_:
  7192                           	opt stack 23
  7193                           
  7194                           ;incstack = 0
  7195  0017F0  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7196  0017F4  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7197  0017F6  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7198  0017F8  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7199  0017FA  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7200  0017FC  E301               	bnc	u4601
  7201  0017FE  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7202  001800                     u4601:
  7203  001800  501F               	movf	??__tdiv_to_l_,w,c
  7204  001802  6E27               	movwf	__tdiv_to_l_@exp1,c
  7205  001804  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7206  001806  D001               	goto	l4564
  7207  001808  D059               	goto	u4670
  7208  00180A                     l4564:
  7209  00180A  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7210  00180E  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7211  001810  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7212  001812  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7213  001814  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7214  001816  E301               	bnc	u4621
  7215  001818  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7216  00181A                     u4621:
  7217  00181A  501F               	movf	??__tdiv_to_l_,w,c
  7218  00181C  6E26               	movwf	__tdiv_to_l_@cntr,c
  7219  00181E  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7220  001820  D001               	goto	l4570
  7221  001822  D04C               	goto	u4670
  7222  001824                     l4570:
  7223  001824  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7224  001826  0EFF               	movlw	255
  7225  001828  1619               	andwf	__tdiv_to_l_@f1,f,c
  7226  00182A  0EFF               	movlw	255
  7227  00182C  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7228  00182E  0E00               	movlw	0
  7229  001830  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7230  001832  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7231  001834  0EFF               	movlw	255
  7232  001836  161C               	andwf	__tdiv_to_l_@f2,f,c
  7233  001838  0EFF               	movlw	255
  7234  00183A  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7235  00183C  0E00               	movlw	0
  7236  00183E  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7237  001840  0E00               	movlw	0
  7238  001842  6E22               	movwf	__tdiv_to_l_@quot,c
  7239  001844  0E00               	movlw	0
  7240  001846  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7241  001848  0E00               	movlw	0
  7242  00184A  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7243  00184C  0E00               	movlw	0
  7244  00184E  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7245  001850  0E7F               	movlw	127
  7246  001852  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7247  001854  5026               	movf	__tdiv_to_l_@cntr,w,c
  7248  001856  0F98               	addlw	152
  7249  001858  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7250  00185A  0E18               	movlw	24
  7251  00185C  6E26               	movwf	__tdiv_to_l_@cntr,c
  7252  00185E                     l1005:
  7253  00185E  90D8               	bcf	status,0,c
  7254  001860  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7255  001862  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7256  001864  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7257  001866  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7258  001868  501C               	movf	__tdiv_to_l_@f2,w,c
  7259  00186A  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7260  00186C  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7261  00186E  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7262  001870  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7263  001872  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7264  001874  A0D8               	btfss	status,0,c
  7265  001876  D007               	goto	l1006
  7266  001878  501C               	movf	__tdiv_to_l_@f2,w,c
  7267  00187A  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7268  00187C  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7269  00187E  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7270  001880  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7271  001882  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7272  001884  8022               	bsf	__tdiv_to_l_@quot,0,c
  7273  001886                     l1006:
  7274  001886  90D8               	bcf	status,0,c
  7275  001888  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7276  00188A  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7277  00188C  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7278  00188E  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7279  001890  D7E6               	goto	l1005
  7280  001892  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7281  001894  D010               	goto	l4602
  7282  001896  5027               	movf	__tdiv_to_l_@exp1,w,c
  7283  001898  0A80               	xorlw	128
  7284  00189A  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7285  00189C  0EE9               	movlw	233
  7286  00189E  0A80               	xorlw	128
  7287  0018A0  5C1F               	subwf	??__tdiv_to_l_,w,c
  7288  0018A2  A0D8               	btfss	status,0,c
  7289  0018A4  D00B               	goto	u4670
  7290  0018A6                     l4598:
  7291  0018A6  90D8               	bcf	status,0,c
  7292  0018A8  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7293  0018AA  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7294  0018AC  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7295  0018AE  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7296  0018B0  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7297  0018B2  D7F9               	goto	l4598
  7298  0018B4  D014               	goto	l1012
  7299  0018B6                     l4602:
  7300  0018B6  0E17               	movlw	23
  7301  0018B8  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7302  0018BA  D00F               	goto	l4610
  7303  0018BC                     u4670:
  7304  0018BC  0E00               	movlw	0
  7305  0018BE  6E19               	movwf	?__tdiv_to_l_,c
  7306  0018C0  0E00               	movlw	0
  7307  0018C2  6E1A               	movwf	?__tdiv_to_l_+1,c
  7308  0018C4  0E00               	movlw	0
  7309  0018C6  6E1B               	movwf	?__tdiv_to_l_+2,c
  7310  0018C8  0E00               	movlw	0
  7311  0018CA  6E1C               	movwf	?__tdiv_to_l_+3,c
  7312  0018CC  D010               	goto	l1003
  7313  0018CE                     l4608:
  7314  0018CE  90D8               	bcf	status,0,c
  7315  0018D0  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7316  0018D2  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7317  0018D4  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7318  0018D6  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7319  0018D8  0627               	decf	__tdiv_to_l_@exp1,f,c
  7320  0018DA                     l4610:
  7321  0018DA  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7322  0018DC  D7F8               	goto	l4608
  7323  0018DE                     l1012:
  7324  0018DE  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7325  0018E2  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7326  0018E6  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7327  0018EA  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7328  0018EE                     l1003:
  7329  0018EE  0012               	return	
  7330  0018F0                     __end_of__tdiv_to_l_:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           indf0	equ	0xFEF
  7340                           postinc0	equ	0xFEE
  7341                           fsr0h	equ	0xFEA
  7342                           fsr0l	equ	0xFE9
  7343                           wreg	equ	0xFE8
  7344                           postinc1	equ	0xFE6
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function __div_to_l_ *****************
  7355 ;; Defined at:
  7356 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  f1              3   24[COMRAM] unsigned long 
  7359 ;;  f2              3   27[COMRAM] unsigned long 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  quot            4   34[COMRAM] unsigned long 
  7362 ;;  exp1            1   39[COMRAM] unsigned char 
  7363 ;;  cntr            1   38[COMRAM] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  4   24[COMRAM] unsigned long 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7373 ;;      Params:         6       0       0       0       0       0       0       0       0
  7374 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7375 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7376 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7377 ;;Total ram usage:       16 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    4
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_sprintf
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text33
  7388  0016BA                     __ptext33:
  7389                           	opt stack 0
  7390  0016BA                     __div_to_l_:
  7391                           	opt stack 23
  7392                           
  7393                           ;incstack = 0
  7394  0016BA  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7395  0016BE  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7396  0016C2  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7397  0016C6  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7398  0016CA  0E18               	movlw	24
  7399  0016CC  D005               	goto	u4690
  7400  0016CE                     u4695:
  7401  0016CE  90D8               	bcf	status,0,c
  7402  0016D0  3222               	rrcf	??__div_to_l_+3,f,c
  7403  0016D2  3221               	rrcf	??__div_to_l_+2,f,c
  7404  0016D4  3220               	rrcf	??__div_to_l_+1,f,c
  7405  0016D6  321F               	rrcf	??__div_to_l_,f,c
  7406  0016D8                     u4690:
  7407  0016D8  2EE8               	decfsz	wreg,f,c
  7408  0016DA  D7F9               	goto	u4695
  7409  0016DC  501F               	movf	??__div_to_l_,w,c
  7410  0016DE  6E28               	movwf	__div_to_l_@exp1,c
  7411  0016E0  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7412  0016E2  D001               	goto	l4618
  7413  0016E4  D06B               	goto	u4760
  7414  0016E6                     l4618:
  7415  0016E6  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7416  0016EA  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7417  0016EE  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7418  0016F2  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7419  0016F6  0E18               	movlw	24
  7420  0016F8  D005               	goto	u4710
  7421  0016FA                     u4715:
  7422  0016FA  90D8               	bcf	status,0,c
  7423  0016FC  3222               	rrcf	??__div_to_l_+3,f,c
  7424  0016FE  3221               	rrcf	??__div_to_l_+2,f,c
  7425  001700  3220               	rrcf	??__div_to_l_+1,f,c
  7426  001702  321F               	rrcf	??__div_to_l_,f,c
  7427  001704                     u4710:
  7428  001704  2EE8               	decfsz	wreg,f,c
  7429  001706  D7F9               	goto	u4715
  7430  001708  501F               	movf	??__div_to_l_,w,c
  7431  00170A  6E27               	movwf	__div_to_l_@cntr,c
  7432  00170C  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7433  00170E  D001               	goto	l4624
  7434  001710  D055               	goto	u4760
  7435  001712                     l4624:
  7436  001712  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7437  001714  0EFF               	movlw	255
  7438  001716  1619               	andwf	__div_to_l_@f1,f,c
  7439  001718  0EFF               	movlw	255
  7440  00171A  161A               	andwf	__div_to_l_@f1+1,f,c
  7441  00171C  0EFF               	movlw	255
  7442  00171E  161B               	andwf	__div_to_l_@f1+2,f,c
  7443  001720  0E00               	movlw	0
  7444  001722  161C               	andwf	__div_to_l_@f1+3,f,c
  7445  001724  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7446  001726  0EFF               	movlw	255
  7447  001728  161C               	andwf	__div_to_l_@f2,f,c
  7448  00172A  0EFF               	movlw	255
  7449  00172C  161D               	andwf	__div_to_l_@f2+1,f,c
  7450  00172E  0EFF               	movlw	255
  7451  001730  161E               	andwf	__div_to_l_@f2+2,f,c
  7452  001732  0E00               	movlw	0
  7453  001734  161F               	andwf	__div_to_l_@f2+3,f,c
  7454  001736  0E00               	movlw	0
  7455  001738  6E23               	movwf	__div_to_l_@quot,c
  7456  00173A  0E00               	movlw	0
  7457  00173C  6E24               	movwf	__div_to_l_@quot+1,c
  7458  00173E  0E00               	movlw	0
  7459  001740  6E25               	movwf	__div_to_l_@quot+2,c
  7460  001742  0E00               	movlw	0
  7461  001744  6E26               	movwf	__div_to_l_@quot+3,c
  7462  001746  0E7F               	movlw	127
  7463  001748  5E28               	subwf	__div_to_l_@exp1,f,c
  7464  00174A  5027               	movf	__div_to_l_@cntr,w,c
  7465  00174C  0FA0               	addlw	160
  7466  00174E  5E28               	subwf	__div_to_l_@exp1,f,c
  7467  001750  0E20               	movlw	32
  7468  001752  6E27               	movwf	__div_to_l_@cntr,c
  7469  001754                     l4638:
  7470  001754  90D8               	bcf	status,0,c
  7471  001756  3623               	rlcf	__div_to_l_@quot,f,c
  7472  001758  3624               	rlcf	__div_to_l_@quot+1,f,c
  7473  00175A  3625               	rlcf	__div_to_l_@quot+2,f,c
  7474  00175C  3626               	rlcf	__div_to_l_@quot+3,f,c
  7475  00175E  501C               	movf	__div_to_l_@f2,w,c
  7476  001760  5C19               	subwf	__div_to_l_@f1,w,c
  7477  001762  501D               	movf	__div_to_l_@f2+1,w,c
  7478  001764  581A               	subwfb	__div_to_l_@f1+1,w,c
  7479  001766  501E               	movf	__div_to_l_@f2+2,w,c
  7480  001768  581B               	subwfb	__div_to_l_@f1+2,w,c
  7481  00176A  501F               	movf	__div_to_l_@f2+3,w,c
  7482  00176C  581C               	subwfb	__div_to_l_@f1+3,w,c
  7483  00176E  A0D8               	btfss	status,0,c
  7484  001770  D009               	goto	l4646
  7485  001772  501C               	movf	__div_to_l_@f2,w,c
  7486  001774  5E19               	subwf	__div_to_l_@f1,f,c
  7487  001776  501D               	movf	__div_to_l_@f2+1,w,c
  7488  001778  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7489  00177A  501E               	movf	__div_to_l_@f2+2,w,c
  7490  00177C  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7491  00177E  501F               	movf	__div_to_l_@f2+3,w,c
  7492  001780  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7493  001782  8023               	bsf	__div_to_l_@quot,0,c
  7494  001784                     l4646:
  7495  001784  90D8               	bcf	status,0,c
  7496  001786  3619               	rlcf	__div_to_l_@f1,f,c
  7497  001788  361A               	rlcf	__div_to_l_@f1+1,f,c
  7498  00178A  361B               	rlcf	__div_to_l_@f1+2,f,c
  7499  00178C  361C               	rlcf	__div_to_l_@f1+3,f,c
  7500  00178E  2E27               	decfsz	__div_to_l_@cntr,f,c
  7501  001790  D7E1               	goto	l4638
  7502  001792  AE28               	btfss	__div_to_l_@exp1,7,c
  7503  001794  D010               	goto	l4660
  7504  001796  5028               	movf	__div_to_l_@exp1,w,c
  7505  001798  0A80               	xorlw	128
  7506  00179A  6E1F               	movwf	??__div_to_l_& (0+255),c
  7507  00179C  0EE1               	movlw	225
  7508  00179E  0A80               	xorlw	128
  7509  0017A0  5C1F               	subwf	??__div_to_l_,w,c
  7510  0017A2  A0D8               	btfss	status,0,c
  7511  0017A4  D00B               	goto	u4760
  7512  0017A6                     l4656:
  7513  0017A6  90D8               	bcf	status,0,c
  7514  0017A8  3226               	rrcf	__div_to_l_@quot+3,f,c
  7515  0017AA  3225               	rrcf	__div_to_l_@quot+2,f,c
  7516  0017AC  3224               	rrcf	__div_to_l_@quot+1,f,c
  7517  0017AE  3223               	rrcf	__div_to_l_@quot,f,c
  7518  0017B0  3E28               	incfsz	__div_to_l_@exp1,f,c
  7519  0017B2  D7F9               	goto	l4656
  7520  0017B4  D014               	goto	l894
  7521  0017B6                     l4660:
  7522  0017B6  0E1F               	movlw	31
  7523  0017B8  6428               	cpfsgt	__div_to_l_@exp1,c
  7524  0017BA  D00F               	goto	l4668
  7525  0017BC                     u4760:
  7526  0017BC  0E00               	movlw	0
  7527  0017BE  6E19               	movwf	?__div_to_l_,c
  7528  0017C0  0E00               	movlw	0
  7529  0017C2  6E1A               	movwf	?__div_to_l_+1,c
  7530  0017C4  0E00               	movlw	0
  7531  0017C6  6E1B               	movwf	?__div_to_l_+2,c
  7532  0017C8  0E00               	movlw	0
  7533  0017CA  6E1C               	movwf	?__div_to_l_+3,c
  7534  0017CC  D010               	goto	l885
  7535  0017CE                     l4666:
  7536  0017CE  90D8               	bcf	status,0,c
  7537  0017D0  3623               	rlcf	__div_to_l_@quot,f,c
  7538  0017D2  3624               	rlcf	__div_to_l_@quot+1,f,c
  7539  0017D4  3625               	rlcf	__div_to_l_@quot+2,f,c
  7540  0017D6  3626               	rlcf	__div_to_l_@quot+3,f,c
  7541  0017D8  0628               	decf	__div_to_l_@exp1,f,c
  7542  0017DA                     l4668:
  7543  0017DA  6628               	tstfsz	__div_to_l_@exp1,c
  7544  0017DC  D7F8               	goto	l4666
  7545  0017DE                     l894:
  7546  0017DE  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7547  0017E2  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7548  0017E6  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7549  0017EA  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7550  0017EE                     l885:
  7551  0017EE  0012               	return	
  7552  0017F0                     __end_of__div_to_l_:
  7553                           	opt stack 0
  7554                           tblptru	equ	0xFF8
  7555                           tblptrh	equ	0xFF7
  7556                           tblptrl	equ	0xFF6
  7557                           tablat	equ	0xFF5
  7558                           prodh	equ	0xFF4
  7559                           prodl	equ	0xFF3
  7560                           intcon	equ	0xFF2
  7561                           indf0	equ	0xFEF
  7562                           postinc0	equ	0xFEE
  7563                           fsr0h	equ	0xFEA
  7564                           fsr0l	equ	0xFE9
  7565                           wreg	equ	0xFE8
  7566                           postinc1	equ	0xFE6
  7567                           postdec1	equ	0xFE5
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           
  7576 ;; *************** function ___lltoft *****************
  7577 ;; Defined at:
  7578 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  c               4   32[COMRAM] unsigned long 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;  exp             1   40[COMRAM] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  3   32[COMRAM] float 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7592 ;;      Params:         4       0       0       0       0       0       0       0       0
  7593 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7594 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7595 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7596 ;;Total ram usage:        9 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    5
  7599 ;; This function calls:
  7600 ;;		___ftpack
  7601 ;; This function is called by:
  7602 ;;		_sprintf
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text34
  7607  00230E                     __ptext34:
  7608                           	opt stack 0
  7609  00230E                     ___lltoft:
  7610                           	opt stack 22
  7611                           
  7612                           ;incstack = 0
  7613  00230E  0E8E               	movlw	142
  7614  002310  6E29               	movwf	___lltoft@exp,c
  7615  002312  D006               	goto	l4786
  7616  002314                     l4784:
  7617  002314  90D8               	bcf	status,0,c
  7618  002316  3224               	rrcf	___lltoft@c+3,f,c
  7619  002318  3223               	rrcf	___lltoft@c+2,f,c
  7620  00231A  3222               	rrcf	___lltoft@c+1,f,c
  7621  00231C  3221               	rrcf	___lltoft@c,f,c
  7622  00231E  2A29               	incf	___lltoft@exp,f,c
  7623  002320                     l4786:
  7624  002320  0E00               	movlw	0
  7625  002322  1421               	andwf	___lltoft@c,w,c
  7626  002324  6E25               	movwf	??___lltoft& (0+255),c
  7627  002326  0E00               	movlw	0
  7628  002328  1422               	andwf	___lltoft@c+1,w,c
  7629  00232A  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7630  00232C  0E00               	movlw	0
  7631  00232E  1423               	andwf	___lltoft@c+2,w,c
  7632  002330  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7633  002332  0EFF               	movlw	255
  7634  002334  1424               	andwf	___lltoft@c+3,w,c
  7635  002336  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7636  002338  5028               	movf	??___lltoft+3,w,c
  7637  00233A  1025               	iorwf	??___lltoft,w,c
  7638  00233C  1026               	iorwf	??___lltoft+1,w,c
  7639  00233E  1027               	iorwf	??___lltoft+2,w,c
  7640  002340  A4D8               	btfss	status,2,c
  7641  002342  D7E8               	goto	l4784
  7642  002344  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7643  002348  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7644  00234C  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7645  002350  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7646  002354  0E00               	movlw	0
  7647  002356  6E1D               	movwf	___ftpack@sign,c
  7648  002358  EC4F  F00D         	call	___ftpack	;wreg free
  7649  00235C  C019  F021         	movff	?___ftpack,?___lltoft
  7650  002360  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7651  002364  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7652  002368  0012               	return	
  7653  00236A                     __end_of___lltoft:
  7654                           	opt stack 0
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           indf0	equ	0xFEF
  7663                           postinc0	equ	0xFEE
  7664                           fsr0h	equ	0xFEA
  7665                           fsr0l	equ	0xFE9
  7666                           wreg	equ	0xFE8
  7667                           postinc1	equ	0xFE6
  7668                           postdec1	equ	0xFE5
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           fsr2h	equ	0xFDA
  7674                           fsr2l	equ	0xFD9
  7675                           status	equ	0xFD8
  7676                           
  7677 ;; *************** function ___llmod *****************
  7678 ;; Defined at:
  7679 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  dividend        4   37[COMRAM] unsigned long 
  7682 ;;  divisor         4   41[COMRAM] unsigned long 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  counter         1   45[COMRAM] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  4   37[COMRAM] unsigned long 
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, status,0
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7694 ;;      Params:         8       0       0       0       0       0       0       0       0
  7695 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7697 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7698 ;;Total ram usage:        9 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    4
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_sprintf
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           	psect	text35
  7709  0022A8                     __ptext35:
  7710                           	opt stack 0
  7711  0022A8                     ___llmod:
  7712                           	opt stack 23
  7713                           
  7714                           ;incstack = 0
  7715  0022A8  502D               	movf	___llmod@divisor+3,w,c
  7716  0022AA  102A               	iorwf	___llmod@divisor,w,c
  7717  0022AC  102B               	iorwf	___llmod@divisor+1,w,c
  7718  0022AE  102C               	iorwf	___llmod@divisor+2,w,c
  7719  0022B0  B4D8               	btfsc	status,2,c
  7720  0022B2  D024               	goto	l1096
  7721  0022B4  0E01               	movlw	1
  7722  0022B6  6E2E               	movwf	___llmod@counter,c
  7723  0022B8  D006               	goto	l4772
  7724  0022BA                     l4770:
  7725  0022BA  90D8               	bcf	status,0,c
  7726  0022BC  362A               	rlcf	___llmod@divisor,f,c
  7727  0022BE  362B               	rlcf	___llmod@divisor+1,f,c
  7728  0022C0  362C               	rlcf	___llmod@divisor+2,f,c
  7729  0022C2  362D               	rlcf	___llmod@divisor+3,f,c
  7730  0022C4  2A2E               	incf	___llmod@counter,f,c
  7731  0022C6                     l4772:
  7732  0022C6  AE2D               	btfss	___llmod@divisor+3,7,c
  7733  0022C8  D7F8               	goto	l4770
  7734  0022CA                     l4774:
  7735  0022CA  502A               	movf	___llmod@divisor,w,c
  7736  0022CC  5C26               	subwf	___llmod@dividend,w,c
  7737  0022CE  502B               	movf	___llmod@divisor+1,w,c
  7738  0022D0  5827               	subwfb	___llmod@dividend+1,w,c
  7739  0022D2  502C               	movf	___llmod@divisor+2,w,c
  7740  0022D4  5828               	subwfb	___llmod@dividend+2,w,c
  7741  0022D6  502D               	movf	___llmod@divisor+3,w,c
  7742  0022D8  5829               	subwfb	___llmod@dividend+3,w,c
  7743  0022DA  A0D8               	btfss	status,0,c
  7744  0022DC  D008               	goto	l4778
  7745  0022DE  502A               	movf	___llmod@divisor,w,c
  7746  0022E0  5E26               	subwf	___llmod@dividend,f,c
  7747  0022E2  502B               	movf	___llmod@divisor+1,w,c
  7748  0022E4  5A27               	subwfb	___llmod@dividend+1,f,c
  7749  0022E6  502C               	movf	___llmod@divisor+2,w,c
  7750  0022E8  5A28               	subwfb	___llmod@dividend+2,f,c
  7751  0022EA  502D               	movf	___llmod@divisor+3,w,c
  7752  0022EC  5A29               	subwfb	___llmod@dividend+3,f,c
  7753  0022EE                     l4778:
  7754  0022EE  90D8               	bcf	status,0,c
  7755  0022F0  322D               	rrcf	___llmod@divisor+3,f,c
  7756  0022F2  322C               	rrcf	___llmod@divisor+2,f,c
  7757  0022F4  322B               	rrcf	___llmod@divisor+1,f,c
  7758  0022F6  322A               	rrcf	___llmod@divisor,f,c
  7759  0022F8  2E2E               	decfsz	___llmod@counter,f,c
  7760  0022FA  D7E7               	goto	l4774
  7761  0022FC                     l1096:
  7762  0022FC  C026  F026         	movff	___llmod@dividend,?___llmod
  7763  002300  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7764  002304  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7765  002308  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7766  00230C  0012               	return	
  7767  00230E                     __end_of___llmod:
  7768                           	opt stack 0
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           prodh	equ	0xFF4
  7774                           prodl	equ	0xFF3
  7775                           intcon	equ	0xFF2
  7776                           indf0	equ	0xFEF
  7777                           postinc0	equ	0xFEE
  7778                           fsr0h	equ	0xFEA
  7779                           fsr0l	equ	0xFE9
  7780                           wreg	equ	0xFE8
  7781                           postinc1	equ	0xFE6
  7782                           postdec1	equ	0xFE5
  7783                           fsr1l	equ	0xFE1
  7784                           indf2	equ	0xFDF
  7785                           postinc2	equ	0xFDE
  7786                           postdec2	equ	0xFDD
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function ___lldiv *****************
  7792 ;; Defined at:
  7793 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  dividend        4   24[COMRAM] unsigned long 
  7796 ;;  divisor         4   28[COMRAM] unsigned long 
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  quotient        4   32[COMRAM] unsigned long 
  7799 ;;  counter         1   36[COMRAM] unsigned char 
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  4   24[COMRAM] unsigned long 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7809 ;;      Params:         8       0       0       0       0       0       0       0       0
  7810 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7812 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7813 ;;Total ram usage:       13 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    4
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_sprintf
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           	psect	text36
  7824  001F60                     __ptext36:
  7825                           	opt stack 0
  7826  001F60                     ___lldiv:
  7827                           	opt stack 23
  7828                           
  7829                           ;incstack = 0
  7830  001F60  0E00               	movlw	0
  7831  001F62  6E21               	movwf	___lldiv@quotient,c
  7832  001F64  0E00               	movlw	0
  7833  001F66  6E22               	movwf	___lldiv@quotient+1,c
  7834  001F68  0E00               	movlw	0
  7835  001F6A  6E23               	movwf	___lldiv@quotient+2,c
  7836  001F6C  0E00               	movlw	0
  7837  001F6E  6E24               	movwf	___lldiv@quotient+3,c
  7838  001F70  5020               	movf	___lldiv@divisor+3,w,c
  7839  001F72  101D               	iorwf	___lldiv@divisor,w,c
  7840  001F74  101E               	iorwf	___lldiv@divisor+1,w,c
  7841  001F76  101F               	iorwf	___lldiv@divisor+2,w,c
  7842  001F78  B4D8               	btfsc	status,2,c
  7843  001F7A  D02A               	goto	l1086
  7844  001F7C  0E01               	movlw	1
  7845  001F7E  6E25               	movwf	___lldiv@counter,c
  7846  001F80  D006               	goto	l4752
  7847  001F82                     l4750:
  7848  001F82  90D8               	bcf	status,0,c
  7849  001F84  361D               	rlcf	___lldiv@divisor,f,c
  7850  001F86  361E               	rlcf	___lldiv@divisor+1,f,c
  7851  001F88  361F               	rlcf	___lldiv@divisor+2,f,c
  7852  001F8A  3620               	rlcf	___lldiv@divisor+3,f,c
  7853  001F8C  2A25               	incf	___lldiv@counter,f,c
  7854  001F8E                     l4752:
  7855  001F8E  AE20               	btfss	___lldiv@divisor+3,7,c
  7856  001F90  D7F8               	goto	l4750
  7857  001F92                     l4754:
  7858  001F92  90D8               	bcf	status,0,c
  7859  001F94  3621               	rlcf	___lldiv@quotient,f,c
  7860  001F96  3622               	rlcf	___lldiv@quotient+1,f,c
  7861  001F98  3623               	rlcf	___lldiv@quotient+2,f,c
  7862  001F9A  3624               	rlcf	___lldiv@quotient+3,f,c
  7863  001F9C  501D               	movf	___lldiv@divisor,w,c
  7864  001F9E  5C19               	subwf	___lldiv@dividend,w,c
  7865  001FA0  501E               	movf	___lldiv@divisor+1,w,c
  7866  001FA2  581A               	subwfb	___lldiv@dividend+1,w,c
  7867  001FA4  501F               	movf	___lldiv@divisor+2,w,c
  7868  001FA6  581B               	subwfb	___lldiv@dividend+2,w,c
  7869  001FA8  5020               	movf	___lldiv@divisor+3,w,c
  7870  001FAA  581C               	subwfb	___lldiv@dividend+3,w,c
  7871  001FAC  A0D8               	btfss	status,0,c
  7872  001FAE  D009               	goto	l4762
  7873  001FB0  501D               	movf	___lldiv@divisor,w,c
  7874  001FB2  5E19               	subwf	___lldiv@dividend,f,c
  7875  001FB4  501E               	movf	___lldiv@divisor+1,w,c
  7876  001FB6  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7877  001FB8  501F               	movf	___lldiv@divisor+2,w,c
  7878  001FBA  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7879  001FBC  5020               	movf	___lldiv@divisor+3,w,c
  7880  001FBE  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7881  001FC0  8021               	bsf	___lldiv@quotient,0,c
  7882  001FC2                     l4762:
  7883  001FC2  90D8               	bcf	status,0,c
  7884  001FC4  3220               	rrcf	___lldiv@divisor+3,f,c
  7885  001FC6  321F               	rrcf	___lldiv@divisor+2,f,c
  7886  001FC8  321E               	rrcf	___lldiv@divisor+1,f,c
  7887  001FCA  321D               	rrcf	___lldiv@divisor,f,c
  7888  001FCC  2E25               	decfsz	___lldiv@counter,f,c
  7889  001FCE  D7E1               	goto	l4754
  7890  001FD0                     l1086:
  7891  001FD0  C021  F019         	movff	___lldiv@quotient,?___lldiv
  7892  001FD4  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  7893  001FD8  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  7894  001FDC  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  7895  001FE0  0012               	return	
  7896  001FE2                     __end_of___lldiv:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           indf0	equ	0xFEF
  7906                           postinc0	equ	0xFEE
  7907                           fsr0h	equ	0xFEA
  7908                           fsr0l	equ	0xFE9
  7909                           wreg	equ	0xFE8
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function ___fttol *****************
  7921 ;; Defined at:
  7922 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  f1              3   19[BANK0 ] float 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  lval            4   29[BANK0 ] unsigned long 
  7927 ;;  exp1            1   33[BANK0 ] unsigned char 
  7928 ;;  sign1           1   28[BANK0 ] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  4   19[BANK0 ] long 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7938 ;;      Params:         0       4       0       0       0       0       0       0       0
  7939 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7940 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7941 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7942 ;;Total ram usage:       15 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    4
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_PWM_DutyCycle1
  7949 ;;		_PWM_DutyCycle2
  7950 ;;		_sprintf
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           	psect	text37
  7955  001436                     __ptext37:
  7956                           	opt stack 0
  7957  001436                     ___fttol:
  7958                           	opt stack 23
  7959                           
  7960                           ;incstack = 0
  7961  001436  0100               	movlb	0	; () banked
  7962  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  7963  00143C  0100               	movlb	0	; () banked
  7964  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  7965  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  7966  001442  0100               	movlb	0	; () banked
  7967  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7968  001446  0100               	movlb	0	; () banked
  7969  001448  3777               	rlcf	??___fttol& (0+255),f,b
  7970  00144A  E301               	bnc	u4821
  7971  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  7972  00144E                     u4821:
  7973  00144E  0100               	movlb	0	; () banked
  7974  001450  5177               	movf	??___fttol& (0+255),w,b
  7975  001452  0100               	movlb	0	; () banked
  7976  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  7977  001456  0100               	movlb	0	; () banked
  7978  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  7979  00145A  D001               	goto	l4704
  7980  00145C  D059               	goto	u4870
  7981  00145E                     l4704:
  7982                           
  7983                           ; BSR set to: 0
  7984  00145E  0E17               	movlw	23
  7985  001460  0100               	movlb	0	; () banked
  7986  001462  6F77               	movwf	??___fttol& (0+255),b
  7987  001464  0100               	movlb	0	; () banked
  7988  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  7989  00146A  0100               	movlb	0	; () banked
  7990  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  7991  001470  0100               	movlb	0	; () banked
  7992  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  7993  001476  0100               	movlb	0	; () banked
  7994  001478  2977               	incf	??___fttol& (0+255),w,b
  7995  00147A  0100               	movlb	0	; () banked
  7996  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  7997  00147E  D005               	goto	u4840
  7998  001480                     u4845:
  7999  001480  0100               	movlb	0	; () banked
  8000  001482  90D8               	bcf	status,0,c
  8001  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8002  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8003  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8004  00148A                     u4840:
  8005  00148A  0100               	movlb	0	; () banked
  8006  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8007  00148E  D7F8               	goto	u4845
  8008  001490  0100               	movlb	0	; () banked
  8009  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8010  001494  0100               	movlb	0	; () banked
  8011  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8012                           
  8013                           ; BSR set to: 0
  8014  001498  0100               	movlb	0	; () banked
  8015  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8016                           
  8017                           ; BSR set to: 0
  8018  00149C  0EFF               	movlw	255
  8019  00149E  0100               	movlb	0	; () banked
  8020  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8021  0014A2  0EFF               	movlw	255
  8022  0014A4  0100               	movlb	0	; () banked
  8023  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8024  0014A8  0E00               	movlw	0
  8025  0014AA  0100               	movlb	0	; () banked
  8026  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8027                           
  8028                           ; BSR set to: 0
  8029  0014AE  0100               	movlb	0	; () banked
  8030  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8031  0014B2  0100               	movlb	0	; () banked
  8032  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8033  0014B6  0100               	movlb	0	; () banked
  8034  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8035  0014BA  0100               	movlb	0	; () banked
  8036  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8037  0014BE  0100               	movlb	0	; () banked
  8038  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8039  0014C2  0100               	movlb	0	; () banked
  8040  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8041  0014C6  0100               	movlb	0	; () banked
  8042  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8043                           
  8044                           ; BSR set to: 0
  8045  0014CA  0E8E               	movlw	142
  8046  0014CC  0100               	movlb	0	; () banked
  8047  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8048                           
  8049                           ; BSR set to: 0
  8050  0014D0  0100               	movlb	0	; () banked
  8051  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8052  0014D4  D019               	goto	l4726
  8053                           
  8054                           ; BSR set to: 0
  8055  0014D6  0100               	movlb	0	; () banked
  8056  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8057  0014DA  0A80               	xorlw	128
  8058  0014DC  0100               	movlb	0	; () banked
  8059  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8060  0014E0  0EF1               	movlw	241
  8061  0014E2  0A80               	xorlw	128
  8062  0014E4  0100               	movlb	0	; () banked
  8063  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8064  0014E8  A0D8               	btfss	status,0,c
  8065  0014EA  D012               	goto	u4870
  8066  0014EC                     l4722:
  8067                           
  8068                           ; BSR set to: 0
  8069  0014EC  0100               	movlb	0	; () banked
  8070  0014EE  90D8               	bcf	status,0,c
  8071  0014F0  0100               	movlb	0	; () banked
  8072  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8073  0014F4  0100               	movlb	0	; () banked
  8074  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8075  0014F8  0100               	movlb	0	; () banked
  8076  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8077  0014FC  0100               	movlb	0	; () banked
  8078  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8079                           
  8080                           ; BSR set to: 0
  8081  001500  0100               	movlb	0	; () banked
  8082  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8083  001504  D7F3               	goto	l4722
  8084  001506  D020               	goto	l4736
  8085  001508                     l4726:
  8086                           
  8087                           ; BSR set to: 0
  8088  001508  0E17               	movlw	23
  8089  00150A  0100               	movlb	0	; () banked
  8090  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8091  00150E  D019               	goto	l4734
  8092  001510                     u4870:
  8093                           
  8094                           ; BSR set to: 0
  8095  001510  0E00               	movlw	0
  8096  001512  0100               	movlb	0	; () banked
  8097  001514  6F73               	movwf	?___fttol& (0+255),b
  8098  001516  0E00               	movlw	0
  8099  001518  0100               	movlb	0	; () banked
  8100  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8101  00151C  0E00               	movlw	0
  8102  00151E  0100               	movlb	0	; () banked
  8103  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8104  001522  0E00               	movlw	0
  8105  001524  0100               	movlb	0	; () banked
  8106  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8107  001528  D02A               	goto	l1047
  8108  00152A                     l4732:
  8109                           
  8110                           ; BSR set to: 0
  8111  00152A  0100               	movlb	0	; () banked
  8112  00152C  90D8               	bcf	status,0,c
  8113  00152E  0100               	movlb	0	; () banked
  8114  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8115  001532  0100               	movlb	0	; () banked
  8116  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8117  001536  0100               	movlb	0	; () banked
  8118  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8119  00153A  0100               	movlb	0	; () banked
  8120  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8121  00153E  0100               	movlb	0	; () banked
  8122  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8123  001542                     l4734:
  8124                           
  8125                           ; BSR set to: 0
  8126  001542  0100               	movlb	0	; () banked
  8127  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8128  001546  D7F1               	goto	l4732
  8129  001548                     l4736:
  8130                           
  8131                           ; BSR set to: 0
  8132  001548  0100               	movlb	0	; () banked
  8133  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8134  00154C  B4D8               	btfsc	status,2,c
  8135  00154E  D00F               	goto	l4740
  8136                           
  8137                           ; BSR set to: 0
  8138  001550  0100               	movlb	0	; () banked
  8139  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8140  001554  0100               	movlb	0	; () banked
  8141  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8142  001558  0100               	movlb	0	; () banked
  8143  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8144  00155C  0100               	movlb	0	; () banked
  8145  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8146  001560  0E00               	movlw	0
  8147  001562  0100               	movlb	0	; () banked
  8148  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8149  001566  0100               	movlb	0	; () banked
  8150  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8151  00156A  0100               	movlb	0	; () banked
  8152  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8153  00156E                     l4740:
  8154                           
  8155                           ; BSR set to: 0
  8156  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8157  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8158  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8159  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8160  00157E                     l1047:
  8161                           
  8162                           ; BSR set to: 0
  8163  00157E  0012               	return	
  8164  001580                     __end_of___fttol:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           indf0	equ	0xFEF
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           postinc1	equ	0xFE6
  8179                           postdec1	equ	0xFE5
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function ___ftsub *****************
  8189 ;; Defined at:
  8190 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  f1              3   34[BANK0 ] float 
  8193 ;;  f2              3   37[BANK0 ] float 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;		None
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  3   34[BANK0 ] float 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8205 ;;      Params:         0       6       0       0       0       0       0       0       0
  8206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8208 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8209 ;;Total ram usage:        6 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    6
  8212 ;; This function calls:
  8213 ;;		___ftadd
  8214 ;; This function is called by:
  8215 ;;		_sprintf
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text38
  8220  00249C                     __ptext38:
  8221                           	opt stack 0
  8222  00249C                     ___ftsub:
  8223                           	opt stack 21
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;incstack = 0
  8227  00249C  0E00               	movlw	0
  8228  00249E  0100               	movlb	0	; () banked
  8229  0024A0  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8230  0024A2  0E00               	movlw	0
  8231  0024A4  0100               	movlb	0	; () banked
  8232  0024A6  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8233  0024A8  0E80               	movlw	128
  8234  0024AA  0100               	movlb	0	; () banked
  8235  0024AC  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8236                           
  8237                           ; BSR set to: 0
  8238  0024AE  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8239  0024B2  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8240  0024B6  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8241  0024BA  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8242  0024BE  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8243  0024C2  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8244  0024C6  EC2F  F008         	call	___ftadd	;wreg free
  8245  0024CA  C076  F082         	movff	?___ftadd,?___ftsub
  8246  0024CE  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8247  0024D2  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8248  0024D6  0012               	return	
  8249  0024D8                     __end_of___ftsub:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           indf0	equ	0xFEF
  8259                           postinc0	equ	0xFEE
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           postinc1	equ	0xFE6
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function ___ftadd *****************
  8274 ;; Defined at:
  8275 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  f1              3   22[BANK0 ] float 
  8278 ;;  f2              3   25[BANK0 ] float 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  exp1            1   33[BANK0 ] unsigned char 
  8281 ;;  exp2            1   32[BANK0 ] unsigned char 
  8282 ;;  sign            1   31[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  3   22[BANK0 ] float 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8292 ;;      Params:         0       6       0       0       0       0       0       0       0
  8293 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8294 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8295 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8296 ;;Total ram usage:       12 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    5
  8299 ;; This function calls:
  8300 ;;		___ftpack
  8301 ;; This function is called by:
  8302 ;;		_sprintf
  8303 ;;		___ftsub
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text39
  8308  00105E                     __ptext39:
  8309                           	opt stack 0
  8310  00105E                     ___ftadd:
  8311                           	opt stack 21
  8312                           
  8313                           ;incstack = 0
  8314  00105E  0100               	movlb	0	; () banked
  8315  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8316  001064  0100               	movlb	0	; () banked
  8317  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8318  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8319  00106A  0100               	movlb	0	; () banked
  8320  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8321  00106E  0100               	movlb	0	; () banked
  8322  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8323  001072  E301               	bnc	u3981
  8324  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8325  001076                     u3981:
  8326  001076  0100               	movlb	0	; () banked
  8327  001078  517C               	movf	??___ftadd& (0+255),w,b
  8328  00107A  0100               	movlb	0	; () banked
  8329  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8330  00107E  0100               	movlb	0	; () banked
  8331  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8332  001084  0100               	movlb	0	; () banked
  8333  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8334  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8335  00108A  0100               	movlb	0	; () banked
  8336  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8337  00108E  0100               	movlb	0	; () banked
  8338  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8339  001092  E301               	bnc	u3991
  8340  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8341  001096                     u3991:
  8342  001096  0100               	movlb	0	; () banked
  8343  001098  517C               	movf	??___ftadd& (0+255),w,b
  8344  00109A  0100               	movlb	0	; () banked
  8345  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348  00109E  0100               	movlb	0	; () banked
  8349  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8350  0010A2  B4D8               	btfsc	status,2,c
  8351  0010A4  D012               	goto	l963
  8352                           
  8353                           ; BSR set to: 0
  8354  0010A6  0100               	movlb	0	; () banked
  8355  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8356  0010AA  0100               	movlb	0	; () banked
  8357  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8358  0010AE  B0D8               	btfsc	status,0,c
  8359  0010B0  D013               	goto	l4212
  8360                           
  8361                           ; BSR set to: 0
  8362  0010B2  0100               	movlb	0	; () banked
  8363  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8364  0010B6  0800               	sublw	0
  8365  0010B8  0100               	movlb	0	; () banked
  8366  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8367  0010BC  0100               	movlb	0	; () banked
  8368  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8369  0010C0  0E19               	movlw	25
  8370  0010C2  0100               	movlb	0	; () banked
  8371  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8372  0010C6  A0D8               	btfss	status,0,c
  8373  0010C8  D007               	goto	l4212
  8374  0010CA                     l963:
  8375                           
  8376                           ; BSR set to: 0
  8377  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8378  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8379  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8380  0010D6  D102               	goto	l964
  8381  0010D8                     l4212:
  8382                           
  8383                           ; BSR set to: 0
  8384  0010D8  0100               	movlb	0	; () banked
  8385  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8386  0010DC  B4D8               	btfsc	status,2,c
  8387  0010DE  D012               	goto	l967
  8388                           
  8389                           ; BSR set to: 0
  8390  0010E0  0100               	movlb	0	; () banked
  8391  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8392  0010E4  0100               	movlb	0	; () banked
  8393  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8394  0010E8  B0D8               	btfsc	status,0,c
  8395  0010EA  D013               	goto	l4218
  8396                           
  8397                           ; BSR set to: 0
  8398  0010EC  0100               	movlb	0	; () banked
  8399  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8400  0010F0  0800               	sublw	0
  8401  0010F2  0100               	movlb	0	; () banked
  8402  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8403  0010F6  0100               	movlb	0	; () banked
  8404  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8405  0010FA  0E19               	movlw	25
  8406  0010FC  0100               	movlb	0	; () banked
  8407  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8408  001100  A0D8               	btfss	status,0,c
  8409  001102  D007               	goto	l4218
  8410  001104                     l967:
  8411                           
  8412                           ; BSR set to: 0
  8413  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8414  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8415  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8416  001110  D0E5               	goto	l964
  8417  001112                     l4218:
  8418                           
  8419                           ; BSR set to: 0
  8420  001112  0E06               	movlw	6
  8421  001114  0100               	movlb	0	; () banked
  8422  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8423                           
  8424                           ; BSR set to: 0
  8425  001118  0100               	movlb	0	; () banked
  8426  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8427  00111C  D002               	goto	l4224
  8428                           
  8429                           ; BSR set to: 0
  8430  00111E  0100               	movlb	0	; () banked
  8431  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8432  001122                     l4224:
  8433                           
  8434                           ; BSR set to: 0
  8435  001122  0100               	movlb	0	; () banked
  8436  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8437  001126  D002               	goto	l969
  8438                           
  8439                           ; BSR set to: 0
  8440  001128  0100               	movlb	0	; () banked
  8441  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8442  00112C                     l969:
  8443                           
  8444                           ; BSR set to: 0
  8445  00112C  0100               	movlb	0	; () banked
  8446  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8447                           
  8448                           ; BSR set to: 0
  8449  001130  0EFF               	movlw	255
  8450  001132  0100               	movlb	0	; () banked
  8451  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8452  001136  0EFF               	movlw	255
  8453  001138  0100               	movlb	0	; () banked
  8454  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8455  00113C  0E00               	movlw	0
  8456  00113E  0100               	movlb	0	; () banked
  8457  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8458  001142  0100               	movlb	0	; () banked
  8459  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8460                           
  8461                           ; BSR set to: 0
  8462  001146  0EFF               	movlw	255
  8463  001148  0100               	movlb	0	; () banked
  8464  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8465  00114C  0EFF               	movlw	255
  8466  00114E  0100               	movlb	0	; () banked
  8467  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8468  001152  0E00               	movlw	0
  8469  001154  0100               	movlb	0	; () banked
  8470  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8471                           
  8472                           ; BSR set to: 0
  8473  001158  0100               	movlb	0	; () banked
  8474  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8475  00115C  0100               	movlb	0	; () banked
  8476  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8477  001160  B0D8               	btfsc	status,0,c
  8478  001162  D02A               	goto	l4244
  8479  001164                     l4234:
  8480                           
  8481                           ; BSR set to: 0
  8482  001164  0100               	movlb	0	; () banked
  8483  001166  90D8               	bcf	status,0,c
  8484  001168  0100               	movlb	0	; () banked
  8485  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8486  00116C  0100               	movlb	0	; () banked
  8487  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8488  001170  0100               	movlb	0	; () banked
  8489  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8490  001174  0100               	movlb	0	; () banked
  8491  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8492                           
  8493                           ; BSR set to: 0
  8494  001178  0100               	movlb	0	; () banked
  8495  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8496  00117C  0100               	movlb	0	; () banked
  8497  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8498  001180  B4D8               	btfsc	status,2,c
  8499  001182  D014               	goto	l4242
  8500                           
  8501                           ; BSR set to: 0
  8502  001184  0100               	movlb	0	; () banked
  8503  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8504  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8505  00118C  0E07               	movlw	7
  8506  00118E  0100               	movlb	0	; () banked
  8507  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8508  001192  B4D8               	btfsc	status,2,c
  8509  001194  D00B               	goto	l4242
  8510  001196  D7E6               	goto	l4234
  8511  001198                     l4240:
  8512                           
  8513                           ; BSR set to: 0
  8514  001198  0100               	movlb	0	; () banked
  8515  00119A  90D8               	bcf	status,0,c
  8516  00119C  0100               	movlb	0	; () banked
  8517  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8518  0011A0  0100               	movlb	0	; () banked
  8519  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8520  0011A4  0100               	movlb	0	; () banked
  8521  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8522  0011A8  0100               	movlb	0	; () banked
  8523  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8524  0011AC                     l4242:
  8525                           
  8526                           ; BSR set to: 0
  8527  0011AC  0100               	movlb	0	; () banked
  8528  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8529  0011B0  0100               	movlb	0	; () banked
  8530  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8531  0011B4  D7F1               	goto	l4240
  8532  0011B6  D02F               	goto	l978
  8533  0011B8                     l4244:
  8534                           
  8535                           ; BSR set to: 0
  8536  0011B8  0100               	movlb	0	; () banked
  8537  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8538  0011BC  0100               	movlb	0	; () banked
  8539  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8540  0011C0  B0D8               	btfsc	status,0,c
  8541  0011C2  D029               	goto	l978
  8542  0011C4                     l4246:
  8543                           
  8544                           ; BSR set to: 0
  8545  0011C4  0100               	movlb	0	; () banked
  8546  0011C6  90D8               	bcf	status,0,c
  8547  0011C8  0100               	movlb	0	; () banked
  8548  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8549  0011CC  0100               	movlb	0	; () banked
  8550  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8551  0011D0  0100               	movlb	0	; () banked
  8552  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8553  0011D4  0100               	movlb	0	; () banked
  8554  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8555                           
  8556                           ; BSR set to: 0
  8557  0011D8  0100               	movlb	0	; () banked
  8558  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8559  0011DC  0100               	movlb	0	; () banked
  8560  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8561  0011E0  B4D8               	btfsc	status,2,c
  8562  0011E2  D014               	goto	l4254
  8563                           
  8564                           ; BSR set to: 0
  8565  0011E4  0100               	movlb	0	; () banked
  8566  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8567  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8568  0011EC  0E07               	movlw	7
  8569  0011EE  0100               	movlb	0	; () banked
  8570  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8571  0011F2  B4D8               	btfsc	status,2,c
  8572  0011F4  D00B               	goto	l4254
  8573  0011F6  D7E6               	goto	l4246
  8574  0011F8                     l4252:
  8575                           
  8576                           ; BSR set to: 0
  8577  0011F8  0100               	movlb	0	; () banked
  8578  0011FA  90D8               	bcf	status,0,c
  8579  0011FC  0100               	movlb	0	; () banked
  8580  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8581  001200  0100               	movlb	0	; () banked
  8582  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8583  001204  0100               	movlb	0	; () banked
  8584  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8585  001208  0100               	movlb	0	; () banked
  8586  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8587  00120C                     l4254:
  8588                           
  8589                           ; BSR set to: 0
  8590  00120C  0100               	movlb	0	; () banked
  8591  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8592  001210  0100               	movlb	0	; () banked
  8593  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8594  001214  D7F1               	goto	l4252
  8595  001216                     l978:
  8596                           
  8597                           ; BSR set to: 0
  8598  001216  0100               	movlb	0	; () banked
  8599  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8600  00121A  D012               	goto	l987
  8601                           
  8602                           ; BSR set to: 0
  8603  00121C  0EFF               	movlw	255
  8604  00121E  0100               	movlb	0	; () banked
  8605  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8606  001222  0EFF               	movlw	255
  8607  001224  0100               	movlb	0	; () banked
  8608  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8609  001228  0EFF               	movlw	255
  8610  00122A  0100               	movlb	0	; () banked
  8611  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8612  00122E  0E01               	movlw	1
  8613  001230  0100               	movlb	0	; () banked
  8614  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8615  001234  0E00               	movlw	0
  8616  001236  0100               	movlb	0	; () banked
  8617  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8618  00123A  0E00               	movlw	0
  8619  00123C  0100               	movlb	0	; () banked
  8620  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8621  001240                     l987:
  8622                           
  8623                           ; BSR set to: 0
  8624  001240  0100               	movlb	0	; () banked
  8625  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8626  001244  D012               	goto	l4260
  8627                           
  8628                           ; BSR set to: 0
  8629  001246  0EFF               	movlw	255
  8630  001248  0100               	movlb	0	; () banked
  8631  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8632  00124C  0EFF               	movlw	255
  8633  00124E  0100               	movlb	0	; () banked
  8634  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8635  001252  0EFF               	movlw	255
  8636  001254  0100               	movlb	0	; () banked
  8637  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8638  001258  0E01               	movlw	1
  8639  00125A  0100               	movlb	0	; () banked
  8640  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8641  00125E  0E00               	movlw	0
  8642  001260  0100               	movlb	0	; () banked
  8643  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8644  001264  0E00               	movlw	0
  8645  001266  0100               	movlb	0	; () banked
  8646  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8647  00126A                     l4260:
  8648                           
  8649                           ; BSR set to: 0
  8650  00126A  0E00               	movlw	0
  8651  00126C  0100               	movlb	0	; () banked
  8652  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8653                           
  8654                           ; BSR set to: 0
  8655  001270  0100               	movlb	0	; () banked
  8656  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8657  001274  0100               	movlb	0	; () banked
  8658  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  8659  001278  0100               	movlb	0	; () banked
  8660  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8661  00127C  0100               	movlb	0	; () banked
  8662  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8663  001280  0100               	movlb	0	; () banked
  8664  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8665  001284  0100               	movlb	0	; () banked
  8666  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8667                           
  8668                           ; BSR set to: 0
  8669  001288  0100               	movlb	0	; () banked
  8670  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8671  00128C  D015               	goto	l4270
  8672                           
  8673                           ; BSR set to: 0
  8674  00128E  0EFF               	movlw	255
  8675  001290  0100               	movlb	0	; () banked
  8676  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8677  001294  0EFF               	movlw	255
  8678  001296  0100               	movlb	0	; () banked
  8679  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8680  00129A  0EFF               	movlw	255
  8681  00129C  0100               	movlb	0	; () banked
  8682  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8683  0012A0  0E01               	movlw	1
  8684  0012A2  0100               	movlb	0	; () banked
  8685  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  8686  0012A6  0E00               	movlw	0
  8687  0012A8  0100               	movlb	0	; () banked
  8688  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8689  0012AC  0E00               	movlw	0
  8690  0012AE  0100               	movlb	0	; () banked
  8691  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8692                           
  8693                           ; BSR set to: 0
  8694  0012B2  0E01               	movlw	1
  8695  0012B4  0100               	movlb	0	; () banked
  8696  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  8697  0012B8                     l4270:
  8698                           
  8699                           ; BSR set to: 0
  8700  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8701  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8702  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8703  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8704  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  8705  0012CC  EC4F  F00D         	call	___ftpack	;wreg free
  8706  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  8707  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  8708  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  8709  0012DC                     l964:
  8710  0012DC  0012               	return	
  8711  0012DE                     __end_of___ftadd:
  8712                           	opt stack 0
  8713                           tblptru	equ	0xFF8
  8714                           tblptrh	equ	0xFF7
  8715                           tblptrl	equ	0xFF6
  8716                           tablat	equ	0xFF5
  8717                           prodh	equ	0xFF4
  8718                           prodl	equ	0xFF3
  8719                           intcon	equ	0xFF2
  8720                           indf0	equ	0xFEF
  8721                           postinc0	equ	0xFEE
  8722                           fsr0h	equ	0xFEA
  8723                           fsr0l	equ	0xFE9
  8724                           wreg	equ	0xFE8
  8725                           postinc1	equ	0xFE6
  8726                           postdec1	equ	0xFE5
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735 ;; *************** function ___ftpack *****************
  8736 ;; Defined at:
  8737 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;  arg             3   24[COMRAM] unsigned um
  8740 ;;  exp             1   27[COMRAM] unsigned char 
  8741 ;;  sign            1   28[COMRAM] unsigned char 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;		None
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  3   24[COMRAM] float 
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8753 ;;      Params:         5       0       0       0       0       0       0       0       0
  8754 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8755 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8756 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8757 ;;Total ram usage:        8 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    4
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		___ftadd
  8764 ;;		___ftmul
  8765 ;;		___lbtoft
  8766 ;;		___lltoft
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text40
  8771  001A9E                     __ptext40:
  8772                           	opt stack 0
  8773  001A9E                     ___ftpack:
  8774                           	opt stack 21
  8775                           
  8776                           ;incstack = 0
  8777  001A9E  501C               	movf	___ftpack@exp,w,c
  8778  001AA0  B4D8               	btfsc	status,2,c
  8779  001AA2  D005               	goto	l4150
  8780  001AA4  5019               	movf	___ftpack@arg,w,c
  8781  001AA6  101A               	iorwf	___ftpack@arg+1,w,c
  8782  001AA8  101B               	iorwf	___ftpack@arg+2,w,c
  8783  001AAA  A4D8               	btfss	status,2,c
  8784  001AAC  D00C               	goto	l4156
  8785  001AAE                     l4150:
  8786  001AAE  0E00               	movlw	0
  8787  001AB0  6E19               	movwf	?___ftpack,c
  8788  001AB2  0E00               	movlw	0
  8789  001AB4  6E1A               	movwf	?___ftpack+1,c
  8790  001AB6  0E00               	movlw	0
  8791  001AB8  6E1B               	movwf	?___ftpack+2,c
  8792  001ABA  D044               	goto	l926
  8793  001ABC                     l4154:
  8794  001ABC  2A1C               	incf	___ftpack@exp,f,c
  8795  001ABE  90D8               	bcf	status,0,c
  8796  001AC0  321B               	rrcf	___ftpack@arg+2,f,c
  8797  001AC2  321A               	rrcf	___ftpack@arg+1,f,c
  8798  001AC4  3219               	rrcf	___ftpack@arg,f,c
  8799  001AC6                     l4156:
  8800  001AC6  0E00               	movlw	0
  8801  001AC8  1419               	andwf	___ftpack@arg,w,c
  8802  001ACA  6E1E               	movwf	??___ftpack& (0+255),c
  8803  001ACC  0E00               	movlw	0
  8804  001ACE  141A               	andwf	___ftpack@arg+1,w,c
  8805  001AD0  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8806  001AD2  0EFE               	movlw	254
  8807  001AD4  141B               	andwf	___ftpack@arg+2,w,c
  8808  001AD6  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8809  001AD8  501E               	movf	??___ftpack,w,c
  8810  001ADA  101F               	iorwf	??___ftpack+1,w,c
  8811  001ADC  1020               	iorwf	??___ftpack+2,w,c
  8812  001ADE  B4D8               	btfsc	status,2,c
  8813  001AE0  D00C               	goto	l4162
  8814  001AE2  D7EC               	goto	l4154
  8815  001AE4                     l4158:
  8816  001AE4  2A1C               	incf	___ftpack@exp,f,c
  8817  001AE6  0E01               	movlw	1
  8818  001AE8  2619               	addwf	___ftpack@arg,f,c
  8819  001AEA  0E00               	movlw	0
  8820  001AEC  221A               	addwfc	___ftpack@arg+1,f,c
  8821  001AEE  0E00               	movlw	0
  8822  001AF0  221B               	addwfc	___ftpack@arg+2,f,c
  8823  001AF2  90D8               	bcf	status,0,c
  8824  001AF4  321B               	rrcf	___ftpack@arg+2,f,c
  8825  001AF6  321A               	rrcf	___ftpack@arg+1,f,c
  8826  001AF8  3219               	rrcf	___ftpack@arg,f,c
  8827  001AFA                     l4162:
  8828  001AFA  0E00               	movlw	0
  8829  001AFC  1419               	andwf	___ftpack@arg,w,c
  8830  001AFE  6E1E               	movwf	??___ftpack& (0+255),c
  8831  001B00  0E00               	movlw	0
  8832  001B02  141A               	andwf	___ftpack@arg+1,w,c
  8833  001B04  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8834  001B06  0EFF               	movlw	255
  8835  001B08  141B               	andwf	___ftpack@arg+2,w,c
  8836  001B0A  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8837  001B0C  501E               	movf	??___ftpack,w,c
  8838  001B0E  101F               	iorwf	??___ftpack+1,w,c
  8839  001B10  1020               	iorwf	??___ftpack+2,w,c
  8840  001B12  B4D8               	btfsc	status,2,c
  8841  001B14  D006               	goto	l4166
  8842  001B16  D7E6               	goto	l4158
  8843  001B18                     l4164:
  8844  001B18  061C               	decf	___ftpack@exp,f,c
  8845  001B1A  90D8               	bcf	status,0,c
  8846  001B1C  3619               	rlcf	___ftpack@arg,f,c
  8847  001B1E  361A               	rlcf	___ftpack@arg+1,f,c
  8848  001B20  361B               	rlcf	___ftpack@arg+2,f,c
  8849  001B22                     l4166:
  8850  001B22  AE1A               	btfss	___ftpack@arg+1,7,c
  8851  001B24  D7F9               	goto	l4164
  8852  001B26  A01C               	btfss	___ftpack@exp,0,c
  8853  001B28  9E1A               	bcf	___ftpack@arg+1,7,c
  8854  001B2A  90D8               	bcf	status,0,c
  8855  001B2C  321C               	rrcf	___ftpack@exp,f,c
  8856  001B2E  501C               	movf	___ftpack@exp,w,c
  8857  001B30  121B               	iorwf	___ftpack@arg+2,f,c
  8858  001B32  501D               	movf	___ftpack@sign,w,c
  8859  001B34  A4D8               	btfss	status,2,c
  8860  001B36  8E1B               	bsf	___ftpack@arg+2,7,c
  8861  001B38  C019  F019         	movff	___ftpack@arg,?___ftpack
  8862  001B3C  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8863  001B40  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8864  001B44                     l926:
  8865  001B44  0012               	return	
  8866  001B46                     __end_of___ftpack:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           indf0	equ	0xFEF
  8876                           postinc0	equ	0xFEE
  8877                           fsr0h	equ	0xFEA
  8878                           fsr0l	equ	0xFE9
  8879                           wreg	equ	0xFE8
  8880                           postinc1	equ	0xFE6
  8881                           postdec1	equ	0xFE5
  8882                           fsr1l	equ	0xFE1
  8883                           indf2	equ	0xFDF
  8884                           postinc2	equ	0xFDE
  8885                           postdec2	equ	0xFDD
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function ___ftneg *****************
  8891 ;; Defined at:
  8892 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  f1              3   24[COMRAM] float 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  3   24[COMRAM] float 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8906 ;;      Params:         3       0       0       0       0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8909 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8910 ;;Total ram usage:        3 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    4
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		_sprintf
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           	psect	text41
  8921  002718                     __ptext41:
  8922                           	opt stack 0
  8923  002718                     ___ftneg:
  8924                           	opt stack 23
  8925                           
  8926                           ;incstack = 0
  8927  002718  0E7F               	movlw	127
  8928  00271A  141B               	andwf	___ftneg@f1+2,w,c
  8929  00271C  101A               	iorwf	___ftneg@f1+1,w,c
  8930  00271E  1019               	iorwf	___ftneg@f1,w,c
  8931  002720  B4D8               	btfsc	status,2,c
  8932  002722  D006               	goto	l1037
  8933  002724  0E00               	movlw	0
  8934  002726  1A19               	xorwf	___ftneg@f1,f,c
  8935  002728  0E00               	movlw	0
  8936  00272A  1A1A               	xorwf	___ftneg@f1+1,f,c
  8937  00272C  0E80               	movlw	128
  8938  00272E  1A1B               	xorwf	___ftneg@f1+2,f,c
  8939  002730                     l1037:
  8940  002730  C019  F019         	movff	___ftneg@f1,?___ftneg
  8941  002734  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  8942  002738  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  8943  00273C  0012               	return	
  8944  00273E                     __end_of___ftneg:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           intcon	equ	0xFF2
  8953                           indf0	equ	0xFEF
  8954                           postinc0	equ	0xFEE
  8955                           fsr0h	equ	0xFEA
  8956                           fsr0l	equ	0xFE9
  8957                           wreg	equ	0xFE8
  8958                           postinc1	equ	0xFE6
  8959                           postdec1	equ	0xFE5
  8960                           fsr1l	equ	0xFE1
  8961                           indf2	equ	0xFDF
  8962                           postinc2	equ	0xFDE
  8963                           postdec2	equ	0xFDD
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function ___ftge *****************
  8969 ;; Defined at:
  8970 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  ff1             3   24[COMRAM] float 
  8973 ;;  ff2             3   27[COMRAM] float 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;		None
  8976 ;; Return value:  Size  Location     Type
  8977 ;;		None               void
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8985 ;;      Params:         6       0       0       0       0       0       0       0       0
  8986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8987 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8988 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8989 ;;Total ram usage:        9 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    4
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_sprintf
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           	psect	text42
  9000  001E4A                     __ptext42:
  9001                           	opt stack 0
  9002  001E4A                     ___ftge:
  9003                           	opt stack 23
  9004                           
  9005                           ;incstack = 0
  9006  001E4A  AE1B               	btfss	___ftge@ff1+2,7,c
  9007  001E4C  D016               	goto	l4680
  9008  001E4E  C019  F01F         	movff	___ftge@ff1,??___ftge
  9009  001E52  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9010  001E56  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9011  001E5A  1E1F               	comf	??___ftge,f,c
  9012  001E5C  1E20               	comf	??___ftge+1,f,c
  9013  001E5E  1E21               	comf	??___ftge+2,f,c
  9014  001E60  2A1F               	incf	??___ftge,f,c
  9015  001E62  0E00               	movlw	0
  9016  001E64  2220               	addwfc	??___ftge+1,f,c
  9017  001E66  2221               	addwfc	??___ftge+2,f,c
  9018  001E68  0E00               	movlw	0
  9019  001E6A  241F               	addwf	??___ftge,w,c
  9020  001E6C  6E19               	movwf	___ftge@ff1,c
  9021  001E6E  0E00               	movlw	0
  9022  001E70  2020               	addwfc	??___ftge+1,w,c
  9023  001E72  6E1A               	movwf	___ftge@ff1+1,c
  9024  001E74  0E80               	movlw	128
  9025  001E76  2021               	addwfc	??___ftge+2,w,c
  9026  001E78  6E1B               	movwf	___ftge@ff1+2,c
  9027  001E7A                     l4680:
  9028  001E7A  AE1E               	btfss	___ftge@ff2+2,7,c
  9029  001E7C  D016               	goto	l4684
  9030  001E7E  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9031  001E82  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9032  001E86  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9033  001E8A  1E1F               	comf	??___ftge,f,c
  9034  001E8C  1E20               	comf	??___ftge+1,f,c
  9035  001E8E  1E21               	comf	??___ftge+2,f,c
  9036  001E90  2A1F               	incf	??___ftge,f,c
  9037  001E92  0E00               	movlw	0
  9038  001E94  2220               	addwfc	??___ftge+1,f,c
  9039  001E96  2221               	addwfc	??___ftge+2,f,c
  9040  001E98  0E00               	movlw	0
  9041  001E9A  241F               	addwf	??___ftge,w,c
  9042  001E9C  6E1C               	movwf	___ftge@ff2,c
  9043  001E9E  0E00               	movlw	0
  9044  001EA0  2020               	addwfc	??___ftge+1,w,c
  9045  001EA2  6E1D               	movwf	___ftge@ff2+1,c
  9046  001EA4  0E80               	movlw	128
  9047  001EA6  2021               	addwfc	??___ftge+2,w,c
  9048  001EA8  6E1E               	movwf	___ftge@ff2+2,c
  9049  001EAA                     l4684:
  9050  001EAA  0E00               	movlw	0
  9051  001EAC  1A19               	xorwf	___ftge@ff1,f,c
  9052  001EAE  0E00               	movlw	0
  9053  001EB0  1A1A               	xorwf	___ftge@ff1+1,f,c
  9054  001EB2  0E80               	movlw	128
  9055  001EB4  1A1B               	xorwf	___ftge@ff1+2,f,c
  9056  001EB6  0E00               	movlw	0
  9057  001EB8  1A1C               	xorwf	___ftge@ff2,f,c
  9058  001EBA  0E00               	movlw	0
  9059  001EBC  1A1D               	xorwf	___ftge@ff2+1,f,c
  9060  001EBE  0E80               	movlw	128
  9061  001EC0  1A1E               	xorwf	___ftge@ff2+2,f,c
  9062  001EC2  501C               	movf	___ftge@ff2,w,c
  9063  001EC4  5C19               	subwf	___ftge@ff1,w,c
  9064  001EC6  501D               	movf	___ftge@ff2+1,w,c
  9065  001EC8  581A               	subwfb	___ftge@ff1+1,w,c
  9066  001ECA  501E               	movf	___ftge@ff2+2,w,c
  9067  001ECC  581B               	subwfb	___ftge@ff1+2,w,c
  9068  001ECE  B0D8               	btfsc	status,0,c
  9069  001ED0  D002               	goto	l4690
  9070  001ED2  90D8               	bcf	status,0,c
  9071  001ED4  D001               	goto	l1021
  9072  001ED6                     l4690:
  9073  001ED6  80D8               	bsf	status,0,c
  9074  001ED8                     l1021:
  9075  001ED8  0012               	return	
  9076  001EDA                     __end_of___ftge:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           indf0	equ	0xFEF
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           postinc1	equ	0xFE6
  9091                           postdec1	equ	0xFE5
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _Lcd_Write_String *****************
  9101 ;; Defined at:
  9102 ;;		line 90 in file "lcd.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  a               2   28[COMRAM] PTR unsigned char 
  9105 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9106 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_15(2), STR_14(2), 
  9107 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  i               2   32[COMRAM] int 
  9110 ;; Return value:  Size  Location     Type
  9111 ;;		None               void
  9112 ;; Registers used:
  9113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9119 ;;      Params:         2       0       0       0       0       0       0       0       0
  9120 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9121 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9122 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9123 ;;Total ram usage:        6 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    6
  9126 ;; This function calls:
  9127 ;;		_Lcd_Write_Char
  9128 ;; This function is called by:
  9129 ;;		_Inicializa_Driveby
  9130 ;;		_Comando_Tablet
  9131 ;;		_Lcd_Write_Integer
  9132 ;;		_main
  9133 ;;		_Lcd_Write_Float
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text43
  9138  0020DA                     __ptext43:
  9139                           	opt stack 0
  9140  0020DA                     _Lcd_Write_String:
  9141                           	opt stack 24
  9142                           
  9143                           ;lcd.c: 91: int i;
  9144                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9145                           
  9146                           ;incstack = 0
  9147  0020DA  0E00               	movlw	0
  9148  0020DC  6E22               	movwf	Lcd_Write_String@i+1,c
  9149  0020DE  0E00               	movlw	0
  9150  0020E0  6E21               	movwf	Lcd_Write_String@i,c
  9151  0020E2  D01C               	goto	l5022
  9152  0020E4                     l5018:
  9153                           
  9154                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9155  0020E4  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9156  0020E8  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9157  0020EC  5021               	movf	Lcd_Write_String@i,w,c
  9158  0020EE  261F               	addwf	??_Lcd_Write_String,f,c
  9159  0020F0  5022               	movf	Lcd_Write_String@i+1,w,c
  9160  0020F2  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9161  0020F4  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9162  0020F8  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9163  0020FC  6AF8               	clrf	tblptru,c
  9164  0020FE  0E07               	movlw	(high __ramtop+-1)
  9165  002100  64F7               	cpfsgt	tblptrh,c
  9166  002102  D003               	bra	u5297
  9167  002104  0008               	tblrd		*
  9168  002106  50F5               	movf	tablat,w,c
  9169  002108  D005               	bra	u5290
  9170  00210A                     u5297:
  9171  00210A  CFF6 FFE9          	movff	tblptrl,fsr0l
  9172  00210E  CFF7 FFEA          	movff	tblptrh,fsr0h
  9173  002112  50EF               	movf	indf0,w,c
  9174  002114                     u5290:
  9175  002114  ECFC  F012         	call	_Lcd_Write_Char
  9176  002118  4A21               	infsnz	Lcd_Write_String@i,f,c
  9177  00211A  2A22               	incf	Lcd_Write_String@i+1,f,c
  9178  00211C                     l5022:
  9179  00211C  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9180  002120  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9181  002124  5021               	movf	Lcd_Write_String@i,w,c
  9182  002126  261F               	addwf	??_Lcd_Write_String,f,c
  9183  002128  5022               	movf	Lcd_Write_String@i+1,w,c
  9184  00212A  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9185  00212C  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9186  002130  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9187  002134  6AF8               	clrf	tblptru,c
  9188  002136  0E07               	movlw	(high __ramtop+-1)
  9189  002138  64F7               	cpfsgt	tblptrh,c
  9190  00213A  D003               	bra	u5307
  9191  00213C  0008               	tblrd		*
  9192  00213E  50F5               	movf	tablat,w,c
  9193  002140  D005               	bra	u5300
  9194  002142                     u5307:
  9195  002142  CFF6 FFE9          	movff	tblptrl,fsr0l
  9196  002146  CFF7 FFEA          	movff	tblptrh,fsr0h
  9197  00214A  50EF               	movf	indf0,w,c
  9198  00214C                     u5300:
  9199  00214C  0900               	iorlw	0
  9200  00214E  B4D8               	btfsc	status,2,c
  9201  002150  0012               	return	
  9202  002152  D7C8               	goto	l5018
  9203  002154                     __end_of_Lcd_Write_String:
  9204                           	opt stack 0
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           indf0	equ	0xFEF
  9213                           postinc0	equ	0xFEE
  9214                           fsr0h	equ	0xFEA
  9215                           fsr0l	equ	0xFE9
  9216                           wreg	equ	0xFE8
  9217                           postinc1	equ	0xFE6
  9218                           postdec1	equ	0xFE5
  9219                           fsr1l	equ	0xFE1
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function _Lcd_Write_Char *****************
  9228 ;; Defined at:
  9229 ;;		line 75 in file "lcd.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  a               1    wreg     unsigned char 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  a               1   27[COMRAM] unsigned char 
  9234 ;;  y               1   26[COMRAM] unsigned char 
  9235 ;;  temp            1   25[COMRAM] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0
  9246 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9248 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9249 ;;Total ram usage:        3 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    5
  9252 ;; This function calls:
  9253 ;;		_Lcd_Port
  9254 ;; This function is called by:
  9255 ;;		_Lcd_Write_String
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text44
  9260  0025F8                     __ptext44:
  9261                           	opt stack 0
  9262  0025F8                     _Lcd_Write_Char:
  9263                           	opt stack 24
  9264                           
  9265                           ;incstack = 0
  9266                           ;Lcd_Write_Char@a stored from wreg
  9267  0025F8  6E1C               	movwf	Lcd_Write_Char@a,c
  9268                           
  9269                           ;lcd.c: 76: char temp, y;
  9270                           ;lcd.c: 77: temp = a & 0x0F;
  9271  0025FA  501C               	movf	Lcd_Write_Char@a,w,c
  9272  0025FC  0B0F               	andlw	15
  9273  0025FE  6E1A               	movwf	Lcd_Write_Char@temp,c
  9274                           
  9275                           ;lcd.c: 78: y = a & 0xF0;
  9276  002600  501C               	movf	Lcd_Write_Char@a,w,c
  9277  002602  0BF0               	andlw	240
  9278  002604  6E1B               	movwf	Lcd_Write_Char@y,c
  9279                           
  9280                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9281  002606  8084               	bsf	3972,0,c	;volatile
  9282                           
  9283                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9284  002608  381B               	swapf	Lcd_Write_Char@y,w,c
  9285  00260A  0B0F               	andlw	15
  9286  00260C  EC4D  F013         	call	_Lcd_Port
  9287                           
  9288                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9289  002610  8484               	bsf	3972,2,c	;volatile
  9290                           
  9291                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9292  002612  0E0D               	movlw	13
  9293  002614                     u5607:
  9294  002614  2EE8               	decfsz	wreg,f,c
  9295  002616  D7FE               	goto	u5607
  9296  002618  F000               	nop	
  9297                           
  9298                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9299  00261A  9484               	bcf	3972,2,c	;volatile
  9300                           
  9301                           ;lcd.c: 84: Lcd_Port(temp);
  9302  00261C  501A               	movf	Lcd_Write_Char@temp,w,c
  9303  00261E  EC4D  F013         	call	_Lcd_Port
  9304                           
  9305                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9306  002622  8484               	bsf	3972,2,c	;volatile
  9307                           
  9308                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9309  002624  0E0D               	movlw	13
  9310  002626                     u5617:
  9311  002626  2EE8               	decfsz	wreg,f,c
  9312  002628  D7FE               	goto	u5617
  9313  00262A  F000               	nop	
  9314                           
  9315                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9316  00262C  9484               	bcf	3972,2,c	;volatile
  9317  00262E  0012               	return	
  9318  002630                     __end_of_Lcd_Write_Char:
  9319                           	opt stack 0
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           indf0	equ	0xFEF
  9328                           postinc0	equ	0xFEE
  9329                           fsr0h	equ	0xFEA
  9330                           fsr0l	equ	0xFE9
  9331                           wreg	equ	0xFE8
  9332                           postinc1	equ	0xFE6
  9333                           postdec1	equ	0xFE5
  9334                           fsr1l	equ	0xFE1
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           postdec2	equ	0xFDD
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342 ;; *************** function _Lcd_Set_Cursor *****************
  9343 ;; Defined at:
  9344 ;;		line 40 in file "lcd.c"
  9345 ;; Parameters:    Size  Location     Type
  9346 ;;  a               1    wreg     unsigned char 
  9347 ;;  b               1   27[COMRAM] unsigned char 
  9348 ;; Auto vars:     Size  Location     Type
  9349 ;;  a               1   28[COMRAM] unsigned char 
  9350 ;;  temp            1   31[COMRAM] unsigned char 
  9351 ;;  y               1   30[COMRAM] unsigned char 
  9352 ;;  z               1   29[COMRAM] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9362 ;;      Params:         1       0       0       0       0       0       0       0       0
  9363 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9365 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9366 ;;Total ram usage:        5 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    6
  9369 ;; This function calls:
  9370 ;;		_Lcd_Cmd
  9371 ;; This function is called by:
  9372 ;;		_Inicializa_Driveby
  9373 ;;		_Comando_Tablet
  9374 ;;		_main
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text45
  9379  00236A                     __ptext45:
  9380                           	opt stack 0
  9381  00236A                     _Lcd_Set_Cursor:
  9382                           	opt stack 24
  9383                           
  9384                           ;incstack = 0
  9385                           ;Lcd_Set_Cursor@a stored from wreg
  9386  00236A  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9387                           
  9388                           ;lcd.c: 41: char temp, z, y;
  9389                           ;lcd.c: 42: if (a == 1) {
  9390  00236C  041D               	decf	Lcd_Set_Cursor@a,w,c
  9391  00236E  A4D8               	btfss	status,2,c
  9392  002370  D010               	goto	l5136
  9393                           
  9394                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9395  002372  501C               	movf	Lcd_Set_Cursor@b,w,c
  9396  002374  0F7F               	addlw	127
  9397  002376  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9398                           
  9399                           ;lcd.c: 44: z = temp >> 4;
  9400  002378  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9401  00237A  0B0F               	andlw	15
  9402  00237C  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9403                           
  9404                           ;lcd.c: 45: y = temp & 0x0F;
  9405  00237E  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9406  002380  0B0F               	andlw	15
  9407  002382  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9408                           
  9409                           ;lcd.c: 46: Lcd_Cmd(z);
  9410  002384  501E               	movf	Lcd_Set_Cursor@z,w,c
  9411  002386  ECB1  F013         	call	_Lcd_Cmd
  9412                           
  9413                           ;lcd.c: 47: Lcd_Cmd(y);
  9414  00238A  501F               	movf	Lcd_Set_Cursor@y,w,c
  9415  00238C  ECB1  F013         	call	_Lcd_Cmd
  9416                           
  9417                           ;lcd.c: 48: } else if (a == 2) {
  9418  002390  D013               	goto	l254
  9419  002392                     l5136:
  9420  002392  501D               	movf	Lcd_Set_Cursor@a,w,c
  9421  002394  0A02               	xorlw	2
  9422  002396  A4D8               	btfss	status,2,c
  9423  002398  D00F               	goto	l254
  9424                           
  9425                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9426  00239A  501C               	movf	Lcd_Set_Cursor@b,w,c
  9427  00239C  0FBF               	addlw	191
  9428  00239E  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9429                           
  9430                           ;lcd.c: 50: z = temp >> 4;
  9431  0023A0  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9432  0023A2  0B0F               	andlw	15
  9433  0023A4  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9434                           
  9435                           ;lcd.c: 51: y = temp & 0x0F;
  9436  0023A6  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9437  0023A8  0B0F               	andlw	15
  9438  0023AA  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9439                           
  9440                           ;lcd.c: 52: Lcd_Cmd(z);
  9441  0023AC  501E               	movf	Lcd_Set_Cursor@z,w,c
  9442  0023AE  ECB1  F013         	call	_Lcd_Cmd
  9443                           
  9444                           ;lcd.c: 53: Lcd_Cmd(y);
  9445  0023B2  501F               	movf	Lcd_Set_Cursor@y,w,c
  9446  0023B4  ECB1  F013         	call	_Lcd_Cmd
  9447  0023B8                     l254:
  9448  0023B8  0012               	return	
  9449  0023BA                     __end_of_Lcd_Set_Cursor:
  9450                           	opt stack 0
  9451                           tblptru	equ	0xFF8
  9452                           tblptrh	equ	0xFF7
  9453                           tblptrl	equ	0xFF6
  9454                           tablat	equ	0xFF5
  9455                           prodh	equ	0xFF4
  9456                           prodl	equ	0xFF3
  9457                           intcon	equ	0xFF2
  9458                           indf0	equ	0xFEF
  9459                           postinc0	equ	0xFEE
  9460                           fsr0h	equ	0xFEA
  9461                           fsr0l	equ	0xFE9
  9462                           wreg	equ	0xFE8
  9463                           postinc1	equ	0xFE6
  9464                           postdec1	equ	0xFE5
  9465                           fsr1l	equ	0xFE1
  9466                           indf2	equ	0xFDF
  9467                           postinc2	equ	0xFDE
  9468                           postdec2	equ	0xFDD
  9469                           fsr2h	equ	0xFDA
  9470                           fsr2l	equ	0xFD9
  9471                           status	equ	0xFD8
  9472                           
  9473 ;; *************** function _Lcd_Clear *****************
  9474 ;; Defined at:
  9475 ;;		line 35 in file "lcd.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, status,2, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    6
  9496 ;; This function calls:
  9497 ;;		_Lcd_Cmd
  9498 ;; This function is called by:
  9499 ;;		_Inicializa_Driveby
  9500 ;;		_Comando_Tablet
  9501 ;;		_main
  9502 ;; This function uses a non-reentrant model
  9503 ;;
  9504                           
  9505                           	psect	text46
  9506  002868                     __ptext46:
  9507                           	opt stack 0
  9508  002868                     _Lcd_Clear:
  9509                           	opt stack 24
  9510                           
  9511                           ;lcd.c: 36: Lcd_Cmd(0);
  9512                           
  9513                           ;incstack = 0
  9514  002868  0E00               	movlw	0
  9515  00286A  ECB1  F013         	call	_Lcd_Cmd
  9516                           
  9517                           ;lcd.c: 37: Lcd_Cmd(1);
  9518  00286E  0E01               	movlw	1
  9519  002870  ECB1  F013         	call	_Lcd_Cmd
  9520  002874  0012               	return	
  9521  002876                     __end_of_Lcd_Clear:
  9522                           	opt stack 0
  9523                           tblptru	equ	0xFF8
  9524                           tblptrh	equ	0xFF7
  9525                           tblptrl	equ	0xFF6
  9526                           tablat	equ	0xFF5
  9527                           prodh	equ	0xFF4
  9528                           prodl	equ	0xFF3
  9529                           intcon	equ	0xFF2
  9530                           indf0	equ	0xFEF
  9531                           postinc0	equ	0xFEE
  9532                           fsr0h	equ	0xFEA
  9533                           fsr0l	equ	0xFE9
  9534                           wreg	equ	0xFE8
  9535                           postinc1	equ	0xFE6
  9536                           postdec1	equ	0xFE5
  9537                           fsr1l	equ	0xFE1
  9538                           indf2	equ	0xFDF
  9539                           postinc2	equ	0xFDE
  9540                           postdec2	equ	0xFDD
  9541                           fsr2h	equ	0xFDA
  9542                           fsr2l	equ	0xFD9
  9543                           status	equ	0xFD8
  9544                           
  9545 ;; *************** function _Lcd_Cmd *****************
  9546 ;; Defined at:
  9547 ;;		line 27 in file "lcd.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  a               1    wreg     unsigned char 
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;  a               1   26[COMRAM] unsigned char 
  9552 ;; Return value:  Size  Location     Type
  9553 ;;		None               void
  9554 ;; Registers used:
  9555 ;;		wreg, status,2, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0
  9562 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9563 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9564 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9565 ;;Total ram usage:        2 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    5
  9568 ;; This function calls:
  9569 ;;		_Lcd_Port
  9570 ;; This function is called by:
  9571 ;;		_Lcd_Clear
  9572 ;;		_Lcd_Set_Cursor
  9573 ;;		_Lcd_Init
  9574 ;;		_Lcd_Shift_Right
  9575 ;;		_Lcd_Shift_Left
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text47
  9580  002762                     __ptext47:
  9581                           	opt stack 0
  9582  002762                     _Lcd_Cmd:
  9583                           	opt stack 24
  9584                           
  9585                           ;incstack = 0
  9586                           ;Lcd_Cmd@a stored from wreg
  9587  002762  6E1B               	movwf	Lcd_Cmd@a,c
  9588                           
  9589                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9590  002764  9084               	bcf	3972,0,c	;volatile
  9591                           
  9592                           ;lcd.c: 29: Lcd_Port(a);
  9593  002766  501B               	movf	Lcd_Cmd@a,w,c
  9594  002768  EC4D  F013         	call	_Lcd_Port
  9595                           
  9596                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9597  00276C  8484               	bsf	3972,2,c	;volatile
  9598                           
  9599                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9600  00276E  0E06               	movlw	6
  9601  002770  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9602  002772  0E30               	movlw	48
  9603  002774                     u5627:
  9604  002774  2EE8               	decfsz	wreg,f,c
  9605  002776  D7FE               	goto	u5627
  9606  002778  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9607  00277A  D7FC               	goto	u5627
  9608  00277C  D000               	nop2	
  9609                           
  9610                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9611  00277E  9484               	bcf	3972,2,c	;volatile
  9612  002780  0012               	return	
  9613  002782                     __end_of_Lcd_Cmd:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           indf0	equ	0xFEF
  9623                           postinc0	equ	0xFEE
  9624                           fsr0h	equ	0xFEA
  9625                           fsr0l	equ	0xFE9
  9626                           wreg	equ	0xFE8
  9627                           postinc1	equ	0xFE6
  9628                           postdec1	equ	0xFE5
  9629                           fsr1l	equ	0xFE1
  9630                           indf2	equ	0xFDF
  9631                           postinc2	equ	0xFDE
  9632                           postdec2	equ	0xFDD
  9633                           fsr2h	equ	0xFDA
  9634                           fsr2l	equ	0xFD9
  9635                           status	equ	0xFD8
  9636                           
  9637 ;; *************** function _Lcd_Port *****************
  9638 ;; Defined at:
  9639 ;;		line 6 in file "lcd.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;  a               1    wreg     unsigned char 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  a               1   24[COMRAM] unsigned char 
  9644 ;; Return value:  Size  Location     Type
  9645 ;;		None               void
  9646 ;; Registers used:
  9647 ;;		wreg
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9653 ;;      Params:         0       0       0       0       0       0       0       0       0
  9654 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9656 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9657 ;;Total ram usage:        1 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    4
  9660 ;; This function calls:
  9661 ;;		Nothing
  9662 ;; This function is called by:
  9663 ;;		_Lcd_Cmd
  9664 ;;		_Lcd_Init
  9665 ;;		_Lcd_Write_Char
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           	psect	text48
  9670  00269A                     __ptext48:
  9671                           	opt stack 0
  9672  00269A                     _Lcd_Port:
  9673                           	opt stack 24
  9674                           
  9675                           ;incstack = 0
  9676                           ;Lcd_Port@a stored from wreg
  9677  00269A  6E19               	movwf	Lcd_Port@a,c
  9678                           
  9679                           ;lcd.c: 7: if (a & 1)
  9680  00269C  A019               	btfss	Lcd_Port@a,0,c
  9681  00269E  D002               	goto	l234
  9682                           
  9683                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9684  0026A0  8883               	bsf	3971,4,c	;volatile
  9685  0026A2  D001               	goto	l4186
  9686  0026A4                     l234:
  9687                           
  9688                           ;lcd.c: 9: else
  9689                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9690  0026A4  9883               	bcf	3971,4,c	;volatile
  9691  0026A6                     l4186:
  9692                           
  9693                           ;lcd.c: 12: if (a & 2)
  9694  0026A6  A219               	btfss	Lcd_Port@a,1,c
  9695  0026A8  D002               	goto	l236
  9696                           
  9697                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9698  0026AA  8A83               	bsf	3971,5,c	;volatile
  9699  0026AC  D001               	goto	l4190
  9700  0026AE                     l236:
  9701                           
  9702                           ;lcd.c: 14: else
  9703                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9704  0026AE  9A83               	bcf	3971,5,c	;volatile
  9705  0026B0                     l4190:
  9706                           
  9707                           ;lcd.c: 17: if (a & 4)
  9708  0026B0  A419               	btfss	Lcd_Port@a,2,c
  9709  0026B2  D002               	goto	l238
  9710                           
  9711                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9712  0026B4  8C83               	bsf	3971,6,c	;volatile
  9713  0026B6  D001               	goto	l4194
  9714  0026B8                     l238:
  9715                           
  9716                           ;lcd.c: 19: else
  9717                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9718  0026B8  9C83               	bcf	3971,6,c	;volatile
  9719  0026BA                     l4194:
  9720                           
  9721                           ;lcd.c: 22: if (a & 8)
  9722  0026BA  A619               	btfss	Lcd_Port@a,3,c
  9723  0026BC  D002               	goto	l240
  9724                           
  9725                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9726  0026BE  8E83               	bsf	3971,7,c	;volatile
  9727  0026C0  D001               	goto	l242
  9728  0026C2                     l240:
  9729                           
  9730                           ;lcd.c: 24: else
  9731                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9732  0026C2  9E83               	bcf	3971,7,c	;volatile
  9733  0026C4                     l242:
  9734  0026C4  0012               	return	
  9735  0026C6                     __end_of_Lcd_Port:
  9736                           	opt stack 0
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           intcon	equ	0xFF2
  9744                           indf0	equ	0xFEF
  9745                           postinc0	equ	0xFEE
  9746                           fsr0h	equ	0xFEA
  9747                           fsr0l	equ	0xFE9
  9748                           wreg	equ	0xFE8
  9749                           postinc1	equ	0xFE6
  9750                           postdec1	equ	0xFE5
  9751                           fsr1l	equ	0xFE1
  9752                           indf2	equ	0xFDF
  9753                           postinc2	equ	0xFDE
  9754                           postdec2	equ	0xFDD
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759 ;; *************** function _TMRO_USART *****************
  9760 ;; Defined at:
  9761 ;;		line 83 in file "robot.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;		None               void
  9768 ;; Registers used:
  9769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9777 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9778 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9779 ;;Total ram usage:       14 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    3
  9782 ;; This function calls:
  9783 ;;		_ReadUSART
  9784 ;;		i2_Lcd_Clear
  9785 ;;		i2_Lcd_Set_Cursor
  9786 ;;		i2_Lcd_Write_String
  9787 ;; This function is called by:
  9788 ;;		Interrupt level 2
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	intcode
  9793  000008                     __pintcode:
  9794                           	opt stack 0
  9795  000008                     _TMRO_USART:
  9796                           	opt stack 21
  9797                           
  9798                           ;incstack = 0
  9799  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
  9800  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
  9801  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
  9802  000014  ED78  F00C         	call	int_func,f	;refresh shadow registers
  9803                           pclatu	equ	0xFFB
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           indf0	equ	0xFEF
  9813                           postinc0	equ	0xFEE
  9814                           fsr0h	equ	0xFEA
  9815                           fsr0l	equ	0xFE9
  9816                           wreg	equ	0xFE8
  9817                           postinc1	equ	0xFE6
  9818                           postdec1	equ	0xFE5
  9819                           fsr1l	equ	0xFE1
  9820                           indf2	equ	0xFDF
  9821                           postinc2	equ	0xFDE
  9822                           postdec2	equ	0xFDD
  9823                           fsr2h	equ	0xFDA
  9824                           fsr2l	equ	0xFD9
  9825                           status	equ	0xFD8
  9826                           
  9827                           	psect	intcode_body
  9828  0018F0                     __pintcode_body:
  9829                           	opt stack 21
  9830  0018F0                     int_func:
  9831                           	opt stack 21
  9832  0018F0  0006               	pop		; remove dummy address from shadow register refresh
  9833  0018F2  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
  9834  0018F6  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
  9835  0018FA  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
  9836  0018FE  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
  9837  001902  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
  9838  001906  CFF3 F013          	movff	prodl,??_TMRO_USART+8
  9839  00190A  CFF4 F014          	movff	prodh,??_TMRO_USART+9
  9840  00190E  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
  9841  001912  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
  9842  001916  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
  9843  00191A  CFF5 F018          	movff	tablat,??_TMRO_USART+13
  9844                           
  9845                           ;robot.c: 88: if (PIR1bits.RCIF) {
  9846  00191E  AA9E               	btfss	3998,5,c	;volatile
  9847  001920  D032               	goto	i2l351
  9848                           
  9849                           ;robot.c: 98: BluetoothDato[cad] = ReadUSART();
  9850  001922  503D               	movf	_cad,w,c
  9851  001924  0D01               	mullw	1
  9852  001926  0101               	movlb	1	; () banked
  9853  001928  0E28               	movlw	low _BluetoothDato
  9854  00192A  24F3               	addwf	prodl,w,c
  9855  00192C  6ED9               	movwf	fsr2l,c
  9856  00192E  0101               	movlb	1	; () banked
  9857  001930  0E01               	movlw	high _BluetoothDato
  9858  001932  20F4               	addwfc	prodh,w,c
  9859  001934  6EDA               	movwf	fsr2h,c
  9860  001936  ECEF  F013         	call	_ReadUSART	;wreg free
  9861  00193A  6EDF               	movwf	indf2,c
  9862                           
  9863                           ;robot.c: 99: if (BluetoothDato[cad] == '#') {
  9864  00193C  503D               	movf	_cad,w,c
  9865  00193E  0D01               	mullw	1
  9866  001940  0101               	movlb	1	; () banked
  9867  001942  0E28               	movlw	low _BluetoothDato
  9868  001944  24F3               	addwf	prodl,w,c
  9869  001946  6ED9               	movwf	fsr2l,c
  9870  001948  0101               	movlb	1	; () banked
  9871  00194A  0E01               	movlw	high _BluetoothDato
  9872  00194C  20F4               	addwfc	prodh,w,c
  9873  00194E  6EDA               	movwf	fsr2h,c
  9874  001950  0E23               	movlw	35
  9875  001952  62DF               	cpfseq	indf2,c
  9876  001954  D013               	goto	i2l4066
  9877                           
  9878                           ; BSR set to: 1
  9879                           ;robot.c: 100: if (ComanTFlag == 0) {
  9880  001956  6632               	tstfsz	_ComanTFlag,c
  9881  001958  D007               	goto	i2l4062
  9882                           
  9883                           ; BSR set to: 1
  9884                           ;robot.c: 101: EntTrama = 1;
  9885  00195A  0E01               	movlw	1
  9886  00195C  6E35               	movwf	_EntTrama,c
  9887                           
  9888                           ;robot.c: 102: FinComandT = 0;
  9889  00195E  0E00               	movlw	0
  9890  001960  6E37               	movwf	_FinComandT,c
  9891                           
  9892                           ;robot.c: 103: ComanTFlag = 1;
  9893  001962  0E01               	movlw	1
  9894  001964  6E32               	movwf	_ComanTFlag,c
  9895  001966  D00D               	goto	i2u379_40
  9896  001968                     i2l4062:
  9897                           
  9898                           ; BSR set to: 1
  9899                           ;robot.c: 106: else if (ComanTFlag == 1) {
  9900  001968  0432               	decf	_ComanTFlag,w,c
  9901  00196A  A4D8               	btfss	status,2,c
  9902  00196C  D01C               	goto	i2l4078
  9903                           
  9904                           ; BSR set to: 1
  9905                           ;robot.c: 107: ComanTFlag = 0;
  9906  00196E  0E00               	movlw	0
  9907  001970  6E32               	movwf	_ComanTFlag,c
  9908                           
  9909                           ;robot.c: 108: FinComandT = 1;
  9910  001972  0E01               	movlw	1
  9911  001974  6E37               	movwf	_FinComandT,c
  9912                           
  9913                           ;robot.c: 109: EntTrama = 0;
  9914  001976  0E00               	movlw	0
  9915  001978  6E35               	movwf	_EntTrama,c
  9916  00197A  D015               	goto	i2l4078
  9917  00197C                     i2l4066:
  9918                           
  9919                           ; BSR set to: 1
  9920                           ;robot.c: 123: else if (EntTrama == 1)
  9921  00197C  0435               	decf	_EntTrama,w,c
  9922  00197E  A4D8               	btfss	status,2,c
  9923  001980  D012               	goto	i2l4078
  9924  001982                     i2u379_40:
  9925                           
  9926                           ; BSR set to: 1
  9927                           ;robot.c: 124: cad++;
  9928  001982  2A3D               	incf	_cad,f,c
  9929  001984  D010               	goto	i2l4078
  9930  001986                     i2l351:
  9931                           
  9932                           ;robot.c: 128: else if(PIR1bits.TMR2IF){
  9933  001986  A29E               	btfss	3998,1,c	;volatile
  9934  001988  D00E               	goto	i2l4078
  9935                           
  9936                           ;robot.c: 129: Lcd_Clear();
  9937  00198A  EC3B  F014         	call	i2_Lcd_Clear	;wreg free
  9938                           
  9939                           ;robot.c: 130: Lcd_Set_Cursor(1,1);
  9940  00198E  0E01               	movlw	1
  9941  001990  6E04               	movwf	i2Lcd_Set_Cursor@b,c
  9942  001992  0E01               	movlw	1
  9943  001994  ECDD  F011         	call	i2_Lcd_Set_Cursor
  9944                           
  9945                           ;robot.c: 131: Lcd_Write_String("Interruption TMR2");
  9946  001998  0E7F               	movlw	high STR_19
  9947  00199A  6E06               	movwf	i2Lcd_Write_String@a+1,c
  9948  00199C  0E41               	movlw	low STR_19
  9949  00199E  6E05               	movwf	i2Lcd_Write_String@a,c
  9950  0019A0  ECAA  F010         	call	i2_Lcd_Write_String	;wreg free
  9951                           
  9952                           ;robot.c: 132: PIE1bits.TMR2IE = 0;
  9953  0019A4  929D               	bcf	3997,1,c	;volatile
  9954  0019A6                     i2l4078:
  9955                           
  9956                           ;robot.c: 133: }
  9957                           ;robot.c: 134: PIR1bits.TMR2IF=0;
  9958  0019A6  929E               	bcf	3998,1,c	;volatile
  9959                           
  9960                           ;robot.c: 135: PIR1bits.RCIF=0;
  9961  0019A8  9A9E               	bcf	3998,5,c	;volatile
  9962  0019AA  C018  FFF5         	movff	??_TMRO_USART+13,tablat
  9963  0019AE  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
  9964  0019B2  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
  9965  0019B6  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
  9966  0019BA  C014  FFF4         	movff	??_TMRO_USART+9,prodh
  9967  0019BE  C013  FFF3         	movff	??_TMRO_USART+8,prodl
  9968  0019C2  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
  9969  0019C6  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
  9970  0019CA  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
  9971  0019CE  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
  9972  0019D2  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
  9973  0019D6  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
  9974  0019DA  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
  9975  0019DE  C00B  FFFA         	movff	??_TMRO_USART,pclath
  9976  0019E2  0011               	retfie		f
  9977  0019E4                     __end_of_TMRO_USART:
  9978                           	opt stack 0
  9979                           pclatu	equ	0xFFB
  9980                           pclath	equ	0xFFA
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           indf0	equ	0xFEF
  9989                           postinc0	equ	0xFEE
  9990                           fsr0h	equ	0xFEA
  9991                           fsr0l	equ	0xFE9
  9992                           wreg	equ	0xFE8
  9993                           postinc1	equ	0xFE6
  9994                           postdec1	equ	0xFE5
  9995                           fsr1h	equ	0xFE2
  9996                           fsr1l	equ	0xFE1
  9997                           indf2	equ	0xFDF
  9998                           postinc2	equ	0xFDE
  9999                           postdec2	equ	0xFDD
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004 ;; *************** function i2_Lcd_Write_String *****************
 10005 ;; Defined at:
 10006 ;;		line 90 in file "lcd.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  a               2    4[COMRAM] PTR unsigned char 
 10009 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
 10010 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_15(2), STR_14(2), 
 10011 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;		None               void
 10016 ;; Registers used:
 10017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10023 ;;      Params:         2       0       0       0       0       0       0       0       0
 10024 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10025 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10026 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10027 ;;Total ram usage:        6 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    2
 10030 ;; This function calls:
 10031 ;;		i2_Lcd_Write_Char
 10032 ;; This function is called by:
 10033 ;;		_TMRO_USART
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           	psect	text50
 10038  002154                     __ptext50:
 10039                           	opt stack 0
 10040  002154                     i2_Lcd_Write_String:
 10041                           	opt stack 21
 10042                           
 10043                           ;lcd.c: 91: int i;
 10044                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10045                           
 10046                           ;incstack = 0
 10047  002154  0E00               	movlw	0
 10048  002156  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10049  002158  0E00               	movlw	0
 10050  00215A  6E09               	movwf	i2Lcd_Write_String@i,c
 10051  00215C  D01C               	goto	i2l3984
 10052  00215E                     i2l3980:
 10053                           
 10054                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10055  00215E  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10056  002162  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10057  002166  5009               	movf	i2Lcd_Write_String@i,w,c
 10058  002168  2607               	addwf	??i2_Lcd_Write_String,f,c
 10059  00216A  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10060  00216C  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10061  00216E  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10062  002172  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10063  002176  6AF8               	clrf	tblptru,c
 10064  002178  0E07               	movlw	(high __ramtop+-1)
 10065  00217A  64F7               	cpfsgt	tblptrh,c
 10066  00217C  D003               	bra	i2u365_47
 10067  00217E  0008               	tblrd		*
 10068  002180  50F5               	movf	tablat,w,c
 10069  002182  D005               	bra	i2u365_40
 10070  002184                     i2u365_47:
 10071  002184  CFF6 FFE9          	movff	tblptrl,fsr0l
 10072  002188  CFF7 FFEA          	movff	tblptrh,fsr0h
 10073  00218C  50EF               	movf	indf0,w,c
 10074  00218E                     i2u365_40:
 10075  00218E  EC18  F013         	call	i2_Lcd_Write_Char
 10076  002192  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10077  002194  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10078  002196                     i2l3984:
 10079  002196  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10080  00219A  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10081  00219E  5009               	movf	i2Lcd_Write_String@i,w,c
 10082  0021A0  2607               	addwf	??i2_Lcd_Write_String,f,c
 10083  0021A2  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10084  0021A4  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10085  0021A6  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10086  0021AA  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10087  0021AE  6AF8               	clrf	tblptru,c
 10088  0021B0  0E07               	movlw	(high __ramtop+-1)
 10089  0021B2  64F7               	cpfsgt	tblptrh,c
 10090  0021B4  D003               	bra	i2u366_47
 10091  0021B6  0008               	tblrd		*
 10092  0021B8  50F5               	movf	tablat,w,c
 10093  0021BA  D005               	bra	i2u366_40
 10094  0021BC                     i2u366_47:
 10095  0021BC  CFF6 FFE9          	movff	tblptrl,fsr0l
 10096  0021C0  CFF7 FFEA          	movff	tblptrh,fsr0h
 10097  0021C4  50EF               	movf	indf0,w,c
 10098  0021C6                     i2u366_40:
 10099  0021C6  0900               	iorlw	0
 10100  0021C8  B4D8               	btfsc	status,2,c
 10101  0021CA  0012               	return	
 10102  0021CC  D7C8               	goto	i2l3980
 10103  0021CE                     __end_ofi2_Lcd_Write_String:
 10104                           	opt stack 0
 10105                           pclatu	equ	0xFFB
 10106                           pclath	equ	0xFFA
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           intcon	equ	0xFF2
 10114                           indf0	equ	0xFEF
 10115                           postinc0	equ	0xFEE
 10116                           fsr0h	equ	0xFEA
 10117                           fsr0l	equ	0xFE9
 10118                           wreg	equ	0xFE8
 10119                           postinc1	equ	0xFE6
 10120                           postdec1	equ	0xFE5
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           fsr2h	equ	0xFDA
 10127                           fsr2l	equ	0xFD9
 10128                           status	equ	0xFD8
 10129                           
 10130 ;; *************** function i2_Lcd_Write_Char *****************
 10131 ;; Defined at:
 10132 ;;		line 75 in file "lcd.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;  a               1    wreg     unsigned char 
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;  a               1    3[COMRAM] unsigned char 
 10137 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10138 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;		None               void
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10148 ;;      Params:         0       0       0       0       0       0       0       0       0
 10149 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10150 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10151 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10152 ;;Total ram usage:        3 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    1
 10155 ;; This function calls:
 10156 ;;		i2_Lcd_Port
 10157 ;; This function is called by:
 10158 ;;		i2_Lcd_Write_String
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           	psect	text51
 10163  002630                     __ptext51:
 10164                           	opt stack 0
 10165  002630                     i2_Lcd_Write_Char:
 10166                           	opt stack 21
 10167                           
 10168                           ;incstack = 0
 10169                           ;i2Lcd_Write_Char@a stored from wreg
 10170  002630  6E04               	movwf	i2Lcd_Write_Char@a,c
 10171                           
 10172                           ;lcd.c: 76: char temp, y;
 10173                           ;lcd.c: 77: temp = a & 0x0F;
 10174  002632  5004               	movf	i2Lcd_Write_Char@a,w,c
 10175  002634  0B0F               	andlw	15
 10176  002636  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10177                           
 10178                           ;lcd.c: 78: y = a & 0xF0;
 10179  002638  5004               	movf	i2Lcd_Write_Char@a,w,c
 10180  00263A  0BF0               	andlw	240
 10181  00263C  6E03               	movwf	i2Lcd_Write_Char@y,c
 10182                           
 10183                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10184  00263E  8084               	bsf	3972,0,c	;volatile
 10185                           
 10186                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10187  002640  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10188  002642  0B0F               	andlw	15
 10189  002644  EC63  F013         	call	i2_Lcd_Port
 10190                           
 10191                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10192  002648  8484               	bsf	3972,2,c	;volatile
 10193                           
 10194                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10195  00264A  0E0D               	movlw	13
 10196  00264C                     i2u563_47:
 10197  00264C  2EE8               	decfsz	wreg,f,c
 10198  00264E  D7FE               	goto	i2u563_47
 10199  002650  F000               	nop	
 10200                           
 10201                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10202  002652  9484               	bcf	3972,2,c	;volatile
 10203                           
 10204                           ;lcd.c: 84: Lcd_Port(temp);
 10205  002654  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10206  002656  EC63  F013         	call	i2_Lcd_Port
 10207                           
 10208                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10209  00265A  8484               	bsf	3972,2,c	;volatile
 10210                           
 10211                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10212  00265C  0E0D               	movlw	13
 10213  00265E                     i2u564_47:
 10214  00265E  2EE8               	decfsz	wreg,f,c
 10215  002660  D7FE               	goto	i2u564_47
 10216  002662  F000               	nop	
 10217                           
 10218                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10219  002664  9484               	bcf	3972,2,c	;volatile
 10220  002666  0012               	return	
 10221  002668                     __end_ofi2_Lcd_Write_Char:
 10222                           	opt stack 0
 10223                           pclatu	equ	0xFFB
 10224                           pclath	equ	0xFFA
 10225                           tblptru	equ	0xFF8
 10226                           tblptrh	equ	0xFF7
 10227                           tblptrl	equ	0xFF6
 10228                           tablat	equ	0xFF5
 10229                           prodh	equ	0xFF4
 10230                           prodl	equ	0xFF3
 10231                           intcon	equ	0xFF2
 10232                           indf0	equ	0xFEF
 10233                           postinc0	equ	0xFEE
 10234                           fsr0h	equ	0xFEA
 10235                           fsr0l	equ	0xFE9
 10236                           wreg	equ	0xFE8
 10237                           postinc1	equ	0xFE6
 10238                           postdec1	equ	0xFE5
 10239                           fsr1h	equ	0xFE2
 10240                           fsr1l	equ	0xFE1
 10241                           indf2	equ	0xFDF
 10242                           postinc2	equ	0xFDE
 10243                           postdec2	equ	0xFDD
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function i2_Lcd_Set_Cursor *****************
 10249 ;; Defined at:
 10250 ;;		line 40 in file "lcd.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;  a               1    wreg     unsigned char 
 10253 ;;  b               1    3[COMRAM] unsigned char 
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;  a               1    4[COMRAM] unsigned char 
 10256 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10257 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10258 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10259 ;; Return value:  Size  Location     Type
 10260 ;;		None               void
 10261 ;; Registers used:
 10262 ;;		wreg, status,2, status,0, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10268 ;;      Params:         1       0       0       0       0       0       0       0       0
 10269 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10271 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10272 ;;Total ram usage:        5 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    2
 10275 ;; This function calls:
 10276 ;;		i2_Lcd_Cmd
 10277 ;; This function is called by:
 10278 ;;		_TMRO_USART
 10279 ;; This function uses a non-reentrant model
 10280 ;;
 10281                           
 10282                           	psect	text52
 10283  0023BA                     __ptext52:
 10284                           	opt stack 0
 10285  0023BA                     i2_Lcd_Set_Cursor:
 10286                           	opt stack 21
 10287                           
 10288                           ;incstack = 0
 10289                           ;i2Lcd_Set_Cursor@a stored from wreg
 10290  0023BA  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10291                           
 10292                           ;lcd.c: 41: char temp, z, y;
 10293                           ;lcd.c: 42: if (a == 1) {
 10294  0023BC  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10295  0023BE  A4D8               	btfss	status,2,c
 10296  0023C0  D010               	goto	i2l3970
 10297                           
 10298                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10299  0023C2  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10300  0023C4  0F7F               	addlw	127
 10301  0023C6  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10302                           
 10303                           ;lcd.c: 44: z = temp >> 4;
 10304  0023C8  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10305  0023CA  0B0F               	andlw	15
 10306  0023CC  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10307                           
 10308                           ;lcd.c: 45: y = temp & 0x0F;
 10309  0023CE  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10310  0023D0  0B0F               	andlw	15
 10311  0023D2  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10312                           
 10313                           ;lcd.c: 46: Lcd_Cmd(z);
 10314  0023D4  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10315  0023D6  ECC1  F013         	call	i2_Lcd_Cmd
 10316                           
 10317                           ;lcd.c: 47: Lcd_Cmd(y);
 10318  0023DA  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10319  0023DC  ECC1  F013         	call	i2_Lcd_Cmd
 10320                           
 10321                           ;lcd.c: 48: } else if (a == 2) {
 10322  0023E0  D013               	goto	i2l254
 10323  0023E2                     i2l3970:
 10324  0023E2  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10325  0023E4  0A02               	xorlw	2
 10326  0023E6  A4D8               	btfss	status,2,c
 10327  0023E8  D00F               	goto	i2l254
 10328                           
 10329                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10330  0023EA  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10331  0023EC  0FBF               	addlw	191
 10332  0023EE  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10333                           
 10334                           ;lcd.c: 50: z = temp >> 4;
 10335  0023F0  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10336  0023F2  0B0F               	andlw	15
 10337  0023F4  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10338                           
 10339                           ;lcd.c: 51: y = temp & 0x0F;
 10340  0023F6  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10341  0023F8  0B0F               	andlw	15
 10342  0023FA  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10343                           
 10344                           ;lcd.c: 52: Lcd_Cmd(z);
 10345  0023FC  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10346  0023FE  ECC1  F013         	call	i2_Lcd_Cmd
 10347                           
 10348                           ;lcd.c: 53: Lcd_Cmd(y);
 10349  002402  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10350  002404  ECC1  F013         	call	i2_Lcd_Cmd
 10351  002408                     i2l254:
 10352  002408  0012               	return	
 10353  00240A                     __end_ofi2_Lcd_Set_Cursor:
 10354                           	opt stack 0
 10355                           pclatu	equ	0xFFB
 10356                           pclath	equ	0xFFA
 10357                           tblptru	equ	0xFF8
 10358                           tblptrh	equ	0xFF7
 10359                           tblptrl	equ	0xFF6
 10360                           tablat	equ	0xFF5
 10361                           prodh	equ	0xFF4
 10362                           prodl	equ	0xFF3
 10363                           intcon	equ	0xFF2
 10364                           indf0	equ	0xFEF
 10365                           postinc0	equ	0xFEE
 10366                           fsr0h	equ	0xFEA
 10367                           fsr0l	equ	0xFE9
 10368                           wreg	equ	0xFE8
 10369                           postinc1	equ	0xFE6
 10370                           postdec1	equ	0xFE5
 10371                           fsr1h	equ	0xFE2
 10372                           fsr1l	equ	0xFE1
 10373                           indf2	equ	0xFDF
 10374                           postinc2	equ	0xFDE
 10375                           postdec2	equ	0xFDD
 10376                           fsr2h	equ	0xFDA
 10377                           fsr2l	equ	0xFD9
 10378                           status	equ	0xFD8
 10379                           
 10380 ;; *************** function i2_Lcd_Clear *****************
 10381 ;; Defined at:
 10382 ;;		line 35 in file "lcd.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;		None
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;		None
 10387 ;; Return value:  Size  Location     Type
 10388 ;;		None               void
 10389 ;; Registers used:
 10390 ;;		wreg, status,2, cstack
 10391 ;; Tracked objects:
 10392 ;;		On entry : 0/0
 10393 ;;		On exit  : 0/0
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10396 ;;      Params:         0       0       0       0       0       0       0       0       0
 10397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10399 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10400 ;;Total ram usage:        0 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    2
 10403 ;; This function calls:
 10404 ;;		i2_Lcd_Cmd
 10405 ;; This function is called by:
 10406 ;;		_TMRO_USART
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           	psect	text53
 10411  002876                     __ptext53:
 10412                           	opt stack 0
 10413  002876                     i2_Lcd_Clear:
 10414                           	opt stack 21
 10415                           
 10416                           ;lcd.c: 36: Lcd_Cmd(0);
 10417                           
 10418                           ;incstack = 0
 10419  002876  0E00               	movlw	0
 10420  002878  ECC1  F013         	call	i2_Lcd_Cmd
 10421                           
 10422                           ;lcd.c: 37: Lcd_Cmd(1);
 10423  00287C  0E01               	movlw	1
 10424  00287E  ECC1  F013         	call	i2_Lcd_Cmd
 10425  002882  0012               	return	
 10426  002884                     __end_ofi2_Lcd_Clear:
 10427                           	opt stack 0
 10428                           pclatu	equ	0xFFB
 10429                           pclath	equ	0xFFA
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           indf0	equ	0xFEF
 10438                           postinc0	equ	0xFEE
 10439                           fsr0h	equ	0xFEA
 10440                           fsr0l	equ	0xFE9
 10441                           wreg	equ	0xFE8
 10442                           postinc1	equ	0xFE6
 10443                           postdec1	equ	0xFE5
 10444                           fsr1h	equ	0xFE2
 10445                           fsr1l	equ	0xFE1
 10446                           indf2	equ	0xFDF
 10447                           postinc2	equ	0xFDE
 10448                           postdec2	equ	0xFDD
 10449                           fsr2h	equ	0xFDA
 10450                           fsr2l	equ	0xFD9
 10451                           status	equ	0xFD8
 10452                           
 10453 ;; *************** function i2_Lcd_Cmd *****************
 10454 ;; Defined at:
 10455 ;;		line 27 in file "lcd.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;  a               1    wreg     unsigned char 
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;  a               1    2[COMRAM] unsigned char 
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, cstack
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0
 10470 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10471 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10472 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10473 ;;Total ram usage:        2 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    1
 10476 ;; This function calls:
 10477 ;;		i2_Lcd_Port
 10478 ;; This function is called by:
 10479 ;;		i2_Lcd_Clear
 10480 ;;		i2_Lcd_Set_Cursor
 10481 ;; This function uses a non-reentrant model
 10482 ;;
 10483                           
 10484                           	psect	text54
 10485  002782                     __ptext54:
 10486                           	opt stack 0
 10487  002782                     i2_Lcd_Cmd:
 10488                           	opt stack 21
 10489                           
 10490                           ;incstack = 0
 10491                           ;i2Lcd_Cmd@a stored from wreg
 10492  002782  6E03               	movwf	i2Lcd_Cmd@a,c
 10493                           
 10494                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10495  002784  9084               	bcf	3972,0,c	;volatile
 10496                           
 10497                           ;lcd.c: 29: Lcd_Port(a);
 10498  002786  5003               	movf	i2Lcd_Cmd@a,w,c
 10499  002788  EC63  F013         	call	i2_Lcd_Port
 10500                           
 10501                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10502  00278C  8484               	bsf	3972,2,c	;volatile
 10503                           
 10504                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10505  00278E  0E06               	movlw	6
 10506  002790  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10507  002792  0E30               	movlw	48
 10508  002794                     i2u565_47:
 10509  002794  2EE8               	decfsz	wreg,f,c
 10510  002796  D7FE               	goto	i2u565_47
 10511  002798  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10512  00279A  D7FC               	goto	i2u565_47
 10513  00279C  D000               	nop2	
 10514                           
 10515                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10516  00279E  9484               	bcf	3972,2,c	;volatile
 10517  0027A0  0012               	return	
 10518  0027A2                     __end_ofi2_Lcd_Cmd:
 10519                           	opt stack 0
 10520                           pclatu	equ	0xFFB
 10521                           pclath	equ	0xFFA
 10522                           tblptru	equ	0xFF8
 10523                           tblptrh	equ	0xFF7
 10524                           tblptrl	equ	0xFF6
 10525                           tablat	equ	0xFF5
 10526                           prodh	equ	0xFF4
 10527                           prodl	equ	0xFF3
 10528                           intcon	equ	0xFF2
 10529                           indf0	equ	0xFEF
 10530                           postinc0	equ	0xFEE
 10531                           fsr0h	equ	0xFEA
 10532                           fsr0l	equ	0xFE9
 10533                           wreg	equ	0xFE8
 10534                           postinc1	equ	0xFE6
 10535                           postdec1	equ	0xFE5
 10536                           fsr1h	equ	0xFE2
 10537                           fsr1l	equ	0xFE1
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function i2_Lcd_Port *****************
 10546 ;; Defined at:
 10547 ;;		line 6 in file "lcd.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  a               1    wreg     unsigned char 
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;  a               1    0[COMRAM] unsigned char 
 10552 ;; Return value:  Size  Location     Type
 10553 ;;		None               void
 10554 ;; Registers used:
 10555 ;;		wreg
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10561 ;;      Params:         0       0       0       0       0       0       0       0       0
 10562 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10564 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10565 ;;Total ram usage:        1 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; This function calls:
 10568 ;;		Nothing
 10569 ;; This function is called by:
 10570 ;;		i2_Lcd_Cmd
 10571 ;;		i2_Lcd_Write_Char
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text55
 10576  0026C6                     __ptext55:
 10577                           	opt stack 0
 10578  0026C6                     i2_Lcd_Port:
 10579                           	opt stack 21
 10580                           
 10581                           ;incstack = 0
 10582                           ;i2Lcd_Port@a stored from wreg
 10583  0026C6  6E01               	movwf	i2Lcd_Port@a,c
 10584                           
 10585                           ;lcd.c: 7: if (a & 1)
 10586  0026C8  A001               	btfss	i2Lcd_Port@a,0,c
 10587  0026CA  D002               	goto	i2l234
 10588                           
 10589                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10590  0026CC  8883               	bsf	3971,4,c	;volatile
 10591  0026CE  D001               	goto	i2l3620
 10592  0026D0                     i2l234:
 10593                           
 10594                           ;lcd.c: 9: else
 10595                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10596  0026D0  9883               	bcf	3971,4,c	;volatile
 10597  0026D2                     i2l3620:
 10598                           
 10599                           ;lcd.c: 12: if (a & 2)
 10600  0026D2  A201               	btfss	i2Lcd_Port@a,1,c
 10601  0026D4  D002               	goto	i2l236
 10602                           
 10603                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10604  0026D6  8A83               	bsf	3971,5,c	;volatile
 10605  0026D8  D001               	goto	i2l3624
 10606  0026DA                     i2l236:
 10607                           
 10608                           ;lcd.c: 14: else
 10609                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10610  0026DA  9A83               	bcf	3971,5,c	;volatile
 10611  0026DC                     i2l3624:
 10612                           
 10613                           ;lcd.c: 17: if (a & 4)
 10614  0026DC  A401               	btfss	i2Lcd_Port@a,2,c
 10615  0026DE  D002               	goto	i2l238
 10616                           
 10617                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10618  0026E0  8C83               	bsf	3971,6,c	;volatile
 10619  0026E2  D001               	goto	i2l3628
 10620  0026E4                     i2l238:
 10621                           
 10622                           ;lcd.c: 19: else
 10623                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10624  0026E4  9C83               	bcf	3971,6,c	;volatile
 10625  0026E6                     i2l3628:
 10626                           
 10627                           ;lcd.c: 22: if (a & 8)
 10628  0026E6  A601               	btfss	i2Lcd_Port@a,3,c
 10629  0026E8  D002               	goto	i2l240
 10630                           
 10631                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10632  0026EA  8E83               	bsf	3971,7,c	;volatile
 10633  0026EC  D001               	goto	i2l242
 10634  0026EE                     i2l240:
 10635                           
 10636                           ;lcd.c: 24: else
 10637                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10638  0026EE  9E83               	bcf	3971,7,c	;volatile
 10639  0026F0                     i2l242:
 10640  0026F0  0012               	return	
 10641  0026F2                     __end_ofi2_Lcd_Port:
 10642                           	opt stack 0
 10643                           pclatu	equ	0xFFB
 10644                           pclath	equ	0xFFA
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           intcon	equ	0xFF2
 10652                           indf0	equ	0xFEF
 10653                           postinc0	equ	0xFEE
 10654                           fsr0h	equ	0xFEA
 10655                           fsr0l	equ	0xFE9
 10656                           wreg	equ	0xFE8
 10657                           postinc1	equ	0xFE6
 10658                           postdec1	equ	0xFE5
 10659                           fsr1h	equ	0xFE2
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _ReadUSART *****************
 10669 ;; Defined at:
 10670 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  data            1    0[COMRAM] unsigned char 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      unsigned char 
 10677 ;; Registers used:
 10678 ;;		wreg, status,2, status,0
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0
 10685 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10687 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10688 ;;Total ram usage:        1 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_TMRO_USART
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           	psect	text56
 10698  0027DE                     __ptext56:
 10699                           	opt stack 0
 10700  0027DE                     _ReadUSART:
 10701                           	opt stack 23
 10702                           
 10703                           ;incstack = 0
 10704  0027DE  0EF2               	movlw	242
 10705  0027E0  163C               	andwf	_USART_Status,f,c
 10706  0027E2  ACAB               	btfss	4011,6,c	;volatile
 10707  0027E4  D003               	goto	i2l585
 10708  0027E6  903C               	bcf	_USART_Status,0,c
 10709  0027E8  B0AB               	btfsc	4011,0,c	;volatile
 10710  0027EA  803C               	bsf	_USART_Status,0,c
 10711  0027EC                     i2l585:
 10712  0027EC  B4AB               	btfsc	4011,2,c	;volatile
 10713  0027EE  843C               	bsf	_USART_Status,2,c
 10714  0027F0  B2AB               	btfsc	4011,1,c	;volatile
 10715  0027F2  863C               	bsf	_USART_Status,3,c
 10716  0027F4  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 10717  0027F8  5001               	movf	ReadUSART@data,w,c
 10718  0027FA  0012               	return	
 10719  0027FC                     __end_of_ReadUSART:
 10720                           	opt stack 0
 10721                           pclatu	equ	0xFFB
 10722                           pclath	equ	0xFFA
 10723                           tblptru	equ	0xFF8
 10724                           tblptrh	equ	0xFF7
 10725                           tblptrl	equ	0xFF6
 10726                           tablat	equ	0xFF5
 10727                           prodh	equ	0xFF4
 10728                           prodl	equ	0xFF3
 10729                           intcon	equ	0xFF2
 10730                           indf0	equ	0xFEF
 10731                           postinc0	equ	0xFEE
 10732                           fsr0h	equ	0xFEA
 10733                           fsr0l	equ	0xFE9
 10734                           wreg	equ	0xFE8
 10735                           postinc1	equ	0xFE6
 10736                           postdec1	equ	0xFE5
 10737                           fsr1h	equ	0xFE2
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           fsr2h	equ	0xFDA
 10743                           fsr2l	equ	0xFD9
 10744                           status	equ	0xFD8
 10745                           pclatu	equ	0xFFB
 10746                           pclath	equ	0xFFA
 10747                           tblptru	equ	0xFF8
 10748                           tblptrh	equ	0xFF7
 10749                           tblptrl	equ	0xFF6
 10750                           tablat	equ	0xFF5
 10751                           prodh	equ	0xFF4
 10752                           prodl	equ	0xFF3
 10753                           intcon	equ	0xFF2
 10754                           indf0	equ	0xFEF
 10755                           postinc0	equ	0xFEE
 10756                           fsr0h	equ	0xFEA
 10757                           fsr0l	equ	0xFE9
 10758                           wreg	equ	0xFE8
 10759                           postinc1	equ	0xFE6
 10760                           postdec1	equ	0xFE5
 10761                           fsr1h	equ	0xFE2
 10762                           fsr1l	equ	0xFE1
 10763                           indf2	equ	0xFDF
 10764                           postinc2	equ	0xFDE
 10765                           postdec2	equ	0xFDD
 10766                           fsr2h	equ	0xFDA
 10767                           fsr2l	equ	0xFD9
 10768                           status	equ	0xFD8
 10769                           
 10770                           	psect	rparam
 10771  0000                     pclatu	equ	0xFFB
 10772                           pclath	equ	0xFFA
 10773                           tblptru	equ	0xFF8
 10774                           tblptrh	equ	0xFF7
 10775                           tblptrl	equ	0xFF6
 10776                           tablat	equ	0xFF5
 10777                           prodh	equ	0xFF4
 10778                           prodl	equ	0xFF3
 10779                           intcon	equ	0xFF2
 10780                           indf0	equ	0xFEF
 10781                           postinc0	equ	0xFEE
 10782                           fsr0h	equ	0xFEA
 10783                           fsr0l	equ	0xFE9
 10784                           wreg	equ	0xFE8
 10785                           postinc1	equ	0xFE6
 10786                           postdec1	equ	0xFE5
 10787                           fsr1h	equ	0xFE2
 10788                           fsr1l	equ	0xFE1
 10789                           indf2	equ	0xFDF
 10790                           postinc2	equ	0xFDE
 10791                           postdec2	equ	0xFDD
 10792                           fsr2h	equ	0xFDA
 10793                           fsr2l	equ	0xFD9
 10794                           status	equ	0xFD8


Data Sizes:
    Strings     189
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1223$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124282
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5167
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  115757
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                   _putcBluetoothInt
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      99
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7694
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     164
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1129
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 25 14:48:54 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 25F6                             l68 1F30  
                _InicioComando 0038                   ___awdiv@sign 0024            ___wmul@multiplicand 0029  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   ___ftadd@exp1 0081  
                 ___ftadd@exp2 0080                   ___ftadd@sign 007F                            l210 2862  
    __size_ofi2_Lcd_Write_Char 0038                            l240 26C2                            l242 26C4  
                          l234 26A4                            l236 26AE                            l238 26B8  
                          l254 23B8                            l433 0DB6                            l533 24FC  
                          l189 268C                            l534 2506                            l535 2508  
                          l480 0592                            l571 2276                            l572 2278  
                          l573 2282                            l574 2284                            l567 2262  
                          l576 22A6                            l926 1B44                            l963 10CA  
                          l964 12DC                            l885 17EE                            l894 17DE  
                          l967 1104                            l969 112C                            l978 1216  
                          l987 1240                   __CFG_CPB$OFF 000000                            _PR2 000FCB  
                 __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000                            _cad 003D  
                 ___awmod@sign 001E                            prod 000FF3                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l1003 18EE  
                         l1012 18DE                           l1021 1ED8                           l1005 185E  
                         l1006 1886                           l1027 1434                           l1037 2730  
                         l1047 157E                           l1086 1FD0                           l1096 22FC  
                         l5000 0838                           l5002 084C                           l5010 090E  
                         l4212 10D8                           l4300 1382                           l5012 0932  
                         l5022 211C                           l4150 1AAE                           l4310 13CC  
                         l4240 1198                           l4224 1122                           l4304 13A0  
                         l5008 08FA                           l4144 2832                           l5018 20E4  
                         l4162 1AFA                           l4154 1ABC                           l4242 11AC  
                         l4234 1164                           l4218 1112                           l4330 1C10  
                         l4314 13EA                           l5114 1F16                           l4410 1D6E  
                         l4164 1B18                           l4156 1AC6                           l4260 126A  
                         l4252 11F8                           l4244 11B8                           l4420 1DB0  
                         l4404 1D30                           l4190 26B0                           l4166 1B22  
                         l4158 1AE4                           l4270 12B8                           l4254 120C  
                         l4246 11C4                           l4342 1C46                           l5054 24F8  
                         l5118 1F3A                           l4414 1D86                           l5136 2392  
                         l4344 1C4E                           l4336 1C30                           l4280 1300  
                         l4424 267A                           l4194 26BA                           l4186 26A6  
                         l4610 18DA                           l4602 18B6                           l4362 1C86  
                         l4354 1C6E                           l4346 1C52                           l4530 0A9A  
                         l5306 1674                           l5314 1690                           l5234 1A4E  
                         l5410 1CC8                           l4516 100A                           l4508 0F26  
                         l4540 0B6C                           l5316 16B4                           l5260 158E  
                         l4358 1C78                           l4390 1E28                           l4382 1E08  
                         l4374 1DDE                           l4286 1334                           l4446 2264  
                         l4438 2256                           l4704 145E                           l4624 1712  
                         l4608 18CE                           l4384 1E10                           l4536 0B5C  
                         l5272 15C6                           l4800 2492                           l5416 1CD6  
                         l4722 14EC                           l4618 16E6                           l4570 1824  
                         l4386 1E14                           l4394 1E32                           l4378 1DFA  
                         l4554 0D86                           l5266 15AA                           l4740 156E  
                         l4732 152A                           l4660 17B6                           l4564 180A  
                         l4548 0CB8                           l4820 0066                           l5284 15FE  
                         l5436 1D10                           l4734 1542                           l4726 1508  
                         l4750 1F82                           l4646 1784                           l4638 1754  
                         l4398 1E40                           l4910 0472                           l4822 00A2  
                         l4814 0052                           l5278 15E2                           l4680 1E7A  
                         l4736 1548                           l4752 1F8E                           l4656 17A6  
                         l4816 0060                           l4808 0030                           l4690 1ED6  
                         l4762 1FC2                           l4754 1F92                           l4770 22BA  
                         l4666 17CE                           l4684 1EAA                           l4772 22C6  
                         l4668 17DA                           l4932 0562                           l4916 049C  
                         l4924 053A                           l4860 024C                           l4852 01E4  
                         l4836 011C                           l4774 22CA                           l4598 18A6  
                         l4950 0616                           l4926 0548                           l4784 2314  
                         l4960 0708                           l4880 0346                           l4864 0272  
                         l4778 22EE                           l4786 2320                           l4962 0716  
                         l4946 05C4                           l4938 0596                           l4970 073C  
                         l4980 07B6                           l4892 03B8                           l4876 0320  
                         l4868 02B8                           l4796 2460                           l4968 0730  
                         l4896 0420                           l4994 0808                           STR_1 7FB7  
                         STR_2 7F63                           STR_3 7FD9                           STR_4 7FD9  
                         STR_5 7FB4                           STR_6 7F72                           STR_7 7F80  
                         STR_8 7F9C                           STR_9 7F8E                __end_of_BT_Init 1BEC  
                         u4211 1314                           u4220 1320                           u5020 016C  
                         u5005 00F6                           _PIE1 000F9D                           u4400 1DA6  
                         u5025 0160                           u5300 214C                           u4191 12F2  
                         u4407 1D9C                           u4601 1800                           u5225 078E  
                         u4370 1D64                           u5307 2142                           u4621 181A  
                         u5325 2556                           u4710 1704                           u4377 1D5A  
                         u5361 1B5C                           u5290 2114                           u4715 16FA  
                         u5355 251C                           u4821 144E                           u4670 18BC  
                         u5607 2614                           u4840 148A                           u4760 17BC  
                         u5617 2626                           u5297 210A                           u4690 16D8  
                         u5627 2774                           u5547 21DA                           u3981 1076  
                         u4845 1480                           u5557 21F0                           u4870 1510  
                         u3991 1096                           u4695 16CE                           u5567 2206  
                         u5577 1A06                           u5587 1A3E                           u5597 2680  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1C90  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1236 0098                   _sprintf$2288 0095                __end_of_Lcd_Cmd 2782  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 2586                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1C90                __end_of___ftadd 12DE  
                        STR_10 7FF1                          STR_11 7F53                          STR_12 7FF8  
                        STR_20 7FEA                          STR_13 7F51                          STR_21 7FC3  
                        STR_14 7FFA                          STR_15 7FFC                          STR_16 7FE2  
                        STR_17 7FCE                          STR_18 7FAA                          STR_19 7F41  
              __end_of___awmod 1E4A                __end_of___ftneg 273E                __end_of___lldiv 1FE2  
              __end_of___ftmul 1436                ___awdiv@divisor 0021                __end_of___llmod 230E  
              __end_of___ftsub 24D8                __end_of___fttol 1580                          _T2CON 000FCA  
                  _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000             ?_Lcd_Write_Integer 00B8  
                        i2l240 26EE                          i2l242 26F0                          i2l234 26D0  
                        i2l236 26DA                          i2l238 26E4                          i2l254 2408  
                        i2l351 1986                          i2l585 27EC                ___awdiv@counter 0023  
                        _RCREG 000FAE                          _RCSTA 000FAB                          _SPBRG 000FAF  
                        _PORTA 000F80                          _PORTB 000F81                          _PORTE 000F84  
                __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD                          _TXSTA 000FAC  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086                  __CFG_WRT3$OFF 000000  
                 ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
           __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000                    ?i2_Lcd_Port 0001  
              __end_of_dpowers 7EF3                          _array 0114            ??_Lcd_Write_Integer 0030  
                        _scale 0940                  ___ftpack@sign 001D                          tablat 000FF5  
      PWM_DutyCycle2@DutyCycle 0086                          status 000FD8                __end_of_sprintf 0940  
               __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F                     Pause_seg@x 001E  
             i2_Lcd_Set_Cursor 23BA                    ?_TMRO_USART 0001               __end_of_Lcd_Init 2240  
               WriteUSART@data 0019               __end_of_Lcd_Port 26C6             __size_of_PWM_init1 001E  
           __size_of_PWM_init2 001E                __initialization 240A                   __end_of_main 1D26  
    __end_of_Lcd_Write_Integer 25C0    __size_of_Inicializa_Driveby 00BA              ?_putcBluetoothInt 00B8  
             __end_of_OpenPWM1 284A               __end_of_OpenPWM2 2512                         ??_main 0030  
                ___fttol@sign1 007C               __end_of_Pause_ms 269A             __size_of_Lcd_Clear 000E  
                __activetblptr 000003             ??_putcBluetoothInt 0030           __size_of__tdiv_to_l_ 0100  
                    ??_BT_Init 0027               ___llmod@dividend 0026                         ?_scale 006C  
                       _CCPR1L 000FBE                         _CCPR2L 000FBB               ___awdiv@dividend 001F  
              putSTRINGU1@dato 001B                putSTRINGU1@cont 0022               __end_of___ftpack 1B46  
             __end_of___lbtoft 2762                putSTRINGU1@last 0021                clrBufferUSART@i 0019  
          __size_of_UART1_Init 0010               __end_of___lltoft 236A                         i2l4062 1968  
                       i2l4066 197C                         i2l3620 26D2                         i2l4078 19A6  
                       i2l3624 26DC                         i2l3628 26E6                         _INTCON 000FF2  
                       i2l3970 23E2                         i2l3980 215E                         i2l3984 2196  
           __size_of_ReadUSART 001E                      ??_Lcd_Cmd 001A                         _SPBRGH 000FB0  
           __size_of_SetDCPWM1 003A             __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038  
               __CFG_XINST$OFF 000000               __end_of__powers_ 7F41                         _Timer1 003B  
           __size_of_OpenUSART 0068  __size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001  
                       ___ftge 1E4A             __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 27A2  
                       ___wmul 26F2                   ?_putSTRINGU1 001B                      ??___awdiv 0023  
                    ??___ftadd 007C                 _PWM_DutyCycle1 205E                 _PWM_DutyCycle2 1FE2  
               __CFG_STVREN$ON 000000                      ??___awmod 001D                      ??___ftneg 001C  
                    ??___lldiv 0021                      ??___ftmul 002D                      ??___llmod 002E  
                    ??___ftsub 0030                      ??___fttol 0077            __size_ofi2_Lcd_Port 002C  
          i2Lcd_Write_String@a 0005            i2Lcd_Write_String@i 0009                         _packet 0046  
                       _lenght 0042                         _fround 0DB8                         clear_0 2410  
                       clear_1 241C                         clear_2 2428               ___awdiv@quotient 0025  
               sprintf@vd_1238 00A0                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 2630          ___ftmul@f3_as_product 0067                   __mediumconst 7ECA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19DC              __end_of_PWM_init1 27DE              __end_of_PWM_init2 27C0  
             __end_of_putcTxU1 2868                      ??_sprintf 008F        __size_of_Comando_Tablet 013A  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 244E  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 2876                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 20DA         __end_of_PWM_DutyCycle2 205E                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 2826                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2812     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 25C0                  __end_of_scale 0DB8    __size_ofi2_Lcd_Write_String 007A  
            __end_of_ReadUSART 27FC              __end_of_SetDCPWM1 2586              __end_of_SetDCPWM2 254C  
            i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003                 _Lcd_Set_Cursor 236A  
                   __div_to_l_ 16BA                      ?_Lcd_Init 0001                  ReadUSART@data 0001  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 22A8                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 249C                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00CE                     __pbssBANK1 0100  
            Comando_Tablet@sum 0170                      ?_OpenPWM1 0001                      ?_OpenPWM2 0001  
                __div_to_l_@f1 0019                  __div_to_l_@f2 001C                      ?_Pause_ms 0019  
       __end_of_clrBufferUSART 25F8                ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001  
                      ?___ftge 0019                   ??_UART1_Init 001F                        ?___wmul 0027  
          Inicializa_Driveby@i 0028                        _CCP1CON 000FBD                        _CCP2CON 000FBA  
         i2Lcd_Set_Cursor@temp 0008    SendBlueToothCommand@command 0023                        ?_fround 006C  
    __size_of_Lcd_Write_String 007A                      ?___ftpack 0019                      ?___lbtoft 0021  
       __end_of_Lcd_Set_Cursor 23BA                      ?___lltoft 0021               putSTRINGU1@total 001D  
     __end_ofi2_Lcd_Set_Cursor 240A                        _BT_Init 1B46                        _SBUSART 003A  
                   ??_Lcd_Init 001C                   ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019  
           __end_of_UART1_Init 285A                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 25F8  
                      _Lcd_Cmd 2762                        _Comando 0033                        _Med_lsb 00D0  
                      _Med_msb 00D2                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1A  
                      __Hparam 0000                     _scale$2287 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1BEC                        ___ftadd 105E                        ___awmod 1DBA  
                    ?_putcTxU1 0001                        ___ftneg 2718                        ___lldiv 1F60  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 22A8  
                      ___ftsub 249C                        ___fttol 1436             __end_ofi2_Lcd_Port 26F2  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 240A                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5669 00EC                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1C90                        __ptext1 21CE  
                      __ptext2 19E4                        __ptext3 1B46                        __ptext4 27FC  
                      __ptext5 1D26                        __ptext6 285A                        __ptext7 2454  
                      __ptext8 2668                        __ptext9 1580                        _comando 00D8  
                  ?__div_to_l_ 0019                        _countup 00FE                        _dpowers 7ECB  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19E4  
               _Comando_Tablet 1580                        _sprintf 001C         __end_of_Lcd_Write_Char 2630  
               __pintcode_body 18F0           end_of_initialization 244E                    _TramaTablet 0100  
    __size_of_putcBluetoothInt 0086                        int_func 18F0       __end_ofi2_Lcd_Write_Char 2668  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                      _RCSTAbits 000FAB  
   __end_of_Inicializa_Driveby 1A9E                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0019                     ??_putcTxU1 001A                     _num_med_hi 0043  
               __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F  
                    i2_Lcd_Cmd 2782                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 16BA   __end_of_SendBlueToothCommand 2812                      _TRISBbits 000F93  
                    _TRISCbits 000F94            __size_of_WriteUSART 0012                ?_Lcd_Write_Char 0001  
            Lcd_Write_String@a 001D              Lcd_Write_String@i 0021                      _PWM_init1 27C0  
                    _PWM_init2 27A2                      _TXSTAbits 000FAC            __size_of__div_to_l_ 0136  
                  ___ftmul@exp 0066                      _Lcd_Clear 2868                 __end_of___ftge 1EDA  
               __end_of___wmul 2718               _Lcd_Write_String 20DA                     ?i2_Lcd_Cmd 0001  
               __end_of_fround 105E            start_initialization 240A                      Pause_ms@i 001C  
                    Pause_ms@x 0019                ?_Comando_Tablet 0001                      _ReadUSART 27DE  
                    _SetDCPWM1 254C                      _SetDCPWM2 2512                SetDCPWM1@DCycle 001D  
          __end_of__tdiv_to_l_ 18F0                SetDCPWM2@DCycle 001D                      _DutyCycle 00CE  
            __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C                     ?_PWM_init1 0001  
                   ?_PWM_init2 0001                      _OpenUSART 2240               ??_PWM_DutyCycle1 0082  
             ??_PWM_DutyCycle2 0082                      _Pause_seg 2454                ___llmod@divisor 002A  
              ___llmod@counter 002E              __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A  
            __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001                       ??___ftge 001F  
   __end_ofi2_Lcd_Write_String 21CE                       ??___wmul 002B                    __pdataBANK0 00EC  
             __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B  
                     ??_fround 0030                 _num_med_medium 0045                     fround@prec 0075  
            __size_of___ftpack 00A8              __size_of___lbtoft 0024              __size_of___lltoft 005C  
                  __pbssCOMRAM 0030                     ?_ReadUSART 0001                       ?_BT_Init 0001  
                __pcstackBANK0 0060                  __pcstackBANK1 015A              ?i2_Lcd_Set_Cursor 0004  
                   ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019            __end_of__stringdata 7FFE  
           ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1EDA                     ?_OpenUSART 0019  
                     ?_Lcd_Cmd 0001                    sprintf@_val 00AD                    sprintf@flag 00A6  
             ??_clrBufferUSART 0019                     ?_Pause_seg 0001                    sprintf@fval 00B4  
                  sprintf@prec 00AB                      _cleanBfer 003E                   ??_WriteUSART 0019  
             ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 27FC                      __pintcode 0008  
                __pmediumconst 7ECA                       ?___awdiv 001F                       ?___ftadd 0076  
                     ?___awmod 0019                       ?___ftneg 0019                       ?___lldiv 0019  
                     ?___ftmul 0060                       ?___llmod 0026                       ?___ftsub 0082  
                    __npowers_ 7EF3                       ?___fttol 0073              putcTxU1@character 001A  
                  ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E                    __tdiv_to_l_ 17F0  
                    _contador2 0040                   ??__div_to_l_ 001F      SendBlueToothCommand@total 0025  
                 _TamanhoTrama 00D4                       ?_sprintf 0088                 __size_of_scale 0478  
           __end_of_WriteUSART 2838                    ??_PWM_init1 001A                    ??_PWM_init2 001C  
 PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034                 ___wmul@product 002B  
            ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D                       Lcd_Cmd@a 001B  
                     _PIR1bits 000F9E             __end_of__div_to_l_ 17F0                       i2u365_40 218E  
                     i2u365_47 2184                       i2u366_40 21C6                       i2u366_47 21BC  
           ??i2_Lcd_Write_Char 0002                       i2u379_40 1982                       i2u563_47 264C  
        ?_SendBlueToothCommand 0023                       i2u564_47 265E                       i2u565_47 2794  
                ??i2_Lcd_Clear 0004                    ??_Lcd_Clear 001C               __CFG_WDTPS$32768 000000  
                ??_putSTRINGU1 001F                     _ADCON1bits 000FC1                    __stringdata 7F41  
            ___wmul@multiplier 0027                       _CheckSum 0030               ??_Lcd_Write_Char 001A  
                  ??_ReadUSART 0001             _Inicializa_Driveby 19E4                    ??_SetDCPWM1 001B  
                  ??_SetDCPWM2 001B               __size_of_BT_Init 00A6                       _Lcd_Init 21CE  
                     _Lcd_Port 269A                      copy_data0 2442                       _EntTrama 0035  
          ?_Inicializa_Driveby 0001                  _BluetoothDato 0128       __end_of_Lcd_Write_String 2154  
                  ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019                    ??_Pause_seg 001E  
              OpenUSART@config 001E               __size_of_Lcd_Cmd 0020                   _Timer2Config 0047  
                     _OpenPWM1 2838                       _OpenPWM2 24D8                       _Pause_ms 2668  
                     __Hrparam 0000                       __Lrparam 0000             SetDCPWM2@dutycycle 0019  
             __size_of___awdiv 00A4               __size_of___ftadd 0280               __size_of___awmod 0090  
         ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089               PWM_DutyCycle2@DC 0089  
             __size_of___ftneg 0026               __size_of___lldiv 0082               __size_of___ftmul 0158  
             __size_of___llmod 0066               __size_of___ftsub 003C               __size_of___fttol 014A  
             ??_Comando_Tablet 0030                       ___ftpack 1A9E                       ___lbtoft 273E  
                  _fround$2285 0072                    _fround$2286 006F                       ___lltoft 230E  
          __end_ofi2_Lcd_Clear 2884                 OpenPWM2@ccp2mx 001B          __CFG_FOSC$INTOSCIO_EC 000000  
          __end_of_putSTRINGU1 1DBA                     sprintf@exp 00B2                 OpenPWM1@period 0019  
               OpenPWM2@period 001A                       __ptext10 1EDA                       __ptext11 2826  
                     __ptext20 2512                       __ptext12 284A                       __ptext21 205E  
                     __ptext13 2240                       __ptext30 1DBA                       __ptext22 273E  
                     __ptext14 25C0                       __ptext31 1BEC                       __ptext23 254C  
                     __ptext15 27A2                       __ptext40 1A9E                       __ptext32 17F0  
                     __ptext24 2586                       __ptext16 24D8                       __ptext41 2718  
                     __ptext33 16BA                       __ptext25 001C                       __ptext17 27C0  
                     __ptext50 2154                       __ptext42 1E4A                       __ptext34 230E  
                     __ptext26 0940                       __ptext18 2838                       __ptext51 2630  
                     __ptext43 20DA                       __ptext35 22A8                       __ptext27 0DB8  
                     __ptext19 1FE2                       __ptext52 23BA                       __ptext44 25F8  
                     __ptext36 1F60                       __ptext28 26F2                       __ptext53 2876  
                     __ptext45 236A                       __ptext37 1436                       __ptext29 12DE  
                     __ptext54 2782                       __ptext46 2868                       __ptext38 249C  
                     __ptext55 26C6                       __ptext47 2762                       __ptext39 105E  
                     __ptext56 27DE                       __ptext48 269A                       __powers_ 7F1A  
              PWM_init1@period 001A                PWM_init2@period 001C                       _contador 003F  
             __size_of_sprintf 0924                  __size_of_main 0096         ??_SendBlueToothCommand 0027  
                     _putcTxU1 285A                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 1F60          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 2154  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 2876                     _UART1_Init 284A  
                  _putSTRINGU1 1D26           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
                 ?__tdiv_to_l_ 0019                    _num_med_low 0044                       sprintf@c 00B7  
                     sprintf@f 008A               ___lldiv@quotient 0021             Lcd_Write_Integer@a 00B8  
           Lcd_Write_Integer@s 00BA                     i2_Lcd_Port 26C6                   _USART_Status 003C  
                   _TMRO_USART 0008  
