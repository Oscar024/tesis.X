

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Jun 07 23:25:31 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           	psect	idataBANK0
    78  002886                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for BT_Init@F5669
    82  002886  41                 	db	65
    83  002887  54                 	db	84
    84  002888  2B                 	db	43
    85  002889  4E                 	db	78
    86  00288A  41                 	db	65
    87  00288B  4D                 	db	77
    88  00288C  45                 	db	69
    89  00288D  3D                 	db	61
    90  00288E  72                 	db	114
    91  00288F  6F                 	db	111
    92  002890  62                 	db	98
    93  002891  6F                 	db	111
    94  002892  74                 	db	116
    95  002893  0D                 	db	13
    96  002894  0A                 	db	10
    97  002895  00                 	db	0
    98  002896  00                 	db	0
    99  002897  00                 	db	0
   100                           
   101                           ;initializer for _countup
   102  002898  0001               	dw	1
   103                           
   104                           	psect	mediumconst
   105  007ECA                     __pmediumconst:
   106                           	opt stack 0
   107  007ECA  00                 	db	0
   108  007ECB                     _dpowers:
   109                           	opt stack 0
   110  007ECB  0001               	dw	1
   111  007ECD  0000               	dw	0
   112  007ECF  000A               	dw	10
   113  007ED1  0000               	dw	0
   114  007ED3  0064               	dw	100
   115  007ED5  0000               	dw	0
   116  007ED7  03E8               	dw	1000
   117  007ED9  0000               	dw	0
   118  007EDB  2710               	dw	10000
   119  007EDD  0000               	dw	0
   120  007EDF  86A0               	dw	34464
   121  007EE1  0001               	dw	1
   122  007EE3  4240               	dw	16960
   123  007EE5  000F               	dw	15
   124  007EE7  9680               	dw	38528
   125  007EE9  0098               	dw	152
   126  007EEB  E100               	dw	57600
   127  007EED  05F5               	dw	1525
   128  007EEF  CA00               	dw	51712
   129  007EF1  3B9A               	dw	15258
   130  007EF3                     __end_of_dpowers:
   131                           	opt stack 0
   132  007EF3                     __npowers_:
   133                           	opt stack 0
   134  007EF3  00                 	db	0
   135  007EF4  80                 	db	128
   136  007EF5  3F                 	db	63
   137  007EF6  CD                 	db	205
   138  007EF7  CC                 	db	204
   139  007EF8  3D                 	db	61
   140  007EF9  D7                 	db	215
   141  007EFA  23                 	db	35
   142  007EFB  3C                 	db	60
   143  007EFC  12                 	db	18
   144  007EFD  83                 	db	131
   145  007EFE  3A                 	db	58
   146  007EFF  B7                 	db	183
   147  007F00  D1                 	db	209
   148  007F01  38                 	db	56
   149  007F02  C6                 	db	198
   150  007F03  27                 	db	39
   151  007F04  37                 	db	55
   152  007F05  38                 	db	56
   153  007F06  86                 	db	134
   154  007F07  35                 	db	53
   155  007F08  C0                 	db	192
   156  007F09  D6                 	db	214
   157  007F0A  33                 	db	51
   158  007F0B  CC                 	db	204
   159  007F0C  2B                 	db	43
   160  007F0D  32                 	db	50
   161  007F0E  70                 	db	112
   162  007F0F  89                 	db	137
   163  007F10  30                 	db	48
   164  007F11  E7                 	db	231
   165  007F12  DB                 	db	219
   166  007F13  2E                 	db	46
   167  007F14  E5                 	db	229
   168  007F15  3C                 	db	60
   169  007F16  1E                 	db	30
   170  007F17  42                 	db	66
   171  007F18  A2                 	db	162
   172  007F19  0D                 	db	13
   173  007F1A                     __end_of__npowers_:
   174                           	opt stack 0
   175  007F1A                     __powers_:
   176                           	opt stack 0
   177  007F1A  00                 	db	0
   178  007F1B  80                 	db	128
   179  007F1C  3F                 	db	63
   180  007F1D  00                 	db	0
   181  007F1E  20                 	db	32
   182  007F1F  41                 	db	65
   183  007F20  00                 	db	0
   184  007F21  C8                 	db	200
   185  007F22  42                 	db	66
   186  007F23  00                 	db	0
   187  007F24  7A                 	db	122
   188  007F25  44                 	db	68
   189  007F26  40                 	db	64
   190  007F27  1C                 	db	28
   191  007F28  46                 	db	70
   192  007F29  50                 	db	80
   193  007F2A  C3                 	db	195
   194  007F2B  47                 	db	71
   195  007F2C  24                 	db	36
   196  007F2D  74                 	db	116
   197  007F2E  49                 	db	73
   198  007F2F  97                 	db	151
   199  007F30  18                 	db	24
   200  007F31  4B                 	db	75
   201  007F32  BC                 	db	188
   202  007F33  BE                 	db	190
   203  007F34  4C                 	db	76
   204  007F35  6B                 	db	107
   205  007F36  6E                 	db	110
   206  007F37  4E                 	db	78
   207  007F38  03                 	db	3
   208  007F39  15                 	db	21
   209  007F3A  50                 	db	80
   210  007F3B  79                 	db	121
   211  007F3C  AD                 	db	173
   212  007F3D  60                 	db	96
   213  007F3E  F3                 	db	243
   214  007F3F  49                 	db	73
   215  007F40  71                 	db	113
   216  007F41                     __end_of__powers_:
   217                           	opt stack 0
   218  0000                     _ADCON1bits	set	4033
   219  0000                     _CCP1CON	set	4029
   220  0000                     _CCP2CON	set	4026
   221  0000                     _CCPR1L	set	4030
   222  0000                     _CCPR2L	set	4027
   223  0000                     _INTCON	set	4082
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _PIE1	set	3997
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PORTA	set	3968
   229  0000                     _PORTB	set	3969
   230  0000                     _PORTDbits	set	3971
   231  0000                     _PORTE	set	3972
   232  0000                     _PORTEbits	set	3972
   233  0000                     _PR2	set	4043
   234  0000                     _RCREG	set	4014
   235  0000                     _RCSTA	set	4011
   236  0000                     _RCSTAbits	set	4011
   237  0000                     _SPBRG	set	4015
   238  0000                     _SPBRGH	set	4016
   239  0000                     _T2CON	set	4042
   240  0000                     _T2CONbits	set	4042
   241  0000                     _TMR2	set	4044
   242  0000                     _TRISA	set	3986
   243  0000                     _TRISB	set	3987
   244  0000                     _TRISBbits	set	3987
   245  0000                     _TRISC	set	3988
   246  0000                     _TRISCbits	set	3988
   247  0000                     _TRISD	set	3989
   248  0000                     _TRISE	set	3990
   249  0000                     _TXREG	set	4013
   250  0000                     _TXSTA	set	4012
   251  0000                     _TXSTAbits	set	4012
   252  007F41                     __stringdata:
   253                           	opt stack 0
   254  007F41                     STR_20:
   255  007F41  49                 	db	73	;'I'
   256  007F42  6E                 	db	110	;'n'
   257  007F43  74                 	db	116	;'t'
   258  007F44  65                 	db	101	;'e'
   259  007F45  72                 	db	114	;'r'
   260  007F46  72                 	db	114	;'r'
   261  007F47  75                 	db	117	;'u'
   262  007F48  70                 	db	112	;'p'
   263  007F49  74                 	db	116	;'t'
   264  007F4A  69                 	db	105	;'i'
   265  007F4B  6F                 	db	111	;'o'
   266  007F4C  6E                 	db	110	;'n'
   267  007F4D  20                 	db	32
   268  007F4E  54                 	db	84	;'T'
   269  007F4F  4D                 	db	77	;'M'
   270  007F50  52                 	db	82	;'R'
   271  007F51  32                 	db	50	;'2'
   272  007F52  00                 	db	0
   273  007F53                     STR_11:
   274  007F53  42                 	db	66	;'B'
   275  007F54  54                 	db	84	;'T'
   276  007F55  20                 	db	32
   277  007F56  49                 	db	73	;'I'
   278  007F57  4E                 	db	78	;'N'
   279  007F58  49                 	db	73	;'I'
   280  007F59  43                 	db	67	;'C'
   281  007F5A  49                 	db	73	;'I'
   282  007F5B  41                 	db	65	;'A'
   283  007F5C  4C                 	db	76	;'L'
   284  007F5D  49                 	db	73	;'I'
   285  007F5E  5A                 	db	90	;'Z'
   286  007F5F  41                 	db	65	;'A'
   287  007F60  44                 	db	68	;'D'
   288  007F61  4F                 	db	79	;'O'
   289  007F62  00                 	db	0
   290  007F63                     STR_2:
   291  007F63  41                 	db	65	;'A'
   292  007F64  54                 	db	84	;'T'
   293  007F65  2B                 	db	43
   294  007F66  50                 	db	80	;'P'
   295  007F67  53                 	db	83	;'S'
   296  007F68  57                 	db	87	;'W'
   297  007F69  44                 	db	68	;'D'
   298  007F6A  3D                 	db	61	;'='
   299  007F6B  30                 	db	48	;'0'
   300  007F6C  30                 	db	48	;'0'
   301  007F6D  30                 	db	48	;'0'
   302  007F6E  30                 	db	48	;'0'
   303  007F6F  0D                 	db	13
   304  007F70  0A                 	db	10
   305  007F71  00                 	db	0
   306  007F72  0A                 	db	10
   307  007F73  2B                 	db	43
   308  007F74  42                 	db	66	;'B'
   309  007F75  54                 	db	84	;'T'
   310  007F76  53                 	db	83	;'S'
   311  007F77  54                 	db	84	;'T'
   312  007F78  41                 	db	65	;'A'
   313  007F79  54                 	db	84	;'T'
   314  007F7A  45                 	db	69	;'E'
   315  007F7B  3A                 	db	58	;':'
   316  007F7C  31                 	db	49	;'1'
   317  007F7D  0D                 	db	13
   318  007F7E  0A                 	db	10
   319  007F7F  00                 	db	0
   320  007F80  0A                 	db	10
   321  007F81  2B                 	db	43
   322  007F82  42                 	db	66	;'B'
   323  007F83  54                 	db	84	;'T'
   324  007F84  53                 	db	83	;'S'
   325  007F85  54                 	db	84	;'T'
   326  007F86  41                 	db	65	;'A'
   327  007F87  54                 	db	84	;'T'
   328  007F88  45                 	db	69	;'E'
   329  007F89  3A                 	db	58	;':'
   330  007F8A  33                 	db	51	;'3'
   331  007F8B  0D                 	db	13
   332  007F8C  0A                 	db	10
   333  007F8D  00                 	db	0
   334  007F8E  0A                 	db	10
   335  007F8F  2B                 	db	43
   336  007F90  42                 	db	66	;'B'
   337  007F91  54                 	db	84	;'T'
   338  007F92  53                 	db	83	;'S'
   339  007F93  54                 	db	84	;'T'
   340  007F94  41                 	db	65	;'A'
   341  007F95  54                 	db	84	;'T'
   342  007F96  45                 	db	69	;'E'
   343  007F97  3A                 	db	58	;':'
   344  007F98  34                 	db	52	;'4'
   345  007F99  0D                 	db	13
   346  007F9A  0A                 	db	10
   347  007F9B  00                 	db	0
   348  007F9C  0A                 	db	10
   349  007F9D  43                 	db	67	;'C'
   350  007F9E  4F                 	db	79	;'O'
   351  007F9F  4E                 	db	78	;'N'
   352  007FA0  4E                 	db	78	;'N'
   353  007FA1  45                 	db	69	;'E'
   354  007FA2  43                 	db	67	;'C'
   355  007FA3  54                 	db	84	;'T'
   356  007FA4  3A                 	db	58	;':'
   357  007FA5  4F                 	db	79	;'O'
   358  007FA6  4B                 	db	75	;'K'
   359  007FA7  0D                 	db	13
   360  007FA8  0A                 	db	10
   361  007FA9  00                 	db	0
   362  007FAA                     STR_19:
   363  007FAA  49                 	db	73	;'I'
   364  007FAB  6E                 	db	110	;'n'
   365  007FAC  74                 	db	116	;'t'
   366  007FAD  65                 	db	101	;'e'
   367  007FAE  67                 	db	103	;'g'
   368  007FAF  65                 	db	101	;'e'
   369  007FB0  72                 	db	114	;'r'
   370  007FB1  20                 	db	32
   371  007FB2  3D                 	db	61	;'='
   372  007FB3  20                 	db	32
   373  007FB4  25                 	db	37
   374  007FB5  64                 	db	100	;'d'
   375  007FB6  00                 	db	0
   376  007FB7                     STR_1:
   377  007FB7  41                 	db	65	;'A'
   378  007FB8  54                 	db	84	;'T'
   379  007FB9  2B                 	db	43
   380  007FBA  52                 	db	82	;'R'
   381  007FBB  4F                 	db	79	;'O'
   382  007FBC  4C                 	db	76	;'L'
   383  007FBD  45                 	db	69	;'E'
   384  007FBE  3D                 	db	61	;'='
   385  007FBF  30                 	db	48	;'0'
   386  007FC0  0D                 	db	13
   387  007FC1  0A                 	db	10
   388  007FC2  00                 	db	0
   389  007FC3                     STR_22:
   390  007FC3  43                 	db	67	;'C'
   391  007FC4  4D                 	db	77	;'M'
   392  007FC5  44                 	db	68	;'D'
   393  007FC6  20                 	db	32
   394  007FC7  54                 	db	84	;'T'
   395  007FC8  41                 	db	65	;'A'
   396  007FC9  42                 	db	66	;'B'
   397  007FCA  4C                 	db	76	;'L'
   398  007FCB  45                 	db	69	;'E'
   399  007FCC  54                 	db	84	;'T'
   400  007FCD  00                 	db	0
   401  007FCE  46                 	db	70	;'F'
   402  007FCF  6C                 	db	108	;'l'
   403  007FD0  6F                 	db	111	;'o'
   404  007FD1  61                 	db	97	;'a'
   405  007FD2  74                 	db	116	;'t'
   406  007FD3  20                 	db	32
   407  007FD4  3D                 	db	61	;'='
   408  007FD5  20                 	db	32
   409  007FD6  25                 	db	37
   410  007FD7  66                 	db	102	;'f'
   411  007FD8  00                 	db	0
   412  007FD9                     STR_3:
   413  007FD9  41                 	db	65	;'A'
   414  007FDA  54                 	db	84	;'T'
   415  007FDB  2B                 	db	43
   416  007FDC  49                 	db	73	;'I'
   417  007FDD  4E                 	db	78	;'N'
   418  007FDE  51                 	db	81	;'Q'
   419  007FDF  0D                 	db	13
   420  007FE0  0A                 	db	10
   421  007FE1  00                 	db	0
   422  007FE2                     STR_17:
   423  007FE2  44                 	db	68	;'D'
   424  007FE3  65                 	db	101	;'e'
   425  007FE4  66                 	db	102	;'f'
   426  007FE5  61                 	db	97	;'a'
   427  007FE6  75                 	db	117	;'u'
   428  007FE7  6C                 	db	108	;'l'
   429  007FE8  74                 	db	116	;'t'
   430  007FE9  00                 	db	0
   431  007FEA                     STR_21:
   432  007FEA  49                 	db	73	;'I'
   433  007FEB  6E                 	db	110	;'n'
   434  007FEC  69                 	db	105	;'i'
   435  007FED  63                 	db	99	;'c'
   436  007FEE  69                 	db	105	;'i'
   437  007FEF  6F                 	db	111	;'o'
   438  007FF0  00                 	db	0
   439  007FF1                     STR_10:
   440  007FF1  49                 	db	73	;'I'
   441  007FF2  4E                 	db	78	;'N'
   442  007FF3  49                 	db	73	;'I'
   443  007FF4  43                 	db	67	;'C'
   444  007FF5  49                 	db	73	;'I'
   445  007FF6  4F                 	db	79	;'O'
   446  007FF7  00                 	db	0
   447  007FF8                     STR_12:
   448  007FF8  31                 	db	49	;'1'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_14:
   451  007FFA  33                 	db	51	;'3'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_15:
   454  007FFC  34                 	db	52	;'4'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  00247E                     __pcinit:
   464                           	opt stack 0
   465  00247E                     start_initialization:
   466                           	opt stack 0
   467  00247E                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  00247E  EE01  F000         	lfsr	0,__pbssBANK1
   472  002482  0E5A               	movlw	90
   473  002484                     clear_0:
   474  002484  6AEE               	clrf	postinc0,c
   475  002486  06E8               	decf	wreg,f,c
   476  002488  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (32 bytes)
   479  00248A  EE00  F0BA         	lfsr	0,__pbssBANK0
   480  00248E  0E20               	movlw	32
   481  002490                     clear_1:
   482  002490  6AEE               	clrf	postinc0,c
   483  002492  06E8               	decf	wreg,f,c
   484  002494  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  002496  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  00249A  0E18               	movlw	24
   489  00249C                     clear_2:
   490  00249C  6AEE               	clrf	postinc0,c
   491  00249E  06E8               	decf	wreg,f,c
   492  0024A0  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  0024A2  0E86               	movlw	low __pidataBANK0
   497  0024A4  6EF6               	movwf	tblptrl,c
   498  0024A6  0E28               	movlw	high __pidataBANK0
   499  0024A8  6EF7               	movwf	tblptrh,c
   500  0024AA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  0024AC  6EF8               	movwf	tblptru,c
   502  0024AE  EE00  F0DA         	lfsr	0,__pdataBANK0
   503  0024B2  EE10 F014          	lfsr	1,20
   504  0024B6                     copy_data0:
   505  0024B6  0009               	tblrd		*+
   506  0024B8  CFF5 FFEE          	movff	tablat,postinc0
   507  0024BC  50E5               	movf	postdec1,w,c
   508  0024BE  50E1               	movf	fsr1l,w,c
   509  0024C0  E1FA               	bnz	copy_data0
   510  0024C2                     end_of_initialization:
   511                           	opt stack 0
   512  0024C2                     __end_of__initialization:
   513                           	opt stack 0
   514  0024C2  0100               	movlb	0
   515  0024C4  EF4D  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000BA                     __pbssBANK0:
   611                           	opt stack 0
   612  0000BA                     _DutyCycle:
   613                           	opt stack 0
   614  0000BA                     	ds	2
   615  0000BC                     _Med_lsb:
   616                           	opt stack 0
   617  0000BC                     	ds	2
   618  0000BE                     _Med_msb:
   619                           	opt stack 0
   620  0000BE                     	ds	2
   621  0000C0                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000C0                     	ds	2
   624  0000C2                     _contadorbt:
   625                           	opt stack 0
   626  0000C2                     	ds	2
   627  0000C4                     _i:
   628                           	opt stack 0
   629  0000C4                     	ds	2
   630  0000C6                     _comando:
   631                           	opt stack 0
   632  0000C6                     	ds	20
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           
   642                           	psect	dataBANK0
   643  0000DA                     __pdataBANK0:
   644                           	opt stack 0
   645  0000DA                     BT_Init@F5669:
   646                           	opt stack 0
   647  0000DA                     	ds	18
   648  0000EC                     _countup:
   649                           	opt stack 0
   650  0000EC                     	ds	2
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	bssBANK1
   661  000100                     __pbssBANK1:
   662                           	opt stack 0
   663  000100                     _TramaTablet:
   664                           	opt stack 0
   665  000100                     	ds	20
   666  000114                     _array:
   667                           	opt stack 0
   668  000114                     	ds	20
   669  000128                     _BluetoothDato:
   670                           	opt stack 0
   671  000128                     	ds	50
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           postinc0	equ	0xFEE
   677                           wreg	equ	0xFE8
   678                           postdec1	equ	0xFE5
   679                           fsr1l	equ	0xFE1
   680                           
   681                           	psect	cstackBANK1
   682  00015A                     __pcstackBANK1:
   683                           	opt stack 0
   684  00015A                     putcBluetoothInt@s:
   685                           	opt stack 0
   686  00015A                     Lcd_Write_Integer@s:
   687                           	opt stack 0
   688                           
   689                           ; 20 bytes @ 0x0
   690  00015A                     	ds	20
   691  00016E                     putcBluetoothInt@i:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x14
   695  00016E                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2288:
   750                           	opt stack 0
   751  00006F                     _scale$2289:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2287:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2290:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1239:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1241:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	cstackCOMRAM
   944  000001                     __pcstackCOMRAM:
   945                           	opt stack 0
   946  000001                     ReadUSART@data:
   947                           	opt stack 0
   948  000001                     i2Lcd_Port@a:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x0
   952  000001                     	ds	1
   953  000002                     ??i2_Lcd_Cmd:
   954  000002                     i2Lcd_Write_Char@temp:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x1
   958  000002                     	ds	1
   959  000003                     i2Lcd_Cmd@a:
   960                           	opt stack 0
   961  000003                     i2Lcd_Write_Char@y:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x2
   965  000003                     	ds	1
   966  000004                     i2Lcd_Set_Cursor@b:
   967                           	opt stack 0
   968  000004                     i2Lcd_Write_Char@a:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x3
   972  000004                     	ds	1
   973  000005                     i2Lcd_Set_Cursor@a:
   974                           	opt stack 0
   975  000005                     i2Lcd_Write_String@a:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x4
   979  000005                     	ds	1
   980  000006                     i2Lcd_Set_Cursor@z:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x5
   984  000006                     	ds	1
   985  000007                     ??i2_Lcd_Write_String:
   986  000007                     i2Lcd_Set_Cursor@y:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6
   990  000007                     	ds	1
   991  000008                     i2Lcd_Set_Cursor@temp:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x7
   995  000008                     	ds	1
   996  000009                     i2Lcd_Write_String@i:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x8
  1000  000009                     	ds	2
  1001  00000B                     ??_TMRO_USART:
  1002                           
  1003                           ; 0 bytes @ 0xA
  1004  00000B                     	ds	14
  1005  000019                     ??_OpenPWM2:
  1006  000019                     ?___awmod:
  1007                           	opt stack 0
  1008  000019                     ?___ftpack:
  1009                           	opt stack 0
  1010  000019                     ?___ftneg:
  1011                           	opt stack 0
  1012  000019                     ?__tdiv_to_l_:
  1013                           	opt stack 0
  1014  000019                     ?__div_to_l_:
  1015                           	opt stack 0
  1016  000019                     ?___lldiv:
  1017                           	opt stack 0
  1018  000019                     Lcd_Port@a:
  1019                           	opt stack 0
  1020  000019                     OpenPWM1@period:
  1021                           	opt stack 0
  1022  000019                     WriteUSART@data:
  1023                           	opt stack 0
  1024  000019                     clrBufferUSART@i:
  1025                           	opt stack 0
  1026  000019                     Pause_ms@x:
  1027                           	opt stack 0
  1028  000019                     SetDCPWM1@dutycycle:
  1029                           	opt stack 0
  1030  000019                     SetDCPWM2@dutycycle:
  1031                           	opt stack 0
  1032  000019                     OpenUSART@spbrg:
  1033                           	opt stack 0
  1034  000019                     ___awmod@dividend:
  1035                           	opt stack 0
  1036  000019                     __div_to_l_@f1:
  1037                           	opt stack 0
  1038  000019                     ___ftpack@arg:
  1039                           	opt stack 0
  1040  000019                     __tdiv_to_l_@f1:
  1041                           	opt stack 0
  1042  000019                     ___ftge@ff1:
  1043                           	opt stack 0
  1044  000019                     ___ftneg@f1:
  1045                           	opt stack 0
  1046  000019                     ___lldiv@dividend:
  1047                           	opt stack 0
  1048                           
  1049                           ; 4 bytes @ 0x18
  1050  000019                     	ds	1
  1051  00001A                     ??_Lcd_Cmd:
  1052  00001A                     putcTxU1@character:
  1053                           	opt stack 0
  1054  00001A                     Lcd_Write_Char@temp:
  1055                           	opt stack 0
  1056  00001A                     PWM_init1@period:
  1057                           	opt stack 0
  1058  00001A                     OpenPWM2@period:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x19
  1062  00001A                     	ds	1
  1063  00001B                     ??_OpenUSART:
  1064  00001B                     ??_SetDCPWM1:
  1065  00001B                     ??_SetDCPWM2:
  1066  00001B                     ??_Pause_ms:
  1067  00001B                     Lcd_Cmd@a:
  1068                           	opt stack 0
  1069  00001B                     Lcd_Write_Char@y:
  1070                           	opt stack 0
  1071  00001B                     OpenPWM2@ccp2mx:
  1072                           	opt stack 0
  1073  00001B                     putSTRINGU1@dato:
  1074                           	opt stack 0
  1075  00001B                     ___awmod@divisor:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x1A
  1079  00001B                     	ds	1
  1080  00001C                     ??_Lcd_Init:
  1081  00001C                     Lcd_Set_Cursor@b:
  1082                           	opt stack 0
  1083  00001C                     Lcd_Write_Char@a:
  1084                           	opt stack 0
  1085  00001C                     PWM_init2@period:
  1086                           	opt stack 0
  1087  00001C                     ___ftpack@exp:
  1088                           	opt stack 0
  1089  00001C                     Pause_ms@i:
  1090                           	opt stack 0
  1091  00001C                     __div_to_l_@f2:
  1092                           	opt stack 0
  1093  00001C                     __tdiv_to_l_@f2:
  1094                           	opt stack 0
  1095  00001C                     ___ftge@ff2:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x1B
  1099  00001C                     	ds	1
  1100  00001D                     Lcd_Set_Cursor@a:
  1101                           	opt stack 0
  1102  00001D                     ___awmod@counter:
  1103                           	opt stack 0
  1104  00001D                     ___ftpack@sign:
  1105                           	opt stack 0
  1106  00001D                     putSTRINGU1@total:
  1107                           	opt stack 0
  1108  00001D                     Lcd_Write_String@a:
  1109                           	opt stack 0
  1110  00001D                     SetDCPWM1@DCycle:
  1111                           	opt stack 0
  1112  00001D                     SetDCPWM2@DCycle:
  1113                           	opt stack 0
  1114  00001D                     ___lldiv@divisor:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x1C
  1118  00001D                     	ds	1
  1119  00001E                     ??___ftpack:
  1120  00001E                     Pause_seg@x:
  1121                           	opt stack 0
  1122  00001E                     Lcd_Set_Cursor@z:
  1123                           	opt stack 0
  1124  00001E                     OpenUSART@config:
  1125                           	opt stack 0
  1126  00001E                     ___awmod@sign:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x1D
  1130  00001E                     	ds	1
  1131  00001F                     ??_putSTRINGU1:
  1132  00001F                     ??_Lcd_Write_String:
  1133  00001F                     ??__tdiv_to_l_:
  1134  00001F                     ??__div_to_l_:
  1135  00001F                     ??___ftge:
  1136  00001F                     ?___awdiv:
  1137                           	opt stack 0
  1138  00001F                     Pause_seg@i:
  1139                           	opt stack 0
  1140  00001F                     UART1_Init@bdr:
  1141                           	opt stack 0
  1142  00001F                     Lcd_Set_Cursor@y:
  1143                           	opt stack 0
  1144  00001F                     ___awdiv@dividend:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x1E
  1148  00001F                     	ds	1
  1149  000020                     Lcd_Set_Cursor@temp:
  1150                           	opt stack 0
  1151  000020                     putcBluetoothString@a:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1F
  1155  000020                     	ds	1
  1156  000021                     ?___lbtoft:
  1157                           	opt stack 0
  1158  000021                     ?___lltoft:
  1159                           	opt stack 0
  1160  000021                     putSTRINGU1@last:
  1161                           	opt stack 0
  1162  000021                     Lcd_Write_String@i:
  1163                           	opt stack 0
  1164  000021                     ___awdiv@divisor:
  1165                           	opt stack 0
  1166  000021                     ___lldiv@quotient:
  1167                           	opt stack 0
  1168  000021                     ___lltoft@c:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x20
  1172  000021                     	ds	1
  1173  000022                     ??_putcBluetoothString:
  1174  000022                     putSTRINGU1@cont:
  1175                           	opt stack 0
  1176  000022                     __tdiv_to_l_@quot:
  1177                           	opt stack 0
  1178                           
  1179                           ; 4 bytes @ 0x21
  1180  000022                     	ds	1
  1181  000023                     ___awdiv@counter:
  1182                           	opt stack 0
  1183  000023                     SendBlueToothCommand@command:
  1184                           	opt stack 0
  1185  000023                     __div_to_l_@quot:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x22
  1189  000023                     	ds	1
  1190  000024                     ___awdiv@sign:
  1191                           	opt stack 0
  1192  000024                     ___lbtoft@c:
  1193                           	opt stack 0
  1194  000024                     putcBluetoothString@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x23
  1198  000024                     	ds	1
  1199  000025                     ??___lltoft:
  1200  000025                     ___lldiv@counter:
  1201                           	opt stack 0
  1202  000025                     SendBlueToothCommand@total:
  1203                           	opt stack 0
  1204  000025                     ___awdiv@quotient:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x24
  1208  000025                     	ds	1
  1209  000026                     ?___llmod:
  1210                           	opt stack 0
  1211  000026                     __tdiv_to_l_@cntr:
  1212                           	opt stack 0
  1213  000026                     ___llmod@dividend:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x25
  1217  000026                     	ds	1
  1218  000027                     ??_Inicializa_Driveby:
  1219  000027                     ?___wmul:
  1220                           	opt stack 0
  1221  000027                     __div_to_l_@cntr:
  1222                           	opt stack 0
  1223  000027                     __tdiv_to_l_@exp1:
  1224                           	opt stack 0
  1225  000027                     ___wmul@multiplier:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x26
  1229  000027                     	ds	1
  1230  000028                     __div_to_l_@exp1:
  1231                           	opt stack 0
  1232  000028                     Inicializa_Driveby@i:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x27
  1236  000028                     	ds	1
  1237  000029                     ___lltoft@exp:
  1238                           	opt stack 0
  1239  000029                     ___wmul@multiplicand:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x28
  1243  000029                     	ds	1
  1244  00002A                     ___llmod@divisor:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x29
  1248  00002A                     	ds	1
  1249  00002B                     ___wmul@product:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x2A
  1253  00002B                     	ds	2
  1254  00002D                     ??___ftmul:
  1255                           
  1256                           ; 0 bytes @ 0x2C
  1257  00002D                     	ds	1
  1258  00002E                     ___llmod@counter:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x2D
  1262  00002E                     	ds	2
  1263  000030                     tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           postinc0	equ	0xFEE
  1268                           wreg	equ	0xFE8
  1269                           postdec1	equ	0xFE5
  1270                           fsr1l	equ	0xFE1
  1271                           
  1272                           ; 0 bytes @ 0x2F
  1273 ;;
  1274 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1275 ;;
  1276 ;; *************** function _main *****************
  1277 ;; Defined at:
  1278 ;;		line 121 in file "robot.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2  367[COMRAM] int 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels required when called:   10
  1298 ;; This function calls:
  1299 ;;		_Comando_Tablet
  1300 ;;		_Inicializa_Driveby
  1301 ;;		_Lcd_Clear
  1302 ;;		_Lcd_Init
  1303 ;;		_Lcd_Set_Cursor
  1304 ;;		_Lcd_Write_String
  1305 ;;		_UART1_Init
  1306 ;;		_clrBufferUSART
  1307 ;; This function is called by:
  1308 ;;		Startup code after reset
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text0
  1313  001C9A                     __ptext0:
  1314                           	opt stack 0
  1315  001C9A                     _main:
  1316                           	opt stack 21
  1317                           
  1318                           ;robot.c: 123: INTCON =0X00;
  1319                           
  1320                           ;incstack = 0
  1321  001C9A  0E00               	movlw	0
  1322  001C9C  6EF2               	movwf	intcon,c	;volatile
  1323                           
  1324                           ;robot.c: 124: TRISD = 0x00;
  1325  001C9E  0E00               	movlw	0
  1326  001CA0  6E95               	movwf	3989,c	;volatile
  1327                           
  1328                           ;robot.c: 125: TRISE = 0x00;
  1329  001CA2  0E00               	movlw	0
  1330  001CA4  6E96               	movwf	3990,c	;volatile
  1331                           
  1332                           ;robot.c: 126: PORTEbits.RE1=0;
  1333  001CA6  9284               	bcf	3972,1,c	;volatile
  1334                           
  1335                           ;robot.c: 127: ADCON1bits.PCFG=0b1111;
  1336  001CA8  80C1               	bsf	4033,0,c	;volatile
  1337  001CAA  82C1               	bsf	4033,1,c	;volatile
  1338  001CAC  84C1               	bsf	4033,2,c	;volatile
  1339  001CAE  86C1               	bsf	4033,3,c	;volatile
  1340                           
  1341                           ;robot.c: 128: Lcd_Init();
  1342  001CB0  ECEC  F010         	call	_Lcd_Init	;wreg free
  1343                           
  1344                           ;robot.c: 129: Lcd_Clear();
  1345  001CB4  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1346                           
  1347                           ;robot.c: 130: Lcd_Set_Cursor(1,1);
  1348  001CB8  0E01               	movlw	1
  1349  001CBA  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1350  001CBC  0E01               	movlw	1
  1351  001CBE  ECEF  F011         	call	_Lcd_Set_Cursor
  1352                           
  1353                           ;robot.c: 131: Lcd_Write_String("Inicio");
  1354  001CC2  0E7F               	movlw	high STR_21
  1355  001CC4  6E1E               	movwf	Lcd_Write_String@a+1,c
  1356  001CC6  0EEA               	movlw	low STR_21
  1357  001CC8  6E1D               	movwf	Lcd_Write_String@a,c
  1358  001CCA  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1359                           
  1360                           ;robot.c: 132: Inicializa_Driveby();
  1361  001CCE  ECF7  F00C         	call	_Inicializa_Driveby	;wreg free
  1362  001CD2                     l5449:
  1363                           
  1364                           ;robot.c: 136: {
  1365                           ;robot.c: 139: if (cleanBfer == 1) {
  1366  001CD2  043E               	decf	_cleanBfer,w,c
  1367  001CD4  A4D8               	btfss	status,2,c
  1368  001CD6  D004               	goto	l5455
  1369                           
  1370                           ;robot.c: 140: clrBufferUSART();
  1371  001CD8  EC1A  F013         	call	_clrBufferUSART	;wreg free
  1372                           
  1373                           ;robot.c: 141: cleanBfer = 0;
  1374  001CDC  0E00               	movlw	0
  1375  001CDE  6E3E               	movwf	_cleanBfer,c
  1376  001CE0                     l5455:
  1377                           
  1378                           ;robot.c: 142: }
  1379                           ;robot.c: 143: if (FinComandT == 1) {
  1380  001CE0  0437               	decf	_FinComandT,w,c
  1381  001CE2  A4D8               	btfss	status,2,c
  1382  001CE4  D01A               	goto	l5475
  1383                           
  1384                           ;robot.c: 144: Lcd_Clear();
  1385  001CE6  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1386                           
  1387                           ;robot.c: 145: Lcd_Set_Cursor(2,1);
  1388  001CEA  0E01               	movlw	1
  1389  001CEC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1390  001CEE  0E02               	movlw	2
  1391  001CF0  ECEF  F011         	call	_Lcd_Set_Cursor
  1392                           
  1393                           ;robot.c: 146: Lcd_Write_String("CMD TABLET");
  1394  001CF4  0E7F               	movlw	high STR_22
  1395  001CF6  6E1E               	movwf	Lcd_Write_String@a+1,c
  1396  001CF8  0EC3               	movlw	low STR_22
  1397  001CFA  6E1D               	movwf	Lcd_Write_String@a,c
  1398  001CFC  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1399                           
  1400                           ;robot.c: 147: FinComandT = 0;
  1401  001D00  0E00               	movlw	0
  1402  001D02  6E37               	movwf	_FinComandT,c
  1403                           
  1404                           ;robot.c: 148: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1405  001D04  0E4F               	movlw	79
  1406  001D06  16AB               	andwf	4011,f,c	;volatile
  1407  001D08  9AAC               	bcf	4012,5,c	;volatile
  1408  001D0A  0ECF               	movlw	207
  1409  001D0C  169D               	andwf	3997,f,c	;volatile
  1410                           
  1411                           ;robot.c: 149: Comando_Tablet();
  1412  001D0E  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1413                           
  1414                           ;robot.c: 150: UART1_Init(51);
  1415  001D12  0E33               	movlw	51
  1416  001D14  EC5F  F014         	call	_UART1_Init
  1417                           
  1418                           ;robot.c: 152: }
  1419  001D18  D7DC               	goto	l5449
  1420  001D1A                     l5475:
  1421                           
  1422                           ;robot.c: 153: else if (FinComandB == 1) {
  1423  001D1A  0436               	decf	_FinComandB,w,c
  1424  001D1C  A4D8               	btfss	status,2,c
  1425  001D1E  D7D9               	goto	l5449
  1426                           
  1427                           ;robot.c: 158: FinComandB = 0;
  1428  001D20  0E00               	movlw	0
  1429  001D22  6E36               	movwf	_FinComandB,c
  1430                           
  1431                           ;robot.c: 159: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1432  001D24  0E4F               	movlw	79
  1433  001D26  16AB               	andwf	4011,f,c	;volatile
  1434  001D28  9AAC               	bcf	4012,5,c	;volatile
  1435  001D2A  0ECF               	movlw	207
  1436  001D2C  169D               	andwf	3997,f,c	;volatile
  1437  001D2E  D7D1               	goto	l5449
  1438  001D30                     __end_of_main:
  1439                           	opt stack 0
  1440                           tblptru	equ	0xFF8
  1441                           tblptrh	equ	0xFF7
  1442                           tblptrl	equ	0xFF6
  1443                           tablat	equ	0xFF5
  1444                           intcon	equ	0xFF2
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1l	equ	0xFE1
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _Lcd_Init *****************
  1452 ;; Defined at:
  1453 ;;		line 57 in file "lcd.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1467 ;;      Params:         0       0       0       0       0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1469 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1470 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    6
  1474 ;; This function calls:
  1475 ;;		_Lcd_Cmd
  1476 ;;		_Lcd_Port
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text1
  1483  0021D8                     __ptext1:
  1484                           	opt stack 0
  1485  0021D8                     _Lcd_Init:
  1486                           	opt stack 24
  1487                           
  1488                           ;lcd.c: 58: Lcd_Port(0x00);
  1489                           
  1490                           ;incstack = 0
  1491  0021D8  0E00               	movlw	0
  1492  0021DA  EC87  F013         	call	_Lcd_Port
  1493                           
  1494                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1495  0021DE  0E1A               	movlw	26
  1496  0021E0  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1497  0021E2  0EF8               	movlw	248
  1498  0021E4                     u5637:
  1499  0021E4  2EE8               	decfsz	wreg,f,c
  1500  0021E6  D7FE               	goto	u5637
  1501  0021E8  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1502  0021EA  D7FC               	goto	u5637
  1503  0021EC  D000               	nop2	
  1504                           
  1505                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1506  0021EE  0E03               	movlw	3
  1507  0021F0  ECEB  F013         	call	_Lcd_Cmd
  1508                           
  1509                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1510  0021F4  0E07               	movlw	7
  1511  0021F6  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1512  0021F8  0E7D               	movlw	125
  1513  0021FA                     u5647:
  1514  0021FA  2EE8               	decfsz	wreg,f,c
  1515  0021FC  D7FE               	goto	u5647
  1516  0021FE  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1517  002200  D7FC               	goto	u5647
  1518  002202  F000               	nop	
  1519                           
  1520                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1521  002204  0E03               	movlw	3
  1522  002206  ECEB  F013         	call	_Lcd_Cmd
  1523                           
  1524                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1525  00220A  0E0F               	movlw	15
  1526  00220C  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1527  00220E  0E48               	movlw	72
  1528  002210                     u5657:
  1529  002210  2EE8               	decfsz	wreg,f,c
  1530  002212  D7FE               	goto	u5657
  1531  002214  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1532  002216  D7FC               	goto	u5657
  1533                           
  1534                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1535  002218  0E03               	movlw	3
  1536  00221A  ECEB  F013         	call	_Lcd_Cmd
  1537                           
  1538                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1539  00221E  0E02               	movlw	2
  1540  002220  ECEB  F013         	call	_Lcd_Cmd
  1541                           
  1542                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1543  002224  0E02               	movlw	2
  1544  002226  ECEB  F013         	call	_Lcd_Cmd
  1545                           
  1546                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1547  00222A  0E08               	movlw	8
  1548  00222C  ECEB  F013         	call	_Lcd_Cmd
  1549                           
  1550                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1551  002230  0E00               	movlw	0
  1552  002232  ECEB  F013         	call	_Lcd_Cmd
  1553                           
  1554                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1555  002236  0E0C               	movlw	12
  1556  002238  ECEB  F013         	call	_Lcd_Cmd
  1557                           
  1558                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1559  00223C  0E00               	movlw	0
  1560  00223E  ECEB  F013         	call	_Lcd_Cmd
  1561                           
  1562                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1563  002242  0E06               	movlw	6
  1564  002244  ECEB  F013         	call	_Lcd_Cmd
  1565  002248  0012               	return	
  1566  00224A                     __end_of_Lcd_Init:
  1567                           	opt stack 0
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           intcon	equ	0xFF2
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           status	equ	0xFD8
  1578                           
  1579 ;; *************** function _Inicializa_Driveby *****************
  1580 ;; Defined at:
  1581 ;;		line 61 in file "Funciones_Db.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;		None
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  i               2   39[COMRAM] int 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;		None               void
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1595 ;;      Params:         0       0       0       0       0       0       0       0       0
  1596 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1597 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1598 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1599 ;;Total ram usage:        3 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    9
  1602 ;; This function calls:
  1603 ;;		_BT_Init
  1604 ;;		_Lcd_Clear
  1605 ;;		_Lcd_Set_Cursor
  1606 ;;		_Lcd_Write_String
  1607 ;;		_Pause_seg
  1608 ;;		_clrBufferUSART
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text2
  1615  0019EE                     __ptext2:
  1616                           	opt stack 0
  1617  0019EE                     _Inicializa_Driveby:
  1618                           	opt stack 21
  1619                           
  1620                           ;Funciones_Db.c: 62: TRISA = TRISB = TRISC = TRISD = 0;
  1621                           
  1622                           ;incstack = 0
  1623  0019EE  0E00               	movlw	0
  1624  0019F0  6E95               	movwf	3989,c	;volatile
  1625  0019F2  CF95 FF94          	movff	3989,3988	;volatile
  1626  0019F6  CF94 FF93          	movff	3988,3987	;volatile
  1627  0019FA  CF93 FF92          	movff	3987,3986	;volatile
  1628                           
  1629                           ;Funciones_Db.c: 63: INTCON = 0b11000000;
  1630  0019FE  0EC0               	movlw	192
  1631  001A00  6EF2               	movwf	intcon,c	;volatile
  1632                           
  1633                           ;Funciones_Db.c: 66: int i = 0;
  1634  001A02  0E00               	movlw	0
  1635  001A04  6E29               	movwf	Inicializa_Driveby@i+1,c
  1636  001A06  0E00               	movlw	0
  1637  001A08  6E28               	movwf	Inicializa_Driveby@i,c
  1638                           
  1639                           ;Funciones_Db.c: 67: _delay((unsigned long)((40)*(4000000/4000.0)));
  1640  001A0A  0E34               	movlw	52
  1641  001A0C  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1642  001A0E  0EF2               	movlw	242
  1643  001A10                     u5667:
  1644  001A10  2EE8               	decfsz	wreg,f,c
  1645  001A12  D7FE               	goto	u5667
  1646  001A14  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1647  001A16  D7FC               	goto	u5667
  1648                           
  1649                           ;Funciones_Db.c: 68: OSCCONbits.IRCF = 0b111;
  1650  001A18  88D3               	bsf	4051,4,c	;volatile
  1651  001A1A  8AD3               	bsf	4051,5,c	;volatile
  1652  001A1C  8CD3               	bsf	4051,6,c	;volatile
  1653                           
  1654                           ;Funciones_Db.c: 73: TRISA = 0;
  1655  001A1E  0E00               	movlw	0
  1656  001A20  6E92               	movwf	3986,c	;volatile
  1657                           
  1658                           ;Funciones_Db.c: 74: PORTA = 0;
  1659  001A22  0E00               	movlw	0
  1660  001A24  6E80               	movwf	3968,c	;volatile
  1661                           
  1662                           ;Funciones_Db.c: 75: TRISCbits.TRISC7 = 1;
  1663  001A26  8E94               	bsf	3988,7,c	;volatile
  1664                           
  1665                           ;Funciones_Db.c: 76: TRISCbits.TRISC6 = 0;
  1666  001A28  9C94               	bcf	3988,6,c	;volatile
  1667                           
  1668                           ;Funciones_Db.c: 77: for (i = 1; i <= 50; i++)
  1669  001A2A  0E00               	movlw	0
  1670  001A2C  6E29               	movwf	Inicializa_Driveby@i+1,c
  1671  001A2E  0E01               	movlw	1
  1672  001A30  6E28               	movwf	Inicializa_Driveby@i,c
  1673  001A32  5029               	movf	Inicializa_Driveby@i+1,w,c
  1674  001A34  0A80               	xorlw	128
  1675  001A36  0F80               	addlw	-128
  1676  001A38  0E33               	movlw	51
  1677  001A3A  B4D8               	btfsc	status,2,c
  1678  001A3C  5C28               	subwf	Inicializa_Driveby@i,w,c
  1679  001A3E  B0D8               	btfsc	status,0,c
  1680  001A40  D00B               	goto	l5225
  1681                           
  1682                           ;Funciones_Db.c: 78: _delay((unsigned long)((20)*(4000000/4000.0)));
  1683  001A42  0E1A               	movlw	26
  1684  001A44  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1685  001A46  0EF8               	movlw	248
  1686  001A48                     u5677:
  1687  001A48  2EE8               	decfsz	wreg,f,c
  1688  001A4A  D7FE               	goto	u5677
  1689  001A4C  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1690  001A4E  D7FC               	goto	u5677
  1691  001A50  D000               	nop2	
  1692  001A52  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1693  001A54  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1694  001A56  D7ED               	goto	L1
  1695  001A58                     l5225:
  1696                           
  1697                           ;Funciones_Db.c: 79: PORTE = 0;
  1698  001A58  0E00               	movlw	0
  1699  001A5A  6E84               	movwf	3972,c	;volatile
  1700                           
  1701                           ;Funciones_Db.c: 80: PORTB = 0;
  1702  001A5C  0E00               	movlw	0
  1703  001A5E  6E81               	movwf	3969,c	;volatile
  1704                           
  1705                           ;Funciones_Db.c: 81: Lcd_Clear();
  1706  001A60  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1707                           
  1708                           ;Funciones_Db.c: 82: Lcd_Set_Cursor(2, 1);
  1709  001A64  0E01               	movlw	1
  1710  001A66  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1711  001A68  0E02               	movlw	2
  1712  001A6A  ECEF  F011         	call	_Lcd_Set_Cursor
  1713                           
  1714                           ;Funciones_Db.c: 83: Lcd_Write_String("INICIO");
  1715  001A6E  0E7F               	movlw	high STR_10
  1716  001A70  6E1E               	movwf	Lcd_Write_String@a+1,c
  1717  001A72  0EF1               	movlw	low STR_10
  1718  001A74  6E1D               	movwf	Lcd_Write_String@a,c
  1719  001A76  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1720                           
  1721                           ;Funciones_Db.c: 85: BT_Init();
  1722  001A7A  ECA8  F00D         	call	_BT_Init	;wreg free
  1723                           
  1724                           ;Funciones_Db.c: 86: Lcd_Clear();
  1725  001A7E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  1726                           
  1727                           ;Funciones_Db.c: 87: Lcd_Set_Cursor(1, 1);
  1728  001A82  0E01               	movlw	1
  1729  001A84  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1730  001A86  0E01               	movlw	1
  1731  001A88  ECEF  F011         	call	_Lcd_Set_Cursor
  1732                           
  1733                           ;Funciones_Db.c: 88: Lcd_Write_String("BT INICIALIZADO");
  1734  001A8C  0E7F               	movlw	high STR_11
  1735  001A8E  6E1E               	movwf	Lcd_Write_String@a+1,c
  1736  001A90  0E53               	movlw	low STR_11
  1737  001A92  6E1D               	movwf	Lcd_Write_String@a,c
  1738  001A94  EC72  F010         	call	_Lcd_Write_String	;wreg free
  1739                           
  1740                           ;Funciones_Db.c: 90: Pause_seg(7);
  1741  001A98  0E07               	movlw	7
  1742  001A9A  EC64  F012         	call	_Pause_seg
  1743                           
  1744                           ;Funciones_Db.c: 91: cad = 0;
  1745  001A9E  0E00               	movlw	0
  1746  001AA0  6E3D               	movwf	_cad,c
  1747                           
  1748                           ;Funciones_Db.c: 92: clrBufferUSART();
  1749  001AA2  EC1A  F013         	call	_clrBufferUSART	;wreg free
  1750                           
  1751                           ;Funciones_Db.c: 93: return;
  1752  001AA6  0012               	return	
  1753  001AA8                     __end_of_Inicializa_Driveby:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           intcon	equ	0xFF2
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _BT_Init *****************
  1767 ;; Defined at:
  1768 ;;		line 16 in file "Bluetooth.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1773 ;; Return value:  Size  Location     Type
  1774 ;;		None               void
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1782 ;;      Params:         0       0       0       0       0       0       0       0       0
  1783 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1785 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1786 ;;Total ram usage:       18 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    8
  1789 ;; This function calls:
  1790 ;;		_Pause_seg
  1791 ;;		_SendBlueToothCommand
  1792 ;;		_UART1_Init
  1793 ;; This function is called by:
  1794 ;;		_Inicializa_Driveby
  1795 ;;		_EstadoBluetooth
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text3
  1800  001B50                     __ptext3:
  1801                           	opt stack 0
  1802  001B50                     _BT_Init:
  1803                           	opt stack 21
  1804                           
  1805                           ;Bluetooth.c: 18: UART1_Init(51);
  1806                           
  1807                           ;incstack = 0
  1808  001B50  0E33               	movlw	51
  1809  001B52  EC5F  F014         	call	_UART1_Init
  1810                           
  1811                           ;Bluetooth.c: 21: Pause_seg(1);
  1812  001B56  0E01               	movlw	1
  1813  001B58  EC64  F012         	call	_Pause_seg
  1814                           
  1815                           ;Bluetooth.c: 22: char nameBT[18] = {
  1816                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1817                           ;Bluetooth.c: 24: };
  1818  001B5C  EE20  F0DA         	lfsr	2,BT_Init@F5669
  1819  001B60  EE10  F060         	lfsr	1,BT_Init@nameBT
  1820  001B64  0E12               	movlw	18
  1821  001B66                     u5381:
  1822  001B66  CFDE FFE6          	movff	postinc2,postinc1
  1823  001B6A  2EE8               	decfsz	wreg,f,c
  1824  001B6C  D7FC               	goto	u5381
  1825                           
  1826                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1827  001B6E  0E7F               	movlw	high STR_1
  1828  001B70  6E24               	movwf	SendBlueToothCommand@command+1,c
  1829  001B72  0EB7               	movlw	low STR_1
  1830  001B74  6E23               	movwf	SendBlueToothCommand@command,c
  1831  001B76  0E00               	movlw	0
  1832  001B78  6E26               	movwf	SendBlueToothCommand@total+1,c
  1833  001B7A  0E0B               	movlw	11
  1834  001B7C  6E25               	movwf	SendBlueToothCommand@total,c
  1835  001B7E  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1836                           
  1837                           ;Bluetooth.c: 29: Pause_seg(1);
  1838  001B82  0E01               	movlw	1
  1839  001B84  EC64  F012         	call	_Pause_seg
  1840                           
  1841                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1842  001B88  0100               	movlb	0	; () banked
  1843  001B8A  0E00               	movlw	high BT_Init@nameBT
  1844  001B8C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1845  001B8E  0100               	movlb	0	; () banked
  1846  001B90  0E60               	movlw	low BT_Init@nameBT
  1847  001B92  6E23               	movwf	SendBlueToothCommand@command,c
  1848  001B94  0E00               	movlw	0
  1849  001B96  6E26               	movwf	SendBlueToothCommand@total+1,c
  1850  001B98  0E12               	movlw	18
  1851  001B9A  6E25               	movwf	SendBlueToothCommand@total,c
  1852  001B9C  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1853                           
  1854                           ;Bluetooth.c: 33: Pause_seg(2);
  1855  001BA0  0E02               	movlw	2
  1856  001BA2  EC64  F012         	call	_Pause_seg
  1857                           
  1858                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1859  001BA6  0E7F               	movlw	high STR_2
  1860  001BA8  6E24               	movwf	SendBlueToothCommand@command+1,c
  1861  001BAA  0E63               	movlw	low STR_2
  1862  001BAC  6E23               	movwf	SendBlueToothCommand@command,c
  1863  001BAE  0E00               	movlw	0
  1864  001BB0  6E26               	movwf	SendBlueToothCommand@total+1,c
  1865  001BB2  0E0E               	movlw	14
  1866  001BB4  6E25               	movwf	SendBlueToothCommand@total,c
  1867  001BB6  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1868                           
  1869                           ;Bluetooth.c: 36: Pause_seg(2);
  1870  001BBA  0E02               	movlw	2
  1871  001BBC  EC64  F012         	call	_Pause_seg
  1872                           
  1873                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1874  001BC0  0E7F               	movlw	high STR_3
  1875  001BC2  6E24               	movwf	SendBlueToothCommand@command+1,c
  1876  001BC4  0ED9               	movlw	low STR_3
  1877  001BC6  6E23               	movwf	SendBlueToothCommand@command,c
  1878  001BC8  0E00               	movlw	0
  1879  001BCA  6E26               	movwf	SendBlueToothCommand@total+1,c
  1880  001BCC  0E08               	movlw	8
  1881  001BCE  6E25               	movwf	SendBlueToothCommand@total,c
  1882  001BD0  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1883                           
  1884                           ;Bluetooth.c: 41: Pause_seg(2);
  1885  001BD4  0E02               	movlw	2
  1886  001BD6  EC64  F012         	call	_Pause_seg
  1887                           
  1888                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1889  001BDA  0E7F               	movlw	high STR_3
  1890  001BDC  6E24               	movwf	SendBlueToothCommand@command+1,c
  1891  001BDE  0ED9               	movlw	low STR_3
  1892  001BE0  6E23               	movwf	SendBlueToothCommand@command,c
  1893  001BE2  0E00               	movlw	0
  1894  001BE4  6E26               	movwf	SendBlueToothCommand@total+1,c
  1895  001BE6  0E08               	movlw	8
  1896  001BE8  6E25               	movwf	SendBlueToothCommand@total,c
  1897  001BEA  EC38  F014         	call	_SendBlueToothCommand	;wreg free
  1898                           
  1899                           ;Bluetooth.c: 44: Pause_seg(2);
  1900  001BEE  0E02               	movlw	2
  1901  001BF0  EC64  F012         	call	_Pause_seg
  1902                           
  1903                           ;Bluetooth.c: 45: return;
  1904  001BF4  0012               	return	
  1905  001BF6                     __end_of_BT_Init:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           intcon	equ	0xFF2
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postinc1	equ	0xFE6
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           postinc2	equ	0xFDE
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _SendBlueToothCommand *****************
  1921 ;; Defined at:
  1922 ;;		line 48 in file "Bluetooth.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1925 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1926 ;;		 -> BT_Init@nameBT(18), 
  1927 ;;  total           2   36[COMRAM] unsigned int 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;		None               void
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1939 ;;      Params:         4       0       0       0       0       0       0       0       0
  1940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    7
  1946 ;; This function calls:
  1947 ;;		_putSTRINGU1
  1948 ;; This function is called by:
  1949 ;;		_BT_Init
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text4
  1954  002870                     __ptext4:
  1955                           	opt stack 0
  1956  002870                     _SendBlueToothCommand:
  1957                           	opt stack 21
  1958                           
  1959                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1960                           
  1961                           ;incstack = 0
  1962  002870  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1963  002874  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1964  002878  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1965  00287C  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1966  002880  EC98  F00E         	call	_putSTRINGU1	;wreg free
  1967                           
  1968                           ;Bluetooth.c: 50: return;
  1969  002884  0012               	return	
  1970  002886                     __end_of_SendBlueToothCommand:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postinc1	equ	0xFE6
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           postinc2	equ	0xFDE
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _putSTRINGU1 *****************
  1986 ;; Defined at:
  1987 ;;		line 18 in file "UART1.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  1990 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1991 ;;		 -> BT_Init@nameBT(18), 
  1992 ;;  total           2   28[COMRAM] unsigned int 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  cont            1   33[COMRAM] unsigned char 
  1995 ;;  last            1   32[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;		None               void
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2005 ;;      Params:         4       0       0       0       0       0       0       0       0
  2006 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2007 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2008 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2009 ;;Total ram usage:        8 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    6
  2012 ;; This function calls:
  2013 ;;		_putcTxU1
  2014 ;; This function is called by:
  2015 ;;		_SendBlueToothCommand
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text5
  2020  001D30                     __ptext5:
  2021                           	opt stack 0
  2022  001D30                     _putSTRINGU1:
  2023                           	opt stack 21
  2024                           
  2025                           ;UART1.c: 19: unsigned char cont,last;
  2026                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2027                           
  2028                           ;incstack = 0
  2029  001D30  0E00               	movlw	0
  2030  001D32  6E22               	movwf	putSTRINGU1@cont,c
  2031  001D34  0E00               	movlw	0
  2032  001D36  6E21               	movwf	putSTRINGU1@last,c
  2033  001D38  D01F               	goto	l4427
  2034  001D3A                     l4421:
  2035                           
  2036                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2037  001D3A  5022               	movf	putSTRINGU1@cont,w,c
  2038  001D3C  0D01               	mullw	1
  2039  001D3E  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2040  001D42  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2041  001D46  50F3               	movf	prodl,w,c
  2042  001D48  261F               	addwf	??_putSTRINGU1,f,c
  2043  001D4A  50F4               	movf	prodh,w,c
  2044  001D4C  2220               	addwfc	??_putSTRINGU1+1,f,c
  2045  001D4E  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2046  001D52  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2047  001D56  6AF8               	clrf	tblptru,c
  2048  001D58  0E07               	movlw	(high __ramtop+-1)
  2049  001D5A  64F7               	cpfsgt	tblptrh,c
  2050  001D5C  D003               	bra	u4397
  2051  001D5E  0008               	tblrd		*
  2052  001D60  50F5               	movf	tablat,w,c
  2053  001D62  D005               	bra	u4390
  2054  001D64                     u4397:
  2055  001D64  CFF6 FFE9          	movff	tblptrl,fsr0l
  2056  001D68  CFF7 FFEA          	movff	tblptrh,fsr0h
  2057  001D6C  50EF               	movf	indf0,w,c
  2058  001D6E                     u4390:
  2059  001D6E  0900               	iorlw	0
  2060  001D70  A4D8               	btfss	status,2,c
  2061  001D72  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2062  001D76  2A22               	incf	putSTRINGU1@cont,f,c
  2063  001D78                     l4427:
  2064  001D78  5022               	movf	putSTRINGU1@cont,w,c
  2065  001D7A  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2066  001D7C  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2067  001D7E  501D               	movf	putSTRINGU1@total,w,c
  2068  001D80  5C1F               	subwf	??_putSTRINGU1,w,c
  2069  001D82  501E               	movf	putSTRINGU1@total+1,w,c
  2070  001D84  5820               	subwfb	??_putSTRINGU1+1,w,c
  2071  001D86  A0D8               	btfss	status,0,c
  2072  001D88  D7D8               	goto	l4421
  2073                           
  2074                           ;UART1.c: 23: }
  2075                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2076  001D8A  0E00               	movlw	0
  2077  001D8C  6E22               	movwf	putSTRINGU1@cont,c
  2078  001D8E  D015               	goto	l4437
  2079  001D90                     l4431:
  2080                           
  2081                           ;UART1.c: 26: putcTxU1(*dato++);
  2082  001D90  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2083  001D94  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2084  001D98  6AF8               	clrf	tblptru,c
  2085  001D9A  0E07               	movlw	(high __ramtop+-1)
  2086  001D9C  64F7               	cpfsgt	tblptrh,c
  2087  001D9E  D003               	bra	u4427
  2088  001DA0  0008               	tblrd		*
  2089  001DA2  50F5               	movf	tablat,w,c
  2090  001DA4  D005               	bra	u4420
  2091  001DA6                     u4427:
  2092  001DA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2093  001DAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2094  001DAE  50EF               	movf	indf0,w,c
  2095  001DB0                     u4420:
  2096  001DB0  EC67  F014         	call	_putcTxU1
  2097  001DB4  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2098  001DB6  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2099  001DB8  2A22               	incf	putSTRINGU1@cont,f,c
  2100  001DBA                     l4437:
  2101  001DBA  5022               	movf	putSTRINGU1@cont,w,c
  2102  001DBC  5C21               	subwf	putSTRINGU1@last,w,c
  2103  001DBE  A0D8               	btfss	status,0,c
  2104  001DC0  0012               	return	
  2105  001DC2  D7E6               	goto	l4431
  2106  001DC4                     __end_of_putSTRINGU1:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           intcon	equ	0xFF2
  2115                           indf0	equ	0xFEF
  2116                           postinc0	equ	0xFEE
  2117                           fsr0h	equ	0xFEA
  2118                           fsr0l	equ	0xFE9
  2119                           wreg	equ	0xFE8
  2120                           postinc1	equ	0xFE6
  2121                           postdec1	equ	0xFE5
  2122                           fsr1l	equ	0xFE1
  2123                           postinc2	equ	0xFDE
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _putcTxU1 *****************
  2127 ;; Defined at:
  2128 ;;		line 12 in file "UART1.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  character       1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  character       1   25[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2145 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:        1 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    5
  2149 ;; This function calls:
  2150 ;;		_WriteUSART
  2151 ;; This function is called by:
  2152 ;;		_putSTRINGU1
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text6
  2157  0028CE                     __ptext6:
  2158                           	opt stack 0
  2159  0028CE                     _putcTxU1:
  2160                           	opt stack 21
  2161                           
  2162                           ;incstack = 0
  2163                           ;putcTxU1@character stored from wreg
  2164  0028CE  6E1A               	movwf	putcTxU1@character,c
  2165                           
  2166                           ;UART1.c: 14: WriteUSART(character);
  2167  0028D0  501A               	movf	putcTxU1@character,w,c
  2168  0028D2  EC4D  F014         	call	_WriteUSART
  2169  0028D6                     l215:
  2170  0028D6  B2AC               	btfsc	4012,1,c	;volatile
  2171  0028D8  0012               	return	
  2172  0028DA  D7FD               	goto	l215
  2173  0028DC                     __end_of_putcTxU1:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           indf0	equ	0xFEF
  2183                           postinc0	equ	0xFEE
  2184                           fsr0h	equ	0xFEA
  2185                           fsr0l	equ	0xFE9
  2186                           wreg	equ	0xFE8
  2187                           postinc1	equ	0xFE6
  2188                           postdec1	equ	0xFE5
  2189                           fsr1l	equ	0xFE1
  2190                           postinc2	equ	0xFDE
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _Pause_seg *****************
  2194 ;; Defined at:
  2195 ;;		line 18 in file "Retardos.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  x               1    wreg     unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  x               1   29[COMRAM] unsigned char 
  2200 ;;  i               1   30[COMRAM] unsigned char 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;		None               void
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2210 ;;      Params:         0       0       0       0       0       0       0       0       0
  2211 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2213 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2214 ;;Total ram usage:        2 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    5
  2217 ;; This function calls:
  2218 ;;		_Pause_ms
  2219 ;; This function is called by:
  2220 ;;		_BT_Init
  2221 ;;		_Inicializa_Driveby
  2222 ;;		_EstadoBluetooth
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text7
  2227  0024C8                     __ptext7:
  2228                           	opt stack 0
  2229  0024C8                     _Pause_seg:
  2230                           	opt stack 24
  2231                           
  2232                           ;incstack = 0
  2233                           ;Pause_seg@x stored from wreg
  2234  0024C8  6E1E               	movwf	Pause_seg@x,c
  2235                           
  2236                           ;Retardos.c: 19: unsigned char i=0;
  2237  0024CA  0E00               	movlw	0
  2238  0024CC  6E1F               	movwf	Pause_seg@i,c
  2239                           
  2240                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2241  0024CE  0E00               	movlw	0
  2242  0024D0  6E1F               	movwf	Pause_seg@i,c
  2243  0024D2  D019               	goto	l4817
  2244  0024D4                     l4813:
  2245                           
  2246                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2247  0024D4  0E00               	movlw	0
  2248  0024D6  6E1A               	movwf	Pause_ms@x+1,c
  2249  0024D8  0EFA               	movlw	250
  2250  0024DA  6E19               	movwf	Pause_ms@x,c
  2251  0024DC  EC6E  F013         	call	_Pause_ms	;wreg free
  2252  0024E0  0E00               	movlw	0
  2253  0024E2  6E1A               	movwf	Pause_ms@x+1,c
  2254  0024E4  0EFA               	movlw	250
  2255  0024E6  6E19               	movwf	Pause_ms@x,c
  2256  0024E8  EC6E  F013         	call	_Pause_ms	;wreg free
  2257                           
  2258                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2259  0024EC  0E00               	movlw	0
  2260  0024EE  6E1A               	movwf	Pause_ms@x+1,c
  2261  0024F0  0EFA               	movlw	250
  2262  0024F2  6E19               	movwf	Pause_ms@x,c
  2263  0024F4  EC6E  F013         	call	_Pause_ms	;wreg free
  2264  0024F8  0E00               	movlw	0
  2265  0024FA  6E1A               	movwf	Pause_ms@x+1,c
  2266  0024FC  0EFA               	movlw	250
  2267  0024FE  6E19               	movwf	Pause_ms@x,c
  2268  002500  EC6E  F013         	call	_Pause_ms	;wreg free
  2269  002504  2A1F               	incf	Pause_seg@i,f,c
  2270  002506                     l4817:
  2271  002506  501F               	movf	Pause_seg@i,w,c
  2272  002508  5C1E               	subwf	Pause_seg@x,w,c
  2273  00250A  A0D8               	btfss	status,0,c
  2274  00250C  0012               	return	
  2275  00250E  D7E2               	goto	l4813
  2276  002510                     __end_of_Pause_seg:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           indf0	equ	0xFEF
  2286                           postinc0	equ	0xFEE
  2287                           fsr0h	equ	0xFEA
  2288                           fsr0l	equ	0xFE9
  2289                           wreg	equ	0xFE8
  2290                           postinc1	equ	0xFE6
  2291                           postdec1	equ	0xFE5
  2292                           fsr1l	equ	0xFE1
  2293                           postinc2	equ	0xFDE
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _Pause_ms *****************
  2297 ;; Defined at:
  2298 ;;		line 11 in file "Retardos.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  x               2   24[COMRAM] unsigned int 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  i               2   27[COMRAM] unsigned int 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;		None               void
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2312 ;;      Params:         2       0       0       0       0       0       0       0       0
  2313 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2314 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2315 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2316 ;;Total ram usage:        5 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    4
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_Pause_seg
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text8
  2327  0026DC                     __ptext8:
  2328                           	opt stack 0
  2329  0026DC                     _Pause_ms:
  2330                           	opt stack 24
  2331                           
  2332                           ;Retardos.c: 12: unsigned int i=0;
  2333                           
  2334                           ;incstack = 0
  2335  0026DC  0E00               	movlw	0
  2336  0026DE  6E1D               	movwf	Pause_ms@i+1,c
  2337  0026E0  0E00               	movlw	0
  2338  0026E2  6E1C               	movwf	Pause_ms@i,c
  2339                           
  2340                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2341  0026E4  0E00               	movlw	0
  2342  0026E6  6E1D               	movwf	Pause_ms@i+1,c
  2343  0026E8  0E00               	movlw	0
  2344  0026EA  6E1C               	movwf	Pause_ms@i,c
  2345  0026EC  D009               	goto	l194
  2346  0026EE                     l4441:
  2347                           
  2348                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2349  0026EE  0E03               	movlw	3
  2350  0026F0  6E1B               	movwf	??_Pause_ms& (0+255),c
  2351  0026F2  0E98               	movlw	152
  2352  0026F4                     u5687:
  2353  0026F4  2EE8               	decfsz	wreg,f,c
  2354  0026F6  D7FE               	goto	u5687
  2355  0026F8  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2356  0026FA  D7FC               	goto	u5687
  2357  0026FC  4A1C               	infsnz	Pause_ms@i,f,c
  2358  0026FE  2A1D               	incf	Pause_ms@i+1,f,c
  2359  002700                     l194:
  2360  002700  501C               	movf	Pause_ms@i,w,c
  2361  002702  5C19               	subwf	Pause_ms@x,w,c
  2362  002704  501D               	movf	Pause_ms@i+1,w,c
  2363  002706  581A               	subwfb	Pause_ms@x+1,w,c
  2364  002708  A0D8               	btfss	status,0,c
  2365  00270A  0012               	return	
  2366  00270C  D7F0               	goto	l4441
  2367  00270E                     __end_of_Pause_ms:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           indf0	equ	0xFEF
  2377                           postinc0	equ	0xFEE
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           postinc1	equ	0xFE6
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           postinc2	equ	0xFDE
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _Comando_Tablet *****************
  2388 ;; Defined at:
  2389 ;;		line 98 in file "Funciones_Db.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2406 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    9
  2410 ;; This function calls:
  2411 ;;		_Lcd_Clear
  2412 ;;		_Lcd_Set_Cursor
  2413 ;;		_Lcd_Write_Integer
  2414 ;;		_Lcd_Write_String
  2415 ;;		_PWM_DutyCycle1
  2416 ;;		_PWM_DutyCycle2
  2417 ;;		_PWM_init1
  2418 ;;		_PWM_init2
  2419 ;;		_clrBufferUSART
  2420 ;;		_putcBluetoothInt
  2421 ;;		_putcBluetoothString
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text9
  2428  001580                     __ptext9:
  2429                           	opt stack 0
  2430  001580                     _Comando_Tablet:
  2431                           	opt stack 21
  2432                           
  2433                           ;Funciones_Db.c: 101: switch (BluetoothDato[1]) {
  2434                           
  2435                           ;incstack = 0
  2436  001580  D08C               	goto	l5311
  2437  001582                     l5251:
  2438                           
  2439                           ;Funciones_Db.c: 103: Lcd_Clear();
  2440  001582  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2441                           
  2442                           ;Funciones_Db.c: 104: Lcd_Set_Cursor(1, 1);
  2443  001586  0E01               	movlw	1
  2444  001588  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2445  00158A  0E01               	movlw	1
  2446  00158C  ECEF  F011         	call	_Lcd_Set_Cursor
  2447                           
  2448                           ;Funciones_Db.c: 105: Lcd_Write_String("1");
  2449  001590  0E7F               	movlw	high STR_12
  2450  001592  6E1E               	movwf	Lcd_Write_String@a+1,c
  2451  001594  0EF8               	movlw	low STR_12
  2452  001596  6E1D               	movwf	Lcd_Write_String@a,c
  2453  001598  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2454                           
  2455                           ;Funciones_Db.c: 106: break;
  2456  00159C  D090               	goto	l5313
  2457  00159E                     l5257:
  2458                           
  2459                           ;Funciones_Db.c: 108: Lcd_Clear();
  2460  00159E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2461                           
  2462                           ;Funciones_Db.c: 109: Lcd_Set_Cursor(1, 1);
  2463  0015A2  0E01               	movlw	1
  2464  0015A4  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2465  0015A6  0E01               	movlw	1
  2466  0015A8  ECEF  F011         	call	_Lcd_Set_Cursor
  2467                           
  2468                           ;Funciones_Db.c: 110: Lcd_Write_String("2");
  2469  0015AC  0E7F               	movlw	high (STR_20+16)
  2470  0015AE  6E1E               	movwf	Lcd_Write_String@a+1,c
  2471  0015B0  0E51               	movlw	low (STR_20+16)
  2472  0015B2  6E1D               	movwf	Lcd_Write_String@a,c
  2473  0015B4  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2474                           
  2475                           ;Funciones_Db.c: 111: break;
  2476  0015B8  D082               	goto	l5313
  2477  0015BA                     l5263:
  2478                           
  2479                           ;Funciones_Db.c: 114: Lcd_Clear();
  2480  0015BA  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2481                           
  2482                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2483  0015BE  0E01               	movlw	1
  2484  0015C0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2485  0015C2  0E01               	movlw	1
  2486  0015C4  ECEF  F011         	call	_Lcd_Set_Cursor
  2487                           
  2488                           ;Funciones_Db.c: 117: Lcd_Write_String("3");
  2489  0015C8  0E7F               	movlw	high STR_14
  2490  0015CA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2491  0015CC  0EFA               	movlw	low STR_14
  2492  0015CE  6E1D               	movwf	Lcd_Write_String@a,c
  2493  0015D0  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2494                           
  2495                           ;Funciones_Db.c: 118: break;
  2496  0015D4  D074               	goto	l5313
  2497  0015D6                     l5269:
  2498                           
  2499                           ;Funciones_Db.c: 120: Lcd_Clear();
  2500  0015D6  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2501                           
  2502                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2503  0015DA  0E01               	movlw	1
  2504  0015DC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2505  0015DE  0E01               	movlw	1
  2506  0015E0  ECEF  F011         	call	_Lcd_Set_Cursor
  2507                           
  2508                           ;Funciones_Db.c: 122: Lcd_Write_String("4");
  2509  0015E4  0E7F               	movlw	high STR_15
  2510  0015E6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2511  0015E8  0EFC               	movlw	low STR_15
  2512  0015EA  6E1D               	movwf	Lcd_Write_String@a,c
  2513  0015EC  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2514                           
  2515                           ;Funciones_Db.c: 123: putcBluetoothInt(contadorbt);
  2516  0015F0  C0C2  F0B8         	movff	_contadorbt,putcBluetoothInt@a
  2517  0015F4  C0C3  F0B9         	movff	_contadorbt+1,putcBluetoothInt@a+1
  2518  0015F8  EC72  F00F         	call	_putcBluetoothInt	;wreg free
  2519                           
  2520                           ;Funciones_Db.c: 124: putcBluetoothString("\n");
  2521  0015FC  0E7F               	movlw	high (STR_2+13)
  2522  0015FE  6E21               	movwf	putcBluetoothString@a+1,c
  2523  001600  0E70               	movlw	low (STR_2+13)
  2524  001602  6E20               	movwf	putcBluetoothString@a,c
  2525  001604  EC25  F011         	call	_putcBluetoothString	;wreg free
  2526                           
  2527                           ;Funciones_Db.c: 126: contadorbt++;
  2528  001608  0100               	movlb	0	; () banked
  2529  00160A  4BC2               	infsnz	_contadorbt& (0+255),f,b
  2530  00160C  2BC3               	incf	(_contadorbt+1)& (0+255),f,b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;Funciones_Db.c: 127: if(contadorbt == 10)
  2534  00160E  0100               	movlb	0	; () banked
  2535  001610  51C2               	movf	_contadorbt& (0+255),w,b
  2536  001612  0A0A               	xorlw	10
  2537  001614  11C3               	iorwf	(_contadorbt+1)& (0+255),w,b
  2538  001616  A4D8               	btfss	status,2,c
  2539  001618  D052               	goto	l5313
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;Funciones_Db.c: 128: contadorbt = 0;
  2543  00161A  0E00               	movlw	0
  2544  00161C  0100               	movlb	0	; () banked
  2545  00161E  6FC3               	movwf	(_contadorbt+1)& (0+255),b
  2546  001620  0E00               	movlw	0
  2547  001622  0100               	movlb	0	; () banked
  2548  001624  6FC2               	movwf	_contadorbt& (0+255),b
  2549  001626  D04B               	goto	l5313
  2550  001628                     l5285:
  2551                           
  2552                           ;Funciones_Db.c: 131: Lcd_Clear();
  2553  001628  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2554                           
  2555                           ;Funciones_Db.c: 132: Lcd_Set_Cursor(1, 1);
  2556  00162C  0E01               	movlw	1
  2557  00162E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2558  001630  0E01               	movlw	1
  2559  001632  ECEF  F011         	call	_Lcd_Set_Cursor
  2560                           
  2561                           ;Funciones_Db.c: 133: Lcd_Write_Integer(BluetoothDato[3]);
  2562  001636  0101               	movlb	1	; () banked
  2563  001638  0100               	movlb	0	; () banked
  2564  00163A  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2565  00163E  0100               	movlb	0	; () banked
  2566  001640  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2567  001642  ECFD  F012         	call	_Lcd_Write_Integer	;wreg free
  2568                           
  2569                           ;Funciones_Db.c: 134: Lcd_Set_Cursor(2, 1);
  2570  001646  0E01               	movlw	1
  2571  001648  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2572  00164A  0E02               	movlw	2
  2573  00164C  ECEF  F011         	call	_Lcd_Set_Cursor
  2574                           
  2575                           ;Funciones_Db.c: 135: Lcd_Write_Integer(BluetoothDato[4]);
  2576  001650  0101               	movlb	1	; () banked
  2577  001652  0100               	movlb	0	; () banked
  2578  001654  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2579  001658  0100               	movlb	0	; () banked
  2580  00165A  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2581  00165C  ECFD  F012         	call	_Lcd_Write_Integer	;wreg free
  2582                           
  2583                           ;Funciones_Db.c: 136: PWM_init1(0xff);
  2584  001660  0EFF               	movlw	255
  2585  001662  EC1A  F014         	call	_PWM_init1
  2586                           
  2587                           ;Funciones_Db.c: 137: PWM_init2(0xff);
  2588  001666  0EFF               	movlw	255
  2589  001668  EC0B  F014         	call	_PWM_init2
  2590                           
  2591                           ;Funciones_Db.c: 138: PWM_DutyCycle1(BluetoothDato[3]);
  2592  00166C  0101               	movlb	1	; () banked
  2593  00166E  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2594  001670  EC34  F010         	call	_PWM_DutyCycle1
  2595                           
  2596                           ;Funciones_Db.c: 139: PWM_DutyCycle2(BluetoothDato[4]);
  2597  001674  0101               	movlb	1	; () banked
  2598  001676  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2599  001678  ECF6  F00F         	call	_PWM_DutyCycle2
  2600                           
  2601                           ;Funciones_Db.c: 140: break;
  2602  00167C  D020               	goto	l5313
  2603  00167E                     l5303:
  2604                           
  2605                           ;Funciones_Db.c: 142: Lcd_Clear();
  2606  00167E  EC6E  F014         	call	_Lcd_Clear	;wreg free
  2607                           
  2608                           ;Funciones_Db.c: 143: Lcd_Set_Cursor(1, 1);
  2609  001682  0E01               	movlw	1
  2610  001684  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2611  001686  0E01               	movlw	1
  2612  001688  ECEF  F011         	call	_Lcd_Set_Cursor
  2613                           
  2614                           ;Funciones_Db.c: 144: Lcd_Write_String("Default");
  2615  00168C  0E7F               	movlw	high STR_17
  2616  00168E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2617  001690  0EE2               	movlw	low STR_17
  2618  001692  6E1D               	movwf	Lcd_Write_String@a,c
  2619  001694  EC72  F010         	call	_Lcd_Write_String	;wreg free
  2620                           
  2621                           ;Funciones_Db.c: 145: break;
  2622  001698  D012               	goto	l5313
  2623  00169A                     l5311:
  2624  00169A  0101               	movlb	1	; () banked
  2625  00169C  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2626                           
  2627                           ; Switch size 1, requested type "space"
  2628                           ; Number of cases is 5, Range of values is 1 to 5
  2629                           ; switch strategies available:
  2630                           ; Name         Instructions Cycles
  2631                           ; simple_byte           16     9 (average)
  2632                           ;	Chosen strategy is simple_byte
  2633  00169E  0A01               	xorlw	1	; case 1
  2634  0016A0  B4D8               	btfsc	status,2,c
  2635  0016A2  D76F               	goto	l5251
  2636  0016A4  0A03               	xorlw	3	; case 2
  2637  0016A6  B4D8               	btfsc	status,2,c
  2638  0016A8  D77A               	goto	l5257
  2639  0016AA  0A01               	xorlw	1	; case 3
  2640  0016AC  B4D8               	btfsc	status,2,c
  2641  0016AE  D785               	goto	l5263
  2642  0016B0  0A07               	xorlw	7	; case 4
  2643  0016B2  B4D8               	btfsc	status,2,c
  2644  0016B4  D790               	goto	l5269
  2645  0016B6  0A01               	xorlw	1	; case 5
  2646  0016B8  B4D8               	btfsc	status,2,c
  2647  0016BA  D7B6               	goto	l5285
  2648  0016BC  D7E0               	goto	l5303
  2649  0016BE                     l5313:
  2650                           
  2651                           ;Funciones_Db.c: 147: clrBufferUSART();
  2652  0016BE  EC1A  F013         	call	_clrBufferUSART	;wreg free
  2653                           
  2654                           ;Funciones_Db.c: 148: return;
  2655  0016C2  0012               	return	
  2656  0016C4                     __end_of_Comando_Tablet:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           intcon	equ	0xFF2
  2665                           indf0	equ	0xFEF
  2666                           postinc0	equ	0xFEE
  2667                           fsr0h	equ	0xFEA
  2668                           fsr0l	equ	0xFE9
  2669                           wreg	equ	0xFE8
  2670                           postinc1	equ	0xFE6
  2671                           postdec1	equ	0xFE5
  2672                           fsr1l	equ	0xFE1
  2673                           postinc2	equ	0xFDE
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _putcBluetoothString *****************
  2677 ;; Defined at:
  2678 ;;		line 90 in file "Bluetooth.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  a               2   31[COMRAM] PTR unsigned char 
  2681 ;;		 -> STR_16(2), 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  i               2   35[COMRAM] int 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;		None               void
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2693 ;;      Params:         2       0       0       0       0       0       0       0       0
  2694 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2695 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2696 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2697 ;;Total ram usage:        6 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    6
  2700 ;; This function calls:
  2701 ;;		_UART1_Init
  2702 ;;		_WriteUSART
  2703 ;; This function is called by:
  2704 ;;		_Comando_Tablet
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text10
  2709  00224A                     __ptext10:
  2710                           	opt stack 0
  2711  00224A                     _putcBluetoothString:
  2712                           	opt stack 23
  2713                           
  2714                           ;Bluetooth.c: 92: int i;
  2715                           ;Bluetooth.c: 93: UART1_Init(51);
  2716                           
  2717                           ;incstack = 0
  2718  00224A  0E33               	movlw	51
  2719  00224C  EC5F  F014         	call	_UART1_Init
  2720                           
  2721                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2722  002250  0E00               	movlw	0
  2723  002252  6E25               	movwf	putcBluetoothString@i+1,c
  2724  002254  0E00               	movlw	0
  2725  002256  6E24               	movwf	putcBluetoothString@i,c
  2726  002258  D015               	goto	l5107
  2727  00225A                     l5103:
  2728                           
  2729                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2730  00225A  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2731  00225E  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2732  002262  5024               	movf	putcBluetoothString@i,w,c
  2733  002264  2622               	addwf	??_putcBluetoothString,f,c
  2734  002266  5025               	movf	putcBluetoothString@i+1,w,c
  2735  002268  2223               	addwfc	??_putcBluetoothString+1,f,c
  2736  00226A  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2737  00226E  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2738  002272                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2739  002272  6AF8               	clrf	tblptru,c
  2740  002274                     	endif
  2741  002274                     	if	0	;tblptru may be non-zero
  2742  002274                     	endif
  2743  002274  0008               	tblrd		*
  2744  002276  50F5               	movf	tablat,w,c
  2745  002278  EC4D  F014         	call	_WriteUSART
  2746  00227C                     l59:
  2747  00227C  A2AC               	btfss	4012,1,c	;volatile
  2748  00227E  D7FE               	goto	l59
  2749  002280  4A24               	infsnz	putcBluetoothString@i,f,c
  2750  002282  2A25               	incf	putcBluetoothString@i+1,f,c
  2751  002284                     l5107:
  2752  002284  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2753  002288  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2754  00228C  5024               	movf	putcBluetoothString@i,w,c
  2755  00228E  2622               	addwf	??_putcBluetoothString,f,c
  2756  002290  5025               	movf	putcBluetoothString@i+1,w,c
  2757  002292  2223               	addwfc	??_putcBluetoothString+1,f,c
  2758  002294  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2759  002298  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2760  00229C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2761  00229C  6AF8               	clrf	tblptru,c
  2762  00229E                     	endif
  2763  00229E                     	if	0	;tblptru may be non-zero
  2764  00229E                     	endif
  2765  00229E  0008               	tblrd		*
  2766  0022A0  50F5               	movf	tablat,w,c
  2767  0022A2  0900               	iorlw	0
  2768  0022A4  A4D8               	btfss	status,2,c
  2769  0022A6  D7D9               	goto	l5103
  2770                           
  2771                           ;Bluetooth.c: 98: }
  2772                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2773  0022A8  0E4F               	movlw	79
  2774  0022AA  16AB               	andwf	4011,f,c	;volatile
  2775  0022AC  9AAC               	bcf	4012,5,c	;volatile
  2776  0022AE  0ECF               	movlw	207
  2777  0022B0  169D               	andwf	3997,f,c	;volatile
  2778                           
  2779                           ;Bluetooth.c: 100: return;
  2780  0022B2  0012               	return	
  2781  0022B4                     __end_of_putcBluetoothString:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           prodh	equ	0xFF4
  2788                           prodl	equ	0xFF3
  2789                           intcon	equ	0xFF2
  2790                           indf0	equ	0xFEF
  2791                           postinc0	equ	0xFEE
  2792                           fsr0h	equ	0xFEA
  2793                           fsr0l	equ	0xFE9
  2794                           wreg	equ	0xFE8
  2795                           postinc1	equ	0xFE6
  2796                           postdec1	equ	0xFE5
  2797                           fsr1l	equ	0xFE1
  2798                           postinc2	equ	0xFDE
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _putcBluetoothInt *****************
  2802 ;; Defined at:
  2803 ;;		line 102 in file "Bluetooth.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  a               2   88[BANK0 ] int 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  s              20    0[BANK1 ] unsigned char [20]
  2808 ;;  i               2   20[BANK1 ] int 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;		None               void
  2811 ;; Registers used:
  2812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2818 ;;      Params:         0       2       0       0       0       0       0       0       0
  2819 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2821 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2822 ;;Total ram usage:       24 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    8
  2825 ;; This function calls:
  2826 ;;		_UART1_Init
  2827 ;;		_WriteUSART
  2828 ;;		_sprintf
  2829 ;; This function is called by:
  2830 ;;		_Comando_Tablet
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text11
  2835  001EE4                     __ptext11:
  2836                           	opt stack 0
  2837  001EE4                     _putcBluetoothInt:
  2838                           	opt stack 21
  2839                           
  2840                           ;Bluetooth.c: 104: int i;
  2841                           ;Bluetooth.c: 105: unsigned char s[20];
  2842                           ;Bluetooth.c: 106: UART1_Init(51);
  2843                           
  2844                           ;incstack = 0
  2845  001EE4  0E33               	movlw	51
  2846  001EE6  EC5F  F014         	call	_UART1_Init
  2847                           
  2848                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2849  001EEA  0101               	movlb	1	; () banked
  2850  001EEC  0E01               	movlw	high putcBluetoothInt@s
  2851  001EEE  0100               	movlb	0	; () banked
  2852  001EF0  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2853  001EF2  0101               	movlb	1	; () banked
  2854  001EF4  0E5A               	movlw	low putcBluetoothInt@s
  2855  001EF6  0100               	movlb	0	; () banked
  2856  001EF8  6F88               	movwf	sprintf@sp& (0+255),b
  2857  001EFA  0E7F               	movlw	high (STR_19+10)
  2858  001EFC  0100               	movlb	0	; () banked
  2859  001EFE  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2860  001F00  0EB4               	movlw	low (STR_19+10)
  2861  001F02  0100               	movlb	0	; () banked
  2862  001F04  6F8A               	movwf	sprintf@f& (0+255),b
  2863  001F06  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2864  001F0A  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2865  001F0E  EC0E  F000         	call	_sprintf	;wreg free
  2866                           
  2867                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2868  001F12  0E00               	movlw	0
  2869  001F14  0101               	movlb	1	; () banked
  2870  001F16  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2871  001F18  0E00               	movlw	0
  2872  001F1A  0101               	movlb	1	; () banked
  2873  001F1C  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2874  001F1E  D012               	goto	l5125
  2875  001F20                     l5121:
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2879  001F20  0101               	movlb	1	; () banked
  2880  001F22  0E5A               	movlw	low putcBluetoothInt@s
  2881  001F24  0101               	movlb	1	; () banked
  2882  001F26  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2883  001F28  6ED9               	movwf	fsr2l,c
  2884  001F2A  0101               	movlb	1	; () banked
  2885  001F2C  0E01               	movlw	high putcBluetoothInt@s
  2886  001F2E  0101               	movlb	1	; () banked
  2887  001F30  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2888  001F32  6EDA               	movwf	fsr2h,c
  2889  001F34  50DF               	movf	indf2,w,c
  2890  001F36  EC4D  F014         	call	_WriteUSART
  2891  001F3A                     l68:
  2892  001F3A  A2AC               	btfss	4012,1,c	;volatile
  2893  001F3C  D7FE               	goto	l68
  2894  001F3E  0101               	movlb	1	; () banked
  2895  001F40  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2896  001F42  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2897  001F44                     l5125:
  2898                           
  2899                           ; BSR set to: 1
  2900  001F44  0101               	movlb	1	; () banked
  2901  001F46  0E5A               	movlw	low putcBluetoothInt@s
  2902  001F48  0101               	movlb	1	; () banked
  2903  001F4A  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2904  001F4C  6ED9               	movwf	fsr2l,c
  2905  001F4E  0101               	movlb	1	; () banked
  2906  001F50  0E01               	movlw	high putcBluetoothInt@s
  2907  001F52  0101               	movlb	1	; () banked
  2908  001F54  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2909  001F56  6EDA               	movwf	fsr2h,c
  2910  001F58  50DF               	movf	indf2,w,c
  2911  001F5A  A4D8               	btfss	status,2,c
  2912  001F5C  D7E1               	goto	l5121
  2913                           
  2914                           ; BSR set to: 1
  2915                           ;Bluetooth.c: 112: }
  2916                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2917                           
  2918                           ; BSR set to: 1
  2919  001F5E  0E4F               	movlw	79
  2920  001F60  16AB               	andwf	4011,f,c	;volatile
  2921                           
  2922                           ; BSR set to: 1
  2923  001F62  9AAC               	bcf	4012,5,c	;volatile
  2924  001F64  0ECF               	movlw	207
  2925  001F66  169D               	andwf	3997,f,c	;volatile
  2926                           
  2927                           ; BSR set to: 1
  2928                           
  2929                           ; BSR set to: 1
  2930                           ;Bluetooth.c: 114: return;
  2931  001F68  0012               	return	
  2932  001F6A                     __end_of_putcBluetoothInt:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           intcon	equ	0xFF2
  2941                           indf0	equ	0xFEF
  2942                           postinc0	equ	0xFEE
  2943                           fsr0h	equ	0xFEA
  2944                           fsr0l	equ	0xFE9
  2945                           wreg	equ	0xFE8
  2946                           postinc1	equ	0xFE6
  2947                           postdec1	equ	0xFE5
  2948                           fsr1l	equ	0xFE1
  2949                           indf2	equ	0xFDF
  2950                           postinc2	equ	0xFDE
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _WriteUSART *****************
  2956 ;; Defined at:
  2957 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  data            1    wreg     unsigned char 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  data            1   24[COMRAM] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;		None               void
  2964 ;; Registers used:
  2965 ;;		wreg
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0
  2972 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2974 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2975 ;;Total ram usage:        1 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    4
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_putcBluetoothString
  2982 ;;		_putcBluetoothInt
  2983 ;;		_putcTxU1
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text12
  2988  00289A                     __ptext12:
  2989                           	opt stack 0
  2990  00289A                     _WriteUSART:
  2991                           	opt stack 21
  2992                           
  2993                           ; BSR set to: 1
  2994                           ;incstack = 0
  2995                           ;WriteUSART@data stored from wreg
  2996  00289A  6E19               	movwf	WriteUSART@data,c
  2997  00289C  ACAC               	btfss	4012,6,c	;volatile
  2998  00289E  D003               	goto	l4161
  2999  0028A0  90AC               	bcf	4012,0,c	;volatile
  3000  0028A2  B23C               	btfsc	_USART_Status,1,c
  3001  0028A4  80AC               	bsf	4012,0,c	;volatile
  3002  0028A6                     l4161:
  3003  0028A6  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3004  0028AA  0012               	return	
  3005  0028AC                     __end_of_WriteUSART:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           indf0	equ	0xFEF
  3015                           postinc0	equ	0xFEE
  3016                           fsr0h	equ	0xFEA
  3017                           fsr0l	equ	0xFE9
  3018                           wreg	equ	0xFE8
  3019                           postinc1	equ	0xFE6
  3020                           postdec1	equ	0xFE5
  3021                           fsr1l	equ	0xFE1
  3022                           indf2	equ	0xFDF
  3023                           postinc2	equ	0xFDE
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function _UART1_Init *****************
  3029 ;; Defined at:
  3030 ;;		line 5 in file "UART1.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  bdr             1    wreg     unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  bdr             1   30[COMRAM] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3044 ;;      Params:         0       0       0       0       0       0       0       0       0
  3045 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3047 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3048 ;;Total ram usage:        1 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    5
  3051 ;; This function calls:
  3052 ;;		_OpenUSART
  3053 ;; This function is called by:
  3054 ;;		_BT_Init
  3055 ;;		_putcBluetoothString
  3056 ;;		_putcBluetoothInt
  3057 ;;		_main
  3058 ;;		_EstadoBluetooth
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text13
  3063  0028BE                     __ptext13:
  3064                           	opt stack 0
  3065  0028BE                     _UART1_Init:
  3066                           	opt stack 25
  3067                           
  3068                           ;incstack = 0
  3069                           ;UART1_Init@bdr stored from wreg
  3070  0028BE  6E1F               	movwf	UART1_Init@bdr,c
  3071                           
  3072                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3073  0028C0  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3074  0028C4  6A1A               	clrf	OpenUSART@spbrg+1,c
  3075  0028C6  0E7C               	movlw	124
  3076  0028C8  EC5A  F011         	call	_OpenUSART
  3077  0028CC  0012               	return	
  3078  0028CE                     __end_of_UART1_Init:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           intcon	equ	0xFF2
  3087                           indf0	equ	0xFEF
  3088                           postinc0	equ	0xFEE
  3089                           fsr0h	equ	0xFEA
  3090                           fsr0l	equ	0xFE9
  3091                           wreg	equ	0xFE8
  3092                           postinc1	equ	0xFE6
  3093                           postdec1	equ	0xFE5
  3094                           fsr1l	equ	0xFE1
  3095                           indf2	equ	0xFDF
  3096                           postinc2	equ	0xFDE
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _OpenUSART *****************
  3102 ;; Defined at:
  3103 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  config          1    wreg     unsigned char 
  3106 ;;  spbrg           2   24[COMRAM] unsigned int 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  config          1   29[COMRAM] unsigned char 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;		None               void
  3111 ;; Registers used:
  3112 ;;		wreg, status,2
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3118 ;;      Params:         2       0       0       0       0       0       0       0       0
  3119 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3120 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3121 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3122 ;;Total ram usage:        6 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    4
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_UART1_Init
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text14
  3133  0022B4                     __ptext14:
  3134                           	opt stack 0
  3135  0022B4                     _OpenUSART:
  3136                           	opt stack 25
  3137                           
  3138                           ;incstack = 0
  3139                           ;OpenUSART@config stored from wreg
  3140  0022B4  6E1E               	movwf	OpenUSART@config,c
  3141  0022B6  0E00               	movlw	0
  3142  0022B8  6EAC               	movwf	4012,c	;volatile
  3143  0022BA  0E00               	movlw	0
  3144  0022BC  6EAB               	movwf	4011,c	;volatile
  3145  0022BE  B01E               	btfsc	OpenUSART@config,0,c
  3146  0022C0  88AC               	bsf	4012,4,c	;volatile
  3147  0022C2  A21E               	btfss	OpenUSART@config,1,c
  3148  0022C4  D002               	goto	l4455
  3149  0022C6  8CAC               	bsf	4012,6,c	;volatile
  3150  0022C8  8CAB               	bsf	4011,6,c	;volatile
  3151  0022CA                     l4455:
  3152  0022CA  B41E               	btfsc	OpenUSART@config,2,c
  3153  0022CC  8EAC               	bsf	4012,7,c	;volatile
  3154  0022CE  A61E               	btfss	OpenUSART@config,3,c
  3155  0022D0  D002               	goto	l572
  3156  0022D2  88AB               	bsf	4011,4,c	;volatile
  3157  0022D4  D001               	goto	l4463
  3158  0022D6                     l572:
  3159  0022D6  8AAB               	bsf	4011,5,c	;volatile
  3160  0022D8                     l4463:
  3161  0022D8  B81E               	btfsc	OpenUSART@config,4,c
  3162  0022DA  84AC               	bsf	4012,2,c	;volatile
  3163  0022DC  989E               	bcf	3998,4,c	;volatile
  3164  0022DE  BA1E               	btfsc	OpenUSART@config,5,c
  3165  0022E0  86AB               	bsf	4011,3,c	;volatile
  3166  0022E2  AC1E               	btfss	OpenUSART@config,6,c
  3167  0022E4  D002               	goto	l576
  3168  0022E6  8A9D               	bsf	3997,5,c	;volatile
  3169  0022E8  D001               	goto	l577
  3170  0022EA                     l576:
  3171  0022EA  9A9D               	bcf	3997,5,c	;volatile
  3172  0022EC                     l577:
  3173  0022EC  9A9E               	bcf	3998,5,c	;volatile
  3174  0022EE  AE1E               	btfss	OpenUSART@config,7,c
  3175  0022F0  D002               	goto	l578
  3176  0022F2  889D               	bsf	3997,4,c	;volatile
  3177  0022F4  D001               	goto	l579
  3178  0022F6                     l578:
  3179  0022F6  989D               	bcf	3997,4,c	;volatile
  3180  0022F8                     l579:
  3181  0022F8  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3182  0022FC  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3183  002300  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3184  002304  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3185  002306  501C               	movf	??_OpenUSART+1,w,c
  3186  002308  6EB0               	movwf	4016,c	;volatile
  3187  00230A  8AAC               	bsf	4012,5,c	;volatile
  3188  00230C  8EAB               	bsf	4011,7,c	;volatile
  3189  00230E  9C94               	bcf	3988,6,c	;volatile
  3190  002310  8E94               	bsf	3988,7,c	;volatile
  3191  002312  B8AC               	btfsc	4012,4,c	;volatile
  3192  002314  BEAC               	btfsc	4012,7,c	;volatile
  3193  002316  D001               	goto	l581
  3194  002318  8C94               	bsf	3988,6,c	;volatile
  3195  00231A                     l581:
  3196  00231A  0012               	return	
  3197  00231C                     __end_of_OpenUSART:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           intcon	equ	0xFF2
  3206                           indf0	equ	0xFEF
  3207                           postinc0	equ	0xFEE
  3208                           fsr0h	equ	0xFEA
  3209                           fsr0l	equ	0xFE9
  3210                           wreg	equ	0xFE8
  3211                           postinc1	equ	0xFE6
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _clrBufferUSART *****************
  3221 ;; Defined at:
  3222 ;;		line 68 in file "Bluetooth.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  i               2   24[COMRAM] int 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;		None               void
  3229 ;; Registers used:
  3230 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0
  3237 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3239 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3240 ;;Total ram usage:        2 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    4
  3243 ;; This function calls:
  3244 ;;		Nothing
  3245 ;; This function is called by:
  3246 ;;		_Inicializa_Driveby
  3247 ;;		_Comando_Tablet
  3248 ;;		_main
  3249 ;;		_CheckTX
  3250 ;;		_EstadoBluetooth
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text15
  3255  002634                     __ptext15:
  3256                           	opt stack 0
  3257  002634                     _clrBufferUSART:
  3258                           	opt stack 26
  3259                           
  3260                           ;Bluetooth.c: 69: int i;
  3261                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3262                           
  3263                           ;incstack = 0
  3264  002634  0E00               	movlw	0
  3265  002636  6E1A               	movwf	clrBufferUSART@i+1,c
  3266  002638  0E00               	movlw	0
  3267  00263A  6E19               	movwf	clrBufferUSART@i,c
  3268  00263C  501A               	movf	clrBufferUSART@i+1,w,c
  3269  00263E  0A80               	xorlw	128
  3270  002640  0F80               	addlw	-128
  3271  002642  0E14               	movlw	20
  3272  002644  B4D8               	btfsc	status,2,c
  3273  002646  5C19               	subwf	clrBufferUSART@i,w,c
  3274  002648  B0D8               	btfsc	status,0,c
  3275  00264A  D00F               	goto	l54
  3276                           
  3277                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3278  00264C  0101               	movlb	1	; () banked
  3279  00264E  0E28               	movlw	low _BluetoothDato
  3280  002650  2419               	addwf	clrBufferUSART@i,w,c
  3281  002652  6ED9               	movwf	fsr2l,c
  3282  002654  0101               	movlb	1	; () banked
  3283  002656  0E01               	movlw	high _BluetoothDato
  3284  002658  201A               	addwfc	clrBufferUSART@i+1,w,c
  3285  00265A  6EDA               	movwf	fsr2h,c
  3286  00265C  0E00               	movlw	0
  3287  00265E  6EDF               	movwf	indf2,c
  3288                           
  3289                           ; BSR set to: 1
  3290                           ;Bluetooth.c: 72: cad = 0;
  3291  002660  0E00               	movlw	0
  3292  002662  6E3D               	movwf	_cad,c
  3293                           
  3294                           ; BSR set to: 1
  3295  002664  4A19               	infsnz	clrBufferUSART@i,f,c
  3296  002666  2A1A               	incf	clrBufferUSART@i+1,f,c
  3297  002668  D7E9               	goto	L2
  3298  00266A                     l54:
  3299  00266A  0012               	return	
  3300  00266C                     __end_of_clrBufferUSART:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           indf0	equ	0xFEF
  3310                           postinc0	equ	0xFEE
  3311                           fsr0h	equ	0xFEA
  3312                           fsr0l	equ	0xFE9
  3313                           wreg	equ	0xFE8
  3314                           postinc1	equ	0xFE6
  3315                           postdec1	equ	0xFE5
  3316                           fsr1l	equ	0xFE1
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _PWM_init2 *****************
  3324 ;; Defined at:
  3325 ;;		line 42 in file "pwm.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  period          1    wreg     unsigned char 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;  period          1   27[COMRAM] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3339 ;;      Params:         0       0       0       0       0       0       0       0       0
  3340 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3342 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3343 ;;Total ram usage:        1 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    5
  3346 ;; This function calls:
  3347 ;;		_OpenPWM2
  3348 ;; This function is called by:
  3349 ;;		_Comando_Tablet
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text16
  3354  002816                     __ptext16:
  3355                           	opt stack 0
  3356  002816                     _PWM_init2:
  3357                           	opt stack 24
  3358                           
  3359                           ;incstack = 0
  3360                           ;PWM_init2@period stored from wreg
  3361  002816  6E1C               	movwf	PWM_init2@period,c
  3362                           
  3363                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3364  002818  0EFE               	movlw	254
  3365  00281A  6E47               	movwf	_Timer2Config,c
  3366                           
  3367                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3368  00281C  5047               	movf	_Timer2Config,w,c
  3369  00281E  0BFB               	andlw	251
  3370  002820  6ECA               	movwf	4042,c	;volatile
  3371                           
  3372                           ;pwm.c: 47: TMR2 = 0;
  3373  002822  0E00               	movlw	0
  3374  002824  6ECC               	movwf	4044,c	;volatile
  3375                           
  3376                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3377  002826  929E               	bcf	3998,1,c	;volatile
  3378                           
  3379                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3380  002828  929D               	bcf	3997,1,c	;volatile
  3381                           
  3382                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3383  00282A  84CA               	bsf	4042,2,c	;volatile
  3384                           
  3385                           ;pwm.c: 51: OpenPWM2(period);
  3386  00282C  501C               	movf	PWM_init2@period,w,c
  3387  00282E  ECA6  F012         	call	_OpenPWM2
  3388                           
  3389                           ;pwm.c: 53: return;
  3390  002832  0012               	return	
  3391  002834                     __end_of_PWM_init2:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           indf0	equ	0xFEF
  3401                           postinc0	equ	0xFEE
  3402                           fsr0h	equ	0xFEA
  3403                           fsr0l	equ	0xFE9
  3404                           wreg	equ	0xFE8
  3405                           postinc1	equ	0xFE6
  3406                           postdec1	equ	0xFE5
  3407                           fsr1l	equ	0xFE1
  3408                           indf2	equ	0xFDF
  3409                           postinc2	equ	0xFDE
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _OpenPWM2 *****************
  3415 ;; Defined at:
  3416 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  period          1    wreg     unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  period          1   25[COMRAM] unsigned char 
  3421 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3422 ;;  pmmode          1    0        unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;		None               void
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3432 ;;      Params:         0       0       0       0       0       0       0       0       0
  3433 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3434 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3435 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3436 ;;Total ram usage:        3 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    4
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_PWM_init2
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text17
  3447  00254C                     __ptext17:
  3448                           	opt stack 0
  3449  00254C                     _OpenPWM2:
  3450                           	opt stack 24
  3451                           
  3452                           ;incstack = 0
  3453                           ;OpenPWM2@period stored from wreg
  3454  00254C  6E1A               	movwf	OpenPWM2@period,c
  3455  00254E  0E0C               	movlw	12
  3456  002550  6EBA               	movwf	4026,c	;volatile
  3457  002552  0E05               	movlw	5
  3458  002554  6EF6               	movwf	tblptrl,c
  3459  002556                     	if	1	;There is more than 1 active tblptr byte
  3460  002556  0E00               	movlw	0
  3461  002558  6EF7               	movwf	tblptrh,c
  3462  00255A                     	endif
  3463  00255A                     	if	1	;There are 3 active tblptr bytes
  3464  00255A  0E30               	movlw	48
  3465  00255C  6EF8               	movwf	tblptru,c
  3466  00255E                     	endif
  3467  00255E  0008               	tblrd		*
  3468  002560  CFF5 F019          	movff	tablat,??_OpenPWM2
  3469  002564  A019               	btfss	??_OpenPWM2,0,c
  3470  002566  D002               	goto	l3615
  3471  002568  681B               	setf	OpenPWM2@ccp2mx,c
  3472  00256A  D002               	goto	l538
  3473  00256C                     l3615:
  3474  00256C  0E00               	movlw	0
  3475  00256E  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3476  002570                     l538:
  3477  002570  501B               	movf	OpenPWM2@ccp2mx,w,c
  3478  002572  B4D8               	btfsc	status,2,c
  3479  002574  D002               	goto	l539
  3480  002576  9294               	bcf	3988,1,c	;volatile
  3481  002578  D001               	goto	l540
  3482  00257A                     l539:
  3483  00257A  9693               	bcf	3987,3,c	;volatile
  3484  00257C                     l540:
  3485  00257C  94CA               	bcf	4042,2,c	;volatile
  3486  00257E  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3487  002582  84CA               	bsf	4042,2,c	;volatile
  3488  002584  0012               	return	
  3489  002586                     __end_of_OpenPWM2:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           intcon	equ	0xFF2
  3498                           indf0	equ	0xFEF
  3499                           postinc0	equ	0xFEE
  3500                           fsr0h	equ	0xFEA
  3501                           fsr0l	equ	0xFE9
  3502                           wreg	equ	0xFE8
  3503                           postinc1	equ	0xFE6
  3504                           postdec1	equ	0xFE5
  3505                           fsr1l	equ	0xFE1
  3506                           indf2	equ	0xFDF
  3507                           postinc2	equ	0xFDE
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _PWM_init1 *****************
  3513 ;; Defined at:
  3514 ;;		line 20 in file "pwm.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  period          1    wreg     unsigned char 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  period          1   25[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3528 ;;      Params:         0       0       0       0       0       0       0       0       0
  3529 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3531 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3532 ;;Total ram usage:        1 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    5
  3535 ;; This function calls:
  3536 ;;		_OpenPWM1
  3537 ;; This function is called by:
  3538 ;;		_Comando_Tablet
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text18
  3543  002834                     __ptext18:
  3544                           	opt stack 0
  3545  002834                     _PWM_init1:
  3546                           	opt stack 24
  3547                           
  3548                           ;incstack = 0
  3549                           ;PWM_init1@period stored from wreg
  3550  002834  6E1A               	movwf	PWM_init1@period,c
  3551                           
  3552                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3553  002836  0EFE               	movlw	254
  3554  002838  6E47               	movwf	_Timer2Config,c
  3555                           
  3556                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3557  00283A  5047               	movf	_Timer2Config,w,c
  3558  00283C  0BFB               	andlw	251
  3559  00283E  6ECA               	movwf	4042,c	;volatile
  3560                           
  3561                           ;pwm.c: 25: TMR2 = 0;
  3562  002840  0E00               	movlw	0
  3563  002842  6ECC               	movwf	4044,c	;volatile
  3564                           
  3565                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3566  002844  929E               	bcf	3998,1,c	;volatile
  3567                           
  3568                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3569  002846  929D               	bcf	3997,1,c	;volatile
  3570                           
  3571                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3572  002848  84CA               	bsf	4042,2,c	;volatile
  3573                           
  3574                           ;pwm.c: 29: OpenPWM1(period);
  3575  00284A  501A               	movf	PWM_init1@period,w,c
  3576  00284C  EC56  F014         	call	_OpenPWM1
  3577                           
  3578                           ;pwm.c: 31: return;
  3579  002850  0012               	return	
  3580  002852                     __end_of_PWM_init1:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           indf0	equ	0xFEF
  3590                           postinc0	equ	0xFEE
  3591                           fsr0h	equ	0xFEA
  3592                           fsr0l	equ	0xFE9
  3593                           wreg	equ	0xFE8
  3594                           postinc1	equ	0xFE6
  3595                           postdec1	equ	0xFE5
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _OpenPWM1 *****************
  3604 ;; Defined at:
  3605 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  period          1    wreg     unsigned char 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  period          1   24[COMRAM] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0
  3620 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3622 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3623 ;;Total ram usage:        1 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    4
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_PWM_init1
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text19
  3634  0028AC                     __ptext19:
  3635                           	opt stack 0
  3636  0028AC                     _OpenPWM1:
  3637                           	opt stack 24
  3638                           
  3639                           ;incstack = 0
  3640                           ;OpenPWM1@period stored from wreg
  3641  0028AC  6E19               	movwf	OpenPWM1@period,c
  3642  0028AE  0E0C               	movlw	12
  3643  0028B0  12BD               	iorwf	4029,f,c	;volatile
  3644  0028B2  9494               	bcf	3988,2,c	;volatile
  3645  0028B4  94CA               	bcf	4042,2,c	;volatile
  3646  0028B6  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3647  0028BA  84CA               	bsf	4042,2,c	;volatile
  3648  0028BC  0012               	return	
  3649  0028BE                     __end_of_OpenPWM1:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           indf0	equ	0xFEF
  3659                           postinc0	equ	0xFEE
  3660                           fsr0h	equ	0xFEA
  3661                           fsr0l	equ	0xFE9
  3662                           wreg	equ	0xFE8
  3663                           postinc1	equ	0xFE6
  3664                           postdec1	equ	0xFE5
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _PWM_DutyCycle2 *****************
  3673 ;; Defined at:
  3674 ;;		line 55 in file "pwm.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  percentageDu    1    wreg     unsigned char 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3679 ;;  DC              2   41[BANK0 ] unsigned int 
  3680 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;		None               void
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3690 ;;      Params:         0       0       0       0       0       0       0       0       0
  3691 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3692 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3693 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3694 ;;Total ram usage:        9 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    6
  3697 ;; This function calls:
  3698 ;;		_SetDCPWM2
  3699 ;;		___ftmul
  3700 ;;		___fttol
  3701 ;;		___lbtoft
  3702 ;; This function is called by:
  3703 ;;		_Comando_Tablet
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text20
  3708  001FEC                     __ptext20:
  3709                           	opt stack 0
  3710  001FEC                     _PWM_DutyCycle2:
  3711                           	opt stack 23
  3712                           
  3713                           ;incstack = 0
  3714                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3715  001FEC  0100               	movlb	0	; () banked
  3716  001FEE  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3720  001FF0  0E00               	movlw	0
  3721  001FF2  0100               	movlb	0	; () banked
  3722  001FF4  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3723  001FF6  0E00               	movlw	0
  3724  001FF8  0100               	movlb	0	; () banked
  3725  001FFA  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3726  001FFC  0E00               	movlw	0
  3727  001FFE  0100               	movlb	0	; () banked
  3728  002000  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3729  002002  0E00               	movlw	0
  3730  002004  0100               	movlb	0	; () banked
  3731  002006  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3735  002008  0EAE               	movlw	174
  3736  00200A  0100               	movlb	0	; () banked
  3737  00200C  6F63               	movwf	___ftmul@f2& (0+255),b
  3738  00200E  0E23               	movlw	35
  3739  002010  0100               	movlb	0	; () banked
  3740  002012  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3741  002014  0E41               	movlw	65
  3742  002016  0100               	movlb	0	; () banked
  3743  002018  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3744  00201A  0100               	movlb	0	; () banked
  3745  00201C  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3746  00201E  ECD9  F013         	call	___lbtoft
  3747  002022  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3748  002026  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3749  00202A  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3750  00202E  EC6F  F009         	call	___ftmul	;wreg free
  3751  002032  C060  F073         	movff	?___ftmul,___fttol@f1
  3752  002036  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3753  00203A  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3754  00203E  EC1B  F00A         	call	___fttol	;wreg free
  3755  002042  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3756  002046  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3757  00204A  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3758  00204E  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3759  002052  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3760  002056  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3761                           
  3762                           ;pwm.c: 60: SetDCPWM2(DC);
  3763  00205A  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3764  00205E  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3765  002062  ECC3  F012         	call	_SetDCPWM2	;wreg free
  3766                           
  3767                           ;pwm.c: 61: return;
  3768  002066  0012               	return	
  3769  002068                     __end_of_PWM_DutyCycle2:
  3770                           	opt stack 0
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           intcon	equ	0xFF2
  3778                           indf0	equ	0xFEF
  3779                           postinc0	equ	0xFEE
  3780                           fsr0h	equ	0xFEA
  3781                           fsr0l	equ	0xFE9
  3782                           wreg	equ	0xFE8
  3783                           postinc1	equ	0xFE6
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _SetDCPWM2 *****************
  3793 ;; Defined at:
  3794 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  dutycycle       2   24[COMRAM] unsigned int 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  DCycle          2   28[COMRAM] struct PWMDC
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3808 ;;      Params:         2       0       0       0       0       0       0       0       0
  3809 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3810 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3811 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3812 ;;Total ram usage:        6 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_PWM_DutyCycle2
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text21
  3823  002586                     __ptext21:
  3824                           	opt stack 0
  3825  002586                     _SetDCPWM2:
  3826                           	opt stack 24
  3827                           
  3828                           ;incstack = 0
  3829  002586  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  3830  00258A  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  3831  00258E  0E06               	movlw	6
  3832  002590                     u3435:
  3833  002590  90D8               	bcf	status,0,c
  3834  002592  361B               	rlcf	??_SetDCPWM2,f,c
  3835  002594  361C               	rlcf	??_SetDCPWM2+1,f,c
  3836  002596  2EE8               	decfsz	wreg,f,c
  3837  002598  D7FB               	goto	u3435
  3838  00259A  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  3839  00259E  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  3840  0025A2  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  3841  0025A6  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  3842  0025AA  90D8               	bcf	status,0,c
  3843  0025AC  321B               	rrcf	??_SetDCPWM2,f,c
  3844  0025AE  90D8               	bcf	status,0,c
  3845  0025B0  321B               	rrcf	??_SetDCPWM2,f,c
  3846  0025B2  0E30               	movlw	48
  3847  0025B4  161B               	andwf	??_SetDCPWM2,f,c
  3848  0025B6  50BA               	movf	4026,w,c	;volatile
  3849  0025B8  0BCF               	andlw	207
  3850  0025BA  101B               	iorwf	??_SetDCPWM2,w,c
  3851  0025BC  6EBA               	movwf	4026,c	;volatile
  3852  0025BE  0012               	return	
  3853  0025C0                     __end_of_SetDCPWM2:
  3854                           	opt stack 0
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           intcon	equ	0xFF2
  3862                           indf0	equ	0xFEF
  3863                           postinc0	equ	0xFEE
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           postinc1	equ	0xFE6
  3868                           postdec1	equ	0xFE5
  3869                           fsr1l	equ	0xFE1
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _PWM_DutyCycle1 *****************
  3877 ;; Defined at:
  3878 ;;		line 33 in file "pwm.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  percentageDu    1    wreg     unsigned char 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3883 ;;  DC              2   41[BANK0 ] unsigned int 
  3884 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;		None               void
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0
  3895 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3896 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3897 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3898 ;;Total ram usage:        9 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    6
  3901 ;; This function calls:
  3902 ;;		_SetDCPWM1
  3903 ;;		___ftmul
  3904 ;;		___fttol
  3905 ;;		___lbtoft
  3906 ;; This function is called by:
  3907 ;;		_Comando_Tablet
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text22
  3912  002068                     __ptext22:
  3913                           	opt stack 0
  3914  002068                     _PWM_DutyCycle1:
  3915                           	opt stack 23
  3916                           
  3917                           ;incstack = 0
  3918                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  3919  002068  0100               	movlb	0	; () banked
  3920  00206A  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  3924  00206C  0E00               	movlw	0
  3925  00206E  0100               	movlb	0	; () banked
  3926  002070  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  3927  002072  0E00               	movlw	0
  3928  002074  0100               	movlb	0	; () banked
  3929  002076  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  3930  002078  0E00               	movlw	0
  3931  00207A  0100               	movlb	0	; () banked
  3932  00207C  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  3933  00207E  0E00               	movlw	0
  3934  002080  0100               	movlb	0	; () banked
  3935  002082  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  3939  002084  0EAE               	movlw	174
  3940  002086  0100               	movlb	0	; () banked
  3941  002088  6F63               	movwf	___ftmul@f2& (0+255),b
  3942  00208A  0E23               	movlw	35
  3943  00208C  0100               	movlb	0	; () banked
  3944  00208E  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3945  002090  0E41               	movlw	65
  3946  002092  0100               	movlb	0	; () banked
  3947  002094  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3948  002096  0100               	movlb	0	; () banked
  3949  002098  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  3950  00209A  ECD9  F013         	call	___lbtoft
  3951  00209E  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3952  0020A2  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3953  0020A6  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3954  0020AA  EC6F  F009         	call	___ftmul	;wreg free
  3955  0020AE  C060  F073         	movff	?___ftmul,___fttol@f1
  3956  0020B2  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3957  0020B6  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3958  0020BA  EC1B  F00A         	call	___fttol	;wreg free
  3959  0020BE  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  3960  0020C2  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  3961  0020C6  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  3962  0020CA  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  3963  0020CE  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  3964  0020D2  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  3965                           
  3966                           ;pwm.c: 38: SetDCPWM1(DC);
  3967  0020D6  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  3968  0020DA  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  3969  0020DE  ECE0  F012         	call	_SetDCPWM1	;wreg free
  3970                           
  3971                           ;pwm.c: 39: return;
  3972  0020E2  0012               	return	
  3973  0020E4                     __end_of_PWM_DutyCycle1:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           tblptrh	equ	0xFF7
  3977                           tblptrl	equ	0xFF6
  3978                           tablat	equ	0xFF5
  3979                           prodh	equ	0xFF4
  3980                           prodl	equ	0xFF3
  3981                           intcon	equ	0xFF2
  3982                           indf0	equ	0xFEF
  3983                           postinc0	equ	0xFEE
  3984                           fsr0h	equ	0xFEA
  3985                           fsr0l	equ	0xFE9
  3986                           wreg	equ	0xFE8
  3987                           postinc1	equ	0xFE6
  3988                           postdec1	equ	0xFE5
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           fsr2h	equ	0xFDA
  3993                           fsr2l	equ	0xFD9
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function ___lbtoft *****************
  3997 ;; Defined at:
  3998 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  c               1    wreg     unsigned char 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  c               1   35[COMRAM] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  3   32[COMRAM] float 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4012 ;;      Params:         3       0       0       0       0       0       0       0       0
  4013 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4015 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4016 ;;Total ram usage:        4 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    5
  4019 ;; This function calls:
  4020 ;;		___ftpack
  4021 ;; This function is called by:
  4022 ;;		_PWM_DutyCycle1
  4023 ;;		_PWM_DutyCycle2
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text23
  4028  0027B2                     __ptext23:
  4029                           	opt stack 0
  4030  0027B2                     ___lbtoft:
  4031                           	opt stack 23
  4032                           
  4033                           ;incstack = 0
  4034                           ;___lbtoft@c stored from wreg
  4035  0027B2  6E24               	movwf	___lbtoft@c,c
  4036  0027B4  5024               	movf	___lbtoft@c,w,c
  4037  0027B6  6E19               	movwf	___ftpack@arg,c
  4038  0027B8  6A1A               	clrf	___ftpack@arg+1,c
  4039  0027BA  6A1B               	clrf	___ftpack@arg+2,c
  4040  0027BC  0E8E               	movlw	142
  4041  0027BE  6E1C               	movwf	___ftpack@exp,c
  4042  0027C0  0E00               	movlw	0
  4043  0027C2  6E1D               	movwf	___ftpack@sign,c
  4044  0027C4  EC54  F00D         	call	___ftpack	;wreg free
  4045  0027C8  C019  F021         	movff	?___ftpack,?___lbtoft
  4046  0027CC  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4047  0027D0  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4048  0027D4  0012               	return	
  4049  0027D6                     __end_of___lbtoft:
  4050                           	opt stack 0
  4051                           tblptru	equ	0xFF8
  4052                           tblptrh	equ	0xFF7
  4053                           tblptrl	equ	0xFF6
  4054                           tablat	equ	0xFF5
  4055                           prodh	equ	0xFF4
  4056                           prodl	equ	0xFF3
  4057                           intcon	equ	0xFF2
  4058                           indf0	equ	0xFEF
  4059                           postinc0	equ	0xFEE
  4060                           fsr0h	equ	0xFEA
  4061                           fsr0l	equ	0xFE9
  4062                           wreg	equ	0xFE8
  4063                           postinc1	equ	0xFE6
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _SetDCPWM1 *****************
  4073 ;; Defined at:
  4074 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4079 ;; Return value:  Size  Location     Type
  4080 ;;		None               void
  4081 ;; Registers used:
  4082 ;;		wreg, status,2, status,0
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4088 ;;      Params:         2       0       0       0       0       0       0       0       0
  4089 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4090 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4091 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4092 ;;Total ram usage:        6 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    4
  4095 ;; This function calls:
  4096 ;;		Nothing
  4097 ;; This function is called by:
  4098 ;;		_PWM_DutyCycle1
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text24
  4103  0025C0                     __ptext24:
  4104                           	opt stack 0
  4105  0025C0                     _SetDCPWM1:
  4106                           	opt stack 24
  4107                           
  4108                           ;incstack = 0
  4109  0025C0  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4110  0025C4  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4111  0025C8  0E06               	movlw	6
  4112  0025CA                     u3405:
  4113  0025CA  90D8               	bcf	status,0,c
  4114  0025CC  361B               	rlcf	??_SetDCPWM1,f,c
  4115  0025CE  361C               	rlcf	??_SetDCPWM1+1,f,c
  4116  0025D0  2EE8               	decfsz	wreg,f,c
  4117  0025D2  D7FB               	goto	u3405
  4118  0025D4  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4119  0025D8  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4120  0025DC  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4121  0025E0  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4122  0025E4  90D8               	bcf	status,0,c
  4123  0025E6  321B               	rrcf	??_SetDCPWM1,f,c
  4124  0025E8  90D8               	bcf	status,0,c
  4125  0025EA  321B               	rrcf	??_SetDCPWM1,f,c
  4126  0025EC  0E30               	movlw	48
  4127  0025EE  161B               	andwf	??_SetDCPWM1,f,c
  4128  0025F0  50BD               	movf	4029,w,c	;volatile
  4129  0025F2  0BCF               	andlw	207
  4130  0025F4  101B               	iorwf	??_SetDCPWM1,w,c
  4131  0025F6  6EBD               	movwf	4029,c	;volatile
  4132  0025F8  0012               	return	
  4133  0025FA                     __end_of_SetDCPWM1:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           prodh	equ	0xFF4
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           indf0	equ	0xFEF
  4143                           postinc0	equ	0xFEE
  4144                           fsr0h	equ	0xFEA
  4145                           fsr0l	equ	0xFE9
  4146                           wreg	equ	0xFE8
  4147                           postinc1	equ	0xFE6
  4148                           postdec1	equ	0xFE5
  4149                           fsr1l	equ	0xFE1
  4150                           indf2	equ	0xFDF
  4151                           postinc2	equ	0xFDE
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _Lcd_Write_Integer *****************
  4157 ;; Defined at:
  4158 ;;		line 113 in file "lcd.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  a               2   88[BANK0 ] int 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  s              20    0[BANK1 ] unsigned char [20]
  4163 ;; Return value:  Size  Location     Type
  4164 ;;		None               void
  4165 ;; Registers used:
  4166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4172 ;;      Params:         0       2       0       0       0       0       0       0       0
  4173 ;;      Locals:         0       0      20       0       0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4175 ;;      Totals:         0       2      20       0       0       0       0       0       0
  4176 ;;Total ram usage:       22 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    8
  4179 ;; This function calls:
  4180 ;;		_Lcd_Write_String
  4181 ;;		_sprintf
  4182 ;; This function is called by:
  4183 ;;		_Comando_Tablet
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text25
  4188  0025FA                     __ptext25:
  4189                           	opt stack 0
  4190  0025FA                     _Lcd_Write_Integer:
  4191                           	opt stack 21
  4192                           
  4193                           ;lcd.c: 114: unsigned char s[20];
  4194                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4195                           
  4196                           ;incstack = 0
  4197  0025FA  0101               	movlb	1	; () banked
  4198  0025FC  0E01               	movlw	high Lcd_Write_Integer@s
  4199  0025FE  0100               	movlb	0	; () banked
  4200  002600  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4201  002602  0101               	movlb	1	; () banked
  4202  002604  0E5A               	movlw	low Lcd_Write_Integer@s
  4203  002606  0100               	movlb	0	; () banked
  4204  002608  6F88               	movwf	sprintf@sp& (0+255),b
  4205  00260A  0E7F               	movlw	high STR_19
  4206  00260C  0100               	movlb	0	; () banked
  4207  00260E  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4208  002610  0EAA               	movlw	low STR_19
  4209  002612  0100               	movlb	0	; () banked
  4210  002614  6F8A               	movwf	sprintf@f& (0+255),b
  4211  002616  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4212  00261A  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4213  00261E  EC0E  F000         	call	_sprintf	;wreg free
  4214                           
  4215                           ;lcd.c: 117: Lcd_Write_String(s);
  4216  002622  0101               	movlb	1	; () banked
  4217  002624  0E01               	movlw	high Lcd_Write_Integer@s
  4218  002626  6E1E               	movwf	Lcd_Write_String@a+1,c
  4219  002628  0101               	movlb	1	; () banked
  4220  00262A  0E5A               	movlw	low Lcd_Write_Integer@s
  4221  00262C  6E1D               	movwf	Lcd_Write_String@a,c
  4222  00262E  EC72  F010         	call	_Lcd_Write_String	;wreg free
  4223  002632  0012               	return	
  4224  002634                     __end_of_Lcd_Write_Integer:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           indf0	equ	0xFEF
  4234                           postinc0	equ	0xFEE
  4235                           fsr0h	equ	0xFEA
  4236                           fsr0l	equ	0xFE9
  4237                           wreg	equ	0xFE8
  4238                           postinc1	equ	0xFE6
  4239                           postdec1	equ	0xFE5
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function _sprintf *****************
  4248 ;; Defined at:
  4249 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4252 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4253 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4254 ;;		 -> STR_19(13), STR_18(11), STR_5(3), 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  vd              4   60[BANK0 ] unsigned long 
  4257 ;;  vd              4   64[BANK0 ] unsigned long 
  4258 ;;  _val            5   77[BANK0 ] struct .
  4259 ;;  fval            3   84[BANK0 ] struct .
  4260 ;;  integ           3   72[BANK0 ] struct .
  4261 ;;  ival            3    0        struct .
  4262 ;;  exp             2   82[BANK0 ] int 
  4263 ;;  prec            2   75[BANK0 ] int 
  4264 ;;  flag            2   70[BANK0 ] unsigned short 
  4265 ;;  ap              2   68[BANK0 ] PTR void [1]
  4266 ;;		 -> ?_sprintf(2), 
  4267 ;;  width           2    0        int 
  4268 ;;  c               1   87[BANK0 ] char 
  4269 ;;  d               1    0        unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2   40[BANK0 ] int 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4279 ;;      Params:         0       7       0       0       0       0       0       0       0
  4280 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4281 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4282 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4283 ;;Total ram usage:       48 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    7
  4286 ;; This function calls:
  4287 ;;		___awdiv
  4288 ;;		___ftadd
  4289 ;;		___ftge
  4290 ;;		___ftmul
  4291 ;;		___ftneg
  4292 ;;		___ftsub
  4293 ;;		___fttol
  4294 ;;		___lldiv
  4295 ;;		___llmod
  4296 ;;		___lltoft
  4297 ;;		___wmul
  4298 ;;		__div_to_l_
  4299 ;;		__tdiv_to_l_
  4300 ;;		_fround
  4301 ;;		_scale
  4302 ;; This function is called by:
  4303 ;;		_putcBluetoothInt
  4304 ;;		_Lcd_Write_Integer
  4305 ;;		_Lcd_Write_Float
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text26
  4310  00001C                     __ptext26:
  4311                           	opt stack 0
  4312  00001C                     _sprintf:
  4313                           	opt stack 21
  4314                           
  4315                           ;doprnt.c: 494: va_list ap;
  4316                           ;doprnt.c: 499: signed char c;
  4317                           ;doprnt.c: 501: int width;
  4318                           ;doprnt.c: 504: int prec;
  4319                           ;doprnt.c: 508: unsigned short flag;
  4320                           ;doprnt.c: 515: char d;
  4321                           ;doprnt.c: 516: double fval, integ;
  4322                           ;doprnt.c: 517: int exp;
  4323                           ;doprnt.c: 518: double ival;
  4324                           ;doprnt.c: 519: union {
  4325                           ;doprnt.c: 520: unsigned long _val;
  4326                           ;doprnt.c: 521: struct {
  4327                           ;doprnt.c: 522: const char * _cp;
  4328                           ;doprnt.c: 523: unsigned _len;
  4329                           ;doprnt.c: 524: } _str;
  4330                           ;doprnt.c: 525: } _val;
  4331                           ;doprnt.c: 542: *ap = __va_start();
  4332                           
  4333                           ;incstack = 0
  4334  00001C  0100               	movlb	0	; () banked
  4335  00001E  0E00               	movlw	high (?_sprintf+4)
  4336  000020  0100               	movlb	0	; () banked
  4337  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4338  000024  0100               	movlb	0	; () banked
  4339  000026  0E8C               	movlw	low (?_sprintf+4)
  4340  000028  0100               	movlb	0	; () banked
  4341  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4342                           
  4343                           ;doprnt.c: 545: while(c = *f++) {
  4344  00002C  EF87  F004         	goto	l5027
  4345  000030                     l4825:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;doprnt.c: 547: if(c != '%')
  4349  000030  0100               	movlb	0	; () banked
  4350  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4351  000034  0A25               	xorlw	37
  4352  000036  B4D8               	btfsc	status,2,c
  4353  000038  D00C               	goto	l4831
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;doprnt.c: 549: {
  4357                           ;doprnt.c: 550: ((*sp++ = (c)));
  4358  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4359  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4360  000042  0100               	movlb	0	; () banked
  4361  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4362                           
  4363                           ; BSR set to: 0
  4364  000048  0100               	movlb	0	; () banked
  4365  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4366  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4367                           
  4368                           ;doprnt.c: 551: continue;
  4369  00004E  EF87  F004         	goto	l5027
  4370  000052                     l4831:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 552: }
  4374                           ;doprnt.c: 557: flag = 0;
  4375  000052  0E00               	movlw	0
  4376  000054  0100               	movlb	0	; () banked
  4377  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4378  000058  0E00               	movlw	0
  4379  00005A  0100               	movlb	0	; () banked
  4380  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4381                           
  4382                           ;doprnt.c: 644: switch(c = *f++) {
  4383  00005E  D003               	goto	l4837
  4384  000060                     l4833:
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;doprnt.c: 672: flag |= 0x400;
  4388  000060  0100               	movlb	0	; () banked
  4389  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4390                           
  4391                           ;doprnt.c: 673: break;
  4392  000064  D01E               	goto	l4839
  4393  000066                     l4837:
  4394                           
  4395                           ; BSR set to: 0
  4396  000066  0100               	movlb	0	; () banked
  4397  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4398  00006C  0100               	movlb	0	; () banked
  4399  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4400  000072  0100               	movlb	0	; () banked
  4401  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4402  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4403  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4404  000078  6AF8               	clrf	tblptru,c
  4405  00007A                     	endif
  4406  00007A                     	if	0	;tblptru may be non-zero
  4407  00007A                     	endif
  4408  00007A  0008               	tblrd		*
  4409  00007C  0100               	movlb	0	; () banked
  4410  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4411  000082  0100               	movlb	0	; () banked
  4412  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4413                           
  4414                           ; Switch size 1, requested type "space"
  4415                           ; Number of cases is 4, Range of values is 0 to 105
  4416                           ; switch strategies available:
  4417                           ; Name         Instructions Cycles
  4418                           ; simple_byte           13     7 (average)
  4419                           ;	Chosen strategy is simple_byte
  4420  000086  0A00               	xorlw	0	; case 0
  4421  000088  B4D8               	btfsc	status,2,c
  4422  00008A  EF99  F004         	goto	l5029
  4423  00008E  0A64               	xorlw	100	; case 100
  4424  000090  B4D8               	btfsc	status,2,c
  4425  000092  D007               	goto	l4839
  4426  000094  0A02               	xorlw	2	; case 102
  4427  000096  B4D8               	btfsc	status,2,c
  4428  000098  D7E3               	goto	l4833
  4429  00009A  0A0F               	xorlw	15	; case 105
  4430  00009C  A4D8               	btfss	status,2,c
  4431  00009E  EF87  F004         	goto	l5027
  4432  0000A2                     l4839:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;doprnt.c: 834: if(flag & (0x700)) {
  4436  0000A2  0E07               	movlw	7
  4437  0000A4  0100               	movlb	0	; () banked
  4438  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4439  0000A8  B4D8               	btfsc	status,2,c
  4440  0000AA  D348               	goto	l4987
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;doprnt.c: 838: prec = 6;
  4444  0000AC  0E00               	movlw	0
  4445  0000AE  0100               	movlb	0	; () banked
  4446  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4447  0000B2  0E06               	movlw	6
  4448  0000B4  0100               	movlb	0	; () banked
  4449  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4453  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4454  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4455  0000C0  0100               	movlb	0	; () banked
  4456  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4457  0000C6  0100               	movlb	0	; () banked
  4458  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4459  0000CC  0100               	movlb	0	; () banked
  4460  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4461                           
  4462                           ; BSR set to: 0
  4463  0000D2  0E03               	movlw	3
  4464  0000D4  0100               	movlb	0	; () banked
  4465  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4466  0000D8  0E00               	movlw	0
  4467  0000DA  0100               	movlb	0	; () banked
  4468  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 840: if(fval < 0.0) {
  4472  0000DE  0100               	movlb	0	; () banked
  4473  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4474  0000E2  0A80               	xorlw	128
  4475  0000E4  0F80               	addlw	128
  4476  0000E6  E107               	bnz	u5025
  4477  0000E8  0E00               	movlw	0
  4478  0000EA  0100               	movlb	0	; () banked
  4479  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4480  0000EE  E103               	bnz	u5025
  4481  0000F0  0E00               	movlw	0
  4482  0000F2  0100               	movlb	0	; () banked
  4483  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4484  0000F6                     u5025:
  4485  0000F6  B0D8               	btfsc	status,0,c
  4486  0000F8  D011               	goto	l4853
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;doprnt.c: 841: fval = -fval;
  4490  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4491  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4492  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4493  000106  ECC6  F013         	call	___ftneg	;wreg free
  4494  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4495  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4496  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4497                           
  4498                           ;doprnt.c: 842: flag |= 0x03;
  4499  000116  0E03               	movlw	3
  4500  000118  0100               	movlb	0	; () banked
  4501  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4502  00011C                     l4853:
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 843: }
  4506                           ;doprnt.c: 844: exp = 0;
  4507  00011C  0E00               	movlw	0
  4508  00011E  0100               	movlb	0	; () banked
  4509  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4510  000122  0E00               	movlw	0
  4511  000124  0100               	movlb	0	; () banked
  4512  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;doprnt.c: 845: if( fval!=0) {
  4516  000128  0E7F               	movlw	127
  4517  00012A  0100               	movlb	0	; () banked
  4518  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4519  00012E  0100               	movlb	0	; () banked
  4520  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4521  000132  0100               	movlb	0	; () banked
  4522  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4523  000136  B4D8               	btfsc	status,2,c
  4524  000138  D09C               	goto	l4881
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4528  00013A  0E82               	movlw	130
  4529  00013C  0100               	movlb	0	; () banked
  4530  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4531  000140  0EFF               	movlw	255
  4532  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4533  000144  0100               	movlb	0	; () banked
  4534  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4535  00014A  0100               	movlb	0	; () banked
  4536  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4537  000150  0100               	movlb	0	; () banked
  4538  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4539  000156  0100               	movlb	0	; () banked
  4540  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4541  00015C  0E10               	movlw	16
  4542  00015E  D006               	goto	u5040
  4543  000160                     u5045:
  4544  000160  0100               	movlb	0	; () banked
  4545  000162  90D8               	bcf	status,0,c
  4546  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4547  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4548  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4549  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4550  00016C                     u5040:
  4551  00016C  2EE8               	decfsz	wreg,f,c
  4552  00016E  D7F8               	goto	u5045
  4553  000170  0100               	movlb	0	; () banked
  4554  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4555  000174  0100               	movlb	0	; () banked
  4556  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4557  000178  0100               	movlb	0	; () banked
  4558  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4559  00017C  0E00               	movlw	0
  4560  00017E  0100               	movlb	0	; () banked
  4561  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4562  000182  0100               	movlb	0	; () banked
  4563  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;doprnt.c: 847: exp--;
  4567  000186  0100               	movlb	0	; () banked
  4568  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4569  00018A  A0D8               	btfss	status,0,c
  4570  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 848: exp *= 3;
  4574  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4575  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4576  000196  0E00               	movlw	0
  4577  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4578  00019A  0E03               	movlw	3
  4579  00019C  6E29               	movwf	___wmul@multiplicand,c
  4580  00019E  ECB3  F013         	call	___wmul	;wreg free
  4581  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4582  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4583                           
  4584                           ;doprnt.c: 849: exp /= 10;
  4585  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4586  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4587  0001B2  0E00               	movlw	0
  4588  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4589  0001B6  0E0A               	movlw	10
  4590  0001B8  6E21               	movwf	___awdiv@divisor,c
  4591  0001BA  ECFB  F00D         	call	___awdiv	;wreg free
  4592  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4593  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4594                           
  4595                           ;doprnt.c: 850: if(exp < 0)
  4596  0001C6  0100               	movlb	0	; () banked
  4597  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4598  0001CA  0A80               	xorlw	128
  4599  0001CC  6EF3               	movwf	prodl,c
  4600  0001CE  0E80               	movlw	128
  4601  0001D0  5CF3               	subwf	prodl,w,c
  4602  0001D2  0E00               	movlw	0
  4603  0001D4  B4D8               	btfsc	status,2,c
  4604  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4605  0001D8  B0D8               	btfsc	status,0,c
  4606  0001DA  D004               	goto	l4869
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 851: exp--;
  4610  0001DC  0100               	movlb	0	; () banked
  4611  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4612  0001E0  A0D8               	btfss	status,0,c
  4613  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4614  0001E4                     l4869:
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;doprnt.c: 855: integ = scale(-exp);
  4618  0001E4  0100               	movlb	0	; () banked
  4619  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4620  0001E8  0800               	sublw	0
  4621  0001EA  ECA0  F004         	call	_scale
  4622  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4623  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4624  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4625                           
  4626                           ;doprnt.c: 856: integ *= fval;
  4627  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4628  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4629  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4630  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4631  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4632  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4633  000212  EC6F  F009         	call	___ftmul	;wreg free
  4634  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4635  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4636  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4637                           
  4638                           ;doprnt.c: 857: if(integ < 1.0)
  4639  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4640  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4641  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4642  00022E  0E00               	movlw	0
  4643  000230  6E1C               	movwf	___ftge@ff2,c
  4644  000232  0E80               	movlw	128
  4645  000234  6E1D               	movwf	___ftge@ff2+1,c
  4646  000236  0E3F               	movlw	63
  4647  000238  6E1E               	movwf	___ftge@ff2+2,c
  4648  00023A  EC2A  F00F         	call	___ftge	;wreg free
  4649  00023E  B0D8               	btfsc	status,0,c
  4650  000240  D005               	goto	l4877
  4651                           
  4652                           ;doprnt.c: 858: exp--;
  4653  000242  0100               	movlb	0	; () banked
  4654  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4655  000246  A0D8               	btfss	status,0,c
  4656  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4657  00024A  D013               	goto	l4881
  4658  00024C                     l4877:
  4659                           
  4660                           ;doprnt.c: 859: else if(integ >= 10.0)
  4661  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4662  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4663  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4664  000258  0E00               	movlw	0
  4665  00025A  6E1C               	movwf	___ftge@ff2,c
  4666  00025C  0E20               	movlw	32
  4667  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4668  000260  0E41               	movlw	65
  4669  000262  6E1E               	movwf	___ftge@ff2+2,c
  4670  000264  EC2A  F00F         	call	___ftge	;wreg free
  4671  000268  A0D8               	btfss	status,0,c
  4672  00026A  D003               	goto	l4881
  4673                           
  4674                           ;doprnt.c: 860: exp++;
  4675  00026C  0100               	movlb	0	; () banked
  4676  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4677  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4678  000272                     l4881:
  4679                           
  4680                           ;doprnt.c: 861: }
  4681                           ;doprnt.c: 1121: if(prec <= 12)
  4682  000272  0100               	movlb	0	; () banked
  4683  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4684  000276  0A80               	xorlw	128
  4685  000278  6EF3               	movwf	prodl,c
  4686  00027A  0E80               	movlw	128
  4687  00027C  5CF3               	subwf	prodl,w,c
  4688  00027E  0E0D               	movlw	13
  4689  000280  B4D8               	btfsc	status,2,c
  4690  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4691  000284  B0D8               	btfsc	status,0,c
  4692  000286  D018               	goto	l4885
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;doprnt.c: 1122: fval += fround(prec);
  4696  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4697  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4698  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4699  000294  0100               	movlb	0	; () banked
  4700  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4701  000298  ECDC  F006         	call	_fround
  4702  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4703  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4704  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4705  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4706  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4707  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4708  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4709  0002B8                     l4885:
  4710                           
  4711                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4712  0002B8  0100               	movlb	0	; () banked
  4713  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4714  0002BC  0A80               	xorlw	128
  4715  0002BE  6EF3               	movwf	prodl,c
  4716  0002C0  0E80               	movlw	128
  4717  0002C2  5CF3               	subwf	prodl,w,c
  4718  0002C4  0E0A               	movlw	10
  4719  0002C6  B4D8               	btfsc	status,2,c
  4720  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4721  0002CA  B0D8               	btfsc	status,0,c
  4722  0002CC  D029               	goto	l4893
  4723                           
  4724                           ; BSR set to: 0
  4725  0002CE  0E7F               	movlw	127
  4726  0002D0  0100               	movlb	0	; () banked
  4727  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4728  0002D4  0100               	movlb	0	; () banked
  4729  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4730  0002D8  0100               	movlb	0	; () banked
  4731  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4732  0002DC  B4D8               	btfsc	status,2,c
  4733  0002DE  D06C               	goto	l4909
  4734                           
  4735                           ; BSR set to: 0
  4736  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4737  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4738  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4739  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4740  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4741  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4742  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4743  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4744  000300  0100               	movlb	0	; () banked
  4745  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4746  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4747  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4748  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4749  00030A  A4D8               	btfss	status,2,c
  4750  00030C  D055               	goto	l4909
  4751                           
  4752                           ; BSR set to: 0
  4753  00030E  0100               	movlb	0	; () banked
  4754  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4755  000312  0A80               	xorlw	128
  4756  000314  0F80               	addlw	-128
  4757  000316  0E02               	movlw	2
  4758  000318  B4D8               	btfsc	status,2,c
  4759  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4760  00031C  A0D8               	btfss	status,0,c
  4761  00031E  D04C               	goto	l4909
  4762  000320                     l4893:
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4766  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4767  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4768  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4769  00032C  0E70               	movlw	112
  4770  00032E  6E1C               	movwf	___ftge@ff2,c
  4771  000330  0E89               	movlw	137
  4772  000332  6E1D               	movwf	___ftge@ff2+1,c
  4773  000334  0E40               	movlw	64
  4774  000336  6E1E               	movwf	___ftge@ff2+2,c
  4775  000338  EC2A  F00F         	call	___ftge	;wreg free
  4776  00033C  B0D8               	btfsc	status,0,c
  4777  00033E  D003               	goto	l4897
  4778                           
  4779                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4780  000340  0100               	movlb	0	; () banked
  4781  000342  0EF7               	movlw	247
  4782  000344  D002               	goto	L3
  4783  000346                     l4897:
  4784                           
  4785                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4786  000346  0100               	movlb	0	; () banked
  4787  000348  0EF8               	movlw	248
  4788  00034A                     L3:
  4789  00034A  0100               	movlb	0	; () banked
  4790  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  4791  00034E  0EFF               	movlw	255
  4792  000350  0100               	movlb	0	; () banked
  4793  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;doprnt.c: 1133: }
  4797                           ;doprnt.c: 1134: integ = scale(exp);
  4798                           
  4799                           ; BSR set to: 0
  4800  000354  0100               	movlb	0	; () banked
  4801  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  4802  000358  ECA0  F004         	call	_scale
  4803  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  4804  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4805  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4806                           
  4807                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  4808  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4809  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4810  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4811  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  4812  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  4813  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  4814  000380  ECFD  F00B         	call	__tdiv_to_l_	;wreg free
  4815  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1239
  4816  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1239+1
  4817  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1239+2
  4818  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1239+3
  4819  000394  C098  F0AD         	movff	_sprintf$1239,sprintf@_val
  4820  000398  C099  F0AE         	movff	_sprintf$1239+1,sprintf@_val+1
  4821  00039C  C09A  F0AF         	movff	_sprintf$1239+2,sprintf@_val+2
  4822  0003A0  C09B  F0B0         	movff	_sprintf$1239+3,sprintf@_val+3
  4823                           
  4824                           ;doprnt.c: 1138: fval = 0.0;
  4825  0003A4  0E00               	movlw	0
  4826  0003A6  0100               	movlb	0	; () banked
  4827  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  4828  0003AA  0E00               	movlw	0
  4829  0003AC  0100               	movlb	0	; () banked
  4830  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  4831  0003B0  0E00               	movlw	0
  4832  0003B2  0100               	movlb	0	; () banked
  4833  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  4834                           
  4835                           ;doprnt.c: 1139: } else {
  4836  0003B6  D034               	goto	l4913
  4837  0003B8                     l4909:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  4841  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4842  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4843  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4844  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  4845  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  4846  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  4847  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  4848  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  4849                           
  4850                           ;doprnt.c: 1141: fval -= (double)_val._val;
  4851  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  4852  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  4853  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  4854  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  4855  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  4856  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  4857  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  4858  0003F4  ECC1  F011         	call	___lltoft	;wreg free
  4859  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  4860  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  4861  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  4862  000404  EC88  F012         	call	___ftsub	;wreg free
  4863  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  4864  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  4865  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  4866                           
  4867                           ;doprnt.c: 1142: exp = 0;
  4868  000414  0E00               	movlw	0
  4869  000416  0100               	movlb	0	; () banked
  4870  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4871  00041A  0E00               	movlw	0
  4872  00041C  0100               	movlb	0	; () banked
  4873  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  4874  000420                     l4913:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;doprnt.c: 1143: }
  4878                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4879  000420  0E01               	movlw	1
  4880  000422  0100               	movlb	0	; () banked
  4881  000424  6FB7               	movwf	sprintf@c& (0+255),b
  4882  000426                     
  4883                           ; BSR set to: 0
  4884  000426  0100               	movlb	0	; () banked
  4885  000428  51B7               	movf	sprintf@c& (0+255),w,b
  4886  00042A  0A0A               	xorlw	10
  4887  00042C  B4D8               	btfsc	status,2,c
  4888  00042E  D021               	goto	l4927
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  4892                           
  4893                           ; BSR set to: 0
  4894                           
  4895                           ; BSR set to: 0
  4896  000430  0100               	movlb	0	; () banked
  4897  000432  51B7               	movf	sprintf@c& (0+255),w,b
  4898  000434  0D04               	mullw	4
  4899  000436  0ECB               	movlw	low _dpowers
  4900  000438  24F3               	addwf	prodl,w,c
  4901  00043A  6EF6               	movwf	tblptrl,c
  4902  00043C  0E7E               	movlw	high _dpowers
  4903  00043E  20F4               	addwfc	prodh,w,c
  4904  000440  6EF7               	movwf	tblptrh,c
  4905  000442                     	if	1	;There are 3 active tblptr bytes
  4906  000442  6AF8               	clrf	tblptru,c
  4907  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  4908  000446  22F8               	addwfc	tblptru,f,c
  4909  000448                     	endif
  4910  000448  0009               	tblrd		*+
  4911  00044A  50F5               	movf	tablat,w,c
  4912  00044C  0100               	movlb	0	; () banked
  4913  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  4914  000450  0009               	tblrd		*+
  4915  000452  50F5               	movf	tablat,w,c
  4916  000454  0100               	movlb	0	; () banked
  4917  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4918  000458  0009               	tblrd		*+
  4919  00045A  50F5               	movf	tablat,w,c
  4920  00045C  0100               	movlb	0	; () banked
  4921  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4922  000460  0009               	tblrd		*+
  4923  000462  50F5               	movf	tablat,w,c
  4924  000464  0100               	movlb	0	; () banked
  4925  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4926  000468  A0D8               	btfss	status,0,c
  4927  00046A  D003               	goto	l4927
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;doprnt.c: 1147: break;
  4935  00046C  0100               	movlb	0	; () banked
  4936  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  4937  000470  D7DA               	goto	L4
  4938  000472                     l4927:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;doprnt.c: 1184: {
  4942                           ;doprnt.c: 1197: if(flag & 0x03)
  4943  000472  0E03               	movlw	3
  4944  000474  0100               	movlb	0	; () banked
  4945  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  4946  000478  0100               	movlb	0	; () banked
  4947  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  4948  00047C  0E00               	movlw	0
  4949  00047E  0100               	movlb	0	; () banked
  4950  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4951  000482  0100               	movlb	0	; () banked
  4952  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4953  000486  0100               	movlb	0	; () banked
  4954  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  4955  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  4956  00048C  B4D8               	btfsc	status,2,c
  4957  00048E  D055               	goto	l4941
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  4961  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  4962  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4963  000498  0E2D               	movlw	45
  4964  00049A  D04B               	goto	L5
  4965  00049C                     l4933:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 1209: {
  4969                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  4970  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  4971  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  4972  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  4973  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  4974  0004AC  0100               	movlb	0	; () banked
  4975  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  4976  0004B0  0D04               	mullw	4
  4977  0004B2  0ECB               	movlw	low _dpowers
  4978  0004B4  24F3               	addwf	prodl,w,c
  4979  0004B6  6EF6               	movwf	tblptrl,c
  4980  0004B8  0E7E               	movlw	high _dpowers
  4981  0004BA  20F4               	addwfc	prodh,w,c
  4982  0004BC  6EF7               	movwf	tblptrh,c
  4983  0004BE                     	if	1	;There are 3 active tblptr bytes
  4984  0004BE  6AF8               	clrf	tblptru,c
  4985  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4986  0004C2  22F8               	addwfc	tblptru,f,c
  4987  0004C4                     	endif
  4988  0004C4  0009               	tblrd		*+
  4989  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4990  0004CA  0009               	tblrd		*+
  4991  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4992  0004D0  0009               	tblrd		*+
  4993  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4994  0004D6  000A               	tblrd		*-
  4995  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4996  0004DC  ECB5  F00F         	call	___lldiv	;wreg free
  4997  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  4998  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  4999  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5000  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5001                           
  5002                           ;doprnt.c: 1211: vd %= 10;
  5003  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5004  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5005  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5006  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5007  000500  0E0A               	movlw	10
  5008  000502  6E2A               	movwf	___llmod@divisor,c
  5009  000504  0E00               	movlw	0
  5010  000506  6E2B               	movwf	___llmod@divisor+1,c
  5011  000508  0E00               	movlw	0
  5012  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5013  00050C  0E00               	movlw	0
  5014  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5015  000510  EC8E  F011         	call	___llmod	;wreg free
  5016  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5017  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5018  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5019  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5020                           
  5021                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5022  000524  0100               	movlb	0	; () banked
  5023  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5024  000528  0F30               	addlw	48
  5025  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5026  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5027  000532                     L5:
  5028  000532  6EDF               	movwf	indf2,c
  5029                           
  5030                           ; BSR set to: 0
  5031  000534  0100               	movlb	0	; () banked
  5032  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5033  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5034  00053A                     l4941:
  5035                           
  5036                           ; BSR set to: 0
  5037  00053A  0100               	movlb	0	; () banked
  5038  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5039  00053E  0100               	movlb	0	; () banked
  5040  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5041  000542  B4D8               	btfsc	status,2,c
  5042  000544  D00E               	goto	l4949
  5043  000546  D7AA               	goto	l4933
  5044  000548                     l4943:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5048  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5049  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5050  000550  0E30               	movlw	48
  5051  000552  6EDF               	movwf	indf2,c
  5052                           
  5053                           ; BSR set to: 0
  5054  000554  0100               	movlb	0	; () banked
  5055  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5056  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;doprnt.c: 1218: exp--;
  5060  00055A  0100               	movlb	0	; () banked
  5061  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5062  00055E  A0D8               	btfss	status,0,c
  5063  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5064  000562                     l4949:
  5065                           
  5066                           ; BSR set to: 0
  5067  000562  0100               	movlb	0	; () banked
  5068  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5069  000566  0A80               	xorlw	128
  5070  000568  6EF3               	movwf	prodl,c
  5071  00056A  0E80               	movlw	128
  5072  00056C  5CF3               	subwf	prodl,w,c
  5073  00056E  0E01               	movlw	1
  5074  000570  B4D8               	btfsc	status,2,c
  5075  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5076  000574  B0D8               	btfsc	status,0,c
  5077  000576  D7E8               	goto	l4943
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;doprnt.c: 1219: }
  5081                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5082                           
  5083                           ; BSR set to: 0
  5084  000578  0100               	movlb	0	; () banked
  5085  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5086  00057C  0A80               	xorlw	128
  5087  00057E  0F80               	addlw	-128
  5088  000580  0E09               	movlw	9
  5089  000582  B4D8               	btfsc	status,2,c
  5090  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5091  000586  A0D8               	btfss	status,0,c
  5092  000588  D004               	goto	l485
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5096  00058A  0E08               	movlw	8
  5097  00058C  0100               	movlb	0	; () banked
  5098  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5099  000590  D002               	goto	l4955
  5100  000592                     l485:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1222: else
  5104                           ;doprnt.c: 1223: c = prec;
  5105  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5106  000596                     l4955:
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;doprnt.c: 1224: prec -= c;
  5110  000596  0100               	movlb	0	; () banked
  5111  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5112  00059A  0100               	movlb	0	; () banked
  5113  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5114  00059E  0E00               	movlw	0
  5115  0005A0  0100               	movlb	0	; () banked
  5116  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5117  0005A4  0EFF               	movlw	255
  5118  0005A6  0100               	movlb	0	; () banked
  5119  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 1228: if(c)
  5123  0005AA  0100               	movlb	0	; () banked
  5124  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5125  0005AE  B4D8               	btfsc	status,2,c
  5126  0005B0  D009               	goto	l4963
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5130  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5131  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5132  0005BA  0E2E               	movlw	46
  5133  0005BC  6EDF               	movwf	indf2,c
  5134                           
  5135                           ; BSR set to: 0
  5136  0005BE  0100               	movlb	0	; () banked
  5137  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5138  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5139  0005C4                     l4963:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5143  0005C4  0100               	movlb	0	; () banked
  5144  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5145  0005C8  ECA0  F004         	call	_scale
  5146  0005CC  C06C  F095         	movff	?_scale,_sprintf$2290
  5147  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2290+1
  5148  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2290+2
  5149                           
  5150                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5151  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5152  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5153  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5154  0005E4  C095  F060         	movff	_sprintf$2290,___ftmul@f1
  5155  0005E8  C096  F061         	movff	_sprintf$2290+1,___ftmul@f1+1
  5156  0005EC  C097  F062         	movff	_sprintf$2290+2,___ftmul@f1+2
  5157  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5158  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5159  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5160  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5161  000600  EC1B  F00A         	call	___fttol	;wreg free
  5162  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5163  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5164  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5165  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5166                           
  5167                           ;doprnt.c: 1237: while(c--) {
  5168  000614  D079               	goto	l4977
  5169  000616                     l4967:
  5170                           
  5171                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5172  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5173  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5174  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5175  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5176  000626  0100               	movlb	0	; () banked
  5177  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5178  00062A  0D04               	mullw	4
  5179  00062C  0ECB               	movlw	low _dpowers
  5180  00062E  24F3               	addwf	prodl,w,c
  5181  000630  6EF6               	movwf	tblptrl,c
  5182  000632  0E7E               	movlw	high _dpowers
  5183  000634  20F4               	addwfc	prodh,w,c
  5184  000636  6EF7               	movwf	tblptrh,c
  5185  000638                     	if	1	;There are 3 active tblptr bytes
  5186  000638  6AF8               	clrf	tblptru,c
  5187  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5188  00063C  22F8               	addwfc	tblptru,f,c
  5189  00063E                     	endif
  5190  00063E  0009               	tblrd		*+
  5191  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5192  000644  0009               	tblrd		*+
  5193  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5194  00064A  0009               	tblrd		*+
  5195  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5196  000650  000A               	tblrd		*-
  5197  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5198  000656  ECB5  F00F         	call	___lldiv	;wreg free
  5199  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1241
  5200  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1241+1
  5201  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1241+2
  5202  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1241+3
  5203                           
  5204                           ;doprnt.c: 1239: vd %= 10;
  5205  00066A  C0A0  F026         	movff	sprintf@vd_1241,___llmod@dividend
  5206  00066E  C0A1  F027         	movff	sprintf@vd_1241+1,___llmod@dividend+1
  5207  000672  C0A2  F028         	movff	sprintf@vd_1241+2,___llmod@dividend+2
  5208  000676  C0A3  F029         	movff	sprintf@vd_1241+3,___llmod@dividend+3
  5209  00067A  0E0A               	movlw	10
  5210  00067C  6E2A               	movwf	___llmod@divisor,c
  5211  00067E  0E00               	movlw	0
  5212  000680  6E2B               	movwf	___llmod@divisor+1,c
  5213  000682  0E00               	movlw	0
  5214  000684  6E2C               	movwf	___llmod@divisor+2,c
  5215  000686  0E00               	movlw	0
  5216  000688  6E2D               	movwf	___llmod@divisor+3,c
  5217  00068A  EC8E  F011         	call	___llmod	;wreg free
  5218  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1241
  5219  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1241+1
  5220  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1241+2
  5221  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1241+3
  5222                           
  5223                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5224  00069E  0100               	movlb	0	; () banked
  5225  0006A0  51A0               	movf	sprintf@vd_1241& (0+255),w,b
  5226  0006A2  0F30               	addlw	48
  5227  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5228  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5229  0006AC  6EDF               	movwf	indf2,c
  5230                           
  5231                           ; BSR set to: 0
  5232  0006AE  0100               	movlb	0	; () banked
  5233  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5234  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5238  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5239  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5240  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5241  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5242  0006C4  0100               	movlb	0	; () banked
  5243  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5244  0006C8  0D04               	mullw	4
  5245  0006CA  0ECB               	movlw	low _dpowers
  5246  0006CC  24F3               	addwf	prodl,w,c
  5247  0006CE  6EF6               	movwf	tblptrl,c
  5248  0006D0  0E7E               	movlw	high _dpowers
  5249  0006D2  20F4               	addwfc	prodh,w,c
  5250  0006D4  6EF7               	movwf	tblptrh,c
  5251  0006D6                     	if	1	;There are 3 active tblptr bytes
  5252  0006D6  6AF8               	clrf	tblptru,c
  5253  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5254  0006DA  22F8               	addwfc	tblptru,f,c
  5255  0006DC                     	endif
  5256  0006DC  0009               	tblrd		*+
  5257  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5258  0006E2  0009               	tblrd		*+
  5259  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5260  0006E8  0009               	tblrd		*+
  5261  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5262  0006EE  000A               	tblrd		*-
  5263  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5264  0006F4  EC8E  F011         	call	___llmod	;wreg free
  5265  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5266  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5267  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5268  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5269  000708                     l4977:
  5270  000708  0100               	movlb	0	; () banked
  5271  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5272  00070C  0100               	movlb	0	; () banked
  5273  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5274  000710  B4D8               	btfsc	status,2,c
  5275  000712  D00E               	goto	l4985
  5276  000714  D780               	goto	l4967
  5277  000716                     l4979:
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5281  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5282  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5283  00071E  0E30               	movlw	48
  5284  000720  6EDF               	movwf	indf2,c
  5285                           
  5286                           ; BSR set to: 0
  5287  000722  0100               	movlb	0	; () banked
  5288  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5289  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;doprnt.c: 1246: prec--;
  5293  000728  0100               	movlb	0	; () banked
  5294  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5295  00072C  A0D8               	btfss	status,0,c
  5296  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5297  000730                     l4985:
  5298                           
  5299                           ; BSR set to: 0
  5300  000730  0100               	movlb	0	; () banked
  5301  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5302  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5303  000736  B4D8               	btfsc	status,2,c
  5304  000738  D0EA               	goto	l5027
  5305  00073A  D7ED               	goto	l4979
  5306  00073C                     l4987:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 1255: }
  5310                           ;doprnt.c: 1262: {
  5311                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5312  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5313  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5314  000744  0100               	movlb	0	; () banked
  5315  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5316  00074A  0100               	movlb	0	; () banked
  5317  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5318  000750  0100               	movlb	0	; () banked
  5319  000752  0E00               	movlw	0
  5320  000754  0100               	movlb	0	; () banked
  5321  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5322  000758  0EFF               	movlw	-1
  5323  00075A  0100               	movlb	0	; () banked
  5324  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5325  00075E  0100               	movlb	0	; () banked
  5326  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5327                           
  5328                           ; BSR set to: 0
  5329  000762  0E02               	movlw	2
  5330  000764  0100               	movlb	0	; () banked
  5331  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5332  000768  0E00               	movlw	0
  5333  00076A  0100               	movlb	0	; () banked
  5334  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5338  00076E  0100               	movlb	0	; () banked
  5339  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5340  000772  0A80               	xorlw	128
  5341  000774  0F80               	addlw	128
  5342  000776  E10B               	bnz	u5245
  5343  000778  0E00               	movlw	0
  5344  00077A  0100               	movlb	0	; () banked
  5345  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5346  00077E  E107               	bnz	u5245
  5347  000780  0E00               	movlw	0
  5348  000782  0100               	movlb	0	; () banked
  5349  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5350  000786  E103               	bnz	u5245
  5351  000788  0E00               	movlw	0
  5352  00078A  0100               	movlb	0	; () banked
  5353  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5354  00078E                     u5245:
  5355  00078E  B0D8               	btfsc	status,0,c
  5356  000790  D012               	goto	l4997
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;doprnt.c: 1271: flag |= 0x03;
  5360  000792  0E03               	movlw	3
  5361  000794  0100               	movlb	0	; () banked
  5362  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;doprnt.c: 1272: _val._val = -_val._val;
  5366  000798  0100               	movlb	0	; () banked
  5367  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5368  00079C  0100               	movlb	0	; () banked
  5369  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5370  0007A0  0100               	movlb	0	; () banked
  5371  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5372  0007A4  0100               	movlb	0	; () banked
  5373  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5374  0007A8  0E00               	movlw	0
  5375  0007AA  0100               	movlb	0	; () banked
  5376  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5377  0007AE  0100               	movlb	0	; () banked
  5378  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5379  0007B2  0100               	movlb	0	; () banked
  5380  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5381  0007B6                     l4997:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 1273: }
  5385                           ;doprnt.c: 1275: }
  5386                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5387  0007B6  0E01               	movlw	1
  5388  0007B8  0100               	movlb	0	; () banked
  5389  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5390  0007BC                     
  5391                           ; BSR set to: 0
  5392  0007BC  0100               	movlb	0	; () banked
  5393  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5394  0007C0  0A0A               	xorlw	10
  5395  0007C2  B4D8               	btfsc	status,2,c
  5396  0007C4  D021               	goto	l5011
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5400                           
  5401                           ; BSR set to: 0
  5402                           
  5403                           ; BSR set to: 0
  5404  0007C6  0100               	movlb	0	; () banked
  5405  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5406  0007CA  0D04               	mullw	4
  5407  0007CC  0ECB               	movlw	low _dpowers
  5408  0007CE  24F3               	addwf	prodl,w,c
  5409  0007D0  6EF6               	movwf	tblptrl,c
  5410  0007D2  0E7E               	movlw	high _dpowers
  5411  0007D4  20F4               	addwfc	prodh,w,c
  5412  0007D6  6EF7               	movwf	tblptrh,c
  5413  0007D8                     	if	1	;There are 3 active tblptr bytes
  5414  0007D8  6AF8               	clrf	tblptru,c
  5415  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5416  0007DC  22F8               	addwfc	tblptru,f,c
  5417  0007DE                     	endif
  5418  0007DE  0009               	tblrd		*+
  5419  0007E0  50F5               	movf	tablat,w,c
  5420  0007E2  0100               	movlb	0	; () banked
  5421  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5422  0007E6  0009               	tblrd		*+
  5423  0007E8  50F5               	movf	tablat,w,c
  5424  0007EA  0100               	movlb	0	; () banked
  5425  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5426  0007EE  0009               	tblrd		*+
  5427  0007F0  50F5               	movf	tablat,w,c
  5428  0007F2  0100               	movlb	0	; () banked
  5429  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5430  0007F6  0009               	tblrd		*+
  5431  0007F8  50F5               	movf	tablat,w,c
  5432  0007FA  0100               	movlb	0	; () banked
  5433  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5434  0007FE  A0D8               	btfss	status,0,c
  5435  000800  D003               	goto	l5011
  5436                           
  5437                           ; BSR set to: 0
  5438                           
  5439                           ; BSR set to: 0
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1316: break;
  5443  000802  0100               	movlb	0	; () banked
  5444  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5445  000806  D7DA               	goto	L6
  5446  000808                     l5011:
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;doprnt.c: 1431: {
  5450                           ;doprnt.c: 1447: if(flag & 0x03)
  5451  000808  0E03               	movlw	3
  5452  00080A  0100               	movlb	0	; () banked
  5453  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5454  00080E  0100               	movlb	0	; () banked
  5455  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5456  000812  0E00               	movlw	0
  5457  000814  0100               	movlb	0	; () banked
  5458  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5459  000818  0100               	movlb	0	; () banked
  5460  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5461  00081C  0100               	movlb	0	; () banked
  5462  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5463  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5464  000822  B4D8               	btfsc	status,2,c
  5465  000824  D009               	goto	l5017
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5469  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5470  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5471  00082E  0E2D               	movlw	45
  5472  000830  6EDF               	movwf	indf2,c
  5473                           
  5474                           ; BSR set to: 0
  5475  000832  0100               	movlb	0	; () banked
  5476  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5477  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5478  000838                     l5017:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 1478: }
  5482                           ;doprnt.c: 1481: prec = c;
  5483  000838  0100               	movlb	0	; () banked
  5484  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5485  00083C  0100               	movlb	0	; () banked
  5486  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5487  000840  0100               	movlb	0	; () banked
  5488  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5489  000844  0100               	movlb	0	; () banked
  5490  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5491  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5492                           
  5493                           ;doprnt.c: 1483: while(prec--) {
  5494  00084A  D057               	goto	l5025
  5495  00084C                     l5019:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;doprnt.c: 1487: {
  5499                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5500  00084C  0100               	movlb	0	; () banked
  5501  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5502  000852  0100               	movlb	0	; () banked
  5503  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5504  000858  0100               	movlb	0	; () banked
  5505  00085A  90D8               	bcf	status,0,c
  5506  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5507  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5508  000860  0100               	movlb	0	; () banked
  5509  000862  90D8               	bcf	status,0,c
  5510  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5511  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5512  000868  0ECB               	movlw	low _dpowers
  5513  00086A  0100               	movlb	0	; () banked
  5514  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5515  00086E  6EF6               	movwf	tblptrl,c
  5516  000870  0E7E               	movlw	high _dpowers
  5517  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5518  000874  6EF7               	movwf	tblptrh,c
  5519  000876                     	if	1	;There are 3 active tblptr bytes
  5520  000876  6AF8               	clrf	tblptru,c
  5521  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5522  00087A  22F8               	addwfc	tblptru,f,c
  5523  00087C                     	endif
  5524  00087C  0009               	tblrd		*+
  5525  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5526  000882  0009               	tblrd		*+
  5527  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5528  000888  0009               	tblrd		*+
  5529  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5530  00088E  000A               	tblrd		*-
  5531  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5532  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5533  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5534  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5535  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5536  0008A4  ECB5  F00F         	call	___lldiv	;wreg free
  5537  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5538  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5539  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5540  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5541  0008B8  0E0A               	movlw	10
  5542  0008BA  6E2A               	movwf	___llmod@divisor,c
  5543  0008BC  0E00               	movlw	0
  5544  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5545  0008C0  0E00               	movlw	0
  5546  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5547  0008C4  0E00               	movlw	0
  5548  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5549  0008C8  EC8E  F011         	call	___llmod	;wreg free
  5550  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5551  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5552  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5553  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5554  0008DC  0100               	movlb	0	; () banked
  5555  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5556  0008E0  0F30               	addlw	48
  5557  0008E2  0100               	movlb	0	; () banked
  5558  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;doprnt.c: 1532: }
  5562                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5563  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5564  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5565  0008EE  0100               	movlb	0	; () banked
  5566  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5567                           
  5568                           ; BSR set to: 0
  5569  0008F4  0100               	movlb	0	; () banked
  5570  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5571  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5572  0008FA                     l5025:
  5573                           
  5574                           ; BSR set to: 0
  5575  0008FA  0100               	movlb	0	; () banked
  5576  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5577  0008FE  A0D8               	btfss	status,0,c
  5578  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5579  000902  0100               	movlb	0	; () banked
  5580  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5581  000906  B4D8               	btfsc	status,2,c
  5582  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5583  00090A  A4D8               	btfss	status,2,c
  5584  00090C  D79F               	goto	l5019
  5585  00090E                     l5027:
  5586                           
  5587                           ; BSR set to: 0
  5588  00090E  0100               	movlb	0	; () banked
  5589  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5590  000914  0100               	movlb	0	; () banked
  5591  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5592  00091A  0100               	movlb	0	; () banked
  5593  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5594  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5595  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5596  000920  6AF8               	clrf	tblptru,c
  5597  000922                     	endif
  5598  000922                     	if	0	;tblptru may be non-zero
  5599  000922                     	endif
  5600  000922  0008               	tblrd		*
  5601  000924  0100               	movlb	0	; () banked
  5602  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5603  00092A  0100               	movlb	0	; () banked
  5604  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5605  00092E  EF18  F000         	goto	l4825
  5606  000932                     l5029:
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;doprnt.c: 1547: *sp = 0;
  5610  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5611  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5612  00093A  0E00               	movlw	0
  5613  00093C  6EDF               	movwf	indf2,c
  5614                           
  5615                           ; BSR set to: 0
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;doprnt.c: 1549: return 0;
  5619                           ;	Return value of _sprintf is never used
  5620  00093E  0012               	return	
  5621  000940                     __end_of_sprintf:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           indf0	equ	0xFEF
  5631                           postinc0	equ	0xFEE
  5632                           fsr0h	equ	0xFEA
  5633                           fsr0l	equ	0xFE9
  5634                           wreg	equ	0xFE8
  5635                           postinc1	equ	0xFE6
  5636                           postdec1	equ	0xFE5
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function _scale *****************
  5646 ;; Defined at:
  5647 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  scl             1    wreg     char 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  scl             1   18[BANK0 ] char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  3   12[BANK0 ] char 
  5654 ;; Registers used:
  5655 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5661 ;;      Params:         0       3       0       0       0       0       0       0       0
  5662 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5664 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5665 ;;Total ram usage:        7 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    6
  5668 ;; This function calls:
  5669 ;;		___awdiv
  5670 ;;		___awmod
  5671 ;;		___ftmul
  5672 ;;		___wmul
  5673 ;; This function is called by:
  5674 ;;		_sprintf
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text27
  5679  000940                     __ptext27:
  5680                           	opt stack 0
  5681  000940                     _scale:
  5682                           	opt stack 21
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;incstack = 0
  5686                           ;scale@scl stored from wreg
  5687  000940  0100               	movlb	0	; () banked
  5688  000942  6F72               	movwf	scale@scl& (0+255),b
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;doprnt.c: 428: if(scl < 0) {
  5692  000944  0100               	movlb	0	; () banked
  5693  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5694  000948  D111               	goto	l4557
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;doprnt.c: 429: scl = -scl;
  5698  00094A  0100               	movlb	0	; () banked
  5699  00094C  6D72               	negf	scale@scl& (0+255),b
  5700                           
  5701                           ;doprnt.c: 430: if(scl>=110)
  5702  00094E  0100               	movlb	0	; () banked
  5703  000950  5172               	movf	scale@scl& (0+255),w,b
  5704  000952  0A80               	xorlw	128
  5705  000954  0F12               	addlw	-238
  5706  000956  A0D8               	btfss	status,0,c
  5707  000958  D0A0               	goto	l4547
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5711  00095A  0E00               	movlw	0
  5712  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5713  00095E  0E03               	movlw	3
  5714  000960  6E29               	movwf	___wmul@multiplicand,c
  5715  000962  0E00               	movlw	0
  5716  000964  6E22               	movwf	___awdiv@divisor+1,c
  5717  000966  0E0A               	movlw	10
  5718  000968  6E21               	movwf	___awdiv@divisor,c
  5719  00096A  0E00               	movlw	0
  5720  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5721  00096E  0E64               	movlw	100
  5722  000970  6E1B               	movwf	___awmod@divisor,c
  5723  000972  0100               	movlb	0	; () banked
  5724  000974  5172               	movf	scale@scl& (0+255),w,b
  5725  000976  6E19               	movwf	___awmod@dividend,c
  5726  000978  6A1A               	clrf	___awmod@dividend+1,c
  5727  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5728  00097C  061A               	decf	___awmod@dividend+1,f,c
  5729  00097E  ECE2  F00E         	call	___awmod	;wreg free
  5730  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5731  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5732  00098A  ECFB  F00D         	call	___awdiv	;wreg free
  5733  00098E  0E09               	movlw	9
  5734  000990  241F               	addwf	?___awdiv,w,c
  5735  000992  6E27               	movwf	___wmul@multiplier,c
  5736  000994  0E00               	movlw	0
  5737  000996  2020               	addwfc	?___awdiv+1,w,c
  5738  000998  6E28               	movwf	___wmul@multiplier+1,c
  5739  00099A  ECB3  F013         	call	___wmul	;wreg free
  5740  00099E  0EF3               	movlw	low __npowers_
  5741  0009A0  2427               	addwf	?___wmul,w,c
  5742  0009A2  6EF6               	movwf	tblptrl,c
  5743  0009A4  0E7E               	movlw	high __npowers_
  5744  0009A6  2028               	addwfc	?___wmul+1,w,c
  5745  0009A8  6EF7               	movwf	tblptrh,c
  5746  0009AA                     	if	1	;There are 3 active tblptr bytes
  5747  0009AA  6AF8               	clrf	tblptru,c
  5748  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5749  0009AE  22F8               	addwfc	tblptru,f,c
  5750  0009B0                     	endif
  5751  0009B0  0009               	tblrd		*+
  5752  0009B2  0100               	movlb	0	; () banked
  5753  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5754  0009B8  0009               	tblrd		*+
  5755  0009BA  0100               	movlb	0	; () banked
  5756  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5757  0009C0  000A               	tblrd		*-
  5758  0009C2  0100               	movlb	0	; () banked
  5759  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5760  0009C8  0E00               	movlw	0
  5761  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5762  0009CC  0E64               	movlw	100
  5763  0009CE  6E21               	movwf	___awdiv@divisor,c
  5764  0009D0  0100               	movlb	0	; () banked
  5765  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5766  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5767  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5768  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5769  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5770  0009DC  ECFB  F00D         	call	___awdiv	;wreg free
  5771  0009E0  0E12               	movlw	18
  5772  0009E2  241F               	addwf	?___awdiv,w,c
  5773  0009E4  6E27               	movwf	___wmul@multiplier,c
  5774  0009E6  0E00               	movlw	0
  5775  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5776  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5777  0009EC  0E00               	movlw	0
  5778  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  5779  0009F0  0E03               	movlw	3
  5780  0009F2  6E29               	movwf	___wmul@multiplicand,c
  5781  0009F4  ECB3  F013         	call	___wmul	;wreg free
  5782  0009F8  0EF3               	movlw	low __npowers_
  5783  0009FA  2427               	addwf	?___wmul,w,c
  5784  0009FC  6EF6               	movwf	tblptrl,c
  5785  0009FE  0E7E               	movlw	high __npowers_
  5786  000A00  2028               	addwfc	?___wmul+1,w,c
  5787  000A02  6EF7               	movwf	tblptrh,c
  5788  000A04                     	if	1	;There are 3 active tblptr bytes
  5789  000A04  6AF8               	clrf	tblptru,c
  5790  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  5791  000A08  22F8               	addwfc	tblptru,f,c
  5792  000A0A                     	endif
  5793  000A0A  0009               	tblrd		*+
  5794  000A0C  0100               	movlb	0	; () banked
  5795  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  5796  000A12  0009               	tblrd		*+
  5797  000A14  0100               	movlb	0	; () banked
  5798  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5799  000A1A  000A               	tblrd		*-
  5800  000A1C  0100               	movlb	0	; () banked
  5801  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5802  000A22  EC6F  F009         	call	___ftmul	;wreg free
  5803  000A26  C060  F06F         	movff	?___ftmul,_scale$2289
  5804  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2289+1
  5805  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2289+2
  5806                           
  5807                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5808  000A32  C06F  F060         	movff	_scale$2289,___ftmul@f1
  5809  000A36  C070  F061         	movff	_scale$2289+1,___ftmul@f1+1
  5810  000A3A  C071  F062         	movff	_scale$2289+2,___ftmul@f1+2
  5811  000A3E  0E00               	movlw	0
  5812  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  5813  000A42  0E03               	movlw	3
  5814  000A44  6E29               	movwf	___wmul@multiplicand,c
  5815  000A46  0E00               	movlw	0
  5816  000A48  6E1C               	movwf	___awmod@divisor+1,c
  5817  000A4A  0E0A               	movlw	10
  5818  000A4C  6E1B               	movwf	___awmod@divisor,c
  5819  000A4E  0100               	movlb	0	; () banked
  5820  000A50  5172               	movf	scale@scl& (0+255),w,b
  5821  000A52  6E19               	movwf	___awmod@dividend,c
  5822  000A54  6A1A               	clrf	___awmod@dividend+1,c
  5823  000A56  BE19               	btfsc	___awmod@dividend,7,c
  5824  000A58  061A               	decf	___awmod@dividend+1,f,c
  5825  000A5A  ECE2  F00E         	call	___awmod	;wreg free
  5826  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5827  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5828  000A66  ECB3  F013         	call	___wmul	;wreg free
  5829  000A6A  0EF3               	movlw	low __npowers_
  5830  000A6C  2427               	addwf	?___wmul,w,c
  5831  000A6E  6EF6               	movwf	tblptrl,c
  5832  000A70  0E7E               	movlw	high __npowers_
  5833  000A72  2028               	addwfc	?___wmul+1,w,c
  5834  000A74  6EF7               	movwf	tblptrh,c
  5835  000A76                     	if	1	;There are 3 active tblptr bytes
  5836  000A76  6AF8               	clrf	tblptru,c
  5837  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  5838  000A7A  22F8               	addwfc	tblptru,f,c
  5839  000A7C                     	endif
  5840  000A7C  0009               	tblrd		*+
  5841  000A7E  0100               	movlb	0	; () banked
  5842  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  5843  000A84  0009               	tblrd		*+
  5844  000A86  0100               	movlb	0	; () banked
  5845  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5846  000A8C  000A               	tblrd		*-
  5847  000A8E  0100               	movlb	0	; () banked
  5848  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5849  000A94  EC6F  F009         	call	___ftmul	;wreg free
  5850  000A98  D16F               	goto	L10
  5851  000A9A                     l4547:
  5852                           
  5853                           ;doprnt.c: 432: else if(scl > 10)
  5854  000A9A  0100               	movlb	0	; () banked
  5855  000A9C  5172               	movf	scale@scl& (0+255),w,b
  5856  000A9E  0A80               	xorlw	128
  5857  000AA0  0F75               	addlw	-139
  5858  000AA2  A0D8               	btfss	status,0,c
  5859  000AA4  D05B               	goto	l4553
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5863  000AA6  0E00               	movlw	0
  5864  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  5865  000AAA  0E0A               	movlw	10
  5866  000AAC  6E21               	movwf	___awdiv@divisor,c
  5867  000AAE  0100               	movlb	0	; () banked
  5868  000AB0  5172               	movf	scale@scl& (0+255),w,b
  5869  000AB2  6E1F               	movwf	___awdiv@dividend,c
  5870  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  5871  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  5872  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  5873  000ABA  ECFB  F00D         	call	___awdiv	;wreg free
  5874  000ABE  0E09               	movlw	9
  5875  000AC0  241F               	addwf	?___awdiv,w,c
  5876  000AC2  6E27               	movwf	___wmul@multiplier,c
  5877  000AC4  0E00               	movlw	0
  5878  000AC6  2020               	addwfc	?___awdiv+1,w,c
  5879  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  5880  000ACA  0E00               	movlw	0
  5881  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  5882  000ACE  0E03               	movlw	3
  5883  000AD0  6E29               	movwf	___wmul@multiplicand,c
  5884  000AD2  ECB3  F013         	call	___wmul	;wreg free
  5885  000AD6  0EF3               	movlw	low __npowers_
  5886  000AD8  2427               	addwf	?___wmul,w,c
  5887  000ADA  6EF6               	movwf	tblptrl,c
  5888  000ADC  0E7E               	movlw	high __npowers_
  5889  000ADE  2028               	addwfc	?___wmul+1,w,c
  5890  000AE0  6EF7               	movwf	tblptrh,c
  5891  000AE2                     	if	1	;There are 3 active tblptr bytes
  5892  000AE2  6AF8               	clrf	tblptru,c
  5893  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  5894  000AE6  22F8               	addwfc	tblptru,f,c
  5895  000AE8                     	endif
  5896  000AE8  0009               	tblrd		*+
  5897  000AEA  0100               	movlb	0	; () banked
  5898  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  5899  000AF0  0009               	tblrd		*+
  5900  000AF2  0100               	movlb	0	; () banked
  5901  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  5902  000AF8  000A               	tblrd		*-
  5903  000AFA  0100               	movlb	0	; () banked
  5904  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  5905  000B00  0E00               	movlw	0
  5906  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  5907  000B04  0E03               	movlw	3
  5908  000B06  6E29               	movwf	___wmul@multiplicand,c
  5909  000B08  0E00               	movlw	0
  5910  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  5911  000B0C  0E0A               	movlw	10
  5912  000B0E  6E1B               	movwf	___awmod@divisor,c
  5913  000B10  0100               	movlb	0	; () banked
  5914  000B12  5172               	movf	scale@scl& (0+255),w,b
  5915  000B14  6E19               	movwf	___awmod@dividend,c
  5916  000B16  6A1A               	clrf	___awmod@dividend+1,c
  5917  000B18  BE19               	btfsc	___awmod@dividend,7,c
  5918  000B1A  061A               	decf	___awmod@dividend+1,f,c
  5919  000B1C  ECE2  F00E         	call	___awmod	;wreg free
  5920  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  5921  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5922  000B28  ECB3  F013         	call	___wmul	;wreg free
  5923  000B2C  0EF3               	movlw	low __npowers_
  5924  000B2E  2427               	addwf	?___wmul,w,c
  5925  000B30  6EF6               	movwf	tblptrl,c
  5926  000B32  0E7E               	movlw	high __npowers_
  5927  000B34  2028               	addwfc	?___wmul+1,w,c
  5928  000B36  6EF7               	movwf	tblptrh,c
  5929  000B38                     	if	1	;There are 3 active tblptr bytes
  5930  000B38  6AF8               	clrf	tblptru,c
  5931  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  5932  000B3C  22F8               	addwfc	tblptru,f,c
  5933  000B3E                     	endif
  5934  000B3E  0009               	tblrd		*+
  5935  000B40  0100               	movlb	0	; () banked
  5936  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  5937  000B46  0009               	tblrd		*+
  5938  000B48  0100               	movlb	0	; () banked
  5939  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5940  000B4E  000A               	tblrd		*-
  5941  000B50  0100               	movlb	0	; () banked
  5942  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5943  000B56  EC6F  F009         	call	___ftmul	;wreg free
  5944  000B5A  D10E               	goto	L10
  5945  000B5C                     l4553:
  5946                           
  5947                           ;doprnt.c: 434: return _npowers_[scl];
  5948  000B5C  0100               	movlb	0	; () banked
  5949  000B5E  5172               	movf	scale@scl& (0+255),w,b
  5950  000B60  0D03               	mullw	3
  5951  000B62  0EF3               	movlw	low __npowers_
  5952  000B64  24F3               	addwf	prodl,w,c
  5953  000B66  6EF6               	movwf	tblptrl,c
  5954  000B68  0E7E               	movlw	high __npowers_
  5955  000B6A  D114               	goto	L9
  5956  000B6C                     l4557:
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;doprnt.c: 435: }
  5960                           ;doprnt.c: 436: if(scl>=110)
  5961  000B6C  0100               	movlb	0	; () banked
  5962  000B6E  5172               	movf	scale@scl& (0+255),w,b
  5963  000B70  0A80               	xorlw	128
  5964  000B72  0F12               	addlw	-238
  5965  000B74  A0D8               	btfss	status,0,c
  5966  000B76  D0A0               	goto	l4565
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5970  000B78  0E00               	movlw	0
  5971  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  5972  000B7C  0E03               	movlw	3
  5973  000B7E  6E29               	movwf	___wmul@multiplicand,c
  5974  000B80  0E00               	movlw	0
  5975  000B82  6E22               	movwf	___awdiv@divisor+1,c
  5976  000B84  0E0A               	movlw	10
  5977  000B86  6E21               	movwf	___awdiv@divisor,c
  5978  000B88  0E00               	movlw	0
  5979  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  5980  000B8C  0E64               	movlw	100
  5981  000B8E  6E1B               	movwf	___awmod@divisor,c
  5982  000B90  0100               	movlb	0	; () banked
  5983  000B92  5172               	movf	scale@scl& (0+255),w,b
  5984  000B94  6E19               	movwf	___awmod@dividend,c
  5985  000B96  6A1A               	clrf	___awmod@dividend+1,c
  5986  000B98  BE19               	btfsc	___awmod@dividend,7,c
  5987  000B9A  061A               	decf	___awmod@dividend+1,f,c
  5988  000B9C  ECE2  F00E         	call	___awmod	;wreg free
  5989  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5990  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5991  000BA8  ECFB  F00D         	call	___awdiv	;wreg free
  5992  000BAC  0E09               	movlw	9
  5993  000BAE  241F               	addwf	?___awdiv,w,c
  5994  000BB0  6E27               	movwf	___wmul@multiplier,c
  5995  000BB2  0E00               	movlw	0
  5996  000BB4  2020               	addwfc	?___awdiv+1,w,c
  5997  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  5998  000BB8  ECB3  F013         	call	___wmul	;wreg free
  5999  000BBC  0E1A               	movlw	low __powers_
  6000  000BBE  2427               	addwf	?___wmul,w,c
  6001  000BC0  6EF6               	movwf	tblptrl,c
  6002  000BC2  0E7F               	movlw	high __powers_
  6003  000BC4  2028               	addwfc	?___wmul+1,w,c
  6004  000BC6  6EF7               	movwf	tblptrh,c
  6005  000BC8                     	if	1	;There are 3 active tblptr bytes
  6006  000BC8  6AF8               	clrf	tblptru,c
  6007  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6008  000BCC  22F8               	addwfc	tblptru,f,c
  6009  000BCE                     	endif
  6010  000BCE  0009               	tblrd		*+
  6011  000BD0  0100               	movlb	0	; () banked
  6012  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6013  000BD6  0009               	tblrd		*+
  6014  000BD8  0100               	movlb	0	; () banked
  6015  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6016  000BDE  000A               	tblrd		*-
  6017  000BE0  0100               	movlb	0	; () banked
  6018  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6019  000BE6  0E00               	movlw	0
  6020  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6021  000BEA  0E64               	movlw	100
  6022  000BEC  6E21               	movwf	___awdiv@divisor,c
  6023  000BEE  0100               	movlb	0	; () banked
  6024  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6025  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6026  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6027  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6028  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6029  000BFA  ECFB  F00D         	call	___awdiv	;wreg free
  6030  000BFE  0E12               	movlw	18
  6031  000C00  241F               	addwf	?___awdiv,w,c
  6032  000C02  6E27               	movwf	___wmul@multiplier,c
  6033  000C04  0E00               	movlw	0
  6034  000C06  2020               	addwfc	?___awdiv+1,w,c
  6035  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6036  000C0A  0E00               	movlw	0
  6037  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6038  000C0E  0E03               	movlw	3
  6039  000C10  6E29               	movwf	___wmul@multiplicand,c
  6040  000C12  ECB3  F013         	call	___wmul	;wreg free
  6041  000C16  0E1A               	movlw	low __powers_
  6042  000C18  2427               	addwf	?___wmul,w,c
  6043  000C1A  6EF6               	movwf	tblptrl,c
  6044  000C1C  0E7F               	movlw	high __powers_
  6045  000C1E  2028               	addwfc	?___wmul+1,w,c
  6046  000C20  6EF7               	movwf	tblptrh,c
  6047  000C22                     	if	1	;There are 3 active tblptr bytes
  6048  000C22  6AF8               	clrf	tblptru,c
  6049  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6050  000C26  22F8               	addwfc	tblptru,f,c
  6051  000C28                     	endif
  6052  000C28  0009               	tblrd		*+
  6053  000C2A  0100               	movlb	0	; () banked
  6054  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6055  000C30  0009               	tblrd		*+
  6056  000C32  0100               	movlb	0	; () banked
  6057  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6058  000C38  000A               	tblrd		*-
  6059  000C3A  0100               	movlb	0	; () banked
  6060  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6061  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6062  000C44  C060  F06F         	movff	?___ftmul,_scale$2289
  6063  000C48  C061  F070         	movff	?___ftmul+1,_scale$2289+1
  6064  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2289+2
  6065                           
  6066                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6067  000C50  C06F  F060         	movff	_scale$2289,___ftmul@f1
  6068  000C54  C070  F061         	movff	_scale$2289+1,___ftmul@f1+1
  6069  000C58  C071  F062         	movff	_scale$2289+2,___ftmul@f1+2
  6070  000C5C  0E00               	movlw	0
  6071  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6072  000C60  0E03               	movlw	3
  6073  000C62  6E29               	movwf	___wmul@multiplicand,c
  6074  000C64  0E00               	movlw	0
  6075  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6076  000C68  0E0A               	movlw	10
  6077  000C6A  6E1B               	movwf	___awmod@divisor,c
  6078  000C6C  0100               	movlb	0	; () banked
  6079  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6080  000C70  6E19               	movwf	___awmod@dividend,c
  6081  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6082  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6083  000C76  061A               	decf	___awmod@dividend+1,f,c
  6084  000C78  ECE2  F00E         	call	___awmod	;wreg free
  6085  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6086  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6087  000C84  ECB3  F013         	call	___wmul	;wreg free
  6088  000C88  0E1A               	movlw	low __powers_
  6089  000C8A  2427               	addwf	?___wmul,w,c
  6090  000C8C  6EF6               	movwf	tblptrl,c
  6091  000C8E  0E7F               	movlw	high __powers_
  6092  000C90  2028               	addwfc	?___wmul+1,w,c
  6093  000C92  6EF7               	movwf	tblptrh,c
  6094  000C94                     	if	1	;There are 3 active tblptr bytes
  6095  000C94  6AF8               	clrf	tblptru,c
  6096  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6097  000C98  22F8               	addwfc	tblptru,f,c
  6098  000C9A                     	endif
  6099  000C9A  0009               	tblrd		*+
  6100  000C9C  0100               	movlb	0	; () banked
  6101  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6102  000CA2  0009               	tblrd		*+
  6103  000CA4  0100               	movlb	0	; () banked
  6104  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6105  000CAA  000A               	tblrd		*-
  6106  000CAC  0100               	movlb	0	; () banked
  6107  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6108  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6109  000CB6  D060               	goto	L10
  6110  000CB8                     l4565:
  6111                           
  6112                           ;doprnt.c: 438: else if(scl > 10)
  6113  000CB8  0100               	movlb	0	; () banked
  6114  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6115  000CBC  0A80               	xorlw	128
  6116  000CBE  0F75               	addlw	-139
  6117  000CC0  A0D8               	btfss	status,0,c
  6118  000CC2  D061               	goto	l4571
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6122  000CC4  0E00               	movlw	0
  6123  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6124  000CC8  0E0A               	movlw	10
  6125  000CCA  6E21               	movwf	___awdiv@divisor,c
  6126  000CCC  0100               	movlb	0	; () banked
  6127  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6128  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6129  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6130  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6131  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6132  000CD8  ECFB  F00D         	call	___awdiv	;wreg free
  6133  000CDC  0E09               	movlw	9
  6134  000CDE  241F               	addwf	?___awdiv,w,c
  6135  000CE0  6E27               	movwf	___wmul@multiplier,c
  6136  000CE2  0E00               	movlw	0
  6137  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6138  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6139  000CE8  0E00               	movlw	0
  6140  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6141  000CEC  0E03               	movlw	3
  6142  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6143  000CF0  ECB3  F013         	call	___wmul	;wreg free
  6144  000CF4  0E1A               	movlw	low __powers_
  6145  000CF6  2427               	addwf	?___wmul,w,c
  6146  000CF8  6EF6               	movwf	tblptrl,c
  6147  000CFA  0E7F               	movlw	high __powers_
  6148  000CFC  2028               	addwfc	?___wmul+1,w,c
  6149  000CFE  6EF7               	movwf	tblptrh,c
  6150  000D00                     	if	1	;There are 3 active tblptr bytes
  6151  000D00  6AF8               	clrf	tblptru,c
  6152  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6153  000D04  22F8               	addwfc	tblptru,f,c
  6154  000D06                     	endif
  6155  000D06  0009               	tblrd		*+
  6156  000D08  0100               	movlb	0	; () banked
  6157  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6158  000D0E  0009               	tblrd		*+
  6159  000D10  0100               	movlb	0	; () banked
  6160  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6161  000D16  000A               	tblrd		*-
  6162  000D18  0100               	movlb	0	; () banked
  6163  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6164  000D1E  0E00               	movlw	0
  6165  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6166  000D22  0E03               	movlw	3
  6167  000D24  6E29               	movwf	___wmul@multiplicand,c
  6168  000D26  0E00               	movlw	0
  6169  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6170  000D2A  0E0A               	movlw	10
  6171  000D2C  6E1B               	movwf	___awmod@divisor,c
  6172  000D2E  0100               	movlb	0	; () banked
  6173  000D30  5172               	movf	scale@scl& (0+255),w,b
  6174  000D32  6E19               	movwf	___awmod@dividend,c
  6175  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6176  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6177  000D38  061A               	decf	___awmod@dividend+1,f,c
  6178  000D3A  ECE2  F00E         	call	___awmod	;wreg free
  6179  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6180  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6181  000D46  ECB3  F013         	call	___wmul	;wreg free
  6182  000D4A  0E1A               	movlw	low __powers_
  6183  000D4C  2427               	addwf	?___wmul,w,c
  6184  000D4E  6EF6               	movwf	tblptrl,c
  6185  000D50  0E7F               	movlw	high __powers_
  6186  000D52  2028               	addwfc	?___wmul+1,w,c
  6187  000D54  6EF7               	movwf	tblptrh,c
  6188  000D56                     	if	1	;There are 3 active tblptr bytes
  6189  000D56  6AF8               	clrf	tblptru,c
  6190  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6191  000D5A  22F8               	addwfc	tblptru,f,c
  6192  000D5C                     	endif
  6193  000D5C  0009               	tblrd		*+
  6194  000D5E  0100               	movlb	0	; () banked
  6195  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6196  000D64  0009               	tblrd		*+
  6197  000D66  0100               	movlb	0	; () banked
  6198  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6199  000D6C  000A               	tblrd		*-
  6200  000D6E  0100               	movlb	0	; () banked
  6201  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6202  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6203  000D78                     L10:
  6204  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6205  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6206  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6207  000D84  D018               	goto	l438
  6208  000D86                     l4571:
  6209                           
  6210                           ;doprnt.c: 440: return _powers_[scl];
  6211  000D86  0100               	movlb	0	; () banked
  6212  000D88  5172               	movf	scale@scl& (0+255),w,b
  6213  000D8A  0D03               	mullw	3
  6214  000D8C  0E1A               	movlw	low __powers_
  6215  000D8E  24F3               	addwf	prodl,w,c
  6216  000D90  6EF6               	movwf	tblptrl,c
  6217  000D92  0E7F               	movlw	high __powers_
  6218  000D94                     L9:
  6219  000D94  20F4               	addwfc	prodh,w,c
  6220  000D96  6EF7               	movwf	tblptrh,c
  6221  000D98                     	if	1	;There are 3 active tblptr bytes
  6222  000D98  6AF8               	clrf	tblptru,c
  6223  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6224  000D9C  22F8               	addwfc	tblptru,f,c
  6225  000D9E                     	endif
  6226  000D9E  0009               	tblrd		*+
  6227  000DA0  0100               	movlb	0	; () banked
  6228  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6229  000DA6  0009               	tblrd		*+
  6230  000DA8  0100               	movlb	0	; () banked
  6231  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6232  000DAE  000A               	tblrd		*-
  6233  000DB0  0100               	movlb	0	; () banked
  6234  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6235  000DB6                     l438:
  6236  000DB6  0012               	return	
  6237  000DB8                     __end_of_scale:
  6238                           	opt stack 0
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           intcon	equ	0xFF2
  6246                           indf0	equ	0xFEF
  6247                           postinc0	equ	0xFEE
  6248                           fsr0h	equ	0xFEA
  6249                           fsr0l	equ	0xFE9
  6250                           wreg	equ	0xFE8
  6251                           postinc1	equ	0xFE6
  6252                           postdec1	equ	0xFE5
  6253                           fsr1l	equ	0xFE1
  6254                           indf2	equ	0xFDF
  6255                           postinc2	equ	0xFDE
  6256                           postdec2	equ	0xFDD
  6257                           fsr2h	equ	0xFDA
  6258                           fsr2l	equ	0xFD9
  6259                           status	equ	0xFD8
  6260                           
  6261 ;; *************** function _fround *****************
  6262 ;; Defined at:
  6263 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  prec            1    wreg     unsigned char 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  prec            1   21[BANK0 ] unsigned char 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  3   12[BANK0 ] unsigned char 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6277 ;;      Params:         0       3       0       0       0       0       0       0       0
  6278 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6279 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6280 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6281 ;;Total ram usage:       10 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    6
  6284 ;; This function calls:
  6285 ;;		___awdiv
  6286 ;;		___awmod
  6287 ;;		___ftmul
  6288 ;;		___wmul
  6289 ;; This function is called by:
  6290 ;;		_sprintf
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text28
  6295  000DB8                     __ptext28:
  6296                           	opt stack 0
  6297  000DB8                     _fround:
  6298                           	opt stack 21
  6299                           
  6300                           ;incstack = 0
  6301                           ;fround@prec stored from wreg
  6302  000DB8  0100               	movlb	0	; () banked
  6303  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;doprnt.c: 413: if(prec>=110)
  6307  000DBC  0E6D               	movlw	109
  6308  000DBE  0100               	movlb	0	; () banked
  6309  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6310  000DC2  D0B1               	goto	l4525
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6314  000DC4  0E00               	movlw	0
  6315  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6316  000DC8  0E03               	movlw	3
  6317  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6318  000DCC  0E00               	movlw	0
  6319  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6320  000DD0  0E0A               	movlw	10
  6321  000DD2  6E21               	movwf	___awdiv@divisor,c
  6322  000DD4  0E00               	movlw	0
  6323  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6324  000DD8  0E64               	movlw	100
  6325  000DDA  6E1B               	movwf	___awmod@divisor,c
  6326  000DDC  0100               	movlb	0	; () banked
  6327  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6328  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6329  000DE4  ECE2  F00E         	call	___awmod	;wreg free
  6330  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6331  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6332  000DF0  ECFB  F00D         	call	___awdiv	;wreg free
  6333  000DF4  0E09               	movlw	9
  6334  000DF6  241F               	addwf	?___awdiv,w,c
  6335  000DF8  6E27               	movwf	___wmul@multiplier,c
  6336  000DFA  0E00               	movlw	0
  6337  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6338  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6339  000E00  ECB3  F013         	call	___wmul	;wreg free
  6340  000E04  0EF3               	movlw	low __npowers_
  6341  000E06  2427               	addwf	?___wmul,w,c
  6342  000E08  6EF6               	movwf	tblptrl,c
  6343  000E0A  0E7E               	movlw	high __npowers_
  6344  000E0C  2028               	addwfc	?___wmul+1,w,c
  6345  000E0E  6EF7               	movwf	tblptrh,c
  6346  000E10                     	if	1	;There are 3 active tblptr bytes
  6347  000E10  6AF8               	clrf	tblptru,c
  6348  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6349  000E14  22F8               	addwfc	tblptru,f,c
  6350  000E16                     	endif
  6351  000E16  0009               	tblrd		*+
  6352  000E18  0100               	movlb	0	; () banked
  6353  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6354  000E1E  0009               	tblrd		*+
  6355  000E20  0100               	movlb	0	; () banked
  6356  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6357  000E26  000A               	tblrd		*-
  6358  000E28  0100               	movlb	0	; () banked
  6359  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6360  000E2E  0E00               	movlw	0
  6361  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6362  000E32  0E64               	movlw	100
  6363  000E34  6E21               	movwf	___awdiv@divisor,c
  6364  000E36  0100               	movlb	0	; () banked
  6365  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6366  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6367  000E3E  ECFB  F00D         	call	___awdiv	;wreg free
  6368  000E42  0E12               	movlw	18
  6369  000E44  241F               	addwf	?___awdiv,w,c
  6370  000E46  6E27               	movwf	___wmul@multiplier,c
  6371  000E48  0E00               	movlw	0
  6372  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6373  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6374  000E4E  0E00               	movlw	0
  6375  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6376  000E52  0E03               	movlw	3
  6377  000E54  6E29               	movwf	___wmul@multiplicand,c
  6378  000E56  ECB3  F013         	call	___wmul	;wreg free
  6379  000E5A  0EF3               	movlw	low __npowers_
  6380  000E5C  2427               	addwf	?___wmul,w,c
  6381  000E5E  6EF6               	movwf	tblptrl,c
  6382  000E60  0E7E               	movlw	high __npowers_
  6383  000E62  2028               	addwfc	?___wmul+1,w,c
  6384  000E64  6EF7               	movwf	tblptrh,c
  6385  000E66                     	if	1	;There are 3 active tblptr bytes
  6386  000E66  6AF8               	clrf	tblptru,c
  6387  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6388  000E6A  22F8               	addwfc	tblptru,f,c
  6389  000E6C                     	endif
  6390  000E6C  0009               	tblrd		*+
  6391  000E6E  0100               	movlb	0	; () banked
  6392  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6393  000E74  0009               	tblrd		*+
  6394  000E76  0100               	movlb	0	; () banked
  6395  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6396  000E7C  000A               	tblrd		*-
  6397  000E7E  0100               	movlb	0	; () banked
  6398  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6399  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6400  000E88  C060  F072         	movff	?___ftmul,_fround$2287
  6401  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2287+1
  6402  000E90  C062  F074         	movff	?___ftmul+2,_fround$2287+2
  6403                           
  6404                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6405  000E94  0E00               	movlw	0
  6406  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6407  000E98  0E03               	movlw	3
  6408  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6409  000E9C  0E00               	movlw	0
  6410  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6411  000EA0  0E0A               	movlw	10
  6412  000EA2  6E1B               	movwf	___awmod@divisor,c
  6413  000EA4  0100               	movlb	0	; () banked
  6414  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6415  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6416  000EAC  ECE2  F00E         	call	___awmod	;wreg free
  6417  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6418  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6419  000EB8  ECB3  F013         	call	___wmul	;wreg free
  6420  000EBC  0EF3               	movlw	low __npowers_
  6421  000EBE  2427               	addwf	?___wmul,w,c
  6422  000EC0  6EF6               	movwf	tblptrl,c
  6423  000EC2  0E7E               	movlw	high __npowers_
  6424  000EC4  2028               	addwfc	?___wmul+1,w,c
  6425  000EC6  6EF7               	movwf	tblptrh,c
  6426  000EC8                     	if	1	;There are 3 active tblptr bytes
  6427  000EC8  6AF8               	clrf	tblptru,c
  6428  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6429  000ECC  22F8               	addwfc	tblptru,f,c
  6430  000ECE                     	endif
  6431  000ECE  0009               	tblrd		*+
  6432  000ED0  0100               	movlb	0	; () banked
  6433  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6434  000ED6  0009               	tblrd		*+
  6435  000ED8  0100               	movlb	0	; () banked
  6436  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6437  000EDE  000A               	tblrd		*-
  6438  000EE0  0100               	movlb	0	; () banked
  6439  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6440  000EE6  C072  F060         	movff	_fround$2287,___ftmul@f1
  6441  000EEA  C073  F061         	movff	_fround$2287+1,___ftmul@f1+1
  6442  000EEE  C074  F062         	movff	_fround$2287+2,___ftmul@f1+2
  6443  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6444  000EF6  C060  F06F         	movff	?___ftmul,_fround$2288
  6445  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2288+1
  6446  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2288+2
  6447                           
  6448                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6449  000F02  C06F  F060         	movff	_fround$2288,___ftmul@f1
  6450  000F06  C070  F061         	movff	_fround$2288+1,___ftmul@f1+1
  6451  000F0A  C071  F062         	movff	_fround$2288+2,___ftmul@f1+2
  6452  000F0E  0E00               	movlw	0
  6453  000F10  0100               	movlb	0	; () banked
  6454  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6455  000F14  0E00               	movlw	0
  6456  000F16  0100               	movlb	0	; () banked
  6457  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6458  000F1A  0E3F               	movlw	63
  6459  000F1C  0100               	movlb	0	; () banked
  6460  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6461  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6462  000F24  D095               	goto	L12
  6463  000F26                     l4525:
  6464                           
  6465                           ;doprnt.c: 415: else if(prec > 10)
  6466  000F26  0E0A               	movlw	10
  6467  000F28  0100               	movlb	0	; () banked
  6468  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6469  000F2C  D06E               	goto	l4533
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6473  000F2E  0E00               	movlw	0
  6474  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6475  000F32  0E03               	movlw	3
  6476  000F34  6E29               	movwf	___wmul@multiplicand,c
  6477  000F36  0E00               	movlw	0
  6478  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6479  000F3A  0E0A               	movlw	10
  6480  000F3C  6E1B               	movwf	___awmod@divisor,c
  6481  000F3E  0100               	movlb	0	; () banked
  6482  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6483  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6484  000F46  ECE2  F00E         	call	___awmod	;wreg free
  6485  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6486  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6487  000F52  ECB3  F013         	call	___wmul	;wreg free
  6488  000F56  0EF3               	movlw	low __npowers_
  6489  000F58  2427               	addwf	?___wmul,w,c
  6490  000F5A  6EF6               	movwf	tblptrl,c
  6491  000F5C  0E7E               	movlw	high __npowers_
  6492  000F5E  2028               	addwfc	?___wmul+1,w,c
  6493  000F60  6EF7               	movwf	tblptrh,c
  6494  000F62                     	if	1	;There are 3 active tblptr bytes
  6495  000F62  6AF8               	clrf	tblptru,c
  6496  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6497  000F66  22F8               	addwfc	tblptru,f,c
  6498  000F68                     	endif
  6499  000F68  0009               	tblrd		*+
  6500  000F6A  0100               	movlb	0	; () banked
  6501  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6502  000F70  0009               	tblrd		*+
  6503  000F72  0100               	movlb	0	; () banked
  6504  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6505  000F78  000A               	tblrd		*-
  6506  000F7A  0100               	movlb	0	; () banked
  6507  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6508  000F80  0E00               	movlw	0
  6509  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6510  000F84  0E0A               	movlw	10
  6511  000F86  6E21               	movwf	___awdiv@divisor,c
  6512  000F88  0100               	movlb	0	; () banked
  6513  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6514  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6515  000F90  ECFB  F00D         	call	___awdiv	;wreg free
  6516  000F94  0E09               	movlw	9
  6517  000F96  241F               	addwf	?___awdiv,w,c
  6518  000F98  6E27               	movwf	___wmul@multiplier,c
  6519  000F9A  0E00               	movlw	0
  6520  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6521  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6522  000FA0  0E00               	movlw	0
  6523  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6524  000FA4  0E03               	movlw	3
  6525  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6526  000FA8  ECB3  F013         	call	___wmul	;wreg free
  6527  000FAC  0EF3               	movlw	low __npowers_
  6528  000FAE  2427               	addwf	?___wmul,w,c
  6529  000FB0  6EF6               	movwf	tblptrl,c
  6530  000FB2  0E7E               	movlw	high __npowers_
  6531  000FB4  2028               	addwfc	?___wmul+1,w,c
  6532  000FB6  6EF7               	movwf	tblptrh,c
  6533  000FB8                     	if	1	;There are 3 active tblptr bytes
  6534  000FB8  6AF8               	clrf	tblptru,c
  6535  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6536  000FBC  22F8               	addwfc	tblptru,f,c
  6537  000FBE                     	endif
  6538  000FBE  0009               	tblrd		*+
  6539  000FC0  0100               	movlb	0	; () banked
  6540  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6541  000FC6  0009               	tblrd		*+
  6542  000FC8  0100               	movlb	0	; () banked
  6543  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6544  000FCE  000A               	tblrd		*-
  6545  000FD0  0100               	movlb	0	; () banked
  6546  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6547  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6548  000FDA  C060  F072         	movff	?___ftmul,_fround$2287
  6549  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2287+1
  6550  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2287+2
  6551                           
  6552                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6553  000FE6  C072  F060         	movff	_fround$2287,___ftmul@f1
  6554  000FEA  C073  F061         	movff	_fround$2287+1,___ftmul@f1+1
  6555  000FEE  C074  F062         	movff	_fround$2287+2,___ftmul@f1+2
  6556  000FF2  0E00               	movlw	0
  6557  000FF4  0100               	movlb	0	; () banked
  6558  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6559  000FF8  0E00               	movlw	0
  6560  000FFA  0100               	movlb	0	; () banked
  6561  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6562  000FFE  0E3F               	movlw	63
  6563  001000  0100               	movlb	0	; () banked
  6564  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6565  001004  EC6F  F009         	call	___ftmul	;wreg free
  6566  001008  D023               	goto	L12
  6567  00100A                     l4533:
  6568                           
  6569                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6570  00100A  0100               	movlb	0	; () banked
  6571  00100C  5175               	movf	fround@prec& (0+255),w,b
  6572  00100E  0D03               	mullw	3
  6573  001010  0EF3               	movlw	low __npowers_
  6574  001012  24F3               	addwf	prodl,w,c
  6575  001014  6EF6               	movwf	tblptrl,c
  6576  001016  0E7E               	movlw	high __npowers_
  6577  001018  20F4               	addwfc	prodh,w,c
  6578  00101A  6EF7               	movwf	tblptrh,c
  6579  00101C                     	if	1	;There are 3 active tblptr bytes
  6580  00101C  6AF8               	clrf	tblptru,c
  6581  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6582  001020  22F8               	addwfc	tblptru,f,c
  6583  001022                     	endif
  6584  001022  0009               	tblrd		*+
  6585  001024  0100               	movlb	0	; () banked
  6586  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6587  00102A  0009               	tblrd		*+
  6588  00102C  0100               	movlb	0	; () banked
  6589  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6590  001032  000A               	tblrd		*-
  6591  001034  0100               	movlb	0	; () banked
  6592  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6593  00103A  0E00               	movlw	0
  6594  00103C  0100               	movlb	0	; () banked
  6595  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6596  001040  0E00               	movlw	0
  6597  001042  0100               	movlb	0	; () banked
  6598  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6599  001046  0E3F               	movlw	63
  6600  001048  0100               	movlb	0	; () banked
  6601  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6602  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6603  001050                     L12:
  6604  001050  C060  F06C         	movff	?___ftmul,?_fround
  6605  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6606  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6607  00105C  0012               	return	
  6608  00105E                     __end_of_fround:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           indf0	equ	0xFEF
  6618                           postinc0	equ	0xFEE
  6619                           fsr0h	equ	0xFEA
  6620                           fsr0l	equ	0xFE9
  6621                           wreg	equ	0xFE8
  6622                           postinc1	equ	0xFE6
  6623                           postdec1	equ	0xFE5
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           postinc2	equ	0xFDE
  6627                           postdec2	equ	0xFDD
  6628                           fsr2h	equ	0xFDA
  6629                           fsr2l	equ	0xFD9
  6630                           status	equ	0xFD8
  6631                           
  6632 ;; *************** function ___wmul *****************
  6633 ;; Defined at:
  6634 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;  multiplier      2   38[COMRAM] unsigned int 
  6637 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  product         2   42[COMRAM] unsigned int 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  2   38[COMRAM] unsigned int 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2, status,0, prodl, prodh
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6649 ;;      Params:         4       0       0       0       0       0       0       0       0
  6650 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6652 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        6 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    4
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_fround
  6660 ;;		_scale
  6661 ;;		_sprintf
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text29
  6666  002766                     __ptext29:
  6667                           	opt stack 0
  6668  002766                     ___wmul:
  6669                           	opt stack 22
  6670                           
  6671                           ;incstack = 0
  6672  002766  5027               	movf	___wmul@multiplier,w,c
  6673  002768  0229               	mulwf	___wmul@multiplicand,c
  6674  00276A  CFF3 F02B          	movff	prodl,___wmul@product
  6675  00276E  CFF4 F02C          	movff	prodh,___wmul@product+1
  6676  002772  5027               	movf	___wmul@multiplier,w,c
  6677  002774  022A               	mulwf	___wmul@multiplicand+1,c
  6678  002776  50F3               	movf	prodl,w,c
  6679  002778  262C               	addwf	___wmul@product+1,f,c
  6680  00277A  5028               	movf	___wmul@multiplier+1,w,c
  6681  00277C  0229               	mulwf	___wmul@multiplicand,c
  6682  00277E  50F3               	movf	prodl,w,c
  6683  002780  262C               	addwf	___wmul@product+1,f,c
  6684  002782  C02B  F027         	movff	___wmul@product,?___wmul
  6685  002786  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6686  00278A  0012               	return	
  6687  00278C                     __end_of___wmul:
  6688                           	opt stack 0
  6689                           tblptru	equ	0xFF8
  6690                           tblptrh	equ	0xFF7
  6691                           tblptrl	equ	0xFF6
  6692                           tablat	equ	0xFF5
  6693                           prodh	equ	0xFF4
  6694                           prodl	equ	0xFF3
  6695                           intcon	equ	0xFF2
  6696                           indf0	equ	0xFEF
  6697                           postinc0	equ	0xFEE
  6698                           fsr0h	equ	0xFEA
  6699                           fsr0l	equ	0xFE9
  6700                           wreg	equ	0xFE8
  6701                           postinc1	equ	0xFE6
  6702                           postdec1	equ	0xFE5
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function ___ftmul *****************
  6712 ;; Defined at:
  6713 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  f1              3    0[BANK0 ] float 
  6716 ;;  f2              3    3[BANK0 ] float 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6719 ;;  sign            1   11[BANK0 ] unsigned char 
  6720 ;;  cntr            1   10[BANK0 ] unsigned char 
  6721 ;;  exp             1    6[BANK0 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  3    0[BANK0 ] float 
  6724 ;; Registers used:
  6725 ;;		wreg, status,2, status,0, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6731 ;;      Params:         0       6       0       0       0       0       0       0       0
  6732 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6733 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6734 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6735 ;;Total ram usage:       15 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    5
  6738 ;; This function calls:
  6739 ;;		___ftpack
  6740 ;; This function is called by:
  6741 ;;		_PWM_DutyCycle1
  6742 ;;		_PWM_DutyCycle2
  6743 ;;		_fround
  6744 ;;		_scale
  6745 ;;		_sprintf
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text30
  6750  0012DE                     __ptext30:
  6751                           	opt stack 0
  6752  0012DE                     ___ftmul:
  6753                           	opt stack 21
  6754                           
  6755                           ;incstack = 0
  6756  0012DE  0100               	movlb	0	; () banked
  6757  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6758  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6759  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6760  0012E8  0100               	movlb	0	; () banked
  6761  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6762  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6763  0012EE  E301               	bnc	u4211
  6764  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6765  0012F2                     u4211:
  6766  0012F2  502D               	movf	??___ftmul,w,c
  6767  0012F4  0100               	movlb	0	; () banked
  6768  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6769  0012F8  0100               	movlb	0	; () banked
  6770  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6771  0012FC  D001               	goto	l4297
  6772  0012FE  D010               	goto	u4240
  6773  001300                     l4297:
  6774                           
  6775                           ; BSR set to: 0
  6776  001300  0100               	movlb	0	; () banked
  6777  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  6778  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6779  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6780  00130A  0100               	movlb	0	; () banked
  6781  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6782  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  6783  001310  E301               	bnc	u4231
  6784  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6785  001314                     u4231:
  6786  001314  502D               	movf	??___ftmul,w,c
  6787  001316  0100               	movlb	0	; () banked
  6788  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  6789  00131A  0100               	movlb	0	; () banked
  6790  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  6791  00131E  D00A               	goto	l4303
  6792  001320                     u4240:
  6793                           
  6794                           ; BSR set to: 0
  6795  001320  0E00               	movlw	0
  6796  001322  0100               	movlb	0	; () banked
  6797  001324  6F60               	movwf	?___ftmul& (0+255),b
  6798  001326  0E00               	movlw	0
  6799  001328  0100               	movlb	0	; () banked
  6800  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  6801  00132C  0E00               	movlw	0
  6802  00132E  0100               	movlb	0	; () banked
  6803  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  6804  001332  D080               	goto	l1032
  6805  001334                     l4303:
  6806                           
  6807                           ; BSR set to: 0
  6808  001334  0100               	movlb	0	; () banked
  6809  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  6810  001338  0F7B               	addlw	123
  6811  00133A  0100               	movlb	0	; () banked
  6812  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  6813                           
  6814                           ; BSR set to: 0
  6815  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  6816  001342  0100               	movlb	0	; () banked
  6817  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6818  001346  0100               	movlb	0	; () banked
  6819  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  6820  00134A  0E80               	movlw	128
  6821  00134C  0100               	movlb	0	; () banked
  6822  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  6823                           
  6824                           ; BSR set to: 0
  6825  001350  0100               	movlb	0	; () banked
  6826  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6827                           
  6828                           ; BSR set to: 0
  6829  001354  0100               	movlb	0	; () banked
  6830  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6831                           
  6832                           ; BSR set to: 0
  6833  001358  0EFF               	movlw	255
  6834  00135A  0100               	movlb	0	; () banked
  6835  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  6836  00135E  0EFF               	movlw	255
  6837  001360  0100               	movlb	0	; () banked
  6838  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6839  001364  0E00               	movlw	0
  6840  001366  0100               	movlb	0	; () banked
  6841  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6842                           
  6843                           ; BSR set to: 0
  6844  00136A  0E00               	movlw	0
  6845  00136C  0100               	movlb	0	; () banked
  6846  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  6847  001370  0E00               	movlw	0
  6848  001372  0100               	movlb	0	; () banked
  6849  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6850  001376  0E00               	movlw	0
  6851  001378  0100               	movlb	0	; () banked
  6852  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6853                           
  6854                           ; BSR set to: 0
  6855  00137C  0E07               	movlw	7
  6856  00137E  0100               	movlb	0	; () banked
  6857  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6858  001382                     l4317:
  6859                           
  6860                           ; BSR set to: 0
  6861  001382  0100               	movlb	0	; () banked
  6862  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  6863  001386  D00C               	goto	l4321
  6864                           
  6865                           ; BSR set to: 0
  6866  001388  0100               	movlb	0	; () banked
  6867  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  6868  00138C  0100               	movlb	0	; () banked
  6869  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6870  001390  0100               	movlb	0	; () banked
  6871  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6872  001394  0100               	movlb	0	; () banked
  6873  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6874  001398  0100               	movlb	0	; () banked
  6875  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6876  00139C  0100               	movlb	0	; () banked
  6877  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6878  0013A0                     l4321:
  6879                           
  6880                           ; BSR set to: 0
  6881  0013A0  0100               	movlb	0	; () banked
  6882  0013A2  90D8               	bcf	status,0,c
  6883  0013A4  0100               	movlb	0	; () banked
  6884  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6885  0013A8  0100               	movlb	0	; () banked
  6886  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6887  0013AC  0100               	movlb	0	; () banked
  6888  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6889  0013B0  0100               	movlb	0	; () banked
  6890  0013B2  90D8               	bcf	status,0,c
  6891  0013B4  0100               	movlb	0	; () banked
  6892  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  6893  0013B8  0100               	movlb	0	; () banked
  6894  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6895  0013BC  0100               	movlb	0	; () banked
  6896  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6897                           
  6898                           ; BSR set to: 0
  6899  0013C0  0100               	movlb	0	; () banked
  6900  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6901  0013C4  D7DE               	goto	l4317
  6902                           
  6903                           ; BSR set to: 0
  6904                           
  6905                           ; BSR set to: 0
  6906  0013C6  0E09               	movlw	9
  6907  0013C8  0100               	movlb	0	; () banked
  6908  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  6909  0013CC                     l4327:
  6910                           
  6911                           ; BSR set to: 0
  6912  0013CC  0100               	movlb	0	; () banked
  6913  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  6914  0013D0  D00C               	goto	l4331
  6915                           
  6916                           ; BSR set to: 0
  6917  0013D2  0100               	movlb	0	; () banked
  6918  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  6919  0013D6  0100               	movlb	0	; () banked
  6920  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6921  0013DA  0100               	movlb	0	; () banked
  6922  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  6923  0013DE  0100               	movlb	0	; () banked
  6924  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6925  0013E2  0100               	movlb	0	; () banked
  6926  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  6927  0013E6  0100               	movlb	0	; () banked
  6928  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6929  0013EA                     l4331:
  6930                           
  6931                           ; BSR set to: 0
  6932  0013EA  0100               	movlb	0	; () banked
  6933  0013EC  90D8               	bcf	status,0,c
  6934  0013EE  0100               	movlb	0	; () banked
  6935  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6936  0013F2  0100               	movlb	0	; () banked
  6937  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6938  0013F6  0100               	movlb	0	; () banked
  6939  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  6940  0013FA  0100               	movlb	0	; () banked
  6941  0013FC  90D8               	bcf	status,0,c
  6942  0013FE  0100               	movlb	0	; () banked
  6943  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6944  001402  0100               	movlb	0	; () banked
  6945  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6946  001406  0100               	movlb	0	; () banked
  6947  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6948                           
  6949                           ; BSR set to: 0
  6950  00140A  0100               	movlb	0	; () banked
  6951  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  6952  00140E  D7DE               	goto	l4327
  6953                           
  6954                           ; BSR set to: 0
  6955                           
  6956                           ; BSR set to: 0
  6957  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6958  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6959  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6960  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  6961  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  6962  001424  EC54  F00D         	call	___ftpack	;wreg free
  6963  001428  C019  F060         	movff	?___ftpack,?___ftmul
  6964  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  6965  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  6966  001434                     l1032:
  6967  001434  0012               	return	
  6968  001436                     __end_of___ftmul:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           intcon	equ	0xFF2
  6977                           indf0	equ	0xFEF
  6978                           postinc0	equ	0xFEE
  6979                           fsr0h	equ	0xFEA
  6980                           fsr0l	equ	0xFE9
  6981                           wreg	equ	0xFE8
  6982                           postinc1	equ	0xFE6
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function ___awmod *****************
  6993 ;; Defined at:
  6994 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  dividend        2   24[COMRAM] int 
  6997 ;;  divisor         2   26[COMRAM] int 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  sign            1   29[COMRAM] unsigned char 
  7000 ;;  counter         1   28[COMRAM] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  2   24[COMRAM] int 
  7003 ;; Registers used:
  7004 ;;		wreg, status,2, status,0, prodl
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7010 ;;      Params:         4       0       0       0       0       0       0       0       0
  7011 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7013 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7014 ;;Total ram usage:        6 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    4
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_fround
  7021 ;;		_scale
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text31
  7026  001DC4                     __ptext31:
  7027                           	opt stack 0
  7028  001DC4                     ___awmod:
  7029                           	opt stack 22
  7030                           
  7031                           ;incstack = 0
  7032  001DC4  0E00               	movlw	0
  7033  001DC6  6E1E               	movwf	___awmod@sign,c
  7034  001DC8  501A               	movf	___awmod@dividend+1,w,c
  7035  001DCA  0A80               	xorlw	128
  7036  001DCC  6EF3               	movwf	prodl,c
  7037  001DCE  0E80               	movlw	128
  7038  001DD0  5CF3               	subwf	prodl,w,c
  7039  001DD2  0E00               	movlw	0
  7040  001DD4  B4D8               	btfsc	status,2,c
  7041  001DD6  5C19               	subwf	___awmod@dividend,w,c
  7042  001DD8  B0D8               	btfsc	status,0,c
  7043  001DDA  D006               	goto	l4391
  7044  001DDC  6C19               	negf	___awmod@dividend,c
  7045  001DDE  1E1A               	comf	___awmod@dividend+1,f,c
  7046  001DE0  B0D8               	btfsc	status,0,c
  7047  001DE2  2A1A               	incf	___awmod@dividend+1,f,c
  7048  001DE4  0E01               	movlw	1
  7049  001DE6  6E1E               	movwf	___awmod@sign,c
  7050  001DE8                     l4391:
  7051  001DE8  501C               	movf	___awmod@divisor+1,w,c
  7052  001DEA  0A80               	xorlw	128
  7053  001DEC  6EF3               	movwf	prodl,c
  7054  001DEE  0E80               	movlw	128
  7055  001DF0  5CF3               	subwf	prodl,w,c
  7056  001DF2  0E00               	movlw	0
  7057  001DF4  B4D8               	btfsc	status,2,c
  7058  001DF6  5C1B               	subwf	___awmod@divisor,w,c
  7059  001DF8  B0D8               	btfsc	status,0,c
  7060  001DFA  D004               	goto	l4395
  7061  001DFC  6C1B               	negf	___awmod@divisor,c
  7062  001DFE  1E1C               	comf	___awmod@divisor+1,f,c
  7063  001E00  B0D8               	btfsc	status,0,c
  7064  001E02  2A1C               	incf	___awmod@divisor+1,f,c
  7065  001E04                     l4395:
  7066  001E04  501C               	movf	___awmod@divisor+1,w,c
  7067  001E06  101B               	iorwf	___awmod@divisor,w,c
  7068  001E08  B4D8               	btfsc	status,2,c
  7069  001E0A  D018               	goto	l4411
  7070  001E0C  0E01               	movlw	1
  7071  001E0E  6E1D               	movwf	___awmod@counter,c
  7072  001E10  D004               	goto	l4401
  7073  001E12                     l4399:
  7074  001E12  90D8               	bcf	status,0,c
  7075  001E14  361B               	rlcf	___awmod@divisor,f,c
  7076  001E16  361C               	rlcf	___awmod@divisor+1,f,c
  7077  001E18  2A1D               	incf	___awmod@counter,f,c
  7078  001E1A                     l4401:
  7079  001E1A  AE1C               	btfss	___awmod@divisor+1,7,c
  7080  001E1C  D7FA               	goto	l4399
  7081  001E1E                     l4403:
  7082  001E1E  501B               	movf	___awmod@divisor,w,c
  7083  001E20  5C19               	subwf	___awmod@dividend,w,c
  7084  001E22  501C               	movf	___awmod@divisor+1,w,c
  7085  001E24  581A               	subwfb	___awmod@dividend+1,w,c
  7086  001E26  A0D8               	btfss	status,0,c
  7087  001E28  D004               	goto	l4407
  7088  001E2A  501B               	movf	___awmod@divisor,w,c
  7089  001E2C  5E19               	subwf	___awmod@dividend,f,c
  7090  001E2E  501C               	movf	___awmod@divisor+1,w,c
  7091  001E30  5A1A               	subwfb	___awmod@dividend+1,f,c
  7092  001E32                     l4407:
  7093  001E32  90D8               	bcf	status,0,c
  7094  001E34  321C               	rrcf	___awmod@divisor+1,f,c
  7095  001E36  321B               	rrcf	___awmod@divisor,f,c
  7096  001E38  2E1D               	decfsz	___awmod@counter,f,c
  7097  001E3A  D7F1               	goto	l4403
  7098  001E3C                     l4411:
  7099  001E3C  501E               	movf	___awmod@sign,w,c
  7100  001E3E  B4D8               	btfsc	status,2,c
  7101  001E40  D004               	goto	l4415
  7102  001E42  6C19               	negf	___awmod@dividend,c
  7103  001E44  1E1A               	comf	___awmod@dividend+1,f,c
  7104  001E46  B0D8               	btfsc	status,0,c
  7105  001E48  2A1A               	incf	___awmod@dividend+1,f,c
  7106  001E4A                     l4415:
  7107  001E4A  C019  F019         	movff	___awmod@dividend,?___awmod
  7108  001E4E  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7109  001E52  0012               	return	
  7110  001E54                     __end_of___awmod:
  7111                           	opt stack 0
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           intcon	equ	0xFF2
  7119                           indf0	equ	0xFEF
  7120                           postinc0	equ	0xFEE
  7121                           fsr0h	equ	0xFEA
  7122                           fsr0l	equ	0xFE9
  7123                           wreg	equ	0xFE8
  7124                           postinc1	equ	0xFE6
  7125                           postdec1	equ	0xFE5
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134 ;; *************** function ___awdiv *****************
  7135 ;; Defined at:
  7136 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  dividend        2   30[COMRAM] int 
  7139 ;;  divisor         2   32[COMRAM] int 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  quotient        2   36[COMRAM] int 
  7142 ;;  sign            1   35[COMRAM] unsigned char 
  7143 ;;  counter         1   34[COMRAM] unsigned char 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  2   30[COMRAM] int 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0, prodl
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7153 ;;      Params:         4       0       0       0       0       0       0       0       0
  7154 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7156 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7157 ;;Total ram usage:        8 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    4
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_fround
  7164 ;;		_scale
  7165 ;;		_sprintf
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text32
  7170  001BF6                     __ptext32:
  7171                           	opt stack 0
  7172  001BF6                     ___awdiv:
  7173                           	opt stack 22
  7174                           
  7175                           ;incstack = 0
  7176  001BF6  0E00               	movlw	0
  7177  001BF8  6E24               	movwf	___awdiv@sign,c
  7178  001BFA  5022               	movf	___awdiv@divisor+1,w,c
  7179  001BFC  0A80               	xorlw	128
  7180  001BFE  6EF3               	movwf	prodl,c
  7181  001C00  0E80               	movlw	128
  7182  001C02  5CF3               	subwf	prodl,w,c
  7183  001C04  0E00               	movlw	0
  7184  001C06  B4D8               	btfsc	status,2,c
  7185  001C08  5C21               	subwf	___awdiv@divisor,w,c
  7186  001C0A  B0D8               	btfsc	status,0,c
  7187  001C0C  D006               	goto	l4347
  7188  001C0E  6C21               	negf	___awdiv@divisor,c
  7189  001C10  1E22               	comf	___awdiv@divisor+1,f,c
  7190  001C12  B0D8               	btfsc	status,0,c
  7191  001C14  2A22               	incf	___awdiv@divisor+1,f,c
  7192  001C16  0E01               	movlw	1
  7193  001C18  6E24               	movwf	___awdiv@sign,c
  7194  001C1A                     l4347:
  7195  001C1A  5020               	movf	___awdiv@dividend+1,w,c
  7196  001C1C  0A80               	xorlw	128
  7197  001C1E  6EF3               	movwf	prodl,c
  7198  001C20  0E80               	movlw	128
  7199  001C22  5CF3               	subwf	prodl,w,c
  7200  001C24  0E00               	movlw	0
  7201  001C26  B4D8               	btfsc	status,2,c
  7202  001C28  5C1F               	subwf	___awdiv@dividend,w,c
  7203  001C2A  B0D8               	btfsc	status,0,c
  7204  001C2C  D006               	goto	l4353
  7205  001C2E  6C1F               	negf	___awdiv@dividend,c
  7206  001C30  1E20               	comf	___awdiv@dividend+1,f,c
  7207  001C32  B0D8               	btfsc	status,0,c
  7208  001C34  2A20               	incf	___awdiv@dividend+1,f,c
  7209  001C36  0E01               	movlw	1
  7210  001C38  1A24               	xorwf	___awdiv@sign,f,c
  7211  001C3A                     l4353:
  7212  001C3A  0E00               	movlw	0
  7213  001C3C  6E26               	movwf	___awdiv@quotient+1,c
  7214  001C3E  0E00               	movlw	0
  7215  001C40  6E25               	movwf	___awdiv@quotient,c
  7216  001C42  5022               	movf	___awdiv@divisor+1,w,c
  7217  001C44  1021               	iorwf	___awdiv@divisor,w,c
  7218  001C46  B4D8               	btfsc	status,2,c
  7219  001C48  D01C               	goto	l4375
  7220  001C4A  0E01               	movlw	1
  7221  001C4C  6E23               	movwf	___awdiv@counter,c
  7222  001C4E  D004               	goto	l4361
  7223  001C50                     l4359:
  7224  001C50  90D8               	bcf	status,0,c
  7225  001C52  3621               	rlcf	___awdiv@divisor,f,c
  7226  001C54  3622               	rlcf	___awdiv@divisor+1,f,c
  7227  001C56  2A23               	incf	___awdiv@counter,f,c
  7228  001C58                     l4361:
  7229  001C58  AE22               	btfss	___awdiv@divisor+1,7,c
  7230  001C5A  D7FA               	goto	l4359
  7231  001C5C                     l4363:
  7232  001C5C  90D8               	bcf	status,0,c
  7233  001C5E  3625               	rlcf	___awdiv@quotient,f,c
  7234  001C60  3626               	rlcf	___awdiv@quotient+1,f,c
  7235  001C62  5021               	movf	___awdiv@divisor,w,c
  7236  001C64  5C1F               	subwf	___awdiv@dividend,w,c
  7237  001C66  5022               	movf	___awdiv@divisor+1,w,c
  7238  001C68  5820               	subwfb	___awdiv@dividend+1,w,c
  7239  001C6A  A0D8               	btfss	status,0,c
  7240  001C6C  D005               	goto	l4371
  7241  001C6E  5021               	movf	___awdiv@divisor,w,c
  7242  001C70  5E1F               	subwf	___awdiv@dividend,f,c
  7243  001C72  5022               	movf	___awdiv@divisor+1,w,c
  7244  001C74  5A20               	subwfb	___awdiv@dividend+1,f,c
  7245  001C76  8025               	bsf	___awdiv@quotient,0,c
  7246  001C78                     l4371:
  7247  001C78  90D8               	bcf	status,0,c
  7248  001C7A  3222               	rrcf	___awdiv@divisor+1,f,c
  7249  001C7C  3221               	rrcf	___awdiv@divisor,f,c
  7250  001C7E  2E23               	decfsz	___awdiv@counter,f,c
  7251  001C80  D7ED               	goto	l4363
  7252  001C82                     l4375:
  7253  001C82  5024               	movf	___awdiv@sign,w,c
  7254  001C84  B4D8               	btfsc	status,2,c
  7255  001C86  D004               	goto	l4379
  7256  001C88  6C25               	negf	___awdiv@quotient,c
  7257  001C8A  1E26               	comf	___awdiv@quotient+1,f,c
  7258  001C8C  B0D8               	btfsc	status,0,c
  7259  001C8E  2A26               	incf	___awdiv@quotient+1,f,c
  7260  001C90                     l4379:
  7261  001C90  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7262  001C94  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7263  001C98  0012               	return	
  7264  001C9A                     __end_of___awdiv:
  7265                           	opt stack 0
  7266                           tblptru	equ	0xFF8
  7267                           tblptrh	equ	0xFF7
  7268                           tblptrl	equ	0xFF6
  7269                           tablat	equ	0xFF5
  7270                           prodh	equ	0xFF4
  7271                           prodl	equ	0xFF3
  7272                           intcon	equ	0xFF2
  7273                           indf0	equ	0xFEF
  7274                           postinc0	equ	0xFEE
  7275                           fsr0h	equ	0xFEA
  7276                           fsr0l	equ	0xFE9
  7277                           wreg	equ	0xFE8
  7278                           postinc1	equ	0xFE6
  7279                           postdec1	equ	0xFE5
  7280                           fsr1l	equ	0xFE1
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function __tdiv_to_l_ *****************
  7289 ;; Defined at:
  7290 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  f1              3   24[COMRAM] float 
  7293 ;;  f2              3   27[COMRAM] float 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  quot            4   33[COMRAM] unsigned long 
  7296 ;;  exp1            1   38[COMRAM] unsigned char 
  7297 ;;  cntr            1   37[COMRAM] unsigned char 
  7298 ;; Return value:  Size  Location     Type
  7299 ;;                  4   24[COMRAM] unsigned long 
  7300 ;; Registers used:
  7301 ;;		wreg, status,2, status,0
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7307 ;;      Params:         6       0       0       0       0       0       0       0       0
  7308 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7309 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7310 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7311 ;;Total ram usage:       15 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:    4
  7314 ;; This function calls:
  7315 ;;		Nothing
  7316 ;; This function is called by:
  7317 ;;		_sprintf
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text33
  7322  0017FA                     __ptext33:
  7323                           	opt stack 0
  7324  0017FA                     __tdiv_to_l_:
  7325                           	opt stack 23
  7326                           
  7327                           ;incstack = 0
  7328  0017FA  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7329  0017FE  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7330  001800  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7331  001802  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7332  001804  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7333  001806  E301               	bnc	u4621
  7334  001808  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7335  00180A                     u4621:
  7336  00180A  501F               	movf	??__tdiv_to_l_,w,c
  7337  00180C  6E27               	movwf	__tdiv_to_l_@exp1,c
  7338  00180E  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7339  001810  D001               	goto	l4581
  7340  001812  D059               	goto	u4690
  7341  001814                     l4581:
  7342  001814  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7343  001818  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7344  00181A  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7345  00181C  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7346  00181E  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7347  001820  E301               	bnc	u4641
  7348  001822  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7349  001824                     u4641:
  7350  001824  501F               	movf	??__tdiv_to_l_,w,c
  7351  001826  6E26               	movwf	__tdiv_to_l_@cntr,c
  7352  001828  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7353  00182A  D001               	goto	l4587
  7354  00182C  D04C               	goto	u4690
  7355  00182E                     l4587:
  7356  00182E  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7357  001830  0EFF               	movlw	255
  7358  001832  1619               	andwf	__tdiv_to_l_@f1,f,c
  7359  001834  0EFF               	movlw	255
  7360  001836  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7361  001838  0E00               	movlw	0
  7362  00183A  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7363  00183C  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7364  00183E  0EFF               	movlw	255
  7365  001840  161C               	andwf	__tdiv_to_l_@f2,f,c
  7366  001842  0EFF               	movlw	255
  7367  001844  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7368  001846  0E00               	movlw	0
  7369  001848  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7370  00184A  0E00               	movlw	0
  7371  00184C  6E22               	movwf	__tdiv_to_l_@quot,c
  7372  00184E  0E00               	movlw	0
  7373  001850  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7374  001852  0E00               	movlw	0
  7375  001854  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7376  001856  0E00               	movlw	0
  7377  001858  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7378  00185A  0E7F               	movlw	127
  7379  00185C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7380  00185E  5026               	movf	__tdiv_to_l_@cntr,w,c
  7381  001860  0F98               	addlw	152
  7382  001862  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7383  001864  0E18               	movlw	24
  7384  001866  6E26               	movwf	__tdiv_to_l_@cntr,c
  7385  001868                     l1010:
  7386  001868  90D8               	bcf	status,0,c
  7387  00186A  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7388  00186C  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7389  00186E  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7390  001870  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7391  001872  501C               	movf	__tdiv_to_l_@f2,w,c
  7392  001874  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7393  001876  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7394  001878  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7395  00187A  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7396  00187C  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7397  00187E  A0D8               	btfss	status,0,c
  7398  001880  D007               	goto	l1011
  7399  001882  501C               	movf	__tdiv_to_l_@f2,w,c
  7400  001884  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7401  001886  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7402  001888  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7403  00188A  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7404  00188C  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7405  00188E  8022               	bsf	__tdiv_to_l_@quot,0,c
  7406  001890                     l1011:
  7407  001890  90D8               	bcf	status,0,c
  7408  001892  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7409  001894  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7410  001896  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7411  001898  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7412  00189A  D7E6               	goto	l1010
  7413  00189C  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7414  00189E  D010               	goto	l4619
  7415  0018A0  5027               	movf	__tdiv_to_l_@exp1,w,c
  7416  0018A2  0A80               	xorlw	128
  7417  0018A4  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7418  0018A6  0EE9               	movlw	233
  7419  0018A8  0A80               	xorlw	128
  7420  0018AA  5C1F               	subwf	??__tdiv_to_l_,w,c
  7421  0018AC  A0D8               	btfss	status,0,c
  7422  0018AE  D00B               	goto	u4690
  7423  0018B0                     l4615:
  7424  0018B0  90D8               	bcf	status,0,c
  7425  0018B2  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7426  0018B4  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7427  0018B6  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7428  0018B8  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7429  0018BA  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7430  0018BC  D7F9               	goto	l4615
  7431  0018BE  D014               	goto	l1017
  7432  0018C0                     l4619:
  7433  0018C0  0E17               	movlw	23
  7434  0018C2  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7435  0018C4  D00F               	goto	l4627
  7436  0018C6                     u4690:
  7437  0018C6  0E00               	movlw	0
  7438  0018C8  6E19               	movwf	?__tdiv_to_l_,c
  7439  0018CA  0E00               	movlw	0
  7440  0018CC  6E1A               	movwf	?__tdiv_to_l_+1,c
  7441  0018CE  0E00               	movlw	0
  7442  0018D0  6E1B               	movwf	?__tdiv_to_l_+2,c
  7443  0018D2  0E00               	movlw	0
  7444  0018D4  6E1C               	movwf	?__tdiv_to_l_+3,c
  7445  0018D6  D010               	goto	l1008
  7446  0018D8                     l4625:
  7447  0018D8  90D8               	bcf	status,0,c
  7448  0018DA  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7449  0018DC  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7450  0018DE  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7451  0018E0  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7452  0018E2  0627               	decf	__tdiv_to_l_@exp1,f,c
  7453  0018E4                     l4627:
  7454  0018E4  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7455  0018E6  D7F8               	goto	l4625
  7456  0018E8                     l1017:
  7457  0018E8  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7458  0018EC  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7459  0018F0  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7460  0018F4  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7461  0018F8                     l1008:
  7462  0018F8  0012               	return	
  7463  0018FA                     __end_of__tdiv_to_l_:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           indf0	equ	0xFEF
  7473                           postinc0	equ	0xFEE
  7474                           fsr0h	equ	0xFEA
  7475                           fsr0l	equ	0xFE9
  7476                           wreg	equ	0xFE8
  7477                           postinc1	equ	0xFE6
  7478                           postdec1	equ	0xFE5
  7479                           fsr1l	equ	0xFE1
  7480                           indf2	equ	0xFDF
  7481                           postinc2	equ	0xFDE
  7482                           postdec2	equ	0xFDD
  7483                           fsr2h	equ	0xFDA
  7484                           fsr2l	equ	0xFD9
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function __div_to_l_ *****************
  7488 ;; Defined at:
  7489 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  f1              3   24[COMRAM] unsigned long 
  7492 ;;  f2              3   27[COMRAM] unsigned long 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  quot            4   34[COMRAM] unsigned long 
  7495 ;;  exp1            1   39[COMRAM] unsigned char 
  7496 ;;  cntr            1   38[COMRAM] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  4   24[COMRAM] unsigned long 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7506 ;;      Params:         6       0       0       0       0       0       0       0       0
  7507 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7508 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7509 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7510 ;;Total ram usage:       16 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    4
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_sprintf
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text34
  7521  0016C4                     __ptext34:
  7522                           	opt stack 0
  7523  0016C4                     __div_to_l_:
  7524                           	opt stack 23
  7525                           
  7526                           ;incstack = 0
  7527  0016C4  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7528  0016C8  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7529  0016CC  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7530  0016D0  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7531  0016D4  0E18               	movlw	24
  7532  0016D6  D005               	goto	u4710
  7533  0016D8                     u4715:
  7534  0016D8  90D8               	bcf	status,0,c
  7535  0016DA  3222               	rrcf	??__div_to_l_+3,f,c
  7536  0016DC  3221               	rrcf	??__div_to_l_+2,f,c
  7537  0016DE  3220               	rrcf	??__div_to_l_+1,f,c
  7538  0016E0  321F               	rrcf	??__div_to_l_,f,c
  7539  0016E2                     u4710:
  7540  0016E2  2EE8               	decfsz	wreg,f,c
  7541  0016E4  D7F9               	goto	u4715
  7542  0016E6  501F               	movf	??__div_to_l_,w,c
  7543  0016E8  6E28               	movwf	__div_to_l_@exp1,c
  7544  0016EA  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7545  0016EC  D001               	goto	l4635
  7546  0016EE  D06B               	goto	u4780
  7547  0016F0                     l4635:
  7548  0016F0  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7549  0016F4  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7550  0016F8  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7551  0016FC  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7552  001700  0E18               	movlw	24
  7553  001702  D005               	goto	u4730
  7554  001704                     u4735:
  7555  001704  90D8               	bcf	status,0,c
  7556  001706  3222               	rrcf	??__div_to_l_+3,f,c
  7557  001708  3221               	rrcf	??__div_to_l_+2,f,c
  7558  00170A  3220               	rrcf	??__div_to_l_+1,f,c
  7559  00170C  321F               	rrcf	??__div_to_l_,f,c
  7560  00170E                     u4730:
  7561  00170E  2EE8               	decfsz	wreg,f,c
  7562  001710  D7F9               	goto	u4735
  7563  001712  501F               	movf	??__div_to_l_,w,c
  7564  001714  6E27               	movwf	__div_to_l_@cntr,c
  7565  001716  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7566  001718  D001               	goto	l4641
  7567  00171A  D055               	goto	u4780
  7568  00171C                     l4641:
  7569  00171C  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7570  00171E  0EFF               	movlw	255
  7571  001720  1619               	andwf	__div_to_l_@f1,f,c
  7572  001722  0EFF               	movlw	255
  7573  001724  161A               	andwf	__div_to_l_@f1+1,f,c
  7574  001726  0EFF               	movlw	255
  7575  001728  161B               	andwf	__div_to_l_@f1+2,f,c
  7576  00172A  0E00               	movlw	0
  7577  00172C  161C               	andwf	__div_to_l_@f1+3,f,c
  7578  00172E  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7579  001730  0EFF               	movlw	255
  7580  001732  161C               	andwf	__div_to_l_@f2,f,c
  7581  001734  0EFF               	movlw	255
  7582  001736  161D               	andwf	__div_to_l_@f2+1,f,c
  7583  001738  0EFF               	movlw	255
  7584  00173A  161E               	andwf	__div_to_l_@f2+2,f,c
  7585  00173C  0E00               	movlw	0
  7586  00173E  161F               	andwf	__div_to_l_@f2+3,f,c
  7587  001740  0E00               	movlw	0
  7588  001742  6E23               	movwf	__div_to_l_@quot,c
  7589  001744  0E00               	movlw	0
  7590  001746  6E24               	movwf	__div_to_l_@quot+1,c
  7591  001748  0E00               	movlw	0
  7592  00174A  6E25               	movwf	__div_to_l_@quot+2,c
  7593  00174C  0E00               	movlw	0
  7594  00174E  6E26               	movwf	__div_to_l_@quot+3,c
  7595  001750  0E7F               	movlw	127
  7596  001752  5E28               	subwf	__div_to_l_@exp1,f,c
  7597  001754  5027               	movf	__div_to_l_@cntr,w,c
  7598  001756  0FA0               	addlw	160
  7599  001758  5E28               	subwf	__div_to_l_@exp1,f,c
  7600  00175A  0E20               	movlw	32
  7601  00175C  6E27               	movwf	__div_to_l_@cntr,c
  7602  00175E                     l4655:
  7603  00175E  90D8               	bcf	status,0,c
  7604  001760  3623               	rlcf	__div_to_l_@quot,f,c
  7605  001762  3624               	rlcf	__div_to_l_@quot+1,f,c
  7606  001764  3625               	rlcf	__div_to_l_@quot+2,f,c
  7607  001766  3626               	rlcf	__div_to_l_@quot+3,f,c
  7608  001768  501C               	movf	__div_to_l_@f2,w,c
  7609  00176A  5C19               	subwf	__div_to_l_@f1,w,c
  7610  00176C  501D               	movf	__div_to_l_@f2+1,w,c
  7611  00176E  581A               	subwfb	__div_to_l_@f1+1,w,c
  7612  001770  501E               	movf	__div_to_l_@f2+2,w,c
  7613  001772  581B               	subwfb	__div_to_l_@f1+2,w,c
  7614  001774  501F               	movf	__div_to_l_@f2+3,w,c
  7615  001776  581C               	subwfb	__div_to_l_@f1+3,w,c
  7616  001778  A0D8               	btfss	status,0,c
  7617  00177A  D009               	goto	l4663
  7618  00177C  501C               	movf	__div_to_l_@f2,w,c
  7619  00177E  5E19               	subwf	__div_to_l_@f1,f,c
  7620  001780  501D               	movf	__div_to_l_@f2+1,w,c
  7621  001782  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7622  001784  501E               	movf	__div_to_l_@f2+2,w,c
  7623  001786  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7624  001788  501F               	movf	__div_to_l_@f2+3,w,c
  7625  00178A  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7626  00178C  8023               	bsf	__div_to_l_@quot,0,c
  7627  00178E                     l4663:
  7628  00178E  90D8               	bcf	status,0,c
  7629  001790  3619               	rlcf	__div_to_l_@f1,f,c
  7630  001792  361A               	rlcf	__div_to_l_@f1+1,f,c
  7631  001794  361B               	rlcf	__div_to_l_@f1+2,f,c
  7632  001796  361C               	rlcf	__div_to_l_@f1+3,f,c
  7633  001798  2E27               	decfsz	__div_to_l_@cntr,f,c
  7634  00179A  D7E1               	goto	l4655
  7635  00179C  AE28               	btfss	__div_to_l_@exp1,7,c
  7636  00179E  D010               	goto	l4677
  7637  0017A0  5028               	movf	__div_to_l_@exp1,w,c
  7638  0017A2  0A80               	xorlw	128
  7639  0017A4  6E1F               	movwf	??__div_to_l_& (0+255),c
  7640  0017A6  0EE1               	movlw	225
  7641  0017A8  0A80               	xorlw	128
  7642  0017AA  5C1F               	subwf	??__div_to_l_,w,c
  7643  0017AC  A0D8               	btfss	status,0,c
  7644  0017AE  D00B               	goto	u4780
  7645  0017B0                     l4673:
  7646  0017B0  90D8               	bcf	status,0,c
  7647  0017B2  3226               	rrcf	__div_to_l_@quot+3,f,c
  7648  0017B4  3225               	rrcf	__div_to_l_@quot+2,f,c
  7649  0017B6  3224               	rrcf	__div_to_l_@quot+1,f,c
  7650  0017B8  3223               	rrcf	__div_to_l_@quot,f,c
  7651  0017BA  3E28               	incfsz	__div_to_l_@exp1,f,c
  7652  0017BC  D7F9               	goto	l4673
  7653  0017BE  D014               	goto	l899
  7654  0017C0                     l4677:
  7655  0017C0  0E1F               	movlw	31
  7656  0017C2  6428               	cpfsgt	__div_to_l_@exp1,c
  7657  0017C4  D00F               	goto	l4685
  7658  0017C6                     u4780:
  7659  0017C6  0E00               	movlw	0
  7660  0017C8  6E19               	movwf	?__div_to_l_,c
  7661  0017CA  0E00               	movlw	0
  7662  0017CC  6E1A               	movwf	?__div_to_l_+1,c
  7663  0017CE  0E00               	movlw	0
  7664  0017D0  6E1B               	movwf	?__div_to_l_+2,c
  7665  0017D2  0E00               	movlw	0
  7666  0017D4  6E1C               	movwf	?__div_to_l_+3,c
  7667  0017D6  D010               	goto	l890
  7668  0017D8                     l4683:
  7669  0017D8  90D8               	bcf	status,0,c
  7670  0017DA  3623               	rlcf	__div_to_l_@quot,f,c
  7671  0017DC  3624               	rlcf	__div_to_l_@quot+1,f,c
  7672  0017DE  3625               	rlcf	__div_to_l_@quot+2,f,c
  7673  0017E0  3626               	rlcf	__div_to_l_@quot+3,f,c
  7674  0017E2  0628               	decf	__div_to_l_@exp1,f,c
  7675  0017E4                     l4685:
  7676  0017E4  6628               	tstfsz	__div_to_l_@exp1,c
  7677  0017E6  D7F8               	goto	l4683
  7678  0017E8                     l899:
  7679  0017E8  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7680  0017EC  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7681  0017F0  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7682  0017F4  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7683  0017F8                     l890:
  7684  0017F8  0012               	return	
  7685  0017FA                     __end_of__div_to_l_:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           indf0	equ	0xFEF
  7695                           postinc0	equ	0xFEE
  7696                           fsr0h	equ	0xFEA
  7697                           fsr0l	equ	0xFE9
  7698                           wreg	equ	0xFE8
  7699                           postinc1	equ	0xFE6
  7700                           postdec1	equ	0xFE5
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function ___lltoft *****************
  7710 ;; Defined at:
  7711 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  c               4   32[COMRAM] unsigned long 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  exp             1   40[COMRAM] unsigned char 
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  3   32[COMRAM] float 
  7718 ;; Registers used:
  7719 ;;		wreg, status,2, status,0, cstack
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7725 ;;      Params:         4       0       0       0       0       0       0       0       0
  7726 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7727 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7728 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7729 ;;Total ram usage:        9 bytes
  7730 ;; Hardware stack levels used:    1
  7731 ;; Hardware stack levels required when called:    5
  7732 ;; This function calls:
  7733 ;;		___ftpack
  7734 ;; This function is called by:
  7735 ;;		_sprintf
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           	psect	text35
  7740  002382                     __ptext35:
  7741                           	opt stack 0
  7742  002382                     ___lltoft:
  7743                           	opt stack 22
  7744                           
  7745                           ;incstack = 0
  7746  002382  0E8E               	movlw	142
  7747  002384  6E29               	movwf	___lltoft@exp,c
  7748  002386  D006               	goto	l4803
  7749  002388                     l4801:
  7750  002388  90D8               	bcf	status,0,c
  7751  00238A  3224               	rrcf	___lltoft@c+3,f,c
  7752  00238C  3223               	rrcf	___lltoft@c+2,f,c
  7753  00238E  3222               	rrcf	___lltoft@c+1,f,c
  7754  002390  3221               	rrcf	___lltoft@c,f,c
  7755  002392  2A29               	incf	___lltoft@exp,f,c
  7756  002394                     l4803:
  7757  002394  0E00               	movlw	0
  7758  002396  1421               	andwf	___lltoft@c,w,c
  7759  002398  6E25               	movwf	??___lltoft& (0+255),c
  7760  00239A  0E00               	movlw	0
  7761  00239C  1422               	andwf	___lltoft@c+1,w,c
  7762  00239E  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7763  0023A0  0E00               	movlw	0
  7764  0023A2  1423               	andwf	___lltoft@c+2,w,c
  7765  0023A4  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7766  0023A6  0EFF               	movlw	255
  7767  0023A8  1424               	andwf	___lltoft@c+3,w,c
  7768  0023AA  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7769  0023AC  5028               	movf	??___lltoft+3,w,c
  7770  0023AE  1025               	iorwf	??___lltoft,w,c
  7771  0023B0  1026               	iorwf	??___lltoft+1,w,c
  7772  0023B2  1027               	iorwf	??___lltoft+2,w,c
  7773  0023B4  A4D8               	btfss	status,2,c
  7774  0023B6  D7E8               	goto	l4801
  7775  0023B8  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7776  0023BC  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7777  0023C0  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7778  0023C4  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7779  0023C8  0E00               	movlw	0
  7780  0023CA  6E1D               	movwf	___ftpack@sign,c
  7781  0023CC  EC54  F00D         	call	___ftpack	;wreg free
  7782  0023D0  C019  F021         	movff	?___ftpack,?___lltoft
  7783  0023D4  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7784  0023D8  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7785  0023DC  0012               	return	
  7786  0023DE                     __end_of___lltoft:
  7787                           	opt stack 0
  7788                           tblptru	equ	0xFF8
  7789                           tblptrh	equ	0xFF7
  7790                           tblptrl	equ	0xFF6
  7791                           tablat	equ	0xFF5
  7792                           prodh	equ	0xFF4
  7793                           prodl	equ	0xFF3
  7794                           intcon	equ	0xFF2
  7795                           indf0	equ	0xFEF
  7796                           postinc0	equ	0xFEE
  7797                           fsr0h	equ	0xFEA
  7798                           fsr0l	equ	0xFE9
  7799                           wreg	equ	0xFE8
  7800                           postinc1	equ	0xFE6
  7801                           postdec1	equ	0xFE5
  7802                           fsr1l	equ	0xFE1
  7803                           indf2	equ	0xFDF
  7804                           postinc2	equ	0xFDE
  7805                           postdec2	equ	0xFDD
  7806                           fsr2h	equ	0xFDA
  7807                           fsr2l	equ	0xFD9
  7808                           status	equ	0xFD8
  7809                           
  7810 ;; *************** function ___llmod *****************
  7811 ;; Defined at:
  7812 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  dividend        4   37[COMRAM] unsigned long 
  7815 ;;  divisor         4   41[COMRAM] unsigned long 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  counter         1   45[COMRAM] unsigned char 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  4   37[COMRAM] unsigned long 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7827 ;;      Params:         8       0       0       0       0       0       0       0       0
  7828 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7830 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7831 ;;Total ram usage:        9 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    4
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_sprintf
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text36
  7842  00231C                     __ptext36:
  7843                           	opt stack 0
  7844  00231C                     ___llmod:
  7845                           	opt stack 23
  7846                           
  7847                           ;incstack = 0
  7848  00231C  502D               	movf	___llmod@divisor+3,w,c
  7849  00231E  102A               	iorwf	___llmod@divisor,w,c
  7850  002320  102B               	iorwf	___llmod@divisor+1,w,c
  7851  002322  102C               	iorwf	___llmod@divisor+2,w,c
  7852  002324  B4D8               	btfsc	status,2,c
  7853  002326  D024               	goto	l1101
  7854  002328  0E01               	movlw	1
  7855  00232A  6E2E               	movwf	___llmod@counter,c
  7856  00232C  D006               	goto	l4789
  7857  00232E                     l4787:
  7858  00232E  90D8               	bcf	status,0,c
  7859  002330  362A               	rlcf	___llmod@divisor,f,c
  7860  002332  362B               	rlcf	___llmod@divisor+1,f,c
  7861  002334  362C               	rlcf	___llmod@divisor+2,f,c
  7862  002336  362D               	rlcf	___llmod@divisor+3,f,c
  7863  002338  2A2E               	incf	___llmod@counter,f,c
  7864  00233A                     l4789:
  7865  00233A  AE2D               	btfss	___llmod@divisor+3,7,c
  7866  00233C  D7F8               	goto	l4787
  7867  00233E                     l4791:
  7868  00233E  502A               	movf	___llmod@divisor,w,c
  7869  002340  5C26               	subwf	___llmod@dividend,w,c
  7870  002342  502B               	movf	___llmod@divisor+1,w,c
  7871  002344  5827               	subwfb	___llmod@dividend+1,w,c
  7872  002346  502C               	movf	___llmod@divisor+2,w,c
  7873  002348  5828               	subwfb	___llmod@dividend+2,w,c
  7874  00234A  502D               	movf	___llmod@divisor+3,w,c
  7875  00234C  5829               	subwfb	___llmod@dividend+3,w,c
  7876  00234E  A0D8               	btfss	status,0,c
  7877  002350  D008               	goto	l4795
  7878  002352  502A               	movf	___llmod@divisor,w,c
  7879  002354  5E26               	subwf	___llmod@dividend,f,c
  7880  002356  502B               	movf	___llmod@divisor+1,w,c
  7881  002358  5A27               	subwfb	___llmod@dividend+1,f,c
  7882  00235A  502C               	movf	___llmod@divisor+2,w,c
  7883  00235C  5A28               	subwfb	___llmod@dividend+2,f,c
  7884  00235E  502D               	movf	___llmod@divisor+3,w,c
  7885  002360  5A29               	subwfb	___llmod@dividend+3,f,c
  7886  002362                     l4795:
  7887  002362  90D8               	bcf	status,0,c
  7888  002364  322D               	rrcf	___llmod@divisor+3,f,c
  7889  002366  322C               	rrcf	___llmod@divisor+2,f,c
  7890  002368  322B               	rrcf	___llmod@divisor+1,f,c
  7891  00236A  322A               	rrcf	___llmod@divisor,f,c
  7892  00236C  2E2E               	decfsz	___llmod@counter,f,c
  7893  00236E  D7E7               	goto	l4791
  7894  002370                     l1101:
  7895  002370  C026  F026         	movff	___llmod@dividend,?___llmod
  7896  002374  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7897  002378  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7898  00237C  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7899  002380  0012               	return	
  7900  002382                     __end_of___llmod:
  7901                           	opt stack 0
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           indf0	equ	0xFEF
  7910                           postinc0	equ	0xFEE
  7911                           fsr0h	equ	0xFEA
  7912                           fsr0l	equ	0xFE9
  7913                           wreg	equ	0xFE8
  7914                           postinc1	equ	0xFE6
  7915                           postdec1	equ	0xFE5
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           fsr2h	equ	0xFDA
  7921                           fsr2l	equ	0xFD9
  7922                           status	equ	0xFD8
  7923                           
  7924 ;; *************** function ___lldiv *****************
  7925 ;; Defined at:
  7926 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;  dividend        4   24[COMRAM] unsigned long 
  7929 ;;  divisor         4   28[COMRAM] unsigned long 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  quotient        4   32[COMRAM] unsigned long 
  7932 ;;  counter         1   36[COMRAM] unsigned char 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  4   24[COMRAM] unsigned long 
  7935 ;; Registers used:
  7936 ;;		wreg, status,2, status,0
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7942 ;;      Params:         8       0       0       0       0       0       0       0       0
  7943 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7945 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7946 ;;Total ram usage:       13 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    4
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		_sprintf
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text37
  7957  001F6A                     __ptext37:
  7958                           	opt stack 0
  7959  001F6A                     ___lldiv:
  7960                           	opt stack 23
  7961                           
  7962                           ;incstack = 0
  7963  001F6A  0E00               	movlw	0
  7964  001F6C  6E21               	movwf	___lldiv@quotient,c
  7965  001F6E  0E00               	movlw	0
  7966  001F70  6E22               	movwf	___lldiv@quotient+1,c
  7967  001F72  0E00               	movlw	0
  7968  001F74  6E23               	movwf	___lldiv@quotient+2,c
  7969  001F76  0E00               	movlw	0
  7970  001F78  6E24               	movwf	___lldiv@quotient+3,c
  7971  001F7A  5020               	movf	___lldiv@divisor+3,w,c
  7972  001F7C  101D               	iorwf	___lldiv@divisor,w,c
  7973  001F7E  101E               	iorwf	___lldiv@divisor+1,w,c
  7974  001F80  101F               	iorwf	___lldiv@divisor+2,w,c
  7975  001F82  B4D8               	btfsc	status,2,c
  7976  001F84  D02A               	goto	l1091
  7977  001F86  0E01               	movlw	1
  7978  001F88  6E25               	movwf	___lldiv@counter,c
  7979  001F8A  D006               	goto	l4769
  7980  001F8C                     l4767:
  7981  001F8C  90D8               	bcf	status,0,c
  7982  001F8E  361D               	rlcf	___lldiv@divisor,f,c
  7983  001F90  361E               	rlcf	___lldiv@divisor+1,f,c
  7984  001F92  361F               	rlcf	___lldiv@divisor+2,f,c
  7985  001F94  3620               	rlcf	___lldiv@divisor+3,f,c
  7986  001F96  2A25               	incf	___lldiv@counter,f,c
  7987  001F98                     l4769:
  7988  001F98  AE20               	btfss	___lldiv@divisor+3,7,c
  7989  001F9A  D7F8               	goto	l4767
  7990  001F9C                     l4771:
  7991  001F9C  90D8               	bcf	status,0,c
  7992  001F9E  3621               	rlcf	___lldiv@quotient,f,c
  7993  001FA0  3622               	rlcf	___lldiv@quotient+1,f,c
  7994  001FA2  3623               	rlcf	___lldiv@quotient+2,f,c
  7995  001FA4  3624               	rlcf	___lldiv@quotient+3,f,c
  7996  001FA6  501D               	movf	___lldiv@divisor,w,c
  7997  001FA8  5C19               	subwf	___lldiv@dividend,w,c
  7998  001FAA  501E               	movf	___lldiv@divisor+1,w,c
  7999  001FAC  581A               	subwfb	___lldiv@dividend+1,w,c
  8000  001FAE  501F               	movf	___lldiv@divisor+2,w,c
  8001  001FB0  581B               	subwfb	___lldiv@dividend+2,w,c
  8002  001FB2  5020               	movf	___lldiv@divisor+3,w,c
  8003  001FB4  581C               	subwfb	___lldiv@dividend+3,w,c
  8004  001FB6  A0D8               	btfss	status,0,c
  8005  001FB8  D009               	goto	l4779
  8006  001FBA  501D               	movf	___lldiv@divisor,w,c
  8007  001FBC  5E19               	subwf	___lldiv@dividend,f,c
  8008  001FBE  501E               	movf	___lldiv@divisor+1,w,c
  8009  001FC0  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8010  001FC2  501F               	movf	___lldiv@divisor+2,w,c
  8011  001FC4  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8012  001FC6  5020               	movf	___lldiv@divisor+3,w,c
  8013  001FC8  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8014  001FCA  8021               	bsf	___lldiv@quotient,0,c
  8015  001FCC                     l4779:
  8016  001FCC  90D8               	bcf	status,0,c
  8017  001FCE  3220               	rrcf	___lldiv@divisor+3,f,c
  8018  001FD0  321F               	rrcf	___lldiv@divisor+2,f,c
  8019  001FD2  321E               	rrcf	___lldiv@divisor+1,f,c
  8020  001FD4  321D               	rrcf	___lldiv@divisor,f,c
  8021  001FD6  2E25               	decfsz	___lldiv@counter,f,c
  8022  001FD8  D7E1               	goto	l4771
  8023  001FDA                     l1091:
  8024  001FDA  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8025  001FDE  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8026  001FE2  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8027  001FE6  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8028  001FEA  0012               	return	
  8029  001FEC                     __end_of___lldiv:
  8030                           	opt stack 0
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           prodh	equ	0xFF4
  8036                           prodl	equ	0xFF3
  8037                           intcon	equ	0xFF2
  8038                           indf0	equ	0xFEF
  8039                           postinc0	equ	0xFEE
  8040                           fsr0h	equ	0xFEA
  8041                           fsr0l	equ	0xFE9
  8042                           wreg	equ	0xFE8
  8043                           postinc1	equ	0xFE6
  8044                           postdec1	equ	0xFE5
  8045                           fsr1l	equ	0xFE1
  8046                           indf2	equ	0xFDF
  8047                           postinc2	equ	0xFDE
  8048                           postdec2	equ	0xFDD
  8049                           fsr2h	equ	0xFDA
  8050                           fsr2l	equ	0xFD9
  8051                           status	equ	0xFD8
  8052                           
  8053 ;; *************** function ___fttol *****************
  8054 ;; Defined at:
  8055 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  f1              3   19[BANK0 ] float 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  lval            4   29[BANK0 ] unsigned long 
  8060 ;;  exp1            1   33[BANK0 ] unsigned char 
  8061 ;;  sign1           1   28[BANK0 ] unsigned char 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  4   19[BANK0 ] long 
  8064 ;; Registers used:
  8065 ;;		wreg, status,2, status,0
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8071 ;;      Params:         0       4       0       0       0       0       0       0       0
  8072 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8073 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8074 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8075 ;;Total ram usage:       15 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    4
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_PWM_DutyCycle1
  8082 ;;		_PWM_DutyCycle2
  8083 ;;		_sprintf
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text38
  8088  001436                     __ptext38:
  8089                           	opt stack 0
  8090  001436                     ___fttol:
  8091                           	opt stack 23
  8092                           
  8093                           ;incstack = 0
  8094  001436  0100               	movlb	0	; () banked
  8095  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8096  00143C  0100               	movlb	0	; () banked
  8097  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8098  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8099  001442  0100               	movlb	0	; () banked
  8100  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8101  001446  0100               	movlb	0	; () banked
  8102  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8103  00144A  E301               	bnc	u4841
  8104  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8105  00144E                     u4841:
  8106  00144E  0100               	movlb	0	; () banked
  8107  001450  5177               	movf	??___fttol& (0+255),w,b
  8108  001452  0100               	movlb	0	; () banked
  8109  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8110  001456  0100               	movlb	0	; () banked
  8111  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8112  00145A  D001               	goto	l4721
  8113  00145C  D059               	goto	u4890
  8114  00145E                     l4721:
  8115                           
  8116                           ; BSR set to: 0
  8117  00145E  0E17               	movlw	23
  8118  001460  0100               	movlb	0	; () banked
  8119  001462  6F77               	movwf	??___fttol& (0+255),b
  8120  001464  0100               	movlb	0	; () banked
  8121  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8122  00146A  0100               	movlb	0	; () banked
  8123  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8124  001470  0100               	movlb	0	; () banked
  8125  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8126  001476  0100               	movlb	0	; () banked
  8127  001478  2977               	incf	??___fttol& (0+255),w,b
  8128  00147A  0100               	movlb	0	; () banked
  8129  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8130  00147E  D005               	goto	u4860
  8131  001480                     u4865:
  8132  001480  0100               	movlb	0	; () banked
  8133  001482  90D8               	bcf	status,0,c
  8134  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8135  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8136  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8137  00148A                     u4860:
  8138  00148A  0100               	movlb	0	; () banked
  8139  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8140  00148E  D7F8               	goto	u4865
  8141  001490  0100               	movlb	0	; () banked
  8142  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8143  001494  0100               	movlb	0	; () banked
  8144  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8145                           
  8146                           ; BSR set to: 0
  8147  001498  0100               	movlb	0	; () banked
  8148  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8149                           
  8150                           ; BSR set to: 0
  8151  00149C  0EFF               	movlw	255
  8152  00149E  0100               	movlb	0	; () banked
  8153  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8154  0014A2  0EFF               	movlw	255
  8155  0014A4  0100               	movlb	0	; () banked
  8156  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8157  0014A8  0E00               	movlw	0
  8158  0014AA  0100               	movlb	0	; () banked
  8159  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8160                           
  8161                           ; BSR set to: 0
  8162  0014AE  0100               	movlb	0	; () banked
  8163  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8164  0014B2  0100               	movlb	0	; () banked
  8165  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8166  0014B6  0100               	movlb	0	; () banked
  8167  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8168  0014BA  0100               	movlb	0	; () banked
  8169  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8170  0014BE  0100               	movlb	0	; () banked
  8171  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8172  0014C2  0100               	movlb	0	; () banked
  8173  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8174  0014C6  0100               	movlb	0	; () banked
  8175  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8176                           
  8177                           ; BSR set to: 0
  8178  0014CA  0E8E               	movlw	142
  8179  0014CC  0100               	movlb	0	; () banked
  8180  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8181                           
  8182                           ; BSR set to: 0
  8183  0014D0  0100               	movlb	0	; () banked
  8184  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8185  0014D4  D019               	goto	l4743
  8186                           
  8187                           ; BSR set to: 0
  8188  0014D6  0100               	movlb	0	; () banked
  8189  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8190  0014DA  0A80               	xorlw	128
  8191  0014DC  0100               	movlb	0	; () banked
  8192  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8193  0014E0  0EF1               	movlw	241
  8194  0014E2  0A80               	xorlw	128
  8195  0014E4  0100               	movlb	0	; () banked
  8196  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8197  0014E8  A0D8               	btfss	status,0,c
  8198  0014EA  D012               	goto	u4890
  8199  0014EC                     l4739:
  8200                           
  8201                           ; BSR set to: 0
  8202  0014EC  0100               	movlb	0	; () banked
  8203  0014EE  90D8               	bcf	status,0,c
  8204  0014F0  0100               	movlb	0	; () banked
  8205  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8206  0014F4  0100               	movlb	0	; () banked
  8207  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8208  0014F8  0100               	movlb	0	; () banked
  8209  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8210  0014FC  0100               	movlb	0	; () banked
  8211  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8212                           
  8213                           ; BSR set to: 0
  8214  001500  0100               	movlb	0	; () banked
  8215  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8216  001504  D7F3               	goto	l4739
  8217  001506  D020               	goto	l4753
  8218  001508                     l4743:
  8219                           
  8220                           ; BSR set to: 0
  8221  001508  0E17               	movlw	23
  8222  00150A  0100               	movlb	0	; () banked
  8223  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8224  00150E  D019               	goto	l4751
  8225  001510                     u4890:
  8226                           
  8227                           ; BSR set to: 0
  8228  001510  0E00               	movlw	0
  8229  001512  0100               	movlb	0	; () banked
  8230  001514  6F73               	movwf	?___fttol& (0+255),b
  8231  001516  0E00               	movlw	0
  8232  001518  0100               	movlb	0	; () banked
  8233  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8234  00151C  0E00               	movlw	0
  8235  00151E  0100               	movlb	0	; () banked
  8236  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8237  001522  0E00               	movlw	0
  8238  001524  0100               	movlb	0	; () banked
  8239  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8240  001528  D02A               	goto	l1052
  8241  00152A                     l4749:
  8242                           
  8243                           ; BSR set to: 0
  8244  00152A  0100               	movlb	0	; () banked
  8245  00152C  90D8               	bcf	status,0,c
  8246  00152E  0100               	movlb	0	; () banked
  8247  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8248  001532  0100               	movlb	0	; () banked
  8249  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8250  001536  0100               	movlb	0	; () banked
  8251  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8252  00153A  0100               	movlb	0	; () banked
  8253  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8254  00153E  0100               	movlb	0	; () banked
  8255  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8256  001542                     l4751:
  8257                           
  8258                           ; BSR set to: 0
  8259  001542  0100               	movlb	0	; () banked
  8260  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8261  001546  D7F1               	goto	l4749
  8262  001548                     l4753:
  8263                           
  8264                           ; BSR set to: 0
  8265  001548  0100               	movlb	0	; () banked
  8266  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8267  00154C  B4D8               	btfsc	status,2,c
  8268  00154E  D00F               	goto	l4757
  8269                           
  8270                           ; BSR set to: 0
  8271  001550  0100               	movlb	0	; () banked
  8272  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8273  001554  0100               	movlb	0	; () banked
  8274  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8275  001558  0100               	movlb	0	; () banked
  8276  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8277  00155C  0100               	movlb	0	; () banked
  8278  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8279  001560  0E00               	movlw	0
  8280  001562  0100               	movlb	0	; () banked
  8281  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8282  001566  0100               	movlb	0	; () banked
  8283  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8284  00156A  0100               	movlb	0	; () banked
  8285  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8286  00156E                     l4757:
  8287                           
  8288                           ; BSR set to: 0
  8289  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8290  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8291  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8292  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8293  00157E                     l1052:
  8294                           
  8295                           ; BSR set to: 0
  8296  00157E  0012               	return	
  8297  001580                     __end_of___fttol:
  8298                           	opt stack 0
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           intcon	equ	0xFF2
  8306                           indf0	equ	0xFEF
  8307                           postinc0	equ	0xFEE
  8308                           fsr0h	equ	0xFEA
  8309                           fsr0l	equ	0xFE9
  8310                           wreg	equ	0xFE8
  8311                           postinc1	equ	0xFE6
  8312                           postdec1	equ	0xFE5
  8313                           fsr1l	equ	0xFE1
  8314                           indf2	equ	0xFDF
  8315                           postinc2	equ	0xFDE
  8316                           postdec2	equ	0xFDD
  8317                           fsr2h	equ	0xFDA
  8318                           fsr2l	equ	0xFD9
  8319                           status	equ	0xFD8
  8320                           
  8321 ;; *************** function ___ftsub *****************
  8322 ;; Defined at:
  8323 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8324 ;; Parameters:    Size  Location     Type
  8325 ;;  f1              3   34[BANK0 ] float 
  8326 ;;  f2              3   37[BANK0 ] float 
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  3   34[BANK0 ] float 
  8331 ;; Registers used:
  8332 ;;		wreg, status,2, status,0, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8338 ;;      Params:         0       6       0       0       0       0       0       0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8341 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8342 ;;Total ram usage:        6 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    6
  8345 ;; This function calls:
  8346 ;;		___ftadd
  8347 ;; This function is called by:
  8348 ;;		_sprintf
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text39
  8353  002510                     __ptext39:
  8354                           	opt stack 0
  8355  002510                     ___ftsub:
  8356                           	opt stack 21
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;incstack = 0
  8360  002510  0E00               	movlw	0
  8361  002512  0100               	movlb	0	; () banked
  8362  002514  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8363  002516  0E00               	movlw	0
  8364  002518  0100               	movlb	0	; () banked
  8365  00251A  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8366  00251C  0E80               	movlw	128
  8367  00251E  0100               	movlb	0	; () banked
  8368  002520  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8369                           
  8370                           ; BSR set to: 0
  8371  002522  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8372  002526  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8373  00252A  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8374  00252E  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8375  002532  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8376  002536  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8377  00253A  EC2F  F008         	call	___ftadd	;wreg free
  8378  00253E  C076  F082         	movff	?___ftadd,?___ftsub
  8379  002542  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8380  002546  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8381  00254A  0012               	return	
  8382  00254C                     __end_of___ftsub:
  8383                           	opt stack 0
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           indf0	equ	0xFEF
  8392                           postinc0	equ	0xFEE
  8393                           fsr0h	equ	0xFEA
  8394                           fsr0l	equ	0xFE9
  8395                           wreg	equ	0xFE8
  8396                           postinc1	equ	0xFE6
  8397                           postdec1	equ	0xFE5
  8398                           fsr1l	equ	0xFE1
  8399                           indf2	equ	0xFDF
  8400                           postinc2	equ	0xFDE
  8401                           postdec2	equ	0xFDD
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function ___ftadd *****************
  8407 ;; Defined at:
  8408 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  f1              3   22[BANK0 ] float 
  8411 ;;  f2              3   25[BANK0 ] float 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  exp1            1   33[BANK0 ] unsigned char 
  8414 ;;  exp2            1   32[BANK0 ] unsigned char 
  8415 ;;  sign            1   31[BANK0 ] unsigned char 
  8416 ;; Return value:  Size  Location     Type
  8417 ;;                  3   22[BANK0 ] float 
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8425 ;;      Params:         0       6       0       0       0       0       0       0       0
  8426 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8427 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8428 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8429 ;;Total ram usage:       12 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    5
  8432 ;; This function calls:
  8433 ;;		___ftpack
  8434 ;; This function is called by:
  8435 ;;		_sprintf
  8436 ;;		___ftsub
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text40
  8441  00105E                     __ptext40:
  8442                           	opt stack 0
  8443  00105E                     ___ftadd:
  8444                           	opt stack 21
  8445                           
  8446                           ;incstack = 0
  8447  00105E  0100               	movlb	0	; () banked
  8448  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8449  001064  0100               	movlb	0	; () banked
  8450  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8451  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8452  00106A  0100               	movlb	0	; () banked
  8453  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8454  00106E  0100               	movlb	0	; () banked
  8455  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8456  001072  E301               	bnc	u4001
  8457  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8458  001076                     u4001:
  8459  001076  0100               	movlb	0	; () banked
  8460  001078  517C               	movf	??___ftadd& (0+255),w,b
  8461  00107A  0100               	movlb	0	; () banked
  8462  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8463  00107E  0100               	movlb	0	; () banked
  8464  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8465  001084  0100               	movlb	0	; () banked
  8466  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8467  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8468  00108A  0100               	movlb	0	; () banked
  8469  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8470  00108E  0100               	movlb	0	; () banked
  8471  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8472  001092  E301               	bnc	u4011
  8473  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8474  001096                     u4011:
  8475  001096  0100               	movlb	0	; () banked
  8476  001098  517C               	movf	??___ftadd& (0+255),w,b
  8477  00109A  0100               	movlb	0	; () banked
  8478  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8479                           
  8480                           ; BSR set to: 0
  8481  00109E  0100               	movlb	0	; () banked
  8482  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8483  0010A2  B4D8               	btfsc	status,2,c
  8484  0010A4  D012               	goto	l968
  8485                           
  8486                           ; BSR set to: 0
  8487  0010A6  0100               	movlb	0	; () banked
  8488  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8489  0010AA  0100               	movlb	0	; () banked
  8490  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8491  0010AE  B0D8               	btfsc	status,0,c
  8492  0010B0  D013               	goto	l4229
  8493                           
  8494                           ; BSR set to: 0
  8495  0010B2  0100               	movlb	0	; () banked
  8496  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8497  0010B6  0800               	sublw	0
  8498  0010B8  0100               	movlb	0	; () banked
  8499  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8500  0010BC  0100               	movlb	0	; () banked
  8501  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8502  0010C0  0E19               	movlw	25
  8503  0010C2  0100               	movlb	0	; () banked
  8504  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8505  0010C6  A0D8               	btfss	status,0,c
  8506  0010C8  D007               	goto	l4229
  8507  0010CA                     l968:
  8508                           
  8509                           ; BSR set to: 0
  8510  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8511  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8512  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8513  0010D6  D102               	goto	l969
  8514  0010D8                     l4229:
  8515                           
  8516                           ; BSR set to: 0
  8517  0010D8  0100               	movlb	0	; () banked
  8518  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8519  0010DC  B4D8               	btfsc	status,2,c
  8520  0010DE  D012               	goto	l972
  8521                           
  8522                           ; BSR set to: 0
  8523  0010E0  0100               	movlb	0	; () banked
  8524  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8525  0010E4  0100               	movlb	0	; () banked
  8526  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8527  0010E8  B0D8               	btfsc	status,0,c
  8528  0010EA  D013               	goto	l4235
  8529                           
  8530                           ; BSR set to: 0
  8531  0010EC  0100               	movlb	0	; () banked
  8532  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8533  0010F0  0800               	sublw	0
  8534  0010F2  0100               	movlb	0	; () banked
  8535  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8536  0010F6  0100               	movlb	0	; () banked
  8537  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8538  0010FA  0E19               	movlw	25
  8539  0010FC  0100               	movlb	0	; () banked
  8540  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8541  001100  A0D8               	btfss	status,0,c
  8542  001102  D007               	goto	l4235
  8543  001104                     l972:
  8544                           
  8545                           ; BSR set to: 0
  8546  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8547  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8548  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8549  001110  D0E5               	goto	l969
  8550  001112                     l4235:
  8551                           
  8552                           ; BSR set to: 0
  8553  001112  0E06               	movlw	6
  8554  001114  0100               	movlb	0	; () banked
  8555  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8556                           
  8557                           ; BSR set to: 0
  8558  001118  0100               	movlb	0	; () banked
  8559  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8560  00111C  D002               	goto	l4241
  8561                           
  8562                           ; BSR set to: 0
  8563  00111E  0100               	movlb	0	; () banked
  8564  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8565  001122                     l4241:
  8566                           
  8567                           ; BSR set to: 0
  8568  001122  0100               	movlb	0	; () banked
  8569  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8570  001126  D002               	goto	l974
  8571                           
  8572                           ; BSR set to: 0
  8573  001128  0100               	movlb	0	; () banked
  8574  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8575  00112C                     l974:
  8576                           
  8577                           ; BSR set to: 0
  8578  00112C  0100               	movlb	0	; () banked
  8579  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8580                           
  8581                           ; BSR set to: 0
  8582  001130  0EFF               	movlw	255
  8583  001132  0100               	movlb	0	; () banked
  8584  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8585  001136  0EFF               	movlw	255
  8586  001138  0100               	movlb	0	; () banked
  8587  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8588  00113C  0E00               	movlw	0
  8589  00113E  0100               	movlb	0	; () banked
  8590  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8591  001142  0100               	movlb	0	; () banked
  8592  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8593                           
  8594                           ; BSR set to: 0
  8595  001146  0EFF               	movlw	255
  8596  001148  0100               	movlb	0	; () banked
  8597  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8598  00114C  0EFF               	movlw	255
  8599  00114E  0100               	movlb	0	; () banked
  8600  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8601  001152  0E00               	movlw	0
  8602  001154  0100               	movlb	0	; () banked
  8603  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8604                           
  8605                           ; BSR set to: 0
  8606  001158  0100               	movlb	0	; () banked
  8607  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8608  00115C  0100               	movlb	0	; () banked
  8609  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8610  001160  B0D8               	btfsc	status,0,c
  8611  001162  D02A               	goto	l4261
  8612  001164                     l4251:
  8613                           
  8614                           ; BSR set to: 0
  8615  001164  0100               	movlb	0	; () banked
  8616  001166  90D8               	bcf	status,0,c
  8617  001168  0100               	movlb	0	; () banked
  8618  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8619  00116C  0100               	movlb	0	; () banked
  8620  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8621  001170  0100               	movlb	0	; () banked
  8622  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8623  001174  0100               	movlb	0	; () banked
  8624  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8625                           
  8626                           ; BSR set to: 0
  8627  001178  0100               	movlb	0	; () banked
  8628  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8629  00117C  0100               	movlb	0	; () banked
  8630  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8631  001180  B4D8               	btfsc	status,2,c
  8632  001182  D014               	goto	l4259
  8633                           
  8634                           ; BSR set to: 0
  8635  001184  0100               	movlb	0	; () banked
  8636  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8637  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8638  00118C  0E07               	movlw	7
  8639  00118E  0100               	movlb	0	; () banked
  8640  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8641  001192  B4D8               	btfsc	status,2,c
  8642  001194  D00B               	goto	l4259
  8643  001196  D7E6               	goto	l4251
  8644  001198                     l4257:
  8645                           
  8646                           ; BSR set to: 0
  8647  001198  0100               	movlb	0	; () banked
  8648  00119A  90D8               	bcf	status,0,c
  8649  00119C  0100               	movlb	0	; () banked
  8650  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8651  0011A0  0100               	movlb	0	; () banked
  8652  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8653  0011A4  0100               	movlb	0	; () banked
  8654  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8655  0011A8  0100               	movlb	0	; () banked
  8656  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8657  0011AC                     l4259:
  8658                           
  8659                           ; BSR set to: 0
  8660  0011AC  0100               	movlb	0	; () banked
  8661  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8662  0011B0  0100               	movlb	0	; () banked
  8663  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8664  0011B4  D7F1               	goto	l4257
  8665  0011B6  D02F               	goto	l983
  8666  0011B8                     l4261:
  8667                           
  8668                           ; BSR set to: 0
  8669  0011B8  0100               	movlb	0	; () banked
  8670  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8671  0011BC  0100               	movlb	0	; () banked
  8672  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8673  0011C0  B0D8               	btfsc	status,0,c
  8674  0011C2  D029               	goto	l983
  8675  0011C4                     l4263:
  8676                           
  8677                           ; BSR set to: 0
  8678  0011C4  0100               	movlb	0	; () banked
  8679  0011C6  90D8               	bcf	status,0,c
  8680  0011C8  0100               	movlb	0	; () banked
  8681  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8682  0011CC  0100               	movlb	0	; () banked
  8683  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8684  0011D0  0100               	movlb	0	; () banked
  8685  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8686  0011D4  0100               	movlb	0	; () banked
  8687  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8688                           
  8689                           ; BSR set to: 0
  8690  0011D8  0100               	movlb	0	; () banked
  8691  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8692  0011DC  0100               	movlb	0	; () banked
  8693  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8694  0011E0  B4D8               	btfsc	status,2,c
  8695  0011E2  D014               	goto	l4271
  8696                           
  8697                           ; BSR set to: 0
  8698  0011E4  0100               	movlb	0	; () banked
  8699  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8700  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8701  0011EC  0E07               	movlw	7
  8702  0011EE  0100               	movlb	0	; () banked
  8703  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8704  0011F2  B4D8               	btfsc	status,2,c
  8705  0011F4  D00B               	goto	l4271
  8706  0011F6  D7E6               	goto	l4263
  8707  0011F8                     l4269:
  8708                           
  8709                           ; BSR set to: 0
  8710  0011F8  0100               	movlb	0	; () banked
  8711  0011FA  90D8               	bcf	status,0,c
  8712  0011FC  0100               	movlb	0	; () banked
  8713  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8714  001200  0100               	movlb	0	; () banked
  8715  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8716  001204  0100               	movlb	0	; () banked
  8717  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8718  001208  0100               	movlb	0	; () banked
  8719  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8720  00120C                     l4271:
  8721                           
  8722                           ; BSR set to: 0
  8723  00120C  0100               	movlb	0	; () banked
  8724  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8725  001210  0100               	movlb	0	; () banked
  8726  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8727  001214  D7F1               	goto	l4269
  8728  001216                     l983:
  8729                           
  8730                           ; BSR set to: 0
  8731  001216  0100               	movlb	0	; () banked
  8732  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8733  00121A  D012               	goto	l992
  8734                           
  8735                           ; BSR set to: 0
  8736  00121C  0EFF               	movlw	255
  8737  00121E  0100               	movlb	0	; () banked
  8738  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8739  001222  0EFF               	movlw	255
  8740  001224  0100               	movlb	0	; () banked
  8741  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8742  001228  0EFF               	movlw	255
  8743  00122A  0100               	movlb	0	; () banked
  8744  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8745  00122E  0E01               	movlw	1
  8746  001230  0100               	movlb	0	; () banked
  8747  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8748  001234  0E00               	movlw	0
  8749  001236  0100               	movlb	0	; () banked
  8750  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8751  00123A  0E00               	movlw	0
  8752  00123C  0100               	movlb	0	; () banked
  8753  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8754  001240                     l992:
  8755                           
  8756                           ; BSR set to: 0
  8757  001240  0100               	movlb	0	; () banked
  8758  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8759  001244  D012               	goto	l4277
  8760                           
  8761                           ; BSR set to: 0
  8762  001246  0EFF               	movlw	255
  8763  001248  0100               	movlb	0	; () banked
  8764  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8765  00124C  0EFF               	movlw	255
  8766  00124E  0100               	movlb	0	; () banked
  8767  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8768  001252  0EFF               	movlw	255
  8769  001254  0100               	movlb	0	; () banked
  8770  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8771  001258  0E01               	movlw	1
  8772  00125A  0100               	movlb	0	; () banked
  8773  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8774  00125E  0E00               	movlw	0
  8775  001260  0100               	movlb	0	; () banked
  8776  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8777  001264  0E00               	movlw	0
  8778  001266  0100               	movlb	0	; () banked
  8779  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8780  00126A                     l4277:
  8781                           
  8782                           ; BSR set to: 0
  8783  00126A  0E00               	movlw	0
  8784  00126C  0100               	movlb	0	; () banked
  8785  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788  001270  0100               	movlb	0	; () banked
  8789  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  8790  001274  0100               	movlb	0	; () banked
  8791  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  8792  001278  0100               	movlb	0	; () banked
  8793  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  8794  00127C  0100               	movlb	0	; () banked
  8795  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8796  001280  0100               	movlb	0	; () banked
  8797  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  8798  001284  0100               	movlb	0	; () banked
  8799  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8800                           
  8801                           ; BSR set to: 0
  8802  001288  0100               	movlb	0	; () banked
  8803  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8804  00128C  D015               	goto	l4287
  8805                           
  8806                           ; BSR set to: 0
  8807  00128E  0EFF               	movlw	255
  8808  001290  0100               	movlb	0	; () banked
  8809  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8810  001294  0EFF               	movlw	255
  8811  001296  0100               	movlb	0	; () banked
  8812  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8813  00129A  0EFF               	movlw	255
  8814  00129C  0100               	movlb	0	; () banked
  8815  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8816  0012A0  0E01               	movlw	1
  8817  0012A2  0100               	movlb	0	; () banked
  8818  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  8819  0012A6  0E00               	movlw	0
  8820  0012A8  0100               	movlb	0	; () banked
  8821  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8822  0012AC  0E00               	movlw	0
  8823  0012AE  0100               	movlb	0	; () banked
  8824  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8825                           
  8826                           ; BSR set to: 0
  8827  0012B2  0E01               	movlw	1
  8828  0012B4  0100               	movlb	0	; () banked
  8829  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  8830  0012B8                     l4287:
  8831                           
  8832                           ; BSR set to: 0
  8833  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  8834  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8835  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8836  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8837  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  8838  0012CC  EC54  F00D         	call	___ftpack	;wreg free
  8839  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  8840  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  8841  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  8842  0012DC                     l969:
  8843  0012DC  0012               	return	
  8844  0012DE                     __end_of___ftadd:
  8845                           	opt stack 0
  8846                           tblptru	equ	0xFF8
  8847                           tblptrh	equ	0xFF7
  8848                           tblptrl	equ	0xFF6
  8849                           tablat	equ	0xFF5
  8850                           prodh	equ	0xFF4
  8851                           prodl	equ	0xFF3
  8852                           intcon	equ	0xFF2
  8853                           indf0	equ	0xFEF
  8854                           postinc0	equ	0xFEE
  8855                           fsr0h	equ	0xFEA
  8856                           fsr0l	equ	0xFE9
  8857                           wreg	equ	0xFE8
  8858                           postinc1	equ	0xFE6
  8859                           postdec1	equ	0xFE5
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function ___ftpack *****************
  8869 ;; Defined at:
  8870 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  arg             3   24[COMRAM] unsigned um
  8873 ;;  exp             1   27[COMRAM] unsigned char 
  8874 ;;  sign            1   28[COMRAM] unsigned char 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;		None
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  3   24[COMRAM] float 
  8879 ;; Registers used:
  8880 ;;		wreg, status,2, status,0
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8886 ;;      Params:         5       0       0       0       0       0       0       0       0
  8887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8888 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8889 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8890 ;;Total ram usage:        8 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    4
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		___ftadd
  8897 ;;		___ftmul
  8898 ;;		___lbtoft
  8899 ;;		___lltoft
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           	psect	text41
  8904  001AA8                     __ptext41:
  8905                           	opt stack 0
  8906  001AA8                     ___ftpack:
  8907                           	opt stack 21
  8908                           
  8909                           ;incstack = 0
  8910  001AA8  501C               	movf	___ftpack@exp,w,c
  8911  001AAA  B4D8               	btfsc	status,2,c
  8912  001AAC  D005               	goto	l4167
  8913  001AAE  5019               	movf	___ftpack@arg,w,c
  8914  001AB0  101A               	iorwf	___ftpack@arg+1,w,c
  8915  001AB2  101B               	iorwf	___ftpack@arg+2,w,c
  8916  001AB4  A4D8               	btfss	status,2,c
  8917  001AB6  D00C               	goto	l4173
  8918  001AB8                     l4167:
  8919  001AB8  0E00               	movlw	0
  8920  001ABA  6E19               	movwf	?___ftpack,c
  8921  001ABC  0E00               	movlw	0
  8922  001ABE  6E1A               	movwf	?___ftpack+1,c
  8923  001AC0  0E00               	movlw	0
  8924  001AC2  6E1B               	movwf	?___ftpack+2,c
  8925  001AC4  D044               	goto	l931
  8926  001AC6                     l4171:
  8927  001AC6  2A1C               	incf	___ftpack@exp,f,c
  8928  001AC8  90D8               	bcf	status,0,c
  8929  001ACA  321B               	rrcf	___ftpack@arg+2,f,c
  8930  001ACC  321A               	rrcf	___ftpack@arg+1,f,c
  8931  001ACE  3219               	rrcf	___ftpack@arg,f,c
  8932  001AD0                     l4173:
  8933  001AD0  0E00               	movlw	0
  8934  001AD2  1419               	andwf	___ftpack@arg,w,c
  8935  001AD4  6E1E               	movwf	??___ftpack& (0+255),c
  8936  001AD6  0E00               	movlw	0
  8937  001AD8  141A               	andwf	___ftpack@arg+1,w,c
  8938  001ADA  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8939  001ADC  0EFE               	movlw	254
  8940  001ADE  141B               	andwf	___ftpack@arg+2,w,c
  8941  001AE0  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8942  001AE2  501E               	movf	??___ftpack,w,c
  8943  001AE4  101F               	iorwf	??___ftpack+1,w,c
  8944  001AE6  1020               	iorwf	??___ftpack+2,w,c
  8945  001AE8  B4D8               	btfsc	status,2,c
  8946  001AEA  D00C               	goto	l4179
  8947  001AEC  D7EC               	goto	l4171
  8948  001AEE                     l4175:
  8949  001AEE  2A1C               	incf	___ftpack@exp,f,c
  8950  001AF0  0E01               	movlw	1
  8951  001AF2  2619               	addwf	___ftpack@arg,f,c
  8952  001AF4  0E00               	movlw	0
  8953  001AF6  221A               	addwfc	___ftpack@arg+1,f,c
  8954  001AF8  0E00               	movlw	0
  8955  001AFA  221B               	addwfc	___ftpack@arg+2,f,c
  8956  001AFC  90D8               	bcf	status,0,c
  8957  001AFE  321B               	rrcf	___ftpack@arg+2,f,c
  8958  001B00  321A               	rrcf	___ftpack@arg+1,f,c
  8959  001B02  3219               	rrcf	___ftpack@arg,f,c
  8960  001B04                     l4179:
  8961  001B04  0E00               	movlw	0
  8962  001B06  1419               	andwf	___ftpack@arg,w,c
  8963  001B08  6E1E               	movwf	??___ftpack& (0+255),c
  8964  001B0A  0E00               	movlw	0
  8965  001B0C  141A               	andwf	___ftpack@arg+1,w,c
  8966  001B0E  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8967  001B10  0EFF               	movlw	255
  8968  001B12  141B               	andwf	___ftpack@arg+2,w,c
  8969  001B14  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8970  001B16  501E               	movf	??___ftpack,w,c
  8971  001B18  101F               	iorwf	??___ftpack+1,w,c
  8972  001B1A  1020               	iorwf	??___ftpack+2,w,c
  8973  001B1C  B4D8               	btfsc	status,2,c
  8974  001B1E  D006               	goto	l4183
  8975  001B20  D7E6               	goto	l4175
  8976  001B22                     l4181:
  8977  001B22  061C               	decf	___ftpack@exp,f,c
  8978  001B24  90D8               	bcf	status,0,c
  8979  001B26  3619               	rlcf	___ftpack@arg,f,c
  8980  001B28  361A               	rlcf	___ftpack@arg+1,f,c
  8981  001B2A  361B               	rlcf	___ftpack@arg+2,f,c
  8982  001B2C                     l4183:
  8983  001B2C  AE1A               	btfss	___ftpack@arg+1,7,c
  8984  001B2E  D7F9               	goto	l4181
  8985  001B30  A01C               	btfss	___ftpack@exp,0,c
  8986  001B32  9E1A               	bcf	___ftpack@arg+1,7,c
  8987  001B34  90D8               	bcf	status,0,c
  8988  001B36  321C               	rrcf	___ftpack@exp,f,c
  8989  001B38  501C               	movf	___ftpack@exp,w,c
  8990  001B3A  121B               	iorwf	___ftpack@arg+2,f,c
  8991  001B3C  501D               	movf	___ftpack@sign,w,c
  8992  001B3E  A4D8               	btfss	status,2,c
  8993  001B40  8E1B               	bsf	___ftpack@arg+2,7,c
  8994  001B42  C019  F019         	movff	___ftpack@arg,?___ftpack
  8995  001B46  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8996  001B4A  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8997  001B4E                     l931:
  8998  001B4E  0012               	return	
  8999  001B50                     __end_of___ftpack:
  9000                           	opt stack 0
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           intcon	equ	0xFF2
  9008                           indf0	equ	0xFEF
  9009                           postinc0	equ	0xFEE
  9010                           fsr0h	equ	0xFEA
  9011                           fsr0l	equ	0xFE9
  9012                           wreg	equ	0xFE8
  9013                           postinc1	equ	0xFE6
  9014                           postdec1	equ	0xFE5
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           fsr2h	equ	0xFDA
  9020                           fsr2l	equ	0xFD9
  9021                           status	equ	0xFD8
  9022                           
  9023 ;; *************** function ___ftneg *****************
  9024 ;; Defined at:
  9025 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  f1              3   24[COMRAM] float 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;		None
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  3   24[COMRAM] float 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2, status,0
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9039 ;;      Params:         3       0       0       0       0       0       0       0       0
  9040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9042 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9043 ;;Total ram usage:        3 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    4
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_sprintf
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text42
  9054  00278C                     __ptext42:
  9055                           	opt stack 0
  9056  00278C                     ___ftneg:
  9057                           	opt stack 23
  9058                           
  9059                           ;incstack = 0
  9060  00278C  0E7F               	movlw	127
  9061  00278E  141B               	andwf	___ftneg@f1+2,w,c
  9062  002790  101A               	iorwf	___ftneg@f1+1,w,c
  9063  002792  1019               	iorwf	___ftneg@f1,w,c
  9064  002794  B4D8               	btfsc	status,2,c
  9065  002796  D006               	goto	l1042
  9066  002798  0E00               	movlw	0
  9067  00279A  1A19               	xorwf	___ftneg@f1,f,c
  9068  00279C  0E00               	movlw	0
  9069  00279E  1A1A               	xorwf	___ftneg@f1+1,f,c
  9070  0027A0  0E80               	movlw	128
  9071  0027A2  1A1B               	xorwf	___ftneg@f1+2,f,c
  9072  0027A4                     l1042:
  9073  0027A4  C019  F019         	movff	___ftneg@f1,?___ftneg
  9074  0027A8  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9075  0027AC  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9076  0027B0  0012               	return	
  9077  0027B2                     __end_of___ftneg:
  9078                           	opt stack 0
  9079                           tblptru	equ	0xFF8
  9080                           tblptrh	equ	0xFF7
  9081                           tblptrl	equ	0xFF6
  9082                           tablat	equ	0xFF5
  9083                           prodh	equ	0xFF4
  9084                           prodl	equ	0xFF3
  9085                           intcon	equ	0xFF2
  9086                           indf0	equ	0xFEF
  9087                           postinc0	equ	0xFEE
  9088                           fsr0h	equ	0xFEA
  9089                           fsr0l	equ	0xFE9
  9090                           wreg	equ	0xFE8
  9091                           postinc1	equ	0xFE6
  9092                           postdec1	equ	0xFE5
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function ___ftge *****************
  9102 ;; Defined at:
  9103 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  ff1             3   24[COMRAM] float 
  9106 ;;  ff2             3   27[COMRAM] float 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;		None               void
  9111 ;; Registers used:
  9112 ;;		wreg, status,2, status,0
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9118 ;;      Params:         6       0       0       0       0       0       0       0       0
  9119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9120 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9121 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9122 ;;Total ram usage:        9 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    4
  9125 ;; This function calls:
  9126 ;;		Nothing
  9127 ;; This function is called by:
  9128 ;;		_sprintf
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           	psect	text43
  9133  001E54                     __ptext43:
  9134                           	opt stack 0
  9135  001E54                     ___ftge:
  9136                           	opt stack 23
  9137                           
  9138                           ;incstack = 0
  9139  001E54  AE1B               	btfss	___ftge@ff1+2,7,c
  9140  001E56  D016               	goto	l4697
  9141  001E58  C019  F01F         	movff	___ftge@ff1,??___ftge
  9142  001E5C  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9143  001E60  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9144  001E64  1E1F               	comf	??___ftge,f,c
  9145  001E66  1E20               	comf	??___ftge+1,f,c
  9146  001E68  1E21               	comf	??___ftge+2,f,c
  9147  001E6A  2A1F               	incf	??___ftge,f,c
  9148  001E6C  0E00               	movlw	0
  9149  001E6E  2220               	addwfc	??___ftge+1,f,c
  9150  001E70  2221               	addwfc	??___ftge+2,f,c
  9151  001E72  0E00               	movlw	0
  9152  001E74  241F               	addwf	??___ftge,w,c
  9153  001E76  6E19               	movwf	___ftge@ff1,c
  9154  001E78  0E00               	movlw	0
  9155  001E7A  2020               	addwfc	??___ftge+1,w,c
  9156  001E7C  6E1A               	movwf	___ftge@ff1+1,c
  9157  001E7E  0E80               	movlw	128
  9158  001E80  2021               	addwfc	??___ftge+2,w,c
  9159  001E82  6E1B               	movwf	___ftge@ff1+2,c
  9160  001E84                     l4697:
  9161  001E84  AE1E               	btfss	___ftge@ff2+2,7,c
  9162  001E86  D016               	goto	l4701
  9163  001E88  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9164  001E8C  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9165  001E90  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9166  001E94  1E1F               	comf	??___ftge,f,c
  9167  001E96  1E20               	comf	??___ftge+1,f,c
  9168  001E98  1E21               	comf	??___ftge+2,f,c
  9169  001E9A  2A1F               	incf	??___ftge,f,c
  9170  001E9C  0E00               	movlw	0
  9171  001E9E  2220               	addwfc	??___ftge+1,f,c
  9172  001EA0  2221               	addwfc	??___ftge+2,f,c
  9173  001EA2  0E00               	movlw	0
  9174  001EA4  241F               	addwf	??___ftge,w,c
  9175  001EA6  6E1C               	movwf	___ftge@ff2,c
  9176  001EA8  0E00               	movlw	0
  9177  001EAA  2020               	addwfc	??___ftge+1,w,c
  9178  001EAC  6E1D               	movwf	___ftge@ff2+1,c
  9179  001EAE  0E80               	movlw	128
  9180  001EB0  2021               	addwfc	??___ftge+2,w,c
  9181  001EB2  6E1E               	movwf	___ftge@ff2+2,c
  9182  001EB4                     l4701:
  9183  001EB4  0E00               	movlw	0
  9184  001EB6  1A19               	xorwf	___ftge@ff1,f,c
  9185  001EB8  0E00               	movlw	0
  9186  001EBA  1A1A               	xorwf	___ftge@ff1+1,f,c
  9187  001EBC  0E80               	movlw	128
  9188  001EBE  1A1B               	xorwf	___ftge@ff1+2,f,c
  9189  001EC0  0E00               	movlw	0
  9190  001EC2  1A1C               	xorwf	___ftge@ff2,f,c
  9191  001EC4  0E00               	movlw	0
  9192  001EC6  1A1D               	xorwf	___ftge@ff2+1,f,c
  9193  001EC8  0E80               	movlw	128
  9194  001ECA  1A1E               	xorwf	___ftge@ff2+2,f,c
  9195  001ECC  501C               	movf	___ftge@ff2,w,c
  9196  001ECE  5C19               	subwf	___ftge@ff1,w,c
  9197  001ED0  501D               	movf	___ftge@ff2+1,w,c
  9198  001ED2  581A               	subwfb	___ftge@ff1+1,w,c
  9199  001ED4  501E               	movf	___ftge@ff2+2,w,c
  9200  001ED6  581B               	subwfb	___ftge@ff1+2,w,c
  9201  001ED8  B0D8               	btfsc	status,0,c
  9202  001EDA  D002               	goto	l4707
  9203  001EDC  90D8               	bcf	status,0,c
  9204  001EDE  D001               	goto	l1026
  9205  001EE0                     l4707:
  9206  001EE0  80D8               	bsf	status,0,c
  9207  001EE2                     l1026:
  9208  001EE2  0012               	return	
  9209  001EE4                     __end_of___ftge:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           indf0	equ	0xFEF
  9219                           postinc0	equ	0xFEE
  9220                           fsr0h	equ	0xFEA
  9221                           fsr0l	equ	0xFE9
  9222                           wreg	equ	0xFE8
  9223                           postinc1	equ	0xFE6
  9224                           postdec1	equ	0xFE5
  9225                           fsr1l	equ	0xFE1
  9226                           indf2	equ	0xFDF
  9227                           postinc2	equ	0xFDE
  9228                           postdec2	equ	0xFDD
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _Lcd_Write_String *****************
  9234 ;; Defined at:
  9235 ;;		line 90 in file "lcd.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;  a               2   28[COMRAM] PTR unsigned char 
  9238 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
  9239 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
  9240 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;  i               2   32[COMRAM] int 
  9243 ;; Return value:  Size  Location     Type
  9244 ;;		None               void
  9245 ;; Registers used:
  9246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9252 ;;      Params:         2       0       0       0       0       0       0       0       0
  9253 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9254 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9255 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9256 ;;Total ram usage:        6 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    6
  9259 ;; This function calls:
  9260 ;;		_Lcd_Write_Char
  9261 ;; This function is called by:
  9262 ;;		_Inicializa_Driveby
  9263 ;;		_Comando_Tablet
  9264 ;;		_Lcd_Write_Integer
  9265 ;;		_main
  9266 ;;		_Lcd_Write_Float
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text44
  9271  0020E4                     __ptext44:
  9272                           	opt stack 0
  9273  0020E4                     _Lcd_Write_String:
  9274                           	opt stack 24
  9275                           
  9276                           ;lcd.c: 91: int i;
  9277                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9278                           
  9279                           ;incstack = 0
  9280  0020E4  0E00               	movlw	0
  9281  0020E6  6E22               	movwf	Lcd_Write_String@i+1,c
  9282  0020E8  0E00               	movlw	0
  9283  0020EA  6E21               	movwf	Lcd_Write_String@i,c
  9284  0020EC  D01C               	goto	l5039
  9285  0020EE                     l5035:
  9286                           
  9287                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9288  0020EE  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9289  0020F2  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9290  0020F6  5021               	movf	Lcd_Write_String@i,w,c
  9291  0020F8  261F               	addwf	??_Lcd_Write_String,f,c
  9292  0020FA  5022               	movf	Lcd_Write_String@i+1,w,c
  9293  0020FC  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9294  0020FE  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9295  002102  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9296  002106  6AF8               	clrf	tblptru,c
  9297  002108  0E07               	movlw	(high __ramtop+-1)
  9298  00210A  64F7               	cpfsgt	tblptrh,c
  9299  00210C  D003               	bra	u5317
  9300  00210E  0008               	tblrd		*
  9301  002110  50F5               	movf	tablat,w,c
  9302  002112  D005               	bra	u5310
  9303  002114                     u5317:
  9304  002114  CFF6 FFE9          	movff	tblptrl,fsr0l
  9305  002118  CFF7 FFEA          	movff	tblptrh,fsr0h
  9306  00211C  50EF               	movf	indf0,w,c
  9307  00211E                     u5310:
  9308  00211E  EC36  F013         	call	_Lcd_Write_Char
  9309  002122  4A21               	infsnz	Lcd_Write_String@i,f,c
  9310  002124  2A22               	incf	Lcd_Write_String@i+1,f,c
  9311  002126                     l5039:
  9312  002126  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9313  00212A  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9314  00212E  5021               	movf	Lcd_Write_String@i,w,c
  9315  002130  261F               	addwf	??_Lcd_Write_String,f,c
  9316  002132  5022               	movf	Lcd_Write_String@i+1,w,c
  9317  002134  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9318  002136  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9319  00213A  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9320  00213E  6AF8               	clrf	tblptru,c
  9321  002140  0E07               	movlw	(high __ramtop+-1)
  9322  002142  64F7               	cpfsgt	tblptrh,c
  9323  002144  D003               	bra	u5327
  9324  002146  0008               	tblrd		*
  9325  002148  50F5               	movf	tablat,w,c
  9326  00214A  D005               	bra	u5320
  9327  00214C                     u5327:
  9328  00214C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9329  002150  CFF7 FFEA          	movff	tblptrh,fsr0h
  9330  002154  50EF               	movf	indf0,w,c
  9331  002156                     u5320:
  9332  002156  0900               	iorlw	0
  9333  002158  B4D8               	btfsc	status,2,c
  9334  00215A  0012               	return	
  9335  00215C  D7C8               	goto	l5035
  9336  00215E                     __end_of_Lcd_Write_String:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           indf0	equ	0xFEF
  9346                           postinc0	equ	0xFEE
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           postinc1	equ	0xFE6
  9351                           postdec1	equ	0xFE5
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _Lcd_Write_Char *****************
  9361 ;; Defined at:
  9362 ;;		line 75 in file "lcd.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  a               1    wreg     unsigned char 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  a               1   27[COMRAM] unsigned char 
  9367 ;;  y               1   26[COMRAM] unsigned char 
  9368 ;;  temp            1   25[COMRAM] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;		None               void
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9378 ;;      Params:         0       0       0       0       0       0       0       0       0
  9379 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9381 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9382 ;;Total ram usage:        3 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    5
  9385 ;; This function calls:
  9386 ;;		_Lcd_Port
  9387 ;; This function is called by:
  9388 ;;		_Lcd_Write_String
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text45
  9393  00266C                     __ptext45:
  9394                           	opt stack 0
  9395  00266C                     _Lcd_Write_Char:
  9396                           	opt stack 24
  9397                           
  9398                           ;incstack = 0
  9399                           ;Lcd_Write_Char@a stored from wreg
  9400  00266C  6E1C               	movwf	Lcd_Write_Char@a,c
  9401                           
  9402                           ;lcd.c: 76: char temp, y;
  9403                           ;lcd.c: 77: temp = a & 0x0F;
  9404  00266E  501C               	movf	Lcd_Write_Char@a,w,c
  9405  002670  0B0F               	andlw	15
  9406  002672  6E1A               	movwf	Lcd_Write_Char@temp,c
  9407                           
  9408                           ;lcd.c: 78: y = a & 0xF0;
  9409  002674  501C               	movf	Lcd_Write_Char@a,w,c
  9410  002676  0BF0               	andlw	240
  9411  002678  6E1B               	movwf	Lcd_Write_Char@y,c
  9412                           
  9413                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9414  00267A  8084               	bsf	3972,0,c	;volatile
  9415                           
  9416                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9417  00267C  381B               	swapf	Lcd_Write_Char@y,w,c
  9418  00267E  0B0F               	andlw	15
  9419  002680  EC87  F013         	call	_Lcd_Port
  9420                           
  9421                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9422  002684  8484               	bsf	3972,2,c	;volatile
  9423                           
  9424                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9425  002686  0E0D               	movlw	13
  9426  002688                     u5697:
  9427  002688  2EE8               	decfsz	wreg,f,c
  9428  00268A  D7FE               	goto	u5697
  9429  00268C  F000               	nop	
  9430                           
  9431                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9432  00268E  9484               	bcf	3972,2,c	;volatile
  9433                           
  9434                           ;lcd.c: 84: Lcd_Port(temp);
  9435  002690  501A               	movf	Lcd_Write_Char@temp,w,c
  9436  002692  EC87  F013         	call	_Lcd_Port
  9437                           
  9438                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9439  002696  8484               	bsf	3972,2,c	;volatile
  9440                           
  9441                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9442  002698  0E0D               	movlw	13
  9443  00269A                     u5707:
  9444  00269A  2EE8               	decfsz	wreg,f,c
  9445  00269C  D7FE               	goto	u5707
  9446  00269E  F000               	nop	
  9447                           
  9448                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9449  0026A0  9484               	bcf	3972,2,c	;volatile
  9450  0026A2  0012               	return	
  9451  0026A4                     __end_of_Lcd_Write_Char:
  9452                           	opt stack 0
  9453                           tblptru	equ	0xFF8
  9454                           tblptrh	equ	0xFF7
  9455                           tblptrl	equ	0xFF6
  9456                           tablat	equ	0xFF5
  9457                           prodh	equ	0xFF4
  9458                           prodl	equ	0xFF3
  9459                           intcon	equ	0xFF2
  9460                           indf0	equ	0xFEF
  9461                           postinc0	equ	0xFEE
  9462                           fsr0h	equ	0xFEA
  9463                           fsr0l	equ	0xFE9
  9464                           wreg	equ	0xFE8
  9465                           postinc1	equ	0xFE6
  9466                           postdec1	equ	0xFE5
  9467                           fsr1l	equ	0xFE1
  9468                           indf2	equ	0xFDF
  9469                           postinc2	equ	0xFDE
  9470                           postdec2	equ	0xFDD
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function _Lcd_Set_Cursor *****************
  9476 ;; Defined at:
  9477 ;;		line 40 in file "lcd.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  a               1    wreg     unsigned char 
  9480 ;;  b               1   27[COMRAM] unsigned char 
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  a               1   28[COMRAM] unsigned char 
  9483 ;;  temp            1   31[COMRAM] unsigned char 
  9484 ;;  y               1   30[COMRAM] unsigned char 
  9485 ;;  z               1   29[COMRAM] unsigned char 
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, status,2, status,0, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9495 ;;      Params:         1       0       0       0       0       0       0       0       0
  9496 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9498 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9499 ;;Total ram usage:        5 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    6
  9502 ;; This function calls:
  9503 ;;		_Lcd_Cmd
  9504 ;; This function is called by:
  9505 ;;		_Inicializa_Driveby
  9506 ;;		_Comando_Tablet
  9507 ;;		_main
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text46
  9512  0023DE                     __ptext46:
  9513                           	opt stack 0
  9514  0023DE                     _Lcd_Set_Cursor:
  9515                           	opt stack 24
  9516                           
  9517                           ;incstack = 0
  9518                           ;Lcd_Set_Cursor@a stored from wreg
  9519  0023DE  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9520                           
  9521                           ;lcd.c: 41: char temp, z, y;
  9522                           ;lcd.c: 42: if (a == 1) {
  9523  0023E0  041D               	decf	Lcd_Set_Cursor@a,w,c
  9524  0023E2  A4D8               	btfss	status,2,c
  9525  0023E4  D010               	goto	l5143
  9526                           
  9527                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9528  0023E6  501C               	movf	Lcd_Set_Cursor@b,w,c
  9529  0023E8  0F7F               	addlw	127
  9530  0023EA  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9531                           
  9532                           ;lcd.c: 44: z = temp >> 4;
  9533  0023EC  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9534  0023EE  0B0F               	andlw	15
  9535  0023F0  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9536                           
  9537                           ;lcd.c: 45: y = temp & 0x0F;
  9538  0023F2  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9539  0023F4  0B0F               	andlw	15
  9540  0023F6  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9541                           
  9542                           ;lcd.c: 46: Lcd_Cmd(z);
  9543  0023F8  501E               	movf	Lcd_Set_Cursor@z,w,c
  9544  0023FA  ECEB  F013         	call	_Lcd_Cmd
  9545                           
  9546                           ;lcd.c: 47: Lcd_Cmd(y);
  9547  0023FE  501F               	movf	Lcd_Set_Cursor@y,w,c
  9548  002400  ECEB  F013         	call	_Lcd_Cmd
  9549                           
  9550                           ;lcd.c: 48: } else if (a == 2) {
  9551  002404  D013               	goto	l259
  9552  002406                     l5143:
  9553  002406  501D               	movf	Lcd_Set_Cursor@a,w,c
  9554  002408  0A02               	xorlw	2
  9555  00240A  A4D8               	btfss	status,2,c
  9556  00240C  D00F               	goto	l259
  9557                           
  9558                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9559  00240E  501C               	movf	Lcd_Set_Cursor@b,w,c
  9560  002410  0FBF               	addlw	191
  9561  002412  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9562                           
  9563                           ;lcd.c: 50: z = temp >> 4;
  9564  002414  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9565  002416  0B0F               	andlw	15
  9566  002418  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9567                           
  9568                           ;lcd.c: 51: y = temp & 0x0F;
  9569  00241A  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9570  00241C  0B0F               	andlw	15
  9571  00241E  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9572                           
  9573                           ;lcd.c: 52: Lcd_Cmd(z);
  9574  002420  501E               	movf	Lcd_Set_Cursor@z,w,c
  9575  002422  ECEB  F013         	call	_Lcd_Cmd
  9576                           
  9577                           ;lcd.c: 53: Lcd_Cmd(y);
  9578  002426  501F               	movf	Lcd_Set_Cursor@y,w,c
  9579  002428  ECEB  F013         	call	_Lcd_Cmd
  9580  00242C                     l259:
  9581  00242C  0012               	return	
  9582  00242E                     __end_of_Lcd_Set_Cursor:
  9583                           	opt stack 0
  9584                           tblptru	equ	0xFF8
  9585                           tblptrh	equ	0xFF7
  9586                           tblptrl	equ	0xFF6
  9587                           tablat	equ	0xFF5
  9588                           prodh	equ	0xFF4
  9589                           prodl	equ	0xFF3
  9590                           intcon	equ	0xFF2
  9591                           indf0	equ	0xFEF
  9592                           postinc0	equ	0xFEE
  9593                           fsr0h	equ	0xFEA
  9594                           fsr0l	equ	0xFE9
  9595                           wreg	equ	0xFE8
  9596                           postinc1	equ	0xFE6
  9597                           postdec1	equ	0xFE5
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _Lcd_Clear *****************
  9607 ;; Defined at:
  9608 ;;		line 35 in file "lcd.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;		None
  9611 ;; Auto vars:     Size  Location     Type
  9612 ;;		None
  9613 ;; Return value:  Size  Location     Type
  9614 ;;		None               void
  9615 ;; Registers used:
  9616 ;;		wreg, status,2, cstack
  9617 ;; Tracked objects:
  9618 ;;		On entry : 0/0
  9619 ;;		On exit  : 0/0
  9620 ;;		Unchanged: 0/0
  9621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9622 ;;      Params:         0       0       0       0       0       0       0       0       0
  9623 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9625 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9626 ;;Total ram usage:        0 bytes
  9627 ;; Hardware stack levels used:    1
  9628 ;; Hardware stack levels required when called:    6
  9629 ;; This function calls:
  9630 ;;		_Lcd_Cmd
  9631 ;; This function is called by:
  9632 ;;		_Inicializa_Driveby
  9633 ;;		_Comando_Tablet
  9634 ;;		_main
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text47
  9639  0028DC                     __ptext47:
  9640                           	opt stack 0
  9641  0028DC                     _Lcd_Clear:
  9642                           	opt stack 24
  9643                           
  9644                           ;lcd.c: 36: Lcd_Cmd(0);
  9645                           
  9646                           ;incstack = 0
  9647  0028DC  0E00               	movlw	0
  9648  0028DE  ECEB  F013         	call	_Lcd_Cmd
  9649                           
  9650                           ;lcd.c: 37: Lcd_Cmd(1);
  9651  0028E2  0E01               	movlw	1
  9652  0028E4  ECEB  F013         	call	_Lcd_Cmd
  9653  0028E8  0012               	return	
  9654  0028EA                     __end_of_Lcd_Clear:
  9655                           	opt stack 0
  9656                           tblptru	equ	0xFF8
  9657                           tblptrh	equ	0xFF7
  9658                           tblptrl	equ	0xFF6
  9659                           tablat	equ	0xFF5
  9660                           prodh	equ	0xFF4
  9661                           prodl	equ	0xFF3
  9662                           intcon	equ	0xFF2
  9663                           indf0	equ	0xFEF
  9664                           postinc0	equ	0xFEE
  9665                           fsr0h	equ	0xFEA
  9666                           fsr0l	equ	0xFE9
  9667                           wreg	equ	0xFE8
  9668                           postinc1	equ	0xFE6
  9669                           postdec1	equ	0xFE5
  9670                           fsr1l	equ	0xFE1
  9671                           indf2	equ	0xFDF
  9672                           postinc2	equ	0xFDE
  9673                           postdec2	equ	0xFDD
  9674                           fsr2h	equ	0xFDA
  9675                           fsr2l	equ	0xFD9
  9676                           status	equ	0xFD8
  9677                           
  9678 ;; *************** function _Lcd_Cmd *****************
  9679 ;; Defined at:
  9680 ;;		line 27 in file "lcd.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;  a               1    wreg     unsigned char 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;  a               1   26[COMRAM] unsigned char 
  9685 ;; Return value:  Size  Location     Type
  9686 ;;		None               void
  9687 ;; Registers used:
  9688 ;;		wreg, status,2, cstack
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9694 ;;      Params:         0       0       0       0       0       0       0       0       0
  9695 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9696 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9697 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9698 ;;Total ram usage:        2 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    5
  9701 ;; This function calls:
  9702 ;;		_Lcd_Port
  9703 ;; This function is called by:
  9704 ;;		_Lcd_Clear
  9705 ;;		_Lcd_Set_Cursor
  9706 ;;		_Lcd_Init
  9707 ;;		_Lcd_Shift_Right
  9708 ;;		_Lcd_Shift_Left
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           	psect	text48
  9713  0027D6                     __ptext48:
  9714                           	opt stack 0
  9715  0027D6                     _Lcd_Cmd:
  9716                           	opt stack 24
  9717                           
  9718                           ;incstack = 0
  9719                           ;Lcd_Cmd@a stored from wreg
  9720  0027D6  6E1B               	movwf	Lcd_Cmd@a,c
  9721                           
  9722                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9723  0027D8  9084               	bcf	3972,0,c	;volatile
  9724                           
  9725                           ;lcd.c: 29: Lcd_Port(a);
  9726  0027DA  501B               	movf	Lcd_Cmd@a,w,c
  9727  0027DC  EC87  F013         	call	_Lcd_Port
  9728                           
  9729                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9730  0027E0  8484               	bsf	3972,2,c	;volatile
  9731                           
  9732                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9733  0027E2  0E06               	movlw	6
  9734  0027E4  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9735  0027E6  0E30               	movlw	48
  9736  0027E8                     u5717:
  9737  0027E8  2EE8               	decfsz	wreg,f,c
  9738  0027EA  D7FE               	goto	u5717
  9739  0027EC  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9740  0027EE  D7FC               	goto	u5717
  9741  0027F0  D000               	nop2	
  9742                           
  9743                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9744  0027F2  9484               	bcf	3972,2,c	;volatile
  9745  0027F4  0012               	return	
  9746  0027F6                     __end_of_Lcd_Cmd:
  9747                           	opt stack 0
  9748                           tblptru	equ	0xFF8
  9749                           tblptrh	equ	0xFF7
  9750                           tblptrl	equ	0xFF6
  9751                           tablat	equ	0xFF5
  9752                           prodh	equ	0xFF4
  9753                           prodl	equ	0xFF3
  9754                           intcon	equ	0xFF2
  9755                           indf0	equ	0xFEF
  9756                           postinc0	equ	0xFEE
  9757                           fsr0h	equ	0xFEA
  9758                           fsr0l	equ	0xFE9
  9759                           wreg	equ	0xFE8
  9760                           postinc1	equ	0xFE6
  9761                           postdec1	equ	0xFE5
  9762                           fsr1l	equ	0xFE1
  9763                           indf2	equ	0xFDF
  9764                           postinc2	equ	0xFDE
  9765                           postdec2	equ	0xFDD
  9766                           fsr2h	equ	0xFDA
  9767                           fsr2l	equ	0xFD9
  9768                           status	equ	0xFD8
  9769                           
  9770 ;; *************** function _Lcd_Port *****************
  9771 ;; Defined at:
  9772 ;;		line 6 in file "lcd.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  a               1    wreg     unsigned char 
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;  a               1   24[COMRAM] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9786 ;;      Params:         0       0       0       0       0       0       0       0       0
  9787 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9788 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9789 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9790 ;;Total ram usage:        1 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    4
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_Lcd_Cmd
  9797 ;;		_Lcd_Init
  9798 ;;		_Lcd_Write_Char
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           	psect	text49
  9803  00270E                     __ptext49:
  9804                           	opt stack 0
  9805  00270E                     _Lcd_Port:
  9806                           	opt stack 24
  9807                           
  9808                           ;incstack = 0
  9809                           ;Lcd_Port@a stored from wreg
  9810  00270E  6E19               	movwf	Lcd_Port@a,c
  9811                           
  9812                           ;lcd.c: 7: if (a & 1)
  9813  002710  A019               	btfss	Lcd_Port@a,0,c
  9814  002712  D002               	goto	l239
  9815                           
  9816                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9817  002714  8883               	bsf	3971,4,c	;volatile
  9818  002716  D001               	goto	l4203
  9819  002718                     l239:
  9820                           
  9821                           ;lcd.c: 9: else
  9822                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9823  002718  9883               	bcf	3971,4,c	;volatile
  9824  00271A                     l4203:
  9825                           
  9826                           ;lcd.c: 12: if (a & 2)
  9827  00271A  A219               	btfss	Lcd_Port@a,1,c
  9828  00271C  D002               	goto	l241
  9829                           
  9830                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9831  00271E  8A83               	bsf	3971,5,c	;volatile
  9832  002720  D001               	goto	l4207
  9833  002722                     l241:
  9834                           
  9835                           ;lcd.c: 14: else
  9836                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9837  002722  9A83               	bcf	3971,5,c	;volatile
  9838  002724                     l4207:
  9839                           
  9840                           ;lcd.c: 17: if (a & 4)
  9841  002724  A419               	btfss	Lcd_Port@a,2,c
  9842  002726  D002               	goto	l243
  9843                           
  9844                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9845  002728  8C83               	bsf	3971,6,c	;volatile
  9846  00272A  D001               	goto	l4211
  9847  00272C                     l243:
  9848                           
  9849                           ;lcd.c: 19: else
  9850                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9851  00272C  9C83               	bcf	3971,6,c	;volatile
  9852  00272E                     l4211:
  9853                           
  9854                           ;lcd.c: 22: if (a & 8)
  9855  00272E  A619               	btfss	Lcd_Port@a,3,c
  9856  002730  D002               	goto	l245
  9857                           
  9858                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9859  002732  8E83               	bsf	3971,7,c	;volatile
  9860  002734  D001               	goto	l247
  9861  002736                     l245:
  9862                           
  9863                           ;lcd.c: 24: else
  9864                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9865  002736  9E83               	bcf	3971,7,c	;volatile
  9866  002738                     l247:
  9867  002738  0012               	return	
  9868  00273A                     __end_of_Lcd_Port:
  9869                           	opt stack 0
  9870                           tblptru	equ	0xFF8
  9871                           tblptrh	equ	0xFF7
  9872                           tblptrl	equ	0xFF6
  9873                           tablat	equ	0xFF5
  9874                           prodh	equ	0xFF4
  9875                           prodl	equ	0xFF3
  9876                           intcon	equ	0xFF2
  9877                           indf0	equ	0xFEF
  9878                           postinc0	equ	0xFEE
  9879                           fsr0h	equ	0xFEA
  9880                           fsr0l	equ	0xFE9
  9881                           wreg	equ	0xFE8
  9882                           postinc1	equ	0xFE6
  9883                           postdec1	equ	0xFE5
  9884                           fsr1l	equ	0xFE1
  9885                           indf2	equ	0xFDF
  9886                           postinc2	equ	0xFDE
  9887                           postdec2	equ	0xFDD
  9888                           fsr2h	equ	0xFDA
  9889                           fsr2l	equ	0xFD9
  9890                           status	equ	0xFD8
  9891                           
  9892 ;; *************** function _TMRO_USART *****************
  9893 ;; Defined at:
  9894 ;;		line 83 in file "robot.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;		None
  9899 ;; Return value:  Size  Location     Type
  9900 ;;		None               void
  9901 ;; Registers used:
  9902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0
  9909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9910 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9911 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9912 ;;Total ram usage:       14 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    3
  9915 ;; This function calls:
  9916 ;;		_ReadUSART
  9917 ;;		i2_Lcd_Clear
  9918 ;;		i2_Lcd_Set_Cursor
  9919 ;;		i2_Lcd_Write_String
  9920 ;; This function is called by:
  9921 ;;		Interrupt level 2
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           	psect	intcode
  9926  000008                     __pintcode:
  9927                           	opt stack 0
  9928  000008                     _TMRO_USART:
  9929                           	opt stack 21
  9930                           
  9931                           ;incstack = 0
  9932  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
  9933  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
  9934  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
  9935  000014  ED7D  F00C         	call	int_func,f	;refresh shadow registers
  9936                           pclatu	equ	0xFFB
  9937                           pclath	equ	0xFFA
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           indf0	equ	0xFEF
  9946                           postinc0	equ	0xFEE
  9947                           fsr0h	equ	0xFEA
  9948                           fsr0l	equ	0xFE9
  9949                           wreg	equ	0xFE8
  9950                           postinc1	equ	0xFE6
  9951                           postdec1	equ	0xFE5
  9952                           fsr1l	equ	0xFE1
  9953                           indf2	equ	0xFDF
  9954                           postinc2	equ	0xFDE
  9955                           postdec2	equ	0xFDD
  9956                           fsr2h	equ	0xFDA
  9957                           fsr2l	equ	0xFD9
  9958                           status	equ	0xFD8
  9959                           
  9960                           	psect	intcode_body
  9961  0018FA                     __pintcode_body:
  9962                           	opt stack 21
  9963  0018FA                     int_func:
  9964                           	opt stack 21
  9965  0018FA  0006               	pop		; remove dummy address from shadow register refresh
  9966  0018FC  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
  9967  001900  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
  9968  001904  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
  9969  001908  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
  9970  00190C  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
  9971  001910  CFF3 F013          	movff	prodl,??_TMRO_USART+8
  9972  001914  CFF4 F014          	movff	prodh,??_TMRO_USART+9
  9973  001918  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
  9974  00191C  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
  9975  001920  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
  9976  001924  CFF5 F018          	movff	tablat,??_TMRO_USART+13
  9977                           
  9978                           ;robot.c: 88: if (PIR1bits.RCIF) {
  9979  001928  AA9E               	btfss	3998,5,c	;volatile
  9980  00192A  D032               	goto	i2l356
  9981                           
  9982                           ;robot.c: 90: BluetoothDato[cad] = ReadUSART();
  9983  00192C  503D               	movf	_cad,w,c
  9984  00192E  0D01               	mullw	1
  9985  001930  0101               	movlb	1	; () banked
  9986  001932  0E28               	movlw	low _BluetoothDato
  9987  001934  24F3               	addwf	prodl,w,c
  9988  001936  6ED9               	movwf	fsr2l,c
  9989  001938  0101               	movlb	1	; () banked
  9990  00193A  0E01               	movlw	high _BluetoothDato
  9991  00193C  20F4               	addwfc	prodh,w,c
  9992  00193E  6EDA               	movwf	fsr2h,c
  9993  001940  EC29  F014         	call	_ReadUSART	;wreg free
  9994  001944  6EDF               	movwf	indf2,c
  9995                           
  9996                           ;robot.c: 91: if (BluetoothDato[cad] == '#') {
  9997  001946  503D               	movf	_cad,w,c
  9998  001948  0D01               	mullw	1
  9999  00194A  0101               	movlb	1	; () banked
 10000  00194C  0E28               	movlw	low _BluetoothDato
 10001  00194E  24F3               	addwf	prodl,w,c
 10002  001950  6ED9               	movwf	fsr2l,c
 10003  001952  0101               	movlb	1	; () banked
 10004  001954  0E01               	movlw	high _BluetoothDato
 10005  001956  20F4               	addwfc	prodh,w,c
 10006  001958  6EDA               	movwf	fsr2h,c
 10007  00195A  0E23               	movlw	35
 10008  00195C  62DF               	cpfseq	indf2,c
 10009  00195E  D013               	goto	i2l5417
 10010                           
 10011                           ; BSR set to: 1
 10012                           ;robot.c: 92: if (ComanTFlag == 0) {
 10013  001960  6632               	tstfsz	_ComanTFlag,c
 10014  001962  D007               	goto	i2l5413
 10015                           
 10016                           ; BSR set to: 1
 10017                           ;robot.c: 93: EntTrama = 1;
 10018  001964  0E01               	movlw	1
 10019  001966  6E35               	movwf	_EntTrama,c
 10020                           
 10021                           ;robot.c: 94: FinComandT = 0;
 10022  001968  0E00               	movlw	0
 10023  00196A  6E37               	movwf	_FinComandT,c
 10024                           
 10025                           ;robot.c: 95: ComanTFlag = 1;
 10026  00196C  0E01               	movlw	1
 10027  00196E  6E32               	movwf	_ComanTFlag,c
 10028  001970  D00D               	goto	i2u558_40
 10029  001972                     i2l5413:
 10030                           
 10031                           ; BSR set to: 1
 10032                           ;robot.c: 98: else if (ComanTFlag == 1) {
 10033  001972  0432               	decf	_ComanTFlag,w,c
 10034  001974  A4D8               	btfss	status,2,c
 10035  001976  D01C               	goto	i2l5429
 10036                           
 10037                           ; BSR set to: 1
 10038                           ;robot.c: 99: ComanTFlag = 0;
 10039  001978  0E00               	movlw	0
 10040  00197A  6E32               	movwf	_ComanTFlag,c
 10041                           
 10042                           ;robot.c: 100: FinComandT = 1;
 10043  00197C  0E01               	movlw	1
 10044  00197E  6E37               	movwf	_FinComandT,c
 10045                           
 10046                           ;robot.c: 101: EntTrama = 0;
 10047  001980  0E00               	movlw	0
 10048  001982  6E35               	movwf	_EntTrama,c
 10049  001984  D015               	goto	i2l5429
 10050  001986                     i2l5417:
 10051                           
 10052                           ; BSR set to: 1
 10053                           ;robot.c: 105: else if (EntTrama == 1)
 10054  001986  0435               	decf	_EntTrama,w,c
 10055  001988  A4D8               	btfss	status,2,c
 10056  00198A  D012               	goto	i2l5429
 10057  00198C                     i2u558_40:
 10058                           
 10059                           ; BSR set to: 1
 10060                           ;robot.c: 106: cad++;
 10061  00198C  2A3D               	incf	_cad,f,c
 10062  00198E  D010               	goto	i2l5429
 10063  001990                     i2l356:
 10064                           
 10065                           ;robot.c: 110: else if(PIR1bits.TMR2IF){
 10066  001990  A29E               	btfss	3998,1,c	;volatile
 10067  001992  D00E               	goto	i2l5429
 10068                           
 10069                           ;robot.c: 111: Lcd_Clear();
 10070  001994  EC75  F014         	call	i2_Lcd_Clear	;wreg free
 10071                           
 10072                           ;robot.c: 112: Lcd_Set_Cursor(1,1);
 10073  001998  0E01               	movlw	1
 10074  00199A  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10075  00199C  0E01               	movlw	1
 10076  00199E  EC17  F012         	call	i2_Lcd_Set_Cursor
 10077                           
 10078                           ;robot.c: 113: Lcd_Write_String("Interruption TMR2");
 10079  0019A2  0E7F               	movlw	high STR_20
 10080  0019A4  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10081  0019A6  0E41               	movlw	low STR_20
 10082  0019A8  6E05               	movwf	i2Lcd_Write_String@a,c
 10083  0019AA  ECAF  F010         	call	i2_Lcd_Write_String	;wreg free
 10084                           
 10085                           ;robot.c: 114: PIE1bits.TMR2IE = 0;
 10086  0019AE  929D               	bcf	3997,1,c	;volatile
 10087  0019B0                     i2l5429:
 10088                           
 10089                           ;robot.c: 115: }
 10090                           ;robot.c: 116: PIR1bits.TMR2IF=0;
 10091  0019B0  929E               	bcf	3998,1,c	;volatile
 10092                           
 10093                           ;robot.c: 117: PIR1bits.RCIF=0;
 10094  0019B2  9A9E               	bcf	3998,5,c	;volatile
 10095  0019B4  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10096  0019B8  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10097  0019BC  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10098  0019C0  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10099  0019C4  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10100  0019C8  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10101  0019CC  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10102  0019D0  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10103  0019D4  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10104  0019D8  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10105  0019DC  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10106  0019E0  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10107  0019E4  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10108  0019E8  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10109  0019EC  0011               	retfie		f
 10110  0019EE                     __end_of_TMRO_USART:
 10111                           	opt stack 0
 10112                           pclatu	equ	0xFFB
 10113                           pclath	equ	0xFFA
 10114                           tblptru	equ	0xFF8
 10115                           tblptrh	equ	0xFF7
 10116                           tblptrl	equ	0xFF6
 10117                           tablat	equ	0xFF5
 10118                           prodh	equ	0xFF4
 10119                           prodl	equ	0xFF3
 10120                           intcon	equ	0xFF2
 10121                           indf0	equ	0xFEF
 10122                           postinc0	equ	0xFEE
 10123                           fsr0h	equ	0xFEA
 10124                           fsr0l	equ	0xFE9
 10125                           wreg	equ	0xFE8
 10126                           postinc1	equ	0xFE6
 10127                           postdec1	equ	0xFE5
 10128                           fsr1h	equ	0xFE2
 10129                           fsr1l	equ	0xFE1
 10130                           indf2	equ	0xFDF
 10131                           postinc2	equ	0xFDE
 10132                           postdec2	equ	0xFDD
 10133                           fsr2h	equ	0xFDA
 10134                           fsr2l	equ	0xFD9
 10135                           status	equ	0xFD8
 10136                           
 10137 ;; *************** function i2_Lcd_Write_String *****************
 10138 ;; Defined at:
 10139 ;;		line 90 in file "lcd.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;  a               2    4[COMRAM] PTR unsigned char 
 10142 ;;		 -> STR_22(11), STR_21(7), STR_20(18), Lcd_Write_Integer@s(20), 
 10143 ;;		 -> Lcd_Write_Float@s(20), STR_17(8), STR_15(2), STR_14(2), 
 10144 ;;		 -> STR_13(2), STR_12(2), STR_11(16), STR_10(7), 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10156 ;;      Params:         2       0       0       0       0       0       0       0       0
 10157 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10158 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10159 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10160 ;;Total ram usage:        6 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    2
 10163 ;; This function calls:
 10164 ;;		i2_Lcd_Write_Char
 10165 ;; This function is called by:
 10166 ;;		_TMRO_USART
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           	psect	text51
 10171  00215E                     __ptext51:
 10172                           	opt stack 0
 10173  00215E                     i2_Lcd_Write_String:
 10174                           	opt stack 21
 10175                           
 10176                           ;lcd.c: 91: int i;
 10177                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10178                           
 10179                           ;incstack = 0
 10180  00215E  0E00               	movlw	0
 10181  002160  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10182  002162  0E00               	movlw	0
 10183  002164  6E09               	movwf	i2Lcd_Write_String@i,c
 10184  002166  D01C               	goto	i2l5369
 10185  002168                     i2l5365:
 10186                           
 10187                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10188  002168  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10189  00216C  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10190  002170  5009               	movf	i2Lcd_Write_String@i,w,c
 10191  002172  2607               	addwf	??i2_Lcd_Write_String,f,c
 10192  002174  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10193  002176  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10194  002178  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10195  00217C  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10196  002180  6AF8               	clrf	tblptru,c
 10197  002182  0E07               	movlw	(high __ramtop+-1)
 10198  002184  64F7               	cpfsgt	tblptrh,c
 10199  002186  D003               	bra	i2u550_47
 10200  002188  0008               	tblrd		*
 10201  00218A  50F5               	movf	tablat,w,c
 10202  00218C  D005               	bra	i2u550_40
 10203  00218E                     i2u550_47:
 10204  00218E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10205  002192  CFF7 FFEA          	movff	tblptrh,fsr0h
 10206  002196  50EF               	movf	indf0,w,c
 10207  002198                     i2u550_40:
 10208  002198  EC52  F013         	call	i2_Lcd_Write_Char
 10209  00219C  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10210  00219E  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10211  0021A0                     i2l5369:
 10212  0021A0  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10213  0021A4  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10214  0021A8  5009               	movf	i2Lcd_Write_String@i,w,c
 10215  0021AA  2607               	addwf	??i2_Lcd_Write_String,f,c
 10216  0021AC  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10217  0021AE  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10218  0021B0  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10219  0021B4  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10220  0021B8  6AF8               	clrf	tblptru,c
 10221  0021BA  0E07               	movlw	(high __ramtop+-1)
 10222  0021BC  64F7               	cpfsgt	tblptrh,c
 10223  0021BE  D003               	bra	i2u551_47
 10224  0021C0  0008               	tblrd		*
 10225  0021C2  50F5               	movf	tablat,w,c
 10226  0021C4  D005               	bra	i2u551_40
 10227  0021C6                     i2u551_47:
 10228  0021C6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10229  0021CA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10230  0021CE  50EF               	movf	indf0,w,c
 10231  0021D0                     i2u551_40:
 10232  0021D0  0900               	iorlw	0
 10233  0021D2  B4D8               	btfsc	status,2,c
 10234  0021D4  0012               	return	
 10235  0021D6  D7C8               	goto	i2l5365
 10236  0021D8                     __end_ofi2_Lcd_Write_String:
 10237                           	opt stack 0
 10238                           pclatu	equ	0xFFB
 10239                           pclath	equ	0xFFA
 10240                           tblptru	equ	0xFF8
 10241                           tblptrh	equ	0xFF7
 10242                           tblptrl	equ	0xFF6
 10243                           tablat	equ	0xFF5
 10244                           prodh	equ	0xFF4
 10245                           prodl	equ	0xFF3
 10246                           intcon	equ	0xFF2
 10247                           indf0	equ	0xFEF
 10248                           postinc0	equ	0xFEE
 10249                           fsr0h	equ	0xFEA
 10250                           fsr0l	equ	0xFE9
 10251                           wreg	equ	0xFE8
 10252                           postinc1	equ	0xFE6
 10253                           postdec1	equ	0xFE5
 10254                           fsr1h	equ	0xFE2
 10255                           fsr1l	equ	0xFE1
 10256                           indf2	equ	0xFDF
 10257                           postinc2	equ	0xFDE
 10258                           postdec2	equ	0xFDD
 10259                           fsr2h	equ	0xFDA
 10260                           fsr2l	equ	0xFD9
 10261                           status	equ	0xFD8
 10262                           
 10263 ;; *************** function i2_Lcd_Write_Char *****************
 10264 ;; Defined at:
 10265 ;;		line 75 in file "lcd.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;  a               1    wreg     unsigned char 
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;  a               1    3[COMRAM] unsigned char 
 10270 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10271 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10272 ;; Return value:  Size  Location     Type
 10273 ;;		None               void
 10274 ;; Registers used:
 10275 ;;		wreg, status,2, status,0, cstack
 10276 ;; Tracked objects:
 10277 ;;		On entry : 0/0
 10278 ;;		On exit  : 0/0
 10279 ;;		Unchanged: 0/0
 10280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10281 ;;      Params:         0       0       0       0       0       0       0       0       0
 10282 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10283 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10284 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10285 ;;Total ram usage:        3 bytes
 10286 ;; Hardware stack levels used:    1
 10287 ;; Hardware stack levels required when called:    1
 10288 ;; This function calls:
 10289 ;;		i2_Lcd_Port
 10290 ;; This function is called by:
 10291 ;;		i2_Lcd_Write_String
 10292 ;; This function uses a non-reentrant model
 10293 ;;
 10294                           
 10295                           	psect	text52
 10296  0026A4                     __ptext52:
 10297                           	opt stack 0
 10298  0026A4                     i2_Lcd_Write_Char:
 10299                           	opt stack 21
 10300                           
 10301                           ;incstack = 0
 10302                           ;i2Lcd_Write_Char@a stored from wreg
 10303  0026A4  6E04               	movwf	i2Lcd_Write_Char@a,c
 10304                           
 10305                           ;lcd.c: 76: char temp, y;
 10306                           ;lcd.c: 77: temp = a & 0x0F;
 10307  0026A6  5004               	movf	i2Lcd_Write_Char@a,w,c
 10308  0026A8  0B0F               	andlw	15
 10309  0026AA  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10310                           
 10311                           ;lcd.c: 78: y = a & 0xF0;
 10312  0026AC  5004               	movf	i2Lcd_Write_Char@a,w,c
 10313  0026AE  0BF0               	andlw	240
 10314  0026B0  6E03               	movwf	i2Lcd_Write_Char@y,c
 10315                           
 10316                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10317  0026B2  8084               	bsf	3972,0,c	;volatile
 10318                           
 10319                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10320  0026B4  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10321  0026B6  0B0F               	andlw	15
 10322  0026B8  EC9D  F013         	call	i2_Lcd_Port
 10323                           
 10324                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10325  0026BC  8484               	bsf	3972,2,c	;volatile
 10326                           
 10327                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10328  0026BE  0E0D               	movlw	13
 10329  0026C0                     i2u572_47:
 10330  0026C0  2EE8               	decfsz	wreg,f,c
 10331  0026C2  D7FE               	goto	i2u572_47
 10332  0026C4  F000               	nop	
 10333                           
 10334                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10335  0026C6  9484               	bcf	3972,2,c	;volatile
 10336                           
 10337                           ;lcd.c: 84: Lcd_Port(temp);
 10338  0026C8  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10339  0026CA  EC9D  F013         	call	i2_Lcd_Port
 10340                           
 10341                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10342  0026CE  8484               	bsf	3972,2,c	;volatile
 10343                           
 10344                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10345  0026D0  0E0D               	movlw	13
 10346  0026D2                     i2u573_47:
 10347  0026D2  2EE8               	decfsz	wreg,f,c
 10348  0026D4  D7FE               	goto	i2u573_47
 10349  0026D6  F000               	nop	
 10350                           
 10351                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10352  0026D8  9484               	bcf	3972,2,c	;volatile
 10353  0026DA  0012               	return	
 10354  0026DC                     __end_ofi2_Lcd_Write_Char:
 10355                           	opt stack 0
 10356                           pclatu	equ	0xFFB
 10357                           pclath	equ	0xFFA
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           intcon	equ	0xFF2
 10365                           indf0	equ	0xFEF
 10366                           postinc0	equ	0xFEE
 10367                           fsr0h	equ	0xFEA
 10368                           fsr0l	equ	0xFE9
 10369                           wreg	equ	0xFE8
 10370                           postinc1	equ	0xFE6
 10371                           postdec1	equ	0xFE5
 10372                           fsr1h	equ	0xFE2
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function i2_Lcd_Set_Cursor *****************
 10382 ;; Defined at:
 10383 ;;		line 40 in file "lcd.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  a               1    wreg     unsigned char 
 10386 ;;  b               1    3[COMRAM] unsigned char 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;  a               1    4[COMRAM] unsigned char 
 10389 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10390 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10391 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10392 ;; Return value:  Size  Location     Type
 10393 ;;		None               void
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0, cstack
 10396 ;; Tracked objects:
 10397 ;;		On entry : 0/0
 10398 ;;		On exit  : 0/0
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10401 ;;      Params:         1       0       0       0       0       0       0       0       0
 10402 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10403 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10404 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10405 ;;Total ram usage:        5 bytes
 10406 ;; Hardware stack levels used:    1
 10407 ;; Hardware stack levels required when called:    2
 10408 ;; This function calls:
 10409 ;;		i2_Lcd_Cmd
 10410 ;; This function is called by:
 10411 ;;		_TMRO_USART
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           	psect	text53
 10416  00242E                     __ptext53:
 10417                           	opt stack 0
 10418  00242E                     i2_Lcd_Set_Cursor:
 10419                           	opt stack 21
 10420                           
 10421                           ;incstack = 0
 10422                           ;i2Lcd_Set_Cursor@a stored from wreg
 10423  00242E  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10424                           
 10425                           ;lcd.c: 41: char temp, z, y;
 10426                           ;lcd.c: 42: if (a == 1) {
 10427  002430  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10428  002432  A4D8               	btfss	status,2,c
 10429  002434  D010               	goto	i2l5355
 10430                           
 10431                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10432  002436  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10433  002438  0F7F               	addlw	127
 10434  00243A  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10435                           
 10436                           ;lcd.c: 44: z = temp >> 4;
 10437  00243C  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10438  00243E  0B0F               	andlw	15
 10439  002440  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10440                           
 10441                           ;lcd.c: 45: y = temp & 0x0F;
 10442  002442  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10443  002444  0B0F               	andlw	15
 10444  002446  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10445                           
 10446                           ;lcd.c: 46: Lcd_Cmd(z);
 10447  002448  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10448  00244A  ECFB  F013         	call	i2_Lcd_Cmd
 10449                           
 10450                           ;lcd.c: 47: Lcd_Cmd(y);
 10451  00244E  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10452  002450  ECFB  F013         	call	i2_Lcd_Cmd
 10453                           
 10454                           ;lcd.c: 48: } else if (a == 2) {
 10455  002454  D013               	goto	i2l259
 10456  002456                     i2l5355:
 10457  002456  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10458  002458  0A02               	xorlw	2
 10459  00245A  A4D8               	btfss	status,2,c
 10460  00245C  D00F               	goto	i2l259
 10461                           
 10462                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10463  00245E  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10464  002460  0FBF               	addlw	191
 10465  002462  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10466                           
 10467                           ;lcd.c: 50: z = temp >> 4;
 10468  002464  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10469  002466  0B0F               	andlw	15
 10470  002468  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10471                           
 10472                           ;lcd.c: 51: y = temp & 0x0F;
 10473  00246A  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10474  00246C  0B0F               	andlw	15
 10475  00246E  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10476                           
 10477                           ;lcd.c: 52: Lcd_Cmd(z);
 10478  002470  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10479  002472  ECFB  F013         	call	i2_Lcd_Cmd
 10480                           
 10481                           ;lcd.c: 53: Lcd_Cmd(y);
 10482  002476  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10483  002478  ECFB  F013         	call	i2_Lcd_Cmd
 10484  00247C                     i2l259:
 10485  00247C  0012               	return	
 10486  00247E                     __end_ofi2_Lcd_Set_Cursor:
 10487                           	opt stack 0
 10488                           pclatu	equ	0xFFB
 10489                           pclath	equ	0xFFA
 10490                           tblptru	equ	0xFF8
 10491                           tblptrh	equ	0xFF7
 10492                           tblptrl	equ	0xFF6
 10493                           tablat	equ	0xFF5
 10494                           prodh	equ	0xFF4
 10495                           prodl	equ	0xFF3
 10496                           intcon	equ	0xFF2
 10497                           indf0	equ	0xFEF
 10498                           postinc0	equ	0xFEE
 10499                           fsr0h	equ	0xFEA
 10500                           fsr0l	equ	0xFE9
 10501                           wreg	equ	0xFE8
 10502                           postinc1	equ	0xFE6
 10503                           postdec1	equ	0xFE5
 10504                           fsr1h	equ	0xFE2
 10505                           fsr1l	equ	0xFE1
 10506                           indf2	equ	0xFDF
 10507                           postinc2	equ	0xFDE
 10508                           postdec2	equ	0xFDD
 10509                           fsr2h	equ	0xFDA
 10510                           fsr2l	equ	0xFD9
 10511                           status	equ	0xFD8
 10512                           
 10513 ;; *************** function i2_Lcd_Clear *****************
 10514 ;; Defined at:
 10515 ;;		line 35 in file "lcd.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;		None
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;		None
 10520 ;; Return value:  Size  Location     Type
 10521 ;;		None               void
 10522 ;; Registers used:
 10523 ;;		wreg, status,2, cstack
 10524 ;; Tracked objects:
 10525 ;;		On entry : 0/0
 10526 ;;		On exit  : 0/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10529 ;;      Params:         0       0       0       0       0       0       0       0       0
 10530 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10532 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10533 ;;Total ram usage:        0 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    2
 10536 ;; This function calls:
 10537 ;;		i2_Lcd_Cmd
 10538 ;; This function is called by:
 10539 ;;		_TMRO_USART
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           	psect	text54
 10544  0028EA                     __ptext54:
 10545                           	opt stack 0
 10546  0028EA                     i2_Lcd_Clear:
 10547                           	opt stack 21
 10548                           
 10549                           ;lcd.c: 36: Lcd_Cmd(0);
 10550                           
 10551                           ;incstack = 0
 10552  0028EA  0E00               	movlw	0
 10553  0028EC  ECFB  F013         	call	i2_Lcd_Cmd
 10554                           
 10555                           ;lcd.c: 37: Lcd_Cmd(1);
 10556  0028F0  0E01               	movlw	1
 10557  0028F2  ECFB  F013         	call	i2_Lcd_Cmd
 10558  0028F6  0012               	return	
 10559  0028F8                     __end_ofi2_Lcd_Clear:
 10560                           	opt stack 0
 10561                           pclatu	equ	0xFFB
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           indf0	equ	0xFEF
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           postinc1	equ	0xFE6
 10576                           postdec1	equ	0xFE5
 10577                           fsr1h	equ	0xFE2
 10578                           fsr1l	equ	0xFE1
 10579                           indf2	equ	0xFDF
 10580                           postinc2	equ	0xFDE
 10581                           postdec2	equ	0xFDD
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function i2_Lcd_Cmd *****************
 10587 ;; Defined at:
 10588 ;;		line 27 in file "lcd.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;  a               1    wreg     unsigned char 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  a               1    2[COMRAM] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;		None               void
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10602 ;;      Params:         0       0       0       0       0       0       0       0       0
 10603 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10604 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10605 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10606 ;;Total ram usage:        2 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    1
 10609 ;; This function calls:
 10610 ;;		i2_Lcd_Port
 10611 ;; This function is called by:
 10612 ;;		i2_Lcd_Clear
 10613 ;;		i2_Lcd_Set_Cursor
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text55
 10618  0027F6                     __ptext55:
 10619                           	opt stack 0
 10620  0027F6                     i2_Lcd_Cmd:
 10621                           	opt stack 21
 10622                           
 10623                           ;incstack = 0
 10624                           ;i2Lcd_Cmd@a stored from wreg
 10625  0027F6  6E03               	movwf	i2Lcd_Cmd@a,c
 10626                           
 10627                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10628  0027F8  9084               	bcf	3972,0,c	;volatile
 10629                           
 10630                           ;lcd.c: 29: Lcd_Port(a);
 10631  0027FA  5003               	movf	i2Lcd_Cmd@a,w,c
 10632  0027FC  EC9D  F013         	call	i2_Lcd_Port
 10633                           
 10634                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10635  002800  8484               	bsf	3972,2,c	;volatile
 10636                           
 10637                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10638  002802  0E06               	movlw	6
 10639  002804  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10640  002806  0E30               	movlw	48
 10641  002808                     i2u574_47:
 10642  002808  2EE8               	decfsz	wreg,f,c
 10643  00280A  D7FE               	goto	i2u574_47
 10644  00280C  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10645  00280E  D7FC               	goto	i2u574_47
 10646  002810  D000               	nop2	
 10647                           
 10648                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10649  002812  9484               	bcf	3972,2,c	;volatile
 10650  002814  0012               	return	
 10651  002816                     __end_ofi2_Lcd_Cmd:
 10652                           	opt stack 0
 10653                           pclatu	equ	0xFFB
 10654                           pclath	equ	0xFFA
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           indf0	equ	0xFEF
 10663                           postinc0	equ	0xFEE
 10664                           fsr0h	equ	0xFEA
 10665                           fsr0l	equ	0xFE9
 10666                           wreg	equ	0xFE8
 10667                           postinc1	equ	0xFE6
 10668                           postdec1	equ	0xFE5
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function i2_Lcd_Port *****************
 10679 ;; Defined at:
 10680 ;;		line 6 in file "lcd.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;  a               1    wreg     unsigned char 
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  a               1    0[COMRAM] unsigned char 
 10685 ;; Return value:  Size  Location     Type
 10686 ;;		None               void
 10687 ;; Registers used:
 10688 ;;		wreg
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10694 ;;      Params:         0       0       0       0       0       0       0       0       0
 10695 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10697 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10698 ;;Total ram usage:        1 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; This function calls:
 10701 ;;		Nothing
 10702 ;; This function is called by:
 10703 ;;		i2_Lcd_Cmd
 10704 ;;		i2_Lcd_Write_Char
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text56
 10709  00273A                     __ptext56:
 10710                           	opt stack 0
 10711  00273A                     i2_Lcd_Port:
 10712                           	opt stack 21
 10713                           
 10714                           ;incstack = 0
 10715                           ;i2Lcd_Port@a stored from wreg
 10716  00273A  6E01               	movwf	i2Lcd_Port@a,c
 10717                           
 10718                           ;lcd.c: 7: if (a & 1)
 10719  00273C  A001               	btfss	i2Lcd_Port@a,0,c
 10720  00273E  D002               	goto	i2l239
 10721                           
 10722                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10723  002740  8883               	bsf	3971,4,c	;volatile
 10724  002742  D001               	goto	i2l5059
 10725  002744                     i2l239:
 10726                           
 10727                           ;lcd.c: 9: else
 10728                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10729  002744  9883               	bcf	3971,4,c	;volatile
 10730  002746                     i2l5059:
 10731                           
 10732                           ;lcd.c: 12: if (a & 2)
 10733  002746  A201               	btfss	i2Lcd_Port@a,1,c
 10734  002748  D002               	goto	i2l241
 10735                           
 10736                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10737  00274A  8A83               	bsf	3971,5,c	;volatile
 10738  00274C  D001               	goto	i2l5063
 10739  00274E                     i2l241:
 10740                           
 10741                           ;lcd.c: 14: else
 10742                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10743  00274E  9A83               	bcf	3971,5,c	;volatile
 10744  002750                     i2l5063:
 10745                           
 10746                           ;lcd.c: 17: if (a & 4)
 10747  002750  A401               	btfss	i2Lcd_Port@a,2,c
 10748  002752  D002               	goto	i2l243
 10749                           
 10750                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10751  002754  8C83               	bsf	3971,6,c	;volatile
 10752  002756  D001               	goto	i2l5067
 10753  002758                     i2l243:
 10754                           
 10755                           ;lcd.c: 19: else
 10756                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10757  002758  9C83               	bcf	3971,6,c	;volatile
 10758  00275A                     i2l5067:
 10759                           
 10760                           ;lcd.c: 22: if (a & 8)
 10761  00275A  A601               	btfss	i2Lcd_Port@a,3,c
 10762  00275C  D002               	goto	i2l245
 10763                           
 10764                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10765  00275E  8E83               	bsf	3971,7,c	;volatile
 10766  002760  D001               	goto	i2l247
 10767  002762                     i2l245:
 10768                           
 10769                           ;lcd.c: 24: else
 10770                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10771  002762  9E83               	bcf	3971,7,c	;volatile
 10772  002764                     i2l247:
 10773  002764  0012               	return	
 10774  002766                     __end_ofi2_Lcd_Port:
 10775                           	opt stack 0
 10776                           pclatu	equ	0xFFB
 10777                           pclath	equ	0xFFA
 10778                           tblptru	equ	0xFF8
 10779                           tblptrh	equ	0xFF7
 10780                           tblptrl	equ	0xFF6
 10781                           tablat	equ	0xFF5
 10782                           prodh	equ	0xFF4
 10783                           prodl	equ	0xFF3
 10784                           intcon	equ	0xFF2
 10785                           indf0	equ	0xFEF
 10786                           postinc0	equ	0xFEE
 10787                           fsr0h	equ	0xFEA
 10788                           fsr0l	equ	0xFE9
 10789                           wreg	equ	0xFE8
 10790                           postinc1	equ	0xFE6
 10791                           postdec1	equ	0xFE5
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           fsr2h	equ	0xFDA
 10798                           fsr2l	equ	0xFD9
 10799                           status	equ	0xFD8
 10800                           
 10801 ;; *************** function _ReadUSART *****************
 10802 ;; Defined at:
 10803 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 10804 ;; Parameters:    Size  Location     Type
 10805 ;;		None
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;  data            1    0[COMRAM] unsigned char 
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      unsigned char 
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, status,0
 10812 ;; Tracked objects:
 10813 ;;		On entry : 0/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10817 ;;      Params:         0       0       0       0       0       0       0       0       0
 10818 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10820 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10821 ;;Total ram usage:        1 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; This function calls:
 10824 ;;		Nothing
 10825 ;; This function is called by:
 10826 ;;		_TMRO_USART
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           	psect	text57
 10831  002852                     __ptext57:
 10832                           	opt stack 0
 10833  002852                     _ReadUSART:
 10834                           	opt stack 23
 10835                           
 10836                           ;incstack = 0
 10837  002852  0EF2               	movlw	242
 10838  002854  163C               	andwf	_USART_Status,f,c
 10839  002856  ACAB               	btfss	4011,6,c	;volatile
 10840  002858  D003               	goto	i2l590
 10841  00285A  903C               	bcf	_USART_Status,0,c
 10842  00285C  B0AB               	btfsc	4011,0,c	;volatile
 10843  00285E  803C               	bsf	_USART_Status,0,c
 10844  002860                     i2l590:
 10845  002860  B4AB               	btfsc	4011,2,c	;volatile
 10846  002862  843C               	bsf	_USART_Status,2,c
 10847  002864  B2AB               	btfsc	4011,1,c	;volatile
 10848  002866  863C               	bsf	_USART_Status,3,c
 10849  002868  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 10850  00286C  5001               	movf	ReadUSART@data,w,c
 10851  00286E  0012               	return	
 10852  002870                     __end_of_ReadUSART:
 10853                           	opt stack 0
 10854                           pclatu	equ	0xFFB
 10855                           pclath	equ	0xFFA
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           indf0	equ	0xFEF
 10864                           postinc0	equ	0xFEE
 10865                           fsr0h	equ	0xFEA
 10866                           fsr0l	equ	0xFE9
 10867                           wreg	equ	0xFE8
 10868                           postinc1	equ	0xFE6
 10869                           postdec1	equ	0xFE5
 10870                           fsr1h	equ	0xFE2
 10871                           fsr1l	equ	0xFE1
 10872                           indf2	equ	0xFDF
 10873                           postinc2	equ	0xFDE
 10874                           postdec2	equ	0xFDD
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           pclatu	equ	0xFFB
 10879                           pclath	equ	0xFFA
 10880                           tblptru	equ	0xFF8
 10881                           tblptrh	equ	0xFF7
 10882                           tblptrl	equ	0xFF6
 10883                           tablat	equ	0xFF5
 10884                           prodh	equ	0xFF4
 10885                           prodl	equ	0xFF3
 10886                           intcon	equ	0xFF2
 10887                           indf0	equ	0xFEF
 10888                           postinc0	equ	0xFEE
 10889                           fsr0h	equ	0xFEA
 10890                           fsr0l	equ	0xFE9
 10891                           wreg	equ	0xFE8
 10892                           postinc1	equ	0xFE6
 10893                           postdec1	equ	0xFE5
 10894                           fsr1h	equ	0xFE2
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           postdec2	equ	0xFDD
 10899                           fsr2h	equ	0xFDA
 10900                           fsr2l	equ	0xFD9
 10901                           status	equ	0xFD8
 10902                           
 10903                           	psect	rparam
 10904  0000                     pclatu	equ	0xFFB
 10905                           pclath	equ	0xFFA
 10906                           tblptru	equ	0xFF8
 10907                           tblptrh	equ	0xFF7
 10908                           tblptrl	equ	0xFF6
 10909                           tablat	equ	0xFF5
 10910                           prodh	equ	0xFF4
 10911                           prodl	equ	0xFF3
 10912                           intcon	equ	0xFF2
 10913                           indf0	equ	0xFEF
 10914                           postinc0	equ	0xFEE
 10915                           fsr0h	equ	0xFEA
 10916                           fsr0l	equ	0xFE9
 10917                           wreg	equ	0xFE8
 10918                           postinc1	equ	0xFE6
 10919                           postdec1	equ	0xFE5
 10920                           fsr1h	equ	0xFE2
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8


Data Sizes:
    Strings     189
    Constant    118
    Data        20
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160     90     142
    BANK1           256     22     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_19(CODE[13]), STR_18(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK1[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1226$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_22(CODE[11]), STR_21(CODE[7]), STR_20(CODE[18]), Lcd_Write_Integer@s(BANK1[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_17(CODE[8]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _Comando_Tablet->_putcBluetoothInt
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  124649
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5136
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2021
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1173
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     461
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     402
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     331
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       0     0      0  116186
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     632
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   48417
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     406
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     375
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      68
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      46
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      44
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    7651
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2068
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     121
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   49081
                                             88 BANK0      2     0      2
                                              0 BANK1     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   47657
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11052
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10773
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2312
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4695
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1603
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1745
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     584
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     803
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2204
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     752
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     696
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3897
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3612
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2037
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     130
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     588
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1129
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1290
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0    1177
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     419
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     254
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     580
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     155
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     155
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0     124
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      70       7       43.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     145      20        0.0%
DATA                 0      0     145       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jun 07 23:25:31 2017

                            _i 00C4                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 266A                             l59 227C  
                           l68 1F3A                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l215 28D6                            l241 2722  
                          l243 272C                            l245 2736                            l247 2738  
                          l239 2718                            l194 2700                            l259 242C  
                          l540 257C                            l438 0DB6                            l538 2570  
                          l539 257A                            l572 22D6                            l485 0592  
                          l581 231A                            l576 22EA                            l577 22EC  
                          l578 22F6                            l931 1B4E                            l579 22F8  
                          l890 17F8                            l972 1104                            l974 112C  
                          l983 1216                            l992 1240                            l968 10CA  
                          l969 12DC                            l899 17E8                   __CFG_CPB$OFF 000000  
                          _PR2 000FCB                   __CFG_CPD$OFF 000000                   __CFG_BOR$OFF 000000  
                          _cad 003D                   ___awmod@sign 001E                            prod 000FF3  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l1010 1868                           l1011 1890                           l1101 2370  
                         l1008 18F8                           l1032 1434                           l1017 18E8  
                         l1026 1EE2                           l1042 27A4                           l1052 157E  
                         l1091 1FDA                           l4211 272E                           l4203 271A  
                         l5011 0808                           l4207 2724                           l4303 1334  
                         l5103 225A                           l4241 1122                           l4401 1E1A  
                         l4321 13A0                           l5025 08FA                           l5017 0838  
                         l4161 28A6                           l5121 1F20                           l5035 20EE  
                         l4171 1AC6                           l4251 1164                           l4235 1112  
                         l4403 1E1E                           l4411 1E3C                           l4331 13EA  
                         l5019 084C                           l5027 090E                           l5107 2284  
                         l4181 1B22                           l4173 1AD0                           l4261 11B8  
                         l4229 10D8                           l4317 1382                           l5029 0932  
                         l5125 1F44                           l4421 1D3A                           l5143 2406  
                         l5039 2126                           l4183 1B2C                           l4175 1AEE  
                         l4167 1AB8                           l4271 120C                           l4263 11C4  
                         l4415 1E4A                           l4407 1E32                           l4327 13CC  
                         l3615 256C                           l5303 167E                           l5311 169A  
                         l4431 1D90                           l4257 1198                           l4361 1C58  
                         l4353 1C3A                           l5313 16BE                           l4441 26EE  
                         l5225 1A58                           l4179 1B04                           l4259 11AC  
                         l4371 1C78                           l4363 1C5C                           l4347 1C1A  
                         l5251 1582                           l4427 1D78                           l4701 1EB4  
                         l4277 126A                           l4269 11F8                           l4533 100A  
                         l4525 0F26                           l4437 1DBA                           l4287 12B8  
                         l4615 18B0                           l4359 1C50                           l4375 1C82  
                         l4391 1DE8                           l4463 22D8                           l4455 22CA  
                         l5263 15BA                           l4721 145E                           l4801 2388  
                         l4641 171C                           l4625 18D8                           l4297 1300  
                         l4553 0B5C                           l5257 159E                           l4707 1EE0  
                         l4803 2394                           l4635 16F0                           l4627 18E4  
                         l4619 18C0                           l4379 1C90                           l4395 1E04  
                         l4571 0D86                           l4547 0A9A                           l4581 1814  
                         l4565 0CB8                           l4557 0B6C                           l5285 1628  
                         l5269 15D6                           l4813 24D4                           l4751 1542  
                         l4743 1508                           l4663 178E                           l4655 175E  
                         l4399 1E12                           l4831 0052                           l5455 1CE0  
                         l4753 1548                           l4673 17B0                           l4913 0420  
                         l4833 0060                           l4825 0030                           l4817 2506  
                         l5449 1CD2                           l4739 14EC                           l4771 1F9C  
                         l4683 17D8                           l4587 182E                           l5475 1D1A  
                         l4757 156E                           l4749 152A                           l4685 17E4  
                         l4677 17C0                           l4933 049C                           l4941 053A  
                         l4909 03B8                           l4853 011C                           l4837 0066  
                         l4767 1F8C                           l4791 233E                           l4943 0548  
                         l4927 0472                           l4839 00A2                           l4697 1E84  
                         l4769 1F98                           l4881 0272                           l4779 1FCC  
                         l4795 2362                           l4787 232E                           l4963 05C4  
                         l4955 0596                           l4789 233A                           l4949 0562  
                         l4893 0320                           l4885 02B8                           l4877 024C  
                         l4869 01E4                           l4967 0616                           l4985 0730  
                         l4977 0708                           l4897 0346                           l4979 0716  
                         l4987 073C                           l4997 07B6                           STR_1 7FB7  
                         STR_2 7F63                           STR_3 7FD9                           STR_4 7FD9  
                         STR_5 7FB4                           STR_6 7F72                           STR_7 7F80  
                         STR_8 7F9C                           STR_9 7F8E                __end_of_BT_Init 1BF6  
                         u4001 1076                           u4011 1096                           u4211 12F2  
                         u3405 25CA                           u4231 1314                           _PIE1 000F9D  
                         u4240 1320                           u5040 016C                           u5025 00F6  
                         u3435 2590                           u4420 1DB0                           u5045 0160  
                         u5310 211E                           u5320 2156                           u4427 1DA6  
                         u5317 2114                           u4621 180A                           u5245 078E  
                         u4710 16E2                           u4390 1D6E                           u5327 214C  
                         u4641 1824                           u4730 170E                           u4715 16D8  
                         u4397 1D64                           u5381 1B66                           u4735 1704  
                         u4841 144E                           u4690 18C6                           u5707 269A  
                         u4860 148A                           u4780 17C6                           u5717 27E8  
                         u5637 21E4                           u5647 21FA                           u4865 1480  
                         u5657 2210                           u4890 1510                           u5667 1A10  
                         u5677 1A48                           u5687 26F4                           u5697 2688  
                         _TMR2 000FCC              ?_Lcd_Write_String 001D                           _main 1C9A  
                 ___ftpack@arg 0019                   ___ftpack@exp 001C                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 0018             ??_Lcd_Write_String 001F  
                __CFG_IESO$OFF 000000                     _FinComandB 0036                     _FinComandT 0037  
                 _sprintf$1239 0098                   _sprintf$2290 0095                __end_of_Lcd_Cmd 27F6  
                __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A                   ___ftmul@sign 006B  
                  ?_UART1_Init 0001                   ___fttol@exp1 0081                   ___fttol@lval 007D  
                   _ComanBFlag 0031        __size_of_clrBufferUSART 0038                  __CFG_PLLDIV$1 000000  
                   _ComanTFlag 0032              _Lcd_Write_Integer 25FA                 __CFG_CCP2MX$ON 000000  
                        ?_main 0001                __end_of___awdiv 1C9A                __end_of___ftadd 12DE  
                        STR_10 7FF1                          STR_11 7F53                          STR_12 7FF8  
                        STR_20 7F41                          STR_13 7F51                          STR_21 7FEA  
                        STR_14 7FFA                          STR_22 7FC3                          STR_15 7FFC  
                        STR_16 7F70                          STR_17 7FE2                          STR_18 7FCE  
                        STR_19 7FAA                __end_of___awmod 1E54                __end_of___ftneg 27B2  
              __end_of___lldiv 1FEC                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 2382                __end_of___ftsub 254C                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l241 274E                          i2l243 2758  
                        i2l245 2762                          i2l247 2764                          i2l239 2744  
                        i2l259 247C                          i2l356 1990                          i2l590 2860  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF3                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 242E                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 224A                 WriteUSART@data 0019               __end_of_Lcd_Port 273A  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 247E  
                 __end_of_main 1D30      __end_of_Lcd_Write_Integer 2634    __size_of_Inicializa_Driveby 00BA  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 28BE               __end_of_OpenPWM2 2586  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 270E  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1B50               __end_of___lbtoft 27D6                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 23DE  
                       i2l5063 2750                         i2l5067 275A                         i2l5059 2746  
                       i2l5413 1972                         i2l5417 1986                         i2l5355 2456  
                       i2l5365 2168                         i2l5429 19B0                         _INTCON 000FF2  
                       i2l5369 21A0             __size_of_ReadUSART 001E            _putcBluetoothString 224A  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F41                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1E54  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 2816                         ___wmul 2766  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 2068                 _PWM_DutyCycle2 1FEC                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 2484                         clear_1 2490  
                       clear_2 249C               ___awdiv@quotient 0025                 sprintf@vd_1241 00A0  
         ?_putcBluetoothString 0020                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 26A4          ___ftmul@f3_as_product 0067                   __mediumconst 7ECA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19E6              __end_of_PWM_init1 2852              __end_of_PWM_init2 2834  
             __end_of_putcTxU1 28DC                      ??_sprintf 008F        __size_of_Comando_Tablet 0144  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 24C2  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 28EA                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 20E4         __end_of_PWM_DutyCycle2 2068                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 289A                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2886     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 2634                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 2870              __end_of_SetDCPWM1 25FA  
            __end_of_SetDCPWM2 25C0              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 23DE                     __div_to_l_ 16C4                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 231C                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 2510                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00BA                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 266C  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
                      _CCP1CON 000FBD                        _CCP2CON 000FBA           i2Lcd_Set_Cursor@temp 0008  
  SendBlueToothCommand@command 0023                        ?_fround 006C      __size_of_Lcd_Write_String 007A  
                    ?___ftpack 0019                      ?___lbtoft 0021         __end_of_Lcd_Set_Cursor 242E  
                    ?___lltoft 0021               putSTRINGU1@total 001D       __end_ofi2_Lcd_Set_Cursor 247E  
                      _BT_Init 1B50                        _SBUSART 003A                     ??_Lcd_Init 001C  
                 ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019                     _contadorbt 00C2  
           __end_of_UART1_Init 28CE                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 266C  
                      _Lcd_Cmd 27D6                        _Comando 0033                        _Med_lsb 00BC  
                      _Med_msb 00BE                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1A  
                      __Hparam 0000                     _scale$2289 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1BF6                        ___ftadd 105E                        ___awmod 1DC4  
                    ?_putcTxU1 0001                        ___ftneg 278C                        ___lldiv 1F6A  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 231C  
                      ___ftsub 2510                        ___fttol 1436             __end_ofi2_Lcd_Port 2766  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 247E                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5669 00DA                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1C9A                        __ptext1 21D8  
                      __ptext2 19EE                        __ptext3 1B50                        __ptext4 2870  
                      __ptext5 1D30                        __ptext6 28CE                        __ptext7 24C8  
                      __ptext8 26DC                        __ptext9 1580                        _comando 00C6  
                  ?__div_to_l_ 0019                        _countup 00EC                        _dpowers 7ECB  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19EE  
               _Comando_Tablet 1580                        _sprintf 001C         __end_of_Lcd_Write_Char 26A4  
               __pintcode_body 18FA           end_of_initialization 24C2                    _TramaTablet 0100  
    __size_of_putcBluetoothInt 0086                        int_func 18FA       __end_ofi2_Lcd_Write_Char 26DC  
              ___lldiv@divisor 001D                ___lldiv@counter 0025                      _RCSTAbits 000FAB  
   __end_of_Inicializa_Driveby 1AA8                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                    Lcd_Port@a 0019                     ??_putcTxU1 001A                     _num_med_hi 0043  
               __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C                  ??__tdiv_to_l_ 001F  
                    i2_Lcd_Cmd 27F6                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 16C4   __end_of_SendBlueToothCommand 2886                      _TRISBbits 000F93  
                    _TRISCbits 000F94            __size_of_WriteUSART 0012                ?_Lcd_Write_Char 0001  
            Lcd_Write_String@a 001D              Lcd_Write_String@i 0021                      _PWM_init1 2834  
                    _PWM_init2 2816                      _TXSTAbits 000FAC            __size_of__div_to_l_ 0136  
                  ___ftmul@exp 0066                      _Lcd_Clear 28DC                 __end_of___ftge 1EE4  
               __end_of___wmul 278C               _Lcd_Write_String 20E4                     ?i2_Lcd_Cmd 0001  
               __end_of_fround 105E            start_initialization 247E                      Pause_ms@i 001C  
                    Pause_ms@x 0019                ?_Comando_Tablet 0001                      _ReadUSART 2852  
                    _SetDCPWM1 25C0                      _SetDCPWM2 2586                SetDCPWM1@DCycle 001D  
          __end_of__tdiv_to_l_ 18FA                SetDCPWM2@DCycle 001D                      _DutyCycle 00BA  
            __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C                     ?_PWM_init1 0001  
                   ?_PWM_init2 0001                      _OpenUSART 22B4               ??_PWM_DutyCycle1 0082  
             ??_PWM_DutyCycle2 0082                      _Pause_seg 24C8                ___llmod@divisor 002A  
              ___llmod@counter 002E    __end_of_putcBluetoothString 22B4              __size_of_OpenPWM1 0012  
            __size_of_OpenPWM2 003A              __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001  
                     ??___ftge 001F     __end_ofi2_Lcd_Write_String 21D8                       ??___wmul 002B  
                  __pdataBANK0 00DA               __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C  
              Lcd_Write_Char@y 001B                       ??_fround 0030                 _num_med_medium 0045  
                   fround@prec 0075              __size_of___ftpack 00A8              __size_of___lbtoft 0024  
            __size_of___lltoft 005C                    __pbssCOMRAM 0030                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019  
          __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1EE4  
                   ?_OpenUSART 0019                       ?_Lcd_Cmd 0001                    sprintf@_val 00AD  
                  sprintf@flag 00A6               ??_clrBufferUSART 0019                     ?_Pause_seg 0001  
                  sprintf@fval 00B4                    sprintf@prec 00AB                      _cleanBfer 003E  
                 ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 2870  
                    __pintcode 0008                  __pmediumconst 7ECA                       ?___awdiv 001F  
                     ?___ftadd 0076                       ?___awmod 0019                       ?___ftneg 0019  
                     ?___lldiv 0019                       ?___ftmul 0060                       ?___llmod 0026  
                     ?___ftsub 0082                      __npowers_ 7EF3                       ?___fttol 0073  
            putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E  
                  __tdiv_to_l_ 17FA                      _contador2 0040                   ??__div_to_l_ 001F  
    SendBlueToothCommand@total 0025                   _TamanhoTrama 00C0                       ?_sprintf 0088  
               __size_of_scale 0478             __end_of_WriteUSART 28AC                    ??_PWM_init1 001A  
                  ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034  
               ___wmul@product 002B              ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 001B                       _PIR1bits 000F9E             __end_of__div_to_l_ 17FA  
                     i2u550_40 2198                       i2u550_47 218E                       i2u551_40 21D0  
           ??i2_Lcd_Write_Char 0002                       i2u551_47 21C6          ?_SendBlueToothCommand 0023  
                     i2u572_47 26C0                       i2u573_47 26D2                       i2u558_40 198C  
                     i2u574_47 2808                  ??i2_Lcd_Clear 0004                    ??_Lcd_Clear 001C  
             __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F                     _ADCON1bits 000FC1  
                  __stringdata 7F41              ___wmul@multiplier 0027                       _CheckSum 0030  
             ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001             _Inicializa_Driveby 19EE  
                  ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 21D8                       _Lcd_Port 270E                      copy_data0 24B6  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 215E                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 28AC                       _OpenPWM2 254C  
                     _Pause_ms 26DC                       __Hrparam 0000                       __Lrparam 0000  
           SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4               __size_of___ftadd 0280  
             __size_of___awmod 0090           ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089  
             PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1AA8  
                     ___lbtoft 27B2                    _fround$2287 0072                    _fround$2288 006F  
                     ___lltoft 2382            __end_ofi2_Lcd_Clear 28F8                 OpenPWM2@ccp2mx 001B  
        __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1DC4                     sprintf@exp 00B2  
               OpenPWM1@period 0019                 OpenPWM2@period 001A                       __ptext10 224A  
                     __ptext11 1EE4                       __ptext20 1FEC                       __ptext12 289A  
                     __ptext21 2586                       __ptext13 28BE                       __ptext30 12DE  
                     __ptext22 2068                       __ptext14 22B4                       __ptext31 1DC4  
                     __ptext23 27B2                       __ptext15 2634                       __ptext40 105E  
                     __ptext32 1BF6                       __ptext24 25C0                       __ptext16 2816  
                     __ptext41 1AA8                       __ptext33 17FA                       __ptext25 25FA  
                     __ptext17 254C                       __ptext42 278C                       __ptext34 16C4  
                     __ptext26 001C                       __ptext18 2834                       __ptext51 215E  
                     __ptext43 1E54                       __ptext35 2382                       __ptext27 0940  
                     __ptext19 28AC                       __ptext52 26A4                       __ptext44 20E4  
                     __ptext36 231C                       __ptext28 0DB8                       __ptext53 242E  
                     __ptext45 266C                       __ptext37 1F6A                       __ptext29 2766  
                     __ptext54 28EA                       __ptext46 23DE                       __ptext38 1436  
                     __ptext55 27F6                       __ptext47 28DC                       __ptext39 2510  
                     __ptext56 273A                       __ptext48 27D6                       __ptext57 2852  
                     __ptext49 270E                       __powers_ 7F1A                PWM_init1@period 001A  
              PWM_init2@period 001C                       _contador 003F               __size_of_sprintf 0924  
                __size_of_main 0096         ??_SendBlueToothCommand 0027                       _putcTxU1 28CE  
                  i2Lcd_Port@a 0001                  BT_Init@nameBT 0060       __end_of_putcBluetoothInt 1F6A  
        __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 215E                 OpenUSART@spbrg 0019  
                     scale@scl 0072              putcBluetoothInt@a 00B8              putcBluetoothInt@i 016E  
            putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A                       intlevel2 0000  
                    sprintf@ap 00A4               __tdiv_to_l_@exp1 0027                      sprintf@vd 009C  
             __tdiv_to_l_@cntr 0026                      sprintf@sp 0088            ?i2_Lcd_Write_String 0005  
             __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005              i2Lcd_Set_Cursor@b 0004  
            i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006               ___lldiv@dividend 0019  
    __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3                     i2Lcd_Cmd@a 0003  
                  i2_Lcd_Clear 28EA                     _UART1_Init 28BE                    _putSTRINGU1 1D30  
         ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020   __size_of_putcBluetoothString 006A  
                 ?__tdiv_to_l_ 0019                    _num_med_low 0044                       sprintf@c 00B7  
                     sprintf@f 008A               ___lldiv@quotient 0021             Lcd_Write_Integer@a 00B8  
           Lcd_Write_Integer@s 015A                     i2_Lcd_Port 273A                   _USART_Status 003C  
                   _TMRO_USART 0008  
