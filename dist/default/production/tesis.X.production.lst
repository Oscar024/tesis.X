

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Sep 07 19:27:41 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK0
    79  002948                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for BT_Init@F5669
    83  002948  41                 	db	65
    84  002949  54                 	db	84
    85  00294A  2B                 	db	43
    86  00294B  4E                 	db	78
    87  00294C  41                 	db	65
    88  00294D  4D                 	db	77
    89  00294E  45                 	db	69
    90  00294F  3D                 	db	61
    91  002950  72                 	db	114
    92  002951  6F                 	db	111
    93  002952  62                 	db	98
    94  002953  6F                 	db	111
    95  002954  74                 	db	116
    96  002955  0D                 	db	13
    97  002956  0A                 	db	10
    98  002957  00                 	db	0
    99  002958  00                 	db	0
   100  002959  00                 	db	0
   101                           
   102                           ;initializer for _countup
   103  00295A  0001               	dw	1
   104                           
   105                           	psect	mediumconst
   106  007ECC                     __pmediumconst:
   107                           	opt stack 0
   108  007ECC  00                 	db	0
   109  007ECD                     _dpowers:
   110                           	opt stack 0
   111  007ECD  0001               	dw	1
   112  007ECF  0000               	dw	0
   113  007ED1  000A               	dw	10
   114  007ED3  0000               	dw	0
   115  007ED5  0064               	dw	100
   116  007ED7  0000               	dw	0
   117  007ED9  03E8               	dw	1000
   118  007EDB  0000               	dw	0
   119  007EDD  2710               	dw	10000
   120  007EDF  0000               	dw	0
   121  007EE1  86A0               	dw	34464
   122  007EE3  0001               	dw	1
   123  007EE5  4240               	dw	16960
   124  007EE7  000F               	dw	15
   125  007EE9  9680               	dw	38528
   126  007EEB  0098               	dw	152
   127  007EED  E100               	dw	57600
   128  007EEF  05F5               	dw	1525
   129  007EF1  CA00               	dw	51712
   130  007EF3  3B9A               	dw	15258
   131  007EF5                     __end_of_dpowers:
   132                           	opt stack 0
   133  007EF5                     __npowers_:
   134                           	opt stack 0
   135  007EF5  00                 	db	0
   136  007EF6  80                 	db	128
   137  007EF7  3F                 	db	63
   138  007EF8  CD                 	db	205
   139  007EF9  CC                 	db	204
   140  007EFA  3D                 	db	61
   141  007EFB  D7                 	db	215
   142  007EFC  23                 	db	35
   143  007EFD  3C                 	db	60
   144  007EFE  12                 	db	18
   145  007EFF  83                 	db	131
   146  007F00  3A                 	db	58
   147  007F01  B7                 	db	183
   148  007F02  D1                 	db	209
   149  007F03  38                 	db	56
   150  007F04  C6                 	db	198
   151  007F05  27                 	db	39
   152  007F06  37                 	db	55
   153  007F07  38                 	db	56
   154  007F08  86                 	db	134
   155  007F09  35                 	db	53
   156  007F0A  C0                 	db	192
   157  007F0B  D6                 	db	214
   158  007F0C  33                 	db	51
   159  007F0D  CC                 	db	204
   160  007F0E  2B                 	db	43
   161  007F0F  32                 	db	50
   162  007F10  70                 	db	112
   163  007F11  89                 	db	137
   164  007F12  30                 	db	48
   165  007F13  E7                 	db	231
   166  007F14  DB                 	db	219
   167  007F15  2E                 	db	46
   168  007F16  E5                 	db	229
   169  007F17  3C                 	db	60
   170  007F18  1E                 	db	30
   171  007F19  42                 	db	66
   172  007F1A  A2                 	db	162
   173  007F1B  0D                 	db	13
   174  007F1C                     __end_of__npowers_:
   175                           	opt stack 0
   176  007F1C                     __powers_:
   177                           	opt stack 0
   178  007F1C  00                 	db	0
   179  007F1D  80                 	db	128
   180  007F1E  3F                 	db	63
   181  007F1F  00                 	db	0
   182  007F20  20                 	db	32
   183  007F21  41                 	db	65
   184  007F22  00                 	db	0
   185  007F23  C8                 	db	200
   186  007F24  42                 	db	66
   187  007F25  00                 	db	0
   188  007F26  7A                 	db	122
   189  007F27  44                 	db	68
   190  007F28  40                 	db	64
   191  007F29  1C                 	db	28
   192  007F2A  46                 	db	70
   193  007F2B  50                 	db	80
   194  007F2C  C3                 	db	195
   195  007F2D  47                 	db	71
   196  007F2E  24                 	db	36
   197  007F2F  74                 	db	116
   198  007F30  49                 	db	73
   199  007F31  97                 	db	151
   200  007F32  18                 	db	24
   201  007F33  4B                 	db	75
   202  007F34  BC                 	db	188
   203  007F35  BE                 	db	190
   204  007F36  4C                 	db	76
   205  007F37  6B                 	db	107
   206  007F38  6E                 	db	110
   207  007F39  4E                 	db	78
   208  007F3A  03                 	db	3
   209  007F3B  15                 	db	21
   210  007F3C  50                 	db	80
   211  007F3D  79                 	db	121
   212  007F3E  AD                 	db	173
   213  007F3F  60                 	db	96
   214  007F40  F3                 	db	243
   215  007F41  49                 	db	73
   216  007F42  71                 	db	113
   217  007F43                     __end_of__powers_:
   218                           	opt stack 0
   219  0000                     _ADCON1bits	set	4033
   220  0000                     _CCP1CON	set	4029
   221  0000                     _CCP2CON	set	4026
   222  0000                     _CCPR1L	set	4030
   223  0000                     _CCPR2L	set	4027
   224  0000                     _INTCON	set	4082
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _PIE1	set	3997
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PORTA	set	3968
   230  0000                     _PORTAbits	set	3968
   231  0000                     _PORTB	set	3969
   232  0000                     _PORTBbits	set	3969
   233  0000                     _PORTDbits	set	3971
   234  0000                     _PORTE	set	3972
   235  0000                     _PORTEbits	set	3972
   236  0000                     _PR2	set	4043
   237  0000                     _RCREG	set	4014
   238  0000                     _RCSTA	set	4011
   239  0000                     _RCSTAbits	set	4011
   240  0000                     _SPBRG	set	4015
   241  0000                     _SPBRGH	set	4016
   242  0000                     _T2CON	set	4042
   243  0000                     _T2CONbits	set	4042
   244  0000                     _TMR2	set	4044
   245  0000                     _TRISA	set	3986
   246  0000                     _TRISB	set	3987
   247  0000                     _TRISBbits	set	3987
   248  0000                     _TRISC	set	3988
   249  0000                     _TRISCbits	set	3988
   250  0000                     _TRISD	set	3989
   251  0000                     _TRISE	set	3990
   252  0000                     _TXREG	set	4013
   253  0000                     _TXSTA	set	4012
   254  0000                     _TXSTAbits	set	4012
   255  007F43                     __stringdata:
   256                           	opt stack 0
   257  007F43                     STR_19:
   258  007F43  49                 	db	73	;'I'
   259  007F44  6E                 	db	110	;'n'
   260  007F45  74                 	db	116	;'t'
   261  007F46  65                 	db	101	;'e'
   262  007F47  72                 	db	114	;'r'
   263  007F48  72                 	db	114	;'r'
   264  007F49  75                 	db	117	;'u'
   265  007F4A  70                 	db	112	;'p'
   266  007F4B  74                 	db	116	;'t'
   267  007F4C  69                 	db	105	;'i'
   268  007F4D  6F                 	db	111	;'o'
   269  007F4E  6E                 	db	110	;'n'
   270  007F4F  20                 	db	32
   271  007F50  54                 	db	84	;'T'
   272  007F51  4D                 	db	77	;'M'
   273  007F52  52                 	db	82	;'R'
   274  007F53  32                 	db	50	;'2'
   275  007F54  00                 	db	0
   276  007F55                     STR_11:
   277  007F55  42                 	db	66	;'B'
   278  007F56  54                 	db	84	;'T'
   279  007F57  20                 	db	32
   280  007F58  49                 	db	73	;'I'
   281  007F59  4E                 	db	78	;'N'
   282  007F5A  49                 	db	73	;'I'
   283  007F5B  43                 	db	67	;'C'
   284  007F5C  49                 	db	73	;'I'
   285  007F5D  41                 	db	65	;'A'
   286  007F5E  4C                 	db	76	;'L'
   287  007F5F  49                 	db	73	;'I'
   288  007F60  5A                 	db	90	;'Z'
   289  007F61  41                 	db	65	;'A'
   290  007F62  44                 	db	68	;'D'
   291  007F63  4F                 	db	79	;'O'
   292  007F64  00                 	db	0
   293  007F65                     STR_2:
   294  007F65  41                 	db	65	;'A'
   295  007F66  54                 	db	84	;'T'
   296  007F67  2B                 	db	43
   297  007F68  50                 	db	80	;'P'
   298  007F69  53                 	db	83	;'S'
   299  007F6A  57                 	db	87	;'W'
   300  007F6B  44                 	db	68	;'D'
   301  007F6C  3D                 	db	61	;'='
   302  007F6D  30                 	db	48	;'0'
   303  007F6E  30                 	db	48	;'0'
   304  007F6F  30                 	db	48	;'0'
   305  007F70  30                 	db	48	;'0'
   306  007F71  0D                 	db	13
   307  007F72  0A                 	db	10
   308  007F73  00                 	db	0
   309  007F74  0A                 	db	10
   310  007F75  2B                 	db	43
   311  007F76  42                 	db	66	;'B'
   312  007F77  54                 	db	84	;'T'
   313  007F78  53                 	db	83	;'S'
   314  007F79  54                 	db	84	;'T'
   315  007F7A  41                 	db	65	;'A'
   316  007F7B  54                 	db	84	;'T'
   317  007F7C  45                 	db	69	;'E'
   318  007F7D  3A                 	db	58	;':'
   319  007F7E  31                 	db	49	;'1'
   320  007F7F  0D                 	db	13
   321  007F80  0A                 	db	10
   322  007F81  00                 	db	0
   323  007F82  0A                 	db	10
   324  007F83  2B                 	db	43
   325  007F84  42                 	db	66	;'B'
   326  007F85  54                 	db	84	;'T'
   327  007F86  53                 	db	83	;'S'
   328  007F87  54                 	db	84	;'T'
   329  007F88  41                 	db	65	;'A'
   330  007F89  54                 	db	84	;'T'
   331  007F8A  45                 	db	69	;'E'
   332  007F8B  3A                 	db	58	;':'
   333  007F8C  33                 	db	51	;'3'
   334  007F8D  0D                 	db	13
   335  007F8E  0A                 	db	10
   336  007F8F  00                 	db	0
   337  007F90  0A                 	db	10
   338  007F91  2B                 	db	43
   339  007F92  42                 	db	66	;'B'
   340  007F93  54                 	db	84	;'T'
   341  007F94  53                 	db	83	;'S'
   342  007F95  54                 	db	84	;'T'
   343  007F96  41                 	db	65	;'A'
   344  007F97  54                 	db	84	;'T'
   345  007F98  45                 	db	69	;'E'
   346  007F99  3A                 	db	58	;':'
   347  007F9A  34                 	db	52	;'4'
   348  007F9B  0D                 	db	13
   349  007F9C  0A                 	db	10
   350  007F9D  00                 	db	0
   351  007F9E  0A                 	db	10
   352  007F9F  43                 	db	67	;'C'
   353  007FA0  4F                 	db	79	;'O'
   354  007FA1  4E                 	db	78	;'N'
   355  007FA2  4E                 	db	78	;'N'
   356  007FA3  45                 	db	69	;'E'
   357  007FA4  43                 	db	67	;'C'
   358  007FA5  54                 	db	84	;'T'
   359  007FA6  3A                 	db	58	;':'
   360  007FA7  4F                 	db	79	;'O'
   361  007FA8  4B                 	db	75	;'K'
   362  007FA9  0D                 	db	13
   363  007FAA  0A                 	db	10
   364  007FAB  00                 	db	0
   365  007FAC                     STR_18:
   366  007FAC  49                 	db	73	;'I'
   367  007FAD  6E                 	db	110	;'n'
   368  007FAE  74                 	db	116	;'t'
   369  007FAF  65                 	db	101	;'e'
   370  007FB0  67                 	db	103	;'g'
   371  007FB1  65                 	db	101	;'e'
   372  007FB2  72                 	db	114	;'r'
   373  007FB3  20                 	db	32
   374  007FB4  3D                 	db	61	;'='
   375  007FB5  20                 	db	32
   376  007FB6  25                 	db	37
   377  007FB7  64                 	db	100	;'d'
   378  007FB8  00                 	db	0
   379  007FB9                     STR_1:
   380  007FB9  41                 	db	65	;'A'
   381  007FBA  54                 	db	84	;'T'
   382  007FBB  2B                 	db	43
   383  007FBC  52                 	db	82	;'R'
   384  007FBD  4F                 	db	79	;'O'
   385  007FBE  4C                 	db	76	;'L'
   386  007FBF  45                 	db	69	;'E'
   387  007FC0  3D                 	db	61	;'='
   388  007FC1  30                 	db	48	;'0'
   389  007FC2  0D                 	db	13
   390  007FC3  0A                 	db	10
   391  007FC4  00                 	db	0
   392  007FC5                     STR_21:
   393  007FC5  43                 	db	67	;'C'
   394  007FC6  4D                 	db	77	;'M'
   395  007FC7  44                 	db	68	;'D'
   396  007FC8  20                 	db	32
   397  007FC9  54                 	db	84	;'T'
   398  007FCA  41                 	db	65	;'A'
   399  007FCB  42                 	db	66	;'B'
   400  007FCC  4C                 	db	76	;'L'
   401  007FCD  45                 	db	69	;'E'
   402  007FCE  54                 	db	84	;'T'
   403  007FCF  00                 	db	0
   404  007FD0  46                 	db	70	;'F'
   405  007FD1  6C                 	db	108	;'l'
   406  007FD2  6F                 	db	111	;'o'
   407  007FD3  61                 	db	97	;'a'
   408  007FD4  74                 	db	116	;'t'
   409  007FD5  20                 	db	32
   410  007FD6  3D                 	db	61	;'='
   411  007FD7  20                 	db	32
   412  007FD8  25                 	db	37
   413  007FD9  66                 	db	102	;'f'
   414  007FDA  00                 	db	0
   415  007FDB                     STR_3:
   416  007FDB  41                 	db	65	;'A'
   417  007FDC  54                 	db	84	;'T'
   418  007FDD  2B                 	db	43
   419  007FDE  49                 	db	73	;'I'
   420  007FDF  4E                 	db	78	;'N'
   421  007FE0  51                 	db	81	;'Q'
   422  007FE1  0D                 	db	13
   423  007FE2  0A                 	db	10
   424  007FE3  00                 	db	0
   425  007FE4                     STR_16:
   426  007FE4  44                 	db	68	;'D'
   427  007FE5  65                 	db	101	;'e'
   428  007FE6  66                 	db	102	;'f'
   429  007FE7  61                 	db	97	;'a'
   430  007FE8  75                 	db	117	;'u'
   431  007FE9  6C                 	db	108	;'l'
   432  007FEA  74                 	db	116	;'t'
   433  007FEB  00                 	db	0
   434  007FEC                     STR_20:
   435  007FEC  49                 	db	73	;'I'
   436  007FED  6E                 	db	110	;'n'
   437  007FEE  69                 	db	105	;'i'
   438  007FEF  63                 	db	99	;'c'
   439  007FF0  69                 	db	105	;'i'
   440  007FF1  6F                 	db	111	;'o'
   441  007FF2  00                 	db	0
   442  007FF3                     STR_10:
   443  007FF3  49                 	db	73	;'I'
   444  007FF4  4E                 	db	78	;'N'
   445  007FF5  49                 	db	73	;'I'
   446  007FF6  43                 	db	67	;'C'
   447  007FF7  49                 	db	73	;'I'
   448  007FF8  4F                 	db	79	;'O'
   449  007FF9  00                 	db	0
   450  007FFA                     STR_12:
   451  007FFA  31                 	db	49	;'1'
   452  007FFB  00                 	db	0
   453  007FFC                     STR_14:
   454  007FFC  33                 	db	51	;'3'
   455  007FFD  00                 	db	0
   456  007FFE                     __end_of__stringdata:
   457                           	opt stack 0
   458                           
   459                           ; #config settings
   460  007FFE  00                 	db	0	; dummy byte at the end
   461  0000                     
   462                           	psect	cinit
   463  002540                     __pcinit:
   464                           	opt stack 0
   465  002540                     start_initialization:
   466                           	opt stack 0
   467  002540                     __initialization:
   468                           	opt stack 0
   469                           
   470                           ; Clear objects allocated to BANK1 (90 bytes)
   471  002540  EE01  F000         	lfsr	0,__pbssBANK1
   472  002544  0E5A               	movlw	90
   473  002546                     clear_0:
   474  002546  6AEE               	clrf	postinc0,c
   475  002548  06E8               	decf	wreg,f,c
   476  00254A  E1FD               	bnz	clear_0
   477                           
   478                           ; Clear objects allocated to BANK0 (30 bytes)
   479  00254C  EE00  F0CE         	lfsr	0,__pbssBANK0
   480  002550  0E1E               	movlw	30
   481  002552                     clear_1:
   482  002552  6AEE               	clrf	postinc0,c
   483  002554  06E8               	decf	wreg,f,c
   484  002556  E1FD               	bnz	clear_1
   485                           
   486                           ; Clear objects allocated to COMRAM (24 bytes)
   487  002558  EE00  F030         	lfsr	0,__pbssCOMRAM
   488  00255C  0E18               	movlw	24
   489  00255E                     clear_2:
   490  00255E  6AEE               	clrf	postinc0,c
   491  002560  06E8               	decf	wreg,f,c
   492  002562  E1FD               	bnz	clear_2
   493                           
   494                           ; Initialize objects allocated to BANK0 (20 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  002564  0E48               	movlw	low __pidataBANK0
   497  002566  6EF6               	movwf	tblptrl,c
   498  002568  0E29               	movlw	high __pidataBANK0
   499  00256A  6EF7               	movwf	tblptrh,c
   500  00256C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  00256E  6EF8               	movwf	tblptru,c
   502  002570  EE00  F0EC         	lfsr	0,__pdataBANK0
   503  002574  EE10 F014          	lfsr	1,20
   504  002578                     copy_data0:
   505  002578  0009               	tblrd		*+
   506  00257A  CFF5 FFEE          	movff	tablat,postinc0
   507  00257E  50E5               	movf	postdec1,w,c
   508  002580  50E1               	movf	fsr1l,w,c
   509  002582  E1FA               	bnz	copy_data0
   510  002584                     end_of_initialization:
   511                           	opt stack 0
   512  002584                     __end_of__initialization:
   513                           	opt stack 0
   514  002584  0100               	movlb	0
   515  002586  EFAD  F00E         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssCOMRAM
   526  000030                     __pbssCOMRAM:
   527                           	opt stack 0
   528  000030                     _CheckSum:
   529                           	opt stack 0
   530  000030                     	ds	1
   531  000031                     _ComanBFlag:
   532                           	opt stack 0
   533  000031                     	ds	1
   534  000032                     _ComanTFlag:
   535                           	opt stack 0
   536  000032                     	ds	1
   537  000033                     _Comando:
   538                           	opt stack 0
   539  000033                     	ds	1
   540  000034                     _ComandoTablet:
   541                           	opt stack 0
   542  000034                     	ds	1
   543  000035                     _EntTrama:
   544                           	opt stack 0
   545  000035                     	ds	1
   546  000036                     _FinComandB:
   547                           	opt stack 0
   548  000036                     	ds	1
   549  000037                     _FinComandT:
   550                           	opt stack 0
   551  000037                     	ds	1
   552  000038                     _InicioComando:
   553                           	opt stack 0
   554  000038                     	ds	1
   555  000039                     _RXComandoTB:
   556                           	opt stack 0
   557  000039                     	ds	1
   558  00003A                     _SBUSART:
   559                           	opt stack 0
   560  00003A                     	ds	1
   561  00003B                     _Timer1:
   562                           	opt stack 0
   563  00003B                     	ds	1
   564  00003C                     _USART_Status:
   565                           	opt stack 0
   566  00003C                     	ds	1
   567  00003D                     _cad:
   568                           	opt stack 0
   569  00003D                     	ds	1
   570  00003E                     _cleanBfer:
   571                           	opt stack 0
   572  00003E                     	ds	1
   573  00003F                     _contador:
   574                           	opt stack 0
   575  00003F                     	ds	1
   576  000040                     _contador2:
   577                           	opt stack 0
   578  000040                     	ds	1
   579  000041                     _j:
   580                           	opt stack 0
   581  000041                     	ds	1
   582  000042                     _lenght:
   583                           	opt stack 0
   584  000042                     	ds	1
   585  000043                     _num_med_hi:
   586                           	opt stack 0
   587  000043                     	ds	1
   588  000044                     _num_med_low:
   589                           	opt stack 0
   590  000044                     	ds	1
   591  000045                     _num_med_medium:
   592                           	opt stack 0
   593  000045                     	ds	1
   594  000046                     _packet:
   595                           	opt stack 0
   596  000046                     	ds	1
   597  000047                     _Timer2Config:
   598                           	opt stack 0
   599  000047                     	ds	1
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           
   609                           	psect	bssBANK0
   610  0000CE                     __pbssBANK0:
   611                           	opt stack 0
   612  0000CE                     _DutyCycle:
   613                           	opt stack 0
   614  0000CE                     	ds	2
   615  0000D0                     _Med_lsb:
   616                           	opt stack 0
   617  0000D0                     	ds	2
   618  0000D2                     _Med_msb:
   619                           	opt stack 0
   620  0000D2                     	ds	2
   621  0000D4                     _TamanhoTrama:
   622                           	opt stack 0
   623  0000D4                     	ds	2
   624  0000D6                     _i:
   625                           	opt stack 0
   626  0000D6                     	ds	2
   627  0000D8                     _comando:
   628                           	opt stack 0
   629  0000D8                     	ds	20
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           
   639                           	psect	dataBANK0
   640  0000EC                     __pdataBANK0:
   641                           	opt stack 0
   642  0000EC                     BT_Init@F5669:
   643                           	opt stack 0
   644  0000EC                     	ds	18
   645  0000FE                     _countup:
   646                           	opt stack 0
   647  0000FE                     	ds	2
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK1
   658  000100                     __pbssBANK1:
   659                           	opt stack 0
   660  000100                     _TramaTablet:
   661                           	opt stack 0
   662  000100                     	ds	20
   663  000114                     _array:
   664                           	opt stack 0
   665  000114                     	ds	20
   666  000128                     _BluetoothDato:
   667                           	opt stack 0
   668  000128                     	ds	50
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	cstackBANK1
   679  00015A                     __pcstackBANK1:
   680                           	opt stack 0
   681  00015A                     putcBluetoothInt@s:
   682                           	opt stack 0
   683                           
   684                           ; 20 bytes @ 0x0
   685  00015A                     	ds	20
   686  00016E                     putcBluetoothInt@i:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x14
   690  00016E                     	ds	2
   691  000170                     Comando_Tablet@sensed:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x16
   695  000170                     	ds	2
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1l	equ	0xFE1
   704                           
   705                           	psect	cstackBANK0
   706  000060                     __pcstackBANK0:
   707                           	opt stack 0
   708  000060                     ?___ftmul:
   709                           	opt stack 0
   710  000060                     ___ftmul@f1:
   711                           	opt stack 0
   712  000060                     BT_Init@nameBT:
   713                           	opt stack 0
   714                           
   715                           ; 18 bytes @ 0x0
   716  000060                     	ds	3
   717  000063                     ___ftmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000063                     	ds	3
   722  000066                     ___ftmul@exp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x6
   726  000066                     	ds	1
   727  000067                     ___ftmul@f3_as_product:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x7
   731  000067                     	ds	3
   732  00006A                     ___ftmul@cntr:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xA
   736  00006A                     	ds	1
   737  00006B                     ___ftmul@sign:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xB
   741  00006B                     	ds	1
   742  00006C                     ?_fround:
   743                           	opt stack 0
   744  00006C                     ?_scale:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0xC
   748  00006C                     	ds	3
   749  00006F                     _fround$2491:
   750                           	opt stack 0
   751  00006F                     _scale$2492:
   752                           	opt stack 0
   753                           
   754                           ; 3 bytes @ 0xF
   755  00006F                     	ds	3
   756  000072                     scale@scl:
   757                           	opt stack 0
   758  000072                     _fround$2490:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000072                     	ds	1
   763  000073                     ?___fttol:
   764                           	opt stack 0
   765  000073                     ___fttol@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x13
   769  000073                     	ds	2
   770  000075                     fround@prec:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x15
   774  000075                     	ds	1
   775  000076                     ?___ftadd:
   776                           	opt stack 0
   777  000076                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x16
   781  000076                     	ds	1
   782  000077                     ??___fttol:
   783                           
   784                           ; 0 bytes @ 0x17
   785  000077                     	ds	2
   786  000079                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x19
   790  000079                     	ds	3
   791  00007C                     ??___ftadd:
   792  00007C                     ___fttol@sign1:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00007C                     	ds	1
   797  00007D                     ___fttol@lval:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x1D
   801  00007D                     	ds	2
   802  00007F                     ___ftadd@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x1F
   806  00007F                     	ds	1
   807  000080                     ___ftadd@exp2:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x20
   811  000080                     	ds	1
   812  000081                     ___ftadd@exp1:
   813                           	opt stack 0
   814  000081                     ___fttol@exp1:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000081                     	ds	1
   819  000082                     ??_PWM_DutyCycle1:
   820  000082                     ??_PWM_DutyCycle2:
   821  000082                     ?___ftsub:
   822                           	opt stack 0
   823  000082                     ___ftsub@f1:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x22
   827  000082                     	ds	3
   828  000085                     ___ftsub@f2:
   829                           	opt stack 0
   830                           
   831                           ; 3 bytes @ 0x25
   832  000085                     	ds	1
   833  000086                     PWM_DutyCycle1@DutyCycle:
   834                           	opt stack 0
   835  000086                     PWM_DutyCycle2@DutyCycle:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000086                     	ds	2
   840  000088                     ?_sprintf:
   841                           	opt stack 0
   842  000088                     PWM_DutyCycle1@percentageDuty:
   843                           	opt stack 0
   844  000088                     PWM_DutyCycle2@percentageDuty:
   845                           	opt stack 0
   846  000088                     sprintf@sp:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x28
   850  000088                     	ds	1
   851  000089                     PWM_DutyCycle1@DC:
   852                           	opt stack 0
   853  000089                     PWM_DutyCycle2@DC:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x29
   857  000089                     	ds	1
   858  00008A                     sprintf@f:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x2A
   862  00008A                     	ds	5
   863  00008F                     ??_sprintf:
   864                           
   865                           ; 0 bytes @ 0x2F
   866  00008F                     	ds	6
   867  000095                     _sprintf$2493:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x35
   871  000095                     	ds	3
   872  000098                     _sprintf$1468:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	4
   877  00009C                     sprintf@vd:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3C
   881  00009C                     	ds	4
   882  0000A0                     sprintf@vd_1470:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x40
   886  0000A0                     	ds	4
   887  0000A4                     sprintf@ap:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x44
   891  0000A4                     	ds	2
   892  0000A6                     sprintf@flag:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x46
   896  0000A6                     	ds	2
   897  0000A8                     sprintf@integ:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x48
   901  0000A8                     	ds	3
   902  0000AB                     sprintf@prec:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x4B
   906  0000AB                     	ds	2
   907  0000AD                     sprintf@_val:
   908                           	opt stack 0
   909                           
   910                           ; 5 bytes @ 0x4D
   911  0000AD                     	ds	5
   912  0000B2                     sprintf@exp:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x52
   916  0000B2                     	ds	2
   917  0000B4                     sprintf@fval:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0x54
   921  0000B4                     	ds	3
   922  0000B7                     sprintf@c:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x57
   926  0000B7                     	ds	1
   927  0000B8                     putcBluetoothInt@a:
   928                           	opt stack 0
   929  0000B8                     Lcd_Write_Integer@a:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x58
   933  0000B8                     	ds	2
   934  0000BA                     Lcd_Write_Integer@s:
   935                           	opt stack 0
   936                           
   937                           ; 20 bytes @ 0x5A
   938  0000BA                     	ds	20
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ReadUSART@data:
   952                           	opt stack 0
   953  000001                     i2Lcd_Port@a:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x0
   957  000001                     	ds	1
   958  000002                     ??i2_Lcd_Cmd:
   959  000002                     i2Lcd_Write_Char@temp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x1
   963  000002                     	ds	1
   964  000003                     i2Lcd_Cmd@a:
   965                           	opt stack 0
   966  000003                     i2Lcd_Write_Char@y:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     i2Lcd_Set_Cursor@b:
   972                           	opt stack 0
   973  000004                     i2Lcd_Write_Char@a:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x3
   977  000004                     	ds	1
   978  000005                     i2Lcd_Set_Cursor@a:
   979                           	opt stack 0
   980  000005                     i2Lcd_Write_String@a:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x4
   984  000005                     	ds	1
   985  000006                     i2Lcd_Set_Cursor@z:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x5
   989  000006                     	ds	1
   990  000007                     ??i2_Lcd_Write_String:
   991  000007                     i2Lcd_Set_Cursor@y:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x6
   995  000007                     	ds	1
   996  000008                     i2Lcd_Set_Cursor@temp:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x7
  1000  000008                     	ds	1
  1001  000009                     i2Lcd_Write_String@i:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  000009                     	ds	2
  1006  00000B                     ??_TMRO_USART:
  1007                           
  1008                           ; 0 bytes @ 0xA
  1009  00000B                     	ds	14
  1010  000019                     ??_OpenPWM2:
  1011  000019                     ?_getCNY70Value:
  1012                           	opt stack 0
  1013  000019                     ?___awmod:
  1014                           	opt stack 0
  1015  000019                     ?___ftpack:
  1016                           	opt stack 0
  1017  000019                     ?___ftneg:
  1018                           	opt stack 0
  1019  000019                     ?__tdiv_to_l_:
  1020                           	opt stack 0
  1021  000019                     ?__div_to_l_:
  1022                           	opt stack 0
  1023  000019                     ?___lldiv:
  1024                           	opt stack 0
  1025  000019                     Lcd_Port@a:
  1026                           	opt stack 0
  1027  000019                     OpenPWM1@period:
  1028                           	opt stack 0
  1029  000019                     WriteUSART@data:
  1030                           	opt stack 0
  1031  000019                     clrBufferUSART@i:
  1032                           	opt stack 0
  1033  000019                     Pause_ms@x:
  1034                           	opt stack 0
  1035  000019                     SetDCPWM1@dutycycle:
  1036                           	opt stack 0
  1037  000019                     SetDCPWM2@dutycycle:
  1038                           	opt stack 0
  1039  000019                     OpenUSART@spbrg:
  1040                           	opt stack 0
  1041  000019                     ___awmod@dividend:
  1042                           	opt stack 0
  1043  000019                     __div_to_l_@f1:
  1044                           	opt stack 0
  1045  000019                     ___ftpack@arg:
  1046                           	opt stack 0
  1047  000019                     __tdiv_to_l_@f1:
  1048                           	opt stack 0
  1049  000019                     ___ftge@ff1:
  1050                           	opt stack 0
  1051  000019                     ___ftneg@f1:
  1052                           	opt stack 0
  1053  000019                     ___lldiv@dividend:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x18
  1057  000019                     	ds	1
  1058  00001A                     ??_Lcd_Cmd:
  1059  00001A                     putcTxU1@character:
  1060                           	opt stack 0
  1061  00001A                     Lcd_Write_Char@temp:
  1062                           	opt stack 0
  1063  00001A                     PWM_init1@period:
  1064                           	opt stack 0
  1065  00001A                     OpenPWM2@period:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x19
  1069  00001A                     	ds	1
  1070  00001B                     ??_OpenUSART:
  1071  00001B                     ??_SetDCPWM1:
  1072  00001B                     ??_SetDCPWM2:
  1073  00001B                     ??_Pause_ms:
  1074  00001B                     Lcd_Cmd@a:
  1075                           	opt stack 0
  1076  00001B                     Lcd_Write_Char@y:
  1077                           	opt stack 0
  1078  00001B                     OpenPWM2@ccp2mx:
  1079                           	opt stack 0
  1080  00001B                     putSTRINGU1@dato:
  1081                           	opt stack 0
  1082  00001B                     ___awmod@divisor:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1A
  1086  00001B                     	ds	1
  1087  00001C                     ??_Lcd_Init:
  1088  00001C                     Lcd_Set_Cursor@b:
  1089                           	opt stack 0
  1090  00001C                     Lcd_Write_Char@a:
  1091                           	opt stack 0
  1092  00001C                     PWM_init2@period:
  1093                           	opt stack 0
  1094  00001C                     ___ftpack@exp:
  1095                           	opt stack 0
  1096  00001C                     Pause_ms@i:
  1097                           	opt stack 0
  1098  00001C                     __div_to_l_@f2:
  1099                           	opt stack 0
  1100  00001C                     __tdiv_to_l_@f2:
  1101                           	opt stack 0
  1102  00001C                     ___ftge@ff2:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x1B
  1106  00001C                     	ds	1
  1107  00001D                     Lcd_Set_Cursor@a:
  1108                           	opt stack 0
  1109  00001D                     ___awmod@counter:
  1110                           	opt stack 0
  1111  00001D                     ___ftpack@sign:
  1112                           	opt stack 0
  1113  00001D                     putSTRINGU1@total:
  1114                           	opt stack 0
  1115  00001D                     Lcd_Write_String@a:
  1116                           	opt stack 0
  1117  00001D                     SetDCPWM1@DCycle:
  1118                           	opt stack 0
  1119  00001D                     SetDCPWM2@DCycle:
  1120                           	opt stack 0
  1121  00001D                     ___lldiv@divisor:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1C
  1125  00001D                     	ds	1
  1126  00001E                     ??___ftpack:
  1127  00001E                     Pause_seg@x:
  1128                           	opt stack 0
  1129  00001E                     Lcd_Set_Cursor@z:
  1130                           	opt stack 0
  1131  00001E                     OpenUSART@config:
  1132                           	opt stack 0
  1133  00001E                     ___awmod@sign:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x1D
  1137  00001E                     	ds	1
  1138  00001F                     ??_putSTRINGU1:
  1139  00001F                     ??_Lcd_Write_String:
  1140  00001F                     ??__tdiv_to_l_:
  1141  00001F                     ??__div_to_l_:
  1142  00001F                     ??___ftge:
  1143  00001F                     ?___awdiv:
  1144                           	opt stack 0
  1145  00001F                     Pause_seg@i:
  1146                           	opt stack 0
  1147  00001F                     UART1_Init@bdr:
  1148                           	opt stack 0
  1149  00001F                     Lcd_Set_Cursor@y:
  1150                           	opt stack 0
  1151  00001F                     ___awdiv@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x1E
  1155  00001F                     	ds	1
  1156  000020                     Lcd_Set_Cursor@temp:
  1157                           	opt stack 0
  1158  000020                     putcBluetoothString@a:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x1F
  1162  000020                     	ds	1
  1163  000021                     ?___lbtoft:
  1164                           	opt stack 0
  1165  000021                     ?___lltoft:
  1166                           	opt stack 0
  1167  000021                     putSTRINGU1@last:
  1168                           	opt stack 0
  1169  000021                     Lcd_Write_String@i:
  1170                           	opt stack 0
  1171  000021                     ___awdiv@divisor:
  1172                           	opt stack 0
  1173  000021                     ___lldiv@quotient:
  1174                           	opt stack 0
  1175  000021                     ___lltoft@c:
  1176                           	opt stack 0
  1177                           
  1178                           ; 4 bytes @ 0x20
  1179  000021                     	ds	1
  1180  000022                     ??_putcBluetoothString:
  1181  000022                     putSTRINGU1@cont:
  1182                           	opt stack 0
  1183  000022                     __tdiv_to_l_@quot:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x21
  1187  000022                     	ds	1
  1188  000023                     ___awdiv@counter:
  1189                           	opt stack 0
  1190  000023                     SendBlueToothCommand@command:
  1191                           	opt stack 0
  1192  000023                     __div_to_l_@quot:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x22
  1196  000023                     	ds	1
  1197  000024                     ___awdiv@sign:
  1198                           	opt stack 0
  1199  000024                     ___lbtoft@c:
  1200                           	opt stack 0
  1201  000024                     putcBluetoothString@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x23
  1205  000024                     	ds	1
  1206  000025                     ??___lltoft:
  1207  000025                     ___lldiv@counter:
  1208                           	opt stack 0
  1209  000025                     SendBlueToothCommand@total:
  1210                           	opt stack 0
  1211  000025                     ___awdiv@quotient:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x24
  1215  000025                     	ds	1
  1216  000026                     ?___llmod:
  1217                           	opt stack 0
  1218  000026                     __tdiv_to_l_@cntr:
  1219                           	opt stack 0
  1220  000026                     ___llmod@dividend:
  1221                           	opt stack 0
  1222                           
  1223                           ; 4 bytes @ 0x25
  1224  000026                     	ds	1
  1225  000027                     ??_Inicializa_Driveby:
  1226  000027                     ?___wmul:
  1227                           	opt stack 0
  1228  000027                     __div_to_l_@cntr:
  1229                           	opt stack 0
  1230  000027                     __tdiv_to_l_@exp1:
  1231                           	opt stack 0
  1232  000027                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x26
  1236  000027                     	ds	1
  1237  000028                     __div_to_l_@exp1:
  1238                           	opt stack 0
  1239  000028                     Inicializa_Driveby@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x27
  1243  000028                     	ds	1
  1244  000029                     ___lltoft@exp:
  1245                           	opt stack 0
  1246  000029                     ___wmul@multiplicand:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x28
  1250  000029                     	ds	1
  1251  00002A                     ___llmod@divisor:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x29
  1255  00002A                     	ds	1
  1256  00002B                     ___wmul@product:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2A
  1260  00002B                     	ds	2
  1261  00002D                     ??___ftmul:
  1262                           
  1263                           ; 0 bytes @ 0x2C
  1264  00002D                     	ds	1
  1265  00002E                     ___llmod@counter:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x2D
  1269  00002E                     	ds	2
  1270  000030                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 0 bytes @ 0x2F
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 122 in file "robot.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2  372[COMRAM] int 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1299 ;;      Params:         0       0       0       0       0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   10
  1305 ;; This function calls:
  1306 ;;		_Comando_Tablet
  1307 ;;		_Inicializa_Driveby
  1308 ;;		_Lcd_Clear
  1309 ;;		_Lcd_Init
  1310 ;;		_Lcd_Set_Cursor
  1311 ;;		_Lcd_Write_String
  1312 ;;		_UART1_Init
  1313 ;;		_clrBufferUSART
  1314 ;; This function is called by:
  1315 ;;		Startup code after reset
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319                           	psect	text0
  1320  001D5A                     __ptext0:
  1321                           	opt stack 0
  1322  001D5A                     _main:
  1323                           	opt stack 21
  1324                           
  1325                           ;robot.c: 124: INTCON =0X00;
  1326                           
  1327                           ;incstack = 0
  1328  001D5A  0E00               	movlw	0
  1329  001D5C  6EF2               	movwf	intcon,c	;volatile
  1330                           
  1331                           ;robot.c: 125: TRISD = 0x00;
  1332  001D5E  0E00               	movlw	0
  1333  001D60  6E95               	movwf	3989,c	;volatile
  1334                           
  1335                           ;robot.c: 126: TRISE = 0x00;
  1336  001D62  0E00               	movlw	0
  1337  001D64  6E96               	movwf	3990,c	;volatile
  1338                           
  1339                           ;robot.c: 127: PORTEbits.RE1=0;
  1340  001D66  9284               	bcf	3972,1,c	;volatile
  1341                           
  1342                           ;robot.c: 128: ADCON1bits.PCFG=0b1111;
  1343  001D68  80C1               	bsf	4033,0,c	;volatile
  1344  001D6A  82C1               	bsf	4033,1,c	;volatile
  1345  001D6C  84C1               	bsf	4033,2,c	;volatile
  1346  001D6E  86C1               	bsf	4033,3,c	;volatile
  1347                           
  1348                           ;robot.c: 129: Lcd_Init();
  1349  001D70  EC4D  F011         	call	_Lcd_Init	;wreg free
  1350                           
  1351                           ;robot.c: 130: Lcd_Clear();
  1352  001D74  ECCF  F014         	call	_Lcd_Clear	;wreg free
  1353                           
  1354                           ;robot.c: 131: Lcd_Set_Cursor(1,1);
  1355  001D78  0E01               	movlw	1
  1356  001D7A  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1357  001D7C  0E01               	movlw	1
  1358  001D7E  EC50  F012         	call	_Lcd_Set_Cursor
  1359                           
  1360                           ;robot.c: 132: Lcd_Write_String("Inicio");
  1361  001D82  0E7F               	movlw	high STR_20
  1362  001D84  6E1E               	movwf	Lcd_Write_String@a+1,c
  1363  001D86  0EEC               	movlw	low STR_20
  1364  001D88  6E1D               	movwf	Lcd_Write_String@a,c
  1365  001D8A  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  1366                           
  1367                           ;robot.c: 133: Inicializa_Driveby();
  1368  001D8E  ECF6  F00C         	call	_Inicializa_Driveby	;wreg free
  1369                           
  1370                           ;robot.c: 134: PORTAbits.RA2 = 1;
  1371  001D92  8480               	bsf	3968,2,c	;volatile
  1372  001D94                     l5871:
  1373                           
  1374                           ;robot.c: 138: {
  1375                           ;robot.c: 141: if (cleanBfer == 1) {
  1376  001D94  043E               	decf	_cleanBfer,w,c
  1377  001D96  A4D8               	btfss	status,2,c
  1378  001D98  D004               	goto	l5877
  1379                           
  1380                           ;robot.c: 142: clrBufferUSART();
  1381  001D9A  EC7B  F013         	call	_clrBufferUSART	;wreg free
  1382                           
  1383                           ;robot.c: 143: cleanBfer = 0;
  1384  001D9E  0E00               	movlw	0
  1385  001DA0  6E3E               	movwf	_cleanBfer,c
  1386  001DA2                     l5877:
  1387                           
  1388                           ;robot.c: 144: }
  1389                           ;robot.c: 145: if (FinComandT == 1) {
  1390  001DA2  0437               	decf	_FinComandT,w,c
  1391  001DA4  A4D8               	btfss	status,2,c
  1392  001DA6  D01A               	goto	l5897
  1393                           
  1394                           ;robot.c: 146: Lcd_Clear();
  1395  001DA8  ECCF  F014         	call	_Lcd_Clear	;wreg free
  1396                           
  1397                           ;robot.c: 147: Lcd_Set_Cursor(2,1);
  1398  001DAC  0E01               	movlw	1
  1399  001DAE  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1400  001DB0  0E02               	movlw	2
  1401  001DB2  EC50  F012         	call	_Lcd_Set_Cursor
  1402                           
  1403                           ;robot.c: 148: Lcd_Write_String("CMD TABLET");
  1404  001DB6  0E7F               	movlw	high STR_21
  1405  001DB8  6E1E               	movwf	Lcd_Write_String@a+1,c
  1406  001DBA  0EC5               	movlw	low STR_21
  1407  001DBC  6E1D               	movwf	Lcd_Write_String@a,c
  1408  001DBE  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  1409                           
  1410                           ;robot.c: 149: FinComandT = 0;
  1411  001DC2  0E00               	movlw	0
  1412  001DC4  6E37               	movwf	_FinComandT,c
  1413                           
  1414                           ;robot.c: 150: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1415  001DC6  0E4F               	movlw	79
  1416  001DC8  16AB               	andwf	4011,f,c	;volatile
  1417  001DCA  9AAC               	bcf	4012,5,c	;volatile
  1418  001DCC  0ECF               	movlw	207
  1419  001DCE  169D               	andwf	3997,f,c	;volatile
  1420                           
  1421                           ;robot.c: 151: Comando_Tablet();
  1422  001DD0  ECC0  F00A         	call	_Comando_Tablet	;wreg free
  1423                           
  1424                           ;robot.c: 152: UART1_Init(51);
  1425  001DD4  0E33               	movlw	51
  1426  001DD6  ECC0  F014         	call	_UART1_Init
  1427                           
  1428                           ;robot.c: 154: }
  1429  001DDA  D7DC               	goto	l5871
  1430  001DDC                     l5897:
  1431                           
  1432                           ;robot.c: 155: else if (FinComandB == 1) {
  1433  001DDC  0436               	decf	_FinComandB,w,c
  1434  001DDE  A4D8               	btfss	status,2,c
  1435  001DE0  D7D9               	goto	l5871
  1436                           
  1437                           ;robot.c: 160: FinComandB = 0;
  1438  001DE2  0E00               	movlw	0
  1439  001DE4  6E36               	movwf	_FinComandB,c
  1440                           
  1441                           ;robot.c: 161: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  1442  001DE6  0E4F               	movlw	79
  1443  001DE8  16AB               	andwf	4011,f,c	;volatile
  1444  001DEA  9AAC               	bcf	4012,5,c	;volatile
  1445  001DEC  0ECF               	movlw	207
  1446  001DEE  169D               	andwf	3997,f,c	;volatile
  1447  001DF0  D7D1               	goto	l5871
  1448  001DF2                     __end_of_main:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           intcon	equ	0xFF2
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           status	equ	0xFD8
  1460                           
  1461 ;; *************** function _Lcd_Init *****************
  1462 ;; Defined at:
  1463 ;;		line 57 in file "lcd.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;		None               void
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1477 ;;      Params:         0       0       0       0       0       0       0       0       0
  1478 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1479 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1480 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1481 ;;Total ram usage:        1 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    6
  1484 ;; This function calls:
  1485 ;;		_Lcd_Cmd
  1486 ;;		_Lcd_Port
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text1
  1493  00229A                     __ptext1:
  1494                           	opt stack 0
  1495  00229A                     _Lcd_Init:
  1496                           	opt stack 24
  1497                           
  1498                           ;lcd.c: 58: Lcd_Port(0x00);
  1499                           
  1500                           ;incstack = 0
  1501  00229A  0E00               	movlw	0
  1502  00229C  ECE8  F013         	call	_Lcd_Port
  1503                           
  1504                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
  1505  0022A0  0E1A               	movlw	26
  1506  0022A2  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1507  0022A4  0EF8               	movlw	248
  1508  0022A6                     u6897:
  1509  0022A6  2EE8               	decfsz	wreg,f,c
  1510  0022A8  D7FE               	goto	u6897
  1511  0022AA  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1512  0022AC  D7FC               	goto	u6897
  1513  0022AE  D000               	nop2	
  1514                           
  1515                           ;lcd.c: 60: Lcd_Cmd(0x03);
  1516  0022B0  0E03               	movlw	3
  1517  0022B2  EC4C  F014         	call	_Lcd_Cmd
  1518                           
  1519                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1520  0022B6  0E07               	movlw	7
  1521  0022B8  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1522  0022BA  0E7D               	movlw	125
  1523  0022BC                     u6907:
  1524  0022BC  2EE8               	decfsz	wreg,f,c
  1525  0022BE  D7FE               	goto	u6907
  1526  0022C0  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1527  0022C2  D7FC               	goto	u6907
  1528  0022C4  F000               	nop	
  1529                           
  1530                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1531  0022C6  0E03               	movlw	3
  1532  0022C8  EC4C  F014         	call	_Lcd_Cmd
  1533                           
  1534                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1535  0022CC  0E0F               	movlw	15
  1536  0022CE  6E1C               	movwf	??_Lcd_Init& (0+255),c
  1537  0022D0  0E48               	movlw	72
  1538  0022D2                     u6917:
  1539  0022D2  2EE8               	decfsz	wreg,f,c
  1540  0022D4  D7FE               	goto	u6917
  1541  0022D6  2E1C               	decfsz	??_Lcd_Init& (0+255),f,c
  1542  0022D8  D7FC               	goto	u6917
  1543                           
  1544                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1545  0022DA  0E03               	movlw	3
  1546  0022DC  EC4C  F014         	call	_Lcd_Cmd
  1547                           
  1548                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1549  0022E0  0E02               	movlw	2
  1550  0022E2  EC4C  F014         	call	_Lcd_Cmd
  1551                           
  1552                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1553  0022E6  0E02               	movlw	2
  1554  0022E8  EC4C  F014         	call	_Lcd_Cmd
  1555                           
  1556                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1557  0022EC  0E08               	movlw	8
  1558  0022EE  EC4C  F014         	call	_Lcd_Cmd
  1559                           
  1560                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1561  0022F2  0E00               	movlw	0
  1562  0022F4  EC4C  F014         	call	_Lcd_Cmd
  1563                           
  1564                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1565  0022F8  0E0C               	movlw	12
  1566  0022FA  EC4C  F014         	call	_Lcd_Cmd
  1567                           
  1568                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1569  0022FE  0E00               	movlw	0
  1570  002300  EC4C  F014         	call	_Lcd_Cmd
  1571                           
  1572                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1573  002304  0E06               	movlw	6
  1574  002306  EC4C  F014         	call	_Lcd_Cmd
  1575  00230A  0012               	return	
  1576  00230C                     __end_of_Lcd_Init:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1l	equ	0xFE1
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _Inicializa_Driveby *****************
  1590 ;; Defined at:
  1591 ;;		line 62 in file "Funciones_Db.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;		None
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  i               2   39[COMRAM] int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1605 ;;      Params:         0       0       0       0       0       0       0       0       0
  1606 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1607 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1608 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1609 ;;Total ram usage:        3 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    9
  1612 ;; This function calls:
  1613 ;;		_BT_Init
  1614 ;;		_Lcd_Clear
  1615 ;;		_Lcd_Set_Cursor
  1616 ;;		_Lcd_Write_String
  1617 ;;		_Pause_seg
  1618 ;;		_clrBufferUSART
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text2
  1625  0019EC                     __ptext2:
  1626                           	opt stack 0
  1627  0019EC                     _Inicializa_Driveby:
  1628                           	opt stack 21
  1629                           
  1630                           ;Funciones_Db.c: 63: TRISA = TRISB = TRISC = TRISD = 0;
  1631                           
  1632                           ;incstack = 0
  1633  0019EC  0E00               	movlw	0
  1634  0019EE  6E95               	movwf	3989,c	;volatile
  1635  0019F0  CF95 FF94          	movff	3989,3988	;volatile
  1636  0019F4  CF94 FF93          	movff	3988,3987	;volatile
  1637  0019F8  CF93 FF92          	movff	3987,3986	;volatile
  1638                           
  1639                           ;Funciones_Db.c: 64: INTCON = 0b11000000;
  1640  0019FC  0EC0               	movlw	192
  1641  0019FE  6EF2               	movwf	intcon,c	;volatile
  1642                           
  1643                           ;Funciones_Db.c: 67: int i = 0;
  1644  001A00  0E00               	movlw	0
  1645  001A02  6E29               	movwf	Inicializa_Driveby@i+1,c
  1646  001A04  0E00               	movlw	0
  1647  001A06  6E28               	movwf	Inicializa_Driveby@i,c
  1648                           
  1649                           ;Funciones_Db.c: 68: _delay((unsigned long)((40)*(4000000/4000.0)));
  1650  001A08  0E34               	movlw	52
  1651  001A0A  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1652  001A0C  0EF2               	movlw	242
  1653  001A0E                     u6927:
  1654  001A0E  2EE8               	decfsz	wreg,f,c
  1655  001A10  D7FE               	goto	u6927
  1656  001A12  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1657  001A14  D7FC               	goto	u6927
  1658                           
  1659                           ;Funciones_Db.c: 69: OSCCONbits.IRCF = 0b111;
  1660  001A16  88D3               	bsf	4051,4,c	;volatile
  1661  001A18  8AD3               	bsf	4051,5,c	;volatile
  1662  001A1A  8CD3               	bsf	4051,6,c	;volatile
  1663                           
  1664                           ;Funciones_Db.c: 74: TRISA = 0;
  1665  001A1C  0E00               	movlw	0
  1666  001A1E  6E92               	movwf	3986,c	;volatile
  1667                           
  1668                           ;Funciones_Db.c: 75: PORTA = 0;
  1669  001A20  0E00               	movlw	0
  1670  001A22  6E80               	movwf	3968,c	;volatile
  1671                           
  1672                           ;Funciones_Db.c: 76: TRISCbits.TRISC7 = 1;
  1673  001A24  8E94               	bsf	3988,7,c	;volatile
  1674                           
  1675                           ;Funciones_Db.c: 77: TRISCbits.TRISC6 = 0;
  1676  001A26  9C94               	bcf	3988,6,c	;volatile
  1677                           
  1678                           ;Funciones_Db.c: 78: for (i = 1; i <= 50; i++)
  1679  001A28  0E00               	movlw	0
  1680  001A2A  6E29               	movwf	Inicializa_Driveby@i+1,c
  1681  001A2C  0E01               	movlw	1
  1682  001A2E  6E28               	movwf	Inicializa_Driveby@i,c
  1683  001A30  5029               	movf	Inicializa_Driveby@i+1,w,c
  1684  001A32  0A80               	xorlw	128
  1685  001A34  0F80               	addlw	-128
  1686  001A36  0E33               	movlw	51
  1687  001A38  B4D8               	btfsc	status,2,c
  1688  001A3A  5C28               	subwf	Inicializa_Driveby@i,w,c
  1689  001A3C  B0D8               	btfsc	status,0,c
  1690  001A3E  D00B               	goto	l5699
  1691                           
  1692                           ;Funciones_Db.c: 79: _delay((unsigned long)((20)*(4000000/4000.0)));
  1693  001A40  0E1A               	movlw	26
  1694  001A42  6E27               	movwf	??_Inicializa_Driveby& (0+255),c
  1695  001A44  0EF8               	movlw	248
  1696  001A46                     u6937:
  1697  001A46  2EE8               	decfsz	wreg,f,c
  1698  001A48  D7FE               	goto	u6937
  1699  001A4A  2E27               	decfsz	??_Inicializa_Driveby& (0+255),f,c
  1700  001A4C  D7FC               	goto	u6937
  1701  001A4E  D000               	nop2	
  1702  001A50  4A28               	infsnz	Inicializa_Driveby@i,f,c
  1703  001A52  2A29               	incf	Inicializa_Driveby@i+1,f,c
  1704  001A54  D7ED               	goto	L1
  1705  001A56                     l5699:
  1706                           
  1707                           ;Funciones_Db.c: 80: PORTE = 0;
  1708  001A56  0E00               	movlw	0
  1709  001A58  6E84               	movwf	3972,c	;volatile
  1710                           
  1711                           ;Funciones_Db.c: 81: PORTB = 0;
  1712  001A5A  0E00               	movlw	0
  1713  001A5C  6E81               	movwf	3969,c	;volatile
  1714                           
  1715                           ;Funciones_Db.c: 82: TRISBbits.TRISB0 = 1;
  1716  001A5E  8093               	bsf	3987,0,c	;volatile
  1717                           
  1718                           ;Funciones_Db.c: 83: TRISBbits.TRISB1 = 1;
  1719  001A60  8293               	bsf	3987,1,c	;volatile
  1720                           
  1721                           ;Funciones_Db.c: 84: TRISBbits.TRISB2 = 1;
  1722  001A62  8493               	bsf	3987,2,c	;volatile
  1723                           
  1724                           ;Funciones_Db.c: 85: TRISBbits.TRISB3 = 1;
  1725  001A64  8693               	bsf	3987,3,c	;volatile
  1726                           
  1727                           ;Funciones_Db.c: 86: TRISBbits.TRISB4 = 1;
  1728  001A66  8893               	bsf	3987,4,c	;volatile
  1729                           
  1730                           ;Funciones_Db.c: 87: Lcd_Clear();
  1731  001A68  ECCF  F014         	call	_Lcd_Clear	;wreg free
  1732                           
  1733                           ;Funciones_Db.c: 88: Lcd_Set_Cursor(2, 1);
  1734  001A6C  0E01               	movlw	1
  1735  001A6E  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1736  001A70  0E02               	movlw	2
  1737  001A72  EC50  F012         	call	_Lcd_Set_Cursor
  1738                           
  1739                           ;Funciones_Db.c: 89: Lcd_Write_String("INICIO");
  1740  001A76  0E7F               	movlw	high STR_10
  1741  001A78  6E1E               	movwf	Lcd_Write_String@a+1,c
  1742  001A7A  0EF3               	movlw	low STR_10
  1743  001A7C  6E1D               	movwf	Lcd_Write_String@a,c
  1744  001A7E  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  1745                           
  1746                           ;Funciones_Db.c: 91: BT_Init();
  1747  001A82  EC08  F00E         	call	_BT_Init	;wreg free
  1748                           
  1749                           ;Funciones_Db.c: 92: Lcd_Clear();
  1750  001A86  ECCF  F014         	call	_Lcd_Clear	;wreg free
  1751                           
  1752                           ;Funciones_Db.c: 93: Lcd_Set_Cursor(1, 1);
  1753  001A8A  0E01               	movlw	1
  1754  001A8C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  1755  001A8E  0E01               	movlw	1
  1756  001A90  EC50  F012         	call	_Lcd_Set_Cursor
  1757                           
  1758                           ;Funciones_Db.c: 94: Lcd_Write_String("BT INICIALIZADO");
  1759  001A94  0E7F               	movlw	high STR_11
  1760  001A96  6E1E               	movwf	Lcd_Write_String@a+1,c
  1761  001A98  0E55               	movlw	low STR_11
  1762  001A9A  6E1D               	movwf	Lcd_Write_String@a,c
  1763  001A9C  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  1764                           
  1765                           ;Funciones_Db.c: 96: Pause_seg(7);
  1766  001AA0  0E07               	movlw	7
  1767  001AA2  ECC5  F012         	call	_Pause_seg
  1768                           
  1769                           ;Funciones_Db.c: 97: cad = 0;
  1770  001AA6  0E00               	movlw	0
  1771  001AA8  6E3D               	movwf	_cad,c
  1772                           
  1773                           ;Funciones_Db.c: 98: clrBufferUSART();
  1774  001AAA  EC7B  F013         	call	_clrBufferUSART	;wreg free
  1775                           
  1776                           ;Funciones_Db.c: 99: return;
  1777  001AAE  0012               	return	
  1778  001AB0                     __end_of_Inicializa_Driveby:
  1779                           	opt stack 0
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _BT_Init *****************
  1792 ;; Defined at:
  1793 ;;		line 16 in file "Bluetooth.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  nameBT         18    0[BANK0 ] unsigned char [18]
  1798 ;; Return value:  Size  Location     Type
  1799 ;;		None               void
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1807 ;;      Params:         0       0       0       0       0       0       0       0       0
  1808 ;;      Locals:         0      18       0       0       0       0       0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1810 ;;      Totals:         0      18       0       0       0       0       0       0       0
  1811 ;;Total ram usage:       18 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    8
  1814 ;; This function calls:
  1815 ;;		_Pause_seg
  1816 ;;		_SendBlueToothCommand
  1817 ;;		_UART1_Init
  1818 ;; This function is called by:
  1819 ;;		_Inicializa_Driveby
  1820 ;;		_EstadoBluetooth
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text3
  1825  001C10                     __ptext3:
  1826                           	opt stack 0
  1827  001C10                     _BT_Init:
  1828                           	opt stack 21
  1829                           
  1830                           ;Bluetooth.c: 18: UART1_Init(51);
  1831                           
  1832                           ;incstack = 0
  1833  001C10  0E33               	movlw	51
  1834  001C12  ECC0  F014         	call	_UART1_Init
  1835                           
  1836                           ;Bluetooth.c: 21: Pause_seg(1);
  1837  001C16  0E01               	movlw	1
  1838  001C18  ECC5  F012         	call	_Pause_seg
  1839                           
  1840                           ;Bluetooth.c: 22: char nameBT[18] = {
  1841                           ;Bluetooth.c: 23: "AT+NAME=robot\r\n\0"
  1842                           ;Bluetooth.c: 24: };
  1843  001C1C  EE20  F0EC         	lfsr	2,BT_Init@F5669
  1844  001C20  EE10  F060         	lfsr	1,BT_Init@nameBT
  1845  001C24  0E12               	movlw	18
  1846  001C26                     u6261:
  1847  001C26  CFDE FFE6          	movff	postinc2,postinc1
  1848  001C2A  2EE8               	decfsz	wreg,f,c
  1849  001C2C  D7FC               	goto	u6261
  1850                           
  1851                           ;Bluetooth.c: 27: SendBlueToothCommand("AT+ROLE=0\r\n", 11);
  1852  001C2E  0E7F               	movlw	high STR_1
  1853  001C30  6E24               	movwf	SendBlueToothCommand@command+1,c
  1854  001C32  0EB9               	movlw	low STR_1
  1855  001C34  6E23               	movwf	SendBlueToothCommand@command,c
  1856  001C36  0E00               	movlw	0
  1857  001C38  6E26               	movwf	SendBlueToothCommand@total+1,c
  1858  001C3A  0E0B               	movlw	11
  1859  001C3C  6E25               	movwf	SendBlueToothCommand@total,c
  1860  001C3E  EC99  F014         	call	_SendBlueToothCommand	;wreg free
  1861                           
  1862                           ;Bluetooth.c: 29: Pause_seg(1);
  1863  001C42  0E01               	movlw	1
  1864  001C44  ECC5  F012         	call	_Pause_seg
  1865                           
  1866                           ;Bluetooth.c: 32: SendBlueToothCommand((const char * ) nameBT, sizeof(nameBT));
  1867  001C48  0100               	movlb	0	; () banked
  1868  001C4A  0E00               	movlw	high BT_Init@nameBT
  1869  001C4C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1870  001C4E  0100               	movlb	0	; () banked
  1871  001C50  0E60               	movlw	low BT_Init@nameBT
  1872  001C52  6E23               	movwf	SendBlueToothCommand@command,c
  1873  001C54  0E00               	movlw	0
  1874  001C56  6E26               	movwf	SendBlueToothCommand@total+1,c
  1875  001C58  0E12               	movlw	18
  1876  001C5A  6E25               	movwf	SendBlueToothCommand@total,c
  1877  001C5C  EC99  F014         	call	_SendBlueToothCommand	;wreg free
  1878                           
  1879                           ;Bluetooth.c: 33: Pause_seg(2);
  1880  001C60  0E02               	movlw	2
  1881  001C62  ECC5  F012         	call	_Pause_seg
  1882                           
  1883                           ;Bluetooth.c: 35: SendBlueToothCommand("AT+PSWD=0000\r\n", 14);
  1884  001C66  0E7F               	movlw	high STR_2
  1885  001C68  6E24               	movwf	SendBlueToothCommand@command+1,c
  1886  001C6A  0E65               	movlw	low STR_2
  1887  001C6C  6E23               	movwf	SendBlueToothCommand@command,c
  1888  001C6E  0E00               	movlw	0
  1889  001C70  6E26               	movwf	SendBlueToothCommand@total+1,c
  1890  001C72  0E0E               	movlw	14
  1891  001C74  6E25               	movwf	SendBlueToothCommand@total,c
  1892  001C76  EC99  F014         	call	_SendBlueToothCommand	;wreg free
  1893                           
  1894                           ;Bluetooth.c: 36: Pause_seg(2);
  1895  001C7A  0E02               	movlw	2
  1896  001C7C  ECC5  F012         	call	_Pause_seg
  1897                           
  1898                           ;Bluetooth.c: 40: SendBlueToothCommand("AT+INQ\r\n", 8);
  1899  001C80  0E7F               	movlw	high STR_3
  1900  001C82  6E24               	movwf	SendBlueToothCommand@command+1,c
  1901  001C84  0EDB               	movlw	low STR_3
  1902  001C86  6E23               	movwf	SendBlueToothCommand@command,c
  1903  001C88  0E00               	movlw	0
  1904  001C8A  6E26               	movwf	SendBlueToothCommand@total+1,c
  1905  001C8C  0E08               	movlw	8
  1906  001C8E  6E25               	movwf	SendBlueToothCommand@total,c
  1907  001C90  EC99  F014         	call	_SendBlueToothCommand	;wreg free
  1908                           
  1909                           ;Bluetooth.c: 41: Pause_seg(2);
  1910  001C94  0E02               	movlw	2
  1911  001C96  ECC5  F012         	call	_Pause_seg
  1912                           
  1913                           ;Bluetooth.c: 43: SendBlueToothCommand("AT+INQ\r\n", 8);
  1914  001C9A  0E7F               	movlw	high STR_3
  1915  001C9C  6E24               	movwf	SendBlueToothCommand@command+1,c
  1916  001C9E  0EDB               	movlw	low STR_3
  1917  001CA0  6E23               	movwf	SendBlueToothCommand@command,c
  1918  001CA2  0E00               	movlw	0
  1919  001CA4  6E26               	movwf	SendBlueToothCommand@total+1,c
  1920  001CA6  0E08               	movlw	8
  1921  001CA8  6E25               	movwf	SendBlueToothCommand@total,c
  1922  001CAA  EC99  F014         	call	_SendBlueToothCommand	;wreg free
  1923                           
  1924                           ;Bluetooth.c: 44: Pause_seg(2);
  1925  001CAE  0E02               	movlw	2
  1926  001CB0  ECC5  F012         	call	_Pause_seg
  1927                           
  1928                           ;Bluetooth.c: 45: return;
  1929  001CB4  0012               	return	
  1930  001CB6                     __end_of_BT_Init:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           intcon	equ	0xFF2
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           postinc1	equ	0xFE6
  1940                           postdec1	equ	0xFE5
  1941                           fsr1l	equ	0xFE1
  1942                           postinc2	equ	0xFDE
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _SendBlueToothCommand *****************
  1946 ;; Defined at:
  1947 ;;		line 48 in file "Bluetooth.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  command         2   34[COMRAM] PTR const unsigned char 
  1950 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  1951 ;;		 -> BT_Init@nameBT(18), 
  1952 ;;  total           2   36[COMRAM] unsigned int 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;		None               void
  1957 ;; Registers used:
  1958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1964 ;;      Params:         4       0       0       0       0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1967 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1968 ;;Total ram usage:        4 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    7
  1971 ;; This function calls:
  1972 ;;		_putSTRINGU1
  1973 ;; This function is called by:
  1974 ;;		_BT_Init
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text4
  1979  002932                     __ptext4:
  1980                           	opt stack 0
  1981  002932                     _SendBlueToothCommand:
  1982                           	opt stack 21
  1983                           
  1984                           ;Bluetooth.c: 49: putSTRINGU1(command, total);
  1985                           
  1986                           ;incstack = 0
  1987  002932  C024  F01C         	movff	SendBlueToothCommand@command+1,putSTRINGU1@dato+1
  1988  002936  C023  F01B         	movff	SendBlueToothCommand@command,putSTRINGU1@dato
  1989  00293A  C025  F01D         	movff	SendBlueToothCommand@total,putSTRINGU1@total
  1990  00293E  C026  F01E         	movff	SendBlueToothCommand@total+1,putSTRINGU1@total+1
  1991  002942  ECF9  F00E         	call	_putSTRINGU1	;wreg free
  1992                           
  1993                           ;Bluetooth.c: 50: return;
  1994  002946  0012               	return	
  1995  002948                     __end_of_SendBlueToothCommand:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postinc1	equ	0xFE6
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           postinc2	equ	0xFDE
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _putSTRINGU1 *****************
  2011 ;; Defined at:
  2012 ;;		line 18 in file "UART1.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  dato            2   26[COMRAM] PTR const unsigned char 
  2015 ;;		 -> STR_4(9), STR_3(9), STR_2(15), STR_1(12), 
  2016 ;;		 -> BT_Init@nameBT(18), 
  2017 ;;  total           2   28[COMRAM] unsigned int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  cont            1   33[COMRAM] unsigned char 
  2020 ;;  last            1   32[COMRAM] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         4       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2032 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        8 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    6
  2037 ;; This function calls:
  2038 ;;		_putcTxU1
  2039 ;; This function is called by:
  2040 ;;		_SendBlueToothCommand
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text5
  2045  001DF2                     __ptext5:
  2046                           	opt stack 0
  2047  001DF2                     _putSTRINGU1:
  2048                           	opt stack 21
  2049                           
  2050                           ;UART1.c: 19: unsigned char cont,last;
  2051                           ;UART1.c: 21: for(cont=0,last=0;cont<total;cont++){
  2052                           
  2053                           ;incstack = 0
  2054  001DF2  0E00               	movlw	0
  2055  001DF4  6E22               	movwf	putSTRINGU1@cont,c
  2056  001DF6  0E00               	movlw	0
  2057  001DF8  6E21               	movwf	putSTRINGU1@last,c
  2058  001DFA  D01F               	goto	l4731
  2059  001DFC                     l4725:
  2060                           
  2061                           ;UART1.c: 22: if(dato[cont]!='\0') last=cont;
  2062  001DFC  5022               	movf	putSTRINGU1@cont,w,c
  2063  001DFE  0D01               	mullw	1
  2064  001E00  C01B  F01F         	movff	putSTRINGU1@dato,??_putSTRINGU1
  2065  001E04  C01C  F020         	movff	putSTRINGU1@dato+1,??_putSTRINGU1+1
  2066  001E08  50F3               	movf	prodl,w,c
  2067  001E0A  261F               	addwf	??_putSTRINGU1,f,c
  2068  001E0C  50F4               	movf	prodh,w,c
  2069  001E0E  2220               	addwfc	??_putSTRINGU1+1,f,c
  2070  001E10  C01F  FFF6         	movff	??_putSTRINGU1,tblptrl
  2071  001E14  C020  FFF7         	movff	??_putSTRINGU1+1,tblptrh
  2072  001E18  6AF8               	clrf	tblptru,c
  2073  001E1A  0E07               	movlw	(high __ramtop+-1)
  2074  001E1C  64F7               	cpfsgt	tblptrh,c
  2075  001E1E  D003               	bra	u5277
  2076  001E20  0008               	tblrd		*
  2077  001E22  50F5               	movf	tablat,w,c
  2078  001E24  D005               	bra	u5270
  2079  001E26                     u5277:
  2080  001E26  CFF6 FFE9          	movff	tblptrl,fsr0l
  2081  001E2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2082  001E2E  50EF               	movf	indf0,w,c
  2083  001E30                     u5270:
  2084  001E30  0900               	iorlw	0
  2085  001E32  A4D8               	btfss	status,2,c
  2086  001E34  C022  F021         	movff	putSTRINGU1@cont,putSTRINGU1@last
  2087  001E38  2A22               	incf	putSTRINGU1@cont,f,c
  2088  001E3A                     l4731:
  2089  001E3A  5022               	movf	putSTRINGU1@cont,w,c
  2090  001E3C  6E1F               	movwf	??_putSTRINGU1& (0+255),c
  2091  001E3E  6A20               	clrf	(??_putSTRINGU1+1)& (0+255),c
  2092  001E40  501D               	movf	putSTRINGU1@total,w,c
  2093  001E42  5C1F               	subwf	??_putSTRINGU1,w,c
  2094  001E44  501E               	movf	putSTRINGU1@total+1,w,c
  2095  001E46  5820               	subwfb	??_putSTRINGU1+1,w,c
  2096  001E48  A0D8               	btfss	status,0,c
  2097  001E4A  D7D8               	goto	l4725
  2098                           
  2099                           ;UART1.c: 23: }
  2100                           ;UART1.c: 25: for (cont=0;cont<=last;cont++){
  2101  001E4C  0E00               	movlw	0
  2102  001E4E  6E22               	movwf	putSTRINGU1@cont,c
  2103  001E50  D015               	goto	l4741
  2104  001E52                     l4735:
  2105                           
  2106                           ;UART1.c: 26: putcTxU1(*dato++);
  2107  001E52  C01B  FFF6         	movff	putSTRINGU1@dato,tblptrl
  2108  001E56  C01C  FFF7         	movff	putSTRINGU1@dato+1,tblptrh
  2109  001E5A  6AF8               	clrf	tblptru,c
  2110  001E5C  0E07               	movlw	(high __ramtop+-1)
  2111  001E5E  64F7               	cpfsgt	tblptrh,c
  2112  001E60  D003               	bra	u5307
  2113  001E62  0008               	tblrd		*
  2114  001E64  50F5               	movf	tablat,w,c
  2115  001E66  D005               	bra	u5300
  2116  001E68                     u5307:
  2117  001E68  CFF6 FFE9          	movff	tblptrl,fsr0l
  2118  001E6C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2119  001E70  50EF               	movf	indf0,w,c
  2120  001E72                     u5300:
  2121  001E72  ECC8  F014         	call	_putcTxU1
  2122  001E76  4A1B               	infsnz	putSTRINGU1@dato,f,c
  2123  001E78  2A1C               	incf	putSTRINGU1@dato+1,f,c
  2124  001E7A  2A22               	incf	putSTRINGU1@cont,f,c
  2125  001E7C                     l4741:
  2126  001E7C  5022               	movf	putSTRINGU1@cont,w,c
  2127  001E7E  5C21               	subwf	putSTRINGU1@last,w,c
  2128  001E80  A0D8               	btfss	status,0,c
  2129  001E82  0012               	return	
  2130  001E84  D7E6               	goto	l4735
  2131  001E86                     __end_of_putSTRINGU1:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           indf0	equ	0xFEF
  2141                           postinc0	equ	0xFEE
  2142                           fsr0h	equ	0xFEA
  2143                           fsr0l	equ	0xFE9
  2144                           wreg	equ	0xFE8
  2145                           postinc1	equ	0xFE6
  2146                           postdec1	equ	0xFE5
  2147                           fsr1l	equ	0xFE1
  2148                           postinc2	equ	0xFDE
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _putcTxU1 *****************
  2152 ;; Defined at:
  2153 ;;		line 12 in file "UART1.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  character       1    wreg     unsigned char 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  character       1   25[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0
  2168 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2170 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    5
  2174 ;; This function calls:
  2175 ;;		_WriteUSART
  2176 ;; This function is called by:
  2177 ;;		_putSTRINGU1
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text6
  2182  002990                     __ptext6:
  2183                           	opt stack 0
  2184  002990                     _putcTxU1:
  2185                           	opt stack 21
  2186                           
  2187                           ;incstack = 0
  2188                           ;putcTxU1@character stored from wreg
  2189  002990  6E1A               	movwf	putcTxU1@character,c
  2190                           
  2191                           ;UART1.c: 14: WriteUSART(character);
  2192  002992  501A               	movf	putcTxU1@character,w,c
  2193  002994  ECAE  F014         	call	_WriteUSART
  2194  002998                     l218:
  2195  002998  B2AC               	btfsc	4012,1,c	;volatile
  2196  00299A  0012               	return	
  2197  00299C  D7FD               	goto	l218
  2198  00299E                     __end_of_putcTxU1:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           indf0	equ	0xFEF
  2208                           postinc0	equ	0xFEE
  2209                           fsr0h	equ	0xFEA
  2210                           fsr0l	equ	0xFE9
  2211                           wreg	equ	0xFE8
  2212                           postinc1	equ	0xFE6
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           postinc2	equ	0xFDE
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _Pause_seg *****************
  2219 ;; Defined at:
  2220 ;;		line 18 in file "Retardos.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  x               1    wreg     unsigned char 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  x               1   29[COMRAM] unsigned char 
  2225 ;;  i               1   30[COMRAM] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0
  2236 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2238 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2239 ;;Total ram usage:        2 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    5
  2242 ;; This function calls:
  2243 ;;		_Pause_ms
  2244 ;; This function is called by:
  2245 ;;		_BT_Init
  2246 ;;		_Inicializa_Driveby
  2247 ;;		_EstadoBluetooth
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text7
  2252  00258A                     __ptext7:
  2253                           	opt stack 0
  2254  00258A                     _Pause_seg:
  2255                           	opt stack 24
  2256                           
  2257                           ;incstack = 0
  2258                           ;Pause_seg@x stored from wreg
  2259  00258A  6E1E               	movwf	Pause_seg@x,c
  2260                           
  2261                           ;Retardos.c: 19: unsigned char i=0;
  2262  00258C  0E00               	movlw	0
  2263  00258E  6E1F               	movwf	Pause_seg@i,c
  2264                           
  2265                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  2266  002590  0E00               	movlw	0
  2267  002592  6E1F               	movwf	Pause_seg@i,c
  2268  002594  D019               	goto	l5121
  2269  002596                     l5117:
  2270                           
  2271                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  2272  002596  0E00               	movlw	0
  2273  002598  6E1A               	movwf	Pause_ms@x+1,c
  2274  00259A  0EFA               	movlw	250
  2275  00259C  6E19               	movwf	Pause_ms@x,c
  2276  00259E  ECCF  F013         	call	_Pause_ms	;wreg free
  2277  0025A2  0E00               	movlw	0
  2278  0025A4  6E1A               	movwf	Pause_ms@x+1,c
  2279  0025A6  0EFA               	movlw	250
  2280  0025A8  6E19               	movwf	Pause_ms@x,c
  2281  0025AA  ECCF  F013         	call	_Pause_ms	;wreg free
  2282                           
  2283                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  2284  0025AE  0E00               	movlw	0
  2285  0025B0  6E1A               	movwf	Pause_ms@x+1,c
  2286  0025B2  0EFA               	movlw	250
  2287  0025B4  6E19               	movwf	Pause_ms@x,c
  2288  0025B6  ECCF  F013         	call	_Pause_ms	;wreg free
  2289  0025BA  0E00               	movlw	0
  2290  0025BC  6E1A               	movwf	Pause_ms@x+1,c
  2291  0025BE  0EFA               	movlw	250
  2292  0025C0  6E19               	movwf	Pause_ms@x,c
  2293  0025C2  ECCF  F013         	call	_Pause_ms	;wreg free
  2294  0025C6  2A1F               	incf	Pause_seg@i,f,c
  2295  0025C8                     l5121:
  2296  0025C8  501F               	movf	Pause_seg@i,w,c
  2297  0025CA  5C1E               	subwf	Pause_seg@x,w,c
  2298  0025CC  A0D8               	btfss	status,0,c
  2299  0025CE  0012               	return	
  2300  0025D0  D7E2               	goto	l5117
  2301  0025D2                     __end_of_Pause_seg:
  2302                           	opt stack 0
  2303                           tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           indf0	equ	0xFEF
  2311                           postinc0	equ	0xFEE
  2312                           fsr0h	equ	0xFEA
  2313                           fsr0l	equ	0xFE9
  2314                           wreg	equ	0xFE8
  2315                           postinc1	equ	0xFE6
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           postinc2	equ	0xFDE
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _Pause_ms *****************
  2322 ;; Defined at:
  2323 ;;		line 11 in file "Retardos.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  x               2   24[COMRAM] unsigned int 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  i               2   27[COMRAM] unsigned int 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         2       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        5 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    4
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_Pause_seg
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text8
  2352  00279E                     __ptext8:
  2353                           	opt stack 0
  2354  00279E                     _Pause_ms:
  2355                           	opt stack 24
  2356                           
  2357                           ;Retardos.c: 12: unsigned int i=0;
  2358                           
  2359                           ;incstack = 0
  2360  00279E  0E00               	movlw	0
  2361  0027A0  6E1D               	movwf	Pause_ms@i+1,c
  2362  0027A2  0E00               	movlw	0
  2363  0027A4  6E1C               	movwf	Pause_ms@i,c
  2364                           
  2365                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  2366  0027A6  0E00               	movlw	0
  2367  0027A8  6E1D               	movwf	Pause_ms@i+1,c
  2368  0027AA  0E00               	movlw	0
  2369  0027AC  6E1C               	movwf	Pause_ms@i,c
  2370  0027AE  D009               	goto	l197
  2371  0027B0                     l4745:
  2372                           
  2373                           ;Retardos.c: 14: _delay((unsigned long)((1)*(8000000/4000.0)));
  2374  0027B0  0E03               	movlw	3
  2375  0027B2  6E1B               	movwf	??_Pause_ms& (0+255),c
  2376  0027B4  0E98               	movlw	152
  2377  0027B6                     u6947:
  2378  0027B6  2EE8               	decfsz	wreg,f,c
  2379  0027B8  D7FE               	goto	u6947
  2380  0027BA  2E1B               	decfsz	??_Pause_ms& (0+255),f,c
  2381  0027BC  D7FC               	goto	u6947
  2382  0027BE  4A1C               	infsnz	Pause_ms@i,f,c
  2383  0027C0  2A1D               	incf	Pause_ms@i+1,f,c
  2384  0027C2                     l197:
  2385  0027C2  501C               	movf	Pause_ms@i,w,c
  2386  0027C4  5C19               	subwf	Pause_ms@x,w,c
  2387  0027C6  501D               	movf	Pause_ms@i+1,w,c
  2388  0027C8  581A               	subwfb	Pause_ms@x+1,w,c
  2389  0027CA  A0D8               	btfss	status,0,c
  2390  0027CC  0012               	return	
  2391  0027CE  D7F0               	goto	l4745
  2392  0027D0                     __end_of_Pause_ms:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           intcon	equ	0xFF2
  2401                           indf0	equ	0xFEF
  2402                           postinc0	equ	0xFEE
  2403                           fsr0h	equ	0xFEA
  2404                           fsr0l	equ	0xFE9
  2405                           wreg	equ	0xFE8
  2406                           postinc1	equ	0xFE6
  2407                           postdec1	equ	0xFE5
  2408                           fsr1l	equ	0xFE1
  2409                           postinc2	equ	0xFDE
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _Comando_Tablet *****************
  2413 ;; Defined at:
  2414 ;;		line 104 in file "Funciones_Db.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  sensed          2   22[BANK1 ] int 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0
  2429 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         0       0       2       0       0       0       0       0       0
  2432 ;;Total ram usage:        2 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    9
  2435 ;; This function calls:
  2436 ;;		_Lcd_Clear
  2437 ;;		_Lcd_Set_Cursor
  2438 ;;		_Lcd_Write_Integer
  2439 ;;		_Lcd_Write_String
  2440 ;;		_PWM_DutyCycle1
  2441 ;;		_PWM_DutyCycle2
  2442 ;;		_PWM_init1
  2443 ;;		_PWM_init2
  2444 ;;		_clrBufferUSART
  2445 ;;		_getCNY70Value
  2446 ;;		_putcBluetoothInt
  2447 ;;		_putcBluetoothString
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text9
  2454  001580                     __ptext9:
  2455                           	opt stack 0
  2456  001580                     _Comando_Tablet:
  2457                           	opt stack 21
  2458                           
  2459                           ;Funciones_Db.c: 106: int sensed=0;
  2460                           
  2461                           ;incstack = 0
  2462  001580  0E00               	movlw	0
  2463  001582  0101               	movlb	1	; () banked
  2464  001584  6F71               	movwf	(Comando_Tablet@sensed+1)& (0+255),b
  2465  001586  0E00               	movlw	0
  2466  001588  0101               	movlb	1	; () banked
  2467  00158A  6F70               	movwf	Comando_Tablet@sensed& (0+255),b
  2468                           
  2469                           ;Funciones_Db.c: 107: switch (BluetoothDato[1]) {
  2470  00158C  D085               	goto	l5789
  2471  00158E                     l5735:
  2472                           
  2473                           ; BSR set to: 1
  2474                           ;Funciones_Db.c: 109: Lcd_Clear();
  2475  00158E  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2476                           
  2477                           ;Funciones_Db.c: 110: Lcd_Set_Cursor(1, 1);
  2478  001592  0E01               	movlw	1
  2479  001594  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2480  001596  0E01               	movlw	1
  2481  001598  EC50  F012         	call	_Lcd_Set_Cursor
  2482                           
  2483                           ;Funciones_Db.c: 111: Lcd_Write_String("1");
  2484  00159C  0E7F               	movlw	high STR_12
  2485  00159E  6E1E               	movwf	Lcd_Write_String@a+1,c
  2486  0015A0  0EFA               	movlw	low STR_12
  2487  0015A2  6E1D               	movwf	Lcd_Write_String@a,c
  2488  0015A4  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  2489                           
  2490                           ;Funciones_Db.c: 112: break;
  2491  0015A8  D089               	goto	l5791
  2492  0015AA                     l5741:
  2493                           
  2494                           ;Funciones_Db.c: 114: Lcd_Clear();
  2495  0015AA  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2496                           
  2497                           ;Funciones_Db.c: 115: Lcd_Set_Cursor(1, 1);
  2498  0015AE  0E01               	movlw	1
  2499  0015B0  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2500  0015B2  0E01               	movlw	1
  2501  0015B4  EC50  F012         	call	_Lcd_Set_Cursor
  2502                           
  2503                           ;Funciones_Db.c: 116: Lcd_Write_String("2");
  2504  0015B8  0E7F               	movlw	high (STR_19+16)
  2505  0015BA  6E1E               	movwf	Lcd_Write_String@a+1,c
  2506  0015BC  0E53               	movlw	low (STR_19+16)
  2507  0015BE  6E1D               	movwf	Lcd_Write_String@a,c
  2508  0015C0  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  2509                           
  2510                           ;Funciones_Db.c: 117: break;
  2511  0015C4  D07B               	goto	l5791
  2512  0015C6                     l5747:
  2513                           
  2514                           ;Funciones_Db.c: 120: Lcd_Clear();
  2515  0015C6  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2516                           
  2517                           ;Funciones_Db.c: 121: Lcd_Set_Cursor(1, 1);
  2518  0015CA  0E01               	movlw	1
  2519  0015CC  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2520  0015CE  0E01               	movlw	1
  2521  0015D0  EC50  F012         	call	_Lcd_Set_Cursor
  2522                           
  2523                           ;Funciones_Db.c: 123: Lcd_Write_String("3");
  2524  0015D4  0E7F               	movlw	high STR_14
  2525  0015D6  6E1E               	movwf	Lcd_Write_String@a+1,c
  2526  0015D8  0EFC               	movlw	low STR_14
  2527  0015DA  6E1D               	movwf	Lcd_Write_String@a,c
  2528  0015DC  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  2529                           
  2530                           ;Funciones_Db.c: 124: break;
  2531  0015E0  D06D               	goto	l5791
  2532  0015E2                     l183:
  2533                           
  2534                           ; BSR set to: 1
  2535                           ;Funciones_Db.c: 129: PORTAbits.RA1 = ~ PORTAbits.RA1;
  2536  0015E2  7280               	btg	3968,1,c	;volatile
  2537                           
  2538                           ; BSR set to: 1
  2539                           ;Funciones_Db.c: 130: sensed = getCNY70Value();
  2540  0015E4  EC58  F00D         	call	_getCNY70Value	;wreg free
  2541  0015E8  C019  F170         	movff	?_getCNY70Value,Comando_Tablet@sensed
  2542  0015EC  C01A  F171         	movff	?_getCNY70Value+1,Comando_Tablet@sensed+1
  2543                           
  2544                           ;Funciones_Db.c: 131: Lcd_Clear();
  2545  0015F0  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2546                           
  2547                           ;Funciones_Db.c: 132: Lcd_Set_Cursor(1,1);
  2548  0015F4  0E01               	movlw	1
  2549  0015F6  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2550  0015F8  0E01               	movlw	1
  2551  0015FA  EC50  F012         	call	_Lcd_Set_Cursor
  2552                           
  2553                           ;Funciones_Db.c: 133: Lcd_Write_Integer(sensed);
  2554  0015FE  C170  F0B8         	movff	Comando_Tablet@sensed,Lcd_Write_Integer@a
  2555  001602  C171  F0B9         	movff	Comando_Tablet@sensed+1,Lcd_Write_Integer@a+1
  2556  001606  EC5E  F013         	call	_Lcd_Write_Integer	;wreg free
  2557                           
  2558                           ;Funciones_Db.c: 134: putcBluetoothInt(sensed);
  2559  00160A  C170  F0B8         	movff	Comando_Tablet@sensed,putcBluetoothInt@a
  2560  00160E  C171  F0B9         	movff	Comando_Tablet@sensed+1,putcBluetoothInt@a+1
  2561  001612  ECD3  F00F         	call	_putcBluetoothInt	;wreg free
  2562                           
  2563                           ;Funciones_Db.c: 135: putcBluetoothString("\n");
  2564  001616  0E7F               	movlw	high (STR_2+13)
  2565  001618  6E21               	movwf	putcBluetoothString@a+1,c
  2566  00161A  0E72               	movlw	low (STR_2+13)
  2567  00161C  6E20               	movwf	putcBluetoothString@a,c
  2568  00161E  EC86  F011         	call	_putcBluetoothString	;wreg free
  2569                           
  2570                           ;Funciones_Db.c: 136: break;
  2571  001622  D04C               	goto	l5791
  2572  001624                     l184:
  2573                           
  2574                           ; BSR set to: 1
  2575                           ;Funciones_Db.c: 138: PORTAbits.RA0 = ~ PORTAbits.RA0;
  2576  001624  7080               	btg	3968,0,c	;volatile
  2577                           
  2578                           ; BSR set to: 1
  2579                           ;Funciones_Db.c: 139: Lcd_Clear();
  2580  001626  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2581                           
  2582                           ;Funciones_Db.c: 140: Lcd_Set_Cursor(1, 1);
  2583  00162A  0E01               	movlw	1
  2584  00162C  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2585  00162E  0E01               	movlw	1
  2586  001630  EC50  F012         	call	_Lcd_Set_Cursor
  2587                           
  2588                           ;Funciones_Db.c: 141: Lcd_Write_Integer(BluetoothDato[3]);
  2589  001634  0101               	movlb	1	; () banked
  2590  001636  0100               	movlb	0	; () banked
  2591  001638  C12B  F0B8         	movff	_BluetoothDato+3,Lcd_Write_Integer@a
  2592  00163C  0100               	movlb	0	; () banked
  2593  00163E  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2594  001640  EC5E  F013         	call	_Lcd_Write_Integer	;wreg free
  2595                           
  2596                           ;Funciones_Db.c: 142: Lcd_Set_Cursor(2, 1);
  2597  001644  0E01               	movlw	1
  2598  001646  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2599  001648  0E02               	movlw	2
  2600  00164A  EC50  F012         	call	_Lcd_Set_Cursor
  2601                           
  2602                           ;Funciones_Db.c: 143: Lcd_Write_Integer(BluetoothDato[4]);
  2603  00164E  0101               	movlb	1	; () banked
  2604  001650  0100               	movlb	0	; () banked
  2605  001652  C12C  F0B8         	movff	_BluetoothDato+4,Lcd_Write_Integer@a
  2606  001656  0100               	movlb	0	; () banked
  2607  001658  6BB9               	clrf	(Lcd_Write_Integer@a+1)& (0+255),b
  2608  00165A  EC5E  F013         	call	_Lcd_Write_Integer	;wreg free
  2609                           
  2610                           ;Funciones_Db.c: 144: PWM_init1(0xff);
  2611  00165E  0EFF               	movlw	255
  2612  001660  EC7B  F014         	call	_PWM_init1
  2613                           
  2614                           ;Funciones_Db.c: 145: PWM_init2(0xff);
  2615  001664  0EFF               	movlw	255
  2616  001666  EC6C  F014         	call	_PWM_init2
  2617                           
  2618                           ;Funciones_Db.c: 146: PWM_DutyCycle1(BluetoothDato[3]);
  2619  00166A  0101               	movlb	1	; () banked
  2620  00166C  512B               	movf	(_BluetoothDato+3)& (0+255),w,b
  2621  00166E  EC95  F010         	call	_PWM_DutyCycle1
  2622                           
  2623                           ;Funciones_Db.c: 147: PWM_DutyCycle2(BluetoothDato[4]);
  2624  001672  0101               	movlb	1	; () banked
  2625  001674  512C               	movf	(_BluetoothDato+4)& (0+255),w,b
  2626  001676  EC57  F010         	call	_PWM_DutyCycle2
  2627                           
  2628                           ;Funciones_Db.c: 148: break;
  2629  00167A  D020               	goto	l5791
  2630  00167C                     l5781:
  2631                           
  2632                           ;Funciones_Db.c: 150: Lcd_Clear();
  2633  00167C  ECCF  F014         	call	_Lcd_Clear	;wreg free
  2634                           
  2635                           ;Funciones_Db.c: 151: Lcd_Set_Cursor(1, 1);
  2636  001680  0E01               	movlw	1
  2637  001682  6E1C               	movwf	Lcd_Set_Cursor@b,c
  2638  001684  0E01               	movlw	1
  2639  001686  EC50  F012         	call	_Lcd_Set_Cursor
  2640                           
  2641                           ;Funciones_Db.c: 152: Lcd_Write_String("Default");
  2642  00168A  0E7F               	movlw	high STR_16
  2643  00168C  6E1E               	movwf	Lcd_Write_String@a+1,c
  2644  00168E  0EE4               	movlw	low STR_16
  2645  001690  6E1D               	movwf	Lcd_Write_String@a,c
  2646  001692  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  2647                           
  2648                           ;Funciones_Db.c: 153: break;
  2649  001696  D012               	goto	l5791
  2650  001698                     l5789:
  2651  001698  0101               	movlb	1	; () banked
  2652  00169A  5129               	movf	(_BluetoothDato+1)& (0+255),w,b
  2653                           
  2654                           ; Switch size 1, requested type "space"
  2655                           ; Number of cases is 5, Range of values is 1 to 5
  2656                           ; switch strategies available:
  2657                           ; Name         Instructions Cycles
  2658                           ; simple_byte           16     9 (average)
  2659                           ;	Chosen strategy is simple_byte
  2660  00169C  0A01               	xorlw	1	; case 1
  2661  00169E  B4D8               	btfsc	status,2,c
  2662  0016A0  D776               	goto	l5735
  2663  0016A2  0A03               	xorlw	3	; case 2
  2664  0016A4  B4D8               	btfsc	status,2,c
  2665  0016A6  D781               	goto	l5741
  2666  0016A8  0A01               	xorlw	1	; case 3
  2667  0016AA  B4D8               	btfsc	status,2,c
  2668  0016AC  D78C               	goto	l5747
  2669  0016AE  0A07               	xorlw	7	; case 4
  2670  0016B0  B4D8               	btfsc	status,2,c
  2671  0016B2  D797               	goto	l183
  2672  0016B4  0A01               	xorlw	1	; case 5
  2673  0016B6  B4D8               	btfsc	status,2,c
  2674  0016B8  D7B5               	goto	l184
  2675  0016BA  D7E0               	goto	l5781
  2676  0016BC                     l5791:
  2677                           
  2678                           ;Funciones_Db.c: 155: clrBufferUSART();
  2679  0016BC  EC7B  F013         	call	_clrBufferUSART	;wreg free
  2680                           
  2681                           ;Funciones_Db.c: 156: return;
  2682  0016C0  0012               	return	
  2683  0016C2                     __end_of_Comando_Tablet:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           indf0	equ	0xFEF
  2693                           postinc0	equ	0xFEE
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           postinc1	equ	0xFE6
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           postinc2	equ	0xFDE
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _putcBluetoothString *****************
  2704 ;; Defined at:
  2705 ;;		line 90 in file "Bluetooth.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  a               2   31[COMRAM] PTR unsigned char 
  2708 ;;		 -> STR_15(2), 
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  i               2   35[COMRAM] int 
  2711 ;; Return value:  Size  Location     Type
  2712 ;;		None               void
  2713 ;; Registers used:
  2714 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2720 ;;      Params:         2       0       0       0       0       0       0       0       0
  2721 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2722 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2723 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2724 ;;Total ram usage:        6 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    6
  2727 ;; This function calls:
  2728 ;;		_UART1_Init
  2729 ;;		_WriteUSART
  2730 ;; This function is called by:
  2731 ;;		_Comando_Tablet
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text10
  2736  00230C                     __ptext10:
  2737                           	opt stack 0
  2738  00230C                     _putcBluetoothString:
  2739                           	opt stack 23
  2740                           
  2741                           ;Bluetooth.c: 92: int i;
  2742                           ;Bluetooth.c: 93: UART1_Init(51);
  2743                           
  2744                           ;incstack = 0
  2745  00230C  0E33               	movlw	51
  2746  00230E  ECC0  F014         	call	_UART1_Init
  2747                           
  2748                           ;Bluetooth.c: 95: for (i = 0; a[i] != '\0'; i++){
  2749  002312  0E00               	movlw	0
  2750  002314  6E25               	movwf	putcBluetoothString@i+1,c
  2751  002316  0E00               	movlw	0
  2752  002318  6E24               	movwf	putcBluetoothString@i,c
  2753  00231A  D015               	goto	l5437
  2754  00231C                     l5433:
  2755                           
  2756                           ;Bluetooth.c: 96: WriteUSART(a[i]);
  2757  00231C  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2758  002320  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2759  002324  5024               	movf	putcBluetoothString@i,w,c
  2760  002326  2622               	addwf	??_putcBluetoothString,f,c
  2761  002328  5025               	movf	putcBluetoothString@i+1,w,c
  2762  00232A  2223               	addwfc	??_putcBluetoothString+1,f,c
  2763  00232C  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2764  002330  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2765  002334                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2766  002334  6AF8               	clrf	tblptru,c
  2767  002336                     	endif
  2768  002336                     	if	0	;tblptru may be non-zero
  2769  002336                     	endif
  2770  002336  0008               	tblrd		*
  2771  002338  50F5               	movf	tablat,w,c
  2772  00233A  ECAE  F014         	call	_WriteUSART
  2773  00233E                     l59:
  2774  00233E  A2AC               	btfss	4012,1,c	;volatile
  2775  002340  D7FE               	goto	l59
  2776  002342  4A24               	infsnz	putcBluetoothString@i,f,c
  2777  002344  2A25               	incf	putcBluetoothString@i+1,f,c
  2778  002346                     l5437:
  2779  002346  C020  F022         	movff	putcBluetoothString@a,??_putcBluetoothString
  2780  00234A  C021  F023         	movff	putcBluetoothString@a+1,??_putcBluetoothString+1
  2781  00234E  5024               	movf	putcBluetoothString@i,w,c
  2782  002350  2622               	addwf	??_putcBluetoothString,f,c
  2783  002352  5025               	movf	putcBluetoothString@i+1,w,c
  2784  002354  2223               	addwfc	??_putcBluetoothString+1,f,c
  2785  002356  C022  FFF6         	movff	??_putcBluetoothString,tblptrl
  2786  00235A  C023  FFF7         	movff	??_putcBluetoothString+1,tblptrh
  2787  00235E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2788  00235E  6AF8               	clrf	tblptru,c
  2789  002360                     	endif
  2790  002360                     	if	0	;tblptru may be non-zero
  2791  002360                     	endif
  2792  002360  0008               	tblrd		*
  2793  002362  50F5               	movf	tablat,w,c
  2794  002364  0900               	iorlw	0
  2795  002366  A4D8               	btfss	status,2,c
  2796  002368  D7D9               	goto	l5433
  2797                           
  2798                           ;Bluetooth.c: 98: }
  2799                           ;Bluetooth.c: 99: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2800  00236A  0E4F               	movlw	79
  2801  00236C  16AB               	andwf	4011,f,c	;volatile
  2802  00236E  9AAC               	bcf	4012,5,c	;volatile
  2803  002370  0ECF               	movlw	207
  2804  002372  169D               	andwf	3997,f,c	;volatile
  2805                           
  2806                           ;Bluetooth.c: 100: return;
  2807  002374  0012               	return	
  2808  002376                     __end_of_putcBluetoothString:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           indf0	equ	0xFEF
  2818                           postinc0	equ	0xFEE
  2819                           fsr0h	equ	0xFEA
  2820                           fsr0l	equ	0xFE9
  2821                           wreg	equ	0xFE8
  2822                           postinc1	equ	0xFE6
  2823                           postdec1	equ	0xFE5
  2824                           fsr1l	equ	0xFE1
  2825                           postinc2	equ	0xFDE
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _putcBluetoothInt *****************
  2829 ;; Defined at:
  2830 ;;		line 102 in file "Bluetooth.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  a               2   88[BANK0 ] int 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  s              20    0[BANK1 ] unsigned char [20]
  2835 ;;  i               2   20[BANK1 ] int 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;		None               void
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2845 ;;      Params:         0       2       0       0       0       0       0       0       0
  2846 ;;      Locals:         0       0      22       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2848 ;;      Totals:         0       2      22       0       0       0       0       0       0
  2849 ;;Total ram usage:       24 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    8
  2852 ;; This function calls:
  2853 ;;		_UART1_Init
  2854 ;;		_WriteUSART
  2855 ;;		_sprintf
  2856 ;; This function is called by:
  2857 ;;		_Comando_Tablet
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text11
  2862  001FA6                     __ptext11:
  2863                           	opt stack 0
  2864  001FA6                     _putcBluetoothInt:
  2865                           	opt stack 21
  2866                           
  2867                           ;Bluetooth.c: 104: int i;
  2868                           ;Bluetooth.c: 105: unsigned char s[20];
  2869                           ;Bluetooth.c: 106: UART1_Init(51);
  2870                           
  2871                           ;incstack = 0
  2872  001FA6  0E33               	movlw	51
  2873  001FA8  ECC0  F014         	call	_UART1_Init
  2874                           
  2875                           ;Bluetooth.c: 108: sprintf(s,"%d",a);
  2876  001FAC  0101               	movlb	1	; () banked
  2877  001FAE  0E01               	movlw	high putcBluetoothInt@s
  2878  001FB0  0100               	movlb	0	; () banked
  2879  001FB2  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  2880  001FB4  0101               	movlb	1	; () banked
  2881  001FB6  0E5A               	movlw	low putcBluetoothInt@s
  2882  001FB8  0100               	movlb	0	; () banked
  2883  001FBA  6F88               	movwf	sprintf@sp& (0+255),b
  2884  001FBC  0E7F               	movlw	high (STR_18+10)
  2885  001FBE  0100               	movlb	0	; () banked
  2886  001FC0  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  2887  001FC2  0EB6               	movlw	low (STR_18+10)
  2888  001FC4  0100               	movlb	0	; () banked
  2889  001FC6  6F8A               	movwf	sprintf@f& (0+255),b
  2890  001FC8  C0B8  F08C         	movff	putcBluetoothInt@a,?_sprintf+4
  2891  001FCC  C0B9  F08D         	movff	putcBluetoothInt@a+1,?_sprintf+5
  2892  001FD0  EC0E  F000         	call	_sprintf	;wreg free
  2893                           
  2894                           ;Bluetooth.c: 109: for (i = 0; s[i] != '\0'; i++){
  2895  001FD4  0E00               	movlw	0
  2896  001FD6  0101               	movlb	1	; () banked
  2897  001FD8  6F6F               	movwf	(putcBluetoothInt@i+1)& (0+255),b
  2898  001FDA  0E00               	movlw	0
  2899  001FDC  0101               	movlb	1	; () banked
  2900  001FDE  6F6E               	movwf	putcBluetoothInt@i& (0+255),b
  2901  001FE0  D012               	goto	l5455
  2902  001FE2                     l5451:
  2903                           
  2904                           ; BSR set to: 1
  2905                           ;Bluetooth.c: 110: WriteUSART(s[i]);
  2906  001FE2  0101               	movlb	1	; () banked
  2907  001FE4  0E5A               	movlw	low putcBluetoothInt@s
  2908  001FE6  0101               	movlb	1	; () banked
  2909  001FE8  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2910  001FEA  6ED9               	movwf	fsr2l,c
  2911  001FEC  0101               	movlb	1	; () banked
  2912  001FEE  0E01               	movlw	high putcBluetoothInt@s
  2913  001FF0  0101               	movlb	1	; () banked
  2914  001FF2  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2915  001FF4  6EDA               	movwf	fsr2h,c
  2916  001FF6  50DF               	movf	indf2,w,c
  2917  001FF8  ECAE  F014         	call	_WriteUSART
  2918  001FFC                     l68:
  2919  001FFC  A2AC               	btfss	4012,1,c	;volatile
  2920  001FFE  D7FE               	goto	l68
  2921  002000  0101               	movlb	1	; () banked
  2922  002002  4B6E               	infsnz	putcBluetoothInt@i& (0+255),f,b
  2923  002004  2B6F               	incf	(putcBluetoothInt@i+1)& (0+255),f,b
  2924  002006                     l5455:
  2925                           
  2926                           ; BSR set to: 1
  2927  002006  0101               	movlb	1	; () banked
  2928  002008  0E5A               	movlw	low putcBluetoothInt@s
  2929  00200A  0101               	movlb	1	; () banked
  2930  00200C  256E               	addwf	putcBluetoothInt@i& (0+255),w,b
  2931  00200E  6ED9               	movwf	fsr2l,c
  2932  002010  0101               	movlb	1	; () banked
  2933  002012  0E01               	movlw	high putcBluetoothInt@s
  2934  002014  0101               	movlb	1	; () banked
  2935  002016  216F               	addwfc	(putcBluetoothInt@i+1)& (0+255),w,b
  2936  002018  6EDA               	movwf	fsr2h,c
  2937  00201A  50DF               	movf	indf2,w,c
  2938  00201C  A4D8               	btfss	status,2,c
  2939  00201E  D7E1               	goto	l5451
  2940                           
  2941                           ; BSR set to: 1
  2942                           ;Bluetooth.c: 112: }
  2943                           ;Bluetooth.c: 113: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
  2944                           
  2945                           ; BSR set to: 1
  2946  002020  0E4F               	movlw	79
  2947  002022  16AB               	andwf	4011,f,c	;volatile
  2948                           
  2949                           ; BSR set to: 1
  2950  002024  9AAC               	bcf	4012,5,c	;volatile
  2951  002026  0ECF               	movlw	207
  2952  002028  169D               	andwf	3997,f,c	;volatile
  2953                           
  2954                           ; BSR set to: 1
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;Bluetooth.c: 114: return;
  2958  00202A  0012               	return	
  2959  00202C                     __end_of_putcBluetoothInt:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           intcon	equ	0xFF2
  2968                           indf0	equ	0xFEF
  2969                           postinc0	equ	0xFEE
  2970                           fsr0h	equ	0xFEA
  2971                           fsr0l	equ	0xFE9
  2972                           wreg	equ	0xFE8
  2973                           postinc1	equ	0xFE6
  2974                           postdec1	equ	0xFE5
  2975                           fsr1l	equ	0xFE1
  2976                           indf2	equ	0xFDF
  2977                           postinc2	equ	0xFDE
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _WriteUSART *****************
  2983 ;; Defined at:
  2984 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uwrite.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  data            1    wreg     unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  data            1   24[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0
  2999 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3001 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3002 ;;Total ram usage:        1 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    4
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_putcBluetoothString
  3009 ;;		_putcBluetoothInt
  3010 ;;		_putcTxU1
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text12
  3015  00295C                     __ptext12:
  3016                           	opt stack 0
  3017  00295C                     _WriteUSART:
  3018                           	opt stack 21
  3019                           
  3020                           ; BSR set to: 1
  3021                           ;incstack = 0
  3022                           ;WriteUSART@data stored from wreg
  3023  00295C  6E19               	movwf	WriteUSART@data,c
  3024  00295E  ACAC               	btfss	4012,6,c	;volatile
  3025  002960  D003               	goto	l4465
  3026  002962  90AC               	bcf	4012,0,c	;volatile
  3027  002964  B23C               	btfsc	_USART_Status,1,c
  3028  002966  80AC               	bsf	4012,0,c	;volatile
  3029  002968                     l4465:
  3030  002968  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
  3031  00296C  0012               	return	
  3032  00296E                     __end_of_WriteUSART:
  3033                           	opt stack 0
  3034                           tblptru	equ	0xFF8
  3035                           tblptrh	equ	0xFF7
  3036                           tblptrl	equ	0xFF6
  3037                           tablat	equ	0xFF5
  3038                           prodh	equ	0xFF4
  3039                           prodl	equ	0xFF3
  3040                           intcon	equ	0xFF2
  3041                           indf0	equ	0xFEF
  3042                           postinc0	equ	0xFEE
  3043                           fsr0h	equ	0xFEA
  3044                           fsr0l	equ	0xFE9
  3045                           wreg	equ	0xFE8
  3046                           postinc1	equ	0xFE6
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           indf2	equ	0xFDF
  3050                           postinc2	equ	0xFDE
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _UART1_Init *****************
  3056 ;; Defined at:
  3057 ;;		line 5 in file "UART1.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  bdr             1    wreg     unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  bdr             1   30[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;		None               void
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0
  3072 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3074 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3075 ;;Total ram usage:        1 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    5
  3078 ;; This function calls:
  3079 ;;		_OpenUSART
  3080 ;; This function is called by:
  3081 ;;		_BT_Init
  3082 ;;		_putcBluetoothString
  3083 ;;		_putcBluetoothInt
  3084 ;;		_main
  3085 ;;		_EstadoBluetooth
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text13
  3090  002980                     __ptext13:
  3091                           	opt stack 0
  3092  002980                     _UART1_Init:
  3093                           	opt stack 25
  3094                           
  3095                           ;incstack = 0
  3096                           ;UART1_Init@bdr stored from wreg
  3097  002980  6E1F               	movwf	UART1_Init@bdr,c
  3098                           
  3099                           ;UART1.c: 8: OpenUSART(0b01111111 & 0b11111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111,bdr);
  3100  002982  C01F  F019         	movff	UART1_Init@bdr,OpenUSART@spbrg
  3101  002986  6A1A               	clrf	OpenUSART@spbrg+1,c
  3102  002988  0E7C               	movlw	124
  3103  00298A  ECBB  F011         	call	_OpenUSART
  3104  00298E  0012               	return	
  3105  002990                     __end_of_UART1_Init:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           indf0	equ	0xFEF
  3115                           postinc0	equ	0xFEE
  3116                           fsr0h	equ	0xFEA
  3117                           fsr0l	equ	0xFE9
  3118                           wreg	equ	0xFE8
  3119                           postinc1	equ	0xFE6
  3120                           postdec1	equ	0xFE5
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _OpenUSART *****************
  3129 ;; Defined at:
  3130 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  config          1    wreg     unsigned char 
  3133 ;;  spbrg           2   24[COMRAM] unsigned int 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  config          1   29[COMRAM] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;		None               void
  3138 ;; Registers used:
  3139 ;;		wreg, status,2
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3145 ;;      Params:         2       0       0       0       0       0       0       0       0
  3146 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3147 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3148 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3149 ;;Total ram usage:        6 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    4
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_UART1_Init
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text14
  3160  002376                     __ptext14:
  3161                           	opt stack 0
  3162  002376                     _OpenUSART:
  3163                           	opt stack 25
  3164                           
  3165                           ;incstack = 0
  3166                           ;OpenUSART@config stored from wreg
  3167  002376  6E1E               	movwf	OpenUSART@config,c
  3168  002378  0E00               	movlw	0
  3169  00237A  6EAC               	movwf	4012,c	;volatile
  3170  00237C  0E00               	movlw	0
  3171  00237E  6EAB               	movwf	4011,c	;volatile
  3172  002380  B01E               	btfsc	OpenUSART@config,0,c
  3173  002382  88AC               	bsf	4012,4,c	;volatile
  3174  002384  A21E               	btfss	OpenUSART@config,1,c
  3175  002386  D002               	goto	l4759
  3176  002388  8CAC               	bsf	4012,6,c	;volatile
  3177  00238A  8CAB               	bsf	4011,6,c	;volatile
  3178  00238C                     l4759:
  3179  00238C  B41E               	btfsc	OpenUSART@config,2,c
  3180  00238E  8EAC               	bsf	4012,7,c	;volatile
  3181  002390  A61E               	btfss	OpenUSART@config,3,c
  3182  002392  D002               	goto	l600
  3183  002394  88AB               	bsf	4011,4,c	;volatile
  3184  002396  D001               	goto	l4767
  3185  002398                     l600:
  3186  002398  8AAB               	bsf	4011,5,c	;volatile
  3187  00239A                     l4767:
  3188  00239A  B81E               	btfsc	OpenUSART@config,4,c
  3189  00239C  84AC               	bsf	4012,2,c	;volatile
  3190  00239E  989E               	bcf	3998,4,c	;volatile
  3191  0023A0  BA1E               	btfsc	OpenUSART@config,5,c
  3192  0023A2  86AB               	bsf	4011,3,c	;volatile
  3193  0023A4  AC1E               	btfss	OpenUSART@config,6,c
  3194  0023A6  D002               	goto	l604
  3195  0023A8  8A9D               	bsf	3997,5,c	;volatile
  3196  0023AA  D001               	goto	l605
  3197  0023AC                     l604:
  3198  0023AC  9A9D               	bcf	3997,5,c	;volatile
  3199  0023AE                     l605:
  3200  0023AE  9A9E               	bcf	3998,5,c	;volatile
  3201  0023B0  AE1E               	btfss	OpenUSART@config,7,c
  3202  0023B2  D002               	goto	l606
  3203  0023B4  889D               	bsf	3997,4,c	;volatile
  3204  0023B6  D001               	goto	l607
  3205  0023B8                     l606:
  3206  0023B8  989D               	bcf	3997,4,c	;volatile
  3207  0023BA                     l607:
  3208  0023BA  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3209  0023BE  C01A  F01B         	movff	OpenUSART@spbrg+1,??_OpenUSART
  3210  0023C2  C01B  F01C         	movff	??_OpenUSART,??_OpenUSART+1
  3211  0023C6  6A1D               	clrf	(??_OpenUSART+2)& (0+255),c
  3212  0023C8  501C               	movf	??_OpenUSART+1,w,c
  3213  0023CA  6EB0               	movwf	4016,c	;volatile
  3214  0023CC  8AAC               	bsf	4012,5,c	;volatile
  3215  0023CE  8EAB               	bsf	4011,7,c	;volatile
  3216  0023D0  9C94               	bcf	3988,6,c	;volatile
  3217  0023D2  8E94               	bsf	3988,7,c	;volatile
  3218  0023D4  B8AC               	btfsc	4012,4,c	;volatile
  3219  0023D6  BEAC               	btfsc	4012,7,c	;volatile
  3220  0023D8  D001               	goto	l609
  3221  0023DA  8C94               	bsf	3988,6,c	;volatile
  3222  0023DC                     l609:
  3223  0023DC  0012               	return	
  3224  0023DE                     __end_of_OpenUSART:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           indf0	equ	0xFEF
  3234                           postinc0	equ	0xFEE
  3235                           fsr0h	equ	0xFEA
  3236                           fsr0l	equ	0xFE9
  3237                           wreg	equ	0xFE8
  3238                           postinc1	equ	0xFE6
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           indf2	equ	0xFDF
  3242                           postinc2	equ	0xFDE
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _getCNY70Value *****************
  3248 ;; Defined at:
  3249 ;;		line 3 in file "cny70.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  2   24[COMRAM] int 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3263 ;;      Params:         2       0       0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3266 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3267 ;;Total ram usage:        2 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    4
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_Comando_Tablet
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text15
  3278  001AB0                     __ptext15:
  3279                           	opt stack 0
  3280  001AB0                     _getCNY70Value:
  3281                           	opt stack 25
  3282                           
  3283                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  3284                           
  3285                           ;incstack = 0
  3286  001AB0  B081               	btfsc	3969,0,c	;volatile
  3287  001AB2  A281               	btfss	3969,1,c	;volatile
  3288  001AB4  D005               	goto	l423
  3289  001AB6  A481               	btfss	3969,2,c	;volatile
  3290  001AB8  A681               	btfss	3969,3,c	;volatile
  3291  001ABA  D002               	goto	l423
  3292  001ABC  B881               	btfsc	3969,4,c	;volatile
  3293  001ABE  D04F               	goto	l5605
  3294  001AC0                     l423:
  3295                           
  3296                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3297  001AC0  B081               	btfsc	3969,0,c	;volatile
  3298  001AC2  B281               	btfsc	3969,1,c	;volatile
  3299  001AC4  D005               	goto	l426
  3300  001AC6  B481               	btfsc	3969,2,c	;volatile
  3301  001AC8  A681               	btfss	3969,3,c	;volatile
  3302  001ACA  D002               	goto	l426
  3303  001ACC  B881               	btfsc	3969,4,c	;volatile
  3304  001ACE  D038               	goto	u6740
  3305  001AD0                     l426:
  3306                           
  3307                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3308  001AD0  A081               	btfss	3969,0,c	;volatile
  3309  001AD2  A281               	btfss	3969,1,c	;volatile
  3310  001AD4  D009               	goto	l428
  3311  001AD6  B481               	btfsc	3969,2,c	;volatile
  3312  001AD8  A681               	btfss	3969,3,c	;volatile
  3313  001ADA  D006               	goto	l428
  3314  001ADC  A881               	btfss	3969,4,c	;volatile
  3315  001ADE  D004               	goto	l428
  3316  001AE0                     
  3317                           ;cny70.c: 10: return -2;
  3318  001AE0  0EFF               	movlw	255
  3319  001AE2  6E1A               	movwf	?_getCNY70Value+1,c
  3320  001AE4  0EFE               	movlw	254
  3321  001AE6  D03E               	goto	L5
  3322  001AE8                     l428:
  3323                           
  3324                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3325  001AE8  B081               	btfsc	3969,0,c	;volatile
  3326  001AEA  A281               	btfss	3969,1,c	;volatile
  3327  001AEC  D005               	goto	l430
  3328  001AEE  B481               	btfsc	3969,2,c	;volatile
  3329  001AF0  B681               	btfsc	3969,3,c	;volatile
  3330  001AF2  D002               	goto	l430
  3331  001AF4  B881               	btfsc	3969,4,c	;volatile
  3332  001AF6  D02F               	goto	u6790
  3333  001AF8                     l430:
  3334                           
  3335                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  3336  001AF8  B081               	btfsc	3969,0,c	;volatile
  3337  001AFA  A281               	btfss	3969,1,c	;volatile
  3338  001AFC  D005               	goto	l432
  3339  001AFE  B481               	btfsc	3969,2,c	;volatile
  3340  001B00  A681               	btfss	3969,3,c	;volatile
  3341  001B02  D002               	goto	l432
  3342  001B04  A881               	btfss	3969,4,c	;volatile
  3343  001B06  D008               	goto	u6640
  3344  001B08                     l432:
  3345                           
  3346                           ;cny70.c: 15: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 0)
  3347  001B08  B081               	btfsc	3969,0,c	;volatile
  3348  001B0A  A281               	btfss	3969,1,c	;volatile
  3349  001B0C  D009               	goto	l434
  3350  001B0E  B481               	btfsc	3969,2,c	;volatile
  3351  001B10  B681               	btfsc	3969,3,c	;volatile
  3352  001B12  D006               	goto	l434
  3353  001B14  B881               	btfsc	3969,4,c	;volatile
  3354  001B16  D004               	goto	l434
  3355  001B18                     u6640:
  3356                           
  3357                           ;cny70.c: 16: return 2;
  3358  001B18  0E00               	movlw	0
  3359  001B1A  6E1A               	movwf	?_getCNY70Value+1,c
  3360  001B1C  0E02               	movlw	2
  3361  001B1E  D022               	goto	L5
  3362  001B20                     l434:
  3363                           
  3364                           ;cny70.c: 17: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3365  001B20  A081               	btfss	3969,0,c	;volatile
  3366  001B22  B281               	btfsc	3969,1,c	;volatile
  3367  001B24  D005               	goto	l436
  3368  001B26  B481               	btfsc	3969,2,c	;volatile
  3369  001B28  A681               	btfss	3969,3,c	;volatile
  3370  001B2A  D002               	goto	l436
  3371  001B2C  B881               	btfsc	3969,4,c	;volatile
  3372  001B2E  D7D8               	goto	L6
  3373  001B30                     l436:
  3374                           
  3375                           ;cny70.c: 19: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  3376  001B30  B081               	btfsc	3969,0,c	;volatile
  3377  001B32  B281               	btfsc	3969,1,c	;volatile
  3378  001B34  D008               	goto	l438
  3379  001B36  A481               	btfss	3969,2,c	;volatile
  3380  001B38  A681               	btfss	3969,3,c	;volatile
  3381  001B3A  D005               	goto	l438
  3382  001B3C  A881               	btfss	3969,4,c	;volatile
  3383  001B3E  D003               	goto	l438
  3384  001B40                     u6740:
  3385                           
  3386                           ;cny70.c: 20: return -1;
  3387  001B40  6819               	setf	?_getCNY70Value,c
  3388  001B42  681A               	setf	?_getCNY70Value+1,c
  3389  001B44  D010               	goto	l424
  3390  001B46                     l438:
  3391                           
  3392                           ;cny70.c: 21: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  3393  001B46  B081               	btfsc	3969,0,c	;volatile
  3394  001B48  A281               	btfss	3969,1,c	;volatile
  3395  001B4A  D009               	goto	l5605
  3396  001B4C  A481               	btfss	3969,2,c	;volatile
  3397  001B4E  B681               	btfsc	3969,3,c	;volatile
  3398  001B50  D006               	goto	l5605
  3399  001B52  A881               	btfss	3969,4,c	;volatile
  3400  001B54  D004               	goto	l5605
  3401  001B56                     u6790:
  3402                           
  3403                           ;cny70.c: 22: return 1;
  3404  001B56  0E00               	movlw	0
  3405  001B58  6E1A               	movwf	?_getCNY70Value+1,c
  3406  001B5A  0E01               	movlw	1
  3407  001B5C  D003               	goto	L5
  3408  001B5E                     l5605:
  3409                           
  3410                           ;cny70.c: 23: else
  3411                           ;cny70.c: 24: return 0;
  3412  001B5E  0E00               	movlw	0
  3413  001B60  6E1A               	movwf	?_getCNY70Value+1,c
  3414  001B62  0E00               	movlw	0
  3415  001B64                     L5:
  3416  001B64  6E19               	movwf	?_getCNY70Value,c
  3417  001B66                     l424:
  3418  001B66  0012               	return	
  3419  001B68                     __end_of_getCNY70Value:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           indf0	equ	0xFEF
  3429                           postinc0	equ	0xFEE
  3430                           fsr0h	equ	0xFEA
  3431                           fsr0l	equ	0xFE9
  3432                           wreg	equ	0xFE8
  3433                           postinc1	equ	0xFE6
  3434                           postdec1	equ	0xFE5
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _clrBufferUSART *****************
  3443 ;; Defined at:
  3444 ;;		line 68 in file "Bluetooth.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  i               2   24[COMRAM] int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;		None               void
  3451 ;; Registers used:
  3452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0
  3459 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3461 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3462 ;;Total ram usage:        2 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    4
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_Inicializa_Driveby
  3469 ;;		_Comando_Tablet
  3470 ;;		_main
  3471 ;;		_CheckTX
  3472 ;;		_EstadoBluetooth
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text16
  3477  0026F6                     __ptext16:
  3478                           	opt stack 0
  3479  0026F6                     _clrBufferUSART:
  3480                           	opt stack 26
  3481                           
  3482                           ;Bluetooth.c: 69: int i;
  3483                           ;Bluetooth.c: 70: for (i = 0; i < 20; i++) {
  3484                           
  3485                           ;incstack = 0
  3486  0026F6  0E00               	movlw	0
  3487  0026F8  6E1A               	movwf	clrBufferUSART@i+1,c
  3488  0026FA  0E00               	movlw	0
  3489  0026FC  6E19               	movwf	clrBufferUSART@i,c
  3490  0026FE  501A               	movf	clrBufferUSART@i+1,w,c
  3491  002700  0A80               	xorlw	128
  3492  002702  0F80               	addlw	-128
  3493  002704  0E14               	movlw	20
  3494  002706  B4D8               	btfsc	status,2,c
  3495  002708  5C19               	subwf	clrBufferUSART@i,w,c
  3496  00270A  B0D8               	btfsc	status,0,c
  3497  00270C  D00F               	goto	l54
  3498                           
  3499                           ;Bluetooth.c: 71: BluetoothDato[i] = 0;
  3500  00270E  0101               	movlb	1	; () banked
  3501  002710  0E28               	movlw	low _BluetoothDato
  3502  002712  2419               	addwf	clrBufferUSART@i,w,c
  3503  002714  6ED9               	movwf	fsr2l,c
  3504  002716  0101               	movlb	1	; () banked
  3505  002718  0E01               	movlw	high _BluetoothDato
  3506  00271A  201A               	addwfc	clrBufferUSART@i+1,w,c
  3507  00271C  6EDA               	movwf	fsr2h,c
  3508  00271E  0E00               	movlw	0
  3509  002720  6EDF               	movwf	indf2,c
  3510                           
  3511                           ; BSR set to: 1
  3512                           ;Bluetooth.c: 72: cad = 0;
  3513  002722  0E00               	movlw	0
  3514  002724  6E3D               	movwf	_cad,c
  3515                           
  3516                           ; BSR set to: 1
  3517  002726  4A19               	infsnz	clrBufferUSART@i,f,c
  3518  002728  2A1A               	incf	clrBufferUSART@i+1,f,c
  3519  00272A  D7E9               	goto	L7
  3520  00272C                     l54:
  3521  00272C  0012               	return	
  3522  00272E                     __end_of_clrBufferUSART:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           indf0	equ	0xFEF
  3532                           postinc0	equ	0xFEE
  3533                           fsr0h	equ	0xFEA
  3534                           fsr0l	equ	0xFE9
  3535                           wreg	equ	0xFE8
  3536                           postinc1	equ	0xFE6
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _PWM_init2 *****************
  3546 ;; Defined at:
  3547 ;;		line 42 in file "pwm.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  period          1    wreg     unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  period          1   27[COMRAM] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;		None               void
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3561 ;;      Params:         0       0       0       0       0       0       0       0       0
  3562 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3564 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3565 ;;Total ram usage:        1 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    5
  3568 ;; This function calls:
  3569 ;;		_OpenPWM2
  3570 ;; This function is called by:
  3571 ;;		_Comando_Tablet
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text17
  3576  0028D8                     __ptext17:
  3577                           	opt stack 0
  3578  0028D8                     _PWM_init2:
  3579                           	opt stack 24
  3580                           
  3581                           ;incstack = 0
  3582                           ;PWM_init2@period stored from wreg
  3583  0028D8  6E1C               	movwf	PWM_init2@period,c
  3584                           
  3585                           ;pwm.c: 43: Timer2Config = 0b11111110;
  3586  0028DA  0EFE               	movlw	254
  3587  0028DC  6E47               	movwf	_Timer2Config,c
  3588                           
  3589                           ;pwm.c: 44: T2CON = (0xfb & Timer2Config);
  3590  0028DE  5047               	movf	_Timer2Config,w,c
  3591  0028E0  0BFB               	andlw	251
  3592  0028E2  6ECA               	movwf	4042,c	;volatile
  3593                           
  3594                           ;pwm.c: 47: TMR2 = 0;
  3595  0028E4  0E00               	movlw	0
  3596  0028E6  6ECC               	movwf	4044,c	;volatile
  3597                           
  3598                           ;pwm.c: 48: PIR1bits.TMR2IF = 0;
  3599  0028E8  929E               	bcf	3998,1,c	;volatile
  3600                           
  3601                           ;pwm.c: 49: PIE1bits.TMR2IE = 0;
  3602  0028EA  929D               	bcf	3997,1,c	;volatile
  3603                           
  3604                           ;pwm.c: 50: T2CONbits.TMR2ON = 1;
  3605  0028EC  84CA               	bsf	4042,2,c	;volatile
  3606                           
  3607                           ;pwm.c: 51: OpenPWM2(period);
  3608  0028EE  501C               	movf	PWM_init2@period,w,c
  3609  0028F0  EC07  F013         	call	_OpenPWM2
  3610                           
  3611                           ;pwm.c: 53: return;
  3612  0028F4  0012               	return	
  3613  0028F6                     __end_of_PWM_init2:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           indf0	equ	0xFEF
  3623                           postinc0	equ	0xFEE
  3624                           fsr0h	equ	0xFEA
  3625                           fsr0l	equ	0xFE9
  3626                           wreg	equ	0xFE8
  3627                           postinc1	equ	0xFE6
  3628                           postdec1	equ	0xFE5
  3629                           fsr1l	equ	0xFE1
  3630                           indf2	equ	0xFDF
  3631                           postinc2	equ	0xFDE
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _OpenPWM2 *****************
  3637 ;; Defined at:
  3638 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2open.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  period          1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  period          1   25[COMRAM] unsigned char 
  3643 ;;  ccp2mx          1   26[COMRAM] unsigned char 
  3644 ;;  pmmode          1    0        unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, tblptrl, tblptrh, tblptru
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3654 ;;      Params:         0       0       0       0       0       0       0       0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3656 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3657 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3658 ;;Total ram usage:        3 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    4
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_PWM_init2
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text18
  3669  00260E                     __ptext18:
  3670                           	opt stack 0
  3671  00260E                     _OpenPWM2:
  3672                           	opt stack 24
  3673                           
  3674                           ;incstack = 0
  3675                           ;OpenPWM2@period stored from wreg
  3676  00260E  6E1A               	movwf	OpenPWM2@period,c
  3677  002610  0E0C               	movlw	12
  3678  002612  6EBA               	movwf	4026,c	;volatile
  3679  002614  0E05               	movlw	5
  3680  002616  6EF6               	movwf	tblptrl,c
  3681  002618                     	if	1	;There is more than 1 active tblptr byte
  3682  002618  0E00               	movlw	0
  3683  00261A  6EF7               	movwf	tblptrh,c
  3684  00261C                     	endif
  3685  00261C                     	if	1	;There are 3 active tblptr bytes
  3686  00261C  0E30               	movlw	48
  3687  00261E  6EF8               	movwf	tblptru,c
  3688  002620                     	endif
  3689  002620  0008               	tblrd		*
  3690  002622  CFF5 F019          	movff	tablat,??_OpenPWM2
  3691  002626  A019               	btfss	??_OpenPWM2,0,c
  3692  002628  D002               	goto	l5375
  3693  00262A  681B               	setf	OpenPWM2@ccp2mx,c
  3694  00262C  D002               	goto	l566
  3695  00262E                     l5375:
  3696  00262E  0E00               	movlw	0
  3697  002630  6E1B               	movwf	OpenPWM2@ccp2mx,c
  3698  002632                     l566:
  3699  002632  501B               	movf	OpenPWM2@ccp2mx,w,c
  3700  002634  B4D8               	btfsc	status,2,c
  3701  002636  D002               	goto	l567
  3702  002638  9294               	bcf	3988,1,c	;volatile
  3703  00263A  D001               	goto	l568
  3704  00263C                     l567:
  3705  00263C  9693               	bcf	3987,3,c	;volatile
  3706  00263E                     l568:
  3707  00263E  94CA               	bcf	4042,2,c	;volatile
  3708  002640  C01A  FFCB         	movff	OpenPWM2@period,4043	;volatile
  3709  002644  84CA               	bsf	4042,2,c	;volatile
  3710  002646  0012               	return	
  3711  002648                     __end_of_OpenPWM2:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           intcon	equ	0xFF2
  3720                           indf0	equ	0xFEF
  3721                           postinc0	equ	0xFEE
  3722                           fsr0h	equ	0xFEA
  3723                           fsr0l	equ	0xFE9
  3724                           wreg	equ	0xFE8
  3725                           postinc1	equ	0xFE6
  3726                           postdec1	equ	0xFE5
  3727                           fsr1l	equ	0xFE1
  3728                           indf2	equ	0xFDF
  3729                           postinc2	equ	0xFDE
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _PWM_init1 *****************
  3735 ;; Defined at:
  3736 ;;		line 20 in file "pwm.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  period          1    wreg     unsigned char 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  period          1   25[COMRAM] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;		None               void
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3750 ;;      Params:         0       0       0       0       0       0       0       0       0
  3751 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3753 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3754 ;;Total ram usage:        1 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    5
  3757 ;; This function calls:
  3758 ;;		_OpenPWM1
  3759 ;; This function is called by:
  3760 ;;		_Comando_Tablet
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text19
  3765  0028F6                     __ptext19:
  3766                           	opt stack 0
  3767  0028F6                     _PWM_init1:
  3768                           	opt stack 24
  3769                           
  3770                           ;incstack = 0
  3771                           ;PWM_init1@period stored from wreg
  3772  0028F6  6E1A               	movwf	PWM_init1@period,c
  3773                           
  3774                           ;pwm.c: 21: Timer2Config = 0b11111110;
  3775  0028F8  0EFE               	movlw	254
  3776  0028FA  6E47               	movwf	_Timer2Config,c
  3777                           
  3778                           ;pwm.c: 22: T2CON = (0xfb & Timer2Config);
  3779  0028FC  5047               	movf	_Timer2Config,w,c
  3780  0028FE  0BFB               	andlw	251
  3781  002900  6ECA               	movwf	4042,c	;volatile
  3782                           
  3783                           ;pwm.c: 25: TMR2 = 0;
  3784  002902  0E00               	movlw	0
  3785  002904  6ECC               	movwf	4044,c	;volatile
  3786                           
  3787                           ;pwm.c: 26: PIR1bits.TMR2IF = 0;
  3788  002906  929E               	bcf	3998,1,c	;volatile
  3789                           
  3790                           ;pwm.c: 27: PIE1bits.TMR2IE = 0;
  3791  002908  929D               	bcf	3997,1,c	;volatile
  3792                           
  3793                           ;pwm.c: 28: T2CONbits.TMR2ON = 1;
  3794  00290A  84CA               	bsf	4042,2,c	;volatile
  3795                           
  3796                           ;pwm.c: 29: OpenPWM1(period);
  3797  00290C  501A               	movf	PWM_init1@period,w,c
  3798  00290E  ECB7  F014         	call	_OpenPWM1
  3799                           
  3800                           ;pwm.c: 31: return;
  3801  002912  0012               	return	
  3802  002914                     __end_of_PWM_init1:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           indf0	equ	0xFEF
  3812                           postinc0	equ	0xFEE
  3813                           fsr0h	equ	0xFEA
  3814                           fsr0l	equ	0xFE9
  3815                           wreg	equ	0xFE8
  3816                           postinc1	equ	0xFE6
  3817                           postdec1	equ	0xFE5
  3818                           fsr1l	equ	0xFE1
  3819                           indf2	equ	0xFDF
  3820                           postinc2	equ	0xFDE
  3821                           fsr2h	equ	0xFDA
  3822                           fsr2l	equ	0xFD9
  3823                           status	equ	0xFD8
  3824                           
  3825 ;; *************** function _OpenPWM1 *****************
  3826 ;; Defined at:
  3827 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1open.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  period          1    wreg     unsigned char 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  period          1   24[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;		None               void
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0
  3842 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3844 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3845 ;;Total ram usage:        1 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    4
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_PWM_init1
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text20
  3856  00296E                     __ptext20:
  3857                           	opt stack 0
  3858  00296E                     _OpenPWM1:
  3859                           	opt stack 24
  3860                           
  3861                           ;incstack = 0
  3862                           ;OpenPWM1@period stored from wreg
  3863  00296E  6E19               	movwf	OpenPWM1@period,c
  3864  002970  0E0C               	movlw	12
  3865  002972  12BD               	iorwf	4029,f,c	;volatile
  3866  002974  9494               	bcf	3988,2,c	;volatile
  3867  002976  94CA               	bcf	4042,2,c	;volatile
  3868  002978  C019  FFCB         	movff	OpenPWM1@period,4043	;volatile
  3869  00297C  84CA               	bsf	4042,2,c	;volatile
  3870  00297E  0012               	return	
  3871  002980                     __end_of_OpenPWM1:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           indf0	equ	0xFEF
  3881                           postinc0	equ	0xFEE
  3882                           fsr0h	equ	0xFEA
  3883                           fsr0l	equ	0xFE9
  3884                           wreg	equ	0xFE8
  3885                           postinc1	equ	0xFE6
  3886                           postdec1	equ	0xFE5
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           
  3894 ;; *************** function _PWM_DutyCycle2 *****************
  3895 ;; Defined at:
  3896 ;;		line 55 in file "pwm.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  percentageDu    1    wreg     unsigned char 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  3901 ;;  DC              2   41[BANK0 ] unsigned int 
  3902 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;		None               void
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0
  3913 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3914 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3915 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3916 ;;Total ram usage:        9 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    6
  3919 ;; This function calls:
  3920 ;;		_SetDCPWM2
  3921 ;;		___ftmul
  3922 ;;		___fttol
  3923 ;;		___lbtoft
  3924 ;; This function is called by:
  3925 ;;		_Comando_Tablet
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text21
  3930  0020AE                     __ptext21:
  3931                           	opt stack 0
  3932  0020AE                     _PWM_DutyCycle2:
  3933                           	opt stack 23
  3934                           
  3935                           ;incstack = 0
  3936                           ;PWM_DutyCycle2@percentageDuty stored from wreg
  3937  0020AE  0100               	movlb	0	; () banked
  3938  0020B0  6F88               	movwf	PWM_DutyCycle2@percentageDuty& (0+255),b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;pwm.c: 57: unsigned int DC = 0, DutyCycle = 0;
  3942  0020B2  0E00               	movlw	0
  3943  0020B4  0100               	movlb	0	; () banked
  3944  0020B6  6F8A               	movwf	(PWM_DutyCycle2@DC+1)& (0+255),b
  3945  0020B8  0E00               	movlw	0
  3946  0020BA  0100               	movlb	0	; () banked
  3947  0020BC  6F89               	movwf	PWM_DutyCycle2@DC& (0+255),b
  3948  0020BE  0E00               	movlw	0
  3949  0020C0  0100               	movlb	0	; () banked
  3950  0020C2  6F87               	movwf	(PWM_DutyCycle2@DutyCycle+1)& (0+255),b
  3951  0020C4  0E00               	movlw	0
  3952  0020C6  0100               	movlb	0	; () banked
  3953  0020C8  6F86               	movwf	PWM_DutyCycle2@DutyCycle& (0+255),b
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;pwm.c: 59: DC = (unsigned int)(percentageDuty * 10.23);
  3957  0020CA  0EAE               	movlw	174
  3958  0020CC  0100               	movlb	0	; () banked
  3959  0020CE  6F63               	movwf	___ftmul@f2& (0+255),b
  3960  0020D0  0E23               	movlw	35
  3961  0020D2  0100               	movlb	0	; () banked
  3962  0020D4  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3963  0020D6  0E41               	movlw	65
  3964  0020D8  0100               	movlb	0	; () banked
  3965  0020DA  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3966  0020DC  0100               	movlb	0	; () banked
  3967  0020DE  5188               	movf	PWM_DutyCycle2@percentageDuty& (0+255),w,b
  3968  0020E0  EC3A  F014         	call	___lbtoft
  3969  0020E4  C021  F060         	movff	?___lbtoft,___ftmul@f1
  3970  0020E8  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  3971  0020EC  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  3972  0020F0  EC6F  F009         	call	___ftmul	;wreg free
  3973  0020F4  C060  F073         	movff	?___ftmul,___fttol@f1
  3974  0020F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  3975  0020FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  3976  002100  EC1B  F00A         	call	___fttol	;wreg free
  3977  002104  C073  F082         	movff	?___fttol,??_PWM_DutyCycle2
  3978  002108  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle2+1
  3979  00210C  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle2+2
  3980  002110  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle2+3
  3981  002114  C082  F089         	movff	??_PWM_DutyCycle2,PWM_DutyCycle2@DC
  3982  002118  C083  F08A         	movff	??_PWM_DutyCycle2+1,PWM_DutyCycle2@DC+1
  3983                           
  3984                           ;pwm.c: 60: SetDCPWM2(DC);
  3985  00211C  C089  F019         	movff	PWM_DutyCycle2@DC,SetDCPWM2@dutycycle
  3986  002120  C08A  F01A         	movff	PWM_DutyCycle2@DC+1,SetDCPWM2@dutycycle+1
  3987  002124  EC24  F013         	call	_SetDCPWM2	;wreg free
  3988                           
  3989                           ;pwm.c: 61: return;
  3990  002128  0012               	return	
  3991  00212A                     __end_of_PWM_DutyCycle2:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           indf0	equ	0xFEF
  4001                           postinc0	equ	0xFEE
  4002                           fsr0h	equ	0xFEA
  4003                           fsr0l	equ	0xFE9
  4004                           wreg	equ	0xFE8
  4005                           postinc1	equ	0xFE6
  4006                           postdec1	equ	0xFE5
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _SetDCPWM2 *****************
  4015 ;; Defined at:
  4016 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw2setdc.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4030 ;;      Params:         2       0       0       0       0       0       0       0       0
  4031 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4032 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4033 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4034 ;;Total ram usage:        6 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    4
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_PWM_DutyCycle2
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text22
  4045  002648                     __ptext22:
  4046                           	opt stack 0
  4047  002648                     _SetDCPWM2:
  4048                           	opt stack 24
  4049                           
  4050                           ;incstack = 0
  4051  002648  C019  F01B         	movff	SetDCPWM2@dutycycle,??_SetDCPWM2
  4052  00264C  C01A  F01C         	movff	SetDCPWM2@dutycycle+1,??_SetDCPWM2+1
  4053  002650  0E06               	movlw	6
  4054  002652                     u6255:
  4055  002652  90D8               	bcf	status,0,c
  4056  002654  361B               	rlcf	??_SetDCPWM2,f,c
  4057  002656  361C               	rlcf	??_SetDCPWM2+1,f,c
  4058  002658  2EE8               	decfsz	wreg,f,c
  4059  00265A  D7FB               	goto	u6255
  4060  00265C  C01B  F01D         	movff	??_SetDCPWM2,SetDCPWM2@DCycle
  4061  002660  C01C  F01E         	movff	??_SetDCPWM2+1,SetDCPWM2@DCycle+1
  4062  002664  C01E  FFBB         	movff	SetDCPWM2@DCycle+1,4027	;volatile
  4063  002668  C01D  F01B         	movff	SetDCPWM2@DCycle,??_SetDCPWM2
  4064  00266C  90D8               	bcf	status,0,c
  4065  00266E  321B               	rrcf	??_SetDCPWM2,f,c
  4066  002670  90D8               	bcf	status,0,c
  4067  002672  321B               	rrcf	??_SetDCPWM2,f,c
  4068  002674  0E30               	movlw	48
  4069  002676  161B               	andwf	??_SetDCPWM2,f,c
  4070  002678  50BA               	movf	4026,w,c	;volatile
  4071  00267A  0BCF               	andlw	207
  4072  00267C  101B               	iorwf	??_SetDCPWM2,w,c
  4073  00267E  6EBA               	movwf	4026,c	;volatile
  4074  002680  0012               	return	
  4075  002682                     __end_of_SetDCPWM2:
  4076                           	opt stack 0
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           indf0	equ	0xFEF
  4085                           postinc0	equ	0xFEE
  4086                           fsr0h	equ	0xFEA
  4087                           fsr0l	equ	0xFE9
  4088                           wreg	equ	0xFE8
  4089                           postinc1	equ	0xFE6
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _PWM_DutyCycle1 *****************
  4099 ;; Defined at:
  4100 ;;		line 33 in file "pwm.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  percentageDu    1    wreg     unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  percentageDu    1   40[BANK0 ] unsigned char 
  4105 ;;  DC              2   41[BANK0 ] unsigned int 
  4106 ;;  DutyCycle       2   38[BANK0 ] unsigned int 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;		None               void
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4116 ;;      Params:         0       0       0       0       0       0       0       0       0
  4117 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4118 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4119 ;;      Totals:         0       9       0       0       0       0       0       0       0
  4120 ;;Total ram usage:        9 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    6
  4123 ;; This function calls:
  4124 ;;		_SetDCPWM1
  4125 ;;		___ftmul
  4126 ;;		___fttol
  4127 ;;		___lbtoft
  4128 ;; This function is called by:
  4129 ;;		_Comando_Tablet
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text23
  4134  00212A                     __ptext23:
  4135                           	opt stack 0
  4136  00212A                     _PWM_DutyCycle1:
  4137                           	opt stack 23
  4138                           
  4139                           ;incstack = 0
  4140                           ;PWM_DutyCycle1@percentageDuty stored from wreg
  4141  00212A  0100               	movlb	0	; () banked
  4142  00212C  6F88               	movwf	PWM_DutyCycle1@percentageDuty& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;pwm.c: 35: unsigned int DC = 0, DutyCycle = 0;
  4146  00212E  0E00               	movlw	0
  4147  002130  0100               	movlb	0	; () banked
  4148  002132  6F8A               	movwf	(PWM_DutyCycle1@DC+1)& (0+255),b
  4149  002134  0E00               	movlw	0
  4150  002136  0100               	movlb	0	; () banked
  4151  002138  6F89               	movwf	PWM_DutyCycle1@DC& (0+255),b
  4152  00213A  0E00               	movlw	0
  4153  00213C  0100               	movlb	0	; () banked
  4154  00213E  6F87               	movwf	(PWM_DutyCycle1@DutyCycle+1)& (0+255),b
  4155  002140  0E00               	movlw	0
  4156  002142  0100               	movlb	0	; () banked
  4157  002144  6F86               	movwf	PWM_DutyCycle1@DutyCycle& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;pwm.c: 37: DC = (unsigned int)(percentageDuty * 10.23);
  4161  002146  0EAE               	movlw	174
  4162  002148  0100               	movlb	0	; () banked
  4163  00214A  6F63               	movwf	___ftmul@f2& (0+255),b
  4164  00214C  0E23               	movlw	35
  4165  00214E  0100               	movlb	0	; () banked
  4166  002150  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  4167  002152  0E41               	movlw	65
  4168  002154  0100               	movlb	0	; () banked
  4169  002156  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  4170  002158  0100               	movlb	0	; () banked
  4171  00215A  5188               	movf	PWM_DutyCycle1@percentageDuty& (0+255),w,b
  4172  00215C  EC3A  F014         	call	___lbtoft
  4173  002160  C021  F060         	movff	?___lbtoft,___ftmul@f1
  4174  002164  C022  F061         	movff	?___lbtoft+1,___ftmul@f1+1
  4175  002168  C023  F062         	movff	?___lbtoft+2,___ftmul@f1+2
  4176  00216C  EC6F  F009         	call	___ftmul	;wreg free
  4177  002170  C060  F073         	movff	?___ftmul,___fttol@f1
  4178  002174  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  4179  002178  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  4180  00217C  EC1B  F00A         	call	___fttol	;wreg free
  4181  002180  C073  F082         	movff	?___fttol,??_PWM_DutyCycle1
  4182  002184  C074  F083         	movff	?___fttol+1,??_PWM_DutyCycle1+1
  4183  002188  C075  F084         	movff	?___fttol+2,??_PWM_DutyCycle1+2
  4184  00218C  C076  F085         	movff	?___fttol+3,??_PWM_DutyCycle1+3
  4185  002190  C082  F089         	movff	??_PWM_DutyCycle1,PWM_DutyCycle1@DC
  4186  002194  C083  F08A         	movff	??_PWM_DutyCycle1+1,PWM_DutyCycle1@DC+1
  4187                           
  4188                           ;pwm.c: 38: SetDCPWM1(DC);
  4189  002198  C089  F019         	movff	PWM_DutyCycle1@DC,SetDCPWM1@dutycycle
  4190  00219C  C08A  F01A         	movff	PWM_DutyCycle1@DC+1,SetDCPWM1@dutycycle+1
  4191  0021A0  EC41  F013         	call	_SetDCPWM1	;wreg free
  4192                           
  4193                           ;pwm.c: 39: return;
  4194  0021A4  0012               	return	
  4195  0021A6                     __end_of_PWM_DutyCycle1:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           indf0	equ	0xFEF
  4205                           postinc0	equ	0xFEE
  4206                           fsr0h	equ	0xFEA
  4207                           fsr0l	equ	0xFE9
  4208                           wreg	equ	0xFE8
  4209                           postinc1	equ	0xFE6
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           indf2	equ	0xFDF
  4213                           postinc2	equ	0xFDE
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function ___lbtoft *****************
  4219 ;; Defined at:
  4220 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbtoft.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  c               1    wreg     unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  c               1   35[COMRAM] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  3   32[COMRAM] float 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4234 ;;      Params:         3       0       0       0       0       0       0       0       0
  4235 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4237 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4238 ;;Total ram usage:        4 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    5
  4241 ;; This function calls:
  4242 ;;		___ftpack
  4243 ;; This function is called by:
  4244 ;;		_PWM_DutyCycle1
  4245 ;;		_PWM_DutyCycle2
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text24
  4250  002874                     __ptext24:
  4251                           	opt stack 0
  4252  002874                     ___lbtoft:
  4253                           	opt stack 23
  4254                           
  4255                           ;incstack = 0
  4256                           ;___lbtoft@c stored from wreg
  4257  002874  6E24               	movwf	___lbtoft@c,c
  4258  002876  5024               	movf	___lbtoft@c,w,c
  4259  002878  6E19               	movwf	___ftpack@arg,c
  4260  00287A  6A1A               	clrf	___ftpack@arg+1,c
  4261  00287C  6A1B               	clrf	___ftpack@arg+2,c
  4262  00287E  0E8E               	movlw	142
  4263  002880  6E1C               	movwf	___ftpack@exp,c
  4264  002882  0E00               	movlw	0
  4265  002884  6E1D               	movwf	___ftpack@sign,c
  4266  002886  ECB4  F00D         	call	___ftpack	;wreg free
  4267  00288A  C019  F021         	movff	?___ftpack,?___lbtoft
  4268  00288E  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  4269  002892  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  4270  002896  0012               	return	
  4271  002898                     __end_of___lbtoft:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           indf0	equ	0xFEF
  4281                           postinc0	equ	0xFEE
  4282                           fsr0h	equ	0xFEA
  4283                           fsr0l	equ	0xFE9
  4284                           wreg	equ	0xFE8
  4285                           postinc1	equ	0xFE6
  4286                           postdec1	equ	0xFE5
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _SetDCPWM1 *****************
  4295 ;; Defined at:
  4296 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\PWM\pw1setdc.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  dutycycle       2   24[COMRAM] unsigned int 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  DCycle          2   28[COMRAM] struct PWMDC
  4301 ;; Return value:  Size  Location     Type
  4302 ;;		None               void
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4310 ;;      Params:         2       0       0       0       0       0       0       0       0
  4311 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4312 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4313 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4314 ;;Total ram usage:        6 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    4
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_PWM_DutyCycle1
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text25
  4325  002682                     __ptext25:
  4326                           	opt stack 0
  4327  002682                     _SetDCPWM1:
  4328                           	opt stack 24
  4329                           
  4330                           ;incstack = 0
  4331  002682  C019  F01B         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  4332  002686  C01A  F01C         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  4333  00268A  0E06               	movlw	6
  4334  00268C                     u6225:
  4335  00268C  90D8               	bcf	status,0,c
  4336  00268E  361B               	rlcf	??_SetDCPWM1,f,c
  4337  002690  361C               	rlcf	??_SetDCPWM1+1,f,c
  4338  002692  2EE8               	decfsz	wreg,f,c
  4339  002694  D7FB               	goto	u6225
  4340  002696  C01B  F01D         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  4341  00269A  C01C  F01E         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  4342  00269E  C01E  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  4343  0026A2  C01D  F01B         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  4344  0026A6  90D8               	bcf	status,0,c
  4345  0026A8  321B               	rrcf	??_SetDCPWM1,f,c
  4346  0026AA  90D8               	bcf	status,0,c
  4347  0026AC  321B               	rrcf	??_SetDCPWM1,f,c
  4348  0026AE  0E30               	movlw	48
  4349  0026B0  161B               	andwf	??_SetDCPWM1,f,c
  4350  0026B2  50BD               	movf	4029,w,c	;volatile
  4351  0026B4  0BCF               	andlw	207
  4352  0026B6  101B               	iorwf	??_SetDCPWM1,w,c
  4353  0026B8  6EBD               	movwf	4029,c	;volatile
  4354  0026BA  0012               	return	
  4355  0026BC                     __end_of_SetDCPWM1:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           indf0	equ	0xFEF
  4365                           postinc0	equ	0xFEE
  4366                           fsr0h	equ	0xFEA
  4367                           fsr0l	equ	0xFE9
  4368                           wreg	equ	0xFE8
  4369                           postinc1	equ	0xFE6
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _Lcd_Write_Integer *****************
  4379 ;; Defined at:
  4380 ;;		line 113 in file "lcd.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  a               2   88[BANK0 ] int 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  s              20   90[BANK0 ] unsigned char [20]
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4394 ;;      Params:         0       2       0       0       0       0       0       0       0
  4395 ;;      Locals:         0      20       0       0       0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4397 ;;      Totals:         0      22       0       0       0       0       0       0       0
  4398 ;;Total ram usage:       22 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    8
  4401 ;; This function calls:
  4402 ;;		_Lcd_Write_String
  4403 ;;		_sprintf
  4404 ;; This function is called by:
  4405 ;;		_Comando_Tablet
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text26
  4410  0026BC                     __ptext26:
  4411                           	opt stack 0
  4412  0026BC                     _Lcd_Write_Integer:
  4413                           	opt stack 21
  4414                           
  4415                           ;lcd.c: 114: unsigned char s[20];
  4416                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  4417                           
  4418                           ;incstack = 0
  4419  0026BC  0100               	movlb	0	; () banked
  4420  0026BE  0E00               	movlw	high Lcd_Write_Integer@s
  4421  0026C0  0100               	movlb	0	; () banked
  4422  0026C2  6F89               	movwf	(sprintf@sp+1)& (0+255),b
  4423  0026C4  0100               	movlb	0	; () banked
  4424  0026C6  0EBA               	movlw	low Lcd_Write_Integer@s
  4425  0026C8  0100               	movlb	0	; () banked
  4426  0026CA  6F88               	movwf	sprintf@sp& (0+255),b
  4427  0026CC  0E7F               	movlw	high STR_18
  4428  0026CE  0100               	movlb	0	; () banked
  4429  0026D0  6F8B               	movwf	(sprintf@f+1)& (0+255),b
  4430  0026D2  0EAC               	movlw	low STR_18
  4431  0026D4  0100               	movlb	0	; () banked
  4432  0026D6  6F8A               	movwf	sprintf@f& (0+255),b
  4433  0026D8  C0B8  F08C         	movff	Lcd_Write_Integer@a,?_sprintf+4
  4434  0026DC  C0B9  F08D         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  4435  0026E0  EC0E  F000         	call	_sprintf	;wreg free
  4436                           
  4437                           ;lcd.c: 117: Lcd_Write_String(s);
  4438  0026E4  0100               	movlb	0	; () banked
  4439  0026E6  0E00               	movlw	high Lcd_Write_Integer@s
  4440  0026E8  6E1E               	movwf	Lcd_Write_String@a+1,c
  4441  0026EA  0100               	movlb	0	; () banked
  4442  0026EC  0EBA               	movlw	low Lcd_Write_Integer@s
  4443  0026EE  6E1D               	movwf	Lcd_Write_String@a,c
  4444  0026F0  ECD3  F010         	call	_Lcd_Write_String	;wreg free
  4445  0026F4  0012               	return	
  4446  0026F6                     __end_of_Lcd_Write_Integer:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           indf0	equ	0xFEF
  4456                           postinc0	equ	0xFEE
  4457                           fsr0h	equ	0xFEA
  4458                           fsr0l	equ	0xFE9
  4459                           wreg	equ	0xFE8
  4460                           postinc1	equ	0xFE6
  4461                           postdec1	equ	0xFE5
  4462                           fsr1l	equ	0xFE1
  4463                           indf2	equ	0xFDF
  4464                           postinc2	equ	0xFDE
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _sprintf *****************
  4470 ;; Defined at:
  4471 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  sp              2   40[BANK0 ] PTR unsigned char 
  4474 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), putcBluetoothInt@s(20), 
  4475 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4476 ;;		 -> STR_18(13), STR_17(11), STR_5(3), 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  vd              4   60[BANK0 ] unsigned long 
  4479 ;;  vd              4   64[BANK0 ] unsigned long 
  4480 ;;  _val            5   77[BANK0 ] struct .
  4481 ;;  fval            3   84[BANK0 ] struct .
  4482 ;;  integ           3   72[BANK0 ] struct .
  4483 ;;  ival            3    0        struct .
  4484 ;;  exp             2   82[BANK0 ] int 
  4485 ;;  prec            2   75[BANK0 ] int 
  4486 ;;  flag            2   70[BANK0 ] unsigned short 
  4487 ;;  ap              2   68[BANK0 ] PTR void [1]
  4488 ;;		 -> ?_sprintf(2), 
  4489 ;;  width           2    0        int 
  4490 ;;  c               1   87[BANK0 ] char 
  4491 ;;  d               1    0        unsigned char 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  2   40[BANK0 ] int 
  4494 ;; Registers used:
  4495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4501 ;;      Params:         0       7       0       0       0       0       0       0       0
  4502 ;;      Locals:         0      35       0       0       0       0       0       0       0
  4503 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4504 ;;      Totals:         0      48       0       0       0       0       0       0       0
  4505 ;;Total ram usage:       48 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    7
  4508 ;; This function calls:
  4509 ;;		___awdiv
  4510 ;;		___ftadd
  4511 ;;		___ftge
  4512 ;;		___ftmul
  4513 ;;		___ftneg
  4514 ;;		___ftsub
  4515 ;;		___fttol
  4516 ;;		___lldiv
  4517 ;;		___llmod
  4518 ;;		___lltoft
  4519 ;;		___wmul
  4520 ;;		__div_to_l_
  4521 ;;		__tdiv_to_l_
  4522 ;;		_fround
  4523 ;;		_scale
  4524 ;; This function is called by:
  4525 ;;		_putcBluetoothInt
  4526 ;;		_Lcd_Write_Integer
  4527 ;;		_Lcd_Write_Float
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text27
  4532  00001C                     __ptext27:
  4533                           	opt stack 0
  4534  00001C                     _sprintf:
  4535                           	opt stack 21
  4536                           
  4537                           ;doprnt.c: 494: va_list ap;
  4538                           ;doprnt.c: 499: signed char c;
  4539                           ;doprnt.c: 501: int width;
  4540                           ;doprnt.c: 504: int prec;
  4541                           ;doprnt.c: 508: unsigned short flag;
  4542                           ;doprnt.c: 515: char d;
  4543                           ;doprnt.c: 516: double fval, integ;
  4544                           ;doprnt.c: 517: int exp;
  4545                           ;doprnt.c: 518: double ival;
  4546                           ;doprnt.c: 519: union {
  4547                           ;doprnt.c: 520: unsigned long _val;
  4548                           ;doprnt.c: 521: struct {
  4549                           ;doprnt.c: 522: const char * _cp;
  4550                           ;doprnt.c: 523: unsigned _len;
  4551                           ;doprnt.c: 524: } _str;
  4552                           ;doprnt.c: 525: } _val;
  4553                           ;doprnt.c: 542: *ap = __va_start();
  4554                           
  4555                           ;incstack = 0
  4556  00001C  0100               	movlb	0	; () banked
  4557  00001E  0E00               	movlw	high (?_sprintf+4)
  4558  000020  0100               	movlb	0	; () banked
  4559  000022  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  4560  000024  0100               	movlb	0	; () banked
  4561  000026  0E8C               	movlw	low (?_sprintf+4)
  4562  000028  0100               	movlb	0	; () banked
  4563  00002A  6FA4               	movwf	sprintf@ap& (0+255),b
  4564                           
  4565                           ;doprnt.c: 545: while(c = *f++) {
  4566  00002C  EF87  F004         	goto	l5331
  4567  000030                     l5129:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;doprnt.c: 547: if(c != '%')
  4571  000030  0100               	movlb	0	; () banked
  4572  000032  51B7               	movf	sprintf@c& (0+255),w,b
  4573  000034  0A25               	xorlw	37
  4574  000036  B4D8               	btfsc	status,2,c
  4575  000038  D00C               	goto	l5135
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;doprnt.c: 549: {
  4579                           ;doprnt.c: 550: ((*sp++ = (c)));
  4580  00003A  C088  FFD9         	movff	sprintf@sp,fsr2l
  4581  00003E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  4582  000042  0100               	movlb	0	; () banked
  4583  000044  C0B7  FFDF         	movff	sprintf@c,indf2
  4584                           
  4585                           ; BSR set to: 0
  4586  000048  0100               	movlb	0	; () banked
  4587  00004A  4B88               	infsnz	sprintf@sp& (0+255),f,b
  4588  00004C  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  4589                           
  4590                           ;doprnt.c: 551: continue;
  4591  00004E  EF87  F004         	goto	l5331
  4592  000052                     l5135:
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;doprnt.c: 552: }
  4596                           ;doprnt.c: 557: flag = 0;
  4597  000052  0E00               	movlw	0
  4598  000054  0100               	movlb	0	; () banked
  4599  000056  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  4600  000058  0E00               	movlw	0
  4601  00005A  0100               	movlb	0	; () banked
  4602  00005C  6FA6               	movwf	sprintf@flag& (0+255),b
  4603                           
  4604                           ;doprnt.c: 644: switch(c = *f++) {
  4605  00005E  D003               	goto	l5141
  4606  000060                     l5137:
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 672: flag |= 0x400;
  4610  000060  0100               	movlb	0	; () banked
  4611  000062  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  4612                           
  4613                           ;doprnt.c: 673: break;
  4614  000064  D01E               	goto	l5143
  4615  000066                     l5141:
  4616                           
  4617                           ; BSR set to: 0
  4618  000066  0100               	movlb	0	; () banked
  4619  000068  C08A  FFF6         	movff	sprintf@f,tblptrl
  4620  00006C  0100               	movlb	0	; () banked
  4621  00006E  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  4622  000072  0100               	movlb	0	; () banked
  4623  000074  4B8A               	infsnz	sprintf@f& (0+255),f,b
  4624  000076  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  4625  000078                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4626  000078  6AF8               	clrf	tblptru,c
  4627  00007A                     	endif
  4628  00007A                     	if	0	;tblptru may be non-zero
  4629  00007A                     	endif
  4630  00007A  0008               	tblrd		*
  4631  00007C  0100               	movlb	0	; () banked
  4632  00007E  CFF5 F0B7          	movff	tablat,sprintf@c
  4633  000082  0100               	movlb	0	; () banked
  4634  000084  51B7               	movf	sprintf@c& (0+255),w,b
  4635                           
  4636                           ; Switch size 1, requested type "space"
  4637                           ; Number of cases is 4, Range of values is 0 to 105
  4638                           ; switch strategies available:
  4639                           ; Name         Instructions Cycles
  4640                           ; simple_byte           13     7 (average)
  4641                           ;	Chosen strategy is simple_byte
  4642  000086  0A00               	xorlw	0	; case 0
  4643  000088  B4D8               	btfsc	status,2,c
  4644  00008A  EF99  F004         	goto	l5333
  4645  00008E  0A64               	xorlw	100	; case 100
  4646  000090  B4D8               	btfsc	status,2,c
  4647  000092  D007               	goto	l5143
  4648  000094  0A02               	xorlw	2	; case 102
  4649  000096  B4D8               	btfsc	status,2,c
  4650  000098  D7E3               	goto	l5137
  4651  00009A  0A0F               	xorlw	15	; case 105
  4652  00009C  A4D8               	btfss	status,2,c
  4653  00009E  EF87  F004         	goto	l5331
  4654  0000A2                     l5143:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;doprnt.c: 834: if(flag & (0x700)) {
  4658  0000A2  0E07               	movlw	7
  4659  0000A4  0100               	movlb	0	; () banked
  4660  0000A6  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4661  0000A8  B4D8               	btfsc	status,2,c
  4662  0000AA  D348               	goto	l5291
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;doprnt.c: 838: prec = 6;
  4666  0000AC  0E00               	movlw	0
  4667  0000AE  0100               	movlb	0	; () banked
  4668  0000B0  6FAC               	movwf	(sprintf@prec+1)& (0+255),b
  4669  0000B2  0E06               	movlw	6
  4670  0000B4  0100               	movlb	0	; () banked
  4671  0000B6  6FAB               	movwf	sprintf@prec& (0+255),b
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4675  0000B8  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  4676  0000BC  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  4677  0000C0  0100               	movlb	0	; () banked
  4678  0000C2  CFDE F0B4          	movff	postinc2,sprintf@fval
  4679  0000C6  0100               	movlb	0	; () banked
  4680  0000C8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  4681  0000CC  0100               	movlb	0	; () banked
  4682  0000CE  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  4683                           
  4684                           ; BSR set to: 0
  4685  0000D2  0E03               	movlw	3
  4686  0000D4  0100               	movlb	0	; () banked
  4687  0000D6  27A4               	addwf	sprintf@ap& (0+255),f,b
  4688  0000D8  0E00               	movlw	0
  4689  0000DA  0100               	movlb	0	; () banked
  4690  0000DC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;doprnt.c: 840: if(fval < 0.0) {
  4694  0000DE  0100               	movlb	0	; () banked
  4695  0000E0  51B6               	movf	(sprintf@fval+2)& (0+255),w,b
  4696  0000E2  0A80               	xorlw	128
  4697  0000E4  0F80               	addlw	128
  4698  0000E6  E107               	bnz	u5905
  4699  0000E8  0E00               	movlw	0
  4700  0000EA  0100               	movlb	0	; () banked
  4701  0000EC  5DB5               	subwf	(sprintf@fval+1)& (0+255),w,b
  4702  0000EE  E103               	bnz	u5905
  4703  0000F0  0E00               	movlw	0
  4704  0000F2  0100               	movlb	0	; () banked
  4705  0000F4  5DB4               	subwf	sprintf@fval& (0+255),w,b
  4706  0000F6                     u5905:
  4707  0000F6  B0D8               	btfsc	status,0,c
  4708  0000F8  D011               	goto	l5157
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;doprnt.c: 841: fval = -fval;
  4712  0000FA  C0B4  F019         	movff	sprintf@fval,___ftneg@f1
  4713  0000FE  C0B5  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4714  000102  C0B6  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4715  000106  EC27  F014         	call	___ftneg	;wreg free
  4716  00010A  C019  F0B4         	movff	?___ftneg,sprintf@fval
  4717  00010E  C01A  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  4718  000112  C01B  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  4719                           
  4720                           ;doprnt.c: 842: flag |= 0x03;
  4721  000116  0E03               	movlw	3
  4722  000118  0100               	movlb	0	; () banked
  4723  00011A  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4724  00011C                     l5157:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 843: }
  4728                           ;doprnt.c: 844: exp = 0;
  4729  00011C  0E00               	movlw	0
  4730  00011E  0100               	movlb	0	; () banked
  4731  000120  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4732  000122  0E00               	movlw	0
  4733  000124  0100               	movlb	0	; () banked
  4734  000126  6FB2               	movwf	sprintf@exp& (0+255),b
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;doprnt.c: 845: if( fval!=0) {
  4738  000128  0E7F               	movlw	127
  4739  00012A  0100               	movlb	0	; () banked
  4740  00012C  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4741  00012E  0100               	movlb	0	; () banked
  4742  000130  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4743  000132  0100               	movlb	0	; () banked
  4744  000134  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4745  000136  B4D8               	btfsc	status,2,c
  4746  000138  D09C               	goto	l5185
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4750  00013A  0E82               	movlw	130
  4751  00013C  0100               	movlb	0	; () banked
  4752  00013E  6F8F               	movwf	??_sprintf& (0+255),b
  4753  000140  0EFF               	movlw	255
  4754  000142  6F90               	movwf	(??_sprintf+1)& (0+255),b
  4755  000144  0100               	movlb	0	; () banked
  4756  000146  C0B4  F091         	movff	sprintf@fval,??_sprintf+2
  4757  00014A  0100               	movlb	0	; () banked
  4758  00014C  C0B5  F092         	movff	sprintf@fval+1,??_sprintf+3
  4759  000150  0100               	movlb	0	; () banked
  4760  000152  C0B6  F093         	movff	sprintf@fval+2,??_sprintf+4
  4761  000156  0100               	movlb	0	; () banked
  4762  000158  C0B7  F094         	movff	sprintf@fval+3,??_sprintf+5
  4763  00015C  0E10               	movlw	16
  4764  00015E  D006               	goto	u5920
  4765  000160                     u5925:
  4766  000160  0100               	movlb	0	; () banked
  4767  000162  90D8               	bcf	status,0,c
  4768  000164  3394               	rrcf	(??_sprintf+5)& (0+255),f,b
  4769  000166  3393               	rrcf	(??_sprintf+4)& (0+255),f,b
  4770  000168  3392               	rrcf	(??_sprintf+3)& (0+255),f,b
  4771  00016A  3391               	rrcf	(??_sprintf+2)& (0+255),f,b
  4772  00016C                     u5920:
  4773  00016C  2EE8               	decfsz	wreg,f,c
  4774  00016E  D7F8               	goto	u5925
  4775  000170  0100               	movlb	0	; () banked
  4776  000172  5191               	movf	(??_sprintf+2)& (0+255),w,b
  4777  000174  0100               	movlb	0	; () banked
  4778  000176  258F               	addwf	??_sprintf& (0+255),w,b
  4779  000178  0100               	movlb	0	; () banked
  4780  00017A  6FB2               	movwf	sprintf@exp& (0+255),b
  4781  00017C  0E00               	movlw	0
  4782  00017E  0100               	movlb	0	; () banked
  4783  000180  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  4784  000182  0100               	movlb	0	; () banked
  4785  000184  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 847: exp--;
  4789  000186  0100               	movlb	0	; () banked
  4790  000188  07B2               	decf	sprintf@exp& (0+255),f,b
  4791  00018A  A0D8               	btfss	status,0,c
  4792  00018C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;doprnt.c: 848: exp *= 3;
  4796  00018E  C0B2  F027         	movff	sprintf@exp,___wmul@multiplier
  4797  000192  C0B3  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4798  000196  0E00               	movlw	0
  4799  000198  6E2A               	movwf	___wmul@multiplicand+1,c
  4800  00019A  0E03               	movlw	3
  4801  00019C  6E29               	movwf	___wmul@multiplicand,c
  4802  00019E  EC14  F014         	call	___wmul	;wreg free
  4803  0001A2  C027  F0B2         	movff	?___wmul,sprintf@exp
  4804  0001A6  C028  F0B3         	movff	?___wmul+1,sprintf@exp+1
  4805                           
  4806                           ;doprnt.c: 849: exp /= 10;
  4807  0001AA  C0B2  F01F         	movff	sprintf@exp,___awdiv@dividend
  4808  0001AE  C0B3  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4809  0001B2  0E00               	movlw	0
  4810  0001B4  6E22               	movwf	___awdiv@divisor+1,c
  4811  0001B6  0E0A               	movlw	10
  4812  0001B8  6E21               	movwf	___awdiv@divisor,c
  4813  0001BA  EC5B  F00E         	call	___awdiv	;wreg free
  4814  0001BE  C01F  F0B2         	movff	?___awdiv,sprintf@exp
  4815  0001C2  C020  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  4816                           
  4817                           ;doprnt.c: 850: if(exp < 0)
  4818  0001C6  0100               	movlb	0	; () banked
  4819  0001C8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4820  0001CA  0A80               	xorlw	128
  4821  0001CC  6EF3               	movwf	prodl,c
  4822  0001CE  0E80               	movlw	128
  4823  0001D0  5CF3               	subwf	prodl,w,c
  4824  0001D2  0E00               	movlw	0
  4825  0001D4  B4D8               	btfsc	status,2,c
  4826  0001D6  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4827  0001D8  B0D8               	btfsc	status,0,c
  4828  0001DA  D004               	goto	l5173
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;doprnt.c: 851: exp--;
  4832  0001DC  0100               	movlb	0	; () banked
  4833  0001DE  07B2               	decf	sprintf@exp& (0+255),f,b
  4834  0001E0  A0D8               	btfss	status,0,c
  4835  0001E2  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4836  0001E4                     l5173:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;doprnt.c: 855: integ = scale(-exp);
  4840  0001E4  0100               	movlb	0	; () banked
  4841  0001E6  51B2               	movf	sprintf@exp& (0+255),w,b
  4842  0001E8  0800               	sublw	0
  4843  0001EA  ECA0  F004         	call	_scale
  4844  0001EE  C06C  F0A8         	movff	?_scale,sprintf@integ
  4845  0001F2  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  4846  0001F6  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  4847                           
  4848                           ;doprnt.c: 856: integ *= fval;
  4849  0001FA  C0A8  F060         	movff	sprintf@integ,___ftmul@f1
  4850  0001FE  C0A9  F061         	movff	sprintf@integ+1,___ftmul@f1+1
  4851  000202  C0AA  F062         	movff	sprintf@integ+2,___ftmul@f1+2
  4852  000206  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  4853  00020A  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  4854  00020E  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  4855  000212  EC6F  F009         	call	___ftmul	;wreg free
  4856  000216  C060  F0A8         	movff	?___ftmul,sprintf@integ
  4857  00021A  C061  F0A9         	movff	?___ftmul+1,sprintf@integ+1
  4858  00021E  C062  F0AA         	movff	?___ftmul+2,sprintf@integ+2
  4859                           
  4860                           ;doprnt.c: 857: if(integ < 1.0)
  4861  000222  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4862  000226  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4863  00022A  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4864  00022E  0E00               	movlw	0
  4865  000230  6E1C               	movwf	___ftge@ff2,c
  4866  000232  0E80               	movlw	128
  4867  000234  6E1D               	movwf	___ftge@ff2+1,c
  4868  000236  0E3F               	movlw	63
  4869  000238  6E1E               	movwf	___ftge@ff2+2,c
  4870  00023A  EC8B  F00F         	call	___ftge	;wreg free
  4871  00023E  B0D8               	btfsc	status,0,c
  4872  000240  D005               	goto	l5181
  4873                           
  4874                           ;doprnt.c: 858: exp--;
  4875  000242  0100               	movlb	0	; () banked
  4876  000244  07B2               	decf	sprintf@exp& (0+255),f,b
  4877  000246  A0D8               	btfss	status,0,c
  4878  000248  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  4879  00024A  D013               	goto	l5185
  4880  00024C                     l5181:
  4881                           
  4882                           ;doprnt.c: 859: else if(integ >= 10.0)
  4883  00024C  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4884  000250  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4885  000254  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4886  000258  0E00               	movlw	0
  4887  00025A  6E1C               	movwf	___ftge@ff2,c
  4888  00025C  0E20               	movlw	32
  4889  00025E  6E1D               	movwf	___ftge@ff2+1,c
  4890  000260  0E41               	movlw	65
  4891  000262  6E1E               	movwf	___ftge@ff2+2,c
  4892  000264  EC8B  F00F         	call	___ftge	;wreg free
  4893  000268  A0D8               	btfss	status,0,c
  4894  00026A  D003               	goto	l5185
  4895                           
  4896                           ;doprnt.c: 860: exp++;
  4897  00026C  0100               	movlb	0	; () banked
  4898  00026E  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  4899  000270  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  4900  000272                     l5185:
  4901                           
  4902                           ;doprnt.c: 861: }
  4903                           ;doprnt.c: 1121: if(prec <= 12)
  4904  000272  0100               	movlb	0	; () banked
  4905  000274  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  4906  000276  0A80               	xorlw	128
  4907  000278  6EF3               	movwf	prodl,c
  4908  00027A  0E80               	movlw	128
  4909  00027C  5CF3               	subwf	prodl,w,c
  4910  00027E  0E0D               	movlw	13
  4911  000280  B4D8               	btfsc	status,2,c
  4912  000282  5DAB               	subwf	sprintf@prec& (0+255),w,b
  4913  000284  B0D8               	btfsc	status,0,c
  4914  000286  D018               	goto	l5189
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;doprnt.c: 1122: fval += fround(prec);
  4918  000288  C0B4  F076         	movff	sprintf@fval,___ftadd@f1
  4919  00028C  C0B5  F077         	movff	sprintf@fval+1,___ftadd@f1+1
  4920  000290  C0B6  F078         	movff	sprintf@fval+2,___ftadd@f1+2
  4921  000294  0100               	movlb	0	; () banked
  4922  000296  51AB               	movf	sprintf@prec& (0+255),w,b
  4923  000298  ECDC  F006         	call	_fround
  4924  00029C  C06C  F079         	movff	?_fround,___ftadd@f2
  4925  0002A0  C06D  F07A         	movff	?_fround+1,___ftadd@f2+1
  4926  0002A4  C06E  F07B         	movff	?_fround+2,___ftadd@f2+2
  4927  0002A8  EC2F  F008         	call	___ftadd	;wreg free
  4928  0002AC  C076  F0B4         	movff	?___ftadd,sprintf@fval
  4929  0002B0  C077  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  4930  0002B4  C078  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  4931  0002B8                     l5189:
  4932                           
  4933                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4934  0002B8  0100               	movlb	0	; () banked
  4935  0002BA  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4936  0002BC  0A80               	xorlw	128
  4937  0002BE  6EF3               	movwf	prodl,c
  4938  0002C0  0E80               	movlw	128
  4939  0002C2  5CF3               	subwf	prodl,w,c
  4940  0002C4  0E0A               	movlw	10
  4941  0002C6  B4D8               	btfsc	status,2,c
  4942  0002C8  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4943  0002CA  B0D8               	btfsc	status,0,c
  4944  0002CC  D029               	goto	l5197
  4945                           
  4946                           ; BSR set to: 0
  4947  0002CE  0E7F               	movlw	127
  4948  0002D0  0100               	movlb	0	; () banked
  4949  0002D2  15B6               	andwf	(sprintf@fval+2)& (0+255),w,b
  4950  0002D4  0100               	movlb	0	; () banked
  4951  0002D6  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4952  0002D8  0100               	movlb	0	; () banked
  4953  0002DA  11B4               	iorwf	sprintf@fval& (0+255),w,b
  4954  0002DC  B4D8               	btfsc	status,2,c
  4955  0002DE  D06C               	goto	l5213
  4956                           
  4957                           ; BSR set to: 0
  4958  0002E0  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  4959  0002E4  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  4960  0002E8  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  4961  0002EC  EC1B  F00A         	call	___fttol	;wreg free
  4962  0002F0  C073  F08F         	movff	?___fttol,??_sprintf
  4963  0002F4  C074  F090         	movff	?___fttol+1,??_sprintf+1
  4964  0002F8  C075  F091         	movff	?___fttol+2,??_sprintf+2
  4965  0002FC  C076  F092         	movff	?___fttol+3,??_sprintf+3
  4966  000300  0100               	movlb	0	; () banked
  4967  000302  5192               	movf	(??_sprintf+3)& (0+255),w,b
  4968  000304  118F               	iorwf	??_sprintf& (0+255),w,b
  4969  000306  1190               	iorwf	(??_sprintf+1)& (0+255),w,b
  4970  000308  1191               	iorwf	(??_sprintf+2)& (0+255),w,b
  4971  00030A  A4D8               	btfss	status,2,c
  4972  00030C  D055               	goto	l5213
  4973                           
  4974                           ; BSR set to: 0
  4975  00030E  0100               	movlb	0	; () banked
  4976  000310  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  4977  000312  0A80               	xorlw	128
  4978  000314  0F80               	addlw	-128
  4979  000316  0E02               	movlw	2
  4980  000318  B4D8               	btfsc	status,2,c
  4981  00031A  5DB2               	subwf	sprintf@exp& (0+255),w,b
  4982  00031C  A0D8               	btfss	status,0,c
  4983  00031E  D04C               	goto	l5213
  4984  000320                     l5197:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4988  000320  C0A8  F019         	movff	sprintf@integ,___ftge@ff1
  4989  000324  C0A9  F01A         	movff	sprintf@integ+1,___ftge@ff1+1
  4990  000328  C0AA  F01B         	movff	sprintf@integ+2,___ftge@ff1+2
  4991  00032C  0E70               	movlw	112
  4992  00032E  6E1C               	movwf	___ftge@ff2,c
  4993  000330  0E89               	movlw	137
  4994  000332  6E1D               	movwf	___ftge@ff2+1,c
  4995  000334  0E40               	movlw	64
  4996  000336  6E1E               	movwf	___ftge@ff2+2,c
  4997  000338  EC8B  F00F         	call	___ftge	;wreg free
  4998  00033C  B0D8               	btfsc	status,0,c
  4999  00033E  D003               	goto	l5201
  5000                           
  5001                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5002  000340  0100               	movlb	0	; () banked
  5003  000342  0EF7               	movlw	247
  5004  000344  D002               	goto	L8
  5005  000346                     l5201:
  5006                           
  5007                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5008  000346  0100               	movlb	0	; () banked
  5009  000348  0EF8               	movlw	248
  5010  00034A                     L8:
  5011  00034A  0100               	movlb	0	; () banked
  5012  00034C  27B2               	addwf	sprintf@exp& (0+255),f,b
  5013  00034E  0EFF               	movlw	255
  5014  000350  0100               	movlb	0	; () banked
  5015  000352  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 1133: }
  5019                           ;doprnt.c: 1134: integ = scale(exp);
  5020                           
  5021                           ; BSR set to: 0
  5022  000354  0100               	movlb	0	; () banked
  5023  000356  51B2               	movf	sprintf@exp& (0+255),w,b
  5024  000358  ECA0  F004         	call	_scale
  5025  00035C  C06C  F0A8         	movff	?_scale,sprintf@integ
  5026  000360  C06D  F0A9         	movff	?_scale+1,sprintf@integ+1
  5027  000364  C06E  F0AA         	movff	?_scale+2,sprintf@integ+2
  5028                           
  5029                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5030  000368  C0B4  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  5031  00036C  C0B5  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5032  000370  C0B6  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5033  000374  C0A8  F01C         	movff	sprintf@integ,__tdiv_to_l_@f2
  5034  000378  C0A9  F01D         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5035  00037C  C0AA  F01E         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5036  000380  ECFC  F00B         	call	__tdiv_to_l_	;wreg free
  5037  000384  C019  F098         	movff	?__tdiv_to_l_,_sprintf$1468
  5038  000388  C01A  F099         	movff	?__tdiv_to_l_+1,_sprintf$1468+1
  5039  00038C  C01B  F09A         	movff	?__tdiv_to_l_+2,_sprintf$1468+2
  5040  000390  C01C  F09B         	movff	?__tdiv_to_l_+3,_sprintf$1468+3
  5041  000394  C098  F0AD         	movff	_sprintf$1468,sprintf@_val
  5042  000398  C099  F0AE         	movff	_sprintf$1468+1,sprintf@_val+1
  5043  00039C  C09A  F0AF         	movff	_sprintf$1468+2,sprintf@_val+2
  5044  0003A0  C09B  F0B0         	movff	_sprintf$1468+3,sprintf@_val+3
  5045                           
  5046                           ;doprnt.c: 1138: fval = 0.0;
  5047  0003A4  0E00               	movlw	0
  5048  0003A6  0100               	movlb	0	; () banked
  5049  0003A8  6FB4               	movwf	sprintf@fval& (0+255),b
  5050  0003AA  0E00               	movlw	0
  5051  0003AC  0100               	movlb	0	; () banked
  5052  0003AE  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  5053  0003B0  0E00               	movlw	0
  5054  0003B2  0100               	movlb	0	; () banked
  5055  0003B4  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  5056                           
  5057                           ;doprnt.c: 1139: } else {
  5058  0003B6  D034               	goto	l5217
  5059  0003B8                     l5213:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5063  0003B8  C0B4  F073         	movff	sprintf@fval,___fttol@f1
  5064  0003BC  C0B5  F074         	movff	sprintf@fval+1,___fttol@f1+1
  5065  0003C0  C0B6  F075         	movff	sprintf@fval+2,___fttol@f1+2
  5066  0003C4  EC1B  F00A         	call	___fttol	;wreg free
  5067  0003C8  C073  F0AD         	movff	?___fttol,sprintf@_val
  5068  0003CC  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5069  0003D0  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5070  0003D4  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5071                           
  5072                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5073  0003D8  C0B4  F082         	movff	sprintf@fval,___ftsub@f1
  5074  0003DC  C0B5  F083         	movff	sprintf@fval+1,___ftsub@f1+1
  5075  0003E0  C0B6  F084         	movff	sprintf@fval+2,___ftsub@f1+2
  5076  0003E4  C0AD  F021         	movff	sprintf@_val,___lltoft@c
  5077  0003E8  C0AE  F022         	movff	sprintf@_val+1,___lltoft@c+1
  5078  0003EC  C0AF  F023         	movff	sprintf@_val+2,___lltoft@c+2
  5079  0003F0  C0B0  F024         	movff	sprintf@_val+3,___lltoft@c+3
  5080  0003F4  EC22  F012         	call	___lltoft	;wreg free
  5081  0003F8  C021  F085         	movff	?___lltoft,___ftsub@f2
  5082  0003FC  C022  F086         	movff	?___lltoft+1,___ftsub@f2+1
  5083  000400  C023  F087         	movff	?___lltoft+2,___ftsub@f2+2
  5084  000404  ECE9  F012         	call	___ftsub	;wreg free
  5085  000408  C082  F0B4         	movff	?___ftsub,sprintf@fval
  5086  00040C  C083  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  5087  000410  C084  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  5088                           
  5089                           ;doprnt.c: 1142: exp = 0;
  5090  000414  0E00               	movlw	0
  5091  000416  0100               	movlb	0	; () banked
  5092  000418  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  5093  00041A  0E00               	movlw	0
  5094  00041C  0100               	movlb	0	; () banked
  5095  00041E  6FB2               	movwf	sprintf@exp& (0+255),b
  5096  000420                     l5217:
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;doprnt.c: 1143: }
  5100                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5101  000420  0E01               	movlw	1
  5102  000422  0100               	movlb	0	; () banked
  5103  000424  6FB7               	movwf	sprintf@c& (0+255),b
  5104  000426                     
  5105                           ; BSR set to: 0
  5106  000426  0100               	movlb	0	; () banked
  5107  000428  51B7               	movf	sprintf@c& (0+255),w,b
  5108  00042A  0A0A               	xorlw	10
  5109  00042C  B4D8               	btfsc	status,2,c
  5110  00042E  D021               	goto	l5231
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5114                           
  5115                           ; BSR set to: 0
  5116                           
  5117                           ; BSR set to: 0
  5118  000430  0100               	movlb	0	; () banked
  5119  000432  51B7               	movf	sprintf@c& (0+255),w,b
  5120  000434  0D04               	mullw	4
  5121  000436  0ECD               	movlw	low _dpowers
  5122  000438  24F3               	addwf	prodl,w,c
  5123  00043A  6EF6               	movwf	tblptrl,c
  5124  00043C  0E7E               	movlw	high _dpowers
  5125  00043E  20F4               	addwfc	prodh,w,c
  5126  000440  6EF7               	movwf	tblptrh,c
  5127  000442                     	if	1	;There are 3 active tblptr bytes
  5128  000442  6AF8               	clrf	tblptru,c
  5129  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  5130  000446  22F8               	addwfc	tblptru,f,c
  5131  000448                     	endif
  5132  000448  0009               	tblrd		*+
  5133  00044A  50F5               	movf	tablat,w,c
  5134  00044C  0100               	movlb	0	; () banked
  5135  00044E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5136  000450  0009               	tblrd		*+
  5137  000452  50F5               	movf	tablat,w,c
  5138  000454  0100               	movlb	0	; () banked
  5139  000456  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5140  000458  0009               	tblrd		*+
  5141  00045A  50F5               	movf	tablat,w,c
  5142  00045C  0100               	movlb	0	; () banked
  5143  00045E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5144  000460  0009               	tblrd		*+
  5145  000462  50F5               	movf	tablat,w,c
  5146  000464  0100               	movlb	0	; () banked
  5147  000466  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5148  000468  A0D8               	btfss	status,0,c
  5149  00046A  D003               	goto	l5231
  5150                           
  5151                           ; BSR set to: 0
  5152                           
  5153                           ; BSR set to: 0
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;doprnt.c: 1147: break;
  5157  00046C  0100               	movlb	0	; () banked
  5158  00046E  2BB7               	incf	sprintf@c& (0+255),f,b
  5159  000470  D7DA               	goto	L9
  5160  000472                     l5231:
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;doprnt.c: 1184: {
  5164                           ;doprnt.c: 1197: if(flag & 0x03)
  5165  000472  0E03               	movlw	3
  5166  000474  0100               	movlb	0	; () banked
  5167  000476  15A6               	andwf	sprintf@flag& (0+255),w,b
  5168  000478  0100               	movlb	0	; () banked
  5169  00047A  6F8F               	movwf	??_sprintf& (0+255),b
  5170  00047C  0E00               	movlw	0
  5171  00047E  0100               	movlb	0	; () banked
  5172  000480  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5173  000482  0100               	movlb	0	; () banked
  5174  000484  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5175  000486  0100               	movlb	0	; () banked
  5176  000488  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5177  00048A  118F               	iorwf	??_sprintf& (0+255),w,b
  5178  00048C  B4D8               	btfsc	status,2,c
  5179  00048E  D055               	goto	l5245
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5183  000490  C088  FFD9         	movff	sprintf@sp,fsr2l
  5184  000494  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5185  000498  0E2D               	movlw	45
  5186  00049A  D04B               	goto	L10
  5187  00049C                     l5237:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;doprnt.c: 1209: {
  5191                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5192  00049C  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5193  0004A0  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5194  0004A4  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5195  0004A8  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5196  0004AC  0100               	movlb	0	; () banked
  5197  0004AE  51B7               	movf	sprintf@c& (0+255),w,b
  5198  0004B0  0D04               	mullw	4
  5199  0004B2  0ECD               	movlw	low _dpowers
  5200  0004B4  24F3               	addwf	prodl,w,c
  5201  0004B6  6EF6               	movwf	tblptrl,c
  5202  0004B8  0E7E               	movlw	high _dpowers
  5203  0004BA  20F4               	addwfc	prodh,w,c
  5204  0004BC  6EF7               	movwf	tblptrh,c
  5205  0004BE                     	if	1	;There are 3 active tblptr bytes
  5206  0004BE  6AF8               	clrf	tblptru,c
  5207  0004C0  0E00               	movlw	low (__mediumconst shr (0+16))
  5208  0004C2  22F8               	addwfc	tblptru,f,c
  5209  0004C4                     	endif
  5210  0004C4  0009               	tblrd		*+
  5211  0004C6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5212  0004CA  0009               	tblrd		*+
  5213  0004CC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5214  0004D0  0009               	tblrd		*+
  5215  0004D2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5216  0004D6  000A               	tblrd		*-
  5217  0004D8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5218  0004DC  EC16  F010         	call	___lldiv	;wreg free
  5219  0004E0  C019  F09C         	movff	?___lldiv,sprintf@vd
  5220  0004E4  C01A  F09D         	movff	?___lldiv+1,sprintf@vd+1
  5221  0004E8  C01B  F09E         	movff	?___lldiv+2,sprintf@vd+2
  5222  0004EC  C01C  F09F         	movff	?___lldiv+3,sprintf@vd+3
  5223                           
  5224                           ;doprnt.c: 1211: vd %= 10;
  5225  0004F0  C09C  F026         	movff	sprintf@vd,___llmod@dividend
  5226  0004F4  C09D  F027         	movff	sprintf@vd+1,___llmod@dividend+1
  5227  0004F8  C09E  F028         	movff	sprintf@vd+2,___llmod@dividend+2
  5228  0004FC  C09F  F029         	movff	sprintf@vd+3,___llmod@dividend+3
  5229  000500  0E0A               	movlw	10
  5230  000502  6E2A               	movwf	___llmod@divisor,c
  5231  000504  0E00               	movlw	0
  5232  000506  6E2B               	movwf	___llmod@divisor+1,c
  5233  000508  0E00               	movlw	0
  5234  00050A  6E2C               	movwf	___llmod@divisor+2,c
  5235  00050C  0E00               	movlw	0
  5236  00050E  6E2D               	movwf	___llmod@divisor+3,c
  5237  000510  ECEF  F011         	call	___llmod	;wreg free
  5238  000514  C026  F09C         	movff	?___llmod,sprintf@vd
  5239  000518  C027  F09D         	movff	?___llmod+1,sprintf@vd+1
  5240  00051C  C028  F09E         	movff	?___llmod+2,sprintf@vd+2
  5241  000520  C029  F09F         	movff	?___llmod+3,sprintf@vd+3
  5242                           
  5243                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5244  000524  0100               	movlb	0	; () banked
  5245  000526  519C               	movf	sprintf@vd& (0+255),w,b
  5246  000528  0F30               	addlw	48
  5247  00052A  C088  FFD9         	movff	sprintf@sp,fsr2l
  5248  00052E  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5249  000532                     L10:
  5250  000532  6EDF               	movwf	indf2,c
  5251                           
  5252                           ; BSR set to: 0
  5253  000534  0100               	movlb	0	; () banked
  5254  000536  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5255  000538  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5256  00053A                     l5245:
  5257                           
  5258                           ; BSR set to: 0
  5259  00053A  0100               	movlb	0	; () banked
  5260  00053C  07B7               	decf	sprintf@c& (0+255),f,b
  5261  00053E  0100               	movlb	0	; () banked
  5262  000540  29B7               	incf	sprintf@c& (0+255),w,b
  5263  000542  B4D8               	btfsc	status,2,c
  5264  000544  D00E               	goto	l5253
  5265  000546  D7AA               	goto	l5237
  5266  000548                     l5247:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5270  000548  C088  FFD9         	movff	sprintf@sp,fsr2l
  5271  00054C  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5272  000550  0E30               	movlw	48
  5273  000552  6EDF               	movwf	indf2,c
  5274                           
  5275                           ; BSR set to: 0
  5276  000554  0100               	movlb	0	; () banked
  5277  000556  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5278  000558  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1218: exp--;
  5282  00055A  0100               	movlb	0	; () banked
  5283  00055C  07B2               	decf	sprintf@exp& (0+255),f,b
  5284  00055E  A0D8               	btfss	status,0,c
  5285  000560  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  5286  000562                     l5253:
  5287                           
  5288                           ; BSR set to: 0
  5289  000562  0100               	movlb	0	; () banked
  5290  000564  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  5291  000566  0A80               	xorlw	128
  5292  000568  6EF3               	movwf	prodl,c
  5293  00056A  0E80               	movlw	128
  5294  00056C  5CF3               	subwf	prodl,w,c
  5295  00056E  0E01               	movlw	1
  5296  000570  B4D8               	btfsc	status,2,c
  5297  000572  5DB2               	subwf	sprintf@exp& (0+255),w,b
  5298  000574  B0D8               	btfsc	status,0,c
  5299  000576  D7E8               	goto	l5247
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;doprnt.c: 1219: }
  5303                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5304                           
  5305                           ; BSR set to: 0
  5306  000578  0100               	movlb	0	; () banked
  5307  00057A  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5308  00057C  0A80               	xorlw	128
  5309  00057E  0F80               	addlw	-128
  5310  000580  0E09               	movlw	9
  5311  000582  B4D8               	btfsc	status,2,c
  5312  000584  5DAB               	subwf	sprintf@prec& (0+255),w,b
  5313  000586  A0D8               	btfss	status,0,c
  5314  000588  D004               	goto	l513
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5318  00058A  0E08               	movlw	8
  5319  00058C  0100               	movlb	0	; () banked
  5320  00058E  6FB7               	movwf	sprintf@c& (0+255),b
  5321  000590  D002               	goto	l5259
  5322  000592                     l513:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;doprnt.c: 1222: else
  5326                           ;doprnt.c: 1223: c = prec;
  5327  000592  C0AB  F0B7         	movff	sprintf@prec,sprintf@c
  5328  000596                     l5259:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;doprnt.c: 1224: prec -= c;
  5332  000596  0100               	movlb	0	; () banked
  5333  000598  51B7               	movf	sprintf@c& (0+255),w,b
  5334  00059A  0100               	movlb	0	; () banked
  5335  00059C  5FAB               	subwf	sprintf@prec& (0+255),f,b
  5336  00059E  0E00               	movlw	0
  5337  0005A0  0100               	movlb	0	; () banked
  5338  0005A2  BFB7               	btfsc	sprintf@c& (0+255),7,b
  5339  0005A4  0EFF               	movlw	255
  5340  0005A6  0100               	movlb	0	; () banked
  5341  0005A8  5BAC               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 1228: if(c)
  5345  0005AA  0100               	movlb	0	; () banked
  5346  0005AC  51B7               	movf	sprintf@c& (0+255),w,b
  5347  0005AE  B4D8               	btfsc	status,2,c
  5348  0005B0  D009               	goto	l5267
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5352  0005B2  C088  FFD9         	movff	sprintf@sp,fsr2l
  5353  0005B6  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5354  0005BA  0E2E               	movlw	46
  5355  0005BC  6EDF               	movwf	indf2,c
  5356                           
  5357                           ; BSR set to: 0
  5358  0005BE  0100               	movlb	0	; () banked
  5359  0005C0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5360  0005C2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5361  0005C4                     l5267:
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5365  0005C4  0100               	movlb	0	; () banked
  5366  0005C6  51B7               	movf	sprintf@c& (0+255),w,b
  5367  0005C8  ECA0  F004         	call	_scale
  5368  0005CC  C06C  F095         	movff	?_scale,_sprintf$2493
  5369  0005D0  C06D  F096         	movff	?_scale+1,_sprintf$2493+1
  5370  0005D4  C06E  F097         	movff	?_scale+2,_sprintf$2493+2
  5371                           
  5372                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5373  0005D8  C0B4  F063         	movff	sprintf@fval,___ftmul@f2
  5374  0005DC  C0B5  F064         	movff	sprintf@fval+1,___ftmul@f2+1
  5375  0005E0  C0B6  F065         	movff	sprintf@fval+2,___ftmul@f2+2
  5376  0005E4  C095  F060         	movff	_sprintf$2493,___ftmul@f1
  5377  0005E8  C096  F061         	movff	_sprintf$2493+1,___ftmul@f1+1
  5378  0005EC  C097  F062         	movff	_sprintf$2493+2,___ftmul@f1+2
  5379  0005F0  EC6F  F009         	call	___ftmul	;wreg free
  5380  0005F4  C060  F073         	movff	?___ftmul,___fttol@f1
  5381  0005F8  C061  F074         	movff	?___ftmul+1,___fttol@f1+1
  5382  0005FC  C062  F075         	movff	?___ftmul+2,___fttol@f1+2
  5383  000600  EC1B  F00A         	call	___fttol	;wreg free
  5384  000604  C073  F0AD         	movff	?___fttol,sprintf@_val
  5385  000608  C074  F0AE         	movff	?___fttol+1,sprintf@_val+1
  5386  00060C  C075  F0AF         	movff	?___fttol+2,sprintf@_val+2
  5387  000610  C076  F0B0         	movff	?___fttol+3,sprintf@_val+3
  5388                           
  5389                           ;doprnt.c: 1237: while(c--) {
  5390  000614  D079               	goto	l5281
  5391  000616                     l5271:
  5392                           
  5393                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5394  000616  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5395  00061A  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5396  00061E  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5397  000622  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5398  000626  0100               	movlb	0	; () banked
  5399  000628  51B7               	movf	sprintf@c& (0+255),w,b
  5400  00062A  0D04               	mullw	4
  5401  00062C  0ECD               	movlw	low _dpowers
  5402  00062E  24F3               	addwf	prodl,w,c
  5403  000630  6EF6               	movwf	tblptrl,c
  5404  000632  0E7E               	movlw	high _dpowers
  5405  000634  20F4               	addwfc	prodh,w,c
  5406  000636  6EF7               	movwf	tblptrh,c
  5407  000638                     	if	1	;There are 3 active tblptr bytes
  5408  000638  6AF8               	clrf	tblptru,c
  5409  00063A  0E00               	movlw	low (__mediumconst shr (0+16))
  5410  00063C  22F8               	addwfc	tblptru,f,c
  5411  00063E                     	endif
  5412  00063E  0009               	tblrd		*+
  5413  000640  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5414  000644  0009               	tblrd		*+
  5415  000646  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5416  00064A  0009               	tblrd		*+
  5417  00064C  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5418  000650  000A               	tblrd		*-
  5419  000652  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5420  000656  EC16  F010         	call	___lldiv	;wreg free
  5421  00065A  C019  F0A0         	movff	?___lldiv,sprintf@vd_1470
  5422  00065E  C01A  F0A1         	movff	?___lldiv+1,sprintf@vd_1470+1
  5423  000662  C01B  F0A2         	movff	?___lldiv+2,sprintf@vd_1470+2
  5424  000666  C01C  F0A3         	movff	?___lldiv+3,sprintf@vd_1470+3
  5425                           
  5426                           ;doprnt.c: 1239: vd %= 10;
  5427  00066A  C0A0  F026         	movff	sprintf@vd_1470,___llmod@dividend
  5428  00066E  C0A1  F027         	movff	sprintf@vd_1470+1,___llmod@dividend+1
  5429  000672  C0A2  F028         	movff	sprintf@vd_1470+2,___llmod@dividend+2
  5430  000676  C0A3  F029         	movff	sprintf@vd_1470+3,___llmod@dividend+3
  5431  00067A  0E0A               	movlw	10
  5432  00067C  6E2A               	movwf	___llmod@divisor,c
  5433  00067E  0E00               	movlw	0
  5434  000680  6E2B               	movwf	___llmod@divisor+1,c
  5435  000682  0E00               	movlw	0
  5436  000684  6E2C               	movwf	___llmod@divisor+2,c
  5437  000686  0E00               	movlw	0
  5438  000688  6E2D               	movwf	___llmod@divisor+3,c
  5439  00068A  ECEF  F011         	call	___llmod	;wreg free
  5440  00068E  C026  F0A0         	movff	?___llmod,sprintf@vd_1470
  5441  000692  C027  F0A1         	movff	?___llmod+1,sprintf@vd_1470+1
  5442  000696  C028  F0A2         	movff	?___llmod+2,sprintf@vd_1470+2
  5443  00069A  C029  F0A3         	movff	?___llmod+3,sprintf@vd_1470+3
  5444                           
  5445                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5446  00069E  0100               	movlb	0	; () banked
  5447  0006A0  51A0               	movf	sprintf@vd_1470& (0+255),w,b
  5448  0006A2  0F30               	addlw	48
  5449  0006A4  C088  FFD9         	movff	sprintf@sp,fsr2l
  5450  0006A8  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5451  0006AC  6EDF               	movwf	indf2,c
  5452                           
  5453                           ; BSR set to: 0
  5454  0006AE  0100               	movlb	0	; () banked
  5455  0006B0  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5456  0006B2  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5460  0006B4  C0AD  F026         	movff	sprintf@_val,___llmod@dividend
  5461  0006B8  C0AE  F027         	movff	sprintf@_val+1,___llmod@dividend+1
  5462  0006BC  C0AF  F028         	movff	sprintf@_val+2,___llmod@dividend+2
  5463  0006C0  C0B0  F029         	movff	sprintf@_val+3,___llmod@dividend+3
  5464  0006C4  0100               	movlb	0	; () banked
  5465  0006C6  51B7               	movf	sprintf@c& (0+255),w,b
  5466  0006C8  0D04               	mullw	4
  5467  0006CA  0ECD               	movlw	low _dpowers
  5468  0006CC  24F3               	addwf	prodl,w,c
  5469  0006CE  6EF6               	movwf	tblptrl,c
  5470  0006D0  0E7E               	movlw	high _dpowers
  5471  0006D2  20F4               	addwfc	prodh,w,c
  5472  0006D4  6EF7               	movwf	tblptrh,c
  5473  0006D6                     	if	1	;There are 3 active tblptr bytes
  5474  0006D6  6AF8               	clrf	tblptru,c
  5475  0006D8  0E00               	movlw	low (__mediumconst shr (0+16))
  5476  0006DA  22F8               	addwfc	tblptru,f,c
  5477  0006DC                     	endif
  5478  0006DC  0009               	tblrd		*+
  5479  0006DE  CFF5 F02A          	movff	tablat,___llmod@divisor
  5480  0006E2  0009               	tblrd		*+
  5481  0006E4  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5482  0006E8  0009               	tblrd		*+
  5483  0006EA  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5484  0006EE  000A               	tblrd		*-
  5485  0006F0  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5486  0006F4  ECEF  F011         	call	___llmod	;wreg free
  5487  0006F8  C026  F0AD         	movff	?___llmod,sprintf@_val
  5488  0006FC  C027  F0AE         	movff	?___llmod+1,sprintf@_val+1
  5489  000700  C028  F0AF         	movff	?___llmod+2,sprintf@_val+2
  5490  000704  C029  F0B0         	movff	?___llmod+3,sprintf@_val+3
  5491  000708                     l5281:
  5492  000708  0100               	movlb	0	; () banked
  5493  00070A  07B7               	decf	sprintf@c& (0+255),f,b
  5494  00070C  0100               	movlb	0	; () banked
  5495  00070E  29B7               	incf	sprintf@c& (0+255),w,b
  5496  000710  B4D8               	btfsc	status,2,c
  5497  000712  D00E               	goto	l5289
  5498  000714  D780               	goto	l5271
  5499  000716                     l5283:
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5503  000716  C088  FFD9         	movff	sprintf@sp,fsr2l
  5504  00071A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5505  00071E  0E30               	movlw	48
  5506  000720  6EDF               	movwf	indf2,c
  5507                           
  5508                           ; BSR set to: 0
  5509  000722  0100               	movlb	0	; () banked
  5510  000724  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5511  000726  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;doprnt.c: 1246: prec--;
  5515  000728  0100               	movlb	0	; () banked
  5516  00072A  07AB               	decf	sprintf@prec& (0+255),f,b
  5517  00072C  A0D8               	btfss	status,0,c
  5518  00072E  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5519  000730                     l5289:
  5520                           
  5521                           ; BSR set to: 0
  5522  000730  0100               	movlb	0	; () banked
  5523  000732  51AC               	movf	(sprintf@prec+1)& (0+255),w,b
  5524  000734  11AB               	iorwf	sprintf@prec& (0+255),w,b
  5525  000736  B4D8               	btfsc	status,2,c
  5526  000738  D0EA               	goto	l5331
  5527  00073A  D7ED               	goto	l5283
  5528  00073C                     l5291:
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;doprnt.c: 1255: }
  5532                           ;doprnt.c: 1262: {
  5533                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5534  00073C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  5535  000740  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  5536  000744  0100               	movlb	0	; () banked
  5537  000746  CFDE F0AD          	movff	postinc2,sprintf@_val
  5538  00074A  0100               	movlb	0	; () banked
  5539  00074C  CFDD F0AE          	movff	postdec2,sprintf@_val+1
  5540  000750  0100               	movlb	0	; () banked
  5541  000752  0E00               	movlw	0
  5542  000754  0100               	movlb	0	; () banked
  5543  000756  BFAE               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5544  000758  0EFF               	movlw	-1
  5545  00075A  0100               	movlb	0	; () banked
  5546  00075C  6FAF               	movwf	(sprintf@_val+2)& (0+255),b
  5547  00075E  0100               	movlb	0	; () banked
  5548  000760  6FB0               	movwf	(sprintf@_val+3)& (0+255),b
  5549                           
  5550                           ; BSR set to: 0
  5551  000762  0E02               	movlw	2
  5552  000764  0100               	movlb	0	; () banked
  5553  000766  27A4               	addwf	sprintf@ap& (0+255),f,b
  5554  000768  0E00               	movlw	0
  5555  00076A  0100               	movlb	0	; () banked
  5556  00076C  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5560  00076E  0100               	movlb	0	; () banked
  5561  000770  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  5562  000772  0A80               	xorlw	128
  5563  000774  0F80               	addlw	128
  5564  000776  E10B               	bnz	u6125
  5565  000778  0E00               	movlw	0
  5566  00077A  0100               	movlb	0	; () banked
  5567  00077C  5DAF               	subwf	(sprintf@_val+2)& (0+255),w,b
  5568  00077E  E107               	bnz	u6125
  5569  000780  0E00               	movlw	0
  5570  000782  0100               	movlb	0	; () banked
  5571  000784  5DAE               	subwf	(sprintf@_val+1)& (0+255),w,b
  5572  000786  E103               	bnz	u6125
  5573  000788  0E00               	movlw	0
  5574  00078A  0100               	movlb	0	; () banked
  5575  00078C  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5576  00078E                     u6125:
  5577  00078E  B0D8               	btfsc	status,0,c
  5578  000790  D012               	goto	l5301
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1271: flag |= 0x03;
  5582  000792  0E03               	movlw	3
  5583  000794  0100               	movlb	0	; () banked
  5584  000796  13A6               	iorwf	sprintf@flag& (0+255),f,b
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;doprnt.c: 1272: _val._val = -_val._val;
  5588  000798  0100               	movlb	0	; () banked
  5589  00079A  1FB0               	comf	(sprintf@_val+3)& (0+255),f,b
  5590  00079C  0100               	movlb	0	; () banked
  5591  00079E  1FAF               	comf	(sprintf@_val+2)& (0+255),f,b
  5592  0007A0  0100               	movlb	0	; () banked
  5593  0007A2  1FAE               	comf	(sprintf@_val+1)& (0+255),f,b
  5594  0007A4  0100               	movlb	0	; () banked
  5595  0007A6  6DAD               	negf	sprintf@_val& (0+255),b
  5596  0007A8  0E00               	movlw	0
  5597  0007AA  0100               	movlb	0	; () banked
  5598  0007AC  23AE               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5599  0007AE  0100               	movlb	0	; () banked
  5600  0007B0  23AF               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5601  0007B2  0100               	movlb	0	; () banked
  5602  0007B4  23B0               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5603  0007B6                     l5301:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;doprnt.c: 1273: }
  5607                           ;doprnt.c: 1275: }
  5608                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5609  0007B6  0E01               	movlw	1
  5610  0007B8  0100               	movlb	0	; () banked
  5611  0007BA  6FB7               	movwf	sprintf@c& (0+255),b
  5612  0007BC                     
  5613                           ; BSR set to: 0
  5614  0007BC  0100               	movlb	0	; () banked
  5615  0007BE  51B7               	movf	sprintf@c& (0+255),w,b
  5616  0007C0  0A0A               	xorlw	10
  5617  0007C2  B4D8               	btfsc	status,2,c
  5618  0007C4  D021               	goto	l5315
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5622                           
  5623                           ; BSR set to: 0
  5624                           
  5625                           ; BSR set to: 0
  5626  0007C6  0100               	movlb	0	; () banked
  5627  0007C8  51B7               	movf	sprintf@c& (0+255),w,b
  5628  0007CA  0D04               	mullw	4
  5629  0007CC  0ECD               	movlw	low _dpowers
  5630  0007CE  24F3               	addwf	prodl,w,c
  5631  0007D0  6EF6               	movwf	tblptrl,c
  5632  0007D2  0E7E               	movlw	high _dpowers
  5633  0007D4  20F4               	addwfc	prodh,w,c
  5634  0007D6  6EF7               	movwf	tblptrh,c
  5635  0007D8                     	if	1	;There are 3 active tblptr bytes
  5636  0007D8  6AF8               	clrf	tblptru,c
  5637  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  5638  0007DC  22F8               	addwfc	tblptru,f,c
  5639  0007DE                     	endif
  5640  0007DE  0009               	tblrd		*+
  5641  0007E0  50F5               	movf	tablat,w,c
  5642  0007E2  0100               	movlb	0	; () banked
  5643  0007E4  5DAD               	subwf	sprintf@_val& (0+255),w,b
  5644  0007E6  0009               	tblrd		*+
  5645  0007E8  50F5               	movf	tablat,w,c
  5646  0007EA  0100               	movlb	0	; () banked
  5647  0007EC  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5648  0007EE  0009               	tblrd		*+
  5649  0007F0  50F5               	movf	tablat,w,c
  5650  0007F2  0100               	movlb	0	; () banked
  5651  0007F4  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5652  0007F6  0009               	tblrd		*+
  5653  0007F8  50F5               	movf	tablat,w,c
  5654  0007FA  0100               	movlb	0	; () banked
  5655  0007FC  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5656  0007FE  A0D8               	btfss	status,0,c
  5657  000800  D003               	goto	l5315
  5658                           
  5659                           ; BSR set to: 0
  5660                           
  5661                           ; BSR set to: 0
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 1316: break;
  5665  000802  0100               	movlb	0	; () banked
  5666  000804  2BB7               	incf	sprintf@c& (0+255),f,b
  5667  000806  D7DA               	goto	L11
  5668  000808                     l5315:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;doprnt.c: 1431: {
  5672                           ;doprnt.c: 1447: if(flag & 0x03)
  5673  000808  0E03               	movlw	3
  5674  00080A  0100               	movlb	0	; () banked
  5675  00080C  15A6               	andwf	sprintf@flag& (0+255),w,b
  5676  00080E  0100               	movlb	0	; () banked
  5677  000810  6F8F               	movwf	??_sprintf& (0+255),b
  5678  000812  0E00               	movlw	0
  5679  000814  0100               	movlb	0	; () banked
  5680  000816  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  5681  000818  0100               	movlb	0	; () banked
  5682  00081A  6F90               	movwf	(??_sprintf+1)& (0+255),b
  5683  00081C  0100               	movlb	0	; () banked
  5684  00081E  5190               	movf	(??_sprintf+1)& (0+255),w,b
  5685  000820  118F               	iorwf	??_sprintf& (0+255),w,b
  5686  000822  B4D8               	btfsc	status,2,c
  5687  000824  D009               	goto	l5321
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  5691  000826  C088  FFD9         	movff	sprintf@sp,fsr2l
  5692  00082A  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5693  00082E  0E2D               	movlw	45
  5694  000830  6EDF               	movwf	indf2,c
  5695                           
  5696                           ; BSR set to: 0
  5697  000832  0100               	movlb	0	; () banked
  5698  000834  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5699  000836  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5700  000838                     l5321:
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;doprnt.c: 1478: }
  5704                           ;doprnt.c: 1481: prec = c;
  5705  000838  0100               	movlb	0	; () banked
  5706  00083A  51B7               	movf	sprintf@c& (0+255),w,b
  5707  00083C  0100               	movlb	0	; () banked
  5708  00083E  6FAB               	movwf	sprintf@prec& (0+255),b
  5709  000840  0100               	movlb	0	; () banked
  5710  000842  6BAC               	clrf	(sprintf@prec+1)& (0+255),b
  5711  000844  0100               	movlb	0	; () banked
  5712  000846  BFAB               	btfsc	sprintf@prec& (0+255),7,b
  5713  000848  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5714                           
  5715                           ;doprnt.c: 1483: while(prec--) {
  5716  00084A  D057               	goto	l5329
  5717  00084C                     l5323:
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;doprnt.c: 1487: {
  5721                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5722  00084C  0100               	movlb	0	; () banked
  5723  00084E  C0AB  F08F         	movff	sprintf@prec,??_sprintf
  5724  000852  0100               	movlb	0	; () banked
  5725  000854  C0AC  F090         	movff	sprintf@prec+1,??_sprintf+1
  5726  000858  0100               	movlb	0	; () banked
  5727  00085A  90D8               	bcf	status,0,c
  5728  00085C  378F               	rlcf	??_sprintf& (0+255),f,b
  5729  00085E  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5730  000860  0100               	movlb	0	; () banked
  5731  000862  90D8               	bcf	status,0,c
  5732  000864  378F               	rlcf	??_sprintf& (0+255),f,b
  5733  000866  3790               	rlcf	(??_sprintf+1)& (0+255),f,b
  5734  000868  0ECD               	movlw	low _dpowers
  5735  00086A  0100               	movlb	0	; () banked
  5736  00086C  258F               	addwf	??_sprintf& (0+255),w,b
  5737  00086E  6EF6               	movwf	tblptrl,c
  5738  000870  0E7E               	movlw	high _dpowers
  5739  000872  2190               	addwfc	(??_sprintf+1)& (0+255),w,b
  5740  000874  6EF7               	movwf	tblptrh,c
  5741  000876                     	if	1	;There are 3 active tblptr bytes
  5742  000876  6AF8               	clrf	tblptru,c
  5743  000878  0E00               	movlw	low (__mediumconst shr (0+16))
  5744  00087A  22F8               	addwfc	tblptru,f,c
  5745  00087C                     	endif
  5746  00087C  0009               	tblrd		*+
  5747  00087E  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5748  000882  0009               	tblrd		*+
  5749  000884  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5750  000888  0009               	tblrd		*+
  5751  00088A  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5752  00088E  000A               	tblrd		*-
  5753  000890  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5754  000894  C0AD  F019         	movff	sprintf@_val,___lldiv@dividend
  5755  000898  C0AE  F01A         	movff	sprintf@_val+1,___lldiv@dividend+1
  5756  00089C  C0AF  F01B         	movff	sprintf@_val+2,___lldiv@dividend+2
  5757  0008A0  C0B0  F01C         	movff	sprintf@_val+3,___lldiv@dividend+3
  5758  0008A4  EC16  F010         	call	___lldiv	;wreg free
  5759  0008A8  C019  F026         	movff	?___lldiv,___llmod@dividend
  5760  0008AC  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5761  0008B0  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5762  0008B4  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5763  0008B8  0E0A               	movlw	10
  5764  0008BA  6E2A               	movwf	___llmod@divisor,c
  5765  0008BC  0E00               	movlw	0
  5766  0008BE  6E2B               	movwf	___llmod@divisor+1,c
  5767  0008C0  0E00               	movlw	0
  5768  0008C2  6E2C               	movwf	___llmod@divisor+2,c
  5769  0008C4  0E00               	movlw	0
  5770  0008C6  6E2D               	movwf	___llmod@divisor+3,c
  5771  0008C8  ECEF  F011         	call	___llmod	;wreg free
  5772  0008CC  C026  F091         	movff	?___llmod,??_sprintf+2
  5773  0008D0  C027  F092         	movff	?___llmod+1,??_sprintf+3
  5774  0008D4  C028  F093         	movff	?___llmod+2,??_sprintf+4
  5775  0008D8  C029  F094         	movff	?___llmod+3,??_sprintf+5
  5776  0008DC  0100               	movlb	0	; () banked
  5777  0008DE  5191               	movf	(??_sprintf+2)& (0+255),w,b
  5778  0008E0  0F30               	addlw	48
  5779  0008E2  0100               	movlb	0	; () banked
  5780  0008E4  6FB7               	movwf	sprintf@c& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;doprnt.c: 1532: }
  5784                           ;doprnt.c: 1533: ((*sp++ = (c)));
  5785  0008E6  C088  FFD9         	movff	sprintf@sp,fsr2l
  5786  0008EA  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5787  0008EE  0100               	movlb	0	; () banked
  5788  0008F0  C0B7  FFDF         	movff	sprintf@c,indf2
  5789                           
  5790                           ; BSR set to: 0
  5791  0008F4  0100               	movlb	0	; () banked
  5792  0008F6  4B88               	infsnz	sprintf@sp& (0+255),f,b
  5793  0008F8  2B89               	incf	(sprintf@sp+1)& (0+255),f,b
  5794  0008FA                     l5329:
  5795                           
  5796                           ; BSR set to: 0
  5797  0008FA  0100               	movlb	0	; () banked
  5798  0008FC  07AB               	decf	sprintf@prec& (0+255),f,b
  5799  0008FE  A0D8               	btfss	status,0,c
  5800  000900  07AC               	decf	(sprintf@prec+1)& (0+255),f,b
  5801  000902  0100               	movlb	0	; () banked
  5802  000904  29AB               	incf	sprintf@prec& (0+255),w,b
  5803  000906  B4D8               	btfsc	status,2,c
  5804  000908  29AC               	incf	(sprintf@prec+1)& (0+255),w,b
  5805  00090A  A4D8               	btfss	status,2,c
  5806  00090C  D79F               	goto	l5323
  5807  00090E                     l5331:
  5808                           
  5809                           ; BSR set to: 0
  5810  00090E  0100               	movlb	0	; () banked
  5811  000910  C08A  FFF6         	movff	sprintf@f,tblptrl
  5812  000914  0100               	movlb	0	; () banked
  5813  000916  C08B  FFF7         	movff	sprintf@f+1,tblptrh
  5814  00091A  0100               	movlb	0	; () banked
  5815  00091C  4B8A               	infsnz	sprintf@f& (0+255),f,b
  5816  00091E  2B8B               	incf	(sprintf@f+1)& (0+255),f,b
  5817  000920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5818  000920  6AF8               	clrf	tblptru,c
  5819  000922                     	endif
  5820  000922                     	if	0	;tblptru may be non-zero
  5821  000922                     	endif
  5822  000922  0008               	tblrd		*
  5823  000924  0100               	movlb	0	; () banked
  5824  000926  CFF5 F0B7          	movff	tablat,sprintf@c
  5825  00092A  0100               	movlb	0	; () banked
  5826  00092C  67B7               	tstfsz	sprintf@c& (0+255),b
  5827  00092E  EF18  F000         	goto	l5129
  5828  000932                     l5333:
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;doprnt.c: 1547: *sp = 0;
  5832  000932  C088  FFD9         	movff	sprintf@sp,fsr2l
  5833  000936  C089  FFDA         	movff	sprintf@sp+1,fsr2h
  5834  00093A  0E00               	movlw	0
  5835  00093C  6EDF               	movwf	indf2,c
  5836                           
  5837                           ; BSR set to: 0
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;doprnt.c: 1549: return 0;
  5841                           ;	Return value of _sprintf is never used
  5842  00093E  0012               	return	
  5843  000940                     __end_of_sprintf:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           indf0	equ	0xFEF
  5853                           postinc0	equ	0xFEE
  5854                           fsr0h	equ	0xFEA
  5855                           fsr0l	equ	0xFE9
  5856                           wreg	equ	0xFE8
  5857                           postinc1	equ	0xFE6
  5858                           postdec1	equ	0xFE5
  5859                           fsr1l	equ	0xFE1
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _scale *****************
  5868 ;; Defined at:
  5869 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  scl             1    wreg     char 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  scl             1   18[BANK0 ] char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  3   12[BANK0 ] char 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5883 ;;      Params:         0       3       0       0       0       0       0       0       0
  5884 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5886 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5887 ;;Total ram usage:        7 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    6
  5890 ;; This function calls:
  5891 ;;		___awdiv
  5892 ;;		___awmod
  5893 ;;		___ftmul
  5894 ;;		___wmul
  5895 ;; This function is called by:
  5896 ;;		_sprintf
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text28
  5901  000940                     __ptext28:
  5902                           	opt stack 0
  5903  000940                     _scale:
  5904                           	opt stack 21
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;incstack = 0
  5908                           ;scale@scl stored from wreg
  5909  000940  0100               	movlb	0	; () banked
  5910  000942  6F72               	movwf	scale@scl& (0+255),b
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;doprnt.c: 428: if(scl < 0) {
  5914  000944  0100               	movlb	0	; () banked
  5915  000946  AF72               	btfss	scale@scl& (0+255),7,b
  5916  000948  D111               	goto	l4861
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;doprnt.c: 429: scl = -scl;
  5920  00094A  0100               	movlb	0	; () banked
  5921  00094C  6D72               	negf	scale@scl& (0+255),b
  5922                           
  5923                           ;doprnt.c: 430: if(scl>=110)
  5924  00094E  0100               	movlb	0	; () banked
  5925  000950  5172               	movf	scale@scl& (0+255),w,b
  5926  000952  0A80               	xorlw	128
  5927  000954  0F12               	addlw	-238
  5928  000956  A0D8               	btfss	status,0,c
  5929  000958  D0A0               	goto	l4851
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5933  00095A  0E00               	movlw	0
  5934  00095C  6E2A               	movwf	___wmul@multiplicand+1,c
  5935  00095E  0E03               	movlw	3
  5936  000960  6E29               	movwf	___wmul@multiplicand,c
  5937  000962  0E00               	movlw	0
  5938  000964  6E22               	movwf	___awdiv@divisor+1,c
  5939  000966  0E0A               	movlw	10
  5940  000968  6E21               	movwf	___awdiv@divisor,c
  5941  00096A  0E00               	movlw	0
  5942  00096C  6E1C               	movwf	___awmod@divisor+1,c
  5943  00096E  0E64               	movlw	100
  5944  000970  6E1B               	movwf	___awmod@divisor,c
  5945  000972  0100               	movlb	0	; () banked
  5946  000974  5172               	movf	scale@scl& (0+255),w,b
  5947  000976  6E19               	movwf	___awmod@dividend,c
  5948  000978  6A1A               	clrf	___awmod@dividend+1,c
  5949  00097A  BE19               	btfsc	___awmod@dividend,7,c
  5950  00097C  061A               	decf	___awmod@dividend+1,f,c
  5951  00097E  EC43  F00F         	call	___awmod	;wreg free
  5952  000982  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5953  000986  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5954  00098A  EC5B  F00E         	call	___awdiv	;wreg free
  5955  00098E  0E09               	movlw	9
  5956  000990  241F               	addwf	?___awdiv,w,c
  5957  000992  6E27               	movwf	___wmul@multiplier,c
  5958  000994  0E00               	movlw	0
  5959  000996  2020               	addwfc	?___awdiv+1,w,c
  5960  000998  6E28               	movwf	___wmul@multiplier+1,c
  5961  00099A  EC14  F014         	call	___wmul	;wreg free
  5962  00099E  0EF5               	movlw	low __npowers_
  5963  0009A0  2427               	addwf	?___wmul,w,c
  5964  0009A2  6EF6               	movwf	tblptrl,c
  5965  0009A4  0E7E               	movlw	high __npowers_
  5966  0009A6  2028               	addwfc	?___wmul+1,w,c
  5967  0009A8  6EF7               	movwf	tblptrh,c
  5968  0009AA                     	if	1	;There are 3 active tblptr bytes
  5969  0009AA  6AF8               	clrf	tblptru,c
  5970  0009AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5971  0009AE  22F8               	addwfc	tblptru,f,c
  5972  0009B0                     	endif
  5973  0009B0  0009               	tblrd		*+
  5974  0009B2  0100               	movlb	0	; () banked
  5975  0009B4  CFF5 F063          	movff	tablat,___ftmul@f2
  5976  0009B8  0009               	tblrd		*+
  5977  0009BA  0100               	movlb	0	; () banked
  5978  0009BC  CFF5 F064          	movff	tablat,___ftmul@f2+1
  5979  0009C0  000A               	tblrd		*-
  5980  0009C2  0100               	movlb	0	; () banked
  5981  0009C4  CFF5 F065          	movff	tablat,___ftmul@f2+2
  5982  0009C8  0E00               	movlw	0
  5983  0009CA  6E22               	movwf	___awdiv@divisor+1,c
  5984  0009CC  0E64               	movlw	100
  5985  0009CE  6E21               	movwf	___awdiv@divisor,c
  5986  0009D0  0100               	movlb	0	; () banked
  5987  0009D2  5172               	movf	scale@scl& (0+255),w,b
  5988  0009D4  6E1F               	movwf	___awdiv@dividend,c
  5989  0009D6  6A20               	clrf	___awdiv@dividend+1,c
  5990  0009D8  BE1F               	btfsc	___awdiv@dividend,7,c
  5991  0009DA  0620               	decf	___awdiv@dividend+1,f,c
  5992  0009DC  EC5B  F00E         	call	___awdiv	;wreg free
  5993  0009E0  0E12               	movlw	18
  5994  0009E2  241F               	addwf	?___awdiv,w,c
  5995  0009E4  6E27               	movwf	___wmul@multiplier,c
  5996  0009E6  0E00               	movlw	0
  5997  0009E8  2020               	addwfc	?___awdiv+1,w,c
  5998  0009EA  6E28               	movwf	___wmul@multiplier+1,c
  5999  0009EC  0E00               	movlw	0
  6000  0009EE  6E2A               	movwf	___wmul@multiplicand+1,c
  6001  0009F0  0E03               	movlw	3
  6002  0009F2  6E29               	movwf	___wmul@multiplicand,c
  6003  0009F4  EC14  F014         	call	___wmul	;wreg free
  6004  0009F8  0EF5               	movlw	low __npowers_
  6005  0009FA  2427               	addwf	?___wmul,w,c
  6006  0009FC  6EF6               	movwf	tblptrl,c
  6007  0009FE  0E7E               	movlw	high __npowers_
  6008  000A00  2028               	addwfc	?___wmul+1,w,c
  6009  000A02  6EF7               	movwf	tblptrh,c
  6010  000A04                     	if	1	;There are 3 active tblptr bytes
  6011  000A04  6AF8               	clrf	tblptru,c
  6012  000A06  0E00               	movlw	low (__mediumconst shr (0+16))
  6013  000A08  22F8               	addwfc	tblptru,f,c
  6014  000A0A                     	endif
  6015  000A0A  0009               	tblrd		*+
  6016  000A0C  0100               	movlb	0	; () banked
  6017  000A0E  CFF5 F060          	movff	tablat,___ftmul@f1
  6018  000A12  0009               	tblrd		*+
  6019  000A14  0100               	movlb	0	; () banked
  6020  000A16  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6021  000A1A  000A               	tblrd		*-
  6022  000A1C  0100               	movlb	0	; () banked
  6023  000A1E  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6024  000A22  EC6F  F009         	call	___ftmul	;wreg free
  6025  000A26  C060  F06F         	movff	?___ftmul,_scale$2492
  6026  000A2A  C061  F070         	movff	?___ftmul+1,_scale$2492+1
  6027  000A2E  C062  F071         	movff	?___ftmul+2,_scale$2492+2
  6028                           
  6029                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6030  000A32  C06F  F060         	movff	_scale$2492,___ftmul@f1
  6031  000A36  C070  F061         	movff	_scale$2492+1,___ftmul@f1+1
  6032  000A3A  C071  F062         	movff	_scale$2492+2,___ftmul@f1+2
  6033  000A3E  0E00               	movlw	0
  6034  000A40  6E2A               	movwf	___wmul@multiplicand+1,c
  6035  000A42  0E03               	movlw	3
  6036  000A44  6E29               	movwf	___wmul@multiplicand,c
  6037  000A46  0E00               	movlw	0
  6038  000A48  6E1C               	movwf	___awmod@divisor+1,c
  6039  000A4A  0E0A               	movlw	10
  6040  000A4C  6E1B               	movwf	___awmod@divisor,c
  6041  000A4E  0100               	movlb	0	; () banked
  6042  000A50  5172               	movf	scale@scl& (0+255),w,b
  6043  000A52  6E19               	movwf	___awmod@dividend,c
  6044  000A54  6A1A               	clrf	___awmod@dividend+1,c
  6045  000A56  BE19               	btfsc	___awmod@dividend,7,c
  6046  000A58  061A               	decf	___awmod@dividend+1,f,c
  6047  000A5A  EC43  F00F         	call	___awmod	;wreg free
  6048  000A5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6049  000A62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6050  000A66  EC14  F014         	call	___wmul	;wreg free
  6051  000A6A  0EF5               	movlw	low __npowers_
  6052  000A6C  2427               	addwf	?___wmul,w,c
  6053  000A6E  6EF6               	movwf	tblptrl,c
  6054  000A70  0E7E               	movlw	high __npowers_
  6055  000A72  2028               	addwfc	?___wmul+1,w,c
  6056  000A74  6EF7               	movwf	tblptrh,c
  6057  000A76                     	if	1	;There are 3 active tblptr bytes
  6058  000A76  6AF8               	clrf	tblptru,c
  6059  000A78  0E00               	movlw	low (__mediumconst shr (0+16))
  6060  000A7A  22F8               	addwfc	tblptru,f,c
  6061  000A7C                     	endif
  6062  000A7C  0009               	tblrd		*+
  6063  000A7E  0100               	movlb	0	; () banked
  6064  000A80  CFF5 F063          	movff	tablat,___ftmul@f2
  6065  000A84  0009               	tblrd		*+
  6066  000A86  0100               	movlb	0	; () banked
  6067  000A88  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6068  000A8C  000A               	tblrd		*-
  6069  000A8E  0100               	movlb	0	; () banked
  6070  000A90  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6071  000A94  EC6F  F009         	call	___ftmul	;wreg free
  6072  000A98  D16F               	goto	L15
  6073  000A9A                     l4851:
  6074                           
  6075                           ;doprnt.c: 432: else if(scl > 10)
  6076  000A9A  0100               	movlb	0	; () banked
  6077  000A9C  5172               	movf	scale@scl& (0+255),w,b
  6078  000A9E  0A80               	xorlw	128
  6079  000AA0  0F75               	addlw	-139
  6080  000AA2  A0D8               	btfss	status,0,c
  6081  000AA4  D05B               	goto	l4857
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6085  000AA6  0E00               	movlw	0
  6086  000AA8  6E22               	movwf	___awdiv@divisor+1,c
  6087  000AAA  0E0A               	movlw	10
  6088  000AAC  6E21               	movwf	___awdiv@divisor,c
  6089  000AAE  0100               	movlb	0	; () banked
  6090  000AB0  5172               	movf	scale@scl& (0+255),w,b
  6091  000AB2  6E1F               	movwf	___awdiv@dividend,c
  6092  000AB4  6A20               	clrf	___awdiv@dividend+1,c
  6093  000AB6  BE1F               	btfsc	___awdiv@dividend,7,c
  6094  000AB8  0620               	decf	___awdiv@dividend+1,f,c
  6095  000ABA  EC5B  F00E         	call	___awdiv	;wreg free
  6096  000ABE  0E09               	movlw	9
  6097  000AC0  241F               	addwf	?___awdiv,w,c
  6098  000AC2  6E27               	movwf	___wmul@multiplier,c
  6099  000AC4  0E00               	movlw	0
  6100  000AC6  2020               	addwfc	?___awdiv+1,w,c
  6101  000AC8  6E28               	movwf	___wmul@multiplier+1,c
  6102  000ACA  0E00               	movlw	0
  6103  000ACC  6E2A               	movwf	___wmul@multiplicand+1,c
  6104  000ACE  0E03               	movlw	3
  6105  000AD0  6E29               	movwf	___wmul@multiplicand,c
  6106  000AD2  EC14  F014         	call	___wmul	;wreg free
  6107  000AD6  0EF5               	movlw	low __npowers_
  6108  000AD8  2427               	addwf	?___wmul,w,c
  6109  000ADA  6EF6               	movwf	tblptrl,c
  6110  000ADC  0E7E               	movlw	high __npowers_
  6111  000ADE  2028               	addwfc	?___wmul+1,w,c
  6112  000AE0  6EF7               	movwf	tblptrh,c
  6113  000AE2                     	if	1	;There are 3 active tblptr bytes
  6114  000AE2  6AF8               	clrf	tblptru,c
  6115  000AE4  0E00               	movlw	low (__mediumconst shr (0+16))
  6116  000AE6  22F8               	addwfc	tblptru,f,c
  6117  000AE8                     	endif
  6118  000AE8  0009               	tblrd		*+
  6119  000AEA  0100               	movlb	0	; () banked
  6120  000AEC  CFF5 F060          	movff	tablat,___ftmul@f1
  6121  000AF0  0009               	tblrd		*+
  6122  000AF2  0100               	movlb	0	; () banked
  6123  000AF4  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6124  000AF8  000A               	tblrd		*-
  6125  000AFA  0100               	movlb	0	; () banked
  6126  000AFC  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6127  000B00  0E00               	movlw	0
  6128  000B02  6E2A               	movwf	___wmul@multiplicand+1,c
  6129  000B04  0E03               	movlw	3
  6130  000B06  6E29               	movwf	___wmul@multiplicand,c
  6131  000B08  0E00               	movlw	0
  6132  000B0A  6E1C               	movwf	___awmod@divisor+1,c
  6133  000B0C  0E0A               	movlw	10
  6134  000B0E  6E1B               	movwf	___awmod@divisor,c
  6135  000B10  0100               	movlb	0	; () banked
  6136  000B12  5172               	movf	scale@scl& (0+255),w,b
  6137  000B14  6E19               	movwf	___awmod@dividend,c
  6138  000B16  6A1A               	clrf	___awmod@dividend+1,c
  6139  000B18  BE19               	btfsc	___awmod@dividend,7,c
  6140  000B1A  061A               	decf	___awmod@dividend+1,f,c
  6141  000B1C  EC43  F00F         	call	___awmod	;wreg free
  6142  000B20  C019  F027         	movff	?___awmod,___wmul@multiplier
  6143  000B24  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6144  000B28  EC14  F014         	call	___wmul	;wreg free
  6145  000B2C  0EF5               	movlw	low __npowers_
  6146  000B2E  2427               	addwf	?___wmul,w,c
  6147  000B30  6EF6               	movwf	tblptrl,c
  6148  000B32  0E7E               	movlw	high __npowers_
  6149  000B34  2028               	addwfc	?___wmul+1,w,c
  6150  000B36  6EF7               	movwf	tblptrh,c
  6151  000B38                     	if	1	;There are 3 active tblptr bytes
  6152  000B38  6AF8               	clrf	tblptru,c
  6153  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6154  000B3C  22F8               	addwfc	tblptru,f,c
  6155  000B3E                     	endif
  6156  000B3E  0009               	tblrd		*+
  6157  000B40  0100               	movlb	0	; () banked
  6158  000B42  CFF5 F063          	movff	tablat,___ftmul@f2
  6159  000B46  0009               	tblrd		*+
  6160  000B48  0100               	movlb	0	; () banked
  6161  000B4A  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6162  000B4E  000A               	tblrd		*-
  6163  000B50  0100               	movlb	0	; () banked
  6164  000B52  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6165  000B56  EC6F  F009         	call	___ftmul	;wreg free
  6166  000B5A  D10E               	goto	L15
  6167  000B5C                     l4857:
  6168                           
  6169                           ;doprnt.c: 434: return _npowers_[scl];
  6170  000B5C  0100               	movlb	0	; () banked
  6171  000B5E  5172               	movf	scale@scl& (0+255),w,b
  6172  000B60  0D03               	mullw	3
  6173  000B62  0EF5               	movlw	low __npowers_
  6174  000B64  24F3               	addwf	prodl,w,c
  6175  000B66  6EF6               	movwf	tblptrl,c
  6176  000B68  0E7E               	movlw	high __npowers_
  6177  000B6A  D114               	goto	L14
  6178  000B6C                     l4861:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;doprnt.c: 435: }
  6182                           ;doprnt.c: 436: if(scl>=110)
  6183  000B6C  0100               	movlb	0	; () banked
  6184  000B6E  5172               	movf	scale@scl& (0+255),w,b
  6185  000B70  0A80               	xorlw	128
  6186  000B72  0F12               	addlw	-238
  6187  000B74  A0D8               	btfss	status,0,c
  6188  000B76  D0A0               	goto	l4869
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6192  000B78  0E00               	movlw	0
  6193  000B7A  6E2A               	movwf	___wmul@multiplicand+1,c
  6194  000B7C  0E03               	movlw	3
  6195  000B7E  6E29               	movwf	___wmul@multiplicand,c
  6196  000B80  0E00               	movlw	0
  6197  000B82  6E22               	movwf	___awdiv@divisor+1,c
  6198  000B84  0E0A               	movlw	10
  6199  000B86  6E21               	movwf	___awdiv@divisor,c
  6200  000B88  0E00               	movlw	0
  6201  000B8A  6E1C               	movwf	___awmod@divisor+1,c
  6202  000B8C  0E64               	movlw	100
  6203  000B8E  6E1B               	movwf	___awmod@divisor,c
  6204  000B90  0100               	movlb	0	; () banked
  6205  000B92  5172               	movf	scale@scl& (0+255),w,b
  6206  000B94  6E19               	movwf	___awmod@dividend,c
  6207  000B96  6A1A               	clrf	___awmod@dividend+1,c
  6208  000B98  BE19               	btfsc	___awmod@dividend,7,c
  6209  000B9A  061A               	decf	___awmod@dividend+1,f,c
  6210  000B9C  EC43  F00F         	call	___awmod	;wreg free
  6211  000BA0  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6212  000BA4  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6213  000BA8  EC5B  F00E         	call	___awdiv	;wreg free
  6214  000BAC  0E09               	movlw	9
  6215  000BAE  241F               	addwf	?___awdiv,w,c
  6216  000BB0  6E27               	movwf	___wmul@multiplier,c
  6217  000BB2  0E00               	movlw	0
  6218  000BB4  2020               	addwfc	?___awdiv+1,w,c
  6219  000BB6  6E28               	movwf	___wmul@multiplier+1,c
  6220  000BB8  EC14  F014         	call	___wmul	;wreg free
  6221  000BBC  0E1C               	movlw	low __powers_
  6222  000BBE  2427               	addwf	?___wmul,w,c
  6223  000BC0  6EF6               	movwf	tblptrl,c
  6224  000BC2  0E7F               	movlw	high __powers_
  6225  000BC4  2028               	addwfc	?___wmul+1,w,c
  6226  000BC6  6EF7               	movwf	tblptrh,c
  6227  000BC8                     	if	1	;There are 3 active tblptr bytes
  6228  000BC8  6AF8               	clrf	tblptru,c
  6229  000BCA  0E00               	movlw	low (__mediumconst shr (0+16))
  6230  000BCC  22F8               	addwfc	tblptru,f,c
  6231  000BCE                     	endif
  6232  000BCE  0009               	tblrd		*+
  6233  000BD0  0100               	movlb	0	; () banked
  6234  000BD2  CFF5 F063          	movff	tablat,___ftmul@f2
  6235  000BD6  0009               	tblrd		*+
  6236  000BD8  0100               	movlb	0	; () banked
  6237  000BDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6238  000BDE  000A               	tblrd		*-
  6239  000BE0  0100               	movlb	0	; () banked
  6240  000BE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6241  000BE6  0E00               	movlw	0
  6242  000BE8  6E22               	movwf	___awdiv@divisor+1,c
  6243  000BEA  0E64               	movlw	100
  6244  000BEC  6E21               	movwf	___awdiv@divisor,c
  6245  000BEE  0100               	movlb	0	; () banked
  6246  000BF0  5172               	movf	scale@scl& (0+255),w,b
  6247  000BF2  6E1F               	movwf	___awdiv@dividend,c
  6248  000BF4  6A20               	clrf	___awdiv@dividend+1,c
  6249  000BF6  BE1F               	btfsc	___awdiv@dividend,7,c
  6250  000BF8  0620               	decf	___awdiv@dividend+1,f,c
  6251  000BFA  EC5B  F00E         	call	___awdiv	;wreg free
  6252  000BFE  0E12               	movlw	18
  6253  000C00  241F               	addwf	?___awdiv,w,c
  6254  000C02  6E27               	movwf	___wmul@multiplier,c
  6255  000C04  0E00               	movlw	0
  6256  000C06  2020               	addwfc	?___awdiv+1,w,c
  6257  000C08  6E28               	movwf	___wmul@multiplier+1,c
  6258  000C0A  0E00               	movlw	0
  6259  000C0C  6E2A               	movwf	___wmul@multiplicand+1,c
  6260  000C0E  0E03               	movlw	3
  6261  000C10  6E29               	movwf	___wmul@multiplicand,c
  6262  000C12  EC14  F014         	call	___wmul	;wreg free
  6263  000C16  0E1C               	movlw	low __powers_
  6264  000C18  2427               	addwf	?___wmul,w,c
  6265  000C1A  6EF6               	movwf	tblptrl,c
  6266  000C1C  0E7F               	movlw	high __powers_
  6267  000C1E  2028               	addwfc	?___wmul+1,w,c
  6268  000C20  6EF7               	movwf	tblptrh,c
  6269  000C22                     	if	1	;There are 3 active tblptr bytes
  6270  000C22  6AF8               	clrf	tblptru,c
  6271  000C24  0E00               	movlw	low (__mediumconst shr (0+16))
  6272  000C26  22F8               	addwfc	tblptru,f,c
  6273  000C28                     	endif
  6274  000C28  0009               	tblrd		*+
  6275  000C2A  0100               	movlb	0	; () banked
  6276  000C2C  CFF5 F060          	movff	tablat,___ftmul@f1
  6277  000C30  0009               	tblrd		*+
  6278  000C32  0100               	movlb	0	; () banked
  6279  000C34  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6280  000C38  000A               	tblrd		*-
  6281  000C3A  0100               	movlb	0	; () banked
  6282  000C3C  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6283  000C40  EC6F  F009         	call	___ftmul	;wreg free
  6284  000C44  C060  F06F         	movff	?___ftmul,_scale$2492
  6285  000C48  C061  F070         	movff	?___ftmul+1,_scale$2492+1
  6286  000C4C  C062  F071         	movff	?___ftmul+2,_scale$2492+2
  6287                           
  6288                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6289  000C50  C06F  F060         	movff	_scale$2492,___ftmul@f1
  6290  000C54  C070  F061         	movff	_scale$2492+1,___ftmul@f1+1
  6291  000C58  C071  F062         	movff	_scale$2492+2,___ftmul@f1+2
  6292  000C5C  0E00               	movlw	0
  6293  000C5E  6E2A               	movwf	___wmul@multiplicand+1,c
  6294  000C60  0E03               	movlw	3
  6295  000C62  6E29               	movwf	___wmul@multiplicand,c
  6296  000C64  0E00               	movlw	0
  6297  000C66  6E1C               	movwf	___awmod@divisor+1,c
  6298  000C68  0E0A               	movlw	10
  6299  000C6A  6E1B               	movwf	___awmod@divisor,c
  6300  000C6C  0100               	movlb	0	; () banked
  6301  000C6E  5172               	movf	scale@scl& (0+255),w,b
  6302  000C70  6E19               	movwf	___awmod@dividend,c
  6303  000C72  6A1A               	clrf	___awmod@dividend+1,c
  6304  000C74  BE19               	btfsc	___awmod@dividend,7,c
  6305  000C76  061A               	decf	___awmod@dividend+1,f,c
  6306  000C78  EC43  F00F         	call	___awmod	;wreg free
  6307  000C7C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6308  000C80  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6309  000C84  EC14  F014         	call	___wmul	;wreg free
  6310  000C88  0E1C               	movlw	low __powers_
  6311  000C8A  2427               	addwf	?___wmul,w,c
  6312  000C8C  6EF6               	movwf	tblptrl,c
  6313  000C8E  0E7F               	movlw	high __powers_
  6314  000C90  2028               	addwfc	?___wmul+1,w,c
  6315  000C92  6EF7               	movwf	tblptrh,c
  6316  000C94                     	if	1	;There are 3 active tblptr bytes
  6317  000C94  6AF8               	clrf	tblptru,c
  6318  000C96  0E00               	movlw	low (__mediumconst shr (0+16))
  6319  000C98  22F8               	addwfc	tblptru,f,c
  6320  000C9A                     	endif
  6321  000C9A  0009               	tblrd		*+
  6322  000C9C  0100               	movlb	0	; () banked
  6323  000C9E  CFF5 F063          	movff	tablat,___ftmul@f2
  6324  000CA2  0009               	tblrd		*+
  6325  000CA4  0100               	movlb	0	; () banked
  6326  000CA6  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6327  000CAA  000A               	tblrd		*-
  6328  000CAC  0100               	movlb	0	; () banked
  6329  000CAE  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6330  000CB2  EC6F  F009         	call	___ftmul	;wreg free
  6331  000CB6  D060               	goto	L15
  6332  000CB8                     l4869:
  6333                           
  6334                           ;doprnt.c: 438: else if(scl > 10)
  6335  000CB8  0100               	movlb	0	; () banked
  6336  000CBA  5172               	movf	scale@scl& (0+255),w,b
  6337  000CBC  0A80               	xorlw	128
  6338  000CBE  0F75               	addlw	-139
  6339  000CC0  A0D8               	btfss	status,0,c
  6340  000CC2  D061               	goto	l4875
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6344  000CC4  0E00               	movlw	0
  6345  000CC6  6E22               	movwf	___awdiv@divisor+1,c
  6346  000CC8  0E0A               	movlw	10
  6347  000CCA  6E21               	movwf	___awdiv@divisor,c
  6348  000CCC  0100               	movlb	0	; () banked
  6349  000CCE  5172               	movf	scale@scl& (0+255),w,b
  6350  000CD0  6E1F               	movwf	___awdiv@dividend,c
  6351  000CD2  6A20               	clrf	___awdiv@dividend+1,c
  6352  000CD4  BE1F               	btfsc	___awdiv@dividend,7,c
  6353  000CD6  0620               	decf	___awdiv@dividend+1,f,c
  6354  000CD8  EC5B  F00E         	call	___awdiv	;wreg free
  6355  000CDC  0E09               	movlw	9
  6356  000CDE  241F               	addwf	?___awdiv,w,c
  6357  000CE0  6E27               	movwf	___wmul@multiplier,c
  6358  000CE2  0E00               	movlw	0
  6359  000CE4  2020               	addwfc	?___awdiv+1,w,c
  6360  000CE6  6E28               	movwf	___wmul@multiplier+1,c
  6361  000CE8  0E00               	movlw	0
  6362  000CEA  6E2A               	movwf	___wmul@multiplicand+1,c
  6363  000CEC  0E03               	movlw	3
  6364  000CEE  6E29               	movwf	___wmul@multiplicand,c
  6365  000CF0  EC14  F014         	call	___wmul	;wreg free
  6366  000CF4  0E1C               	movlw	low __powers_
  6367  000CF6  2427               	addwf	?___wmul,w,c
  6368  000CF8  6EF6               	movwf	tblptrl,c
  6369  000CFA  0E7F               	movlw	high __powers_
  6370  000CFC  2028               	addwfc	?___wmul+1,w,c
  6371  000CFE  6EF7               	movwf	tblptrh,c
  6372  000D00                     	if	1	;There are 3 active tblptr bytes
  6373  000D00  6AF8               	clrf	tblptru,c
  6374  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  6375  000D04  22F8               	addwfc	tblptru,f,c
  6376  000D06                     	endif
  6377  000D06  0009               	tblrd		*+
  6378  000D08  0100               	movlb	0	; () banked
  6379  000D0A  CFF5 F060          	movff	tablat,___ftmul@f1
  6380  000D0E  0009               	tblrd		*+
  6381  000D10  0100               	movlb	0	; () banked
  6382  000D12  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6383  000D16  000A               	tblrd		*-
  6384  000D18  0100               	movlb	0	; () banked
  6385  000D1A  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6386  000D1E  0E00               	movlw	0
  6387  000D20  6E2A               	movwf	___wmul@multiplicand+1,c
  6388  000D22  0E03               	movlw	3
  6389  000D24  6E29               	movwf	___wmul@multiplicand,c
  6390  000D26  0E00               	movlw	0
  6391  000D28  6E1C               	movwf	___awmod@divisor+1,c
  6392  000D2A  0E0A               	movlw	10
  6393  000D2C  6E1B               	movwf	___awmod@divisor,c
  6394  000D2E  0100               	movlb	0	; () banked
  6395  000D30  5172               	movf	scale@scl& (0+255),w,b
  6396  000D32  6E19               	movwf	___awmod@dividend,c
  6397  000D34  6A1A               	clrf	___awmod@dividend+1,c
  6398  000D36  BE19               	btfsc	___awmod@dividend,7,c
  6399  000D38  061A               	decf	___awmod@dividend+1,f,c
  6400  000D3A  EC43  F00F         	call	___awmod	;wreg free
  6401  000D3E  C019  F027         	movff	?___awmod,___wmul@multiplier
  6402  000D42  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6403  000D46  EC14  F014         	call	___wmul	;wreg free
  6404  000D4A  0E1C               	movlw	low __powers_
  6405  000D4C  2427               	addwf	?___wmul,w,c
  6406  000D4E  6EF6               	movwf	tblptrl,c
  6407  000D50  0E7F               	movlw	high __powers_
  6408  000D52  2028               	addwfc	?___wmul+1,w,c
  6409  000D54  6EF7               	movwf	tblptrh,c
  6410  000D56                     	if	1	;There are 3 active tblptr bytes
  6411  000D56  6AF8               	clrf	tblptru,c
  6412  000D58  0E00               	movlw	low (__mediumconst shr (0+16))
  6413  000D5A  22F8               	addwfc	tblptru,f,c
  6414  000D5C                     	endif
  6415  000D5C  0009               	tblrd		*+
  6416  000D5E  0100               	movlb	0	; () banked
  6417  000D60  CFF5 F063          	movff	tablat,___ftmul@f2
  6418  000D64  0009               	tblrd		*+
  6419  000D66  0100               	movlb	0	; () banked
  6420  000D68  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6421  000D6C  000A               	tblrd		*-
  6422  000D6E  0100               	movlb	0	; () banked
  6423  000D70  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6424  000D74  EC6F  F009         	call	___ftmul	;wreg free
  6425  000D78                     L15:
  6426  000D78  C060  F06C         	movff	?___ftmul,?_scale
  6427  000D7C  C061  F06D         	movff	?___ftmul+1,?_scale+1
  6428  000D80  C062  F06E         	movff	?___ftmul+2,?_scale+2
  6429  000D84  D018               	goto	l466
  6430  000D86                     l4875:
  6431                           
  6432                           ;doprnt.c: 440: return _powers_[scl];
  6433  000D86  0100               	movlb	0	; () banked
  6434  000D88  5172               	movf	scale@scl& (0+255),w,b
  6435  000D8A  0D03               	mullw	3
  6436  000D8C  0E1C               	movlw	low __powers_
  6437  000D8E  24F3               	addwf	prodl,w,c
  6438  000D90  6EF6               	movwf	tblptrl,c
  6439  000D92  0E7F               	movlw	high __powers_
  6440  000D94                     L14:
  6441  000D94  20F4               	addwfc	prodh,w,c
  6442  000D96  6EF7               	movwf	tblptrh,c
  6443  000D98                     	if	1	;There are 3 active tblptr bytes
  6444  000D98  6AF8               	clrf	tblptru,c
  6445  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  6446  000D9C  22F8               	addwfc	tblptru,f,c
  6447  000D9E                     	endif
  6448  000D9E  0009               	tblrd		*+
  6449  000DA0  0100               	movlb	0	; () banked
  6450  000DA2  CFF5 F06C          	movff	tablat,?_scale
  6451  000DA6  0009               	tblrd		*+
  6452  000DA8  0100               	movlb	0	; () banked
  6453  000DAA  CFF5 F06D          	movff	tablat,?_scale+1
  6454  000DAE  000A               	tblrd		*-
  6455  000DB0  0100               	movlb	0	; () banked
  6456  000DB2  CFF5 F06E          	movff	tablat,?_scale+2
  6457  000DB6                     l466:
  6458  000DB6  0012               	return	
  6459  000DB8                     __end_of_scale:
  6460                           	opt stack 0
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           intcon	equ	0xFF2
  6468                           indf0	equ	0xFEF
  6469                           postinc0	equ	0xFEE
  6470                           fsr0h	equ	0xFEA
  6471                           fsr0l	equ	0xFE9
  6472                           wreg	equ	0xFE8
  6473                           postinc1	equ	0xFE6
  6474                           postdec1	equ	0xFE5
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           fsr2h	equ	0xFDA
  6480                           fsr2l	equ	0xFD9
  6481                           status	equ	0xFD8
  6482                           
  6483 ;; *************** function _fround *****************
  6484 ;; Defined at:
  6485 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  prec            1    wreg     unsigned char 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  prec            1   21[BANK0 ] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  3   12[BANK0 ] unsigned char 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6499 ;;      Params:         0       3       0       0       0       0       0       0       0
  6500 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6502 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6503 ;;Total ram usage:       10 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    6
  6506 ;; This function calls:
  6507 ;;		___awdiv
  6508 ;;		___awmod
  6509 ;;		___ftmul
  6510 ;;		___wmul
  6511 ;; This function is called by:
  6512 ;;		_sprintf
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text29
  6517  000DB8                     __ptext29:
  6518                           	opt stack 0
  6519  000DB8                     _fround:
  6520                           	opt stack 21
  6521                           
  6522                           ;incstack = 0
  6523                           ;fround@prec stored from wreg
  6524  000DB8  0100               	movlb	0	; () banked
  6525  000DBA  6F75               	movwf	fround@prec& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;doprnt.c: 413: if(prec>=110)
  6529  000DBC  0E6D               	movlw	109
  6530  000DBE  0100               	movlb	0	; () banked
  6531  000DC0  6575               	cpfsgt	fround@prec& (0+255),b
  6532  000DC2  D0B1               	goto	l4829
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6536  000DC4  0E00               	movlw	0
  6537  000DC6  6E2A               	movwf	___wmul@multiplicand+1,c
  6538  000DC8  0E03               	movlw	3
  6539  000DCA  6E29               	movwf	___wmul@multiplicand,c
  6540  000DCC  0E00               	movlw	0
  6541  000DCE  6E22               	movwf	___awdiv@divisor+1,c
  6542  000DD0  0E0A               	movlw	10
  6543  000DD2  6E21               	movwf	___awdiv@divisor,c
  6544  000DD4  0E00               	movlw	0
  6545  000DD6  6E1C               	movwf	___awmod@divisor+1,c
  6546  000DD8  0E64               	movlw	100
  6547  000DDA  6E1B               	movwf	___awmod@divisor,c
  6548  000DDC  0100               	movlb	0	; () banked
  6549  000DDE  C075  F019         	movff	fround@prec,___awmod@dividend
  6550  000DE2  6A1A               	clrf	___awmod@dividend+1,c
  6551  000DE4  EC43  F00F         	call	___awmod	;wreg free
  6552  000DE8  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6553  000DEC  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6554  000DF0  EC5B  F00E         	call	___awdiv	;wreg free
  6555  000DF4  0E09               	movlw	9
  6556  000DF6  241F               	addwf	?___awdiv,w,c
  6557  000DF8  6E27               	movwf	___wmul@multiplier,c
  6558  000DFA  0E00               	movlw	0
  6559  000DFC  2020               	addwfc	?___awdiv+1,w,c
  6560  000DFE  6E28               	movwf	___wmul@multiplier+1,c
  6561  000E00  EC14  F014         	call	___wmul	;wreg free
  6562  000E04  0EF5               	movlw	low __npowers_
  6563  000E06  2427               	addwf	?___wmul,w,c
  6564  000E08  6EF6               	movwf	tblptrl,c
  6565  000E0A  0E7E               	movlw	high __npowers_
  6566  000E0C  2028               	addwfc	?___wmul+1,w,c
  6567  000E0E  6EF7               	movwf	tblptrh,c
  6568  000E10                     	if	1	;There are 3 active tblptr bytes
  6569  000E10  6AF8               	clrf	tblptru,c
  6570  000E12  0E00               	movlw	low (__mediumconst shr (0+16))
  6571  000E14  22F8               	addwfc	tblptru,f,c
  6572  000E16                     	endif
  6573  000E16  0009               	tblrd		*+
  6574  000E18  0100               	movlb	0	; () banked
  6575  000E1A  CFF5 F063          	movff	tablat,___ftmul@f2
  6576  000E1E  0009               	tblrd		*+
  6577  000E20  0100               	movlb	0	; () banked
  6578  000E22  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6579  000E26  000A               	tblrd		*-
  6580  000E28  0100               	movlb	0	; () banked
  6581  000E2A  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6582  000E2E  0E00               	movlw	0
  6583  000E30  6E22               	movwf	___awdiv@divisor+1,c
  6584  000E32  0E64               	movlw	100
  6585  000E34  6E21               	movwf	___awdiv@divisor,c
  6586  000E36  0100               	movlb	0	; () banked
  6587  000E38  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6588  000E3C  6A20               	clrf	___awdiv@dividend+1,c
  6589  000E3E  EC5B  F00E         	call	___awdiv	;wreg free
  6590  000E42  0E12               	movlw	18
  6591  000E44  241F               	addwf	?___awdiv,w,c
  6592  000E46  6E27               	movwf	___wmul@multiplier,c
  6593  000E48  0E00               	movlw	0
  6594  000E4A  2020               	addwfc	?___awdiv+1,w,c
  6595  000E4C  6E28               	movwf	___wmul@multiplier+1,c
  6596  000E4E  0E00               	movlw	0
  6597  000E50  6E2A               	movwf	___wmul@multiplicand+1,c
  6598  000E52  0E03               	movlw	3
  6599  000E54  6E29               	movwf	___wmul@multiplicand,c
  6600  000E56  EC14  F014         	call	___wmul	;wreg free
  6601  000E5A  0EF5               	movlw	low __npowers_
  6602  000E5C  2427               	addwf	?___wmul,w,c
  6603  000E5E  6EF6               	movwf	tblptrl,c
  6604  000E60  0E7E               	movlw	high __npowers_
  6605  000E62  2028               	addwfc	?___wmul+1,w,c
  6606  000E64  6EF7               	movwf	tblptrh,c
  6607  000E66                     	if	1	;There are 3 active tblptr bytes
  6608  000E66  6AF8               	clrf	tblptru,c
  6609  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6610  000E6A  22F8               	addwfc	tblptru,f,c
  6611  000E6C                     	endif
  6612  000E6C  0009               	tblrd		*+
  6613  000E6E  0100               	movlb	0	; () banked
  6614  000E70  CFF5 F060          	movff	tablat,___ftmul@f1
  6615  000E74  0009               	tblrd		*+
  6616  000E76  0100               	movlb	0	; () banked
  6617  000E78  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6618  000E7C  000A               	tblrd		*-
  6619  000E7E  0100               	movlb	0	; () banked
  6620  000E80  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6621  000E84  EC6F  F009         	call	___ftmul	;wreg free
  6622  000E88  C060  F072         	movff	?___ftmul,_fround$2490
  6623  000E8C  C061  F073         	movff	?___ftmul+1,_fround$2490+1
  6624  000E90  C062  F074         	movff	?___ftmul+2,_fround$2490+2
  6625                           
  6626                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6627  000E94  0E00               	movlw	0
  6628  000E96  6E2A               	movwf	___wmul@multiplicand+1,c
  6629  000E98  0E03               	movlw	3
  6630  000E9A  6E29               	movwf	___wmul@multiplicand,c
  6631  000E9C  0E00               	movlw	0
  6632  000E9E  6E1C               	movwf	___awmod@divisor+1,c
  6633  000EA0  0E0A               	movlw	10
  6634  000EA2  6E1B               	movwf	___awmod@divisor,c
  6635  000EA4  0100               	movlb	0	; () banked
  6636  000EA6  C075  F019         	movff	fround@prec,___awmod@dividend
  6637  000EAA  6A1A               	clrf	___awmod@dividend+1,c
  6638  000EAC  EC43  F00F         	call	___awmod	;wreg free
  6639  000EB0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6640  000EB4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6641  000EB8  EC14  F014         	call	___wmul	;wreg free
  6642  000EBC  0EF5               	movlw	low __npowers_
  6643  000EBE  2427               	addwf	?___wmul,w,c
  6644  000EC0  6EF6               	movwf	tblptrl,c
  6645  000EC2  0E7E               	movlw	high __npowers_
  6646  000EC4  2028               	addwfc	?___wmul+1,w,c
  6647  000EC6  6EF7               	movwf	tblptrh,c
  6648  000EC8                     	if	1	;There are 3 active tblptr bytes
  6649  000EC8  6AF8               	clrf	tblptru,c
  6650  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  6651  000ECC  22F8               	addwfc	tblptru,f,c
  6652  000ECE                     	endif
  6653  000ECE  0009               	tblrd		*+
  6654  000ED0  0100               	movlb	0	; () banked
  6655  000ED2  CFF5 F063          	movff	tablat,___ftmul@f2
  6656  000ED6  0009               	tblrd		*+
  6657  000ED8  0100               	movlb	0	; () banked
  6658  000EDA  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6659  000EDE  000A               	tblrd		*-
  6660  000EE0  0100               	movlb	0	; () banked
  6661  000EE2  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6662  000EE6  C072  F060         	movff	_fround$2490,___ftmul@f1
  6663  000EEA  C073  F061         	movff	_fround$2490+1,___ftmul@f1+1
  6664  000EEE  C074  F062         	movff	_fround$2490+2,___ftmul@f1+2
  6665  000EF2  EC6F  F009         	call	___ftmul	;wreg free
  6666  000EF6  C060  F06F         	movff	?___ftmul,_fround$2491
  6667  000EFA  C061  F070         	movff	?___ftmul+1,_fround$2491+1
  6668  000EFE  C062  F071         	movff	?___ftmul+2,_fround$2491+2
  6669                           
  6670                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6671  000F02  C06F  F060         	movff	_fround$2491,___ftmul@f1
  6672  000F06  C070  F061         	movff	_fround$2491+1,___ftmul@f1+1
  6673  000F0A  C071  F062         	movff	_fround$2491+2,___ftmul@f1+2
  6674  000F0E  0E00               	movlw	0
  6675  000F10  0100               	movlb	0	; () banked
  6676  000F12  6F63               	movwf	___ftmul@f2& (0+255),b
  6677  000F14  0E00               	movlw	0
  6678  000F16  0100               	movlb	0	; () banked
  6679  000F18  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6680  000F1A  0E3F               	movlw	63
  6681  000F1C  0100               	movlb	0	; () banked
  6682  000F1E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6683  000F20  EC6F  F009         	call	___ftmul	;wreg free
  6684  000F24  D095               	goto	L17
  6685  000F26                     l4829:
  6686                           
  6687                           ;doprnt.c: 415: else if(prec > 10)
  6688  000F26  0E0A               	movlw	10
  6689  000F28  0100               	movlb	0	; () banked
  6690  000F2A  6575               	cpfsgt	fround@prec& (0+255),b
  6691  000F2C  D06E               	goto	l4837
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6695  000F2E  0E00               	movlw	0
  6696  000F30  6E2A               	movwf	___wmul@multiplicand+1,c
  6697  000F32  0E03               	movlw	3
  6698  000F34  6E29               	movwf	___wmul@multiplicand,c
  6699  000F36  0E00               	movlw	0
  6700  000F38  6E1C               	movwf	___awmod@divisor+1,c
  6701  000F3A  0E0A               	movlw	10
  6702  000F3C  6E1B               	movwf	___awmod@divisor,c
  6703  000F3E  0100               	movlb	0	; () banked
  6704  000F40  C075  F019         	movff	fround@prec,___awmod@dividend
  6705  000F44  6A1A               	clrf	___awmod@dividend+1,c
  6706  000F46  EC43  F00F         	call	___awmod	;wreg free
  6707  000F4A  C019  F027         	movff	?___awmod,___wmul@multiplier
  6708  000F4E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6709  000F52  EC14  F014         	call	___wmul	;wreg free
  6710  000F56  0EF5               	movlw	low __npowers_
  6711  000F58  2427               	addwf	?___wmul,w,c
  6712  000F5A  6EF6               	movwf	tblptrl,c
  6713  000F5C  0E7E               	movlw	high __npowers_
  6714  000F5E  2028               	addwfc	?___wmul+1,w,c
  6715  000F60  6EF7               	movwf	tblptrh,c
  6716  000F62                     	if	1	;There are 3 active tblptr bytes
  6717  000F62  6AF8               	clrf	tblptru,c
  6718  000F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6719  000F66  22F8               	addwfc	tblptru,f,c
  6720  000F68                     	endif
  6721  000F68  0009               	tblrd		*+
  6722  000F6A  0100               	movlb	0	; () banked
  6723  000F6C  CFF5 F063          	movff	tablat,___ftmul@f2
  6724  000F70  0009               	tblrd		*+
  6725  000F72  0100               	movlb	0	; () banked
  6726  000F74  CFF5 F064          	movff	tablat,___ftmul@f2+1
  6727  000F78  000A               	tblrd		*-
  6728  000F7A  0100               	movlb	0	; () banked
  6729  000F7C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  6730  000F80  0E00               	movlw	0
  6731  000F82  6E22               	movwf	___awdiv@divisor+1,c
  6732  000F84  0E0A               	movlw	10
  6733  000F86  6E21               	movwf	___awdiv@divisor,c
  6734  000F88  0100               	movlb	0	; () banked
  6735  000F8A  C075  F01F         	movff	fround@prec,___awdiv@dividend
  6736  000F8E  6A20               	clrf	___awdiv@dividend+1,c
  6737  000F90  EC5B  F00E         	call	___awdiv	;wreg free
  6738  000F94  0E09               	movlw	9
  6739  000F96  241F               	addwf	?___awdiv,w,c
  6740  000F98  6E27               	movwf	___wmul@multiplier,c
  6741  000F9A  0E00               	movlw	0
  6742  000F9C  2020               	addwfc	?___awdiv+1,w,c
  6743  000F9E  6E28               	movwf	___wmul@multiplier+1,c
  6744  000FA0  0E00               	movlw	0
  6745  000FA2  6E2A               	movwf	___wmul@multiplicand+1,c
  6746  000FA4  0E03               	movlw	3
  6747  000FA6  6E29               	movwf	___wmul@multiplicand,c
  6748  000FA8  EC14  F014         	call	___wmul	;wreg free
  6749  000FAC  0EF5               	movlw	low __npowers_
  6750  000FAE  2427               	addwf	?___wmul,w,c
  6751  000FB0  6EF6               	movwf	tblptrl,c
  6752  000FB2  0E7E               	movlw	high __npowers_
  6753  000FB4  2028               	addwfc	?___wmul+1,w,c
  6754  000FB6  6EF7               	movwf	tblptrh,c
  6755  000FB8                     	if	1	;There are 3 active tblptr bytes
  6756  000FB8  6AF8               	clrf	tblptru,c
  6757  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6758  000FBC  22F8               	addwfc	tblptru,f,c
  6759  000FBE                     	endif
  6760  000FBE  0009               	tblrd		*+
  6761  000FC0  0100               	movlb	0	; () banked
  6762  000FC2  CFF5 F060          	movff	tablat,___ftmul@f1
  6763  000FC6  0009               	tblrd		*+
  6764  000FC8  0100               	movlb	0	; () banked
  6765  000FCA  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6766  000FCE  000A               	tblrd		*-
  6767  000FD0  0100               	movlb	0	; () banked
  6768  000FD2  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6769  000FD6  EC6F  F009         	call	___ftmul	;wreg free
  6770  000FDA  C060  F072         	movff	?___ftmul,_fround$2490
  6771  000FDE  C061  F073         	movff	?___ftmul+1,_fround$2490+1
  6772  000FE2  C062  F074         	movff	?___ftmul+2,_fround$2490+2
  6773                           
  6774                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6775  000FE6  C072  F060         	movff	_fround$2490,___ftmul@f1
  6776  000FEA  C073  F061         	movff	_fround$2490+1,___ftmul@f1+1
  6777  000FEE  C074  F062         	movff	_fround$2490+2,___ftmul@f1+2
  6778  000FF2  0E00               	movlw	0
  6779  000FF4  0100               	movlb	0	; () banked
  6780  000FF6  6F63               	movwf	___ftmul@f2& (0+255),b
  6781  000FF8  0E00               	movlw	0
  6782  000FFA  0100               	movlb	0	; () banked
  6783  000FFC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6784  000FFE  0E3F               	movlw	63
  6785  001000  0100               	movlb	0	; () banked
  6786  001002  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6787  001004  EC6F  F009         	call	___ftmul	;wreg free
  6788  001008  D023               	goto	L17
  6789  00100A                     l4837:
  6790                           
  6791                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6792  00100A  0100               	movlb	0	; () banked
  6793  00100C  5175               	movf	fround@prec& (0+255),w,b
  6794  00100E  0D03               	mullw	3
  6795  001010  0EF5               	movlw	low __npowers_
  6796  001012  24F3               	addwf	prodl,w,c
  6797  001014  6EF6               	movwf	tblptrl,c
  6798  001016  0E7E               	movlw	high __npowers_
  6799  001018  20F4               	addwfc	prodh,w,c
  6800  00101A  6EF7               	movwf	tblptrh,c
  6801  00101C                     	if	1	;There are 3 active tblptr bytes
  6802  00101C  6AF8               	clrf	tblptru,c
  6803  00101E  0E00               	movlw	low (__mediumconst shr (0+16))
  6804  001020  22F8               	addwfc	tblptru,f,c
  6805  001022                     	endif
  6806  001022  0009               	tblrd		*+
  6807  001024  0100               	movlb	0	; () banked
  6808  001026  CFF5 F060          	movff	tablat,___ftmul@f1
  6809  00102A  0009               	tblrd		*+
  6810  00102C  0100               	movlb	0	; () banked
  6811  00102E  CFF5 F061          	movff	tablat,___ftmul@f1+1
  6812  001032  000A               	tblrd		*-
  6813  001034  0100               	movlb	0	; () banked
  6814  001036  CFF5 F062          	movff	tablat,___ftmul@f1+2
  6815  00103A  0E00               	movlw	0
  6816  00103C  0100               	movlb	0	; () banked
  6817  00103E  6F63               	movwf	___ftmul@f2& (0+255),b
  6818  001040  0E00               	movlw	0
  6819  001042  0100               	movlb	0	; () banked
  6820  001044  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  6821  001046  0E3F               	movlw	63
  6822  001048  0100               	movlb	0	; () banked
  6823  00104A  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  6824  00104C  EC6F  F009         	call	___ftmul	;wreg free
  6825  001050                     L17:
  6826  001050  C060  F06C         	movff	?___ftmul,?_fround
  6827  001054  C061  F06D         	movff	?___ftmul+1,?_fround+1
  6828  001058  C062  F06E         	movff	?___ftmul+2,?_fround+2
  6829  00105C  0012               	return	
  6830  00105E                     __end_of_fround:
  6831                           	opt stack 0
  6832                           tblptru	equ	0xFF8
  6833                           tblptrh	equ	0xFF7
  6834                           tblptrl	equ	0xFF6
  6835                           tablat	equ	0xFF5
  6836                           prodh	equ	0xFF4
  6837                           prodl	equ	0xFF3
  6838                           intcon	equ	0xFF2
  6839                           indf0	equ	0xFEF
  6840                           postinc0	equ	0xFEE
  6841                           fsr0h	equ	0xFEA
  6842                           fsr0l	equ	0xFE9
  6843                           wreg	equ	0xFE8
  6844                           postinc1	equ	0xFE6
  6845                           postdec1	equ	0xFE5
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function ___wmul *****************
  6855 ;; Defined at:
  6856 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  multiplier      2   38[COMRAM] unsigned int 
  6859 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  product         2   42[COMRAM] unsigned int 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  2   38[COMRAM] unsigned int 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2, status,0, prodl, prodh
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6871 ;;      Params:         4       0       0       0       0       0       0       0       0
  6872 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6874 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6875 ;;Total ram usage:        6 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    4
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_fround
  6882 ;;		_scale
  6883 ;;		_sprintf
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text30
  6888  002828                     __ptext30:
  6889                           	opt stack 0
  6890  002828                     ___wmul:
  6891                           	opt stack 22
  6892                           
  6893                           ;incstack = 0
  6894  002828  5027               	movf	___wmul@multiplier,w,c
  6895  00282A  0229               	mulwf	___wmul@multiplicand,c
  6896  00282C  CFF3 F02B          	movff	prodl,___wmul@product
  6897  002830  CFF4 F02C          	movff	prodh,___wmul@product+1
  6898  002834  5027               	movf	___wmul@multiplier,w,c
  6899  002836  022A               	mulwf	___wmul@multiplicand+1,c
  6900  002838  50F3               	movf	prodl,w,c
  6901  00283A  262C               	addwf	___wmul@product+1,f,c
  6902  00283C  5028               	movf	___wmul@multiplier+1,w,c
  6903  00283E  0229               	mulwf	___wmul@multiplicand,c
  6904  002840  50F3               	movf	prodl,w,c
  6905  002842  262C               	addwf	___wmul@product+1,f,c
  6906  002844  C02B  F027         	movff	___wmul@product,?___wmul
  6907  002848  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6908  00284C  0012               	return	
  6909  00284E                     __end_of___wmul:
  6910                           	opt stack 0
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           prodh	equ	0xFF4
  6916                           prodl	equ	0xFF3
  6917                           intcon	equ	0xFF2
  6918                           indf0	equ	0xFEF
  6919                           postinc0	equ	0xFEE
  6920                           fsr0h	equ	0xFEA
  6921                           fsr0l	equ	0xFE9
  6922                           wreg	equ	0xFE8
  6923                           postinc1	equ	0xFE6
  6924                           postdec1	equ	0xFE5
  6925                           fsr1l	equ	0xFE1
  6926                           indf2	equ	0xFDF
  6927                           postinc2	equ	0xFDE
  6928                           postdec2	equ	0xFDD
  6929                           fsr2h	equ	0xFDA
  6930                           fsr2l	equ	0xFD9
  6931                           status	equ	0xFD8
  6932                           
  6933 ;; *************** function ___ftmul *****************
  6934 ;; Defined at:
  6935 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  f1              3    0[BANK0 ] float 
  6938 ;;  f2              3    3[BANK0 ] float 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  6941 ;;  sign            1   11[BANK0 ] unsigned char 
  6942 ;;  cntr            1   10[BANK0 ] unsigned char 
  6943 ;;  exp             1    6[BANK0 ] unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  3    0[BANK0 ] float 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6953 ;;      Params:         0       6       0       0       0       0       0       0       0
  6954 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6955 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6956 ;;      Totals:         3      12       0       0       0       0       0       0       0
  6957 ;;Total ram usage:       15 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    5
  6960 ;; This function calls:
  6961 ;;		___ftpack
  6962 ;; This function is called by:
  6963 ;;		_PWM_DutyCycle1
  6964 ;;		_PWM_DutyCycle2
  6965 ;;		_fround
  6966 ;;		_scale
  6967 ;;		_sprintf
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text31
  6972  0012DE                     __ptext31:
  6973                           	opt stack 0
  6974  0012DE                     ___ftmul:
  6975                           	opt stack 21
  6976                           
  6977                           ;incstack = 0
  6978  0012DE  0100               	movlb	0	; () banked
  6979  0012E0  C062  F02D         	movff	___ftmul@f1+2,??___ftmul
  6980  0012E4  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  6981  0012E6  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  6982  0012E8  0100               	movlb	0	; () banked
  6983  0012EA  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6984  0012EC  362D               	rlcf	??___ftmul& (0+255),f,c
  6985  0012EE  E301               	bnc	u5091
  6986  0012F0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  6987  0012F2                     u5091:
  6988  0012F2  502D               	movf	??___ftmul,w,c
  6989  0012F4  0100               	movlb	0	; () banked
  6990  0012F6  6F66               	movwf	___ftmul@exp& (0+255),b
  6991  0012F8  0100               	movlb	0	; () banked
  6992  0012FA  6766               	tstfsz	___ftmul@exp& (0+255),b
  6993  0012FC  D001               	goto	l4601
  6994  0012FE  D010               	goto	u5120
  6995  001300                     l4601:
  6996                           
  6997                           ; BSR set to: 0
  6998  001300  0100               	movlb	0	; () banked
  6999  001302  C065  F02D         	movff	___ftmul@f2+2,??___ftmul
  7000  001306  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  7001  001308  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  7002  00130A  0100               	movlb	0	; () banked
  7003  00130C  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7004  00130E  362D               	rlcf	??___ftmul& (0+255),f,c
  7005  001310  E301               	bnc	u5111
  7006  001312  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  7007  001314                     u5111:
  7008  001314  502D               	movf	??___ftmul,w,c
  7009  001316  0100               	movlb	0	; () banked
  7010  001318  6F6B               	movwf	___ftmul@sign& (0+255),b
  7011  00131A  0100               	movlb	0	; () banked
  7012  00131C  676B               	tstfsz	___ftmul@sign& (0+255),b
  7013  00131E  D00A               	goto	l4607
  7014  001320                     u5120:
  7015                           
  7016                           ; BSR set to: 0
  7017  001320  0E00               	movlw	0
  7018  001322  0100               	movlb	0	; () banked
  7019  001324  6F60               	movwf	?___ftmul& (0+255),b
  7020  001326  0E00               	movlw	0
  7021  001328  0100               	movlb	0	; () banked
  7022  00132A  6F61               	movwf	(?___ftmul+1)& (0+255),b
  7023  00132C  0E00               	movlw	0
  7024  00132E  0100               	movlb	0	; () banked
  7025  001330  6F62               	movwf	(?___ftmul+2)& (0+255),b
  7026  001332  D080               	goto	l1060
  7027  001334                     l4607:
  7028                           
  7029                           ; BSR set to: 0
  7030  001334  0100               	movlb	0	; () banked
  7031  001336  516B               	movf	___ftmul@sign& (0+255),w,b
  7032  001338  0F7B               	addlw	123
  7033  00133A  0100               	movlb	0	; () banked
  7034  00133C  2766               	addwf	___ftmul@exp& (0+255),f,b
  7035                           
  7036                           ; BSR set to: 0
  7037  00133E  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  7038  001342  0100               	movlb	0	; () banked
  7039  001344  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7040  001346  0100               	movlb	0	; () banked
  7041  001348  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  7042  00134A  0E80               	movlw	128
  7043  00134C  0100               	movlb	0	; () banked
  7044  00134E  176B               	andwf	___ftmul@sign& (0+255),f,b
  7045                           
  7046                           ; BSR set to: 0
  7047  001350  0100               	movlb	0	; () banked
  7048  001352  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7049                           
  7050                           ; BSR set to: 0
  7051  001354  0100               	movlb	0	; () banked
  7052  001356  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7053                           
  7054                           ; BSR set to: 0
  7055  001358  0EFF               	movlw	255
  7056  00135A  0100               	movlb	0	; () banked
  7057  00135C  1763               	andwf	___ftmul@f2& (0+255),f,b
  7058  00135E  0EFF               	movlw	255
  7059  001360  0100               	movlb	0	; () banked
  7060  001362  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7061  001364  0E00               	movlw	0
  7062  001366  0100               	movlb	0	; () banked
  7063  001368  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7064                           
  7065                           ; BSR set to: 0
  7066  00136A  0E00               	movlw	0
  7067  00136C  0100               	movlb	0	; () banked
  7068  00136E  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  7069  001370  0E00               	movlw	0
  7070  001372  0100               	movlb	0	; () banked
  7071  001374  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7072  001376  0E00               	movlw	0
  7073  001378  0100               	movlb	0	; () banked
  7074  00137A  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7075                           
  7076                           ; BSR set to: 0
  7077  00137C  0E07               	movlw	7
  7078  00137E  0100               	movlb	0	; () banked
  7079  001380  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7080  001382                     l4621:
  7081                           
  7082                           ; BSR set to: 0
  7083  001382  0100               	movlb	0	; () banked
  7084  001384  A160               	btfss	___ftmul@f1& (0+255),0,b
  7085  001386  D00C               	goto	l4625
  7086                           
  7087                           ; BSR set to: 0
  7088  001388  0100               	movlb	0	; () banked
  7089  00138A  5163               	movf	___ftmul@f2& (0+255),w,b
  7090  00138C  0100               	movlb	0	; () banked
  7091  00138E  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7092  001390  0100               	movlb	0	; () banked
  7093  001392  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7094  001394  0100               	movlb	0	; () banked
  7095  001396  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7096  001398  0100               	movlb	0	; () banked
  7097  00139A  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7098  00139C  0100               	movlb	0	; () banked
  7099  00139E  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7100  0013A0                     l4625:
  7101                           
  7102                           ; BSR set to: 0
  7103  0013A0  0100               	movlb	0	; () banked
  7104  0013A2  90D8               	bcf	status,0,c
  7105  0013A4  0100               	movlb	0	; () banked
  7106  0013A6  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7107  0013A8  0100               	movlb	0	; () banked
  7108  0013AA  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7109  0013AC  0100               	movlb	0	; () banked
  7110  0013AE  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7111  0013B0  0100               	movlb	0	; () banked
  7112  0013B2  90D8               	bcf	status,0,c
  7113  0013B4  0100               	movlb	0	; () banked
  7114  0013B6  3763               	rlcf	___ftmul@f2& (0+255),f,b
  7115  0013B8  0100               	movlb	0	; () banked
  7116  0013BA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7117  0013BC  0100               	movlb	0	; () banked
  7118  0013BE  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7119                           
  7120                           ; BSR set to: 0
  7121  0013C0  0100               	movlb	0	; () banked
  7122  0013C2  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7123  0013C4  D7DE               	goto	l4621
  7124                           
  7125                           ; BSR set to: 0
  7126                           
  7127                           ; BSR set to: 0
  7128  0013C6  0E09               	movlw	9
  7129  0013C8  0100               	movlb	0	; () banked
  7130  0013CA  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7131  0013CC                     l4631:
  7132                           
  7133                           ; BSR set to: 0
  7134  0013CC  0100               	movlb	0	; () banked
  7135  0013CE  A160               	btfss	___ftmul@f1& (0+255),0,b
  7136  0013D0  D00C               	goto	l4635
  7137                           
  7138                           ; BSR set to: 0
  7139  0013D2  0100               	movlb	0	; () banked
  7140  0013D4  5163               	movf	___ftmul@f2& (0+255),w,b
  7141  0013D6  0100               	movlb	0	; () banked
  7142  0013D8  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7143  0013DA  0100               	movlb	0	; () banked
  7144  0013DC  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7145  0013DE  0100               	movlb	0	; () banked
  7146  0013E0  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7147  0013E2  0100               	movlb	0	; () banked
  7148  0013E4  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7149  0013E6  0100               	movlb	0	; () banked
  7150  0013E8  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7151  0013EA                     l4635:
  7152                           
  7153                           ; BSR set to: 0
  7154  0013EA  0100               	movlb	0	; () banked
  7155  0013EC  90D8               	bcf	status,0,c
  7156  0013EE  0100               	movlb	0	; () banked
  7157  0013F0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7158  0013F2  0100               	movlb	0	; () banked
  7159  0013F4  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7160  0013F6  0100               	movlb	0	; () banked
  7161  0013F8  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7162  0013FA  0100               	movlb	0	; () banked
  7163  0013FC  90D8               	bcf	status,0,c
  7164  0013FE  0100               	movlb	0	; () banked
  7165  001400  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7166  001402  0100               	movlb	0	; () banked
  7167  001404  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7168  001406  0100               	movlb	0	; () banked
  7169  001408  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7170                           
  7171                           ; BSR set to: 0
  7172  00140A  0100               	movlb	0	; () banked
  7173  00140C  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7174  00140E  D7DE               	goto	l4631
  7175                           
  7176                           ; BSR set to: 0
  7177                           
  7178                           ; BSR set to: 0
  7179  001410  C067  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  7180  001414  C068  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7181  001418  C069  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7182  00141C  C066  F01C         	movff	___ftmul@exp,___ftpack@exp
  7183  001420  C06B  F01D         	movff	___ftmul@sign,___ftpack@sign
  7184  001424  ECB4  F00D         	call	___ftpack	;wreg free
  7185  001428  C019  F060         	movff	?___ftpack,?___ftmul
  7186  00142C  C01A  F061         	movff	?___ftpack+1,?___ftmul+1
  7187  001430  C01B  F062         	movff	?___ftpack+2,?___ftmul+2
  7188  001434                     l1060:
  7189  001434  0012               	return	
  7190  001436                     __end_of___ftmul:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           indf0	equ	0xFEF
  7200                           postinc0	equ	0xFEE
  7201                           fsr0h	equ	0xFEA
  7202                           fsr0l	equ	0xFE9
  7203                           wreg	equ	0xFE8
  7204                           postinc1	equ	0xFE6
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function ___awmod *****************
  7215 ;; Defined at:
  7216 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  dividend        2   24[COMRAM] int 
  7219 ;;  divisor         2   26[COMRAM] int 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  sign            1   29[COMRAM] unsigned char 
  7222 ;;  counter         1   28[COMRAM] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  2   24[COMRAM] int 
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0, prodl
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7232 ;;      Params:         4       0       0       0       0       0       0       0       0
  7233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7235 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7236 ;;Total ram usage:        6 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    4
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_fround
  7243 ;;		_scale
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text32
  7248  001E86                     __ptext32:
  7249                           	opt stack 0
  7250  001E86                     ___awmod:
  7251                           	opt stack 22
  7252                           
  7253                           ;incstack = 0
  7254  001E86  0E00               	movlw	0
  7255  001E88  6E1E               	movwf	___awmod@sign,c
  7256  001E8A  501A               	movf	___awmod@dividend+1,w,c
  7257  001E8C  0A80               	xorlw	128
  7258  001E8E  6EF3               	movwf	prodl,c
  7259  001E90  0E80               	movlw	128
  7260  001E92  5CF3               	subwf	prodl,w,c
  7261  001E94  0E00               	movlw	0
  7262  001E96  B4D8               	btfsc	status,2,c
  7263  001E98  5C19               	subwf	___awmod@dividend,w,c
  7264  001E9A  B0D8               	btfsc	status,0,c
  7265  001E9C  D006               	goto	l4695
  7266  001E9E  6C19               	negf	___awmod@dividend,c
  7267  001EA0  1E1A               	comf	___awmod@dividend+1,f,c
  7268  001EA2  B0D8               	btfsc	status,0,c
  7269  001EA4  2A1A               	incf	___awmod@dividend+1,f,c
  7270  001EA6  0E01               	movlw	1
  7271  001EA8  6E1E               	movwf	___awmod@sign,c
  7272  001EAA                     l4695:
  7273  001EAA  501C               	movf	___awmod@divisor+1,w,c
  7274  001EAC  0A80               	xorlw	128
  7275  001EAE  6EF3               	movwf	prodl,c
  7276  001EB0  0E80               	movlw	128
  7277  001EB2  5CF3               	subwf	prodl,w,c
  7278  001EB4  0E00               	movlw	0
  7279  001EB6  B4D8               	btfsc	status,2,c
  7280  001EB8  5C1B               	subwf	___awmod@divisor,w,c
  7281  001EBA  B0D8               	btfsc	status,0,c
  7282  001EBC  D004               	goto	l4699
  7283  001EBE  6C1B               	negf	___awmod@divisor,c
  7284  001EC0  1E1C               	comf	___awmod@divisor+1,f,c
  7285  001EC2  B0D8               	btfsc	status,0,c
  7286  001EC4  2A1C               	incf	___awmod@divisor+1,f,c
  7287  001EC6                     l4699:
  7288  001EC6  501C               	movf	___awmod@divisor+1,w,c
  7289  001EC8  101B               	iorwf	___awmod@divisor,w,c
  7290  001ECA  B4D8               	btfsc	status,2,c
  7291  001ECC  D018               	goto	l4715
  7292  001ECE  0E01               	movlw	1
  7293  001ED0  6E1D               	movwf	___awmod@counter,c
  7294  001ED2  D004               	goto	l4705
  7295  001ED4                     l4703:
  7296  001ED4  90D8               	bcf	status,0,c
  7297  001ED6  361B               	rlcf	___awmod@divisor,f,c
  7298  001ED8  361C               	rlcf	___awmod@divisor+1,f,c
  7299  001EDA  2A1D               	incf	___awmod@counter,f,c
  7300  001EDC                     l4705:
  7301  001EDC  AE1C               	btfss	___awmod@divisor+1,7,c
  7302  001EDE  D7FA               	goto	l4703
  7303  001EE0                     l4707:
  7304  001EE0  501B               	movf	___awmod@divisor,w,c
  7305  001EE2  5C19               	subwf	___awmod@dividend,w,c
  7306  001EE4  501C               	movf	___awmod@divisor+1,w,c
  7307  001EE6  581A               	subwfb	___awmod@dividend+1,w,c
  7308  001EE8  A0D8               	btfss	status,0,c
  7309  001EEA  D004               	goto	l4711
  7310  001EEC  501B               	movf	___awmod@divisor,w,c
  7311  001EEE  5E19               	subwf	___awmod@dividend,f,c
  7312  001EF0  501C               	movf	___awmod@divisor+1,w,c
  7313  001EF2  5A1A               	subwfb	___awmod@dividend+1,f,c
  7314  001EF4                     l4711:
  7315  001EF4  90D8               	bcf	status,0,c
  7316  001EF6  321C               	rrcf	___awmod@divisor+1,f,c
  7317  001EF8  321B               	rrcf	___awmod@divisor,f,c
  7318  001EFA  2E1D               	decfsz	___awmod@counter,f,c
  7319  001EFC  D7F1               	goto	l4707
  7320  001EFE                     l4715:
  7321  001EFE  501E               	movf	___awmod@sign,w,c
  7322  001F00  B4D8               	btfsc	status,2,c
  7323  001F02  D004               	goto	l4719
  7324  001F04  6C19               	negf	___awmod@dividend,c
  7325  001F06  1E1A               	comf	___awmod@dividend+1,f,c
  7326  001F08  B0D8               	btfsc	status,0,c
  7327  001F0A  2A1A               	incf	___awmod@dividend+1,f,c
  7328  001F0C                     l4719:
  7329  001F0C  C019  F019         	movff	___awmod@dividend,?___awmod
  7330  001F10  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  7331  001F14  0012               	return	
  7332  001F16                     __end_of___awmod:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           indf0	equ	0xFEF
  7342                           postinc0	equ	0xFEE
  7343                           fsr0h	equ	0xFEA
  7344                           fsr0l	equ	0xFE9
  7345                           wreg	equ	0xFE8
  7346                           postinc1	equ	0xFE6
  7347                           postdec1	equ	0xFE5
  7348                           fsr1l	equ	0xFE1
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           fsr2h	equ	0xFDA
  7353                           fsr2l	equ	0xFD9
  7354                           status	equ	0xFD8
  7355                           
  7356 ;; *************** function ___awdiv *****************
  7357 ;; Defined at:
  7358 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  dividend        2   30[COMRAM] int 
  7361 ;;  divisor         2   32[COMRAM] int 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  quotient        2   36[COMRAM] int 
  7364 ;;  sign            1   35[COMRAM] unsigned char 
  7365 ;;  counter         1   34[COMRAM] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  2   30[COMRAM] int 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0, prodl
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7375 ;;      Params:         4       0       0       0       0       0       0       0       0
  7376 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7378 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7379 ;;Total ram usage:        8 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    4
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_fround
  7386 ;;		_scale
  7387 ;;		_sprintf
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           	psect	text33
  7392  001CB6                     __ptext33:
  7393                           	opt stack 0
  7394  001CB6                     ___awdiv:
  7395                           	opt stack 22
  7396                           
  7397                           ;incstack = 0
  7398  001CB6  0E00               	movlw	0
  7399  001CB8  6E24               	movwf	___awdiv@sign,c
  7400  001CBA  5022               	movf	___awdiv@divisor+1,w,c
  7401  001CBC  0A80               	xorlw	128
  7402  001CBE  6EF3               	movwf	prodl,c
  7403  001CC0  0E80               	movlw	128
  7404  001CC2  5CF3               	subwf	prodl,w,c
  7405  001CC4  0E00               	movlw	0
  7406  001CC6  B4D8               	btfsc	status,2,c
  7407  001CC8  5C21               	subwf	___awdiv@divisor,w,c
  7408  001CCA  B0D8               	btfsc	status,0,c
  7409  001CCC  D006               	goto	l4651
  7410  001CCE  6C21               	negf	___awdiv@divisor,c
  7411  001CD0  1E22               	comf	___awdiv@divisor+1,f,c
  7412  001CD2  B0D8               	btfsc	status,0,c
  7413  001CD4  2A22               	incf	___awdiv@divisor+1,f,c
  7414  001CD6  0E01               	movlw	1
  7415  001CD8  6E24               	movwf	___awdiv@sign,c
  7416  001CDA                     l4651:
  7417  001CDA  5020               	movf	___awdiv@dividend+1,w,c
  7418  001CDC  0A80               	xorlw	128
  7419  001CDE  6EF3               	movwf	prodl,c
  7420  001CE0  0E80               	movlw	128
  7421  001CE2  5CF3               	subwf	prodl,w,c
  7422  001CE4  0E00               	movlw	0
  7423  001CE6  B4D8               	btfsc	status,2,c
  7424  001CE8  5C1F               	subwf	___awdiv@dividend,w,c
  7425  001CEA  B0D8               	btfsc	status,0,c
  7426  001CEC  D006               	goto	l4657
  7427  001CEE  6C1F               	negf	___awdiv@dividend,c
  7428  001CF0  1E20               	comf	___awdiv@dividend+1,f,c
  7429  001CF2  B0D8               	btfsc	status,0,c
  7430  001CF4  2A20               	incf	___awdiv@dividend+1,f,c
  7431  001CF6  0E01               	movlw	1
  7432  001CF8  1A24               	xorwf	___awdiv@sign,f,c
  7433  001CFA                     l4657:
  7434  001CFA  0E00               	movlw	0
  7435  001CFC  6E26               	movwf	___awdiv@quotient+1,c
  7436  001CFE  0E00               	movlw	0
  7437  001D00  6E25               	movwf	___awdiv@quotient,c
  7438  001D02  5022               	movf	___awdiv@divisor+1,w,c
  7439  001D04  1021               	iorwf	___awdiv@divisor,w,c
  7440  001D06  B4D8               	btfsc	status,2,c
  7441  001D08  D01C               	goto	l4679
  7442  001D0A  0E01               	movlw	1
  7443  001D0C  6E23               	movwf	___awdiv@counter,c
  7444  001D0E  D004               	goto	l4665
  7445  001D10                     l4663:
  7446  001D10  90D8               	bcf	status,0,c
  7447  001D12  3621               	rlcf	___awdiv@divisor,f,c
  7448  001D14  3622               	rlcf	___awdiv@divisor+1,f,c
  7449  001D16  2A23               	incf	___awdiv@counter,f,c
  7450  001D18                     l4665:
  7451  001D18  AE22               	btfss	___awdiv@divisor+1,7,c
  7452  001D1A  D7FA               	goto	l4663
  7453  001D1C                     l4667:
  7454  001D1C  90D8               	bcf	status,0,c
  7455  001D1E  3625               	rlcf	___awdiv@quotient,f,c
  7456  001D20  3626               	rlcf	___awdiv@quotient+1,f,c
  7457  001D22  5021               	movf	___awdiv@divisor,w,c
  7458  001D24  5C1F               	subwf	___awdiv@dividend,w,c
  7459  001D26  5022               	movf	___awdiv@divisor+1,w,c
  7460  001D28  5820               	subwfb	___awdiv@dividend+1,w,c
  7461  001D2A  A0D8               	btfss	status,0,c
  7462  001D2C  D005               	goto	l4675
  7463  001D2E  5021               	movf	___awdiv@divisor,w,c
  7464  001D30  5E1F               	subwf	___awdiv@dividend,f,c
  7465  001D32  5022               	movf	___awdiv@divisor+1,w,c
  7466  001D34  5A20               	subwfb	___awdiv@dividend+1,f,c
  7467  001D36  8025               	bsf	___awdiv@quotient,0,c
  7468  001D38                     l4675:
  7469  001D38  90D8               	bcf	status,0,c
  7470  001D3A  3222               	rrcf	___awdiv@divisor+1,f,c
  7471  001D3C  3221               	rrcf	___awdiv@divisor,f,c
  7472  001D3E  2E23               	decfsz	___awdiv@counter,f,c
  7473  001D40  D7ED               	goto	l4667
  7474  001D42                     l4679:
  7475  001D42  5024               	movf	___awdiv@sign,w,c
  7476  001D44  B4D8               	btfsc	status,2,c
  7477  001D46  D004               	goto	l4683
  7478  001D48  6C25               	negf	___awdiv@quotient,c
  7479  001D4A  1E26               	comf	___awdiv@quotient+1,f,c
  7480  001D4C  B0D8               	btfsc	status,0,c
  7481  001D4E  2A26               	incf	___awdiv@quotient+1,f,c
  7482  001D50                     l4683:
  7483  001D50  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7484  001D54  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7485  001D58  0012               	return	
  7486  001D5A                     __end_of___awdiv:
  7487                           	opt stack 0
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           indf0	equ	0xFEF
  7496                           postinc0	equ	0xFEE
  7497                           fsr0h	equ	0xFEA
  7498                           fsr0l	equ	0xFE9
  7499                           wreg	equ	0xFE8
  7500                           postinc1	equ	0xFE6
  7501                           postdec1	equ	0xFE5
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function __tdiv_to_l_ *****************
  7511 ;; Defined at:
  7512 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  f1              3   24[COMRAM] float 
  7515 ;;  f2              3   27[COMRAM] float 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  quot            4   33[COMRAM] unsigned long 
  7518 ;;  exp1            1   38[COMRAM] unsigned char 
  7519 ;;  cntr            1   37[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  4   24[COMRAM] unsigned long 
  7522 ;; Registers used:
  7523 ;;		wreg, status,2, status,0
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7529 ;;      Params:         6       0       0       0       0       0       0       0       0
  7530 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7531 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7532 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7533 ;;Total ram usage:       15 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    4
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_sprintf
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text34
  7544  0017F8                     __ptext34:
  7545                           	opt stack 0
  7546  0017F8                     __tdiv_to_l_:
  7547                           	opt stack 23
  7548                           
  7549                           ;incstack = 0
  7550  0017F8  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7551  0017FC  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7552  0017FE  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7553  001800  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7554  001802  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7555  001804  E301               	bnc	u5501
  7556  001806  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7557  001808                     u5501:
  7558  001808  501F               	movf	??__tdiv_to_l_,w,c
  7559  00180A  6E27               	movwf	__tdiv_to_l_@exp1,c
  7560  00180C  6627               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7561  00180E  D001               	goto	l4885
  7562  001810  D059               	goto	u5570
  7563  001812                     l4885:
  7564  001812  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7565  001816  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7566  001818  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7567  00181A  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7568  00181C  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7569  00181E  E301               	bnc	u5521
  7570  001820  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7571  001822                     u5521:
  7572  001822  501F               	movf	??__tdiv_to_l_,w,c
  7573  001824  6E26               	movwf	__tdiv_to_l_@cntr,c
  7574  001826  6626               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7575  001828  D001               	goto	l4891
  7576  00182A  D04C               	goto	u5570
  7577  00182C                     l4891:
  7578  00182C  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7579  00182E  0EFF               	movlw	255
  7580  001830  1619               	andwf	__tdiv_to_l_@f1,f,c
  7581  001832  0EFF               	movlw	255
  7582  001834  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7583  001836  0E00               	movlw	0
  7584  001838  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7585  00183A  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7586  00183C  0EFF               	movlw	255
  7587  00183E  161C               	andwf	__tdiv_to_l_@f2,f,c
  7588  001840  0EFF               	movlw	255
  7589  001842  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7590  001844  0E00               	movlw	0
  7591  001846  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7592  001848  0E00               	movlw	0
  7593  00184A  6E22               	movwf	__tdiv_to_l_@quot,c
  7594  00184C  0E00               	movlw	0
  7595  00184E  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7596  001850  0E00               	movlw	0
  7597  001852  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7598  001854  0E00               	movlw	0
  7599  001856  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7600  001858  0E7F               	movlw	127
  7601  00185A  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7602  00185C  5026               	movf	__tdiv_to_l_@cntr,w,c
  7603  00185E  0F98               	addlw	152
  7604  001860  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7605  001862  0E18               	movlw	24
  7606  001864  6E26               	movwf	__tdiv_to_l_@cntr,c
  7607  001866                     l1038:
  7608  001866  90D8               	bcf	status,0,c
  7609  001868  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7610  00186A  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7611  00186C  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7612  00186E  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7613  001870  501C               	movf	__tdiv_to_l_@f2,w,c
  7614  001872  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7615  001874  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7616  001876  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7617  001878  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7618  00187A  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7619  00187C  A0D8               	btfss	status,0,c
  7620  00187E  D007               	goto	l1039
  7621  001880  501C               	movf	__tdiv_to_l_@f2,w,c
  7622  001882  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7623  001884  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7624  001886  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7625  001888  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7626  00188A  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7627  00188C  8022               	bsf	__tdiv_to_l_@quot,0,c
  7628  00188E                     l1039:
  7629  00188E  90D8               	bcf	status,0,c
  7630  001890  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7631  001892  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7632  001894  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7633  001896  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7634  001898  D7E6               	goto	l1038
  7635  00189A  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7636  00189C  D010               	goto	l4923
  7637  00189E  5027               	movf	__tdiv_to_l_@exp1,w,c
  7638  0018A0  0A80               	xorlw	128
  7639  0018A2  6E1F               	movwf	??__tdiv_to_l_& (0+255),c
  7640  0018A4  0EE9               	movlw	233
  7641  0018A6  0A80               	xorlw	128
  7642  0018A8  5C1F               	subwf	??__tdiv_to_l_,w,c
  7643  0018AA  A0D8               	btfss	status,0,c
  7644  0018AC  D00B               	goto	u5570
  7645  0018AE                     l4919:
  7646  0018AE  90D8               	bcf	status,0,c
  7647  0018B0  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7648  0018B2  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7649  0018B4  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7650  0018B6  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7651  0018B8  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7652  0018BA  D7F9               	goto	l4919
  7653  0018BC  D014               	goto	l1045
  7654  0018BE                     l4923:
  7655  0018BE  0E17               	movlw	23
  7656  0018C0  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7657  0018C2  D00F               	goto	l4931
  7658  0018C4                     u5570:
  7659  0018C4  0E00               	movlw	0
  7660  0018C6  6E19               	movwf	?__tdiv_to_l_,c
  7661  0018C8  0E00               	movlw	0
  7662  0018CA  6E1A               	movwf	?__tdiv_to_l_+1,c
  7663  0018CC  0E00               	movlw	0
  7664  0018CE  6E1B               	movwf	?__tdiv_to_l_+2,c
  7665  0018D0  0E00               	movlw	0
  7666  0018D2  6E1C               	movwf	?__tdiv_to_l_+3,c
  7667  0018D4  D010               	goto	l1036
  7668  0018D6                     l4929:
  7669  0018D6  90D8               	bcf	status,0,c
  7670  0018D8  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7671  0018DA  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7672  0018DC  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7673  0018DE  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7674  0018E0  0627               	decf	__tdiv_to_l_@exp1,f,c
  7675  0018E2                     l4931:
  7676  0018E2  6627               	tstfsz	__tdiv_to_l_@exp1,c
  7677  0018E4  D7F8               	goto	l4929
  7678  0018E6                     l1045:
  7679  0018E6  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7680  0018EA  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7681  0018EE  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7682  0018F2  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7683  0018F6                     l1036:
  7684  0018F6  0012               	return	
  7685  0018F8                     __end_of__tdiv_to_l_:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           indf0	equ	0xFEF
  7695                           postinc0	equ	0xFEE
  7696                           fsr0h	equ	0xFEA
  7697                           fsr0l	equ	0xFE9
  7698                           wreg	equ	0xFE8
  7699                           postinc1	equ	0xFE6
  7700                           postdec1	equ	0xFE5
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function __div_to_l_ *****************
  7710 ;; Defined at:
  7711 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  f1              3   24[COMRAM] unsigned long 
  7714 ;;  f2              3   27[COMRAM] unsigned long 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  quot            4   34[COMRAM] unsigned long 
  7717 ;;  exp1            1   39[COMRAM] unsigned char 
  7718 ;;  cntr            1   38[COMRAM] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  4   24[COMRAM] unsigned long 
  7721 ;; Registers used:
  7722 ;;		wreg, status,2, status,0
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7728 ;;      Params:         6       0       0       0       0       0       0       0       0
  7729 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7730 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7731 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7732 ;;Total ram usage:       16 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    4
  7735 ;; This function calls:
  7736 ;;		Nothing
  7737 ;; This function is called by:
  7738 ;;		_sprintf
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text35
  7743  0016C2                     __ptext35:
  7744                           	opt stack 0
  7745  0016C2                     __div_to_l_:
  7746                           	opt stack 23
  7747                           
  7748                           ;incstack = 0
  7749  0016C2  C019  F01F         	movff	__div_to_l_@f1,??__div_to_l_
  7750  0016C6  C01A  F020         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7751  0016CA  C01B  F021         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7752  0016CE  C01C  F022         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7753  0016D2  0E18               	movlw	24
  7754  0016D4  D005               	goto	u5590
  7755  0016D6                     u5595:
  7756  0016D6  90D8               	bcf	status,0,c
  7757  0016D8  3222               	rrcf	??__div_to_l_+3,f,c
  7758  0016DA  3221               	rrcf	??__div_to_l_+2,f,c
  7759  0016DC  3220               	rrcf	??__div_to_l_+1,f,c
  7760  0016DE  321F               	rrcf	??__div_to_l_,f,c
  7761  0016E0                     u5590:
  7762  0016E0  2EE8               	decfsz	wreg,f,c
  7763  0016E2  D7F9               	goto	u5595
  7764  0016E4  501F               	movf	??__div_to_l_,w,c
  7765  0016E6  6E28               	movwf	__div_to_l_@exp1,c
  7766  0016E8  6628               	tstfsz	__div_to_l_@exp1& (0+255),c
  7767  0016EA  D001               	goto	l4939
  7768  0016EC  D06B               	goto	u5660
  7769  0016EE                     l4939:
  7770  0016EE  C01C  F01F         	movff	__div_to_l_@f2,??__div_to_l_
  7771  0016F2  C01D  F020         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7772  0016F6  C01E  F021         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7773  0016FA  C01F  F022         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7774  0016FE  0E18               	movlw	24
  7775  001700  D005               	goto	u5610
  7776  001702                     u5615:
  7777  001702  90D8               	bcf	status,0,c
  7778  001704  3222               	rrcf	??__div_to_l_+3,f,c
  7779  001706  3221               	rrcf	??__div_to_l_+2,f,c
  7780  001708  3220               	rrcf	??__div_to_l_+1,f,c
  7781  00170A  321F               	rrcf	??__div_to_l_,f,c
  7782  00170C                     u5610:
  7783  00170C  2EE8               	decfsz	wreg,f,c
  7784  00170E  D7F9               	goto	u5615
  7785  001710  501F               	movf	??__div_to_l_,w,c
  7786  001712  6E27               	movwf	__div_to_l_@cntr,c
  7787  001714  6627               	tstfsz	__div_to_l_@cntr& (0+255),c
  7788  001716  D001               	goto	l4945
  7789  001718  D055               	goto	u5660
  7790  00171A                     l4945:
  7791  00171A  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7792  00171C  0EFF               	movlw	255
  7793  00171E  1619               	andwf	__div_to_l_@f1,f,c
  7794  001720  0EFF               	movlw	255
  7795  001722  161A               	andwf	__div_to_l_@f1+1,f,c
  7796  001724  0EFF               	movlw	255
  7797  001726  161B               	andwf	__div_to_l_@f1+2,f,c
  7798  001728  0E00               	movlw	0
  7799  00172A  161C               	andwf	__div_to_l_@f1+3,f,c
  7800  00172C  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7801  00172E  0EFF               	movlw	255
  7802  001730  161C               	andwf	__div_to_l_@f2,f,c
  7803  001732  0EFF               	movlw	255
  7804  001734  161D               	andwf	__div_to_l_@f2+1,f,c
  7805  001736  0EFF               	movlw	255
  7806  001738  161E               	andwf	__div_to_l_@f2+2,f,c
  7807  00173A  0E00               	movlw	0
  7808  00173C  161F               	andwf	__div_to_l_@f2+3,f,c
  7809  00173E  0E00               	movlw	0
  7810  001740  6E23               	movwf	__div_to_l_@quot,c
  7811  001742  0E00               	movlw	0
  7812  001744  6E24               	movwf	__div_to_l_@quot+1,c
  7813  001746  0E00               	movlw	0
  7814  001748  6E25               	movwf	__div_to_l_@quot+2,c
  7815  00174A  0E00               	movlw	0
  7816  00174C  6E26               	movwf	__div_to_l_@quot+3,c
  7817  00174E  0E7F               	movlw	127
  7818  001750  5E28               	subwf	__div_to_l_@exp1,f,c
  7819  001752  5027               	movf	__div_to_l_@cntr,w,c
  7820  001754  0FA0               	addlw	160
  7821  001756  5E28               	subwf	__div_to_l_@exp1,f,c
  7822  001758  0E20               	movlw	32
  7823  00175A  6E27               	movwf	__div_to_l_@cntr,c
  7824  00175C                     l4959:
  7825  00175C  90D8               	bcf	status,0,c
  7826  00175E  3623               	rlcf	__div_to_l_@quot,f,c
  7827  001760  3624               	rlcf	__div_to_l_@quot+1,f,c
  7828  001762  3625               	rlcf	__div_to_l_@quot+2,f,c
  7829  001764  3626               	rlcf	__div_to_l_@quot+3,f,c
  7830  001766  501C               	movf	__div_to_l_@f2,w,c
  7831  001768  5C19               	subwf	__div_to_l_@f1,w,c
  7832  00176A  501D               	movf	__div_to_l_@f2+1,w,c
  7833  00176C  581A               	subwfb	__div_to_l_@f1+1,w,c
  7834  00176E  501E               	movf	__div_to_l_@f2+2,w,c
  7835  001770  581B               	subwfb	__div_to_l_@f1+2,w,c
  7836  001772  501F               	movf	__div_to_l_@f2+3,w,c
  7837  001774  581C               	subwfb	__div_to_l_@f1+3,w,c
  7838  001776  A0D8               	btfss	status,0,c
  7839  001778  D009               	goto	l4967
  7840  00177A  501C               	movf	__div_to_l_@f2,w,c
  7841  00177C  5E19               	subwf	__div_to_l_@f1,f,c
  7842  00177E  501D               	movf	__div_to_l_@f2+1,w,c
  7843  001780  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7844  001782  501E               	movf	__div_to_l_@f2+2,w,c
  7845  001784  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7846  001786  501F               	movf	__div_to_l_@f2+3,w,c
  7847  001788  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7848  00178A  8023               	bsf	__div_to_l_@quot,0,c
  7849  00178C                     l4967:
  7850  00178C  90D8               	bcf	status,0,c
  7851  00178E  3619               	rlcf	__div_to_l_@f1,f,c
  7852  001790  361A               	rlcf	__div_to_l_@f1+1,f,c
  7853  001792  361B               	rlcf	__div_to_l_@f1+2,f,c
  7854  001794  361C               	rlcf	__div_to_l_@f1+3,f,c
  7855  001796  2E27               	decfsz	__div_to_l_@cntr,f,c
  7856  001798  D7E1               	goto	l4959
  7857  00179A  AE28               	btfss	__div_to_l_@exp1,7,c
  7858  00179C  D010               	goto	l4981
  7859  00179E  5028               	movf	__div_to_l_@exp1,w,c
  7860  0017A0  0A80               	xorlw	128
  7861  0017A2  6E1F               	movwf	??__div_to_l_& (0+255),c
  7862  0017A4  0EE1               	movlw	225
  7863  0017A6  0A80               	xorlw	128
  7864  0017A8  5C1F               	subwf	??__div_to_l_,w,c
  7865  0017AA  A0D8               	btfss	status,0,c
  7866  0017AC  D00B               	goto	u5660
  7867  0017AE                     l4977:
  7868  0017AE  90D8               	bcf	status,0,c
  7869  0017B0  3226               	rrcf	__div_to_l_@quot+3,f,c
  7870  0017B2  3225               	rrcf	__div_to_l_@quot+2,f,c
  7871  0017B4  3224               	rrcf	__div_to_l_@quot+1,f,c
  7872  0017B6  3223               	rrcf	__div_to_l_@quot,f,c
  7873  0017B8  3E28               	incfsz	__div_to_l_@exp1,f,c
  7874  0017BA  D7F9               	goto	l4977
  7875  0017BC  D014               	goto	l927
  7876  0017BE                     l4981:
  7877  0017BE  0E1F               	movlw	31
  7878  0017C0  6428               	cpfsgt	__div_to_l_@exp1,c
  7879  0017C2  D00F               	goto	l4989
  7880  0017C4                     u5660:
  7881  0017C4  0E00               	movlw	0
  7882  0017C6  6E19               	movwf	?__div_to_l_,c
  7883  0017C8  0E00               	movlw	0
  7884  0017CA  6E1A               	movwf	?__div_to_l_+1,c
  7885  0017CC  0E00               	movlw	0
  7886  0017CE  6E1B               	movwf	?__div_to_l_+2,c
  7887  0017D0  0E00               	movlw	0
  7888  0017D2  6E1C               	movwf	?__div_to_l_+3,c
  7889  0017D4  D010               	goto	l918
  7890  0017D6                     l4987:
  7891  0017D6  90D8               	bcf	status,0,c
  7892  0017D8  3623               	rlcf	__div_to_l_@quot,f,c
  7893  0017DA  3624               	rlcf	__div_to_l_@quot+1,f,c
  7894  0017DC  3625               	rlcf	__div_to_l_@quot+2,f,c
  7895  0017DE  3626               	rlcf	__div_to_l_@quot+3,f,c
  7896  0017E0  0628               	decf	__div_to_l_@exp1,f,c
  7897  0017E2                     l4989:
  7898  0017E2  6628               	tstfsz	__div_to_l_@exp1,c
  7899  0017E4  D7F8               	goto	l4987
  7900  0017E6                     l927:
  7901  0017E6  C023  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7902  0017EA  C024  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7903  0017EE  C025  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7904  0017F2  C026  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7905  0017F6                     l918:
  7906  0017F6  0012               	return	
  7907  0017F8                     __end_of__div_to_l_:
  7908                           	opt stack 0
  7909                           tblptru	equ	0xFF8
  7910                           tblptrh	equ	0xFF7
  7911                           tblptrl	equ	0xFF6
  7912                           tablat	equ	0xFF5
  7913                           prodh	equ	0xFF4
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           indf0	equ	0xFEF
  7917                           postinc0	equ	0xFEE
  7918                           fsr0h	equ	0xFEA
  7919                           fsr0l	equ	0xFE9
  7920                           wreg	equ	0xFE8
  7921                           postinc1	equ	0xFE6
  7922                           postdec1	equ	0xFE5
  7923                           fsr1l	equ	0xFE1
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931 ;; *************** function ___lltoft *****************
  7932 ;; Defined at:
  7933 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  c               4   32[COMRAM] unsigned long 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  exp             1   40[COMRAM] unsigned char 
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  3   32[COMRAM] float 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2, status,0, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7947 ;;      Params:         4       0       0       0       0       0       0       0       0
  7948 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7949 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7950 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        9 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    5
  7954 ;; This function calls:
  7955 ;;		___ftpack
  7956 ;; This function is called by:
  7957 ;;		_sprintf
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text36
  7962  002444                     __ptext36:
  7963                           	opt stack 0
  7964  002444                     ___lltoft:
  7965                           	opt stack 22
  7966                           
  7967                           ;incstack = 0
  7968  002444  0E8E               	movlw	142
  7969  002446  6E29               	movwf	___lltoft@exp,c
  7970  002448  D006               	goto	l5107
  7971  00244A                     l5105:
  7972  00244A  90D8               	bcf	status,0,c
  7973  00244C  3224               	rrcf	___lltoft@c+3,f,c
  7974  00244E  3223               	rrcf	___lltoft@c+2,f,c
  7975  002450  3222               	rrcf	___lltoft@c+1,f,c
  7976  002452  3221               	rrcf	___lltoft@c,f,c
  7977  002454  2A29               	incf	___lltoft@exp,f,c
  7978  002456                     l5107:
  7979  002456  0E00               	movlw	0
  7980  002458  1421               	andwf	___lltoft@c,w,c
  7981  00245A  6E25               	movwf	??___lltoft& (0+255),c
  7982  00245C  0E00               	movlw	0
  7983  00245E  1422               	andwf	___lltoft@c+1,w,c
  7984  002460  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7985  002462  0E00               	movlw	0
  7986  002464  1423               	andwf	___lltoft@c+2,w,c
  7987  002466  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7988  002468  0EFF               	movlw	255
  7989  00246A  1424               	andwf	___lltoft@c+3,w,c
  7990  00246C  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7991  00246E  5028               	movf	??___lltoft+3,w,c
  7992  002470  1025               	iorwf	??___lltoft,w,c
  7993  002472  1026               	iorwf	??___lltoft+1,w,c
  7994  002474  1027               	iorwf	??___lltoft+2,w,c
  7995  002476  A4D8               	btfss	status,2,c
  7996  002478  D7E8               	goto	l5105
  7997  00247A  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7998  00247E  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7999  002482  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  8000  002486  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  8001  00248A  0E00               	movlw	0
  8002  00248C  6E1D               	movwf	___ftpack@sign,c
  8003  00248E  ECB4  F00D         	call	___ftpack	;wreg free
  8004  002492  C019  F021         	movff	?___ftpack,?___lltoft
  8005  002496  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  8006  00249A  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  8007  00249E  0012               	return	
  8008  0024A0                     __end_of___lltoft:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           indf0	equ	0xFEF
  8018                           postinc0	equ	0xFEE
  8019                           fsr0h	equ	0xFEA
  8020                           fsr0l	equ	0xFE9
  8021                           wreg	equ	0xFE8
  8022                           postinc1	equ	0xFE6
  8023                           postdec1	equ	0xFE5
  8024                           fsr1l	equ	0xFE1
  8025                           indf2	equ	0xFDF
  8026                           postinc2	equ	0xFDE
  8027                           postdec2	equ	0xFDD
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function ___llmod *****************
  8033 ;; Defined at:
  8034 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  dividend        4   37[COMRAM] unsigned long 
  8037 ;;  divisor         4   41[COMRAM] unsigned long 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  counter         1   45[COMRAM] unsigned char 
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  4   37[COMRAM] unsigned long 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8049 ;;      Params:         8       0       0       0       0       0       0       0       0
  8050 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8052 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8053 ;;Total ram usage:        9 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    4
  8056 ;; This function calls:
  8057 ;;		Nothing
  8058 ;; This function is called by:
  8059 ;;		_sprintf
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text37
  8064  0023DE                     __ptext37:
  8065                           	opt stack 0
  8066  0023DE                     ___llmod:
  8067                           	opt stack 23
  8068                           
  8069                           ;incstack = 0
  8070  0023DE  502D               	movf	___llmod@divisor+3,w,c
  8071  0023E0  102A               	iorwf	___llmod@divisor,w,c
  8072  0023E2  102B               	iorwf	___llmod@divisor+1,w,c
  8073  0023E4  102C               	iorwf	___llmod@divisor+2,w,c
  8074  0023E6  B4D8               	btfsc	status,2,c
  8075  0023E8  D024               	goto	l1129
  8076  0023EA  0E01               	movlw	1
  8077  0023EC  6E2E               	movwf	___llmod@counter,c
  8078  0023EE  D006               	goto	l5093
  8079  0023F0                     l5091:
  8080  0023F0  90D8               	bcf	status,0,c
  8081  0023F2  362A               	rlcf	___llmod@divisor,f,c
  8082  0023F4  362B               	rlcf	___llmod@divisor+1,f,c
  8083  0023F6  362C               	rlcf	___llmod@divisor+2,f,c
  8084  0023F8  362D               	rlcf	___llmod@divisor+3,f,c
  8085  0023FA  2A2E               	incf	___llmod@counter,f,c
  8086  0023FC                     l5093:
  8087  0023FC  AE2D               	btfss	___llmod@divisor+3,7,c
  8088  0023FE  D7F8               	goto	l5091
  8089  002400                     l5095:
  8090  002400  502A               	movf	___llmod@divisor,w,c
  8091  002402  5C26               	subwf	___llmod@dividend,w,c
  8092  002404  502B               	movf	___llmod@divisor+1,w,c
  8093  002406  5827               	subwfb	___llmod@dividend+1,w,c
  8094  002408  502C               	movf	___llmod@divisor+2,w,c
  8095  00240A  5828               	subwfb	___llmod@dividend+2,w,c
  8096  00240C  502D               	movf	___llmod@divisor+3,w,c
  8097  00240E  5829               	subwfb	___llmod@dividend+3,w,c
  8098  002410  A0D8               	btfss	status,0,c
  8099  002412  D008               	goto	l5099
  8100  002414  502A               	movf	___llmod@divisor,w,c
  8101  002416  5E26               	subwf	___llmod@dividend,f,c
  8102  002418  502B               	movf	___llmod@divisor+1,w,c
  8103  00241A  5A27               	subwfb	___llmod@dividend+1,f,c
  8104  00241C  502C               	movf	___llmod@divisor+2,w,c
  8105  00241E  5A28               	subwfb	___llmod@dividend+2,f,c
  8106  002420  502D               	movf	___llmod@divisor+3,w,c
  8107  002422  5A29               	subwfb	___llmod@dividend+3,f,c
  8108  002424                     l5099:
  8109  002424  90D8               	bcf	status,0,c
  8110  002426  322D               	rrcf	___llmod@divisor+3,f,c
  8111  002428  322C               	rrcf	___llmod@divisor+2,f,c
  8112  00242A  322B               	rrcf	___llmod@divisor+1,f,c
  8113  00242C  322A               	rrcf	___llmod@divisor,f,c
  8114  00242E  2E2E               	decfsz	___llmod@counter,f,c
  8115  002430  D7E7               	goto	l5095
  8116  002432                     l1129:
  8117  002432  C026  F026         	movff	___llmod@dividend,?___llmod
  8118  002436  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  8119  00243A  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  8120  00243E  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  8121  002442  0012               	return	
  8122  002444                     __end_of___llmod:
  8123                           	opt stack 0
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           indf0	equ	0xFEF
  8132                           postinc0	equ	0xFEE
  8133                           fsr0h	equ	0xFEA
  8134                           fsr0l	equ	0xFE9
  8135                           wreg	equ	0xFE8
  8136                           postinc1	equ	0xFE6
  8137                           postdec1	equ	0xFE5
  8138                           fsr1l	equ	0xFE1
  8139                           indf2	equ	0xFDF
  8140                           postinc2	equ	0xFDE
  8141                           postdec2	equ	0xFDD
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146 ;; *************** function ___lldiv *****************
  8147 ;; Defined at:
  8148 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  dividend        4   24[COMRAM] unsigned long 
  8151 ;;  divisor         4   28[COMRAM] unsigned long 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  quotient        4   32[COMRAM] unsigned long 
  8154 ;;  counter         1   36[COMRAM] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  4   24[COMRAM] unsigned long 
  8157 ;; Registers used:
  8158 ;;		wreg, status,2, status,0
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8164 ;;      Params:         8       0       0       0       0       0       0       0       0
  8165 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8167 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8168 ;;Total ram usage:       13 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    4
  8171 ;; This function calls:
  8172 ;;		Nothing
  8173 ;; This function is called by:
  8174 ;;		_sprintf
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text38
  8179  00202C                     __ptext38:
  8180                           	opt stack 0
  8181  00202C                     ___lldiv:
  8182                           	opt stack 23
  8183                           
  8184                           ;incstack = 0
  8185  00202C  0E00               	movlw	0
  8186  00202E  6E21               	movwf	___lldiv@quotient,c
  8187  002030  0E00               	movlw	0
  8188  002032  6E22               	movwf	___lldiv@quotient+1,c
  8189  002034  0E00               	movlw	0
  8190  002036  6E23               	movwf	___lldiv@quotient+2,c
  8191  002038  0E00               	movlw	0
  8192  00203A  6E24               	movwf	___lldiv@quotient+3,c
  8193  00203C  5020               	movf	___lldiv@divisor+3,w,c
  8194  00203E  101D               	iorwf	___lldiv@divisor,w,c
  8195  002040  101E               	iorwf	___lldiv@divisor+1,w,c
  8196  002042  101F               	iorwf	___lldiv@divisor+2,w,c
  8197  002044  B4D8               	btfsc	status,2,c
  8198  002046  D02A               	goto	l1119
  8199  002048  0E01               	movlw	1
  8200  00204A  6E25               	movwf	___lldiv@counter,c
  8201  00204C  D006               	goto	l5073
  8202  00204E                     l5071:
  8203  00204E  90D8               	bcf	status,0,c
  8204  002050  361D               	rlcf	___lldiv@divisor,f,c
  8205  002052  361E               	rlcf	___lldiv@divisor+1,f,c
  8206  002054  361F               	rlcf	___lldiv@divisor+2,f,c
  8207  002056  3620               	rlcf	___lldiv@divisor+3,f,c
  8208  002058  2A25               	incf	___lldiv@counter,f,c
  8209  00205A                     l5073:
  8210  00205A  AE20               	btfss	___lldiv@divisor+3,7,c
  8211  00205C  D7F8               	goto	l5071
  8212  00205E                     l5075:
  8213  00205E  90D8               	bcf	status,0,c
  8214  002060  3621               	rlcf	___lldiv@quotient,f,c
  8215  002062  3622               	rlcf	___lldiv@quotient+1,f,c
  8216  002064  3623               	rlcf	___lldiv@quotient+2,f,c
  8217  002066  3624               	rlcf	___lldiv@quotient+3,f,c
  8218  002068  501D               	movf	___lldiv@divisor,w,c
  8219  00206A  5C19               	subwf	___lldiv@dividend,w,c
  8220  00206C  501E               	movf	___lldiv@divisor+1,w,c
  8221  00206E  581A               	subwfb	___lldiv@dividend+1,w,c
  8222  002070  501F               	movf	___lldiv@divisor+2,w,c
  8223  002072  581B               	subwfb	___lldiv@dividend+2,w,c
  8224  002074  5020               	movf	___lldiv@divisor+3,w,c
  8225  002076  581C               	subwfb	___lldiv@dividend+3,w,c
  8226  002078  A0D8               	btfss	status,0,c
  8227  00207A  D009               	goto	l5083
  8228  00207C  501D               	movf	___lldiv@divisor,w,c
  8229  00207E  5E19               	subwf	___lldiv@dividend,f,c
  8230  002080  501E               	movf	___lldiv@divisor+1,w,c
  8231  002082  5A1A               	subwfb	___lldiv@dividend+1,f,c
  8232  002084  501F               	movf	___lldiv@divisor+2,w,c
  8233  002086  5A1B               	subwfb	___lldiv@dividend+2,f,c
  8234  002088  5020               	movf	___lldiv@divisor+3,w,c
  8235  00208A  5A1C               	subwfb	___lldiv@dividend+3,f,c
  8236  00208C  8021               	bsf	___lldiv@quotient,0,c
  8237  00208E                     l5083:
  8238  00208E  90D8               	bcf	status,0,c
  8239  002090  3220               	rrcf	___lldiv@divisor+3,f,c
  8240  002092  321F               	rrcf	___lldiv@divisor+2,f,c
  8241  002094  321E               	rrcf	___lldiv@divisor+1,f,c
  8242  002096  321D               	rrcf	___lldiv@divisor,f,c
  8243  002098  2E25               	decfsz	___lldiv@counter,f,c
  8244  00209A  D7E1               	goto	l5075
  8245  00209C                     l1119:
  8246  00209C  C021  F019         	movff	___lldiv@quotient,?___lldiv
  8247  0020A0  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  8248  0020A4  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  8249  0020A8  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  8250  0020AC  0012               	return	
  8251  0020AE                     __end_of___lldiv:
  8252                           	opt stack 0
  8253                           tblptru	equ	0xFF8
  8254                           tblptrh	equ	0xFF7
  8255                           tblptrl	equ	0xFF6
  8256                           tablat	equ	0xFF5
  8257                           prodh	equ	0xFF4
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           indf0	equ	0xFEF
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           postinc1	equ	0xFE6
  8266                           postdec1	equ	0xFE5
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function ___fttol *****************
  8276 ;; Defined at:
  8277 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  f1              3   19[BANK0 ] float 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  lval            4   29[BANK0 ] unsigned long 
  8282 ;;  exp1            1   33[BANK0 ] unsigned char 
  8283 ;;  sign1           1   28[BANK0 ] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  4   19[BANK0 ] long 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8293 ;;      Params:         0       4       0       0       0       0       0       0       0
  8294 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8295 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8296 ;;      Totals:         0      15       0       0       0       0       0       0       0
  8297 ;;Total ram usage:       15 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    4
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_PWM_DutyCycle1
  8304 ;;		_PWM_DutyCycle2
  8305 ;;		_sprintf
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	text39
  8310  001436                     __ptext39:
  8311                           	opt stack 0
  8312  001436                     ___fttol:
  8313                           	opt stack 23
  8314                           
  8315                           ;incstack = 0
  8316  001436  0100               	movlb	0	; () banked
  8317  001438  C075  F077         	movff	___fttol@f1+2,??___fttol
  8318  00143C  0100               	movlb	0	; () banked
  8319  00143E  6B78               	clrf	(??___fttol+1)& (0+255),b
  8320  001440  6B79               	clrf	(??___fttol+2)& (0+255),b
  8321  001442  0100               	movlb	0	; () banked
  8322  001444  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8323  001446  0100               	movlb	0	; () banked
  8324  001448  3777               	rlcf	??___fttol& (0+255),f,b
  8325  00144A  E301               	bnc	u5721
  8326  00144C  8178               	bsf	(??___fttol+1)& (0+255),0,b
  8327  00144E                     u5721:
  8328  00144E  0100               	movlb	0	; () banked
  8329  001450  5177               	movf	??___fttol& (0+255),w,b
  8330  001452  0100               	movlb	0	; () banked
  8331  001454  6F81               	movwf	___fttol@exp1& (0+255),b
  8332  001456  0100               	movlb	0	; () banked
  8333  001458  6781               	tstfsz	___fttol@exp1& (0+255),b
  8334  00145A  D001               	goto	l5025
  8335  00145C  D059               	goto	u5770
  8336  00145E                     l5025:
  8337                           
  8338                           ; BSR set to: 0
  8339  00145E  0E17               	movlw	23
  8340  001460  0100               	movlb	0	; () banked
  8341  001462  6F77               	movwf	??___fttol& (0+255),b
  8342  001464  0100               	movlb	0	; () banked
  8343  001466  C073  F078         	movff	___fttol@f1,??___fttol+1
  8344  00146A  0100               	movlb	0	; () banked
  8345  00146C  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  8346  001470  0100               	movlb	0	; () banked
  8347  001472  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  8348  001476  0100               	movlb	0	; () banked
  8349  001478  2977               	incf	??___fttol& (0+255),w,b
  8350  00147A  0100               	movlb	0	; () banked
  8351  00147C  6F7B               	movwf	(??___fttol+4)& (0+255),b
  8352  00147E  D005               	goto	u5740
  8353  001480                     u5745:
  8354  001480  0100               	movlb	0	; () banked
  8355  001482  90D8               	bcf	status,0,c
  8356  001484  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  8357  001486  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  8358  001488  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  8359  00148A                     u5740:
  8360  00148A  0100               	movlb	0	; () banked
  8361  00148C  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  8362  00148E  D7F8               	goto	u5745
  8363  001490  0100               	movlb	0	; () banked
  8364  001492  5178               	movf	(??___fttol+1)& (0+255),w,b
  8365  001494  0100               	movlb	0	; () banked
  8366  001496  6F7C               	movwf	___fttol@sign1& (0+255),b
  8367                           
  8368                           ; BSR set to: 0
  8369  001498  0100               	movlb	0	; () banked
  8370  00149A  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  8371                           
  8372                           ; BSR set to: 0
  8373  00149C  0EFF               	movlw	255
  8374  00149E  0100               	movlb	0	; () banked
  8375  0014A0  1773               	andwf	___fttol@f1& (0+255),f,b
  8376  0014A2  0EFF               	movlw	255
  8377  0014A4  0100               	movlb	0	; () banked
  8378  0014A6  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  8379  0014A8  0E00               	movlw	0
  8380  0014AA  0100               	movlb	0	; () banked
  8381  0014AC  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  8382                           
  8383                           ; BSR set to: 0
  8384  0014AE  0100               	movlb	0	; () banked
  8385  0014B0  5173               	movf	___fttol@f1& (0+255),w,b
  8386  0014B2  0100               	movlb	0	; () banked
  8387  0014B4  6F7D               	movwf	___fttol@lval& (0+255),b
  8388  0014B6  0100               	movlb	0	; () banked
  8389  0014B8  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  8390  0014BA  0100               	movlb	0	; () banked
  8391  0014BC  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  8392  0014BE  0100               	movlb	0	; () banked
  8393  0014C0  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  8394  0014C2  0100               	movlb	0	; () banked
  8395  0014C4  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  8396  0014C6  0100               	movlb	0	; () banked
  8397  0014C8  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400  0014CA  0E8E               	movlw	142
  8401  0014CC  0100               	movlb	0	; () banked
  8402  0014CE  5F81               	subwf	___fttol@exp1& (0+255),f,b
  8403                           
  8404                           ; BSR set to: 0
  8405  0014D0  0100               	movlb	0	; () banked
  8406  0014D2  AF81               	btfss	___fttol@exp1& (0+255),7,b
  8407  0014D4  D019               	goto	l5047
  8408                           
  8409                           ; BSR set to: 0
  8410  0014D6  0100               	movlb	0	; () banked
  8411  0014D8  5181               	movf	___fttol@exp1& (0+255),w,b
  8412  0014DA  0A80               	xorlw	128
  8413  0014DC  0100               	movlb	0	; () banked
  8414  0014DE  6F77               	movwf	??___fttol& (0+255),b
  8415  0014E0  0EF1               	movlw	241
  8416  0014E2  0A80               	xorlw	128
  8417  0014E4  0100               	movlb	0	; () banked
  8418  0014E6  5D77               	subwf	??___fttol& (0+255),w,b
  8419  0014E8  A0D8               	btfss	status,0,c
  8420  0014EA  D012               	goto	u5770
  8421  0014EC                     l5043:
  8422                           
  8423                           ; BSR set to: 0
  8424  0014EC  0100               	movlb	0	; () banked
  8425  0014EE  90D8               	bcf	status,0,c
  8426  0014F0  0100               	movlb	0	; () banked
  8427  0014F2  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8428  0014F4  0100               	movlb	0	; () banked
  8429  0014F6  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8430  0014F8  0100               	movlb	0	; () banked
  8431  0014FA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8432  0014FC  0100               	movlb	0	; () banked
  8433  0014FE  337D               	rrcf	___fttol@lval& (0+255),f,b
  8434                           
  8435                           ; BSR set to: 0
  8436  001500  0100               	movlb	0	; () banked
  8437  001502  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  8438  001504  D7F3               	goto	l5043
  8439  001506  D020               	goto	l5057
  8440  001508                     l5047:
  8441                           
  8442                           ; BSR set to: 0
  8443  001508  0E17               	movlw	23
  8444  00150A  0100               	movlb	0	; () banked
  8445  00150C  6581               	cpfsgt	___fttol@exp1& (0+255),b
  8446  00150E  D019               	goto	l5055
  8447  001510                     u5770:
  8448                           
  8449                           ; BSR set to: 0
  8450  001510  0E00               	movlw	0
  8451  001512  0100               	movlb	0	; () banked
  8452  001514  6F73               	movwf	?___fttol& (0+255),b
  8453  001516  0E00               	movlw	0
  8454  001518  0100               	movlb	0	; () banked
  8455  00151A  6F74               	movwf	(?___fttol+1)& (0+255),b
  8456  00151C  0E00               	movlw	0
  8457  00151E  0100               	movlb	0	; () banked
  8458  001520  6F75               	movwf	(?___fttol+2)& (0+255),b
  8459  001522  0E00               	movlw	0
  8460  001524  0100               	movlb	0	; () banked
  8461  001526  6F76               	movwf	(?___fttol+3)& (0+255),b
  8462  001528  D02A               	goto	l1080
  8463  00152A                     l5053:
  8464                           
  8465                           ; BSR set to: 0
  8466  00152A  0100               	movlb	0	; () banked
  8467  00152C  90D8               	bcf	status,0,c
  8468  00152E  0100               	movlb	0	; () banked
  8469  001530  377D               	rlcf	___fttol@lval& (0+255),f,b
  8470  001532  0100               	movlb	0	; () banked
  8471  001534  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8472  001536  0100               	movlb	0	; () banked
  8473  001538  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8474  00153A  0100               	movlb	0	; () banked
  8475  00153C  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8476  00153E  0100               	movlb	0	; () banked
  8477  001540  0781               	decf	___fttol@exp1& (0+255),f,b
  8478  001542                     l5055:
  8479                           
  8480                           ; BSR set to: 0
  8481  001542  0100               	movlb	0	; () banked
  8482  001544  6781               	tstfsz	___fttol@exp1& (0+255),b
  8483  001546  D7F1               	goto	l5053
  8484  001548                     l5057:
  8485                           
  8486                           ; BSR set to: 0
  8487  001548  0100               	movlb	0	; () banked
  8488  00154A  517C               	movf	___fttol@sign1& (0+255),w,b
  8489  00154C  B4D8               	btfsc	status,2,c
  8490  00154E  D00F               	goto	l5061
  8491                           
  8492                           ; BSR set to: 0
  8493  001550  0100               	movlb	0	; () banked
  8494  001552  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  8495  001554  0100               	movlb	0	; () banked
  8496  001556  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  8497  001558  0100               	movlb	0	; () banked
  8498  00155A  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  8499  00155C  0100               	movlb	0	; () banked
  8500  00155E  6D7D               	negf	___fttol@lval& (0+255),b
  8501  001560  0E00               	movlw	0
  8502  001562  0100               	movlb	0	; () banked
  8503  001564  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8504  001566  0100               	movlb	0	; () banked
  8505  001568  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8506  00156A  0100               	movlb	0	; () banked
  8507  00156C  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8508  00156E                     l5061:
  8509                           
  8510                           ; BSR set to: 0
  8511  00156E  C07D  F073         	movff	___fttol@lval,?___fttol
  8512  001572  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  8513  001576  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  8514  00157A  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  8515  00157E                     l1080:
  8516                           
  8517                           ; BSR set to: 0
  8518  00157E  0012               	return	
  8519  001580                     __end_of___fttol:
  8520                           	opt stack 0
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodh	equ	0xFF4
  8526                           prodl	equ	0xFF3
  8527                           intcon	equ	0xFF2
  8528                           indf0	equ	0xFEF
  8529                           postinc0	equ	0xFEE
  8530                           fsr0h	equ	0xFEA
  8531                           fsr0l	equ	0xFE9
  8532                           wreg	equ	0xFE8
  8533                           postinc1	equ	0xFE6
  8534                           postdec1	equ	0xFE5
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function ___ftsub *****************
  8544 ;; Defined at:
  8545 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  f1              3   34[BANK0 ] float 
  8548 ;;  f2              3   37[BANK0 ] float 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  3   34[BANK0 ] float 
  8553 ;; Registers used:
  8554 ;;		wreg, status,2, status,0, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8560 ;;      Params:         0       6       0       0       0       0       0       0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8563 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8564 ;;Total ram usage:        6 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    6
  8567 ;; This function calls:
  8568 ;;		___ftadd
  8569 ;; This function is called by:
  8570 ;;		_sprintf
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text40
  8575  0025D2                     __ptext40:
  8576                           	opt stack 0
  8577  0025D2                     ___ftsub:
  8578                           	opt stack 21
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;incstack = 0
  8582  0025D2  0E00               	movlw	0
  8583  0025D4  0100               	movlb	0	; () banked
  8584  0025D6  1B85               	xorwf	___ftsub@f2& (0+255),f,b
  8585  0025D8  0E00               	movlw	0
  8586  0025DA  0100               	movlb	0	; () banked
  8587  0025DC  1B86               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8588  0025DE  0E80               	movlw	128
  8589  0025E0  0100               	movlb	0	; () banked
  8590  0025E2  1B87               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8591                           
  8592                           ; BSR set to: 0
  8593  0025E4  C082  F076         	movff	___ftsub@f1,___ftadd@f1
  8594  0025E8  C083  F077         	movff	___ftsub@f1+1,___ftadd@f1+1
  8595  0025EC  C084  F078         	movff	___ftsub@f1+2,___ftadd@f1+2
  8596  0025F0  C085  F079         	movff	___ftsub@f2,___ftadd@f2
  8597  0025F4  C086  F07A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8598  0025F8  C087  F07B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8599  0025FC  EC2F  F008         	call	___ftadd	;wreg free
  8600  002600  C076  F082         	movff	?___ftadd,?___ftsub
  8601  002604  C077  F083         	movff	?___ftadd+1,?___ftsub+1
  8602  002608  C078  F084         	movff	?___ftadd+2,?___ftsub+2
  8603  00260C  0012               	return	
  8604  00260E                     __end_of___ftsub:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           intcon	equ	0xFF2
  8613                           indf0	equ	0xFEF
  8614                           postinc0	equ	0xFEE
  8615                           fsr0h	equ	0xFEA
  8616                           fsr0l	equ	0xFE9
  8617                           wreg	equ	0xFE8
  8618                           postinc1	equ	0xFE6
  8619                           postdec1	equ	0xFE5
  8620                           fsr1l	equ	0xFE1
  8621                           indf2	equ	0xFDF
  8622                           postinc2	equ	0xFDE
  8623                           postdec2	equ	0xFDD
  8624                           fsr2h	equ	0xFDA
  8625                           fsr2l	equ	0xFD9
  8626                           status	equ	0xFD8
  8627                           
  8628 ;; *************** function ___ftadd *****************
  8629 ;; Defined at:
  8630 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  f1              3   22[BANK0 ] float 
  8633 ;;  f2              3   25[BANK0 ] float 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  exp1            1   33[BANK0 ] unsigned char 
  8636 ;;  exp2            1   32[BANK0 ] unsigned char 
  8637 ;;  sign            1   31[BANK0 ] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  3   22[BANK0 ] float 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8647 ;;      Params:         0       6       0       0       0       0       0       0       0
  8648 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8649 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8650 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8651 ;;Total ram usage:       12 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    5
  8654 ;; This function calls:
  8655 ;;		___ftpack
  8656 ;; This function is called by:
  8657 ;;		_sprintf
  8658 ;;		___ftsub
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text41
  8663  00105E                     __ptext41:
  8664                           	opt stack 0
  8665  00105E                     ___ftadd:
  8666                           	opt stack 21
  8667                           
  8668                           ;incstack = 0
  8669  00105E  0100               	movlb	0	; () banked
  8670  001060  C078  F07C         	movff	___ftadd@f1+2,??___ftadd
  8671  001064  0100               	movlb	0	; () banked
  8672  001066  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8673  001068  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8674  00106A  0100               	movlb	0	; () banked
  8675  00106C  3577               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8676  00106E  0100               	movlb	0	; () banked
  8677  001070  377C               	rlcf	??___ftadd& (0+255),f,b
  8678  001072  E301               	bnc	u4881
  8679  001074  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8680  001076                     u4881:
  8681  001076  0100               	movlb	0	; () banked
  8682  001078  517C               	movf	??___ftadd& (0+255),w,b
  8683  00107A  0100               	movlb	0	; () banked
  8684  00107C  6F81               	movwf	___ftadd@exp1& (0+255),b
  8685  00107E  0100               	movlb	0	; () banked
  8686  001080  C07B  F07C         	movff	___ftadd@f2+2,??___ftadd
  8687  001084  0100               	movlb	0	; () banked
  8688  001086  6B7D               	clrf	(??___ftadd+1)& (0+255),b
  8689  001088  6B7E               	clrf	(??___ftadd+2)& (0+255),b
  8690  00108A  0100               	movlb	0	; () banked
  8691  00108C  357A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8692  00108E  0100               	movlb	0	; () banked
  8693  001090  377C               	rlcf	??___ftadd& (0+255),f,b
  8694  001092  E301               	bnc	u4891
  8695  001094  817D               	bsf	(??___ftadd+1)& (0+255),0,b
  8696  001096                     u4891:
  8697  001096  0100               	movlb	0	; () banked
  8698  001098  517C               	movf	??___ftadd& (0+255),w,b
  8699  00109A  0100               	movlb	0	; () banked
  8700  00109C  6F80               	movwf	___ftadd@exp2& (0+255),b
  8701                           
  8702                           ; BSR set to: 0
  8703  00109E  0100               	movlb	0	; () banked
  8704  0010A0  5181               	movf	___ftadd@exp1& (0+255),w,b
  8705  0010A2  B4D8               	btfsc	status,2,c
  8706  0010A4  D012               	goto	l996
  8707                           
  8708                           ; BSR set to: 0
  8709  0010A6  0100               	movlb	0	; () banked
  8710  0010A8  5180               	movf	___ftadd@exp2& (0+255),w,b
  8711  0010AA  0100               	movlb	0	; () banked
  8712  0010AC  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8713  0010AE  B0D8               	btfsc	status,0,c
  8714  0010B0  D013               	goto	l4533
  8715                           
  8716                           ; BSR set to: 0
  8717  0010B2  0100               	movlb	0	; () banked
  8718  0010B4  5181               	movf	___ftadd@exp1& (0+255),w,b
  8719  0010B6  0800               	sublw	0
  8720  0010B8  0100               	movlb	0	; () banked
  8721  0010BA  2580               	addwf	___ftadd@exp2& (0+255),w,b
  8722  0010BC  0100               	movlb	0	; () banked
  8723  0010BE  6F7C               	movwf	??___ftadd& (0+255),b
  8724  0010C0  0E19               	movlw	25
  8725  0010C2  0100               	movlb	0	; () banked
  8726  0010C4  5D7C               	subwf	??___ftadd& (0+255),w,b
  8727  0010C6  A0D8               	btfss	status,0,c
  8728  0010C8  D007               	goto	l4533
  8729  0010CA                     l996:
  8730                           
  8731                           ; BSR set to: 0
  8732  0010CA  C079  F076         	movff	___ftadd@f2,?___ftadd
  8733  0010CE  C07A  F077         	movff	___ftadd@f2+1,?___ftadd+1
  8734  0010D2  C07B  F078         	movff	___ftadd@f2+2,?___ftadd+2
  8735  0010D6  D102               	goto	l997
  8736  0010D8                     l4533:
  8737                           
  8738                           ; BSR set to: 0
  8739  0010D8  0100               	movlb	0	; () banked
  8740  0010DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8741  0010DC  B4D8               	btfsc	status,2,c
  8742  0010DE  D012               	goto	l1000
  8743                           
  8744                           ; BSR set to: 0
  8745  0010E0  0100               	movlb	0	; () banked
  8746  0010E2  5181               	movf	___ftadd@exp1& (0+255),w,b
  8747  0010E4  0100               	movlb	0	; () banked
  8748  0010E6  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8749  0010E8  B0D8               	btfsc	status,0,c
  8750  0010EA  D013               	goto	l4539
  8751                           
  8752                           ; BSR set to: 0
  8753  0010EC  0100               	movlb	0	; () banked
  8754  0010EE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8755  0010F0  0800               	sublw	0
  8756  0010F2  0100               	movlb	0	; () banked
  8757  0010F4  2581               	addwf	___ftadd@exp1& (0+255),w,b
  8758  0010F6  0100               	movlb	0	; () banked
  8759  0010F8  6F7C               	movwf	??___ftadd& (0+255),b
  8760  0010FA  0E19               	movlw	25
  8761  0010FC  0100               	movlb	0	; () banked
  8762  0010FE  5D7C               	subwf	??___ftadd& (0+255),w,b
  8763  001100  A0D8               	btfss	status,0,c
  8764  001102  D007               	goto	l4539
  8765  001104                     l1000:
  8766                           
  8767                           ; BSR set to: 0
  8768  001104  C076  F076         	movff	___ftadd@f1,?___ftadd
  8769  001108  C077  F077         	movff	___ftadd@f1+1,?___ftadd+1
  8770  00110C  C078  F078         	movff	___ftadd@f1+2,?___ftadd+2
  8771  001110  D0E5               	goto	l997
  8772  001112                     l4539:
  8773                           
  8774                           ; BSR set to: 0
  8775  001112  0E06               	movlw	6
  8776  001114  0100               	movlb	0	; () banked
  8777  001116  6F7F               	movwf	___ftadd@sign& (0+255),b
  8778                           
  8779                           ; BSR set to: 0
  8780  001118  0100               	movlb	0	; () banked
  8781  00111A  AF78               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8782  00111C  D002               	goto	l4545
  8783                           
  8784                           ; BSR set to: 0
  8785  00111E  0100               	movlb	0	; () banked
  8786  001120  8F7F               	bsf	___ftadd@sign& (0+255),7,b
  8787  001122                     l4545:
  8788                           
  8789                           ; BSR set to: 0
  8790  001122  0100               	movlb	0	; () banked
  8791  001124  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8792  001126  D002               	goto	l1002
  8793                           
  8794                           ; BSR set to: 0
  8795  001128  0100               	movlb	0	; () banked
  8796  00112A  8D7F               	bsf	___ftadd@sign& (0+255),6,b
  8797  00112C                     l1002:
  8798                           
  8799                           ; BSR set to: 0
  8800  00112C  0100               	movlb	0	; () banked
  8801  00112E  8F77               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8802                           
  8803                           ; BSR set to: 0
  8804  001130  0EFF               	movlw	255
  8805  001132  0100               	movlb	0	; () banked
  8806  001134  1776               	andwf	___ftadd@f1& (0+255),f,b
  8807  001136  0EFF               	movlw	255
  8808  001138  0100               	movlb	0	; () banked
  8809  00113A  1777               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8810  00113C  0E00               	movlw	0
  8811  00113E  0100               	movlb	0	; () banked
  8812  001140  1778               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8813  001142  0100               	movlb	0	; () banked
  8814  001144  8F7A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8815                           
  8816                           ; BSR set to: 0
  8817  001146  0EFF               	movlw	255
  8818  001148  0100               	movlb	0	; () banked
  8819  00114A  1779               	andwf	___ftadd@f2& (0+255),f,b
  8820  00114C  0EFF               	movlw	255
  8821  00114E  0100               	movlb	0	; () banked
  8822  001150  177A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8823  001152  0E00               	movlw	0
  8824  001154  0100               	movlb	0	; () banked
  8825  001156  177B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8826                           
  8827                           ; BSR set to: 0
  8828  001158  0100               	movlb	0	; () banked
  8829  00115A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8830  00115C  0100               	movlb	0	; () banked
  8831  00115E  5D81               	subwf	___ftadd@exp1& (0+255),w,b
  8832  001160  B0D8               	btfsc	status,0,c
  8833  001162  D02A               	goto	l4565
  8834  001164                     l4555:
  8835                           
  8836                           ; BSR set to: 0
  8837  001164  0100               	movlb	0	; () banked
  8838  001166  90D8               	bcf	status,0,c
  8839  001168  0100               	movlb	0	; () banked
  8840  00116A  3779               	rlcf	___ftadd@f2& (0+255),f,b
  8841  00116C  0100               	movlb	0	; () banked
  8842  00116E  377A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8843  001170  0100               	movlb	0	; () banked
  8844  001172  377B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8845  001174  0100               	movlb	0	; () banked
  8846  001176  0780               	decf	___ftadd@exp2& (0+255),f,b
  8847                           
  8848                           ; BSR set to: 0
  8849  001178  0100               	movlb	0	; () banked
  8850  00117A  5180               	movf	___ftadd@exp2& (0+255),w,b
  8851  00117C  0100               	movlb	0	; () banked
  8852  00117E  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8853  001180  B4D8               	btfsc	status,2,c
  8854  001182  D014               	goto	l4563
  8855                           
  8856                           ; BSR set to: 0
  8857  001184  0100               	movlb	0	; () banked
  8858  001186  077F               	decf	___ftadd@sign& (0+255),f,b
  8859  001188  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8860  00118C  0E07               	movlw	7
  8861  00118E  0100               	movlb	0	; () banked
  8862  001190  177C               	andwf	??___ftadd& (0+255),f,b
  8863  001192  B4D8               	btfsc	status,2,c
  8864  001194  D00B               	goto	l4563
  8865  001196  D7E6               	goto	l4555
  8866  001198                     l4561:
  8867                           
  8868                           ; BSR set to: 0
  8869  001198  0100               	movlb	0	; () banked
  8870  00119A  90D8               	bcf	status,0,c
  8871  00119C  0100               	movlb	0	; () banked
  8872  00119E  3378               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8873  0011A0  0100               	movlb	0	; () banked
  8874  0011A2  3377               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8875  0011A4  0100               	movlb	0	; () banked
  8876  0011A6  3376               	rrcf	___ftadd@f1& (0+255),f,b
  8877  0011A8  0100               	movlb	0	; () banked
  8878  0011AA  2B81               	incf	___ftadd@exp1& (0+255),f,b
  8879  0011AC                     l4563:
  8880                           
  8881                           ; BSR set to: 0
  8882  0011AC  0100               	movlb	0	; () banked
  8883  0011AE  5180               	movf	___ftadd@exp2& (0+255),w,b
  8884  0011B0  0100               	movlb	0	; () banked
  8885  0011B2  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8886  0011B4  D7F1               	goto	l4561
  8887  0011B6  D02F               	goto	l1011
  8888  0011B8                     l4565:
  8889                           
  8890                           ; BSR set to: 0
  8891  0011B8  0100               	movlb	0	; () banked
  8892  0011BA  5181               	movf	___ftadd@exp1& (0+255),w,b
  8893  0011BC  0100               	movlb	0	; () banked
  8894  0011BE  5D80               	subwf	___ftadd@exp2& (0+255),w,b
  8895  0011C0  B0D8               	btfsc	status,0,c
  8896  0011C2  D029               	goto	l1011
  8897  0011C4                     l4567:
  8898                           
  8899                           ; BSR set to: 0
  8900  0011C4  0100               	movlb	0	; () banked
  8901  0011C6  90D8               	bcf	status,0,c
  8902  0011C8  0100               	movlb	0	; () banked
  8903  0011CA  3776               	rlcf	___ftadd@f1& (0+255),f,b
  8904  0011CC  0100               	movlb	0	; () banked
  8905  0011CE  3777               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8906  0011D0  0100               	movlb	0	; () banked
  8907  0011D2  3778               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8908  0011D4  0100               	movlb	0	; () banked
  8909  0011D6  0781               	decf	___ftadd@exp1& (0+255),f,b
  8910                           
  8911                           ; BSR set to: 0
  8912  0011D8  0100               	movlb	0	; () banked
  8913  0011DA  5180               	movf	___ftadd@exp2& (0+255),w,b
  8914  0011DC  0100               	movlb	0	; () banked
  8915  0011DE  1981               	xorwf	___ftadd@exp1& (0+255),w,b
  8916  0011E0  B4D8               	btfsc	status,2,c
  8917  0011E2  D014               	goto	l4575
  8918                           
  8919                           ; BSR set to: 0
  8920  0011E4  0100               	movlb	0	; () banked
  8921  0011E6  077F               	decf	___ftadd@sign& (0+255),f,b
  8922  0011E8  C07F  F07C         	movff	___ftadd@sign,??___ftadd
  8923  0011EC  0E07               	movlw	7
  8924  0011EE  0100               	movlb	0	; () banked
  8925  0011F0  177C               	andwf	??___ftadd& (0+255),f,b
  8926  0011F2  B4D8               	btfsc	status,2,c
  8927  0011F4  D00B               	goto	l4575
  8928  0011F6  D7E6               	goto	l4567
  8929  0011F8                     l4573:
  8930                           
  8931                           ; BSR set to: 0
  8932  0011F8  0100               	movlb	0	; () banked
  8933  0011FA  90D8               	bcf	status,0,c
  8934  0011FC  0100               	movlb	0	; () banked
  8935  0011FE  337B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8936  001200  0100               	movlb	0	; () banked
  8937  001202  337A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8938  001204  0100               	movlb	0	; () banked
  8939  001206  3379               	rrcf	___ftadd@f2& (0+255),f,b
  8940  001208  0100               	movlb	0	; () banked
  8941  00120A  2B80               	incf	___ftadd@exp2& (0+255),f,b
  8942  00120C                     l4575:
  8943                           
  8944                           ; BSR set to: 0
  8945  00120C  0100               	movlb	0	; () banked
  8946  00120E  5180               	movf	___ftadd@exp2& (0+255),w,b
  8947  001210  0100               	movlb	0	; () banked
  8948  001212  6381               	cpfseq	___ftadd@exp1& (0+255),b
  8949  001214  D7F1               	goto	l4573
  8950  001216                     l1011:
  8951                           
  8952                           ; BSR set to: 0
  8953  001216  0100               	movlb	0	; () banked
  8954  001218  AF7F               	btfss	___ftadd@sign& (0+255),7,b
  8955  00121A  D012               	goto	l1020
  8956                           
  8957                           ; BSR set to: 0
  8958  00121C  0EFF               	movlw	255
  8959  00121E  0100               	movlb	0	; () banked
  8960  001220  1B76               	xorwf	___ftadd@f1& (0+255),f,b
  8961  001222  0EFF               	movlw	255
  8962  001224  0100               	movlb	0	; () banked
  8963  001226  1B77               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8964  001228  0EFF               	movlw	255
  8965  00122A  0100               	movlb	0	; () banked
  8966  00122C  1B78               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8967  00122E  0E01               	movlw	1
  8968  001230  0100               	movlb	0	; () banked
  8969  001232  2776               	addwf	___ftadd@f1& (0+255),f,b
  8970  001234  0E00               	movlw	0
  8971  001236  0100               	movlb	0	; () banked
  8972  001238  2377               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8973  00123A  0E00               	movlw	0
  8974  00123C  0100               	movlb	0	; () banked
  8975  00123E  2378               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8976  001240                     l1020:
  8977                           
  8978                           ; BSR set to: 0
  8979  001240  0100               	movlb	0	; () banked
  8980  001242  AD7F               	btfss	___ftadd@sign& (0+255),6,b
  8981  001244  D012               	goto	l4581
  8982                           
  8983                           ; BSR set to: 0
  8984  001246  0EFF               	movlw	255
  8985  001248  0100               	movlb	0	; () banked
  8986  00124A  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  8987  00124C  0EFF               	movlw	255
  8988  00124E  0100               	movlb	0	; () banked
  8989  001250  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8990  001252  0EFF               	movlw	255
  8991  001254  0100               	movlb	0	; () banked
  8992  001256  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8993  001258  0E01               	movlw	1
  8994  00125A  0100               	movlb	0	; () banked
  8995  00125C  2779               	addwf	___ftadd@f2& (0+255),f,b
  8996  00125E  0E00               	movlw	0
  8997  001260  0100               	movlb	0	; () banked
  8998  001262  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8999  001264  0E00               	movlw	0
  9000  001266  0100               	movlb	0	; () banked
  9001  001268  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9002  00126A                     l4581:
  9003                           
  9004                           ; BSR set to: 0
  9005  00126A  0E00               	movlw	0
  9006  00126C  0100               	movlb	0	; () banked
  9007  00126E  6F7F               	movwf	___ftadd@sign& (0+255),b
  9008                           
  9009                           ; BSR set to: 0
  9010  001270  0100               	movlb	0	; () banked
  9011  001272  5176               	movf	___ftadd@f1& (0+255),w,b
  9012  001274  0100               	movlb	0	; () banked
  9013  001276  2779               	addwf	___ftadd@f2& (0+255),f,b
  9014  001278  0100               	movlb	0	; () banked
  9015  00127A  5177               	movf	(___ftadd@f1+1)& (0+255),w,b
  9016  00127C  0100               	movlb	0	; () banked
  9017  00127E  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9018  001280  0100               	movlb	0	; () banked
  9019  001282  5178               	movf	(___ftadd@f1+2)& (0+255),w,b
  9020  001284  0100               	movlb	0	; () banked
  9021  001286  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9022                           
  9023                           ; BSR set to: 0
  9024  001288  0100               	movlb	0	; () banked
  9025  00128A  AF7B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9026  00128C  D015               	goto	l4591
  9027                           
  9028                           ; BSR set to: 0
  9029  00128E  0EFF               	movlw	255
  9030  001290  0100               	movlb	0	; () banked
  9031  001292  1B79               	xorwf	___ftadd@f2& (0+255),f,b
  9032  001294  0EFF               	movlw	255
  9033  001296  0100               	movlb	0	; () banked
  9034  001298  1B7A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9035  00129A  0EFF               	movlw	255
  9036  00129C  0100               	movlb	0	; () banked
  9037  00129E  1B7B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9038  0012A0  0E01               	movlw	1
  9039  0012A2  0100               	movlb	0	; () banked
  9040  0012A4  2779               	addwf	___ftadd@f2& (0+255),f,b
  9041  0012A6  0E00               	movlw	0
  9042  0012A8  0100               	movlb	0	; () banked
  9043  0012AA  237A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9044  0012AC  0E00               	movlw	0
  9045  0012AE  0100               	movlb	0	; () banked
  9046  0012B0  237B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9047                           
  9048                           ; BSR set to: 0
  9049  0012B2  0E01               	movlw	1
  9050  0012B4  0100               	movlb	0	; () banked
  9051  0012B6  6F7F               	movwf	___ftadd@sign& (0+255),b
  9052  0012B8                     l4591:
  9053                           
  9054                           ; BSR set to: 0
  9055  0012B8  C079  F019         	movff	___ftadd@f2,___ftpack@arg
  9056  0012BC  C07A  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  9057  0012C0  C07B  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  9058  0012C4  C081  F01C         	movff	___ftadd@exp1,___ftpack@exp
  9059  0012C8  C07F  F01D         	movff	___ftadd@sign,___ftpack@sign
  9060  0012CC  ECB4  F00D         	call	___ftpack	;wreg free
  9061  0012D0  C019  F076         	movff	?___ftpack,?___ftadd
  9062  0012D4  C01A  F077         	movff	?___ftpack+1,?___ftadd+1
  9063  0012D8  C01B  F078         	movff	?___ftpack+2,?___ftadd+2
  9064  0012DC                     l997:
  9065  0012DC  0012               	return	
  9066  0012DE                     __end_of___ftadd:
  9067                           	opt stack 0
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           intcon	equ	0xFF2
  9075                           indf0	equ	0xFEF
  9076                           postinc0	equ	0xFEE
  9077                           fsr0h	equ	0xFEA
  9078                           fsr0l	equ	0xFE9
  9079                           wreg	equ	0xFE8
  9080                           postinc1	equ	0xFE6
  9081                           postdec1	equ	0xFE5
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function ___ftpack *****************
  9091 ;; Defined at:
  9092 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  arg             3   24[COMRAM] unsigned um
  9095 ;;  exp             1   27[COMRAM] unsigned char 
  9096 ;;  sign            1   28[COMRAM] unsigned char 
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  3   24[COMRAM] float 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9108 ;;      Params:         5       0       0       0       0       0       0       0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9110 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9111 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9112 ;;Total ram usage:        8 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    4
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		___ftadd
  9119 ;;		___ftmul
  9120 ;;		___lbtoft
  9121 ;;		___lltoft
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           	psect	text42
  9126  001B68                     __ptext42:
  9127                           	opt stack 0
  9128  001B68                     ___ftpack:
  9129                           	opt stack 21
  9130                           
  9131                           ;incstack = 0
  9132  001B68  501C               	movf	___ftpack@exp,w,c
  9133  001B6A  B4D8               	btfsc	status,2,c
  9134  001B6C  D005               	goto	l4471
  9135  001B6E  5019               	movf	___ftpack@arg,w,c
  9136  001B70  101A               	iorwf	___ftpack@arg+1,w,c
  9137  001B72  101B               	iorwf	___ftpack@arg+2,w,c
  9138  001B74  A4D8               	btfss	status,2,c
  9139  001B76  D00C               	goto	l4477
  9140  001B78                     l4471:
  9141  001B78  0E00               	movlw	0
  9142  001B7A  6E19               	movwf	?___ftpack,c
  9143  001B7C  0E00               	movlw	0
  9144  001B7E  6E1A               	movwf	?___ftpack+1,c
  9145  001B80  0E00               	movlw	0
  9146  001B82  6E1B               	movwf	?___ftpack+2,c
  9147  001B84  D044               	goto	l959
  9148  001B86                     l4475:
  9149  001B86  2A1C               	incf	___ftpack@exp,f,c
  9150  001B88  90D8               	bcf	status,0,c
  9151  001B8A  321B               	rrcf	___ftpack@arg+2,f,c
  9152  001B8C  321A               	rrcf	___ftpack@arg+1,f,c
  9153  001B8E  3219               	rrcf	___ftpack@arg,f,c
  9154  001B90                     l4477:
  9155  001B90  0E00               	movlw	0
  9156  001B92  1419               	andwf	___ftpack@arg,w,c
  9157  001B94  6E1E               	movwf	??___ftpack& (0+255),c
  9158  001B96  0E00               	movlw	0
  9159  001B98  141A               	andwf	___ftpack@arg+1,w,c
  9160  001B9A  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9161  001B9C  0EFE               	movlw	254
  9162  001B9E  141B               	andwf	___ftpack@arg+2,w,c
  9163  001BA0  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9164  001BA2  501E               	movf	??___ftpack,w,c
  9165  001BA4  101F               	iorwf	??___ftpack+1,w,c
  9166  001BA6  1020               	iorwf	??___ftpack+2,w,c
  9167  001BA8  B4D8               	btfsc	status,2,c
  9168  001BAA  D00C               	goto	l4483
  9169  001BAC  D7EC               	goto	l4475
  9170  001BAE                     l4479:
  9171  001BAE  2A1C               	incf	___ftpack@exp,f,c
  9172  001BB0  0E01               	movlw	1
  9173  001BB2  2619               	addwf	___ftpack@arg,f,c
  9174  001BB4  0E00               	movlw	0
  9175  001BB6  221A               	addwfc	___ftpack@arg+1,f,c
  9176  001BB8  0E00               	movlw	0
  9177  001BBA  221B               	addwfc	___ftpack@arg+2,f,c
  9178  001BBC  90D8               	bcf	status,0,c
  9179  001BBE  321B               	rrcf	___ftpack@arg+2,f,c
  9180  001BC0  321A               	rrcf	___ftpack@arg+1,f,c
  9181  001BC2  3219               	rrcf	___ftpack@arg,f,c
  9182  001BC4                     l4483:
  9183  001BC4  0E00               	movlw	0
  9184  001BC6  1419               	andwf	___ftpack@arg,w,c
  9185  001BC8  6E1E               	movwf	??___ftpack& (0+255),c
  9186  001BCA  0E00               	movlw	0
  9187  001BCC  141A               	andwf	___ftpack@arg+1,w,c
  9188  001BCE  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  9189  001BD0  0EFF               	movlw	255
  9190  001BD2  141B               	andwf	___ftpack@arg+2,w,c
  9191  001BD4  6E20               	movwf	(??___ftpack+2)& (0+255),c
  9192  001BD6  501E               	movf	??___ftpack,w,c
  9193  001BD8  101F               	iorwf	??___ftpack+1,w,c
  9194  001BDA  1020               	iorwf	??___ftpack+2,w,c
  9195  001BDC  B4D8               	btfsc	status,2,c
  9196  001BDE  D006               	goto	l4487
  9197  001BE0  D7E6               	goto	l4479
  9198  001BE2                     l4485:
  9199  001BE2  061C               	decf	___ftpack@exp,f,c
  9200  001BE4  90D8               	bcf	status,0,c
  9201  001BE6  3619               	rlcf	___ftpack@arg,f,c
  9202  001BE8  361A               	rlcf	___ftpack@arg+1,f,c
  9203  001BEA  361B               	rlcf	___ftpack@arg+2,f,c
  9204  001BEC                     l4487:
  9205  001BEC  AE1A               	btfss	___ftpack@arg+1,7,c
  9206  001BEE  D7F9               	goto	l4485
  9207  001BF0  A01C               	btfss	___ftpack@exp,0,c
  9208  001BF2  9E1A               	bcf	___ftpack@arg+1,7,c
  9209  001BF4  90D8               	bcf	status,0,c
  9210  001BF6  321C               	rrcf	___ftpack@exp,f,c
  9211  001BF8  501C               	movf	___ftpack@exp,w,c
  9212  001BFA  121B               	iorwf	___ftpack@arg+2,f,c
  9213  001BFC  501D               	movf	___ftpack@sign,w,c
  9214  001BFE  A4D8               	btfss	status,2,c
  9215  001C00  8E1B               	bsf	___ftpack@arg+2,7,c
  9216  001C02  C019  F019         	movff	___ftpack@arg,?___ftpack
  9217  001C06  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  9218  001C0A  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  9219  001C0E                     l959:
  9220  001C0E  0012               	return	
  9221  001C10                     __end_of___ftpack:
  9222                           	opt stack 0
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           indf0	equ	0xFEF
  9231                           postinc0	equ	0xFEE
  9232                           fsr0h	equ	0xFEA
  9233                           fsr0l	equ	0xFE9
  9234                           wreg	equ	0xFE8
  9235                           postinc1	equ	0xFE6
  9236                           postdec1	equ	0xFE5
  9237                           fsr1l	equ	0xFE1
  9238                           indf2	equ	0xFDF
  9239                           postinc2	equ	0xFDE
  9240                           postdec2	equ	0xFDD
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function ___ftneg *****************
  9246 ;; Defined at:
  9247 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  f1              3   24[COMRAM] float 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;		None
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  3   24[COMRAM] float 
  9254 ;; Registers used:
  9255 ;;		wreg, status,2, status,0
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9261 ;;      Params:         3       0       0       0       0       0       0       0       0
  9262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9264 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9265 ;;Total ram usage:        3 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    4
  9268 ;; This function calls:
  9269 ;;		Nothing
  9270 ;; This function is called by:
  9271 ;;		_sprintf
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           	psect	text43
  9276  00284E                     __ptext43:
  9277                           	opt stack 0
  9278  00284E                     ___ftneg:
  9279                           	opt stack 23
  9280                           
  9281                           ;incstack = 0
  9282  00284E  0E7F               	movlw	127
  9283  002850  141B               	andwf	___ftneg@f1+2,w,c
  9284  002852  101A               	iorwf	___ftneg@f1+1,w,c
  9285  002854  1019               	iorwf	___ftneg@f1,w,c
  9286  002856  B4D8               	btfsc	status,2,c
  9287  002858  D006               	goto	l1070
  9288  00285A  0E00               	movlw	0
  9289  00285C  1A19               	xorwf	___ftneg@f1,f,c
  9290  00285E  0E00               	movlw	0
  9291  002860  1A1A               	xorwf	___ftneg@f1+1,f,c
  9292  002862  0E80               	movlw	128
  9293  002864  1A1B               	xorwf	___ftneg@f1+2,f,c
  9294  002866                     l1070:
  9295  002866  C019  F019         	movff	___ftneg@f1,?___ftneg
  9296  00286A  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  9297  00286E  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  9298  002872  0012               	return	
  9299  002874                     __end_of___ftneg:
  9300                           	opt stack 0
  9301                           tblptru	equ	0xFF8
  9302                           tblptrh	equ	0xFF7
  9303                           tblptrl	equ	0xFF6
  9304                           tablat	equ	0xFF5
  9305                           prodh	equ	0xFF4
  9306                           prodl	equ	0xFF3
  9307                           intcon	equ	0xFF2
  9308                           indf0	equ	0xFEF
  9309                           postinc0	equ	0xFEE
  9310                           fsr0h	equ	0xFEA
  9311                           fsr0l	equ	0xFE9
  9312                           wreg	equ	0xFE8
  9313                           postinc1	equ	0xFE6
  9314                           postdec1	equ	0xFE5
  9315                           fsr1l	equ	0xFE1
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function ___ftge *****************
  9324 ;; Defined at:
  9325 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;  ff1             3   24[COMRAM] float 
  9328 ;;  ff2             3   27[COMRAM] float 
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;		None               void
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9340 ;;      Params:         6       0       0       0       0       0       0       0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9342 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9343 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9344 ;;Total ram usage:        9 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    4
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_sprintf
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           	psect	text44
  9355  001F16                     __ptext44:
  9356                           	opt stack 0
  9357  001F16                     ___ftge:
  9358                           	opt stack 23
  9359                           
  9360                           ;incstack = 0
  9361  001F16  AE1B               	btfss	___ftge@ff1+2,7,c
  9362  001F18  D016               	goto	l5001
  9363  001F1A  C019  F01F         	movff	___ftge@ff1,??___ftge
  9364  001F1E  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  9365  001F22  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  9366  001F26  1E1F               	comf	??___ftge,f,c
  9367  001F28  1E20               	comf	??___ftge+1,f,c
  9368  001F2A  1E21               	comf	??___ftge+2,f,c
  9369  001F2C  2A1F               	incf	??___ftge,f,c
  9370  001F2E  0E00               	movlw	0
  9371  001F30  2220               	addwfc	??___ftge+1,f,c
  9372  001F32  2221               	addwfc	??___ftge+2,f,c
  9373  001F34  0E00               	movlw	0
  9374  001F36  241F               	addwf	??___ftge,w,c
  9375  001F38  6E19               	movwf	___ftge@ff1,c
  9376  001F3A  0E00               	movlw	0
  9377  001F3C  2020               	addwfc	??___ftge+1,w,c
  9378  001F3E  6E1A               	movwf	___ftge@ff1+1,c
  9379  001F40  0E80               	movlw	128
  9380  001F42  2021               	addwfc	??___ftge+2,w,c
  9381  001F44  6E1B               	movwf	___ftge@ff1+2,c
  9382  001F46                     l5001:
  9383  001F46  AE1E               	btfss	___ftge@ff2+2,7,c
  9384  001F48  D016               	goto	l5005
  9385  001F4A  C01C  F01F         	movff	___ftge@ff2,??___ftge
  9386  001F4E  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  9387  001F52  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  9388  001F56  1E1F               	comf	??___ftge,f,c
  9389  001F58  1E20               	comf	??___ftge+1,f,c
  9390  001F5A  1E21               	comf	??___ftge+2,f,c
  9391  001F5C  2A1F               	incf	??___ftge,f,c
  9392  001F5E  0E00               	movlw	0
  9393  001F60  2220               	addwfc	??___ftge+1,f,c
  9394  001F62  2221               	addwfc	??___ftge+2,f,c
  9395  001F64  0E00               	movlw	0
  9396  001F66  241F               	addwf	??___ftge,w,c
  9397  001F68  6E1C               	movwf	___ftge@ff2,c
  9398  001F6A  0E00               	movlw	0
  9399  001F6C  2020               	addwfc	??___ftge+1,w,c
  9400  001F6E  6E1D               	movwf	___ftge@ff2+1,c
  9401  001F70  0E80               	movlw	128
  9402  001F72  2021               	addwfc	??___ftge+2,w,c
  9403  001F74  6E1E               	movwf	___ftge@ff2+2,c
  9404  001F76                     l5005:
  9405  001F76  0E00               	movlw	0
  9406  001F78  1A19               	xorwf	___ftge@ff1,f,c
  9407  001F7A  0E00               	movlw	0
  9408  001F7C  1A1A               	xorwf	___ftge@ff1+1,f,c
  9409  001F7E  0E80               	movlw	128
  9410  001F80  1A1B               	xorwf	___ftge@ff1+2,f,c
  9411  001F82  0E00               	movlw	0
  9412  001F84  1A1C               	xorwf	___ftge@ff2,f,c
  9413  001F86  0E00               	movlw	0
  9414  001F88  1A1D               	xorwf	___ftge@ff2+1,f,c
  9415  001F8A  0E80               	movlw	128
  9416  001F8C  1A1E               	xorwf	___ftge@ff2+2,f,c
  9417  001F8E  501C               	movf	___ftge@ff2,w,c
  9418  001F90  5C19               	subwf	___ftge@ff1,w,c
  9419  001F92  501D               	movf	___ftge@ff2+1,w,c
  9420  001F94  581A               	subwfb	___ftge@ff1+1,w,c
  9421  001F96  501E               	movf	___ftge@ff2+2,w,c
  9422  001F98  581B               	subwfb	___ftge@ff1+2,w,c
  9423  001F9A  B0D8               	btfsc	status,0,c
  9424  001F9C  D002               	goto	l5011
  9425  001F9E  90D8               	bcf	status,0,c
  9426  001FA0  D001               	goto	l1054
  9427  001FA2                     l5011:
  9428  001FA2  80D8               	bsf	status,0,c
  9429  001FA4                     l1054:
  9430  001FA4  0012               	return	
  9431  001FA6                     __end_of___ftge:
  9432                           	opt stack 0
  9433                           tblptru	equ	0xFF8
  9434                           tblptrh	equ	0xFF7
  9435                           tblptrl	equ	0xFF6
  9436                           tablat	equ	0xFF5
  9437                           prodh	equ	0xFF4
  9438                           prodl	equ	0xFF3
  9439                           intcon	equ	0xFF2
  9440                           indf0	equ	0xFEF
  9441                           postinc0	equ	0xFEE
  9442                           fsr0h	equ	0xFEA
  9443                           fsr0l	equ	0xFE9
  9444                           wreg	equ	0xFE8
  9445                           postinc1	equ	0xFE6
  9446                           postdec1	equ	0xFE5
  9447                           fsr1l	equ	0xFE1
  9448                           indf2	equ	0xFDF
  9449                           postinc2	equ	0xFDE
  9450                           postdec2	equ	0xFDD
  9451                           fsr2h	equ	0xFDA
  9452                           fsr2l	equ	0xFD9
  9453                           status	equ	0xFD8
  9454                           
  9455 ;; *************** function _Lcd_Write_String *****************
  9456 ;; Defined at:
  9457 ;;		line 90 in file "lcd.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  a               2   28[COMRAM] PTR unsigned char 
  9460 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
  9461 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
  9462 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;  i               2   32[COMRAM] int 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;		None               void
  9467 ;; Registers used:
  9468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9474 ;;      Params:         2       0       0       0       0       0       0       0       0
  9475 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9476 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9477 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9478 ;;Total ram usage:        6 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    6
  9481 ;; This function calls:
  9482 ;;		_Lcd_Write_Char
  9483 ;; This function is called by:
  9484 ;;		_Inicializa_Driveby
  9485 ;;		_Comando_Tablet
  9486 ;;		_Lcd_Write_Integer
  9487 ;;		_main
  9488 ;;		_Lcd_Write_Float
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text45
  9493  0021A6                     __ptext45:
  9494                           	opt stack 0
  9495  0021A6                     _Lcd_Write_String:
  9496                           	opt stack 24
  9497                           
  9498                           ;lcd.c: 91: int i;
  9499                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  9500                           
  9501                           ;incstack = 0
  9502  0021A6  0E00               	movlw	0
  9503  0021A8  6E22               	movwf	Lcd_Write_String@i+1,c
  9504  0021AA  0E00               	movlw	0
  9505  0021AC  6E21               	movwf	Lcd_Write_String@i,c
  9506  0021AE  D01C               	goto	l5343
  9507  0021B0                     l5339:
  9508                           
  9509                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  9510  0021B0  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9511  0021B4  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9512  0021B8  5021               	movf	Lcd_Write_String@i,w,c
  9513  0021BA  261F               	addwf	??_Lcd_Write_String,f,c
  9514  0021BC  5022               	movf	Lcd_Write_String@i+1,w,c
  9515  0021BE  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9516  0021C0  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9517  0021C4  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9518  0021C8  6AF8               	clrf	tblptru,c
  9519  0021CA  0E07               	movlw	(high __ramtop+-1)
  9520  0021CC  64F7               	cpfsgt	tblptrh,c
  9521  0021CE  D003               	bra	u6197
  9522  0021D0  0008               	tblrd		*
  9523  0021D2  50F5               	movf	tablat,w,c
  9524  0021D4  D005               	bra	u6190
  9525  0021D6                     u6197:
  9526  0021D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  9527  0021DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  9528  0021DE  50EF               	movf	indf0,w,c
  9529  0021E0                     u6190:
  9530  0021E0  EC97  F013         	call	_Lcd_Write_Char
  9531  0021E4  4A21               	infsnz	Lcd_Write_String@i,f,c
  9532  0021E6  2A22               	incf	Lcd_Write_String@i+1,f,c
  9533  0021E8                     l5343:
  9534  0021E8  C01D  F01F         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  9535  0021EC  C01E  F020         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  9536  0021F0  5021               	movf	Lcd_Write_String@i,w,c
  9537  0021F2  261F               	addwf	??_Lcd_Write_String,f,c
  9538  0021F4  5022               	movf	Lcd_Write_String@i+1,w,c
  9539  0021F6  2220               	addwfc	??_Lcd_Write_String+1,f,c
  9540  0021F8  C01F  FFF6         	movff	??_Lcd_Write_String,tblptrl
  9541  0021FC  C020  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  9542  002200  6AF8               	clrf	tblptru,c
  9543  002202  0E07               	movlw	(high __ramtop+-1)
  9544  002204  64F7               	cpfsgt	tblptrh,c
  9545  002206  D003               	bra	u6207
  9546  002208  0008               	tblrd		*
  9547  00220A  50F5               	movf	tablat,w,c
  9548  00220C  D005               	bra	u6200
  9549  00220E                     u6207:
  9550  00220E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9551  002212  CFF7 FFEA          	movff	tblptrh,fsr0h
  9552  002216  50EF               	movf	indf0,w,c
  9553  002218                     u6200:
  9554  002218  0900               	iorlw	0
  9555  00221A  B4D8               	btfsc	status,2,c
  9556  00221C  0012               	return	
  9557  00221E  D7C8               	goto	l5339
  9558  002220                     __end_of_Lcd_Write_String:
  9559                           	opt stack 0
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           intcon	equ	0xFF2
  9567                           indf0	equ	0xFEF
  9568                           postinc0	equ	0xFEE
  9569                           fsr0h	equ	0xFEA
  9570                           fsr0l	equ	0xFE9
  9571                           wreg	equ	0xFE8
  9572                           postinc1	equ	0xFE6
  9573                           postdec1	equ	0xFE5
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _Lcd_Write_Char *****************
  9583 ;; Defined at:
  9584 ;;		line 75 in file "lcd.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  a               1    wreg     unsigned char 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  a               1   27[COMRAM] unsigned char 
  9589 ;;  y               1   26[COMRAM] unsigned char 
  9590 ;;  temp            1   25[COMRAM] unsigned char 
  9591 ;; Return value:  Size  Location     Type
  9592 ;;		None               void
  9593 ;; Registers used:
  9594 ;;		wreg, status,2, status,0, cstack
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0
  9601 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9603 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9604 ;;Total ram usage:        3 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    5
  9607 ;; This function calls:
  9608 ;;		_Lcd_Port
  9609 ;; This function is called by:
  9610 ;;		_Lcd_Write_String
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           	psect	text46
  9615  00272E                     __ptext46:
  9616                           	opt stack 0
  9617  00272E                     _Lcd_Write_Char:
  9618                           	opt stack 24
  9619                           
  9620                           ;incstack = 0
  9621                           ;Lcd_Write_Char@a stored from wreg
  9622  00272E  6E1C               	movwf	Lcd_Write_Char@a,c
  9623                           
  9624                           ;lcd.c: 76: char temp, y;
  9625                           ;lcd.c: 77: temp = a & 0x0F;
  9626  002730  501C               	movf	Lcd_Write_Char@a,w,c
  9627  002732  0B0F               	andlw	15
  9628  002734  6E1A               	movwf	Lcd_Write_Char@temp,c
  9629                           
  9630                           ;lcd.c: 78: y = a & 0xF0;
  9631  002736  501C               	movf	Lcd_Write_Char@a,w,c
  9632  002738  0BF0               	andlw	240
  9633  00273A  6E1B               	movwf	Lcd_Write_Char@y,c
  9634                           
  9635                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  9636  00273C  8084               	bsf	3972,0,c	;volatile
  9637                           
  9638                           ;lcd.c: 80: Lcd_Port(y >> 4);
  9639  00273E  381B               	swapf	Lcd_Write_Char@y,w,c
  9640  002740  0B0F               	andlw	15
  9641  002742  ECE8  F013         	call	_Lcd_Port
  9642                           
  9643                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  9644  002746  8484               	bsf	3972,2,c	;volatile
  9645                           
  9646                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9647  002748  0E0D               	movlw	13
  9648  00274A                     u6957:
  9649  00274A  2EE8               	decfsz	wreg,f,c
  9650  00274C  D7FE               	goto	u6957
  9651  00274E  F000               	nop	
  9652                           
  9653                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  9654  002750  9484               	bcf	3972,2,c	;volatile
  9655                           
  9656                           ;lcd.c: 84: Lcd_Port(temp);
  9657  002752  501A               	movf	Lcd_Write_Char@temp,w,c
  9658  002754  ECE8  F013         	call	_Lcd_Port
  9659                           
  9660                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  9661  002758  8484               	bsf	3972,2,c	;volatile
  9662                           
  9663                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  9664  00275A  0E0D               	movlw	13
  9665  00275C                     u6967:
  9666  00275C  2EE8               	decfsz	wreg,f,c
  9667  00275E  D7FE               	goto	u6967
  9668  002760  F000               	nop	
  9669                           
  9670                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  9671  002762  9484               	bcf	3972,2,c	;volatile
  9672  002764  0012               	return	
  9673  002766                     __end_of_Lcd_Write_Char:
  9674                           	opt stack 0
  9675                           tblptru	equ	0xFF8
  9676                           tblptrh	equ	0xFF7
  9677                           tblptrl	equ	0xFF6
  9678                           tablat	equ	0xFF5
  9679                           prodh	equ	0xFF4
  9680                           prodl	equ	0xFF3
  9681                           intcon	equ	0xFF2
  9682                           indf0	equ	0xFEF
  9683                           postinc0	equ	0xFEE
  9684                           fsr0h	equ	0xFEA
  9685                           fsr0l	equ	0xFE9
  9686                           wreg	equ	0xFE8
  9687                           postinc1	equ	0xFE6
  9688                           postdec1	equ	0xFE5
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function _Lcd_Set_Cursor *****************
  9698 ;; Defined at:
  9699 ;;		line 40 in file "lcd.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  a               1    wreg     unsigned char 
  9702 ;;  b               1   27[COMRAM] unsigned char 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  a               1   28[COMRAM] unsigned char 
  9705 ;;  temp            1   31[COMRAM] unsigned char 
  9706 ;;  y               1   30[COMRAM] unsigned char 
  9707 ;;  z               1   29[COMRAM] unsigned char 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;		None               void
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9717 ;;      Params:         1       0       0       0       0       0       0       0       0
  9718 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9720 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:        5 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    6
  9724 ;; This function calls:
  9725 ;;		_Lcd_Cmd
  9726 ;; This function is called by:
  9727 ;;		_Inicializa_Driveby
  9728 ;;		_Comando_Tablet
  9729 ;;		_main
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           	psect	text47
  9734  0024A0                     __ptext47:
  9735                           	opt stack 0
  9736  0024A0                     _Lcd_Set_Cursor:
  9737                           	opt stack 24
  9738                           
  9739                           ;incstack = 0
  9740                           ;Lcd_Set_Cursor@a stored from wreg
  9741  0024A0  6E1D               	movwf	Lcd_Set_Cursor@a,c
  9742                           
  9743                           ;lcd.c: 41: char temp, z, y;
  9744                           ;lcd.c: 42: if (a == 1) {
  9745  0024A2  041D               	decf	Lcd_Set_Cursor@a,w,c
  9746  0024A4  A4D8               	btfss	status,2,c
  9747  0024A6  D010               	goto	l5473
  9748                           
  9749                           ;lcd.c: 43: temp = 0x80 + b - 1;
  9750  0024A8  501C               	movf	Lcd_Set_Cursor@b,w,c
  9751  0024AA  0F7F               	addlw	127
  9752  0024AC  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9753                           
  9754                           ;lcd.c: 44: z = temp >> 4;
  9755  0024AE  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9756  0024B0  0B0F               	andlw	15
  9757  0024B2  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9758                           
  9759                           ;lcd.c: 45: y = temp & 0x0F;
  9760  0024B4  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9761  0024B6  0B0F               	andlw	15
  9762  0024B8  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9763                           
  9764                           ;lcd.c: 46: Lcd_Cmd(z);
  9765  0024BA  501E               	movf	Lcd_Set_Cursor@z,w,c
  9766  0024BC  EC4C  F014         	call	_Lcd_Cmd
  9767                           
  9768                           ;lcd.c: 47: Lcd_Cmd(y);
  9769  0024C0  501F               	movf	Lcd_Set_Cursor@y,w,c
  9770  0024C2  EC4C  F014         	call	_Lcd_Cmd
  9771                           
  9772                           ;lcd.c: 48: } else if (a == 2) {
  9773  0024C6  D013               	goto	l262
  9774  0024C8                     l5473:
  9775  0024C8  501D               	movf	Lcd_Set_Cursor@a,w,c
  9776  0024CA  0A02               	xorlw	2
  9777  0024CC  A4D8               	btfss	status,2,c
  9778  0024CE  D00F               	goto	l262
  9779                           
  9780                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  9781  0024D0  501C               	movf	Lcd_Set_Cursor@b,w,c
  9782  0024D2  0FBF               	addlw	191
  9783  0024D4  6E20               	movwf	Lcd_Set_Cursor@temp,c
  9784                           
  9785                           ;lcd.c: 50: z = temp >> 4;
  9786  0024D6  3820               	swapf	Lcd_Set_Cursor@temp,w,c
  9787  0024D8  0B0F               	andlw	15
  9788  0024DA  6E1E               	movwf	Lcd_Set_Cursor@z,c
  9789                           
  9790                           ;lcd.c: 51: y = temp & 0x0F;
  9791  0024DC  5020               	movf	Lcd_Set_Cursor@temp,w,c
  9792  0024DE  0B0F               	andlw	15
  9793  0024E0  6E1F               	movwf	Lcd_Set_Cursor@y,c
  9794                           
  9795                           ;lcd.c: 52: Lcd_Cmd(z);
  9796  0024E2  501E               	movf	Lcd_Set_Cursor@z,w,c
  9797  0024E4  EC4C  F014         	call	_Lcd_Cmd
  9798                           
  9799                           ;lcd.c: 53: Lcd_Cmd(y);
  9800  0024E8  501F               	movf	Lcd_Set_Cursor@y,w,c
  9801  0024EA  EC4C  F014         	call	_Lcd_Cmd
  9802  0024EE                     l262:
  9803  0024EE  0012               	return	
  9804  0024F0                     __end_of_Lcd_Set_Cursor:
  9805                           	opt stack 0
  9806                           tblptru	equ	0xFF8
  9807                           tblptrh	equ	0xFF7
  9808                           tblptrl	equ	0xFF6
  9809                           tablat	equ	0xFF5
  9810                           prodh	equ	0xFF4
  9811                           prodl	equ	0xFF3
  9812                           intcon	equ	0xFF2
  9813                           indf0	equ	0xFEF
  9814                           postinc0	equ	0xFEE
  9815                           fsr0h	equ	0xFEA
  9816                           fsr0l	equ	0xFE9
  9817                           wreg	equ	0xFE8
  9818                           postinc1	equ	0xFE6
  9819                           postdec1	equ	0xFE5
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _Lcd_Clear *****************
  9829 ;; Defined at:
  9830 ;;		line 35 in file "lcd.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;		None
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;		None               void
  9837 ;; Registers used:
  9838 ;;		wreg, status,2, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9844 ;;      Params:         0       0       0       0       0       0       0       0       0
  9845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9847 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9848 ;;Total ram usage:        0 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:    6
  9851 ;; This function calls:
  9852 ;;		_Lcd_Cmd
  9853 ;; This function is called by:
  9854 ;;		_Inicializa_Driveby
  9855 ;;		_Comando_Tablet
  9856 ;;		_main
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text48
  9861  00299E                     __ptext48:
  9862                           	opt stack 0
  9863  00299E                     _Lcd_Clear:
  9864                           	opt stack 24
  9865                           
  9866                           ;lcd.c: 36: Lcd_Cmd(0);
  9867                           
  9868                           ;incstack = 0
  9869  00299E  0E00               	movlw	0
  9870  0029A0  EC4C  F014         	call	_Lcd_Cmd
  9871                           
  9872                           ;lcd.c: 37: Lcd_Cmd(1);
  9873  0029A4  0E01               	movlw	1
  9874  0029A6  EC4C  F014         	call	_Lcd_Cmd
  9875  0029AA  0012               	return	
  9876  0029AC                     __end_of_Lcd_Clear:
  9877                           	opt stack 0
  9878                           tblptru	equ	0xFF8
  9879                           tblptrh	equ	0xFF7
  9880                           tblptrl	equ	0xFF6
  9881                           tablat	equ	0xFF5
  9882                           prodh	equ	0xFF4
  9883                           prodl	equ	0xFF3
  9884                           intcon	equ	0xFF2
  9885                           indf0	equ	0xFEF
  9886                           postinc0	equ	0xFEE
  9887                           fsr0h	equ	0xFEA
  9888                           fsr0l	equ	0xFE9
  9889                           wreg	equ	0xFE8
  9890                           postinc1	equ	0xFE6
  9891                           postdec1	equ	0xFE5
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _Lcd_Cmd *****************
  9901 ;; Defined at:
  9902 ;;		line 27 in file "lcd.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  a               1    wreg     unsigned char 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  a               1   26[COMRAM] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg, status,2, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0
  9917 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9918 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9919 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9920 ;;Total ram usage:        2 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    5
  9923 ;; This function calls:
  9924 ;;		_Lcd_Port
  9925 ;; This function is called by:
  9926 ;;		_Lcd_Clear
  9927 ;;		_Lcd_Set_Cursor
  9928 ;;		_Lcd_Init
  9929 ;;		_Lcd_Shift_Right
  9930 ;;		_Lcd_Shift_Left
  9931 ;; This function uses a non-reentrant model
  9932 ;;
  9933                           
  9934                           	psect	text49
  9935  002898                     __ptext49:
  9936                           	opt stack 0
  9937  002898                     _Lcd_Cmd:
  9938                           	opt stack 24
  9939                           
  9940                           ;incstack = 0
  9941                           ;Lcd_Cmd@a stored from wreg
  9942  002898  6E1B               	movwf	Lcd_Cmd@a,c
  9943                           
  9944                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  9945  00289A  9084               	bcf	3972,0,c	;volatile
  9946                           
  9947                           ;lcd.c: 29: Lcd_Port(a);
  9948  00289C  501B               	movf	Lcd_Cmd@a,w,c
  9949  00289E  ECE8  F013         	call	_Lcd_Port
  9950                           
  9951                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  9952  0028A2  8484               	bsf	3972,2,c	;volatile
  9953                           
  9954                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  9955  0028A4  0E06               	movlw	6
  9956  0028A6  6E1A               	movwf	??_Lcd_Cmd& (0+255),c
  9957  0028A8  0E30               	movlw	48
  9958  0028AA                     u6977:
  9959  0028AA  2EE8               	decfsz	wreg,f,c
  9960  0028AC  D7FE               	goto	u6977
  9961  0028AE  2E1A               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9962  0028B0  D7FC               	goto	u6977
  9963  0028B2  D000               	nop2	
  9964                           
  9965                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  9966  0028B4  9484               	bcf	3972,2,c	;volatile
  9967  0028B6  0012               	return	
  9968  0028B8                     __end_of_Lcd_Cmd:
  9969                           	opt stack 0
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           indf0	equ	0xFEF
  9978                           postinc0	equ	0xFEE
  9979                           fsr0h	equ	0xFEA
  9980                           fsr0l	equ	0xFE9
  9981                           wreg	equ	0xFE8
  9982                           postinc1	equ	0xFE6
  9983                           postdec1	equ	0xFE5
  9984                           fsr1l	equ	0xFE1
  9985                           indf2	equ	0xFDF
  9986                           postinc2	equ	0xFDE
  9987                           postdec2	equ	0xFDD
  9988                           fsr2h	equ	0xFDA
  9989                           fsr2l	equ	0xFD9
  9990                           status	equ	0xFD8
  9991                           
  9992 ;; *************** function _Lcd_Port *****************
  9993 ;; Defined at:
  9994 ;;		line 6 in file "lcd.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;  a               1    wreg     unsigned char 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;  a               1   24[COMRAM] unsigned char 
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0
 10009 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10011 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10012 ;;Total ram usage:        1 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    4
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_Lcd_Cmd
 10019 ;;		_Lcd_Init
 10020 ;;		_Lcd_Write_Char
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           	psect	text50
 10025  0027D0                     __ptext50:
 10026                           	opt stack 0
 10027  0027D0                     _Lcd_Port:
 10028                           	opt stack 24
 10029                           
 10030                           ;incstack = 0
 10031                           ;Lcd_Port@a stored from wreg
 10032  0027D0  6E19               	movwf	Lcd_Port@a,c
 10033                           
 10034                           ;lcd.c: 7: if (a & 1)
 10035  0027D2  A019               	btfss	Lcd_Port@a,0,c
 10036  0027D4  D002               	goto	l242
 10037                           
 10038                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10039  0027D6  8883               	bsf	3971,4,c	;volatile
 10040  0027D8  D001               	goto	l4507
 10041  0027DA                     l242:
 10042                           
 10043                           ;lcd.c: 9: else
 10044                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10045  0027DA  9883               	bcf	3971,4,c	;volatile
 10046  0027DC                     l4507:
 10047                           
 10048                           ;lcd.c: 12: if (a & 2)
 10049  0027DC  A219               	btfss	Lcd_Port@a,1,c
 10050  0027DE  D002               	goto	l244
 10051                           
 10052                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10053  0027E0  8A83               	bsf	3971,5,c	;volatile
 10054  0027E2  D001               	goto	l4511
 10055  0027E4                     l244:
 10056                           
 10057                           ;lcd.c: 14: else
 10058                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10059  0027E4  9A83               	bcf	3971,5,c	;volatile
 10060  0027E6                     l4511:
 10061                           
 10062                           ;lcd.c: 17: if (a & 4)
 10063  0027E6  A419               	btfss	Lcd_Port@a,2,c
 10064  0027E8  D002               	goto	l246
 10065                           
 10066                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10067  0027EA  8C83               	bsf	3971,6,c	;volatile
 10068  0027EC  D001               	goto	l4515
 10069  0027EE                     l246:
 10070                           
 10071                           ;lcd.c: 19: else
 10072                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10073  0027EE  9C83               	bcf	3971,6,c	;volatile
 10074  0027F0                     l4515:
 10075                           
 10076                           ;lcd.c: 22: if (a & 8)
 10077  0027F0  A619               	btfss	Lcd_Port@a,3,c
 10078  0027F2  D002               	goto	l248
 10079                           
 10080                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10081  0027F4  8E83               	bsf	3971,7,c	;volatile
 10082  0027F6  D001               	goto	l250
 10083  0027F8                     l248:
 10084                           
 10085                           ;lcd.c: 24: else
 10086                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10087  0027F8  9E83               	bcf	3971,7,c	;volatile
 10088  0027FA                     l250:
 10089  0027FA  0012               	return	
 10090  0027FC                     __end_of_Lcd_Port:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           indf0	equ	0xFEF
 10100                           postinc0	equ	0xFEE
 10101                           fsr0h	equ	0xFEA
 10102                           fsr0l	equ	0xFE9
 10103                           wreg	equ	0xFE8
 10104                           postinc1	equ	0xFE6
 10105                           postdec1	equ	0xFE5
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _TMRO_USART *****************
 10115 ;; Defined at:
 10116 ;;		line 84 in file "robot.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;		None               void
 10123 ;; Registers used:
 10124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10132 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10133 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10134 ;;Total ram usage:       14 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    3
 10137 ;; This function calls:
 10138 ;;		_ReadUSART
 10139 ;;		i2_Lcd_Clear
 10140 ;;		i2_Lcd_Set_Cursor
 10141 ;;		i2_Lcd_Write_String
 10142 ;; This function is called by:
 10143 ;;		Interrupt level 2
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	intcode
 10148  000008                     __pintcode:
 10149                           	opt stack 0
 10150  000008                     _TMRO_USART:
 10151                           	opt stack 21
 10152                           
 10153                           ;incstack = 0
 10154  000008  CFFA F00B          	movff	pclath,??_TMRO_USART
 10155  00000C  CFFB F00C          	movff	pclatu,??_TMRO_USART+1
 10156  000010  CFE9 F00D          	movff	fsr0l,??_TMRO_USART+2
 10157  000014  ED7C  F00C         	call	int_func,f	;refresh shadow registers
 10158                           pclatu	equ	0xFFB
 10159                           pclath	equ	0xFFA
 10160                           tblptru	equ	0xFF8
 10161                           tblptrh	equ	0xFF7
 10162                           tblptrl	equ	0xFF6
 10163                           tablat	equ	0xFF5
 10164                           prodh	equ	0xFF4
 10165                           prodl	equ	0xFF3
 10166                           intcon	equ	0xFF2
 10167                           indf0	equ	0xFEF
 10168                           postinc0	equ	0xFEE
 10169                           fsr0h	equ	0xFEA
 10170                           fsr0l	equ	0xFE9
 10171                           wreg	equ	0xFE8
 10172                           postinc1	equ	0xFE6
 10173                           postdec1	equ	0xFE5
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           fsr2h	equ	0xFDA
 10179                           fsr2l	equ	0xFD9
 10180                           status	equ	0xFD8
 10181                           
 10182                           	psect	intcode_body
 10183  0018F8                     __pintcode_body:
 10184                           	opt stack 21
 10185  0018F8                     int_func:
 10186                           	opt stack 21
 10187  0018F8  0006               	pop		; remove dummy address from shadow register refresh
 10188  0018FA  CFEA F00E          	movff	fsr0h,??_TMRO_USART+3
 10189  0018FE  CFE1 F00F          	movff	fsr1l,??_TMRO_USART+4
 10190  001902  CFE2 F010          	movff	fsr1h,??_TMRO_USART+5
 10191  001906  CFD9 F011          	movff	fsr2l,??_TMRO_USART+6
 10192  00190A  CFDA F012          	movff	fsr2h,??_TMRO_USART+7
 10193  00190E  CFF3 F013          	movff	prodl,??_TMRO_USART+8
 10194  001912  CFF4 F014          	movff	prodh,??_TMRO_USART+9
 10195  001916  CFF6 F015          	movff	tblptrl,??_TMRO_USART+10
 10196  00191A  CFF7 F016          	movff	tblptrh,??_TMRO_USART+11
 10197  00191E  CFF8 F017          	movff	tblptru,??_TMRO_USART+12
 10198  001922  CFF5 F018          	movff	tablat,??_TMRO_USART+13
 10199                           
 10200                           ;robot.c: 89: if (PIR1bits.RCIF) {
 10201  001926  AA9E               	btfss	3998,5,c	;volatile
 10202  001928  D032               	goto	i2l361
 10203                           
 10204                           ;robot.c: 91: BluetoothDato[cad] = ReadUSART();
 10205  00192A  503D               	movf	_cad,w,c
 10206  00192C  0D01               	mullw	1
 10207  00192E  0101               	movlb	1	; () banked
 10208  001930  0E28               	movlw	low _BluetoothDato
 10209  001932  24F3               	addwf	prodl,w,c
 10210  001934  6ED9               	movwf	fsr2l,c
 10211  001936  0101               	movlb	1	; () banked
 10212  001938  0E01               	movlw	high _BluetoothDato
 10213  00193A  20F4               	addwfc	prodh,w,c
 10214  00193C  6EDA               	movwf	fsr2h,c
 10215  00193E  EC8A  F014         	call	_ReadUSART	;wreg free
 10216  001942  6EDF               	movwf	indf2,c
 10217                           
 10218                           ;robot.c: 92: if (BluetoothDato[cad] == '#') {
 10219  001944  503D               	movf	_cad,w,c
 10220  001946  0D01               	mullw	1
 10221  001948  0101               	movlb	1	; () banked
 10222  00194A  0E28               	movlw	low _BluetoothDato
 10223  00194C  24F3               	addwf	prodl,w,c
 10224  00194E  6ED9               	movwf	fsr2l,c
 10225  001950  0101               	movlb	1	; () banked
 10226  001952  0E01               	movlw	high _BluetoothDato
 10227  001954  20F4               	addwfc	prodh,w,c
 10228  001956  6EDA               	movwf	fsr2h,c
 10229  001958  0E23               	movlw	35
 10230  00195A  62DF               	cpfseq	indf2,c
 10231  00195C  D013               	goto	i2l4385
 10232                           
 10233                           ; BSR set to: 1
 10234                           ;robot.c: 93: if (ComanTFlag == 0) {
 10235  00195E  6632               	tstfsz	_ComanTFlag,c
 10236  001960  D007               	goto	i2l4381
 10237                           
 10238                           ; BSR set to: 1
 10239                           ;robot.c: 94: EntTrama = 1;
 10240  001962  0E01               	movlw	1
 10241  001964  6E35               	movwf	_EntTrama,c
 10242                           
 10243                           ;robot.c: 95: FinComandT = 0;
 10244  001966  0E00               	movlw	0
 10245  001968  6E37               	movwf	_FinComandT,c
 10246                           
 10247                           ;robot.c: 96: ComanTFlag = 1;
 10248  00196A  0E01               	movlw	1
 10249  00196C  6E32               	movwf	_ComanTFlag,c
 10250  00196E  D00D               	goto	i2u469_40
 10251  001970                     i2l4381:
 10252                           
 10253                           ; BSR set to: 1
 10254                           ;robot.c: 99: else if (ComanTFlag == 1) {
 10255  001970  0432               	decf	_ComanTFlag,w,c
 10256  001972  A4D8               	btfss	status,2,c
 10257  001974  D01C               	goto	i2l4397
 10258                           
 10259                           ; BSR set to: 1
 10260                           ;robot.c: 100: ComanTFlag = 0;
 10261  001976  0E00               	movlw	0
 10262  001978  6E32               	movwf	_ComanTFlag,c
 10263                           
 10264                           ;robot.c: 101: FinComandT = 1;
 10265  00197A  0E01               	movlw	1
 10266  00197C  6E37               	movwf	_FinComandT,c
 10267                           
 10268                           ;robot.c: 102: EntTrama = 0;
 10269  00197E  0E00               	movlw	0
 10270  001980  6E35               	movwf	_EntTrama,c
 10271  001982  D015               	goto	i2l4397
 10272  001984                     i2l4385:
 10273                           
 10274                           ; BSR set to: 1
 10275                           ;robot.c: 106: else if (EntTrama == 1)
 10276  001984  0435               	decf	_EntTrama,w,c
 10277  001986  A4D8               	btfss	status,2,c
 10278  001988  D012               	goto	i2l4397
 10279  00198A                     i2u469_40:
 10280                           
 10281                           ; BSR set to: 1
 10282                           ;robot.c: 107: cad++;
 10283  00198A  2A3D               	incf	_cad,f,c
 10284  00198C  D010               	goto	i2l4397
 10285  00198E                     i2l361:
 10286                           
 10287                           ;robot.c: 111: else if(PIR1bits.TMR2IF){
 10288  00198E  A29E               	btfss	3998,1,c	;volatile
 10289  001990  D00E               	goto	i2l4397
 10290                           
 10291                           ;robot.c: 112: Lcd_Clear();
 10292  001992  ECD6  F014         	call	i2_Lcd_Clear	;wreg free
 10293                           
 10294                           ;robot.c: 113: Lcd_Set_Cursor(1,1);
 10295  001996  0E01               	movlw	1
 10296  001998  6E04               	movwf	i2Lcd_Set_Cursor@b,c
 10297  00199A  0E01               	movlw	1
 10298  00199C  EC78  F012         	call	i2_Lcd_Set_Cursor
 10299                           
 10300                           ;robot.c: 114: Lcd_Write_String("Interruption TMR2");
 10301  0019A0  0E7F               	movlw	high STR_19
 10302  0019A2  6E06               	movwf	i2Lcd_Write_String@a+1,c
 10303  0019A4  0E43               	movlw	low STR_19
 10304  0019A6  6E05               	movwf	i2Lcd_Write_String@a,c
 10305  0019A8  EC10  F011         	call	i2_Lcd_Write_String	;wreg free
 10306                           
 10307                           ;robot.c: 115: PIE1bits.TMR2IE = 0;
 10308  0019AC  929D               	bcf	3997,1,c	;volatile
 10309  0019AE                     i2l4397:
 10310                           
 10311                           ;robot.c: 116: }
 10312                           ;robot.c: 117: PIR1bits.TMR2IF=0;
 10313  0019AE  929E               	bcf	3998,1,c	;volatile
 10314                           
 10315                           ;robot.c: 118: PIR1bits.RCIF=0;
 10316  0019B0  9A9E               	bcf	3998,5,c	;volatile
 10317  0019B2  C018  FFF5         	movff	??_TMRO_USART+13,tablat
 10318  0019B6  C017  FFF8         	movff	??_TMRO_USART+12,tblptru
 10319  0019BA  C016  FFF7         	movff	??_TMRO_USART+11,tblptrh
 10320  0019BE  C015  FFF6         	movff	??_TMRO_USART+10,tblptrl
 10321  0019C2  C014  FFF4         	movff	??_TMRO_USART+9,prodh
 10322  0019C6  C013  FFF3         	movff	??_TMRO_USART+8,prodl
 10323  0019CA  C012  FFDA         	movff	??_TMRO_USART+7,fsr2h
 10324  0019CE  C011  FFD9         	movff	??_TMRO_USART+6,fsr2l
 10325  0019D2  C010  FFE2         	movff	??_TMRO_USART+5,fsr1h
 10326  0019D6  C00F  FFE1         	movff	??_TMRO_USART+4,fsr1l
 10327  0019DA  C00E  FFEA         	movff	??_TMRO_USART+3,fsr0h
 10328  0019DE  C00D  FFE9         	movff	??_TMRO_USART+2,fsr0l
 10329  0019E2  C00C  FFFB         	movff	??_TMRO_USART+1,pclatu
 10330  0019E6  C00B  FFFA         	movff	??_TMRO_USART,pclath
 10331  0019EA  0011               	retfie		f
 10332  0019EC                     __end_of_TMRO_USART:
 10333                           	opt stack 0
 10334                           pclatu	equ	0xFFB
 10335                           pclath	equ	0xFFA
 10336                           tblptru	equ	0xFF8
 10337                           tblptrh	equ	0xFF7
 10338                           tblptrl	equ	0xFF6
 10339                           tablat	equ	0xFF5
 10340                           prodh	equ	0xFF4
 10341                           prodl	equ	0xFF3
 10342                           intcon	equ	0xFF2
 10343                           indf0	equ	0xFEF
 10344                           postinc0	equ	0xFEE
 10345                           fsr0h	equ	0xFEA
 10346                           fsr0l	equ	0xFE9
 10347                           wreg	equ	0xFE8
 10348                           postinc1	equ	0xFE6
 10349                           postdec1	equ	0xFE5
 10350                           fsr1h	equ	0xFE2
 10351                           fsr1l	equ	0xFE1
 10352                           indf2	equ	0xFDF
 10353                           postinc2	equ	0xFDE
 10354                           postdec2	equ	0xFDD
 10355                           fsr2h	equ	0xFDA
 10356                           fsr2l	equ	0xFD9
 10357                           status	equ	0xFD8
 10358                           
 10359 ;; *************** function i2_Lcd_Write_String *****************
 10360 ;; Defined at:
 10361 ;;		line 90 in file "lcd.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;  a               2    4[COMRAM] PTR unsigned char 
 10364 ;;		 -> STR_21(11), STR_20(7), STR_19(18), Lcd_Write_Integer@s(20), 
 10365 ;;		 -> Lcd_Write_Float@s(20), STR_16(8), STR_14(2), STR_13(2), 
 10366 ;;		 -> STR_12(2), STR_11(16), STR_10(7), 
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;  Lcd_Write_St    2    8[COMRAM] int 
 10369 ;; Return value:  Size  Location     Type
 10370 ;;		None               void
 10371 ;; Registers used:
 10372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10378 ;;      Params:         2       0       0       0       0       0       0       0       0
 10379 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10380 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10381 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10382 ;;Total ram usage:        6 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    2
 10385 ;; This function calls:
 10386 ;;		i2_Lcd_Write_Char
 10387 ;; This function is called by:
 10388 ;;		_TMRO_USART
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text52
 10393  002220                     __ptext52:
 10394                           	opt stack 0
 10395  002220                     i2_Lcd_Write_String:
 10396                           	opt stack 21
 10397                           
 10398                           ;lcd.c: 91: int i;
 10399                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
 10400                           
 10401                           ;incstack = 0
 10402  002220  0E00               	movlw	0
 10403  002222  6E0A               	movwf	i2Lcd_Write_String@i+1,c
 10404  002224  0E00               	movlw	0
 10405  002226  6E09               	movwf	i2Lcd_Write_String@i,c
 10406  002228  D01C               	goto	i2l4319
 10407  00222A                     i2l4315:
 10408                           
 10409                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
 10410  00222A  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10411  00222E  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10412  002232  5009               	movf	i2Lcd_Write_String@i,w,c
 10413  002234  2607               	addwf	??i2_Lcd_Write_String,f,c
 10414  002236  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10415  002238  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10416  00223A  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10417  00223E  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10418  002242  6AF8               	clrf	tblptru,c
 10419  002244  0E07               	movlw	(high __ramtop+-1)
 10420  002246  64F7               	cpfsgt	tblptrh,c
 10421  002248  D003               	bra	i2u457_47
 10422  00224A  0008               	tblrd		*
 10423  00224C  50F5               	movf	tablat,w,c
 10424  00224E  D005               	bra	i2u457_40
 10425  002250                     i2u457_47:
 10426  002250  CFF6 FFE9          	movff	tblptrl,fsr0l
 10427  002254  CFF7 FFEA          	movff	tblptrh,fsr0h
 10428  002258  50EF               	movf	indf0,w,c
 10429  00225A                     i2u457_40:
 10430  00225A  ECB3  F013         	call	i2_Lcd_Write_Char
 10431  00225E  4A09               	infsnz	i2Lcd_Write_String@i,f,c
 10432  002260  2A0A               	incf	i2Lcd_Write_String@i+1,f,c
 10433  002262                     i2l4319:
 10434  002262  C005  F007         	movff	i2Lcd_Write_String@a,??i2_Lcd_Write_String
 10435  002266  C006  F008         	movff	i2Lcd_Write_String@a+1,??i2_Lcd_Write_String+1
 10436  00226A  5009               	movf	i2Lcd_Write_String@i,w,c
 10437  00226C  2607               	addwf	??i2_Lcd_Write_String,f,c
 10438  00226E  500A               	movf	i2Lcd_Write_String@i+1,w,c
 10439  002270  2208               	addwfc	??i2_Lcd_Write_String+1,f,c
 10440  002272  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
 10441  002276  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
 10442  00227A  6AF8               	clrf	tblptru,c
 10443  00227C  0E07               	movlw	(high __ramtop+-1)
 10444  00227E  64F7               	cpfsgt	tblptrh,c
 10445  002280  D003               	bra	i2u458_47
 10446  002282  0008               	tblrd		*
 10447  002284  50F5               	movf	tablat,w,c
 10448  002286  D005               	bra	i2u458_40
 10449  002288                     i2u458_47:
 10450  002288  CFF6 FFE9          	movff	tblptrl,fsr0l
 10451  00228C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10452  002290  50EF               	movf	indf0,w,c
 10453  002292                     i2u458_40:
 10454  002292  0900               	iorlw	0
 10455  002294  B4D8               	btfsc	status,2,c
 10456  002296  0012               	return	
 10457  002298  D7C8               	goto	i2l4315
 10458  00229A                     __end_ofi2_Lcd_Write_String:
 10459                           	opt stack 0
 10460                           pclatu	equ	0xFFB
 10461                           pclath	equ	0xFFA
 10462                           tblptru	equ	0xFF8
 10463                           tblptrh	equ	0xFF7
 10464                           tblptrl	equ	0xFF6
 10465                           tablat	equ	0xFF5
 10466                           prodh	equ	0xFF4
 10467                           prodl	equ	0xFF3
 10468                           intcon	equ	0xFF2
 10469                           indf0	equ	0xFEF
 10470                           postinc0	equ	0xFEE
 10471                           fsr0h	equ	0xFEA
 10472                           fsr0l	equ	0xFE9
 10473                           wreg	equ	0xFE8
 10474                           postinc1	equ	0xFE6
 10475                           postdec1	equ	0xFE5
 10476                           fsr1h	equ	0xFE2
 10477                           fsr1l	equ	0xFE1
 10478                           indf2	equ	0xFDF
 10479                           postinc2	equ	0xFDE
 10480                           postdec2	equ	0xFDD
 10481                           fsr2h	equ	0xFDA
 10482                           fsr2l	equ	0xFD9
 10483                           status	equ	0xFD8
 10484                           
 10485 ;; *************** function i2_Lcd_Write_Char *****************
 10486 ;; Defined at:
 10487 ;;		line 75 in file "lcd.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;  a               1    wreg     unsigned char 
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  a               1    3[COMRAM] unsigned char 
 10492 ;;  Lcd_Write_Ch    1    2[COMRAM] unsigned char 
 10493 ;;  Lcd_Write_Ch    1    1[COMRAM] unsigned char 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;		None               void
 10496 ;; Registers used:
 10497 ;;		wreg, status,2, status,0, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10503 ;;      Params:         0       0       0       0       0       0       0       0       0
 10504 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10506 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10507 ;;Total ram usage:        3 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    1
 10510 ;; This function calls:
 10511 ;;		i2_Lcd_Port
 10512 ;; This function is called by:
 10513 ;;		i2_Lcd_Write_String
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text53
 10518  002766                     __ptext53:
 10519                           	opt stack 0
 10520  002766                     i2_Lcd_Write_Char:
 10521                           	opt stack 21
 10522                           
 10523                           ;incstack = 0
 10524                           ;i2Lcd_Write_Char@a stored from wreg
 10525  002766  6E04               	movwf	i2Lcd_Write_Char@a,c
 10526                           
 10527                           ;lcd.c: 76: char temp, y;
 10528                           ;lcd.c: 77: temp = a & 0x0F;
 10529  002768  5004               	movf	i2Lcd_Write_Char@a,w,c
 10530  00276A  0B0F               	andlw	15
 10531  00276C  6E02               	movwf	i2Lcd_Write_Char@temp,c
 10532                           
 10533                           ;lcd.c: 78: y = a & 0xF0;
 10534  00276E  5004               	movf	i2Lcd_Write_Char@a,w,c
 10535  002770  0BF0               	andlw	240
 10536  002772  6E03               	movwf	i2Lcd_Write_Char@y,c
 10537                           
 10538                           ;lcd.c: 79: PORTEbits.RE0 = 1;
 10539  002774  8084               	bsf	3972,0,c	;volatile
 10540                           
 10541                           ;lcd.c: 80: Lcd_Port(y >> 4);
 10542  002776  3803               	swapf	i2Lcd_Write_Char@y,w,c
 10543  002778  0B0F               	andlw	15
 10544  00277A  ECFE  F013         	call	i2_Lcd_Port
 10545                           
 10546                           ;lcd.c: 81: PORTEbits.RE2 = 1;
 10547  00277E  8484               	bsf	3972,2,c	;volatile
 10548                           
 10549                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10550  002780  0E0D               	movlw	13
 10551  002782                     i2u698_47:
 10552  002782  2EE8               	decfsz	wreg,f,c
 10553  002784  D7FE               	goto	i2u698_47
 10554  002786  F000               	nop	
 10555                           
 10556                           ;lcd.c: 83: PORTEbits.RE2 = 0;
 10557  002788  9484               	bcf	3972,2,c	;volatile
 10558                           
 10559                           ;lcd.c: 84: Lcd_Port(temp);
 10560  00278A  5002               	movf	i2Lcd_Write_Char@temp,w,c
 10561  00278C  ECFE  F013         	call	i2_Lcd_Port
 10562                           
 10563                           ;lcd.c: 85: PORTEbits.RE2 = 1;
 10564  002790  8484               	bsf	3972,2,c	;volatile
 10565                           
 10566                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
 10567  002792  0E0D               	movlw	13
 10568  002794                     i2u699_47:
 10569  002794  2EE8               	decfsz	wreg,f,c
 10570  002796  D7FE               	goto	i2u699_47
 10571  002798  F000               	nop	
 10572                           
 10573                           ;lcd.c: 87: PORTEbits.RE2 = 0;
 10574  00279A  9484               	bcf	3972,2,c	;volatile
 10575  00279C  0012               	return	
 10576  00279E                     __end_ofi2_Lcd_Write_Char:
 10577                           	opt stack 0
 10578                           pclatu	equ	0xFFB
 10579                           pclath	equ	0xFFA
 10580                           tblptru	equ	0xFF8
 10581                           tblptrh	equ	0xFF7
 10582                           tblptrl	equ	0xFF6
 10583                           tablat	equ	0xFF5
 10584                           prodh	equ	0xFF4
 10585                           prodl	equ	0xFF3
 10586                           intcon	equ	0xFF2
 10587                           indf0	equ	0xFEF
 10588                           postinc0	equ	0xFEE
 10589                           fsr0h	equ	0xFEA
 10590                           fsr0l	equ	0xFE9
 10591                           wreg	equ	0xFE8
 10592                           postinc1	equ	0xFE6
 10593                           postdec1	equ	0xFE5
 10594                           fsr1h	equ	0xFE2
 10595                           fsr1l	equ	0xFE1
 10596                           indf2	equ	0xFDF
 10597                           postinc2	equ	0xFDE
 10598                           postdec2	equ	0xFDD
 10599                           fsr2h	equ	0xFDA
 10600                           fsr2l	equ	0xFD9
 10601                           status	equ	0xFD8
 10602                           
 10603 ;; *************** function i2_Lcd_Set_Cursor *****************
 10604 ;; Defined at:
 10605 ;;		line 40 in file "lcd.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;  a               1    wreg     unsigned char 
 10608 ;;  b               1    3[COMRAM] unsigned char 
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  a               1    4[COMRAM] unsigned char 
 10611 ;;  Lcd_Set_Curs    1    7[COMRAM] unsigned char 
 10612 ;;  Lcd_Set_Curs    1    6[COMRAM] unsigned char 
 10613 ;;  Lcd_Set_Curs    1    5[COMRAM] unsigned char 
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10623 ;;      Params:         1       0       0       0       0       0       0       0       0
 10624 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10626 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10627 ;;Total ram usage:        5 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    2
 10630 ;; This function calls:
 10631 ;;		i2_Lcd_Cmd
 10632 ;; This function is called by:
 10633 ;;		_TMRO_USART
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           	psect	text54
 10638  0024F0                     __ptext54:
 10639                           	opt stack 0
 10640  0024F0                     i2_Lcd_Set_Cursor:
 10641                           	opt stack 21
 10642                           
 10643                           ;incstack = 0
 10644                           ;i2Lcd_Set_Cursor@a stored from wreg
 10645  0024F0  6E05               	movwf	i2Lcd_Set_Cursor@a,c
 10646                           
 10647                           ;lcd.c: 41: char temp, z, y;
 10648                           ;lcd.c: 42: if (a == 1) {
 10649  0024F2  0405               	decf	i2Lcd_Set_Cursor@a,w,c
 10650  0024F4  A4D8               	btfss	status,2,c
 10651  0024F6  D010               	goto	i2l4305
 10652                           
 10653                           ;lcd.c: 43: temp = 0x80 + b - 1;
 10654  0024F8  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10655  0024FA  0F7F               	addlw	127
 10656  0024FC  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10657                           
 10658                           ;lcd.c: 44: z = temp >> 4;
 10659  0024FE  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10660  002500  0B0F               	andlw	15
 10661  002502  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10662                           
 10663                           ;lcd.c: 45: y = temp & 0x0F;
 10664  002504  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10665  002506  0B0F               	andlw	15
 10666  002508  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10667                           
 10668                           ;lcd.c: 46: Lcd_Cmd(z);
 10669  00250A  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10670  00250C  EC5C  F014         	call	i2_Lcd_Cmd
 10671                           
 10672                           ;lcd.c: 47: Lcd_Cmd(y);
 10673  002510  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10674  002512  EC5C  F014         	call	i2_Lcd_Cmd
 10675                           
 10676                           ;lcd.c: 48: } else if (a == 2) {
 10677  002516  D013               	goto	i2l262
 10678  002518                     i2l4305:
 10679  002518  5005               	movf	i2Lcd_Set_Cursor@a,w,c
 10680  00251A  0A02               	xorlw	2
 10681  00251C  A4D8               	btfss	status,2,c
 10682  00251E  D00F               	goto	i2l262
 10683                           
 10684                           ;lcd.c: 49: temp = 0xC0 + b - 1;
 10685  002520  5004               	movf	i2Lcd_Set_Cursor@b,w,c
 10686  002522  0FBF               	addlw	191
 10687  002524  6E08               	movwf	i2Lcd_Set_Cursor@temp,c
 10688                           
 10689                           ;lcd.c: 50: z = temp >> 4;
 10690  002526  3808               	swapf	i2Lcd_Set_Cursor@temp,w,c
 10691  002528  0B0F               	andlw	15
 10692  00252A  6E06               	movwf	i2Lcd_Set_Cursor@z,c
 10693                           
 10694                           ;lcd.c: 51: y = temp & 0x0F;
 10695  00252C  5008               	movf	i2Lcd_Set_Cursor@temp,w,c
 10696  00252E  0B0F               	andlw	15
 10697  002530  6E07               	movwf	i2Lcd_Set_Cursor@y,c
 10698                           
 10699                           ;lcd.c: 52: Lcd_Cmd(z);
 10700  002532  5006               	movf	i2Lcd_Set_Cursor@z,w,c
 10701  002534  EC5C  F014         	call	i2_Lcd_Cmd
 10702                           
 10703                           ;lcd.c: 53: Lcd_Cmd(y);
 10704  002538  5007               	movf	i2Lcd_Set_Cursor@y,w,c
 10705  00253A  EC5C  F014         	call	i2_Lcd_Cmd
 10706  00253E                     i2l262:
 10707  00253E  0012               	return	
 10708  002540                     __end_ofi2_Lcd_Set_Cursor:
 10709                           	opt stack 0
 10710                           pclatu	equ	0xFFB
 10711                           pclath	equ	0xFFA
 10712                           tblptru	equ	0xFF8
 10713                           tblptrh	equ	0xFF7
 10714                           tblptrl	equ	0xFF6
 10715                           tablat	equ	0xFF5
 10716                           prodh	equ	0xFF4
 10717                           prodl	equ	0xFF3
 10718                           intcon	equ	0xFF2
 10719                           indf0	equ	0xFEF
 10720                           postinc0	equ	0xFEE
 10721                           fsr0h	equ	0xFEA
 10722                           fsr0l	equ	0xFE9
 10723                           wreg	equ	0xFE8
 10724                           postinc1	equ	0xFE6
 10725                           postdec1	equ	0xFE5
 10726                           fsr1h	equ	0xFE2
 10727                           fsr1l	equ	0xFE1
 10728                           indf2	equ	0xFDF
 10729                           postinc2	equ	0xFDE
 10730                           postdec2	equ	0xFDD
 10731                           fsr2h	equ	0xFDA
 10732                           fsr2l	equ	0xFD9
 10733                           status	equ	0xFD8
 10734                           
 10735 ;; *************** function i2_Lcd_Clear *****************
 10736 ;; Defined at:
 10737 ;;		line 35 in file "lcd.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;		None               void
 10744 ;; Registers used:
 10745 ;;		wreg, status,2, cstack
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    2
 10758 ;; This function calls:
 10759 ;;		i2_Lcd_Cmd
 10760 ;; This function is called by:
 10761 ;;		_TMRO_USART
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           	psect	text55
 10766  0029AC                     __ptext55:
 10767                           	opt stack 0
 10768  0029AC                     i2_Lcd_Clear:
 10769                           	opt stack 21
 10770                           
 10771                           ;lcd.c: 36: Lcd_Cmd(0);
 10772                           
 10773                           ;incstack = 0
 10774  0029AC  0E00               	movlw	0
 10775  0029AE  EC5C  F014         	call	i2_Lcd_Cmd
 10776                           
 10777                           ;lcd.c: 37: Lcd_Cmd(1);
 10778  0029B2  0E01               	movlw	1
 10779  0029B4  EC5C  F014         	call	i2_Lcd_Cmd
 10780  0029B8  0012               	return	
 10781  0029BA                     __end_ofi2_Lcd_Clear:
 10782                           	opt stack 0
 10783                           pclatu	equ	0xFFB
 10784                           pclath	equ	0xFFA
 10785                           tblptru	equ	0xFF8
 10786                           tblptrh	equ	0xFF7
 10787                           tblptrl	equ	0xFF6
 10788                           tablat	equ	0xFF5
 10789                           prodh	equ	0xFF4
 10790                           prodl	equ	0xFF3
 10791                           intcon	equ	0xFF2
 10792                           indf0	equ	0xFEF
 10793                           postinc0	equ	0xFEE
 10794                           fsr0h	equ	0xFEA
 10795                           fsr0l	equ	0xFE9
 10796                           wreg	equ	0xFE8
 10797                           postinc1	equ	0xFE6
 10798                           postdec1	equ	0xFE5
 10799                           fsr1h	equ	0xFE2
 10800                           fsr1l	equ	0xFE1
 10801                           indf2	equ	0xFDF
 10802                           postinc2	equ	0xFDE
 10803                           postdec2	equ	0xFDD
 10804                           fsr2h	equ	0xFDA
 10805                           fsr2l	equ	0xFD9
 10806                           status	equ	0xFD8
 10807                           
 10808 ;; *************** function i2_Lcd_Cmd *****************
 10809 ;; Defined at:
 10810 ;;		line 27 in file "lcd.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  a               1    wreg     unsigned char 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;  a               1    2[COMRAM] unsigned char 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;		None               void
 10817 ;; Registers used:
 10818 ;;		wreg, status,2, cstack
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0
 10825 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10826 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10827 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10828 ;;Total ram usage:        2 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:    1
 10831 ;; This function calls:
 10832 ;;		i2_Lcd_Port
 10833 ;; This function is called by:
 10834 ;;		i2_Lcd_Clear
 10835 ;;		i2_Lcd_Set_Cursor
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839                           	psect	text56
 10840  0028B8                     __ptext56:
 10841                           	opt stack 0
 10842  0028B8                     i2_Lcd_Cmd:
 10843                           	opt stack 21
 10844                           
 10845                           ;incstack = 0
 10846                           ;i2Lcd_Cmd@a stored from wreg
 10847  0028B8  6E03               	movwf	i2Lcd_Cmd@a,c
 10848                           
 10849                           ;lcd.c: 28: PORTEbits.RE0 = 0;
 10850  0028BA  9084               	bcf	3972,0,c	;volatile
 10851                           
 10852                           ;lcd.c: 29: Lcd_Port(a);
 10853  0028BC  5003               	movf	i2Lcd_Cmd@a,w,c
 10854  0028BE  ECFE  F013         	call	i2_Lcd_Port
 10855                           
 10856                           ;lcd.c: 30: PORTEbits.RE2 = 1;
 10857  0028C2  8484               	bsf	3972,2,c	;volatile
 10858                           
 10859                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
 10860  0028C4  0E06               	movlw	6
 10861  0028C6  6E02               	movwf	??i2_Lcd_Cmd& (0+255),c
 10862  0028C8  0E30               	movlw	48
 10863  0028CA                     i2u700_47:
 10864  0028CA  2EE8               	decfsz	wreg,f,c
 10865  0028CC  D7FE               	goto	i2u700_47
 10866  0028CE  2E02               	decfsz	??i2_Lcd_Cmd& (0+255),f,c
 10867  0028D0  D7FC               	goto	i2u700_47
 10868  0028D2  D000               	nop2	
 10869                           
 10870                           ;lcd.c: 32: PORTEbits.RE2 = 0;
 10871  0028D4  9484               	bcf	3972,2,c	;volatile
 10872  0028D6  0012               	return	
 10873  0028D8                     __end_ofi2_Lcd_Cmd:
 10874                           	opt stack 0
 10875                           pclatu	equ	0xFFB
 10876                           pclath	equ	0xFFA
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           intcon	equ	0xFF2
 10884                           indf0	equ	0xFEF
 10885                           postinc0	equ	0xFEE
 10886                           fsr0h	equ	0xFEA
 10887                           fsr0l	equ	0xFE9
 10888                           wreg	equ	0xFE8
 10889                           postinc1	equ	0xFE6
 10890                           postdec1	equ	0xFE5
 10891                           fsr1h	equ	0xFE2
 10892                           fsr1l	equ	0xFE1
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           postdec2	equ	0xFDD
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function i2_Lcd_Port *****************
 10901 ;; Defined at:
 10902 ;;		line 6 in file "lcd.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  a               1    wreg     unsigned char 
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  a               1    0[COMRAM] unsigned char 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;		None               void
 10909 ;; Registers used:
 10910 ;;		wreg
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10916 ;;      Params:         0       0       0       0       0       0       0       0       0
 10917 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10918 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10919 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10920 ;;Total ram usage:        1 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; This function calls:
 10923 ;;		Nothing
 10924 ;; This function is called by:
 10925 ;;		i2_Lcd_Cmd
 10926 ;;		i2_Lcd_Write_Char
 10927 ;; This function uses a non-reentrant model
 10928 ;;
 10929                           
 10930                           	psect	text57
 10931  0027FC                     __ptext57:
 10932                           	opt stack 0
 10933  0027FC                     i2_Lcd_Port:
 10934                           	opt stack 21
 10935                           
 10936                           ;incstack = 0
 10937                           ;i2Lcd_Port@a stored from wreg
 10938  0027FC  6E01               	movwf	i2Lcd_Port@a,c
 10939                           
 10940                           ;lcd.c: 7: if (a & 1)
 10941  0027FE  A001               	btfss	i2Lcd_Port@a,0,c
 10942  002800  D002               	goto	i2l242
 10943                           
 10944                           ;lcd.c: 8: PORTDbits.RD4 = 1;
 10945  002802  8883               	bsf	3971,4,c	;volatile
 10946  002804  D001               	goto	i2l3801
 10947  002806                     i2l242:
 10948                           
 10949                           ;lcd.c: 9: else
 10950                           ;lcd.c: 10: PORTDbits.RD4 = 0;
 10951  002806  9883               	bcf	3971,4,c	;volatile
 10952  002808                     i2l3801:
 10953                           
 10954                           ;lcd.c: 12: if (a & 2)
 10955  002808  A201               	btfss	i2Lcd_Port@a,1,c
 10956  00280A  D002               	goto	i2l244
 10957                           
 10958                           ;lcd.c: 13: PORTDbits.RD5 = 1;
 10959  00280C  8A83               	bsf	3971,5,c	;volatile
 10960  00280E  D001               	goto	i2l3805
 10961  002810                     i2l244:
 10962                           
 10963                           ;lcd.c: 14: else
 10964                           ;lcd.c: 15: PORTDbits.RD5 = 0;
 10965  002810  9A83               	bcf	3971,5,c	;volatile
 10966  002812                     i2l3805:
 10967                           
 10968                           ;lcd.c: 17: if (a & 4)
 10969  002812  A401               	btfss	i2Lcd_Port@a,2,c
 10970  002814  D002               	goto	i2l246
 10971                           
 10972                           ;lcd.c: 18: PORTDbits.RD6 = 1;
 10973  002816  8C83               	bsf	3971,6,c	;volatile
 10974  002818  D001               	goto	i2l3809
 10975  00281A                     i2l246:
 10976                           
 10977                           ;lcd.c: 19: else
 10978                           ;lcd.c: 20: PORTDbits.RD6 = 0;
 10979  00281A  9C83               	bcf	3971,6,c	;volatile
 10980  00281C                     i2l3809:
 10981                           
 10982                           ;lcd.c: 22: if (a & 8)
 10983  00281C  A601               	btfss	i2Lcd_Port@a,3,c
 10984  00281E  D002               	goto	i2l248
 10985                           
 10986                           ;lcd.c: 23: PORTDbits.RD7 = 1;
 10987  002820  8E83               	bsf	3971,7,c	;volatile
 10988  002822  D001               	goto	i2l250
 10989  002824                     i2l248:
 10990                           
 10991                           ;lcd.c: 24: else
 10992                           ;lcd.c: 25: PORTDbits.RD7 = 0;
 10993  002824  9E83               	bcf	3971,7,c	;volatile
 10994  002826                     i2l250:
 10995  002826  0012               	return	
 10996  002828                     __end_ofi2_Lcd_Port:
 10997                           	opt stack 0
 10998                           pclatu	equ	0xFFB
 10999                           pclath	equ	0xFFA
 11000                           tblptru	equ	0xFF8
 11001                           tblptrh	equ	0xFF7
 11002                           tblptrl	equ	0xFF6
 11003                           tablat	equ	0xFF5
 11004                           prodh	equ	0xFF4
 11005                           prodl	equ	0xFF3
 11006                           intcon	equ	0xFF2
 11007                           indf0	equ	0xFEF
 11008                           postinc0	equ	0xFEE
 11009                           fsr0h	equ	0xFEA
 11010                           fsr0l	equ	0xFE9
 11011                           wreg	equ	0xFE8
 11012                           postinc1	equ	0xFE6
 11013                           postdec1	equ	0xFE5
 11014                           fsr1h	equ	0xFE2
 11015                           fsr1l	equ	0xFE1
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           fsr2h	equ	0xFDA
 11020                           fsr2l	equ	0xFD9
 11021                           status	equ	0xFD8
 11022                           
 11023 ;; *************** function _ReadUSART *****************
 11024 ;; Defined at:
 11025 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uread.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  data            1    0[COMRAM] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0
 11040 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11042 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11043 ;;Total ram usage:        1 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_TMRO_USART
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           	psect	text58
 11053  002914                     __ptext58:
 11054                           	opt stack 0
 11055  002914                     _ReadUSART:
 11056                           	opt stack 23
 11057                           
 11058                           ;incstack = 0
 11059  002914  0EF2               	movlw	242
 11060  002916  163C               	andwf	_USART_Status,f,c
 11061  002918  ACAB               	btfss	4011,6,c	;volatile
 11062  00291A  D003               	goto	i2l618
 11063  00291C  903C               	bcf	_USART_Status,0,c
 11064  00291E  B0AB               	btfsc	4011,0,c	;volatile
 11065  002920  803C               	bsf	_USART_Status,0,c
 11066  002922                     i2l618:
 11067  002922  B4AB               	btfsc	4011,2,c	;volatile
 11068  002924  843C               	bsf	_USART_Status,2,c
 11069  002926  B2AB               	btfsc	4011,1,c	;volatile
 11070  002928  863C               	bsf	_USART_Status,3,c
 11071  00292A  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 11072  00292E  5001               	movf	ReadUSART@data,w,c
 11073  002930  0012               	return	
 11074  002932                     __end_of_ReadUSART:
 11075                           	opt stack 0
 11076                           pclatu	equ	0xFFB
 11077                           pclath	equ	0xFFA
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           intcon	equ	0xFF2
 11085                           indf0	equ	0xFEF
 11086                           postinc0	equ	0xFEE
 11087                           fsr0h	equ	0xFEA
 11088                           fsr0l	equ	0xFE9
 11089                           wreg	equ	0xFE8
 11090                           postinc1	equ	0xFE6
 11091                           postdec1	equ	0xFE5
 11092                           fsr1h	equ	0xFE2
 11093                           fsr1l	equ	0xFE1
 11094                           indf2	equ	0xFDF
 11095                           postinc2	equ	0xFDE
 11096                           postdec2	equ	0xFDD
 11097                           fsr2h	equ	0xFDA
 11098                           fsr2l	equ	0xFD9
 11099                           status	equ	0xFD8
 11100                           pclatu	equ	0xFFB
 11101                           pclath	equ	0xFFA
 11102                           tblptru	equ	0xFF8
 11103                           tblptrh	equ	0xFF7
 11104                           tblptrl	equ	0xFF6
 11105                           tablat	equ	0xFF5
 11106                           prodh	equ	0xFF4
 11107                           prodl	equ	0xFF3
 11108                           intcon	equ	0xFF2
 11109                           indf0	equ	0xFEF
 11110                           postinc0	equ	0xFEE
 11111                           fsr0h	equ	0xFEA
 11112                           fsr0l	equ	0xFE9
 11113                           wreg	equ	0xFE8
 11114                           postinc1	equ	0xFE6
 11115                           postdec1	equ	0xFE5
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125                           	psect	rparam
 11126  0000                     pclatu	equ	0xFFB
 11127                           pclath	equ	0xFFA
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           indf0	equ	0xFEF
 11136                           postinc0	equ	0xFEE
 11137                           fsr0h	equ	0xFEA
 11138                           fsr0l	equ	0xFE9
 11139                           wreg	equ	0xFE8
 11140                           postinc1	equ	0xFE6
 11141                           postdec1	equ	0xFE5
 11142                           fsr1h	equ	0xFE2
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           fsr2h	equ	0xFDA
 11148                           fsr2l	equ	0xFD9
 11149                           status	equ	0xFD8


Data Sizes:
    Strings     187
    Constant    118
    Data        20
    BSS         144
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    110     160
    BANK1           256     24     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_18(CODE[13]), STR_17(CODE[11]), STR_5(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), putcBluetoothInt@s(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1455$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[18]), Lcd_Write_Integer@s(BANK0[20]), 
		 -> Lcd_Write_Float@s(COMRAM[20]), STR_16(CODE[8]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[16]), STR_10(CODE[7]), 

    putSTRINGU1@dato	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 

    putcBluetoothString@a	PTR unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> comando(BANK0[20]), 

    SendBlueToothCommand@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[12]), 
		 -> BT_Init@nameBT(BANK0[18]), 


Critical Paths under _main in COMRAM

    _Lcd_Init->_Lcd_Cmd
    _BT_Init->_SendBlueToothCommand
    _SendBlueToothCommand->_putSTRINGU1
    _putSTRINGU1->_putcTxU1
    _putcTxU1->_WriteUSART
    _Pause_seg->_Pause_ms
    _putcBluetoothString->_UART1_Init
    _UART1_Init->_OpenUSART
    _PWM_init2->_OpenPWM2
    _PWM_init1->_OpenPWM1
    _PWM_DutyCycle2->___ftmul
    _PWM_DutyCycle1->___ftmul
    ___lbtoft->___ftpack
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMRO_USART in COMRAM

    _TMRO_USART->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Clear->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    _Inicializa_Driveby->_BT_Init
    _Comando_Tablet->_Lcd_Write_Integer
    _putcBluetoothInt->_sprintf
    _PWM_DutyCycle2->___fttol
    _PWM_DutyCycle1->___fttol
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _TMRO_USART in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Comando_Tablet
    _Comando_Tablet->_putcBluetoothInt

Critical Paths under _TMRO_USART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMRO_USART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMRO_USART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMRO_USART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMRO_USART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMRO_USART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMRO_USART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  141682
                     _Comando_Tablet
                 _Inicializa_Driveby
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _UART1_Init
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     279
                                             27 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Inicializa_Driveby                                   3     3      0    5630
                                             38 COMRAM     3     3      0
                            _BT_Init
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Pause_seg
                     _clrBufferUSART
 ---------------------------------------------------------------------------------
 (2) _BT_Init                                             18    18      0    2225
                                              0 BANK0     18    18      0
                          _Pause_seg
               _SendBlueToothCommand
                         _UART1_Init
 ---------------------------------------------------------------------------------
 (3) _SendBlueToothCommand                                 4     0      4    1317
                                             34 COMRAM     4     0      4
                        _putSTRINGU1
 ---------------------------------------------------------------------------------
 (4) _putSTRINGU1                                          8     4      4     485
                                             26 COMRAM     8     4      4
                           _putcTxU1
 ---------------------------------------------------------------------------------
 (5) _putcTxU1                                             1     1      0      62
                                             25 COMRAM     1     1      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _Pause_seg                                            2     2      0     450
                                             29 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (3) _Pause_ms                                             5     3      2     379
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Comando_Tablet                                       2     2      0  132471
                                             22 BANK1      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                          _PWM_init1
                          _PWM_init2
                     _clrBufferUSART
                      _getCNY70Value
                   _putcBluetoothInt
                _putcBluetoothString
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothString                                  6     4      2     656
                                             31 COMRAM     6     4      2
                         _UART1_Init
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _putcBluetoothInt                                    24    22      2   54981
                                             88 BANK0      2     0      2
                                              0 BANK1     22    22      0
                         _UART1_Init
                         _WriteUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART1_Init                                           1     1      0     418
                                             30 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            6     4      2     387
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _clrBufferUSART                                       2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init2                                            1     1      0      99
                                             27 COMRAM     1     1      0
                           _OpenPWM2
 ---------------------------------------------------------------------------------
 (3) _OpenPWM2                                             4     4      0      68
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PWM_init1                                            1     1      0      62
                                             25 COMRAM     1     1      0
                           _OpenPWM1
 ---------------------------------------------------------------------------------
 (3) _OpenPWM1                                             1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle2                                       9     9      0    8966
                                             34 BANK0      9     9      0
                          _SetDCPWM2
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM2                                            6     4      2     176
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWM_DutyCycle1                                       9     9      0    8966
                                             34 BANK0      9     9      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2464
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     176
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   55789
                                             88 BANK0     22    20      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   54197
                                             40 BANK0     48    41      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   12696
                                             12 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   12417
                                             12 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2696
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5499
                                             44 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     827
                                             24 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2612
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     756
                                             19 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4413
                                             34 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4080
                                             22 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2433
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     660
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2    1196
                                             28 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     254
                                             25 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1434
                                             27 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                             25 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _TMRO_USART                                          14    14      0     833
                                             10 COMRAM    14    14      0
                          _ReadUSART
                        i2_Lcd_Clear
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Set_Cursor                                     5     4      1     406
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Clear                                          0     0      0     110
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (10) i2_Lcd_Port                                          1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Comando_Tablet
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _PWM_DutyCycle1
       _SetDCPWM1
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_DutyCycle2
       _SetDCPWM2
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lbtoft
         ___ftpack
     _PWM_init1
       _OpenPWM1
     _PWM_init2
       _OpenPWM2
     _clrBufferUSART
     _getCNY70Value
     _putcBluetoothInt
       _UART1_Init
         _OpenUSART
       _WriteUSART
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putcBluetoothString
       _UART1_Init
         _OpenUSART
       _WriteUSART
   _Inicializa_Driveby
     _BT_Init
       _Pause_seg
         _Pause_ms
       _SendBlueToothCommand
         _putSTRINGU1
           _putcTxU1
             _WriteUSART
       _UART1_Init
         _OpenUSART
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Pause_seg
       _Pause_ms
     _clrBufferUSART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART1_Init
     _OpenUSART
   _clrBufferUSART

 _TMRO_USART (ROOT)
   _ReadUSART
   i2_Lcd_Clear
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     18      72       7       44.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     159      20        0.0%
DATA                 0      0     159       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Sep 07 19:27:41 2017

                            _i 00D6                              _j 0041        __size_of_PWM_DutyCycle1 007C  
      __size_of_PWM_DutyCycle2 007C                             l54 272C                             l59 233E  
                           l68 1FFC                  _InicioComando 0038                   ___awdiv@sign 0024  
          ___wmul@multiplicand 0029                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                 ___ftadd@exp1 0081                   ___ftadd@exp2 0080                   ___ftadd@sign 007F  
    __size_ofi2_Lcd_Write_Char 0038                            l250 27FA                            l242 27DA  
                          l218 2998                            l244 27E4                            l246 27EE  
                          l262 24EE                            l430 1AF8                            l423 1AC0  
                          l183 15E2                            l248 27F8                            l432 1B08  
                          l424 1B66                            l600 2398                            l184 1624  
                          l513 0592                            l434 1B20                            l426 1AD0  
                          l436 1B30                            l428 1AE8                            l604 23AC  
                          l605 23AE                            l197 27C2                            l438 1B46  
                          l606 23B8                            l607 23BA                            l609 23DC  
                          l466 0DB6                            l566 2632                            l567 263C  
                          l568 263E                            l918 17F6                            l927 17E6  
                          l959 1C0E                            l996 10CA                            l997 12DC  
                 __CFG_CPB$OFF 000000                            _PR2 000FCB                   __CFG_CPD$OFF 000000  
                 __CFG_BOR$OFF 000000                            _cad 003D                   ___awmod@sign 001E  
                          prod 000FF3                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           l1000 1104                           l1002 112C  
                         l1011 1216                           l1020 1240                           l1036 18F6  
                         l1060 1434                           l1045 18E6                           l1054 1FA4  
                         l1070 2866                           l1038 1866                           l1119 209C  
                         l1039 188E                           l1080 157E                           l1129 2432  
                         l5001 1F46                           l5011 1FA2                           l5005 1F76  
                         l5025 145E                           l5105 244A                           l5201 0346  
                         l5121 25C8                           l5043 14EC                           l5107 2456  
                         l5061 156E                           l5053 152A                           l5301 07B6  
                         l5213 03B8                           l5141 0066                           l5117 2596  
                         l4511 27E6                           l5055 1542                           l5047 1508  
                         l5071 204E                           l5231 0472                           l5143 00A2  
                         l5135 0052                           l5057 1548                           l5073 205A  
                         l4601 1300                           l5321 0838                           l5217 0420  
                         l5137 0060                           l5129 0030                           l4515 27F0  
                         l4507 27DC                           l5083 208E                           l5075 205E  
                         l5091 23F0                           l5323 084C                           l5315 0808  
                         l5331 090E                           l4533 10D8                           l5093 23FC  
                         l4621 1382                           l5253 0562                           l5237 049C  
                         l5245 053A                           l5181 024C                           l5173 01E4  
                         l5157 011C                           l5333 0932                           l5343 21E8  
                         l4471 1B78                           l5095 2400                           l4711 1EF4  
                         l4703 1ED4                           l4631 13CC                           l4607 1334  
                         l5271 0616                           l5247 0548                           l4561 1198  
                         l4545 1122                           l4705 1EDC                           l4625 13A0  
                         l5329 08FA                           l5281 0708                           l5185 0272  
                         l4465 2968                           l5433 231C                           l5339 21B0  
                         l4483 1BC4                           l4475 1B86                           l4563 11AC  
                         l4555 1164                           l4539 1112                           l5099 2424  
                         l4651 1CDA                           l4707 1EE0                           l4715 1EFE  
                         l4635 13EA                           l5283 0716                           l5267 05C4  
                         l5259 0596                           l5291 073C                           l5451 1FE2  
                         l4731 1E3A                           l4485 1BE2                           l4477 1B90  
                         l4581 126A                           l4573 11F8                           l4565 11B8  
                         l5197 0320                           l5189 02B8                           l5605 1B5E  
                         l5437 2346                           l4741 1E7C                           l4725 1DFC  
                         l4487 1BEC                           l4479 1BAE                           l4591 12B8  
                         l4575 120C                           l4567 11C4                           l4663 1D10  
                         l4719 1F0C                           l5375 262E                           l5455 2006  
                         l4735 1E52                           l5473 24C8                           l4665 1D18  
                         l4657 1CFA                           l5289 0730                           l4745 27B0  
                         l4931 18E2                           l4923 18BE                           l4683 1D50  
                         l4675 1D38                           l4667 1D1C                           l4851 0A9A  
                         l4837 100A                           l4829 0F26                           l4861 0B6C  
                         l5741 15AA                           l4919 18AE                           l4679 1D42  
                         l4695 1EAA                           l4767 239A                           l4759 238C  
                         l5735 158E                           l4945 171A                           l4929 18D6  
                         l4857 0B5C                           l4939 16EE                           l4891 182C  
                         l4699 1EC6                           l4875 0D86                           l5747 15C6  
                         l4981 17BE                           l4885 1812                           l4869 0CB8  
                         l5781 167C                           l4967 178C                           l4959 175C  
                         l5791 16BC                           l5871 1D94                           l4977 17AE  
                         l4987 17D6                           l5699 1A56                           l4989 17E2  
                         l5789 1698                           l5877 1DA2                           l5897 1DDC  
                         STR_1 7FB9                           STR_2 7F65                           STR_3 7FDB  
                         STR_4 7FDB                           STR_5 7FB6                           STR_6 7F74  
                         STR_7 7F82                           STR_8 7F9E                           STR_9 7F90  
              __end_of_BT_Init 1CB6                           u5111 1314                           _PIE1 000F9D  
                         u5120 1320                           u5300 1E72                           u6200 2218  
                         u5091 12F2                           u5307 1E68                           u5501 1808  
                         u6125 078E                           u5270 1E30                           u6207 220E  
                         u5521 1822                           u6225 268C                           u5610 170C  
                         u5277 1E26                           u6261 1C26                           u6190 21E0  
                         u5615 1702                           u6255 2652                           u5721 144E  
                         u5570 18C4                           u5740 148A                           u5660 17C4  
                         u6197 21D6                           u5590 16E0                           u5920 016C  
                         u6640 1B18                           u4881 1076                           u5745 1480  
                         u5905 00F6                           u5770 1510                           u4891 1096  
                         u5595 16D6                           u6740 1B40                           u5925 0160  
                         u6907 22BC                           u6917 22D2                           u6790 1B56  
                         u6927 1A0E                           u6937 1A46                           u6947 27B6  
                         u6957 274A                           u6967 275C                           u6977 28AA  
                         u6897 22A6                           _TMR2 000FCC              ?_Lcd_Write_String 001D  
                         _main 1D5A                   ___ftpack@arg 0019                   ___ftpack@exp 001C  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0018  
           ??_Lcd_Write_String 001F                  __CFG_IESO$OFF 000000                     _FinComandB 0036  
                   _FinComandT 0037                   _sprintf$1468 0098                __end_of_Lcd_Cmd 28B8  
                 _sprintf$2493 0095                  __CFG_MCLRE$ON 000000                   ___ftmul@cntr 006A  
                 ___ftmul@sign 006B                    ?_UART1_Init 0001                   ___fttol@exp1 0081  
                 ___fttol@lval 007D                     _ComanBFlag 0031        __size_of_clrBufferUSART 0038  
                __CFG_PLLDIV$1 000000                     _ComanTFlag 0032              _Lcd_Write_Integer 26BC  
               __CFG_CCP2MX$ON 000000                          ?_main 0001                __end_of___awdiv 1D5A  
              __end_of___ftadd 12DE                          STR_10 7FF3                          STR_11 7F55  
                        STR_12 7FFA                          STR_20 7FEC                          STR_13 7F53  
                        STR_21 7FC5                          STR_14 7FFC                          STR_15 7F72  
                        STR_16 7FE4                          STR_17 7FD0                          STR_18 7FAC  
                        STR_19 7F43                __end_of___awmod 1F16                __end_of___ftneg 2874  
              __end_of___lldiv 20AE                __end_of___ftmul 1436                ___awdiv@divisor 0021  
              __end_of___llmod 2444                __end_of___ftsub 260E                __end_of___fttol 1580  
                        _T2CON 000FCA                    _RXComandoTB 0039                 __CFG_DEBUG$OFF 000000  
           ?_Lcd_Write_Integer 00B8                          i2l250 2826                          i2l242 2806  
                        i2l244 2810                          i2l246 281A                          i2l262 253E  
                        i2l248 2824                          i2l361 198E                          i2l618 2922  
              ___awdiv@counter 0023                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTE 000F84                  __CFG_USBDIV$2 000000        __size_of_Lcd_Set_Cursor 0050  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000        PWM_DutyCycle1@DutyCycle 0086  
                __CFG_WRT3$OFF 000000                   ___lltoft@exp 0029                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_ofi2_Lcd_Cmd 0020                 __CFG_EBTRB$OFF 000000  
                  ?i2_Lcd_Port 0001                __end_of_dpowers 7EF5                          _array 0114  
          ??_Lcd_Write_Integer 0030                          _scale 0940                  ___ftpack@sign 001D  
                        tablat 000FF5        PWM_DutyCycle2@DutyCycle 0086                          status 000FD8  
              __end_of_sprintf 0940                 __CFG_ICPRT$OFF 000000                     Pause_seg@i 001F  
                   Pause_seg@x 001E               i2_Lcd_Set_Cursor 24F0                    ?_TMRO_USART 0001  
             __end_of_Lcd_Init 230C                 WriteUSART@data 0019               __end_of_Lcd_Port 27FC  
           __size_of_PWM_init1 001E             __size_of_PWM_init2 001E                __initialization 2540  
                 __end_of_main 1DF2      __end_of_Lcd_Write_Integer 26F6    __size_of_Inicializa_Driveby 00C4  
            ?_putcBluetoothInt 00B8               __end_of_OpenPWM1 2980               __end_of_OpenPWM2 2648  
                       ??_main 0030                  ___fttol@sign1 007C               __end_of_Pause_ms 27D0  
           __size_of_Lcd_Clear 000E                  __activetblptr 000003             ??_putcBluetoothInt 0030  
         __size_of__tdiv_to_l_ 0100                      ??_BT_Init 0027               ___llmod@dividend 0026  
                       ?_scale 006C                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 001F                putSTRINGU1@dato 001B                putSTRINGU1@cont 0022  
             __end_of___ftpack 1C10               __end_of___lbtoft 2898                putSTRINGU1@last 0021  
              clrBufferUSART@i 0019            __size_of_UART1_Init 0010               __end_of___lltoft 24A0  
                       i2l4305 2518                         i2l4315 222A                         i2l4319 2262  
                       i2l3801 2808                         i2l3805 2812                         i2l4381 1970  
                       i2l3809 281C                         i2l4385 1984                         i2l4397 19AE  
                       _INTCON 000FF2             __size_of_ReadUSART 001E            _putcBluetoothString 230C  
                    ??_Lcd_Cmd 001A                         _SPBRGH 000FB0             __size_of_SetDCPWM1 003A  
           __size_of_SetDCPWM2 003A        __size_of_Lcd_Write_Char 0038                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 7F43                         _Timer1 003B             __size_of_OpenUSART 0068  
__size_of_SendBlueToothCommand 0016                   ?i2_Lcd_Clear 0001                         ___ftge 1F16  
           __size_of_Pause_seg 0048              __end_ofi2_Lcd_Cmd 28D8                         ___wmul 2828  
                 ?_putSTRINGU1 001B                      ??___awdiv 0023                      ??___ftadd 007C  
               _PWM_DutyCycle1 212A                 _PWM_DutyCycle2 20AE                 __CFG_STVREN$ON 000000  
                    ??___awmod 001D                      ??___ftneg 001C                      ??___lldiv 0021  
                    ??___ftmul 002D                      ??___llmod 002E                      ??___ftsub 0030  
                    ??___fttol 0077            __size_ofi2_Lcd_Port 002C            i2Lcd_Write_String@a 0005  
          i2Lcd_Write_String@i 0009                         _packet 0046                         _lenght 0042  
                       _fround 0DB8                         clear_0 2546                         clear_1 2552  
                       clear_2 255E               ___awdiv@quotient 0025           ?_putcBluetoothString 0020  
               sprintf@vd_1470 00A0                ___awmod@divisor 001B                ___awmod@counter 001D  
             i2_Lcd_Write_Char 2766          ___ftmul@f3_as_product 0067                   __mediumconst 7ECC  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
          __size_of_TMRO_USART 19E4              __end_of_PWM_init1 2914              __end_of_PWM_init2 28F6  
             __end_of_putcTxU1 299E                      ??_sprintf 008F        __size_of_Comando_Tablet 0142  
              Lcd_Set_Cursor@a 001D                Lcd_Set_Cursor@b 001C                Lcd_Set_Cursor@y 001F  
              Lcd_Set_Cursor@z 001E                     __accesstop 0060        __end_of__initialization 2584  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 0076                     ___ftadd@f2 0079  
                   ___ftge@ff1 0019                     ___ftge@ff2 001C   PWM_DutyCycle2@percentageDuty 0088  
            __end_of_Lcd_Clear 29AC                     ___ftneg@f1 0019                     ___lbtoft@c 0024  
       __end_of_PWM_DutyCycle1 21A6         __end_of_PWM_DutyCycle2 212A                     ___ftmul@f1 0060  
                   ___ftmul@f2 0063                     ___ftsub@f1 0082                     ___ftsub@f2 0085  
                   ___fttol@f1 0073                     _WriteUSART 295C                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2948     __size_of_Lcd_Write_Integer 003A                     ___lltoft@c 0021  
               _clrBufferUSART 26F6                  __end_of_scale 0DB8          ??_putcBluetoothString 0022  
  __size_ofi2_Lcd_Write_String 007A              __end_of_ReadUSART 2932              __end_of_SetDCPWM1 26BC  
            __end_of_SetDCPWM2 2682              i2Lcd_Write_Char@a 0004              i2Lcd_Write_Char@y 0003  
               _Lcd_Set_Cursor 24A0                     __div_to_l_ 16C2                      ?_Lcd_Init 0001  
                ReadUSART@data 0001           putcBluetoothString@a 0020           putcBluetoothString@i 0024  
                    ?_Lcd_Port 0001              __end_of_OpenUSART 23DE                  UART1_Init@bdr 001F  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                   sprintf@integ 00A8  
            __end_of_Pause_seg 25D2                        ??_scale 0030                __div_to_l_@quot 0023  
         i2Lcd_Write_Char@temp 0002                     __pbssBANK0 00CE                     __pbssBANK1 0100  
                    ?_OpenPWM1 0001                      ?_OpenPWM2 0001                  __div_to_l_@f1 0019  
                __div_to_l_@f2 001C                      ?_Pause_ms 0019         __end_of_clrBufferUSART 272E  
              ?_PWM_DutyCycle1 0001                ?_PWM_DutyCycle2 0001                        ?___ftge 0019  
                 ??_UART1_Init 001F                        ?___wmul 0027            Inicializa_Driveby@i 0028  
       __size_of_getCNY70Value 00B8                        _CCP1CON 000FBD                        _CCP2CON 000FBA  
         i2Lcd_Set_Cursor@temp 0008    SendBlueToothCommand@command 0023                        ?_fround 006C  
    __size_of_Lcd_Write_String 007A                      ?___ftpack 0019                      ?___lbtoft 0021  
       __end_of_Lcd_Set_Cursor 24F0                      ?___lltoft 0021               putSTRINGU1@total 001D  
     __end_ofi2_Lcd_Set_Cursor 2540                        _BT_Init 1C10                        _SBUSART 003A  
                   ??_Lcd_Init 001C                   ??i2_Lcd_Port 0001                     ??_Lcd_Port 0019  
           __end_of_UART1_Init 2990                __CFG_VREGEN$OFF 000000                 _Lcd_Write_Char 272E  
                      _Lcd_Cmd 2898                        _Comando 0033                        _Med_lsb 00D0  
                      _Med_msb 00D2                     ??_OpenPWM1 0019                     ??_OpenPWM2 0019  
                   ??_Pause_ms 001B                   ??_TMRO_USART 000B              __end_of__npowers_ 7F1C  
                      __Hparam 0000                     _scale$2492 006F                        __Lparam 0000  
              ?_clrBufferUSART 0001                    ?_WriteUSART 0001                __size_of___ftge 0090  
                      ___awdiv 1CB6                        ___ftadd 105E                        ___awmod 1E86  
                    ?_putcTxU1 0001                        ___ftneg 284E                        ___lldiv 202C  
              __size_of___wmul 0026                        ___ftmul 12DE                        ___llmod 23DE  
                      ___ftsub 25D2                        ___fttol 1436             __end_ofi2_Lcd_Port 2828  
         __size_ofi2_Lcd_Clear 000E                        __pcinit 2540                     ??___ftpack 001E  
                   ??___lbtoft 0024           __size_of_putSTRINGU1 0094                __size_of_fround 02A6  
                 BT_Init@F5669 00EC                        __ramtop 0800                ?_Lcd_Set_Cursor 001C  
                   ??___lltoft 0025                        __ptext0 1D5A                        __ptext1 229A  
                      __ptext2 19EC                        __ptext3 1C10                        __ptext4 2932  
                      __ptext5 1DF2                        __ptext6 2990                        __ptext7 258A  
                      __ptext8 279E                        __ptext9 1580                        _comando 00D8  
                  ?__div_to_l_ 0019                        _countup 00FE                        _dpowers 7ECD  
                    _T2CONbits 000FCA               ___awmod@dividend 0019             __end_of_TMRO_USART 19EC  
               _Comando_Tablet 1580                        _sprintf 001C                  _getCNY70Value 1AB0  
       __end_of_Lcd_Write_Char 2766                 __pintcode_body 18F8           end_of_initialization 2584  
                  _TramaTablet 0100      __size_of_putcBluetoothInt 0086                        int_func 18F8  
     __end_ofi2_Lcd_Write_Char 279E                ___lldiv@divisor 001D                ___lldiv@counter 0025  
                    _RCSTAbits 000FAB     __end_of_Inicializa_Driveby 1AB0                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      Lcd_Port@a 0019                     ??_putcTxU1 001A  
                   _num_med_hi 0043                 __tdiv_to_l_@f1 0019                 __tdiv_to_l_@f2 001C  
                ??__tdiv_to_l_ 001F                      i2_Lcd_Cmd 28B8                      _PORTAbits 000F80  
                    _PORTBbits 000F81                      _PORTDbits 000F83                      _PORTEbits 000F84  
       __end_of_Comando_Tablet 16C2   __end_of_SendBlueToothCommand 2948                      _TRISBbits 000F93  
                    _TRISCbits 000F94                 ?_getCNY70Value 0019            __size_of_WriteUSART 0012  
              ?_Lcd_Write_Char 0001              Lcd_Write_String@a 001D              Lcd_Write_String@i 0021  
                    _PWM_init1 28F6                      _PWM_init2 28D8                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0136                    ___ftmul@exp 0066                      _Lcd_Clear 299E  
               __end_of___ftge 1FA6                 __end_of___wmul 284E               _Lcd_Write_String 21A6  
                   ?i2_Lcd_Cmd 0001                 __end_of_fround 105E            start_initialization 2540  
                    Pause_ms@i 001C                      Pause_ms@x 0019                ?_Comando_Tablet 0001  
                    _ReadUSART 2914                      _SetDCPWM1 2682                      _SetDCPWM2 2648  
              SetDCPWM1@DCycle 001D            __end_of__tdiv_to_l_ 18F8                SetDCPWM2@DCycle 001D  
                    _DutyCycle 00CE              __size_of_Lcd_Init 0072              __size_of_Lcd_Port 002C  
                   ?_PWM_init1 0001                     ?_PWM_init2 0001           Comando_Tablet@sensed 0170  
                    _OpenUSART 2376               ??_PWM_DutyCycle1 0082               ??_PWM_DutyCycle2 0082  
                    _Pause_seg 258A                ___llmod@divisor 002A                ___llmod@counter 002E  
  __end_of_putcBluetoothString 2376              __size_of_OpenPWM1 0012              __size_of_OpenPWM2 003A  
            __size_of_Pause_ms 0032                     ?_Lcd_Clear 0001                       ??___ftge 001F  
   __end_ofi2_Lcd_Write_String 229A                       ??___wmul 002B                    __pdataBANK0 00EC  
             __CFG_LPT1OSC$OFF 000000                Lcd_Write_Char@a 001C                Lcd_Write_Char@y 001B  
                     ??_fround 0030                 _num_med_medium 0045                     fround@prec 0075  
            __size_of___ftpack 00A8              __size_of___lbtoft 0024              __size_of___lltoft 005C  
                  __pbssCOMRAM 0030                ??_getCNY70Value 001B                     ?_ReadUSART 0001  
                     ?_BT_Init 0001                  __pcstackBANK0 0060                  __pcstackBANK1 015A  
            ?i2_Lcd_Set_Cursor 0004                     ?_SetDCPWM1 0019                     ?_SetDCPWM2 0019  
          __end_of__stringdata 7FFE             ??i2_Lcd_Set_Cursor 0005               _putcBluetoothInt 1FA6  
                   ?_OpenUSART 0019                       ?_Lcd_Cmd 0001                    sprintf@_val 00AD  
                  sprintf@flag 00A6               ??_clrBufferUSART 0019                     ?_Pause_seg 0001  
                  sprintf@fval 00B4                    sprintf@prec 00AB                      _cleanBfer 003E  
                 ??_WriteUSART 0019               ??_Lcd_Set_Cursor 001D           _SendBlueToothCommand 2932  
                    __pintcode 0008                  __pmediumconst 7ECC                       ?___awdiv 001F  
                     ?___ftadd 0076                       ?___awmod 0019                       ?___ftneg 0019  
                     ?___lldiv 0019                       ?___ftmul 0060                       ?___llmod 0026  
                     ?___ftsub 0082                      __npowers_ 7EF5                       ?___fttol 0073  
            putcTxU1@character 001A                    ??i2_Lcd_Cmd 0002              __size_of_putcTxU1 000E  
                  __tdiv_to_l_ 17F8                      _contador2 0040                   ??__div_to_l_ 001F  
    SendBlueToothCommand@total 0025                   _TamanhoTrama 00D4                       ?_sprintf 0088  
               __size_of_scale 0478             __end_of_WriteUSART 296E                    ??_PWM_init1 001A  
                  ??_PWM_init2 001C   PWM_DutyCycle1@percentageDuty 0088                  _ComandoTablet 0034  
               ___wmul@product 002B              ?i2_Lcd_Write_Char 0001                       _PIE1bits 000F9D  
                     Lcd_Cmd@a 001B                       _PIR1bits 000F9E             __end_of__div_to_l_ 17F8  
                     i2u700_47 28CA             ??i2_Lcd_Write_Char 0002                       i2u457_40 225A  
                     i2u457_47 2250                       i2u458_40 2292                       i2u458_47 2288  
        ?_SendBlueToothCommand 0023                       i2u469_40 198A                  ??i2_Lcd_Clear 0004  
                     i2u698_47 2782                       i2u699_47 2794                    ??_Lcd_Clear 001C  
             __CFG_WDTPS$32768 000000                  ??_putSTRINGU1 001F                     _ADCON1bits 000FC1  
                  __stringdata 7F43              ___wmul@multiplier 0027                       _CheckSum 0030  
             ??_Lcd_Write_Char 001A                    ??_ReadUSART 0001             _Inicializa_Driveby 19EC  
                  ??_SetDCPWM1 001B                    ??_SetDCPWM2 001B               __size_of_BT_Init 00A6  
                     _Lcd_Init 229A                       _Lcd_Port 27D0                      copy_data0 2578  
                     _EntTrama 0035            ?_Inicializa_Driveby 0001                  _BluetoothDato 0128  
     __end_of_Lcd_Write_String 2220                    ??_OpenUSART 001B             SetDCPWM1@dutycycle 0019  
                  ??_Pause_seg 001E                OpenUSART@config 001E               __size_of_Lcd_Cmd 0020  
                 _Timer2Config 0047                       _OpenPWM1 296E                       _OpenPWM2 260E  
                     _Pause_ms 279E                       __Hrparam 0000                       __Lrparam 0000  
           SetDCPWM2@dutycycle 0019               __size_of___awdiv 00A4               __size_of___ftadd 0280  
             __size_of___awmod 0090           ??_Inicializa_Driveby 0027               PWM_DutyCycle1@DC 0089  
             PWM_DutyCycle2@DC 0089               __size_of___ftneg 0026               __size_of___lldiv 0082  
             __size_of___ftmul 0158               __size_of___llmod 0066               __size_of___ftsub 003C  
             __size_of___fttol 014A               ??_Comando_Tablet 0030                       ___ftpack 1B68  
                     ___lbtoft 2874                    _fround$2490 0072                    _fround$2491 006F  
                     ___lltoft 2444            __end_ofi2_Lcd_Clear 29BA                 OpenPWM2@ccp2mx 001B  
        __CFG_FOSC$INTOSCIO_EC 000000            __end_of_putSTRINGU1 1E86                     sprintf@exp 00B2  
               OpenPWM1@period 0019                 OpenPWM2@period 001A                       __ptext10 230C  
                     __ptext11 1FA6                       __ptext20 296E                       __ptext12 295C  
                     __ptext21 20AE                       __ptext13 2980                       __ptext30 2828  
                     __ptext22 2648                       __ptext14 2376                       __ptext31 12DE  
                     __ptext23 212A                       __ptext15 1AB0                       __ptext40 25D2  
                     __ptext32 1E86                       __ptext24 2874                       __ptext16 26F6  
                     __ptext41 105E                       __ptext33 1CB6                       __ptext25 2682  
                     __ptext17 28D8                       __ptext50 27D0                       __ptext42 1B68  
                     __ptext34 17F8                       __ptext26 26BC                       __ptext18 260E  
                     __ptext43 284E                       __ptext35 16C2                       __ptext27 001C  
                     __ptext19 28F6                       __ptext52 2220                       __ptext44 1F16  
                     __ptext36 2444                       __ptext28 0940                       __ptext53 2766  
                     __ptext45 21A6                       __ptext37 23DE                       __ptext29 0DB8  
                     __ptext54 24F0                       __ptext46 272E                       __ptext38 202C  
                     __ptext55 29AC                       __ptext47 24A0                       __ptext39 1436  
                     __ptext56 28B8                       __ptext48 299E                       __ptext57 27FC  
                     __ptext49 2898                       __ptext58 2914                       __powers_ 7F1C  
              PWM_init1@period 001A                PWM_init2@period 001C                       _contador 003F  
             __size_of_sprintf 0924                  __size_of_main 0098         ??_SendBlueToothCommand 0027  
                     _putcTxU1 2990                    i2Lcd_Port@a 0001                  BT_Init@nameBT 0060  
     __end_of_putcBluetoothInt 202C          __CFG_CPUDIV$OSC1_PLL2 000000             i2_Lcd_Write_String 2220  
               OpenUSART@spbrg 0019                       scale@scl 0072              putcBluetoothInt@a 00B8  
            putcBluetoothInt@i 016E              putcBluetoothInt@s 015A             Lcd_Write_Char@temp 001A  
                     intlevel2 0000                      sprintf@ap 00A4               __tdiv_to_l_@exp1 0027  
                    sprintf@vd 009C               __tdiv_to_l_@cntr 0026                      sprintf@sp 0088  
          ?i2_Lcd_Write_String 0005               __tdiv_to_l_@quot 0022              i2Lcd_Set_Cursor@a 0005  
            i2Lcd_Set_Cursor@b 0004              i2Lcd_Set_Cursor@y 0007              i2Lcd_Set_Cursor@z 0006  
             ___lldiv@dividend 0019      __size_ofi2_Lcd_Set_Cursor 0050                     _OSCCONbits 000FD3  
                   i2Lcd_Cmd@a 0003                    i2_Lcd_Clear 29AC                     _UART1_Init 2980  
                  _putSTRINGU1 1DF2           ??i2_Lcd_Write_String 0007             Lcd_Set_Cursor@temp 0020  
 __size_of_putcBluetoothString 006A                   ?__tdiv_to_l_ 0019                    _num_med_low 0044  
                     sprintf@c 00B7                       sprintf@f 008A               ___lldiv@quotient 0021  
           Lcd_Write_Integer@a 00B8             Lcd_Write_Integer@s 00BA          __end_of_getCNY70Value 1B68  
                   i2_Lcd_Port 27FC                   _USART_Status 003C                     _TMRO_USART 0008  
